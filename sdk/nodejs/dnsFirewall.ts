// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsFirewall:DnsFirewall example '<account_id>/<dns_firewall_id>'
 * ```
 */
export class DnsFirewall extends pulumi.CustomResource {
    /**
     * Get an existing DnsFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsFirewallState, opts?: pulumi.CustomResourceOptions): DnsFirewall {
        return new DnsFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dnsFirewall:DnsFirewall';

    /**
     * Returns true if the given object is an instance of DnsFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsFirewall.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Attack mitigation settings
     */
    declare public readonly attackMitigation: pulumi.Output<outputs.DnsFirewallAttackMitigation>;
    /**
     * Whether to refuse to answer queries for the ANY type
     */
    declare public readonly deprecateAnyRequests: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly dnsFirewallIps: pulumi.Output<string[]>;
    /**
     * Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     */
    declare public readonly ecsFallback: pulumi.Output<boolean | undefined>;
    /**
     * Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     */
    declare public readonly maximumCacheTtl: pulumi.Output<number>;
    /**
     * Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     */
    declare public readonly minimumCacheTtl: pulumi.Output<number>;
    /**
     * Last modification of DNS Firewall cluster
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * DNS Firewall cluster name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     */
    declare public readonly negativeCacheTtl: pulumi.Output<number | undefined>;
    /**
     * Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     */
    declare public readonly ratelimit: pulumi.Output<number | undefined>;
    /**
     * Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     */
    declare public readonly retries: pulumi.Output<number>;
    declare public readonly upstreamIps: pulumi.Output<string[]>;

    /**
     * Create a DnsFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsFirewallArgs | DnsFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsFirewallState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["attackMitigation"] = state?.attackMitigation;
            resourceInputs["deprecateAnyRequests"] = state?.deprecateAnyRequests;
            resourceInputs["dnsFirewallIps"] = state?.dnsFirewallIps;
            resourceInputs["ecsFallback"] = state?.ecsFallback;
            resourceInputs["maximumCacheTtl"] = state?.maximumCacheTtl;
            resourceInputs["minimumCacheTtl"] = state?.minimumCacheTtl;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["negativeCacheTtl"] = state?.negativeCacheTtl;
            resourceInputs["ratelimit"] = state?.ratelimit;
            resourceInputs["retries"] = state?.retries;
            resourceInputs["upstreamIps"] = state?.upstreamIps;
        } else {
            const args = argsOrState as DnsFirewallArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.upstreamIps === undefined && !opts.urn) {
                throw new Error("Missing required property 'upstreamIps'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["attackMitigation"] = args?.attackMitigation;
            resourceInputs["deprecateAnyRequests"] = args?.deprecateAnyRequests;
            resourceInputs["ecsFallback"] = args?.ecsFallback;
            resourceInputs["maximumCacheTtl"] = args?.maximumCacheTtl;
            resourceInputs["minimumCacheTtl"] = args?.minimumCacheTtl;
            resourceInputs["name"] = args?.name;
            resourceInputs["negativeCacheTtl"] = args?.negativeCacheTtl;
            resourceInputs["ratelimit"] = args?.ratelimit;
            resourceInputs["retries"] = args?.retries;
            resourceInputs["upstreamIps"] = args?.upstreamIps;
            resourceInputs["dnsFirewallIps"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsFirewall.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsFirewall resources.
 */
export interface DnsFirewallState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Attack mitigation settings
     */
    attackMitigation?: pulumi.Input<inputs.DnsFirewallAttackMitigation>;
    /**
     * Whether to refuse to answer queries for the ANY type
     */
    deprecateAnyRequests?: pulumi.Input<boolean>;
    dnsFirewallIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     */
    ecsFallback?: pulumi.Input<boolean>;
    /**
     * Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     */
    maximumCacheTtl?: pulumi.Input<number>;
    /**
     * Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     */
    minimumCacheTtl?: pulumi.Input<number>;
    /**
     * Last modification of DNS Firewall cluster
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * DNS Firewall cluster name
     */
    name?: pulumi.Input<string>;
    /**
     * Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     */
    negativeCacheTtl?: pulumi.Input<number>;
    /**
     * Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     */
    ratelimit?: pulumi.Input<number>;
    /**
     * Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     */
    retries?: pulumi.Input<number>;
    upstreamIps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DnsFirewall resource.
 */
export interface DnsFirewallArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Attack mitigation settings
     */
    attackMitigation?: pulumi.Input<inputs.DnsFirewallAttackMitigation>;
    /**
     * Whether to refuse to answer queries for the ANY type
     */
    deprecateAnyRequests?: pulumi.Input<boolean>;
    /**
     * Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     */
    ecsFallback?: pulumi.Input<boolean>;
    /**
     * Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     */
    maximumCacheTtl?: pulumi.Input<number>;
    /**
     * Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     */
    minimumCacheTtl?: pulumi.Input<number>;
    /**
     * DNS Firewall cluster name
     */
    name: pulumi.Input<string>;
    /**
     * Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     */
    negativeCacheTtl?: pulumi.Input<number>;
    /**
     * Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     */
    ratelimit?: pulumi.Input<number>;
    /**
     * Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     */
    retries?: pulumi.Input<number>;
    upstreamIps: pulumi.Input<pulumi.Input<string>[]>;
}
