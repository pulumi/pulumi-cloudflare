// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicWanStaticRoute = new cloudflare.MagicWanStaticRoute("example_magic_wan_static_route", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     nexthop: "203.0.113.1",
 *     prefix: "192.0.2.0/24",
 *     priority: 0,
 *     description: "New route for new prefix 203.0.113.1",
 *     scope: {
 *         colo_names: ["den01"],
 *         colo_regions: ["APAC"],
 *     },
 *     weight: 0,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/staticRoute:StaticRoute example '<account_id>/<route_id>'
 * ```
 *
 * @deprecated cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute
 */
export class StaticRoute extends pulumi.CustomResource {
    /**
     * Get an existing StaticRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticRouteState, opts?: pulumi.CustomResourceOptions): StaticRoute {
        pulumi.log.warn("StaticRoute is deprecated: cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute")
        return new StaticRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/staticRoute:StaticRoute';

    /**
     * Returns true if the given object is an instance of StaticRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticRoute.__pulumiType;
    }

    /**
     * Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * When the route was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * An optional human provided description of the static route.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * When the route was last modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * The next-hop IP Address for the static route.
     */
    declare public readonly nexthop: pulumi.Output<string>;
    /**
     * IP Prefix in Classless Inter-Domain Routing format.
     */
    declare public readonly prefix: pulumi.Output<string>;
    /**
     * Priority of the static route.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * Used only for ECMP routes.
     */
    declare public readonly scope: pulumi.Output<outputs.StaticRouteScope | undefined>;
    /**
     * Optional weight of the ECMP scope - if provided.
     */
    declare public readonly weight: pulumi.Output<number | undefined>;

    /**
     * Create a StaticRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute */
    constructor(name: string, args: StaticRouteArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute */
    constructor(name: string, argsOrState?: StaticRouteArgs | StaticRouteState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("StaticRoute is deprecated: cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticRouteState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["description"] = state?.description;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["nexthop"] = state?.nexthop;
            resourceInputs["prefix"] = state?.prefix;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["weight"] = state?.weight;
        } else {
            const args = argsOrState as StaticRouteArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.nexthop === undefined && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if (args?.prefix === undefined && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["description"] = args?.description;
            resourceInputs["nexthop"] = args?.nexthop;
            resourceInputs["prefix"] = args?.prefix;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["weight"] = args?.weight;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/staticRoute:StaticRoute" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(StaticRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StaticRoute resources.
 */
export interface StaticRouteState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * When the route was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * An optional human provided description of the static route.
     */
    description?: pulumi.Input<string>;
    /**
     * When the route was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The next-hop IP Address for the static route.
     */
    nexthop?: pulumi.Input<string>;
    /**
     * IP Prefix in Classless Inter-Domain Routing format.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Priority of the static route.
     */
    priority?: pulumi.Input<number>;
    /**
     * Used only for ECMP routes.
     */
    scope?: pulumi.Input<inputs.StaticRouteScope>;
    /**
     * Optional weight of the ECMP scope - if provided.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a StaticRoute resource.
 */
export interface StaticRouteArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * An optional human provided description of the static route.
     */
    description?: pulumi.Input<string>;
    /**
     * The next-hop IP Address for the static route.
     */
    nexthop: pulumi.Input<string>;
    /**
     * IP Prefix in Classless Inter-Domain Routing format.
     */
    prefix: pulumi.Input<string>;
    /**
     * Priority of the static route.
     */
    priority: pulumi.Input<number>;
    /**
     * Used only for ECMP routes.
     */
    scope?: pulumi.Input<inputs.StaticRouteScope>;
    /**
     * Optional weight of the ECMP scope - if provided.
     */
    weight?: pulumi.Input<number>;
}
