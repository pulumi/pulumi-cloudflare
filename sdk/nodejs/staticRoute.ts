// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource, that manages Cloudflare static routes for Magic Transit or Magic WAN.
 * Static routes are used to route traffic through GRE tunnels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.StaticRoute("example", {
 *     accountId: "c4a7362d577a6c3019a474fd6f485821",
 *     coloNames: ["den01"],
 *     coloRegions: ["APAC"],
 *     description: "New route for new prefix 192.0.2.0/24",
 *     nexthop: "10.0.0.0",
 *     prefix: "192.0.2.0/24",
 *     priority: 100,
 *     weight: 10,
 * });
 * ```
 *
 * ## Import
 *
 * An existing static route can be imported using the account ID and static route ID
 *
 * ```sh
 *  $ pulumi import cloudflare:index/staticRoute:StaticRoute example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
 * ```
 */
export class StaticRoute extends pulumi.CustomResource {
    /**
     * Get an existing StaticRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticRouteState, opts?: pulumi.CustomResourceOptions): StaticRoute {
        return new StaticRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/staticRoute:StaticRoute';

    /**
     * Returns true if the given object is an instance of StaticRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticRoute.__pulumiType;
    }

    /**
     * The ID of the account where the static route is being created.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Optional list of Cloudflare colocation names for this static route.
     */
    public readonly coloNames!: pulumi.Output<string[] | undefined>;
    /**
     * Optional list of Cloudflare colocation regions for this static route.
     */
    public readonly coloRegions!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the static route.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The nexthop IP address where traffic will be routed to.
     */
    public readonly nexthop!: pulumi.Output<string>;
    /**
     * Your network prefix using CIDR notation.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * The priority for the static route.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The optional weight for ECMP routes.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a StaticRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StaticRouteArgs | StaticRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticRouteState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["coloNames"] = state ? state.coloNames : undefined;
            resourceInputs["coloRegions"] = state ? state.coloRegions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as StaticRouteArgs | undefined;
            if ((!args || args.nexthop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["coloNames"] = args ? args.coloNames : undefined;
            resourceInputs["coloRegions"] = args ? args.coloRegions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StaticRoute resources.
 */
export interface StaticRouteState {
    /**
     * The ID of the account where the static route is being created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Optional list of Cloudflare colocation names for this static route.
     */
    coloNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional list of Cloudflare colocation regions for this static route.
     */
    coloRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the static route.
     */
    description?: pulumi.Input<string>;
    /**
     * The nexthop IP address where traffic will be routed to.
     */
    nexthop?: pulumi.Input<string>;
    /**
     * Your network prefix using CIDR notation.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The priority for the static route.
     */
    priority?: pulumi.Input<number>;
    /**
     * The optional weight for ECMP routes.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a StaticRoute resource.
 */
export interface StaticRouteArgs {
    /**
     * The ID of the account where the static route is being created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Optional list of Cloudflare colocation names for this static route.
     */
    coloNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional list of Cloudflare colocation regions for this static route.
     */
    coloRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the static route.
     */
    description?: pulumi.Input<string>;
    /**
     * The nexthop IP address where traffic will be routed to.
     */
    nexthop: pulumi.Input<string>;
    /**
     * Your network prefix using CIDR notation.
     */
    prefix: pulumi.Input<string>;
    /**
     * The priority for the static route.
     */
    priority: pulumi.Input<number>;
    /**
     * The optional weight for ECMP routes.
     */
    weight?: pulumi.Input<number>;
}
