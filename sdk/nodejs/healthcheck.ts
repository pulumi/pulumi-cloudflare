// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/healthcheck:Healthcheck example '<zone_id>/<healthcheck_id>'
 * ```
 */
export class Healthcheck extends pulumi.CustomResource {
    /**
     * Get an existing Healthcheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthcheckState, opts?: pulumi.CustomResourceOptions): Healthcheck {
        return new Healthcheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/healthcheck:Healthcheck';

    /**
     * Returns true if the given object is an instance of Healthcheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Healthcheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Healthcheck.__pulumiType;
    }

    /**
     * The hostname or IP address of the origin server to run health checks on.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     */
    public readonly checkRegions!: pulumi.Output<string[] | undefined>;
    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     */
    public readonly consecutiveFails!: pulumi.Output<number>;
    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     */
    public readonly consecutiveSuccesses!: pulumi.Output<number>;
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * A human-readable description of the health check.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The current failure reason if status is unhealthy.
     */
    public /*out*/ readonly failureReason!: pulumi.Output<string>;
    /**
     * Parameters specific to an HTTP or HTTPS health check.
     */
    public readonly httpConfig!: pulumi.Output<outputs.HealthcheckHttpConfig>;
    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     */
    public readonly interval!: pulumi.Output<number>;
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    public readonly retries!: pulumi.Output<number>;
    /**
     * The current status of the origin server according to the health check.
     * Available values: "unknown", "healthy", "unhealthy", "suspended".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * If suspended, no health checks are sent to the origin.
     */
    public readonly suspended!: pulumi.Output<boolean>;
    /**
     * Parameters specific to TCP health check.
     */
    public readonly tcpConfig!: pulumi.Output<outputs.HealthcheckTcpConfig>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Healthcheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthcheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthcheckArgs | HealthcheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthcheckState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["checkRegions"] = state ? state.checkRegions : undefined;
            resourceInputs["consecutiveFails"] = state ? state.consecutiveFails : undefined;
            resourceInputs["consecutiveSuccesses"] = state ? state.consecutiveSuccesses : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["httpConfig"] = state ? state.httpConfig : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["tcpConfig"] = state ? state.tcpConfig : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as HealthcheckArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["checkRegions"] = args ? args.checkRegions : undefined;
            resourceInputs["consecutiveFails"] = args ? args.consecutiveFails : undefined;
            resourceInputs["consecutiveSuccesses"] = args ? args.consecutiveSuccesses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpConfig"] = args ? args.httpConfig : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["tcpConfig"] = args ? args.tcpConfig : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["failureReason"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Healthcheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Healthcheck resources.
 */
export interface HealthcheckState {
    /**
     * The hostname or IP address of the origin server to run health checks on.
     */
    address?: pulumi.Input<string>;
    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     */
    consecutiveFails?: pulumi.Input<number>;
    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     */
    consecutiveSuccesses?: pulumi.Input<number>;
    createdOn?: pulumi.Input<string>;
    /**
     * A human-readable description of the health check.
     */
    description?: pulumi.Input<string>;
    /**
     * The current failure reason if status is unhealthy.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Parameters specific to an HTTP or HTTPS health check.
     */
    httpConfig?: pulumi.Input<inputs.HealthcheckHttpConfig>;
    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     */
    interval?: pulumi.Input<number>;
    modifiedOn?: pulumi.Input<string>;
    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    retries?: pulumi.Input<number>;
    /**
     * The current status of the origin server according to the health check.
     * Available values: "unknown", "healthy", "unhealthy", "suspended".
     */
    status?: pulumi.Input<string>;
    /**
     * If suspended, no health checks are sent to the origin.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Parameters specific to TCP health check.
     */
    tcpConfig?: pulumi.Input<inputs.HealthcheckTcpConfig>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
     */
    type?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Healthcheck resource.
 */
export interface HealthcheckArgs {
    /**
     * The hostname or IP address of the origin server to run health checks on.
     */
    address: pulumi.Input<string>;
    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     */
    consecutiveFails?: pulumi.Input<number>;
    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     */
    consecutiveSuccesses?: pulumi.Input<number>;
    /**
     * A human-readable description of the health check.
     */
    description?: pulumi.Input<string>;
    /**
     * Parameters specific to an HTTP or HTTPS health check.
     */
    httpConfig?: pulumi.Input<inputs.HealthcheckHttpConfig>;
    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     */
    interval?: pulumi.Input<number>;
    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     */
    name: pulumi.Input<string>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    retries?: pulumi.Input<number>;
    /**
     * If suspended, no health checks are sent to the origin.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * Parameters specific to TCP health check.
     */
    tcpConfig?: pulumi.Input<inputs.HealthcheckTcpConfig>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
     */
    type?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
