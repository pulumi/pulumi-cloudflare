// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustGatewaySettings = new cloudflare.ZeroTrustGatewaySettings("example_zero_trust_gateway_settings", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     settings: {
 *         activity_log: {
 *             enabled: true,
 *         },
 *         antivirus: {
 *             enabledDownloadPhase: false,
 *             enabledUploadPhase: false,
 *             failClosed: false,
 *             notificationSettings: {
 *                 enabled: true,
 *                 includeContext: true,
 *                 msg: "msg",
 *                 supportUrl: "support_url",
 *             },
 *         },
 *         block_page: {
 *             backgroundColor: "background_color",
 *             enabled: true,
 *             footerText: "--footer--",
 *             headerText: "--header--",
 *             includeContext: true,
 *             logoPath: "https://logos.com/a.png",
 *             mailtoAddress: "admin@example.com",
 *             mailtoSubject: "Blocked User Inquiry",
 *             mode: "",
 *             name: "Cloudflare",
 *             suppressFooter: false,
 *             targetUri: "https://example.com",
 *         },
 *         body_scanning: {
 *             inspectionMode: "deep",
 *         },
 *         browser_isolation: {
 *             nonIdentityEnabled: true,
 *             urlBrowserIsolationEnabled: true,
 *         },
 *         certificate: {
 *             id: "d1b364c5-1311-466e-a194-f0e943e0799f",
 *         },
 *         custom_certificate: {
 *             enabled: true,
 *             id: "d1b364c5-1311-466e-a194-f0e943e0799f",
 *         },
 *         extended_email_matching: {
 *             enabled: true,
 *         },
 *         fips: {
 *             tls: true,
 *         },
 *         host_selector: {
 *             enabled: false,
 *         },
 *         inspection: {
 *             mode: "static",
 *         },
 *         protocol_detection: {
 *             enabled: true,
 *         },
 *         sandbox: {
 *             enabled: true,
 *             fallbackAction: "allow",
 *         },
 *         tls_decrypt: {
 *             enabled: true,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings example '<account_id>'
 * ```
 */
export class ZeroTrustGatewaySettings extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustGatewaySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustGatewaySettingsState, opts?: pulumi.CustomResourceOptions): ZeroTrustGatewaySettings {
        return new ZeroTrustGatewaySettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings';

    /**
     * Returns true if the given object is an instance of ZeroTrustGatewaySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustGatewaySettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustGatewaySettings.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specify account settings.
     */
    declare public readonly settings: pulumi.Output<outputs.ZeroTrustGatewaySettingsSettings | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a ZeroTrustGatewaySettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustGatewaySettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustGatewaySettingsArgs | ZeroTrustGatewaySettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustGatewaySettingsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ZeroTrustGatewaySettingsArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/teamsAccount:TeamsAccount" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustGatewaySettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustGatewaySettings resources.
 */
export interface ZeroTrustGatewaySettingsState {
    accountId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * Specify account settings.
     */
    settings?: pulumi.Input<inputs.ZeroTrustGatewaySettingsSettings>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustGatewaySettings resource.
 */
export interface ZeroTrustGatewaySettingsArgs {
    accountId: pulumi.Input<string>;
    /**
     * Specify account settings.
     */
    settings?: pulumi.Input<inputs.ZeroTrustGatewaySettingsSettings>;
}
