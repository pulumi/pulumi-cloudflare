// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRegionalTieredCache = new cloudflare.RegionalTieredCache("example_regional_tiered_cache", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     value: "on",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/regionalTieredCache:RegionalTieredCache example '<zone_id>'
 * ```
 */
export class RegionalTieredCache extends pulumi.CustomResource {
    /**
     * Get an existing RegionalTieredCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionalTieredCacheState, opts?: pulumi.CustomResourceOptions): RegionalTieredCache {
        return new RegionalTieredCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/regionalTieredCache:RegionalTieredCache';

    /**
     * Returns true if the given object is an instance of RegionalTieredCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionalTieredCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionalTieredCache.__pulumiType;
    }

    /**
     * Whether the setting is editable
     */
    public /*out*/ readonly editable!: pulumi.Output<boolean>;
    /**
     * Last time this setting was modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * Value of the Regional Tiered Cache zone setting.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a RegionalTieredCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionalTieredCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionalTieredCacheArgs | RegionalTieredCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionalTieredCacheState | undefined;
            resourceInputs["editable"] = state ? state.editable : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RegionalTieredCacheArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["editable"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionalTieredCache.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionalTieredCache resources.
 */
export interface RegionalTieredCacheState {
    /**
     * Whether the setting is editable
     */
    editable?: pulumi.Input<boolean>;
    /**
     * Last time this setting was modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Value of the Regional Tiered Cache zone setting.
     */
    value?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegionalTieredCache resource.
 */
export interface RegionalTieredCacheArgs {
    /**
     * Value of the Regional Tiered Cache zone setting.
     */
    value?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
