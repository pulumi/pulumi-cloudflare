// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class Snippet extends pulumi.CustomResource {
    /**
     * Get an existing Snippet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnippetState, opts?: pulumi.CustomResourceOptions): Snippet {
        return new Snippet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/snippet:Snippet';

    /**
     * Returns true if the given object is an instance of Snippet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snippet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snippet.__pulumiType;
    }

    /**
     * The timestamp of when the snippet was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * The list of files belonging to the snippet.
     */
    public readonly files!: pulumi.Output<outputs.SnippetFile[]>;
    /**
     * Metadata about the snippet.
     */
    public readonly metadata!: pulumi.Output<outputs.SnippetMetadata>;
    /**
     * The timestamp of when the snippet was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * The identifying name of the snippet.
     */
    public readonly snippetName!: pulumi.Output<string>;
    /**
     * The unique ID of the zone.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Snippet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnippetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnippetArgs | SnippetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnippetState | undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["snippetName"] = state ? state.snippetName : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as SnippetArgs | undefined;
            if ((!args || args.files === undefined) && !opts.urn) {
                throw new Error("Missing required property 'files'");
            }
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.snippetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snippetName'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["snippetName"] = args ? args.snippetName : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snippet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Snippet resources.
 */
export interface SnippetState {
    /**
     * The timestamp of when the snippet was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The list of files belonging to the snippet.
     */
    files?: pulumi.Input<pulumi.Input<inputs.SnippetFile>[]>;
    /**
     * Metadata about the snippet.
     */
    metadata?: pulumi.Input<inputs.SnippetMetadata>;
    /**
     * The timestamp of when the snippet was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The identifying name of the snippet.
     */
    snippetName?: pulumi.Input<string>;
    /**
     * The unique ID of the zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snippet resource.
 */
export interface SnippetArgs {
    /**
     * The list of files belonging to the snippet.
     */
    files: pulumi.Input<pulumi.Input<inputs.SnippetFile>[]>;
    /**
     * Metadata about the snippet.
     */
    metadata: pulumi.Input<inputs.SnippetMetadata>;
    /**
     * The identifying name of the snippet.
     */
    snippetName: pulumi.Input<string>;
    /**
     * The unique ID of the zone.
     */
    zoneId: pulumi.Input<string>;
}
