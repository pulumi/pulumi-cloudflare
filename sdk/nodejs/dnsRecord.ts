// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsRecord = new cloudflare.DnsRecord("example_dns_record", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: "example.com",
 *     ttl: 3600,
 *     type: "A",
 *     comment: "Domain verification record",
 *     content: "198.51.100.4",
 *     proxied: true,
 *     settings: {
 *         ipv4_only: true,
 *         ipv6_only: true,
 *     },
 *     tags: ["owner:dns-team"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsRecord:DnsRecord example '<zone_id>/<dns_record_id>'
 * ```
 */
export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * When the record comment was last modified. Omitted if there is no comment.
     */
    declare public /*out*/ readonly commentModifiedOn: pulumi.Output<string>;
    /**
     * A valid IPv4 address.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * When the record was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Components of a CAA record.
     */
    declare public readonly data: pulumi.Output<outputs.DnsRecordData | undefined>;
    /**
     * Extra Cloudflare-specific information about the record.
     */
    declare public /*out*/ readonly meta: pulumi.Output<string>;
    /**
     * When the record was last modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    declare public readonly priority: pulumi.Output<number | undefined>;
    /**
     * Whether the record can be proxied by Cloudflare or not.
     */
    declare public /*out*/ readonly proxiable: pulumi.Output<boolean>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    declare public readonly proxied: pulumi.Output<boolean>;
    /**
     * Settings for the DNS record.
     */
    declare public readonly settings: pulumi.Output<outputs.DnsRecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * When the record tags were last modified. Omitted if there are no tags.
     */
    declare public /*out*/ readonly tagsModifiedOn: pulumi.Output<string>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    declare public readonly ttl: pulumi.Output<number>;
    /**
     * Record type.
     * Available values: "A", "AAAA", "CNAME", "MX", "NS", "OPENPGPKEY", "PTR", "TXT", "CAA", "CERT", "DNSKEY", "DS", "HTTPS", "LOC", "NAPTR", "SMIMEA", "SRV", "SSHFP", "SVCB", "TLSA", "URI".
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Identifier.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["commentModifiedOn"] = state?.commentModifiedOn;
            resourceInputs["content"] = state?.content;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["data"] = state?.data;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["proxiable"] = state?.proxiable;
            resourceInputs["proxied"] = state?.proxied;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsModifiedOn"] = state?.tagsModifiedOn;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.ttl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["content"] = args?.content;
            resourceInputs["data"] = args?.data;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["proxied"] = args?.proxied;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["commentModifiedOn"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["proxiable"] = undefined /*out*/;
            resourceInputs["tagsModifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/record:Record" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * When the record comment was last modified. Omitted if there is no comment.
     */
    commentModifiedOn?: pulumi.Input<string>;
    /**
     * A valid IPv4 address.
     */
    content?: pulumi.Input<string>;
    /**
     * When the record was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Components of a CAA record.
     */
    data?: pulumi.Input<inputs.DnsRecordData>;
    /**
     * Extra Cloudflare-specific information about the record.
     */
    meta?: pulumi.Input<string>;
    /**
     * When the record was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    name?: pulumi.Input<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether the record can be proxied by Cloudflare or not.
     */
    proxiable?: pulumi.Input<boolean>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Settings for the DNS record.
     */
    settings?: pulumi.Input<inputs.DnsRecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the record tags were last modified. Omitted if there are no tags.
     */
    tagsModifiedOn?: pulumi.Input<string>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Record type.
     * Available values: "A", "AAAA", "CNAME", "MX", "NS", "OPENPGPKEY", "PTR", "TXT", "CAA", "CERT", "DNSKEY", "DS", "HTTPS", "LOC", "NAPTR", "SMIMEA", "SRV", "SSHFP", "SVCB", "TLSA", "URI".
     */
    type?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * A valid IPv4 address.
     */
    content?: pulumi.Input<string>;
    /**
     * Components of a CAA record.
     */
    data?: pulumi.Input<inputs.DnsRecordData>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    name: pulumi.Input<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Settings for the DNS record.
     */
    settings?: pulumi.Input<inputs.DnsRecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    ttl: pulumi.Input<number>;
    /**
     * Record type.
     * Available values: "A", "AAAA", "CNAME", "MX", "NS", "OPENPGPKEY", "PTR", "TXT", "CAA", "CERT", "DNSKEY", "DS", "HTTPS", "LOC", "NAPTR", "SMIMEA", "SRV", "SSHFP", "SVCB", "TLSA", "URI".
     */
    type: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
