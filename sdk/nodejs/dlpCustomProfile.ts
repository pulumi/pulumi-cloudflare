// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dlpCustomProfile:DlpCustomProfile example '<account_id>/<profile_id>'
 * ```
 *
 * @deprecated cloudflare.index/dlpcustomprofile.DlpCustomProfile has been deprecated in favor of cloudflare.index/zerotrustdlpcustomprofile.ZeroTrustDlpCustomProfile
 */
export class DlpCustomProfile extends pulumi.CustomResource {
    /**
     * Get an existing DlpCustomProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlpCustomProfileState, opts?: pulumi.CustomResourceOptions): DlpCustomProfile {
        pulumi.log.warn("DlpCustomProfile is deprecated: cloudflare.index/dlpcustomprofile.DlpCustomProfile has been deprecated in favor of cloudflare.index/zerotrustdlpcustomprofile.ZeroTrustDlpCustomProfile")
        return new DlpCustomProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dlpCustomProfile:DlpCustomProfile';

    /**
     * Returns true if the given object is an instance of DlpCustomProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlpCustomProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlpCustomProfile.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public readonly aiContextEnabled!: pulumi.Output<boolean>;
    /**
     * Related DLP policies will trigger when the match count exceeds the number set.
     */
    public readonly allowedMatchCount!: pulumi.Output<number>;
    public readonly confidenceThreshold!: pulumi.Output<string>;
    /**
     * Scan the context of predefined entries to only return matches surrounded by keywords.
     *
     * @deprecated This attribute is deprecated.
     */
    public readonly contextAwareness!: pulumi.Output<outputs.DlpCustomProfileContextAwareness | undefined>;
    /**
     * When the profile was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the profile.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Custom entries from this profile.
     * If this field is omitted, entries owned by this profile will not be changed.
     *
     * @deprecated This attribute is deprecated.
     */
    public readonly entries!: pulumi.Output<outputs.DlpCustomProfileEntry[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ocrEnabled!: pulumi.Output<boolean>;
    /**
     * Whether this profile can be accessed by anyone.
     */
    public /*out*/ readonly openAccess!: pulumi.Output<boolean>;
    /**
     * Entries from other profiles (e.g. pre-defined Cloudflare profiles, or your Microsoft Information Protection profiles).
     */
    public readonly sharedEntries!: pulumi.Output<outputs.DlpCustomProfileSharedEntry[] | undefined>;
    /**
     * Available values: "custom", "predefined", "integration".
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * When the profile was lasted updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DlpCustomProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/dlpcustomprofile.DlpCustomProfile has been deprecated in favor of cloudflare.index/zerotrustdlpcustomprofile.ZeroTrustDlpCustomProfile */
    constructor(name: string, args: DlpCustomProfileArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/dlpcustomprofile.DlpCustomProfile has been deprecated in favor of cloudflare.index/zerotrustdlpcustomprofile.ZeroTrustDlpCustomProfile */
    constructor(name: string, argsOrState?: DlpCustomProfileArgs | DlpCustomProfileState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("DlpCustomProfile is deprecated: cloudflare.index/dlpcustomprofile.DlpCustomProfile has been deprecated in favor of cloudflare.index/zerotrustdlpcustomprofile.ZeroTrustDlpCustomProfile")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlpCustomProfileState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["aiContextEnabled"] = state ? state.aiContextEnabled : undefined;
            resourceInputs["allowedMatchCount"] = state ? state.allowedMatchCount : undefined;
            resourceInputs["confidenceThreshold"] = state ? state.confidenceThreshold : undefined;
            resourceInputs["contextAwareness"] = state ? state.contextAwareness : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entries"] = state ? state.entries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocrEnabled"] = state ? state.ocrEnabled : undefined;
            resourceInputs["openAccess"] = state ? state.openAccess : undefined;
            resourceInputs["sharedEntries"] = state ? state.sharedEntries : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DlpCustomProfileArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["aiContextEnabled"] = args ? args.aiContextEnabled : undefined;
            resourceInputs["allowedMatchCount"] = args ? args.allowedMatchCount : undefined;
            resourceInputs["confidenceThreshold"] = args ? args.confidenceThreshold : undefined;
            resourceInputs["contextAwareness"] = args ? args.contextAwareness : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entries"] = args ? args.entries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocrEnabled"] = args ? args.ocrEnabled : undefined;
            resourceInputs["sharedEntries"] = args ? args.sharedEntries : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["openAccess"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/dlpCustomProfile:DlpCustomProfile" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DlpCustomProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DlpCustomProfile resources.
 */
export interface DlpCustomProfileState {
    accountId?: pulumi.Input<string>;
    aiContextEnabled?: pulumi.Input<boolean>;
    /**
     * Related DLP policies will trigger when the match count exceeds the number set.
     */
    allowedMatchCount?: pulumi.Input<number>;
    confidenceThreshold?: pulumi.Input<string>;
    /**
     * Scan the context of predefined entries to only return matches surrounded by keywords.
     *
     * @deprecated This attribute is deprecated.
     */
    contextAwareness?: pulumi.Input<inputs.DlpCustomProfileContextAwareness>;
    /**
     * When the profile was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the profile.
     */
    description?: pulumi.Input<string>;
    /**
     * Custom entries from this profile.
     * If this field is omitted, entries owned by this profile will not be changed.
     *
     * @deprecated This attribute is deprecated.
     */
    entries?: pulumi.Input<pulumi.Input<inputs.DlpCustomProfileEntry>[]>;
    name?: pulumi.Input<string>;
    ocrEnabled?: pulumi.Input<boolean>;
    /**
     * Whether this profile can be accessed by anyone.
     */
    openAccess?: pulumi.Input<boolean>;
    /**
     * Entries from other profiles (e.g. pre-defined Cloudflare profiles, or your Microsoft Information Protection profiles).
     */
    sharedEntries?: pulumi.Input<pulumi.Input<inputs.DlpCustomProfileSharedEntry>[]>;
    /**
     * Available values: "custom", "predefined", "integration".
     */
    type?: pulumi.Input<string>;
    /**
     * When the profile was lasted updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DlpCustomProfile resource.
 */
export interface DlpCustomProfileArgs {
    accountId: pulumi.Input<string>;
    aiContextEnabled?: pulumi.Input<boolean>;
    /**
     * Related DLP policies will trigger when the match count exceeds the number set.
     */
    allowedMatchCount?: pulumi.Input<number>;
    confidenceThreshold?: pulumi.Input<string>;
    /**
     * Scan the context of predefined entries to only return matches surrounded by keywords.
     *
     * @deprecated This attribute is deprecated.
     */
    contextAwareness?: pulumi.Input<inputs.DlpCustomProfileContextAwareness>;
    /**
     * The description of the profile.
     */
    description?: pulumi.Input<string>;
    /**
     * Custom entries from this profile.
     * If this field is omitted, entries owned by this profile will not be changed.
     *
     * @deprecated This attribute is deprecated.
     */
    entries?: pulumi.Input<pulumi.Input<inputs.DlpCustomProfileEntry>[]>;
    name: pulumi.Input<string>;
    ocrEnabled?: pulumi.Input<boolean>;
    /**
     * Entries from other profiles (e.g. pre-defined Cloudflare profiles, or your Microsoft Information Protection profiles).
     */
    sharedEntries?: pulumi.Input<pulumi.Input<inputs.DlpCustomProfileSharedEntry>[]>;
}
