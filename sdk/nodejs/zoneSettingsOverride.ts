// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource which customizes Cloudflare zone settings.
 *
 * > You **should not** use this resource to manage every zone setting. This
 *   resource is only intended to override those which you do not want the default.
 *   Attempting to manage all settings will result in problems with the resource
 *   applying in a consistent manner.
 *
 * ## Plan-Dependent Settings
 *
 * Note that some settings are only available on certain plans. Setting an argument
 * for a feature that is not available on the plan configured for the zone will
 * result in an error:
 *
 * This is true even when setting the argument to its default value. These values
 * should either be omitted or set to `null` for zones with plans that don't
 * support the feature. See the [plan feature matrices](https://www.cloudflare.com/plans/) for details on
 * feature support by plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const test = new cloudflare.ZoneSettingsOverride("test", {
 *     zoneId: d41d8cd98f00b204e9800998ecf8427e,
 *     settings: {
 *         brotli: "on",
 *         challengeTtl: 2700,
 *         securityLevel: "high",
 *         opportunisticEncryption: "on",
 *         automaticHttpsRewrites: "on",
 *         mirage: "on",
 *         waf: "on",
 *         minify: {
 *             css: "on",
 *             js: "off",
 *             html: "off",
 *         },
 *         securityHeader: {
 *             enabled: true,
 *         },
 *     },
 * });
 * ```
 */
export class ZoneSettingsOverride extends pulumi.CustomResource {
    /**
     * Get an existing ZoneSettingsOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneSettingsOverrideState, opts?: pulumi.CustomResourceOptions): ZoneSettingsOverride {
        return new ZoneSettingsOverride(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride';

    /**
     * Returns true if the given object is an instance of ZoneSettingsOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneSettingsOverride {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneSettingsOverride.__pulumiType;
    }

    public /*out*/ readonly initialSettings!: pulumi.Output<outputs.ZoneSettingsOverrideInitialSetting[]>;
    public /*out*/ readonly initialSettingsReadAt!: pulumi.Output<string>;
    public /*out*/ readonly readonlySettings!: pulumi.Output<string[]>;
    public readonly settings!: pulumi.Output<outputs.ZoneSettingsOverrideSettings>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    public readonly zoneId!: pulumi.Output<string>;
    public /*out*/ readonly zoneStatus!: pulumi.Output<string>;
    public /*out*/ readonly zoneType!: pulumi.Output<string>;

    /**
     * Create a ZoneSettingsOverride resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneSettingsOverrideArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneSettingsOverrideArgs | ZoneSettingsOverrideState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneSettingsOverrideState | undefined;
            resourceInputs["initialSettings"] = state ? state.initialSettings : undefined;
            resourceInputs["initialSettingsReadAt"] = state ? state.initialSettingsReadAt : undefined;
            resourceInputs["readonlySettings"] = state ? state.readonlySettings : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneStatus"] = state ? state.zoneStatus : undefined;
            resourceInputs["zoneType"] = state ? state.zoneType : undefined;
        } else {
            const args = argsOrState as ZoneSettingsOverrideArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["initialSettings"] = undefined /*out*/;
            resourceInputs["initialSettingsReadAt"] = undefined /*out*/;
            resourceInputs["readonlySettings"] = undefined /*out*/;
            resourceInputs["zoneStatus"] = undefined /*out*/;
            resourceInputs["zoneType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneSettingsOverride.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneSettingsOverride resources.
 */
export interface ZoneSettingsOverrideState {
    initialSettings?: pulumi.Input<pulumi.Input<inputs.ZoneSettingsOverrideInitialSetting>[]>;
    initialSettingsReadAt?: pulumi.Input<string>;
    readonlySettings?: pulumi.Input<pulumi.Input<string>[]>;
    settings?: pulumi.Input<inputs.ZoneSettingsOverrideSettings>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
    zoneStatus?: pulumi.Input<string>;
    zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneSettingsOverride resource.
 */
export interface ZoneSettingsOverrideArgs {
    settings?: pulumi.Input<inputs.ZoneSettingsOverrideSettings>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId: pulumi.Input<string>;
}
