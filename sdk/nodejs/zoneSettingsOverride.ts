// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a resource which customizes Cloudflare zone settings. Note that after destroying this resource Zone Settings will be reset to their initial values.
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const test = new cloudflare.ZoneSettingsOverride("test", {
 *     zoneId: _var.cloudflare_zone_id,
 *     settings: {
 *         brotli: "on",
 *         challengeTtl: 2700,
 *         securityLevel: "high",
 *         opportunisticEncryption: "on",
 *         automaticHttpsRewrites: "on",
 *         mirage: "on",
 *         waf: "on",
 *         minify: {
 *             css: "on",
 *             js: "off",
 *             html: "off",
 *         },
 *         security_header: {
 *             enabled: true,
 *         },
 *     },
 * });
 * ```
 */
export class ZoneSettingsOverride extends pulumi.CustomResource {
    /**
     * Get an existing ZoneSettingsOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneSettingsOverrideState, opts?: pulumi.CustomResourceOptions): ZoneSettingsOverride {
        return new ZoneSettingsOverride(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride';

    /**
     * Returns true if the given object is an instance of ZoneSettingsOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneSettingsOverride {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneSettingsOverride.__pulumiType;
    }

    /**
     * Settings present in the zone at the time the resource is created. This will be used to restore the original settings when this resource is destroyed. Shares the same schema as the `settings` attribute (Above).
     */
    public /*out*/ readonly initialSettings!: pulumi.Output<outputs.ZoneSettingsOverrideInitialSettings>;
    public /*out*/ readonly initialSettingsReadAt!: pulumi.Output<string>;
    /**
     * Which of the current `settings` are not able to be set by the user. Which settings these are is determined by plan level and user permissions.
     * * `zoneStatus`. A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup.
     * * `zoneType`. Status of the zone. Valid values: active, pending, initializing, moved, deleted, deactivated.
     */
    public /*out*/ readonly readonlySettings!: pulumi.Output<string[]>;
    /**
     * Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
     */
    public readonly settings!: pulumi.Output<outputs.ZoneSettingsOverrideSettings>;
    /**
     * The DNS zone ID to which apply settings.
     */
    public readonly zoneId!: pulumi.Output<string>;
    public /*out*/ readonly zoneStatus!: pulumi.Output<string>;
    public /*out*/ readonly zoneType!: pulumi.Output<string>;

    /**
     * Create a ZoneSettingsOverride resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneSettingsOverrideArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneSettingsOverrideArgs | ZoneSettingsOverrideState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ZoneSettingsOverrideState | undefined;
            inputs["initialSettings"] = state ? state.initialSettings : undefined;
            inputs["initialSettingsReadAt"] = state ? state.initialSettingsReadAt : undefined;
            inputs["readonlySettings"] = state ? state.readonlySettings : undefined;
            inputs["settings"] = state ? state.settings : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
            inputs["zoneStatus"] = state ? state.zoneStatus : undefined;
            inputs["zoneType"] = state ? state.zoneType : undefined;
        } else {
            const args = argsOrState as ZoneSettingsOverrideArgs | undefined;
            if (!args || args.zoneId === undefined) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["settings"] = args ? args.settings : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
            inputs["initialSettings"] = undefined /*out*/;
            inputs["initialSettingsReadAt"] = undefined /*out*/;
            inputs["readonlySettings"] = undefined /*out*/;
            inputs["zoneStatus"] = undefined /*out*/;
            inputs["zoneType"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ZoneSettingsOverride.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneSettingsOverride resources.
 */
export interface ZoneSettingsOverrideState {
    /**
     * Settings present in the zone at the time the resource is created. This will be used to restore the original settings when this resource is destroyed. Shares the same schema as the `settings` attribute (Above).
     */
    readonly initialSettings?: pulumi.Input<inputs.ZoneSettingsOverrideInitialSettings>;
    readonly initialSettingsReadAt?: pulumi.Input<string>;
    /**
     * Which of the current `settings` are not able to be set by the user. Which settings these are is determined by plan level and user permissions.
     * * `zoneStatus`. A full zone implies that DNS is hosted with Cloudflare. A partial zone is typically a partner-hosted zone or a CNAME setup.
     * * `zoneType`. Status of the zone. Valid values: active, pending, initializing, moved, deleted, deactivated.
     */
    readonly readonlySettings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
     */
    readonly settings?: pulumi.Input<inputs.ZoneSettingsOverrideSettings>;
    /**
     * The DNS zone ID to which apply settings.
     */
    readonly zoneId?: pulumi.Input<string>;
    readonly zoneStatus?: pulumi.Input<string>;
    readonly zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneSettingsOverride resource.
 */
export interface ZoneSettingsOverrideArgs {
    /**
     * Settings overrides that will be applied to the zone. If a setting is not specified the existing setting will be used. For a full list of available settings see below.
     */
    readonly settings?: pulumi.Input<inputs.ZoneSettingsOverrideSettings>;
    /**
     * The DNS zone ID to which apply settings.
     */
    readonly zoneId: pulumi.Input<string>;
}
