// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessMtlsHostnameSettings = new cloudflare.ZeroTrustAccessMtlsHostnameSettings("example_zero_trust_access_mtls_hostname_settings", {
 *     settings: [{
 *         china_network: false,
 *         client_certificate_forwarding: true,
 *         hostname: "admin.example.com",
 *     }],
 *     zoneId: "zone_id",
 * });
 * ```
 *
 * @deprecated cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings
 */
export class AccessMutualTlsHostnameSettings extends pulumi.CustomResource {
    /**
     * Get an existing AccessMutualTlsHostnameSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessMutualTlsHostnameSettingsState, opts?: pulumi.CustomResourceOptions): AccessMutualTlsHostnameSettings {
        pulumi.log.warn("AccessMutualTlsHostnameSettings is deprecated: cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings")
        return new AccessMutualTlsHostnameSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings';

    /**
     * Returns true if the given object is an instance of AccessMutualTlsHostnameSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessMutualTlsHostnameSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessMutualTlsHostnameSettings.__pulumiType;
    }

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    declare public readonly accountId: pulumi.Output<string | undefined>;
    /**
     * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     */
    declare public /*out*/ readonly chinaNetwork: pulumi.Output<boolean>;
    /**
     * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     */
    declare public /*out*/ readonly clientCertificateForwarding: pulumi.Output<boolean>;
    /**
     * The hostname that these settings apply to.
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    declare public readonly settings: pulumi.Output<outputs.AccessMutualTlsHostnameSettingsSetting[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    declare public readonly zoneId: pulumi.Output<string | undefined>;

    /**
     * Create a AccessMutualTlsHostnameSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings */
    constructor(name: string, args: AccessMutualTlsHostnameSettingsArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings */
    constructor(name: string, argsOrState?: AccessMutualTlsHostnameSettingsArgs | AccessMutualTlsHostnameSettingsState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("AccessMutualTlsHostnameSettings is deprecated: cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessMutualTlsHostnameSettingsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["chinaNetwork"] = state?.chinaNetwork;
            resourceInputs["clientCertificateForwarding"] = state?.clientCertificateForwarding;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as AccessMutualTlsHostnameSettingsArgs | undefined;
            if (args?.settings === undefined && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["chinaNetwork"] = undefined /*out*/;
            resourceInputs["clientCertificateForwarding"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AccessMutualTlsHostnameSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessMutualTlsHostnameSettings resources.
 */
export interface AccessMutualTlsHostnameSettingsState {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     */
    chinaNetwork?: pulumi.Input<boolean>;
    /**
     * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     */
    clientCertificateForwarding?: pulumi.Input<boolean>;
    /**
     * The hostname that these settings apply to.
     */
    hostname?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.AccessMutualTlsHostnameSettingsSetting>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessMutualTlsHostnameSettings resource.
 */
export interface AccessMutualTlsHostnameSettingsArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    settings: pulumi.Input<pulumi.Input<inputs.AccessMutualTlsHostnameSettingsSetting>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
