// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleR2Bucket = new cloudflare.R2Bucket("example_r2_bucket", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: "example-bucket",
 *     location: "apac",
 *     storageClass: "Standard",
 * });
 * ```
 *
 * > Available location values can be found in the [R2 documentation](https://developers.cloudflare.com/r2/reference/data-location/#available-hints).
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/r2Bucket:R2Bucket example '<account_id>/<bucket_name>'
 * ```
 */
export class R2Bucket extends pulumi.CustomResource {
    /**
     * Get an existing R2Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2BucketState, opts?: pulumi.CustomResourceOptions): R2Bucket {
        return new R2Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/r2Bucket:R2Bucket';

    /**
     * Returns true if the given object is an instance of R2Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is R2Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === R2Bucket.__pulumiType;
    }

    /**
     * Account ID
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Creation timestamp
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * Jurisdiction of the bucket
     */
    public readonly jurisdiction!: pulumi.Output<string>;
    /**
     * Location of the bucket
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Name of the bucket
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Storage class for newly uploaded objects, unless specified otherwise.
     */
    public readonly storageClass!: pulumi.Output<string>;

    /**
     * Create a R2Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: R2BucketArgs | R2BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as R2BucketState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["jurisdiction"] = state ? state.jurisdiction : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
        } else {
            const args = argsOrState as R2BucketArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["jurisdiction"] = args ? args.jurisdiction : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(R2Bucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering R2Bucket resources.
 */
export interface R2BucketState {
    /**
     * Account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * Creation timestamp
     */
    creationDate?: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Location of the bucket
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    name?: pulumi.Input<string>;
    /**
     * Storage class for newly uploaded objects, unless specified otherwise.
     */
    storageClass?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a R2Bucket resource.
 */
export interface R2BucketArgs {
    /**
     * Account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Location of the bucket
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    name: pulumi.Input<string>;
    /**
     * Storage class for newly uploaded objects, unless specified otherwise.
     */
    storageClass?: pulumi.Input<string>;
}
