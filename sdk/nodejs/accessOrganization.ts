// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * @deprecated cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization
 */
export class AccessOrganization extends pulumi.CustomResource {
    /**
     * Get an existing AccessOrganization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessOrganizationState, opts?: pulumi.CustomResourceOptions): AccessOrganization {
        pulumi.log.warn("AccessOrganization is deprecated: cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization")
        return new AccessOrganization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accessOrganization:AccessOrganization';

    /**
     * Returns true if the given object is an instance of AccessOrganization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessOrganization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessOrganization.__pulumiType;
    }

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
     */
    public readonly allowAuthenticateViaWarp!: pulumi.Output<boolean | undefined>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    public readonly authDomain!: pulumi.Output<string | undefined>;
    /**
     * When set to `true`, users skip the identity provider selection step during login.
     */
    public readonly autoRedirectToIdentity!: pulumi.Output<boolean>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly customPages!: pulumi.Output<outputs.AccessOrganizationCustomPages>;
    public readonly isUiReadOnly!: pulumi.Output<boolean | undefined>;
    public readonly loginDesign!: pulumi.Output<outputs.AccessOrganizationLoginDesign>;
    /**
     * The name of your Zero Trust organization.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    public readonly sessionDuration!: pulumi.Output<string | undefined>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    public readonly uiReadOnlyToggleReason!: pulumi.Output<string | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
     */
    public readonly userSeatExpirationInactiveTime!: pulumi.Output<string | undefined>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
     */
    public readonly warpAuthSessionDuration!: pulumi.Output<string | undefined>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a AccessOrganization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization */
    constructor(name: string, args?: AccessOrganizationArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization */
    constructor(name: string, argsOrState?: AccessOrganizationArgs | AccessOrganizationState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("AccessOrganization is deprecated: cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessOrganizationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = state ? state.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = state ? state.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = state ? state.autoRedirectToIdentity : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customPages"] = state ? state.customPages : undefined;
            resourceInputs["isUiReadOnly"] = state ? state.isUiReadOnly : undefined;
            resourceInputs["loginDesign"] = state ? state.loginDesign : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sessionDuration"] = state ? state.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = state ? state.uiReadOnlyToggleReason : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = state ? state.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = state ? state.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AccessOrganizationArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = args ? args.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = args ? args.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = args ? args.autoRedirectToIdentity : undefined;
            resourceInputs["customPages"] = args ? args.customPages : undefined;
            resourceInputs["isUiReadOnly"] = args ? args.isUiReadOnly : undefined;
            resourceInputs["loginDesign"] = args ? args.loginDesign : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sessionDuration"] = args ? args.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = args ? args.uiReadOnlyToggleReason : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = args ? args.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = args ? args.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessOrganization:AccessOrganization" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AccessOrganization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessOrganization resources.
 */
export interface AccessOrganizationState {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
     */
    allowAuthenticateViaWarp?: pulumi.Input<boolean>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    authDomain?: pulumi.Input<string>;
    /**
     * When set to `true`, users skip the identity provider selection step during login.
     */
    autoRedirectToIdentity?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    customPages?: pulumi.Input<inputs.AccessOrganizationCustomPages>;
    isUiReadOnly?: pulumi.Input<boolean>;
    loginDesign?: pulumi.Input<inputs.AccessOrganizationLoginDesign>;
    /**
     * The name of your Zero Trust organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    uiReadOnlyToggleReason?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
     */
    userSeatExpirationInactiveTime?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
     */
    warpAuthSessionDuration?: pulumi.Input<string>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessOrganization resource.
 */
export interface AccessOrganizationArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
     */
    allowAuthenticateViaWarp?: pulumi.Input<boolean>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    authDomain?: pulumi.Input<string>;
    /**
     * When set to `true`, users skip the identity provider selection step during login.
     */
    autoRedirectToIdentity?: pulumi.Input<boolean>;
    customPages?: pulumi.Input<inputs.AccessOrganizationCustomPages>;
    isUiReadOnly?: pulumi.Input<boolean>;
    loginDesign?: pulumi.Input<inputs.AccessOrganizationLoginDesign>;
    /**
     * The name of your Zero Trust organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    uiReadOnlyToggleReason?: pulumi.Input<string>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
     */
    userSeatExpirationInactiveTime?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
     */
    warpAuthSessionDuration?: pulumi.Input<string>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
