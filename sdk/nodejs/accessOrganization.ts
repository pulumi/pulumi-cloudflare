// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * A Zero Trust organization defines the user login experience.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.AccessOrganization("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     authDomain: "example.cloudflareaccess.com",
 *     autoRedirectToIdentity: false,
 *     isUiReadOnly: false,
 *     loginDesigns: [{
 *         backgroundColor: "#ffffff",
 *         footerText: "My footer text",
 *         headerText: "My header text",
 *         logoPath: "https://example.com/logo.png",
 *         textColor: "#000000",
 *     }],
 *     name: "example.cloudflareaccess.com",
 *     userSeatExpirationInactiveTime: "720h",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessOrganization:AccessOrganization example <account_id>
 * ```
 */
export class AccessOrganization extends pulumi.CustomResource {
    /**
     * Get an existing AccessOrganization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessOrganizationState, opts?: pulumi.CustomResourceOptions): AccessOrganization {
        return new AccessOrganization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accessOrganization:AccessOrganization';

    /**
     * Returns true if the given object is an instance of AccessOrganization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessOrganization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessOrganization.__pulumiType;
    }

    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will
     * take precedence over this value.
     */
    public readonly allowAuthenticateViaWarp!: pulumi.Output<boolean | undefined>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    public readonly authDomain!: pulumi.Output<string>;
    /**
     * When set to true, users skip the identity provider selection step during login.
     */
    public readonly autoRedirectToIdentity!: pulumi.Output<boolean | undefined>;
    /**
     * Custom pages for your Zero Trust organization.
     */
    public readonly customPages!: pulumi.Output<outputs.AccessOrganizationCustomPage[] | undefined>;
    /**
     * When set to true, this will disable all editing of Access resources via the Zero Trust Dashboard.
     */
    public readonly isUiReadOnly!: pulumi.Output<boolean | undefined>;
    public readonly loginDesigns!: pulumi.Output<outputs.AccessOrganizationLoginDesign[] | undefined>;
    /**
     * The name of your Zero Trust organization.
     */
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    public readonly sessionDuration!: pulumi.Output<string | undefined>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    public readonly uiReadOnlyToggleReason!: pulumi.Output<string | undefined>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count. Must be in the format `300ms` or `2h45m`.
     */
    public readonly userSeatExpirationInactiveTime!: pulumi.Output<string | undefined>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format 30m or 2h45m. Valid time
     * units are: m, h.
     */
    public readonly warpAuthSessionDuration!: pulumi.Output<string | undefined>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a AccessOrganization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessOrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessOrganizationArgs | AccessOrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessOrganizationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = state ? state.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = state ? state.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = state ? state.autoRedirectToIdentity : undefined;
            resourceInputs["customPages"] = state ? state.customPages : undefined;
            resourceInputs["isUiReadOnly"] = state ? state.isUiReadOnly : undefined;
            resourceInputs["loginDesigns"] = state ? state.loginDesigns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sessionDuration"] = state ? state.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = state ? state.uiReadOnlyToggleReason : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = state ? state.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = state ? state.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AccessOrganizationArgs | undefined;
            if ((!args || args.authDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authDomain'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["allowAuthenticateViaWarp"] = args ? args.allowAuthenticateViaWarp : undefined;
            resourceInputs["authDomain"] = args ? args.authDomain : undefined;
            resourceInputs["autoRedirectToIdentity"] = args ? args.autoRedirectToIdentity : undefined;
            resourceInputs["customPages"] = args ? args.customPages : undefined;
            resourceInputs["isUiReadOnly"] = args ? args.isUiReadOnly : undefined;
            resourceInputs["loginDesigns"] = args ? args.loginDesigns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sessionDuration"] = args ? args.sessionDuration : undefined;
            resourceInputs["uiReadOnlyToggleReason"] = args ? args.uiReadOnlyToggleReason : undefined;
            resourceInputs["userSeatExpirationInactiveTime"] = args ? args.userSeatExpirationInactiveTime : undefined;
            resourceInputs["warpAuthSessionDuration"] = args ? args.warpAuthSessionDuration : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessOrganization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessOrganization resources.
 */
export interface AccessOrganizationState {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will
     * take precedence over this value.
     */
    allowAuthenticateViaWarp?: pulumi.Input<boolean>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    authDomain?: pulumi.Input<string>;
    /**
     * When set to true, users skip the identity provider selection step during login.
     */
    autoRedirectToIdentity?: pulumi.Input<boolean>;
    /**
     * Custom pages for your Zero Trust organization.
     */
    customPages?: pulumi.Input<pulumi.Input<inputs.AccessOrganizationCustomPage>[]>;
    /**
     * When set to true, this will disable all editing of Access resources via the Zero Trust Dashboard.
     */
    isUiReadOnly?: pulumi.Input<boolean>;
    loginDesigns?: pulumi.Input<pulumi.Input<inputs.AccessOrganizationLoginDesign>[]>;
    /**
     * The name of your Zero Trust organization.
     */
    name?: pulumi.Input<string>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    uiReadOnlyToggleReason?: pulumi.Input<string>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count. Must be in the format `300ms` or `2h45m`.
     */
    userSeatExpirationInactiveTime?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format 30m or 2h45m. Valid time
     * units are: m, h.
     */
    warpAuthSessionDuration?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessOrganization resource.
 */
export interface AccessOrganizationArgs {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When set to true, users can authenticate via WARP for any application in your organization. Application settings will
     * take precedence over this value.
     */
    allowAuthenticateViaWarp?: pulumi.Input<boolean>;
    /**
     * The unique subdomain assigned to your Zero Trust organization.
     */
    authDomain: pulumi.Input<string>;
    /**
     * When set to true, users skip the identity provider selection step during login.
     */
    autoRedirectToIdentity?: pulumi.Input<boolean>;
    /**
     * Custom pages for your Zero Trust organization.
     */
    customPages?: pulumi.Input<pulumi.Input<inputs.AccessOrganizationCustomPage>[]>;
    /**
     * When set to true, this will disable all editing of Access resources via the Zero Trust Dashboard.
     */
    isUiReadOnly?: pulumi.Input<boolean>;
    loginDesigns?: pulumi.Input<pulumi.Input<inputs.AccessOrganizationLoginDesign>[]>;
    /**
     * The name of your Zero Trust organization.
     */
    name?: pulumi.Input<string>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * A description of the reason why the UI read only field is being toggled.
     */
    uiReadOnlyToggleReason?: pulumi.Input<string>;
    /**
     * The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count. Must be in the format `300ms` or `2h45m`.
     */
    userSeatExpirationInactiveTime?: pulumi.Input<string>;
    /**
     * The amount of time that tokens issued for applications will be valid. Must be in the format 30m or 2h45m. Valid time
     * units are: m, h.
     */
    warpAuthSessionDuration?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`.
     */
    zoneId?: pulumi.Input<string>;
}
