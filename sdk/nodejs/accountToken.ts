// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accountToken:AccountToken example '<account_id>/<token_id>'
 * ```
 */
export class AccountToken extends pulumi.CustomResource {
    /**
     * Get an existing AccountToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountTokenState, opts?: pulumi.CustomResourceOptions): AccountToken {
        return new AccountToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accountToken:AccountToken';

    /**
     * Returns true if the given object is an instance of AccountToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountToken.__pulumiType;
    }

    /**
     * Account identifier tag.
     */
    declare public readonly accountId: pulumi.Output<string>;
    declare public readonly condition: pulumi.Output<outputs.AccountTokenCondition | undefined>;
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     */
    declare public readonly expiresOn: pulumi.Output<string | undefined>;
    /**
     * The time on which the token was created.
     */
    declare public /*out*/ readonly issuedOn: pulumi.Output<string>;
    /**
     * Last time the token was used.
     */
    declare public /*out*/ readonly lastUsedOn: pulumi.Output<string>;
    /**
     * Last time the token was modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * Token name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    declare public readonly notBefore: pulumi.Output<string | undefined>;
    /**
     * List of access policies assigned to the token.
     */
    declare public readonly policies: pulumi.Output<outputs.AccountTokenPolicy[]>;
    /**
     * Status of the token.
     * Available values: "active", "disabled", "expired".
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The token value.
     */
    declare public /*out*/ readonly value: pulumi.Output<string>;

    /**
     * Create a AccountToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountTokenArgs | AccountTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountTokenState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["condition"] = state?.condition;
            resourceInputs["expiresOn"] = state?.expiresOn;
            resourceInputs["issuedOn"] = state?.issuedOn;
            resourceInputs["lastUsedOn"] = state?.lastUsedOn;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["notBefore"] = state?.notBefore;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["status"] = state?.status;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as AccountTokenArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.policies === undefined && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["condition"] = args?.condition;
            resourceInputs["expiresOn"] = args?.expiresOn;
            resourceInputs["name"] = args?.name;
            resourceInputs["notBefore"] = args?.notBefore;
            resourceInputs["policies"] = args?.policies;
            resourceInputs["status"] = args?.status;
            resourceInputs["issuedOn"] = undefined /*out*/;
            resourceInputs["lastUsedOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AccountToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountToken resources.
 */
export interface AccountTokenState {
    /**
     * Account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.AccountTokenCondition>;
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * The time on which the token was created.
     */
    issuedOn?: pulumi.Input<string>;
    /**
     * Last time the token was used.
     */
    lastUsedOn?: pulumi.Input<string>;
    /**
     * Last time the token was modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Token name.
     */
    name?: pulumi.Input<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * List of access policies assigned to the token.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.AccountTokenPolicy>[]>;
    /**
     * Status of the token.
     * Available values: "active", "disabled", "expired".
     */
    status?: pulumi.Input<string>;
    /**
     * The token value.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountToken resource.
 */
export interface AccountTokenArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.AccountTokenCondition>;
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * Token name.
     */
    name: pulumi.Input<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * List of access policies assigned to the token.
     */
    policies: pulumi.Input<pulumi.Input<inputs.AccountTokenPolicy>[]>;
    /**
     * Status of the token.
     * Available values: "active", "disabled", "expired".
     */
    status?: pulumi.Input<string>;
}
