// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsZoneTransfersIncoming = new cloudflare.DnsZoneTransfersIncoming("example_dns_zone_transfers_incoming", {
 *     zoneId: "269d8f4853475ca241c4e730be286b20",
 *     autoRefreshSeconds: 86400,
 *     name: "www.example.com.",
 *     peers: [
 *         "23ff594956f20c2a721606e94745a8aa",
 *         "00920f38ce07c2e2f4df50b1f61d4194",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming example '<zone_id>'
 * ```
 */
export class DnsZoneTransfersIncoming extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneTransfersIncoming resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneTransfersIncomingState, opts?: pulumi.CustomResourceOptions): DnsZoneTransfersIncoming {
        return new DnsZoneTransfersIncoming(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming';

    /**
     * Returns true if the given object is an instance of DnsZoneTransfersIncoming.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZoneTransfersIncoming {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneTransfersIncoming.__pulumiType;
    }

    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY.
     * Not applicable for primary zones.
     */
    public readonly autoRefreshSeconds!: pulumi.Output<number>;
    /**
     * The time for a specific event.
     */
    public /*out*/ readonly checkedTime!: pulumi.Output<string>;
    /**
     * The time for a specific event.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The time for a specific event.
     */
    public /*out*/ readonly modifiedTime!: pulumi.Output<string>;
    /**
     * Zone name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of peer tags.
     */
    public readonly peers!: pulumi.Output<string[]>;
    /**
     * The serial number of the SOA for the given zone.
     */
    public /*out*/ readonly soaSerial!: pulumi.Output<number>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsZoneTransfersIncoming resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneTransfersIncomingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneTransfersIncomingArgs | DnsZoneTransfersIncomingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneTransfersIncomingState | undefined;
            resourceInputs["autoRefreshSeconds"] = state ? state.autoRefreshSeconds : undefined;
            resourceInputs["checkedTime"] = state ? state.checkedTime : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["modifiedTime"] = state ? state.modifiedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
            resourceInputs["soaSerial"] = state ? state.soaSerial : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsZoneTransfersIncomingArgs | undefined;
            if ((!args || args.autoRefreshSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoRefreshSeconds'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.peers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peers'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["autoRefreshSeconds"] = args ? args.autoRefreshSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["checkedTime"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["modifiedTime"] = undefined /*out*/;
            resourceInputs["soaSerial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZoneTransfersIncoming.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZoneTransfersIncoming resources.
 */
export interface DnsZoneTransfersIncomingState {
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY.
     * Not applicable for primary zones.
     */
    autoRefreshSeconds?: pulumi.Input<number>;
    /**
     * The time for a specific event.
     */
    checkedTime?: pulumi.Input<string>;
    /**
     * The time for a specific event.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The time for a specific event.
     */
    modifiedTime?: pulumi.Input<string>;
    /**
     * Zone name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of peer tags.
     */
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soaSerial?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZoneTransfersIncoming resource.
 */
export interface DnsZoneTransfersIncomingArgs {
    /**
     * How often should a secondary zone auto refresh regardless of DNS NOTIFY.
     * Not applicable for primary zones.
     */
    autoRefreshSeconds: pulumi.Input<number>;
    /**
     * Zone name.
     */
    name: pulumi.Input<string>;
    /**
     * A list of peer tags.
     */
    peers: pulumi.Input<pulumi.Input<string>[]>;
    zoneId: pulumi.Input<string>;
}
