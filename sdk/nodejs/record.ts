// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/record:Record example '<zone_id>/<dns_record_id>'
 * ```
 *
 * @deprecated cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord
 */
export class Record extends pulumi.CustomResource {
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordState, opts?: pulumi.CustomResourceOptions): Record {
        pulumi.log.warn("Record is deprecated: cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord")
        return new Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/record:Record';

    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }

    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * When the record comment was last modified. Omitted if there is no comment.
     */
    public /*out*/ readonly commentModifiedOn!: pulumi.Output<string>;
    /**
     * A valid IPv4 address.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * When the record was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Components of a CAA record.
     */
    public readonly data!: pulumi.Output<outputs.RecordData>;
    /**
     * Extra Cloudflare-specific information about the record.
     */
    public /*out*/ readonly meta!: pulumi.Output<string>;
    /**
     * When the record was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Whether the record can be proxied by Cloudflare or not.
     */
    public /*out*/ readonly proxiable!: pulumi.Output<boolean>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    public readonly proxied!: pulumi.Output<boolean>;
    /**
     * Settings for the DNS record.
     */
    public readonly settings!: pulumi.Output<outputs.RecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * When the record tags were last modified. Omitted if there are no tags.
     */
    public /*out*/ readonly tagsModifiedOn!: pulumi.Output<string>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * Record type.
     * Available values: "A".
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord */
    constructor(name: string, args: RecordArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord */
    constructor(name: string, argsOrState?: RecordArgs | RecordState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Record is deprecated: cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["commentModifiedOn"] = state ? state.commentModifiedOn : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proxiable"] = state ? state.proxiable : undefined;
            resourceInputs["proxied"] = state ? state.proxied : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsModifiedOn"] = state ? state.tagsModifiedOn : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proxied"] = args ? args.proxied : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["commentModifiedOn"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["proxiable"] = undefined /*out*/;
            resourceInputs["tagsModifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/record:Record" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Record.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Record resources.
 */
export interface RecordState {
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * When the record comment was last modified. Omitted if there is no comment.
     */
    commentModifiedOn?: pulumi.Input<string>;
    /**
     * A valid IPv4 address.
     */
    content?: pulumi.Input<string>;
    /**
     * When the record was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Components of a CAA record.
     */
    data?: pulumi.Input<inputs.RecordData>;
    /**
     * Extra Cloudflare-specific information about the record.
     */
    meta?: pulumi.Input<string>;
    /**
     * When the record was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    name?: pulumi.Input<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether the record can be proxied by Cloudflare or not.
     */
    proxiable?: pulumi.Input<boolean>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Settings for the DNS record.
     */
    settings?: pulumi.Input<inputs.RecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the record tags were last modified. Omitted if there are no tags.
     */
    tagsModifiedOn?: pulumi.Input<string>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Record type.
     * Available values: "A".
     */
    type?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Record resource.
 */
export interface RecordArgs {
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * A valid IPv4 address.
     */
    content?: pulumi.Input<string>;
    /**
     * Components of a CAA record.
     */
    data?: pulumi.Input<inputs.RecordData>;
    /**
     * DNS record name (or @ for the zone apex) in Punycode.
     */
    name: pulumi.Input<string>;
    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Settings for the DNS record.
     */
    settings?: pulumi.Input<inputs.RecordSettings>;
    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     */
    ttl: pulumi.Input<number>;
    /**
     * Record type.
     * Available values: "A".
     */
    type: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
