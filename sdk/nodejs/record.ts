// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare record resource.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // Add a record to the domain
 * const example = new cloudflare.Record("example", {
 *     zoneId: _var.cloudflare_zone_id,
 *     name: "example",
 *     value: "192.0.2.1",
 *     type: "A",
 *     ttl: 3600,
 * });
 * // Add a record requiring a data map
 * const _sipTls = new cloudflare.Record("_sipTls", {
 *     zoneId: _var.cloudflare_zone_id,
 *     name: "_sip._tls",
 *     type: "SRV",
 *     data: {
 *         service: "_sip",
 *         proto: "_tls",
 *         name: "example-srv",
 *         priority: 0,
 *         weight: 0,
 *         port: 443,
 *         target: "example.com",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/record:Record example <zone_id>/<record_id>
 * ```
 */
export class Record extends pulumi.CustomResource {
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordState, opts?: pulumi.CustomResourceOptions): Record {
        return new Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/record:Record';

    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }

    /**
     * Allow creation of this record in Terraform to overwrite an existing record, if any. This does not affect the ability to
     * update the record in Terraform and does not prevent other resources within Terraform or manual changes outside Terraform
     * from overwriting this record. **This configuration is not recommended for most environments**
     */
    public readonly allowOverwrite!: pulumi.Output<boolean | undefined>;
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The RFC3339 timestamp of when the record was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Map of attributes that constitute the record value. Conflicts with `value`.
     */
    public readonly data!: pulumi.Output<outputs.RecordData | undefined>;
    /**
     * The FQDN of the record.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * A key-value map of string metadata Cloudflare associates with the record.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: any}>;
    /**
     * The RFC3339 timestamp of when the record was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * The name of the record.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The priority of the record.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Shows whether this record can be proxied.
     */
    public /*out*/ readonly proxiable!: pulumi.Output<boolean>;
    /**
     * Whether the record gets Cloudflare's origin protection.
     */
    public readonly proxied!: pulumi.Output<boolean | undefined>;
    /**
     * Custom tags for the DNS record.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The TTL of the record.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`,
     * `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The value of the record.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordArgs | RecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordState | undefined;
            resourceInputs["allowOverwrite"] = state ? state.allowOverwrite : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["proxiable"] = state ? state.proxiable : undefined;
            resourceInputs["proxied"] = state ? state.proxied : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RecordArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["allowOverwrite"] = args ? args.allowOverwrite : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["proxied"] = args ? args.proxied : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["proxiable"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Record.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Record resources.
 */
export interface RecordState {
    /**
     * Allow creation of this record in Terraform to overwrite an existing record, if any. This does not affect the ability to
     * update the record in Terraform and does not prevent other resources within Terraform or manual changes outside Terraform
     * from overwriting this record. **This configuration is not recommended for most environments**
     */
    allowOverwrite?: pulumi.Input<boolean>;
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * The RFC3339 timestamp of when the record was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Map of attributes that constitute the record value. Conflicts with `value`.
     */
    data?: pulumi.Input<inputs.RecordData>;
    /**
     * The FQDN of the record.
     */
    hostname?: pulumi.Input<string>;
    /**
     * A key-value map of string metadata Cloudflare associates with the record.
     */
    metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * The RFC3339 timestamp of when the record was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The name of the record.
     */
    name?: pulumi.Input<string>;
    /**
     * The priority of the record.
     */
    priority?: pulumi.Input<number>;
    /**
     * Shows whether this record can be proxied.
     */
    proxiable?: pulumi.Input<boolean>;
    /**
     * Whether the record gets Cloudflare's origin protection.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Custom tags for the DNS record.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TTL of the record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`,
     * `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`
     */
    type?: pulumi.Input<string>;
    /**
     * The value of the record.
     */
    value?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Record resource.
 */
export interface RecordArgs {
    /**
     * Allow creation of this record in Terraform to overwrite an existing record, if any. This does not affect the ability to
     * update the record in Terraform and does not prevent other resources within Terraform or manual changes outside Terraform
     * from overwriting this record. **This configuration is not recommended for most environments**
     */
    allowOverwrite?: pulumi.Input<boolean>;
    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     */
    comment?: pulumi.Input<string>;
    /**
     * Map of attributes that constitute the record value. Conflicts with `value`.
     */
    data?: pulumi.Input<inputs.RecordData>;
    /**
     * The name of the record.
     */
    name: pulumi.Input<string>;
    /**
     * The priority of the record.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether the record gets Cloudflare's origin protection.
     */
    proxied?: pulumi.Input<boolean>;
    /**
     * Custom tags for the DNS record.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The TTL of the record.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of the record. Available values: `A`, `AAAA`, `CAA`, `CNAME`, `TXT`, `SRV`, `LOC`, `MX`, `NS`, `SPF`, `CERT`,
     * `DNSKEY`, `DS`, `NAPTR`, `SMIMEA`, `SSHFP`, `TLSA`, `URI`, `PTR`, `HTTPS`, `SVCB`
     */
    type: pulumi.Input<string>;
    /**
     * The value of the record.
     */
    value?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId: pulumi.Input<string>;
}
