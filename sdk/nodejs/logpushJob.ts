// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource which manages Cloudflare logpush jobs.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * 
 * const exampleJob = new cloudflare.LogpushJob("example_job", {
 *     destinationConf: "s3://my-bucket-path?region=us-west-2",
 *     enabled: true,
 *     logpullOptions: "fields=RayID,ClientIP,EdgeStartTimestamp&timestamps=rfc3339",
 *     name: "My logpush job",
 *     ownershipChallenge: "00000000000000000",
 * });
 * ```
 */
export class LogpushJob extends pulumi.CustomResource {
    /**
     * Get an existing LogpushJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogpushJobState, opts?: pulumi.CustomResourceOptions): LogpushJob {
        return new LogpushJob(name, <any>state, { ...opts, id: id });
    }

    public readonly destinationConf!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly logpullOptions!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string | undefined>;
    /**
     * Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
     */
    public readonly ownershipChallenge!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a LogpushJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogpushJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogpushJobArgs | LogpushJobState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LogpushJobState | undefined;
            inputs["destinationConf"] = state ? state.destinationConf : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["logpullOptions"] = state ? state.logpullOptions : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownershipChallenge"] = state ? state.ownershipChallenge : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LogpushJobArgs | undefined;
            if (!args || args.destinationConf === undefined) {
                throw new Error("Missing required property 'destinationConf'");
            }
            if (!args || args.ownershipChallenge === undefined) {
                throw new Error("Missing required property 'ownershipChallenge'");
            }
            if (!args || args.zoneId === undefined) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["destinationConf"] = args ? args.destinationConf : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["logpullOptions"] = args ? args.logpullOptions : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ownershipChallenge"] = args ? args.ownershipChallenge : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
        }
        super("cloudflare:index/logpushJob:LogpushJob", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogpushJob resources.
 */
export interface LogpushJobState {
    readonly destinationConf?: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly logpullOptions?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    /**
     * Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
     */
    readonly ownershipChallenge?: pulumi.Input<string>;
    readonly zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogpushJob resource.
 */
export interface LogpushJobArgs {
    readonly destinationConf: pulumi.Input<string>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly logpullOptions?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    /**
     * Ownership challenge token to prove destination ownership. See [https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/](https://developers.cloudflare.com/logs/tutorials/tutorial-logpush-curl/)
     */
    readonly ownershipChallenge: pulumi.Input<string>;
    readonly zoneId: pulumi.Input<string>;
}
