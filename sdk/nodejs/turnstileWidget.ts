// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleTurnstileWidget = new cloudflare.TurnstileWidget("example_turnstile_widget", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     domains: [
 *         "203.0.113.1",
 *         "cloudflare.com",
 *         "blog.example.com",
 *     ],
 *     mode: "invisible",
 *     name: "blog.cloudflare.com login form",
 *     botFightMode: false,
 *     clearanceLevel: "interactive",
 *     ephemeralId: false,
 *     offlabel: false,
 *     region: "world",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/turnstileWidget:TurnstileWidget example '<account_id>/<sitekey>'
 * ```
 */
export class TurnstileWidget extends pulumi.CustomResource {
    /**
     * Get an existing TurnstileWidget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TurnstileWidgetState, opts?: pulumi.CustomResourceOptions): TurnstileWidget {
        return new TurnstileWidget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/turnstileWidget:TurnstileWidget';

    /**
     * Returns true if the given object is an instance of TurnstileWidget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TurnstileWidget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TurnstileWidget.__pulumiType;
    }

    /**
     * Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     */
    declare public readonly botFightMode: pulumi.Output<boolean>;
    /**
     * If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: "noClearance", "jschallenge", "managed", "interactive".
     */
    declare public readonly clearanceLevel: pulumi.Output<string>;
    /**
     * When the widget was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    declare public readonly domains: pulumi.Output<string[]>;
    /**
     * Return the Ephemeral ID in /siteverify (ENT only).
     */
    declare public readonly ephemeralId: pulumi.Output<boolean>;
    /**
     * Widget Mode
     * Available values: "non-interactive", "invisible", "managed".
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * When the widget was modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Do not show any Cloudflare branding on the widget (ENT only).
     */
    declare public readonly offlabel: pulumi.Output<boolean>;
    /**
     * Region where this widget can be used. This cannot be changed after creation.
     * Available values: "world", "china".
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Secret key for this widget.
     */
    declare public /*out*/ readonly secret: pulumi.Output<string>;
    /**
     * Widget item identifier tag.
     */
    declare public /*out*/ readonly sitekey: pulumi.Output<string>;

    /**
     * Create a TurnstileWidget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TurnstileWidgetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TurnstileWidgetArgs | TurnstileWidgetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TurnstileWidgetState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["botFightMode"] = state?.botFightMode;
            resourceInputs["clearanceLevel"] = state?.clearanceLevel;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["ephemeralId"] = state?.ephemeralId;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["offlabel"] = state?.offlabel;
            resourceInputs["region"] = state?.region;
            resourceInputs["secret"] = state?.secret;
            resourceInputs["sitekey"] = state?.sitekey;
        } else {
            const args = argsOrState as TurnstileWidgetArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.domains === undefined && !opts.urn) {
                throw new Error("Missing required property 'domains'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["botFightMode"] = args?.botFightMode;
            resourceInputs["clearanceLevel"] = args?.clearanceLevel;
            resourceInputs["domains"] = args?.domains;
            resourceInputs["ephemeralId"] = args?.ephemeralId;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["offlabel"] = args?.offlabel;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
            resourceInputs["sitekey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TurnstileWidget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TurnstileWidget resources.
 */
export interface TurnstileWidgetState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     */
    botFightMode?: pulumi.Input<boolean>;
    /**
     * If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: "noClearance", "jschallenge", "managed", "interactive".
     */
    clearanceLevel?: pulumi.Input<string>;
    /**
     * When the widget was created.
     */
    createdOn?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Return the Ephemeral ID in /siteverify (ENT only).
     */
    ephemeralId?: pulumi.Input<boolean>;
    /**
     * Widget Mode
     * Available values: "non-interactive", "invisible", "managed".
     */
    mode?: pulumi.Input<string>;
    /**
     * When the widget was modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     */
    name?: pulumi.Input<string>;
    /**
     * Do not show any Cloudflare branding on the widget (ENT only).
     */
    offlabel?: pulumi.Input<boolean>;
    /**
     * Region where this widget can be used. This cannot be changed after creation.
     * Available values: "world", "china".
     */
    region?: pulumi.Input<string>;
    /**
     * Secret key for this widget.
     */
    secret?: pulumi.Input<string>;
    /**
     * Widget item identifier tag.
     */
    sitekey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TurnstileWidget resource.
 */
export interface TurnstileWidgetArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     */
    botFightMode?: pulumi.Input<boolean>;
    /**
     * If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: "noClearance", "jschallenge", "managed", "interactive".
     */
    clearanceLevel?: pulumi.Input<string>;
    domains: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Return the Ephemeral ID in /siteverify (ENT only).
     */
    ephemeralId?: pulumi.Input<boolean>;
    /**
     * Widget Mode
     * Available values: "non-interactive", "invisible", "managed".
     */
    mode: pulumi.Input<string>;
    /**
     * Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     */
    name: pulumi.Input<string>;
    /**
     * Do not show any Cloudflare branding on the widget (ENT only).
     */
    offlabel?: pulumi.Input<boolean>;
    /**
     * Region where this widget can be used. This cannot be changed after creation.
     * Available values: "world", "china".
     */
    region?: pulumi.Input<string>;
}
