// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStream = cloudflare.getStream({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     identifier: "ea95132c15732412d22c1476fa83f27a",
 * });
 * ```
 */
export function getStream(args: GetStreamArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getStream:getStream", {
        "accountId": args.accountId,
        "identifier": args.identifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getStream.
 */
export interface GetStreamArgs {
    /**
     * The account identifier tag.
     */
    accountId: string;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    identifier: string;
}

/**
 * A collection of values returned by getStream.
 */
export interface GetStreamResult {
    /**
     * The account identifier tag.
     */
    readonly accountId: string;
    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     */
    readonly allowedOrigins: string[];
    /**
     * The date and time the media item was created.
     */
    readonly created: string;
    /**
     * A user-defined identifier for the media creator.
     */
    readonly creator: string;
    /**
     * The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     */
    readonly duration: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    readonly identifier: string;
    readonly input: outputs.GetStreamInput;
    /**
     * The live input ID used to upload a video with Stream Live.
     */
    readonly liveInput: string;
    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     */
    readonly maxDurationSeconds: number;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     */
    readonly meta: string;
    /**
     * The date and time the media item was last modified.
     */
    readonly modified: string;
    readonly playback: outputs.GetStreamPlayback;
    /**
     * The video's preview page URI. This field is omitted until encoding is complete.
     */
    readonly preview: string;
    /**
     * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    readonly readyToStream: boolean;
    /**
     * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    readonly readyToStreamAt: string;
    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     */
    readonly requireSignedUrls: boolean;
    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     */
    readonly scheduledDeletion: string;
    /**
     * The size of the media item in bytes.
     */
    readonly size: number;
    /**
     * Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     */
    readonly status: outputs.GetStreamStatus;
    /**
     * The media item's thumbnail URI. This field is omitted until encoding is complete.
     */
    readonly thumbnail: string;
    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     */
    readonly thumbnailTimestampPct: number;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    readonly uid: string;
    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     */
    readonly uploadExpiry: string;
    /**
     * The date and time the media item was uploaded.
     */
    readonly uploaded: string;
    readonly watermark: outputs.GetStreamWatermark;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStream = cloudflare.getStream({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     identifier: "ea95132c15732412d22c1476fa83f27a",
 * });
 * ```
 */
export function getStreamOutput(args: GetStreamOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getStream:getStream", {
        "accountId": args.accountId,
        "identifier": args.identifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getStream.
 */
export interface GetStreamOutputArgs {
    /**
     * The account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    identifier: pulumi.Input<string>;
}
