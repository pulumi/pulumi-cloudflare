// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/pageRule:PageRule example '<zone_id>/<pagerule_id>'
 * ```
 */
export class PageRule extends pulumi.CustomResource {
    /**
     * Get an existing PageRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PageRuleState, opts?: pulumi.CustomResourceOptions): PageRule {
        return new PageRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/pageRule:PageRule';

    /**
     * Returns true if the given object is an instance of PageRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PageRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PageRule.__pulumiType;
    }

    declare public readonly actions: pulumi.Output<outputs.PageRuleActions>;
    /**
     * The timestamp of when the Page Rule was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The timestamp of when the Page Rule was last modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     */
    declare public readonly priority: pulumi.Output<number>;
    /**
     * The status of the Page Rule.
     * Available values: "active", "disabled".
     */
    declare public readonly status: pulumi.Output<string>;
    declare public readonly target: pulumi.Output<string>;
    /**
     * Identifier.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a PageRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PageRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PageRuleArgs | PageRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PageRuleState | undefined;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["status"] = state?.status;
            resourceInputs["target"] = state?.target;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as PageRuleArgs | undefined;
            if (args?.actions === undefined && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["status"] = args?.status;
            resourceInputs["target"] = args?.target;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PageRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PageRule resources.
 */
export interface PageRuleState {
    actions?: pulumi.Input<inputs.PageRuleActions>;
    /**
     * The timestamp of when the Page Rule was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The timestamp of when the Page Rule was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     */
    priority?: pulumi.Input<number>;
    /**
     * The status of the Page Rule.
     * Available values: "active", "disabled".
     */
    status?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PageRule resource.
 */
export interface PageRuleArgs {
    actions: pulumi.Input<inputs.PageRuleActions>;
    /**
     * The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     */
    priority?: pulumi.Input<number>;
    /**
     * The status of the Page Rule.
     * Available values: "active", "disabled".
     */
    status?: pulumi.Input<string>;
    target: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
