// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsZoneTransfersAcl = new cloudflare.DnsZoneTransfersAcl("example_dns_zone_transfers_acl", {
 *     accountId: "01a7362d577a6c3019a474fd6f485823",
 *     ipRange: "192.0.2.53/28",
 *     name: "my-acl-1",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl example '<account_id>/<acl_id>'
 * ```
 */
export class DnsZoneTransfersAcl extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneTransfersAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneTransfersAclState, opts?: pulumi.CustomResourceOptions): DnsZoneTransfersAcl {
        return new DnsZoneTransfersAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl';

    /**
     * Returns true if the given object is an instance of DnsZoneTransfersAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZoneTransfersAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneTransfersAcl.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    /**
     * Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     */
    public readonly ipRange!: pulumi.Output<string>;
    /**
     * The name of the acl.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DnsZoneTransfersAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneTransfersAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneTransfersAclArgs | DnsZoneTransfersAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneTransfersAclState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["ipRange"] = state ? state.ipRange : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DnsZoneTransfersAclArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.ipRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipRange'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["ipRange"] = args ? args.ipRange : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZoneTransfersAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZoneTransfersAcl resources.
 */
export interface DnsZoneTransfersAclState {
    accountId?: pulumi.Input<string>;
    /**
     * Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     */
    ipRange?: pulumi.Input<string>;
    /**
     * The name of the acl.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZoneTransfersAcl resource.
 */
export interface DnsZoneTransfersAclArgs {
    accountId: pulumi.Input<string>;
    /**
     * Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     */
    ipRange: pulumi.Input<string>;
    /**
     * The name of the acl.
     */
    name: pulumi.Input<string>;
}
