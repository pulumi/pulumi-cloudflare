// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWebAnalyticsRule = new cloudflare.WebAnalyticsRule("example_web_analytics_rule", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     rulesetId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 *     host: "example.com",
 *     inclusive: true,
 *     isPaused: false,
 *     paths: ["*"],
 * });
 * ```
 */
export class WebAnalyticsRule extends pulumi.CustomResource {
    /**
     * Get an existing WebAnalyticsRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAnalyticsRuleState, opts?: pulumi.CustomResourceOptions): WebAnalyticsRule {
        return new WebAnalyticsRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/webAnalyticsRule:WebAnalyticsRule';

    /**
     * Returns true if the given object is an instance of WebAnalyticsRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAnalyticsRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAnalyticsRule.__pulumiType;
    }

    /**
     * Identifier.
     */
    public readonly accountId!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Whether the rule includes or excludes traffic from being measured.
     */
    public readonly inclusive!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the rule is paused or not.
     */
    public readonly isPaused!: pulumi.Output<boolean | undefined>;
    public readonly paths!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly priority!: pulumi.Output<number>;
    /**
     * The Web Analytics ruleset identifier.
     */
    public readonly rulesetId!: pulumi.Output<string>;

    /**
     * Create a WebAnalyticsRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAnalyticsRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAnalyticsRuleArgs | WebAnalyticsRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAnalyticsRuleState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["inclusive"] = state ? state.inclusive : undefined;
            resourceInputs["isPaused"] = state ? state.isPaused : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["rulesetId"] = state ? state.rulesetId : undefined;
        } else {
            const args = argsOrState as WebAnalyticsRuleArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.rulesetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulesetId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["inclusive"] = args ? args.inclusive : undefined;
            resourceInputs["isPaused"] = args ? args.isPaused : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["rulesetId"] = args ? args.rulesetId : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAnalyticsRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAnalyticsRule resources.
 */
export interface WebAnalyticsRuleState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * Whether the rule includes or excludes traffic from being measured.
     */
    inclusive?: pulumi.Input<boolean>;
    /**
     * Whether the rule is paused or not.
     */
    isPaused?: pulumi.Input<boolean>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    priority?: pulumi.Input<number>;
    /**
     * The Web Analytics ruleset identifier.
     */
    rulesetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebAnalyticsRule resource.
 */
export interface WebAnalyticsRuleArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * Whether the rule includes or excludes traffic from being measured.
     */
    inclusive?: pulumi.Input<boolean>;
    /**
     * Whether the rule is paused or not.
     */
    isPaused?: pulumi.Input<boolean>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Web Analytics ruleset identifier.
     */
    rulesetId: pulumi.Input<string>;
}
