// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleUserAgentBlockingRule = new cloudflare.UserAgentBlockingRule("example_user_agent_blocking_rule", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     configuration: {
 *         target: "ip",
 *         value: "198.51.100.4",
 *     },
 *     mode: "challenge",
 * });
 * ```
 */
export class UserAgentBlockingRule extends pulumi.CustomResource {
    /**
     * Get an existing UserAgentBlockingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserAgentBlockingRuleState, opts?: pulumi.CustomResourceOptions): UserAgentBlockingRule {
        return new UserAgentBlockingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule';

    /**
     * Returns true if the given object is an instance of UserAgentBlockingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserAgentBlockingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserAgentBlockingRule.__pulumiType;
    }

    /**
     * The rule configuration.
     */
    public readonly configuration!: pulumi.Output<outputs.UserAgentBlockingRuleConfiguration>;
    /**
     * The action to apply to a matched request.
     * Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    public readonly uaRuleId!: pulumi.Output<string | undefined>;
    /**
     * Defines an identifier.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a UserAgentBlockingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserAgentBlockingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserAgentBlockingRuleArgs | UserAgentBlockingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserAgentBlockingRuleState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["uaRuleId"] = state ? state.uaRuleId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as UserAgentBlockingRuleArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["uaRuleId"] = args ? args.uaRuleId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserAgentBlockingRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserAgentBlockingRule resources.
 */
export interface UserAgentBlockingRuleState {
    /**
     * The rule configuration.
     */
    configuration?: pulumi.Input<inputs.UserAgentBlockingRuleConfiguration>;
    /**
     * The action to apply to a matched request.
     * Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
     */
    mode?: pulumi.Input<string>;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    uaRuleId?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserAgentBlockingRule resource.
 */
export interface UserAgentBlockingRuleArgs {
    /**
     * The rule configuration.
     */
    configuration: pulumi.Input<inputs.UserAgentBlockingRuleConfiguration>;
    /**
     * The action to apply to a matched request.
     * Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
     */
    mode: pulumi.Input<string>;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    uaRuleId?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
