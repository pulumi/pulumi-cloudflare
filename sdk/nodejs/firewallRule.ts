// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > `cloudflare.FirewallRule` is in a deprecation phase until January 15th, 2025.
 *   During this time period, this resource is still
 *   fully supported but you are strongly advised  to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleFirewallRule = new cloudflare.FirewallRule("example_firewall_rule", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     action: {
 *         mode: "simulate",
 *         response: {
 *             body: "<error>This request has been rate-limited.</error>",
 *             contentType: "text/xml",
 *         },
 *         timeout: 86400,
 *     },
 *     filter: {
 *         description: "Restrict access from these browsers on this address range.",
 *         expression: "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.addr ne 172.16.22.155",
 *         paused: false,
 *         ref: "FIL-100",
 *     },
 * });
 * ```
 */
export class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule {
        return new FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/firewallRule:FirewallRule';

    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }

    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    public readonly action!: pulumi.Output<outputs.FirewallRuleAction>;
    /**
     * An informative summary of the firewall rule.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    public readonly filter!: pulumi.Output<outputs.FirewallRuleFilter>;
    /**
     * When true, indicates that the firewall rule is currently paused.
     */
    public /*out*/ readonly paused!: pulumi.Output<boolean>;
    /**
     * The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     */
    public /*out*/ readonly priority!: pulumi.Output<number>;
    public /*out*/ readonly products!: pulumi.Output<string[]>;
    /**
     * A short reference tag. Allows you to select related firewall rules.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * The unique identifier of the firewall rule.
     */
    public readonly ruleId!: pulumi.Output<string | undefined>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRuleArgs | FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["products"] = state ? state.products : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as FirewallRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["ruleId"] = args ? args.ruleId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["paused"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["products"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    action?: pulumi.Input<inputs.FirewallRuleAction>;
    /**
     * An informative summary of the firewall rule.
     */
    description?: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.FirewallRuleFilter>;
    /**
     * When true, indicates that the firewall rule is currently paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     */
    priority?: pulumi.Input<number>;
    products?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A short reference tag. Allows you to select related firewall rules.
     */
    ref?: pulumi.Input<string>;
    /**
     * The unique identifier of the firewall rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    action: pulumi.Input<inputs.FirewallRuleAction>;
    filter: pulumi.Input<inputs.FirewallRuleFilter>;
    /**
     * The unique identifier of the firewall rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
