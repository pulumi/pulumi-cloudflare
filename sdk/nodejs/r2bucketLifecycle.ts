// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class R2BucketLifecycle extends pulumi.CustomResource {
    /**
     * Get an existing R2BucketLifecycle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2BucketLifecycleState, opts?: pulumi.CustomResourceOptions): R2BucketLifecycle {
        return new R2BucketLifecycle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/r2BucketLifecycle:R2BucketLifecycle';

    /**
     * Returns true if the given object is an instance of R2BucketLifecycle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is R2BucketLifecycle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === R2BucketLifecycle.__pulumiType;
    }

    /**
     * Account ID
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Name of the bucket
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Jurisdiction of the bucket
     */
    public readonly jurisdiction!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.R2BucketLifecycleRule[]>;

    /**
     * Create a R2BucketLifecycle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2BucketLifecycleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: R2BucketLifecycleArgs | R2BucketLifecycleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as R2BucketLifecycleState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["jurisdiction"] = state ? state.jurisdiction : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as R2BucketLifecycleArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["jurisdiction"] = args ? args.jurisdiction : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(R2BucketLifecycle.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering R2BucketLifecycle resources.
 */
export interface R2BucketLifecycleState {
    /**
     * Account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.R2BucketLifecycleRule>[]>;
}

/**
 * The set of arguments for constructing a R2BucketLifecycle resource.
 */
export interface R2BucketLifecycleArgs {
    /**
     * Account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    bucketName: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.R2BucketLifecycleRule>[]>;
}
