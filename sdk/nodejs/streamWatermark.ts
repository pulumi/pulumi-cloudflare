// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreamWatermark = new cloudflare.StreamWatermark("example_stream_watermark", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     file: "@/Users/rchen/Downloads/watermark.png",
 *     name: "Marketing Videos",
 *     opacity: 0.75,
 *     padding: 0.1,
 *     position: "center",
 *     scale: 0.1,
 * });
 * ```
 */
export class StreamWatermark extends pulumi.CustomResource {
    /**
     * Get an existing StreamWatermark resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamWatermarkState, opts?: pulumi.CustomResourceOptions): StreamWatermark {
        return new StreamWatermark(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/streamWatermark:StreamWatermark';

    /**
     * Returns true if the given object is an instance of StreamWatermark.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamWatermark {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamWatermark.__pulumiType;
    }

    /**
     * The account identifier tag.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The date and a time a watermark profile was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
     */
    declare public /*out*/ readonly downloadedFrom: pulumi.Output<string>;
    /**
     * The image file to upload.
     */
    declare public readonly file: pulumi.Output<string>;
    /**
     * The height of the image in pixels.
     */
    declare public /*out*/ readonly height: pulumi.Output<number>;
    /**
     * The unique identifier for a watermark profile.
     */
    declare public readonly identifier: pulumi.Output<string | undefined>;
    /**
     * A short description of the watermark profile.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     */
    declare public readonly opacity: pulumi.Output<number>;
    /**
     * The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     */
    declare public readonly padding: pulumi.Output<number>;
    /**
     * The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     */
    declare public readonly position: pulumi.Output<string>;
    /**
     * The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     */
    declare public readonly scale: pulumi.Output<number>;
    /**
     * The size of the image in bytes.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * The unique identifier for a watermark profile.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The width of the image in pixels.
     */
    declare public /*out*/ readonly width: pulumi.Output<number>;

    /**
     * Create a StreamWatermark resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamWatermarkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamWatermarkArgs | StreamWatermarkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamWatermarkState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["created"] = state?.created;
            resourceInputs["downloadedFrom"] = state?.downloadedFrom;
            resourceInputs["file"] = state?.file;
            resourceInputs["height"] = state?.height;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["opacity"] = state?.opacity;
            resourceInputs["padding"] = state?.padding;
            resourceInputs["position"] = state?.position;
            resourceInputs["scale"] = state?.scale;
            resourceInputs["size"] = state?.size;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["width"] = state?.width;
        } else {
            const args = argsOrState as StreamWatermarkArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.file === undefined && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["file"] = args?.file;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["opacity"] = args?.opacity;
            resourceInputs["padding"] = args?.padding;
            resourceInputs["position"] = args?.position;
            resourceInputs["scale"] = args?.scale;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["downloadedFrom"] = undefined /*out*/;
            resourceInputs["height"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["width"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamWatermark.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamWatermark resources.
 */
export interface StreamWatermarkState {
    /**
     * The account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The date and a time a watermark profile was created.
     */
    created?: pulumi.Input<string>;
    /**
     * The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
     */
    downloadedFrom?: pulumi.Input<string>;
    /**
     * The image file to upload.
     */
    file?: pulumi.Input<string>;
    /**
     * The height of the image in pixels.
     */
    height?: pulumi.Input<number>;
    /**
     * The unique identifier for a watermark profile.
     */
    identifier?: pulumi.Input<string>;
    /**
     * A short description of the watermark profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     */
    opacity?: pulumi.Input<number>;
    /**
     * The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     */
    padding?: pulumi.Input<number>;
    /**
     * The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     */
    position?: pulumi.Input<string>;
    /**
     * The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     */
    scale?: pulumi.Input<number>;
    /**
     * The size of the image in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The unique identifier for a watermark profile.
     */
    uid?: pulumi.Input<string>;
    /**
     * The width of the image in pixels.
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a StreamWatermark resource.
 */
export interface StreamWatermarkArgs {
    /**
     * The account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * The image file to upload.
     */
    file: pulumi.Input<string>;
    /**
     * The unique identifier for a watermark profile.
     */
    identifier?: pulumi.Input<string>;
    /**
     * A short description of the watermark profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     */
    opacity?: pulumi.Input<number>;
    /**
     * The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     */
    padding?: pulumi.Input<number>;
    /**
     * The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     */
    position?: pulumi.Input<string>;
    /**
     * The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     */
    scale?: pulumi.Input<number>;
}
