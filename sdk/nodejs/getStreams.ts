// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreams = cloudflare.getStreams({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     creator: "creator-id_abcde12345",
 *     end: "2014-01-02T02:20:00Z",
 *     search: "puppy.mp4",
 *     start: "2014-01-02T02:20:00Z",
 *     status: "inprogress",
 *     type: "live",
 *     videoName: "puppy.mp4",
 * });
 * ```
 */
export function getStreams(args: GetStreamsArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getStreams:getStreams", {
        "accountId": args.accountId,
        "asc": args.asc,
        "creator": args.creator,
        "end": args.end,
        "includeCounts": args.includeCounts,
        "maxItems": args.maxItems,
        "search": args.search,
        "start": args.start,
        "status": args.status,
        "type": args.type,
        "videoName": args.videoName,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreams.
 */
export interface GetStreamsArgs {
    /**
     * The account identifier tag.
     */
    accountId: string;
    /**
     * Lists videos in ascending order of creation.
     */
    asc?: boolean;
    /**
     * A user-defined identifier for the media creator.
     */
    creator?: string;
    /**
     * Lists videos created before the specified date.
     */
    end?: string;
    /**
     * Includes the total number of videos associated with the submitted query parameters.
     */
    includeCounts?: boolean;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * Provides a partial word match of the `name` key in the `meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
     */
    search?: string;
    /**
     * Lists videos created after the specified date.
     */
    start?: string;
    /**
     * Specifies the processing status for all quality levels for a video.
     * Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
     */
    status?: string;
    /**
     * Specifies whether the video is `vod` or `live`.
     */
    type?: string;
    /**
     * Provides a fast, exact string match on the `name` key in the `meta` field.
     */
    videoName?: string;
}

/**
 * A collection of values returned by getStreams.
 */
export interface GetStreamsResult {
    /**
     * The account identifier tag.
     */
    readonly accountId: string;
    /**
     * Lists videos in ascending order of creation.
     */
    readonly asc: boolean;
    /**
     * A user-defined identifier for the media creator.
     */
    readonly creator?: string;
    /**
     * Lists videos created before the specified date.
     */
    readonly end?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Includes the total number of videos associated with the submitted query parameters.
     */
    readonly includeCounts: boolean;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetStreamsResult[];
    /**
     * Provides a partial word match of the `name` key in the `meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
     */
    readonly search?: string;
    /**
     * Lists videos created after the specified date.
     */
    readonly start?: string;
    /**
     * Specifies the processing status for all quality levels for a video.
     * Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
     */
    readonly status?: string;
    /**
     * Specifies whether the video is `vod` or `live`.
     */
    readonly type?: string;
    /**
     * Provides a fast, exact string match on the `name` key in the `meta` field.
     */
    readonly videoName?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreams = cloudflare.getStreams({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     creator: "creator-id_abcde12345",
 *     end: "2014-01-02T02:20:00Z",
 *     search: "puppy.mp4",
 *     start: "2014-01-02T02:20:00Z",
 *     status: "inprogress",
 *     type: "live",
 *     videoName: "puppy.mp4",
 * });
 * ```
 */
export function getStreamsOutput(args: GetStreamsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getStreams:getStreams", {
        "accountId": args.accountId,
        "asc": args.asc,
        "creator": args.creator,
        "end": args.end,
        "includeCounts": args.includeCounts,
        "maxItems": args.maxItems,
        "search": args.search,
        "start": args.start,
        "status": args.status,
        "type": args.type,
        "videoName": args.videoName,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreams.
 */
export interface GetStreamsOutputArgs {
    /**
     * The account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * Lists videos in ascending order of creation.
     */
    asc?: pulumi.Input<boolean>;
    /**
     * A user-defined identifier for the media creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * Lists videos created before the specified date.
     */
    end?: pulumi.Input<string>;
    /**
     * Includes the total number of videos associated with the submitted query parameters.
     */
    includeCounts?: pulumi.Input<boolean>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * Provides a partial word match of the `name` key in the `meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
     */
    search?: pulumi.Input<string>;
    /**
     * Lists videos created after the specified date.
     */
    start?: pulumi.Input<string>;
    /**
     * Specifies the processing status for all quality levels for a video.
     * Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies whether the video is `vod` or `live`.
     */
    type?: pulumi.Input<string>;
    /**
     * Provides a fast, exact string match on the `name` key in the `meta` field.
     */
    videoName?: pulumi.Input<string>;
}
