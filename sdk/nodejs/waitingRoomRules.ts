// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWaitingRoomRules = new cloudflare.WaitingRoomRules("example_waiting_room_rules", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     waitingRoomId: "699d98642c564d2e855e9661899b7252",
 *     rules: [{
 *         action: "bypass_waiting_room",
 *         expression: "ip.src in {10.20.30.40}",
 *         description: "allow all traffic from 10.20.30.40",
 *         enabled: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/waitingRoomRules:WaitingRoomRules example '<zone_id>/<waiting_room_id>'
 * ```
 */
export class WaitingRoomRules extends pulumi.CustomResource {
    /**
     * Get an existing WaitingRoomRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WaitingRoomRulesState, opts?: pulumi.CustomResourceOptions): WaitingRoomRules {
        return new WaitingRoomRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/waitingRoomRules:WaitingRoomRules';

    /**
     * Returns true if the given object is an instance of WaitingRoomRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WaitingRoomRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WaitingRoomRules.__pulumiType;
    }

    /**
     * The action to take when the expression matches.
     * Available values: "bypass*waiting*room".
     */
    public /*out*/ readonly action!: pulumi.Output<string>;
    /**
     * The description of the rule.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * When set to true, the rule is enabled.
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * Criteria defining when there is a match for the current rule.
     */
    public /*out*/ readonly expression!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.WaitingRoomRulesRule[]>;
    /**
     * The version of the rule.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly waitingRoomId!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a WaitingRoomRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WaitingRoomRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WaitingRoomRulesArgs | WaitingRoomRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WaitingRoomRulesState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["waitingRoomId"] = state ? state.waitingRoomId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as WaitingRoomRulesArgs | undefined;
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            if ((!args || args.waitingRoomId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'waitingRoomId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["waitingRoomId"] = args ? args.waitingRoomId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["expression"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WaitingRoomRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WaitingRoomRules resources.
 */
export interface WaitingRoomRulesState {
    /**
     * The action to take when the expression matches.
     * Available values: "bypass*waiting*room".
     */
    action?: pulumi.Input<string>;
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * When set to true, the rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Criteria defining when there is a match for the current rule.
     */
    expression?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.WaitingRoomRulesRule>[]>;
    /**
     * The version of the rule.
     */
    version?: pulumi.Input<string>;
    waitingRoomId?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WaitingRoomRules resource.
 */
export interface WaitingRoomRulesArgs {
    rules: pulumi.Input<pulumi.Input<inputs.WaitingRoomRulesRule>[]>;
    waitingRoomId: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
