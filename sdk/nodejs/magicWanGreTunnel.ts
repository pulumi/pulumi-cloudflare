// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example '<account_id>/<gre_tunnel_id>'
 * ```
 */
export class MagicWanGreTunnel extends pulumi.CustomResource {
    /**
     * Get an existing MagicWanGreTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicWanGreTunnelState, opts?: pulumi.CustomResourceOptions): MagicWanGreTunnel {
        return new MagicWanGreTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel';

    /**
     * Returns true if the given object is an instance of MagicWanGreTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicWanGreTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicWanGreTunnel.__pulumiType;
    }

    /**
     * Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    declare public readonly cloudflareGreEndpoint: pulumi.Output<string>;
    /**
     * The date and time the tunnel was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    declare public readonly customerGreEndpoint: pulumi.Output<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly healthCheck: pulumi.Output<outputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    declare public readonly interfaceAddress: pulumi.Output<string>;
    /**
     * A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     */
    declare public readonly interfaceAddress6: pulumi.Output<string | undefined>;
    /**
     * The date and time the tunnel was last modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    declare public readonly mtu: pulumi.Output<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    declare public readonly ttl: pulumi.Output<number>;

    /**
     * Create a MagicWanGreTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicWanGreTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicWanGreTunnelArgs | MagicWanGreTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicWanGreTunnelState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["cloudflareGreEndpoint"] = state?.cloudflareGreEndpoint;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["customerGreEndpoint"] = state?.customerGreEndpoint;
            resourceInputs["description"] = state?.description;
            resourceInputs["healthCheck"] = state?.healthCheck;
            resourceInputs["interfaceAddress"] = state?.interfaceAddress;
            resourceInputs["interfaceAddress6"] = state?.interfaceAddress6;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["name"] = state?.name;
            resourceInputs["ttl"] = state?.ttl;
        } else {
            const args = argsOrState as MagicWanGreTunnelArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.cloudflareGreEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudflareGreEndpoint'");
            }
            if (args?.customerGreEndpoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'customerGreEndpoint'");
            }
            if (args?.interfaceAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'interfaceAddress'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["cloudflareGreEndpoint"] = args?.cloudflareGreEndpoint;
            resourceInputs["customerGreEndpoint"] = args?.customerGreEndpoint;
            resourceInputs["description"] = args?.description;
            resourceInputs["healthCheck"] = args?.healthCheck;
            resourceInputs["interfaceAddress"] = args?.interfaceAddress;
            resourceInputs["interfaceAddress6"] = args?.interfaceAddress6;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["name"] = args?.name;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/greTunnel:GreTunnel" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MagicWanGreTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicWanGreTunnel resources.
 */
export interface MagicWanGreTunnelState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint?: pulumi.Input<string>;
    /**
     * The date and time the tunnel was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint?: pulumi.Input<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    description?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress?: pulumi.Input<string>;
    /**
     * A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     */
    interfaceAddress6?: pulumi.Input<string>;
    /**
     * The date and time the tunnel was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MagicWanGreTunnel resource.
 */
export interface MagicWanGreTunnelArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint: pulumi.Input<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    description?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     */
    interfaceAddress6?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}
