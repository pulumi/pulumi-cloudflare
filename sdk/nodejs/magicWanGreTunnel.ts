// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicWanGreTunnel = new cloudflare.MagicWanGreTunnel("example_magic_wan_gre_tunnel", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     cloudflareGreEndpoint: "203.0.113.1",
 *     customerGreEndpoint: "203.0.113.1",
 *     interfaceAddress: "192.0.2.0/31",
 *     name: "GRE_1",
 *     description: "Tunnel for ISP X",
 *     healthCheck: {
 *         direction: "bidirectional",
 *         enabled: true,
 *         rate: "low",
 *         target: {
 *             saved: "203.0.113.1",
 *         },
 *         type: "request",
 *     },
 *     mtu: 0,
 *     ttl: 0,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example '<account_id>/<gre_tunnel_id>'
 * ```
 */
export class MagicWanGreTunnel extends pulumi.CustomResource {
    /**
     * Get an existing MagicWanGreTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicWanGreTunnelState, opts?: pulumi.CustomResourceOptions): MagicWanGreTunnel {
        return new MagicWanGreTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel';

    /**
     * Returns true if the given object is an instance of MagicWanGreTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicWanGreTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicWanGreTunnel.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    public readonly cloudflareGreEndpoint!: pulumi.Output<string>;
    /**
     * The date and time the tunnel was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    public readonly customerGreEndpoint!: pulumi.Output<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly greTunnel!: pulumi.Output<outputs.MagicWanGreTunnelGreTunnel>;
    public readonly healthCheck!: pulumi.Output<outputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    public readonly interfaceAddress!: pulumi.Output<string>;
    public /*out*/ readonly modified!: pulumi.Output<boolean>;
    public /*out*/ readonly modifiedGreTunnel!: pulumi.Output<outputs.MagicWanGreTunnelModifiedGreTunnel>;
    /**
     * The date and time the tunnel was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a MagicWanGreTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicWanGreTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicWanGreTunnelArgs | MagicWanGreTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicWanGreTunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["cloudflareGreEndpoint"] = state ? state.cloudflareGreEndpoint : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["customerGreEndpoint"] = state ? state.customerGreEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["greTunnel"] = state ? state.greTunnel : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["interfaceAddress"] = state ? state.interfaceAddress : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["modifiedGreTunnel"] = state ? state.modifiedGreTunnel : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as MagicWanGreTunnelArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.cloudflareGreEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudflareGreEndpoint'");
            }
            if ((!args || args.customerGreEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGreEndpoint'");
            }
            if ((!args || args.interfaceAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceAddress'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["cloudflareGreEndpoint"] = args ? args.cloudflareGreEndpoint : undefined;
            resourceInputs["customerGreEndpoint"] = args ? args.customerGreEndpoint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["interfaceAddress"] = args ? args.interfaceAddress : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["greTunnel"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["modifiedGreTunnel"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/greTunnel:GreTunnel" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MagicWanGreTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicWanGreTunnel resources.
 */
export interface MagicWanGreTunnelState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint?: pulumi.Input<string>;
    /**
     * The date and time the tunnel was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint?: pulumi.Input<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    description?: pulumi.Input<string>;
    greTunnel?: pulumi.Input<inputs.MagicWanGreTunnelGreTunnel>;
    healthCheck?: pulumi.Input<inputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress?: pulumi.Input<string>;
    modified?: pulumi.Input<boolean>;
    modifiedGreTunnel?: pulumi.Input<inputs.MagicWanGreTunnelModifiedGreTunnel>;
    /**
     * The date and time the tunnel was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MagicWanGreTunnel resource.
 */
export interface MagicWanGreTunnelArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint: pulumi.Input<string>;
    /**
     * An optional description of the GRE tunnel.
     */
    description?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.MagicWanGreTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}
