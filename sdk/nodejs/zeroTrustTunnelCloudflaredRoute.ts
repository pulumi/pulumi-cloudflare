// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflaredRoute = new cloudflare.ZeroTrustTunnelCloudflaredRoute("example_zero_trust_tunnel_cloudflared_route", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     network: "172.16.0.0/16",
 *     tunnelId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     comment: "Example comment for this route.",
 *     virtualNetworkId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute example '<account_id>/<route_id>'
 * ```
 */
export class ZeroTrustTunnelCloudflaredRoute extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustTunnelCloudflaredRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustTunnelCloudflaredRouteState, opts?: pulumi.CustomResourceOptions): ZeroTrustTunnelCloudflaredRoute {
        return new ZeroTrustTunnelCloudflaredRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute';

    /**
     * Returns true if the given object is an instance of ZeroTrustTunnelCloudflaredRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustTunnelCloudflaredRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustTunnelCloudflaredRoute.__pulumiType;
    }

    /**
     * Cloudflare account ID
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Optional remark describing the route.
     */
    declare public readonly comment: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     */
    declare public /*out*/ readonly deletedAt: pulumi.Output<string>;
    /**
     * The private IPv4 or IPv6 range connected by the route, in CIDR notation.
     */
    declare public readonly network: pulumi.Output<string>;
    /**
     * UUID of the tunnel.
     */
    declare public readonly tunnelId: pulumi.Output<string>;
    /**
     * UUID of the virtual network.
     */
    declare public readonly virtualNetworkId: pulumi.Output<string>;

    /**
     * Create a ZeroTrustTunnelCloudflaredRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustTunnelCloudflaredRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustTunnelCloudflaredRouteArgs | ZeroTrustTunnelCloudflaredRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustTunnelCloudflaredRouteState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletedAt"] = state?.deletedAt;
            resourceInputs["network"] = state?.network;
            resourceInputs["tunnelId"] = state?.tunnelId;
            resourceInputs["virtualNetworkId"] = state?.virtualNetworkId;
        } else {
            const args = argsOrState as ZeroTrustTunnelCloudflaredRouteArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.network === undefined && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if (args?.tunnelId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["network"] = args?.network;
            resourceInputs["tunnelId"] = args?.tunnelId;
            resourceInputs["virtualNetworkId"] = args?.virtualNetworkId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/tunnelRoute:TunnelRoute" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustTunnelCloudflaredRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustTunnelCloudflaredRoute resources.
 */
export interface ZeroTrustTunnelCloudflaredRouteState {
    /**
     * Cloudflare account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * Optional remark describing the route.
     */
    comment?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * The private IPv4 or IPv6 range connected by the route, in CIDR notation.
     */
    network?: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * UUID of the virtual network.
     */
    virtualNetworkId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustTunnelCloudflaredRoute resource.
 */
export interface ZeroTrustTunnelCloudflaredRouteArgs {
    /**
     * Cloudflare account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Optional remark describing the route.
     */
    comment?: pulumi.Input<string>;
    /**
     * The private IPv4 or IPv6 range connected by the route, in CIDR notation.
     */
    network: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId: pulumi.Input<string>;
    /**
     * UUID of the virtual network.
     */
    virtualNetworkId?: pulumi.Input<string>;
}
