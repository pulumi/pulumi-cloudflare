// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleApiToken = cloudflare.getApiToken({
 *     tokenId: "ed17574386854bf78a67040be0a770b0",
 * });
 * ```
 */
export function getApiToken(args?: GetApiTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetApiTokenResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getApiToken:getApiToken", {
        "filter": args.filter,
        "tokenId": args.tokenId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiToken.
 */
export interface GetApiTokenArgs {
    filter?: inputs.GetApiTokenFilter;
    /**
     * Token identifier tag.
     */
    tokenId?: string;
}

/**
 * A collection of values returned by getApiToken.
 */
export interface GetApiTokenResult {
    readonly condition: outputs.GetApiTokenCondition;
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     */
    readonly expiresOn: string;
    readonly filter?: outputs.GetApiTokenFilter;
    /**
     * Token identifier tag.
     */
    readonly id: string;
    /**
     * The time on which the token was created.
     */
    readonly issuedOn: string;
    /**
     * Last time the token was used.
     */
    readonly lastUsedOn: string;
    /**
     * Last time the token was modified.
     */
    readonly modifiedOn: string;
    /**
     * Token name.
     */
    readonly name: string;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    readonly notBefore: string;
    /**
     * List of access policies assigned to the token.
     */
    readonly policies: outputs.GetApiTokenPolicy[];
    /**
     * Status of the token.
     * Available values: "active", "disabled", "expired".
     */
    readonly status: string;
    /**
     * Token identifier tag.
     */
    readonly tokenId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleApiToken = cloudflare.getApiToken({
 *     tokenId: "ed17574386854bf78a67040be0a770b0",
 * });
 * ```
 */
export function getApiTokenOutput(args?: GetApiTokenOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApiTokenResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getApiToken:getApiToken", {
        "filter": args.filter,
        "tokenId": args.tokenId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiToken.
 */
export interface GetApiTokenOutputArgs {
    filter?: pulumi.Input<inputs.GetApiTokenFilterArgs>;
    /**
     * Token identifier tag.
     */
    tokenId?: pulumi.Input<string>;
}
