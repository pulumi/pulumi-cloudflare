// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accountSubscription:AccountSubscription example '<account_id>'
 * ```
 */
export class AccountSubscription extends pulumi.CustomResource {
    /**
     * Get an existing AccountSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountSubscriptionState, opts?: pulumi.CustomResourceOptions): AccountSubscription {
        return new AccountSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accountSubscription:AccountSubscription';

    /**
     * Returns true if the given object is an instance of AccountSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountSubscription.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The monetary unit in which pricing information is displayed.
     */
    public /*out*/ readonly currency!: pulumi.Output<string>;
    /**
     * The end of the current period and also when the next billing is due.
     */
    public /*out*/ readonly currentPeriodEnd!: pulumi.Output<string>;
    /**
     * When the current billing period started. May match initial*period*start if this is the first period.
     */
    public /*out*/ readonly currentPeriodStart!: pulumi.Output<string>;
    /**
     * How often the subscription is renewed automatically.
     * Available values: "weekly", "monthly", "quarterly", "yearly".
     */
    public readonly frequency!: pulumi.Output<string | undefined>;
    /**
     * The price of the subscription that will be billed, in US dollars.
     */
    public /*out*/ readonly price!: pulumi.Output<number>;
    /**
     * The rate plan applied to the subscription.
     */
    public readonly ratePlan!: pulumi.Output<outputs.AccountSubscriptionRatePlan | undefined>;
    /**
     * The state that the subscription is in.
     * Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a AccountSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountSubscriptionArgs | AccountSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountSubscriptionState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["currency"] = state ? state.currency : undefined;
            resourceInputs["currentPeriodEnd"] = state ? state.currentPeriodEnd : undefined;
            resourceInputs["currentPeriodStart"] = state ? state.currentPeriodStart : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["price"] = state ? state.price : undefined;
            resourceInputs["ratePlan"] = state ? state.ratePlan : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as AccountSubscriptionArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["ratePlan"] = args ? args.ratePlan : undefined;
            resourceInputs["currency"] = undefined /*out*/;
            resourceInputs["currentPeriodEnd"] = undefined /*out*/;
            resourceInputs["currentPeriodStart"] = undefined /*out*/;
            resourceInputs["price"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountSubscription resources.
 */
export interface AccountSubscriptionState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * The monetary unit in which pricing information is displayed.
     */
    currency?: pulumi.Input<string>;
    /**
     * The end of the current period and also when the next billing is due.
     */
    currentPeriodEnd?: pulumi.Input<string>;
    /**
     * When the current billing period started. May match initial*period*start if this is the first period.
     */
    currentPeriodStart?: pulumi.Input<string>;
    /**
     * How often the subscription is renewed automatically.
     * Available values: "weekly", "monthly", "quarterly", "yearly".
     */
    frequency?: pulumi.Input<string>;
    /**
     * The price of the subscription that will be billed, in US dollars.
     */
    price?: pulumi.Input<number>;
    /**
     * The rate plan applied to the subscription.
     */
    ratePlan?: pulumi.Input<inputs.AccountSubscriptionRatePlan>;
    /**
     * The state that the subscription is in.
     * Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccountSubscription resource.
 */
export interface AccountSubscriptionArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * How often the subscription is renewed automatically.
     * Available values: "weekly", "monthly", "quarterly", "yearly".
     */
    frequency?: pulumi.Input<string>;
    /**
     * The rate plan applied to the subscription.
     */
    ratePlan?: pulumi.Input<inputs.AccountSubscriptionRatePlan>;
}
