// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessPolicy = new cloudflare.ZeroTrustAccessPolicy("example_zero_trust_access_policy", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     decision: "allow",
 *     includes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     name: "Allow devs",
 *     approvalGroups: [
 *         {
 *             approvals_needed: 1,
 *             email_addresses: [
 *                 "test1@cloudflare.com",
 *                 "test2@cloudflare.com",
 *             ],
 *             email_list_uuid: "email_list_uuid",
 *         },
 *         {
 *             approvals_needed: 3,
 *             email_addresses: [
 *                 "test@cloudflare.com",
 *                 "test2@cloudflare.com",
 *             ],
 *             email_list_uuid: "597147a1-976b-4ef2-9af0-81d5d007fc34",
 *         },
 *     ],
 *     approvalRequired: true,
 *     excludes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     isolationRequired: false,
 *     purposeJustificationPrompt: "Please enter a justification for entering this protected domain.",
 *     purposeJustificationRequired: true,
 *     requires: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     sessionDuration: "24h",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessPolicy:AccessPolicy example '<account_id>/<policy_id>'
 * ```
 *
 * @deprecated cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy
 */
export class AccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessPolicyState, opts?: pulumi.CustomResourceOptions): AccessPolicy {
        pulumi.log.warn("AccessPolicy is deprecated: cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy")
        return new AccessPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/accessPolicy:AccessPolicy';

    /**
     * Returns true if the given object is an instance of AccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessPolicy.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    declare public readonly approvalGroups: pulumi.Output<outputs.AccessPolicyApprovalGroup[] | undefined>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    declare public readonly approvalRequired: pulumi.Output<boolean | undefined>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    declare public readonly decision: pulumi.Output<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    declare public readonly excludes: pulumi.Output<outputs.AccessPolicyExclude[] | undefined>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    declare public readonly includes: pulumi.Output<outputs.AccessPolicyInclude[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    declare public readonly isolationRequired: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Access policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    declare public readonly purposeJustificationPrompt: pulumi.Output<string | undefined>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    declare public readonly purposeJustificationRequired: pulumi.Output<boolean | undefined>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    declare public readonly requires: pulumi.Output<outputs.AccessPolicyRequire[] | undefined>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     */
    declare public readonly sessionDuration: pulumi.Output<string>;

    /**
     * Create a AccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy */
    constructor(name: string, args: AccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy */
    constructor(name: string, argsOrState?: AccessPolicyArgs | AccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("AccessPolicy is deprecated: cloudflare.index/accesspolicy.AccessPolicy has been deprecated in favor of cloudflare.index/zerotrustaccesspolicy.ZeroTrustAccessPolicy")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessPolicyState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["approvalGroups"] = state?.approvalGroups;
            resourceInputs["approvalRequired"] = state?.approvalRequired;
            resourceInputs["decision"] = state?.decision;
            resourceInputs["excludes"] = state?.excludes;
            resourceInputs["includes"] = state?.includes;
            resourceInputs["isolationRequired"] = state?.isolationRequired;
            resourceInputs["name"] = state?.name;
            resourceInputs["purposeJustificationPrompt"] = state?.purposeJustificationPrompt;
            resourceInputs["purposeJustificationRequired"] = state?.purposeJustificationRequired;
            resourceInputs["requires"] = state?.requires;
            resourceInputs["sessionDuration"] = state?.sessionDuration;
        } else {
            const args = argsOrState as AccessPolicyArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.decision === undefined && !opts.urn) {
                throw new Error("Missing required property 'decision'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["approvalGroups"] = args?.approvalGroups;
            resourceInputs["approvalRequired"] = args?.approvalRequired;
            resourceInputs["decision"] = args?.decision;
            resourceInputs["excludes"] = args?.excludes;
            resourceInputs["includes"] = args?.includes;
            resourceInputs["isolationRequired"] = args?.isolationRequired;
            resourceInputs["name"] = args?.name;
            resourceInputs["purposeJustificationPrompt"] = args?.purposeJustificationPrompt;
            resourceInputs["purposeJustificationRequired"] = args?.purposeJustificationRequired;
            resourceInputs["requires"] = args?.requires;
            resourceInputs["sessionDuration"] = args?.sessionDuration;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessPolicy:AccessPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(AccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessPolicy resources.
 */
export interface AccessPolicyState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.AccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessPolicy resource.
 */
export interface AccessPolicyArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.AccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.AccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.AccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}
