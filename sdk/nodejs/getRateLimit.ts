// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRateLimit = cloudflare.getRateLimit({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     rateLimitId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export function getRateLimit(args: GetRateLimitArgs, opts?: pulumi.InvokeOptions): Promise<GetRateLimitResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getRateLimit:getRateLimit", {
        "rateLimitId": args.rateLimitId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRateLimit.
 */
export interface GetRateLimitArgs {
    /**
     * Defines the unique identifier of the rate limit.
     */
    rateLimitId?: string;
    /**
     * Defines an identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getRateLimit.
 */
export interface GetRateLimitResult {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    readonly action: outputs.GetRateLimitAction;
    /**
     * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     */
    readonly bypasses: outputs.GetRateLimitBypass[];
    /**
     * An informative summary of the rate limit. This value is sanitized and any tags will be removed.
     */
    readonly description: string;
    /**
     * When true, indicates that the rate limit is currently disabled.
     */
    readonly disabled: boolean;
    /**
     * Defines the unique identifier of the rate limit.
     */
    readonly id: string;
    /**
     * Determines which traffic the rate limit counts towards the threshold.
     */
    readonly match: outputs.GetRateLimitMatch;
    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     */
    readonly period: number;
    /**
     * Defines the unique identifier of the rate limit.
     */
    readonly rateLimitId?: string;
    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     */
    readonly threshold: number;
    /**
     * Defines an identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRateLimit = cloudflare.getRateLimit({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     rateLimitId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export function getRateLimitOutput(args: GetRateLimitOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRateLimitResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getRateLimit:getRateLimit", {
        "rateLimitId": args.rateLimitId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRateLimit.
 */
export interface GetRateLimitOutputArgs {
    /**
     * Defines the unique identifier of the rate limit.
     */
    rateLimitId?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
