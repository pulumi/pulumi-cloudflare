// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleImageVariant = new cloudflare.ImageVariant("example_image_variant", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     id: "hero",
 *     options: {
 *         fit: "scale-down",
 *         height: 768,
 *         metadata: "none",
 *         width: 1366,
 *     },
 *     neverRequireSignedUrls: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/imageVariant:ImageVariant example '<account_id>/<variant_id>'
 * ```
 */
export class ImageVariant extends pulumi.CustomResource {
    /**
     * Get an existing ImageVariant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageVariantState, opts?: pulumi.CustomResourceOptions): ImageVariant {
        return new ImageVariant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/imageVariant:ImageVariant';

    /**
     * Returns true if the given object is an instance of ImageVariant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageVariant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageVariant.__pulumiType;
    }

    /**
     * Account identifier tag.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     */
    declare public readonly neverRequireSignedUrls: pulumi.Output<boolean>;
    /**
     * Allows you to define image resizing sizes for different use cases.
     */
    declare public readonly options: pulumi.Output<outputs.ImageVariantOptions>;
    declare public /*out*/ readonly variant: pulumi.Output<outputs.ImageVariantVariant>;

    /**
     * Create a ImageVariant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageVariantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageVariantArgs | ImageVariantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageVariantState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["neverRequireSignedUrls"] = state?.neverRequireSignedUrls;
            resourceInputs["options"] = state?.options;
            resourceInputs["variant"] = state?.variant;
        } else {
            const args = argsOrState as ImageVariantArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.options === undefined && !opts.urn) {
                throw new Error("Missing required property 'options'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["neverRequireSignedUrls"] = args?.neverRequireSignedUrls;
            resourceInputs["options"] = args?.options;
            resourceInputs["variant"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageVariant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageVariant resources.
 */
export interface ImageVariantState {
    /**
     * Account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     */
    neverRequireSignedUrls?: pulumi.Input<boolean>;
    /**
     * Allows you to define image resizing sizes for different use cases.
     */
    options?: pulumi.Input<inputs.ImageVariantOptions>;
    variant?: pulumi.Input<inputs.ImageVariantVariant>;
}

/**
 * The set of arguments for constructing a ImageVariant resource.
 */
export interface ImageVariantArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     */
    neverRequireSignedUrls?: pulumi.Input<boolean>;
    /**
     * Allows you to define image resizing sizes for different use cases.
     */
    options: pulumi.Input<inputs.ImageVariantOptions>;
}
