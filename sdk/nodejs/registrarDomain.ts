// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRegistrarDomain = new cloudflare.RegistrarDomain("example_registrar_domain", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     domainName: "cloudflare.com",
 *     autoRenew: true,
 *     locked: false,
 *     privacy: true,
 * });
 * ```
 */
export class RegistrarDomain extends pulumi.CustomResource {
    /**
     * Get an existing RegistrarDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistrarDomainState, opts?: pulumi.CustomResourceOptions): RegistrarDomain {
        return new RegistrarDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/registrarDomain:RegistrarDomain';

    /**
     * Returns true if the given object is an instance of RegistrarDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistrarDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistrarDomain.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Auto-renew controls whether subscription is automatically renewed upon domain expiration.
     */
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    /**
     * Domain name.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Shows whether a registrar lock is in place for a domain.
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Privacy option controls redacting WHOIS information.
     */
    public readonly privacy!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RegistrarDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistrarDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistrarDomainArgs | RegistrarDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistrarDomainState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["privacy"] = state ? state.privacy : undefined;
        } else {
            const args = argsOrState as RegistrarDomainArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["privacy"] = args ? args.privacy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistrarDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistrarDomain resources.
 */
export interface RegistrarDomainState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Auto-renew controls whether subscription is automatically renewed upon domain expiration.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * Domain name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Shows whether a registrar lock is in place for a domain.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Privacy option controls redacting WHOIS information.
     */
    privacy?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RegistrarDomain resource.
 */
export interface RegistrarDomainArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Auto-renew controls whether subscription is automatically renewed upon domain expiration.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * Domain name.
     */
    domainName: pulumi.Input<string>;
    /**
     * Shows whether a registrar lock is in place for a domain.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Privacy option controls redacting WHOIS information.
     */
    privacy?: pulumi.Input<boolean>;
}
