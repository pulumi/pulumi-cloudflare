// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare custom hostname (also known as SSL for SaaS) resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleHostname = new cloudflare.CustomHostname("example_hostname", {
 *     hostname: "hostname.example.com",
 *     ssls: [{
 *         method: "txt",
 *     }],
 *     zoneId: "d41d8cd98f00b204e9800998ecf8427e",
 * });
 * ```
 *
 * ## Import
 *
 * Custom hostname certificates can be imported using a composite ID formed of the zone ID and [hostname ID](https://api.cloudflare.com/#custom-hostname-for-a-zone-properties), separated by a "/" e.g.
 *
 * ```sh
 *  $ pulumi import cloudflare:index/customHostname:CustomHostname example d41d8cd98f00b204e9800998ecf8427e/0d89c70d-ad9f-4843-b99f-6cc0252067e9
 * ```
 */
export class CustomHostname extends pulumi.CustomResource {
    /**
     * Get an existing CustomHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomHostnameState, opts?: pulumi.CustomResourceOptions): CustomHostname {
        return new CustomHostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/customHostname:CustomHostname';

    /**
     * Returns true if the given object is an instance of CustomHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomHostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomHostname.__pulumiType;
    }

    /**
     * The custom origin server used for certificates.
     */
    public readonly customOriginServer!: pulumi.Output<string | undefined>;
    /**
     * Hostname you intend to request a certificate for.
     */
    public readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly ownershipVerification!: pulumi.Output<outputs.CustomHostnameOwnershipVerification>;
    public /*out*/ readonly ownershipVerificationHttp!: pulumi.Output<outputs.CustomHostnameOwnershipVerificationHttp>;
    /**
     * SSL configuration of the certificate. See further notes below.
     */
    public readonly ssls!: pulumi.Output<outputs.CustomHostnameSsl[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The DNS zone ID where the custom hostname should be assigned.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CustomHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomHostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomHostnameArgs | CustomHostnameState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CustomHostnameState | undefined;
            inputs["customOriginServer"] = state ? state.customOriginServer : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["ownershipVerification"] = state ? state.ownershipVerification : undefined;
            inputs["ownershipVerificationHttp"] = state ? state.ownershipVerificationHttp : undefined;
            inputs["ssls"] = state ? state.ssls : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CustomHostnameArgs | undefined;
            if (!args || args.hostname === undefined) {
                throw new Error("Missing required property 'hostname'");
            }
            if (!args || args.ssls === undefined) {
                throw new Error("Missing required property 'ssls'");
            }
            if (!args || args.zoneId === undefined) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["customOriginServer"] = args ? args.customOriginServer : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["ssls"] = args ? args.ssls : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
            inputs["ownershipVerification"] = undefined /*out*/;
            inputs["ownershipVerificationHttp"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CustomHostname.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomHostname resources.
 */
export interface CustomHostnameState {
    /**
     * The custom origin server used for certificates.
     */
    readonly customOriginServer?: pulumi.Input<string>;
    /**
     * Hostname you intend to request a certificate for.
     */
    readonly hostname?: pulumi.Input<string>;
    readonly ownershipVerification?: pulumi.Input<inputs.CustomHostnameOwnershipVerification>;
    readonly ownershipVerificationHttp?: pulumi.Input<inputs.CustomHostnameOwnershipVerificationHttp>;
    /**
     * SSL configuration of the certificate. See further notes below.
     */
    readonly ssls?: pulumi.Input<pulumi.Input<inputs.CustomHostnameSsl>[]>;
    readonly status?: pulumi.Input<string>;
    /**
     * The DNS zone ID where the custom hostname should be assigned.
     */
    readonly zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomHostname resource.
 */
export interface CustomHostnameArgs {
    /**
     * The custom origin server used for certificates.
     */
    readonly customOriginServer?: pulumi.Input<string>;
    /**
     * Hostname you intend to request a certificate for.
     */
    readonly hostname: pulumi.Input<string>;
    /**
     * SSL configuration of the certificate. See further notes below.
     */
    readonly ssls: pulumi.Input<pulumi.Input<inputs.CustomHostnameSsl>[]>;
    /**
     * The DNS zone ID where the custom hostname should be assigned.
     */
    readonly zoneId: pulumi.Input<string>;
}
