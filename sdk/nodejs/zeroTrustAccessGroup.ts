// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessGroup = new cloudflare.ZeroTrustAccessGroup("example_zero_trust_access_group", {
 *     includes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     name: "Allow devs",
 *     zoneId: "zone_id",
 *     excludes: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 *     isDefault: true,
 *     requires: [{
 *         group: {
 *             id: "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup example '<{accounts|zones}/{account_id|zone_id}>/<group_id>'
 * ```
 */
export class ZeroTrustAccessGroup extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessGroupState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessGroup {
        return new ZeroTrustAccessGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup';

    /**
     * Returns true if the given object is an instance of ZeroTrustAccessGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustAccessGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessGroup.__pulumiType;
    }

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    public readonly excludes!: pulumi.Output<outputs.ZeroTrustAccessGroupExclude[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    public readonly includes!: pulumi.Output<outputs.ZeroTrustAccessGroupInclude[]>;
    /**
     * Whether this is the default group
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Access group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    public readonly requires!: pulumi.Output<outputs.ZeroTrustAccessGroupRequire[]>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a ZeroTrustAccessGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustAccessGroupArgs | ZeroTrustAccessGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustAccessGroupState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["excludes"] = state ? state.excludes : undefined;
            resourceInputs["includes"] = state ? state.includes : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requires"] = state ? state.requires : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ZeroTrustAccessGroupArgs | undefined;
            if ((!args || args.includes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includes'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["excludes"] = args ? args.excludes : undefined;
            resourceInputs["includes"] = args ? args.includes : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requires"] = args ? args.requires : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessGroup:AccessGroup" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustAccessGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustAccessGroup resources.
 */
export interface ZeroTrustAccessGroupState {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupInclude>[]>;
    /**
     * Whether this is the default group
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Access group.
     */
    name?: pulumi.Input<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupRequire>[]>;
    updatedAt?: pulumi.Input<string>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustAccessGroup resource.
 */
export interface ZeroTrustAccessGroupArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupInclude>[]>;
    /**
     * Whether this is the default group
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The name of the Access group.
     */
    name: pulumi.Input<string>;
    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessGroupRequire>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
