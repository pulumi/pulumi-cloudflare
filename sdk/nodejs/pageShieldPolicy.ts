// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/pageShieldPolicy:PageShieldPolicy example '<zone_id>/<policy_id>'
 * ```
 */
export class PageShieldPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PageShieldPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PageShieldPolicyState, opts?: pulumi.CustomResourceOptions): PageShieldPolicy {
        return new PageShieldPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/pageShieldPolicy:PageShieldPolicy';

    /**
     * Returns true if the given object is an instance of PageShieldPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PageShieldPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PageShieldPolicy.__pulumiType;
    }

    /**
     * The action to take if the expression matches
     * Available values: "allow", "log".
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * A description for the policy
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether the policy is enabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
     */
    public readonly expression!: pulumi.Output<string>;
    /**
     * The policy which will be applied
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a PageShieldPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PageShieldPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PageShieldPolicyArgs | PageShieldPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PageShieldPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as PageShieldPolicyArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PageShieldPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PageShieldPolicy resources.
 */
export interface PageShieldPolicyState {
    /**
     * The action to take if the expression matches
     * Available values: "allow", "log".
     */
    action?: pulumi.Input<string>;
    /**
     * A description for the policy
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the policy is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
     */
    expression?: pulumi.Input<string>;
    /**
     * The policy which will be applied
     */
    value?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PageShieldPolicy resource.
 */
export interface PageShieldPolicyArgs {
    /**
     * The action to take if the expression matches
     * Available values: "allow", "log".
     */
    action: pulumi.Input<string>;
    /**
     * A description for the policy
     */
    description: pulumi.Input<string>;
    /**
     * Whether the policy is enabled
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
     */
    expression: pulumi.Input<string>;
    /**
     * The policy which will be applied
     */
    value: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
