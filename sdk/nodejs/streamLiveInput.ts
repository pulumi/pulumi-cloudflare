// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class StreamLiveInput extends pulumi.CustomResource {
    /**
     * Get an existing StreamLiveInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamLiveInputState, opts?: pulumi.CustomResourceOptions): StreamLiveInput {
        return new StreamLiveInput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/streamLiveInput:StreamLiveInput';

    /**
     * Returns true if the given object is an instance of StreamLiveInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamLiveInput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamLiveInput.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The date and time the live input was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    public readonly defaultCreator!: pulumi.Output<string | undefined>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    public readonly deleteRecordingAfterDays!: pulumi.Output<number | undefined>;
    /**
     * A unique identifier for a live input.
     */
    public readonly liveInputIdentifier!: pulumi.Output<string | undefined>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    public readonly meta!: pulumi.Output<string | undefined>;
    /**
     * The date and time the live input was last modified.
     */
    public /*out*/ readonly modified!: pulumi.Output<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    public readonly recording!: pulumi.Output<outputs.StreamLiveInputRecording>;
    /**
     * Details for streaming to an live input using RTMPS.
     */
    public /*out*/ readonly rtmps!: pulumi.Output<outputs.StreamLiveInputRtmps>;
    /**
     * Details for playback from an live input using RTMPS.
     */
    public /*out*/ readonly rtmpsPlayback!: pulumi.Output<outputs.StreamLiveInputRtmpsPlayback>;
    /**
     * Details for streaming to a live input using SRT.
     */
    public /*out*/ readonly srt!: pulumi.Output<outputs.StreamLiveInputSrt>;
    /**
     * Details for playback from an live input using SRT.
     */
    public /*out*/ readonly srtPlayback!: pulumi.Output<outputs.StreamLiveInputSrtPlayback>;
    /**
     * The connection status of a live input.
     * Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A unique identifier for a live input.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * Details for streaming to a live input using WebRTC.
     */
    public /*out*/ readonly webRtc!: pulumi.Output<outputs.StreamLiveInputWebRtc>;
    /**
     * Details for playback from a live input using WebRTC.
     */
    public /*out*/ readonly webRtcPlayback!: pulumi.Output<outputs.StreamLiveInputWebRtcPlayback>;

    /**
     * Create a StreamLiveInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamLiveInputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamLiveInputArgs | StreamLiveInputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamLiveInputState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["defaultCreator"] = state ? state.defaultCreator : undefined;
            resourceInputs["deleteRecordingAfterDays"] = state ? state.deleteRecordingAfterDays : undefined;
            resourceInputs["liveInputIdentifier"] = state ? state.liveInputIdentifier : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["recording"] = state ? state.recording : undefined;
            resourceInputs["rtmps"] = state ? state.rtmps : undefined;
            resourceInputs["rtmpsPlayback"] = state ? state.rtmpsPlayback : undefined;
            resourceInputs["srt"] = state ? state.srt : undefined;
            resourceInputs["srtPlayback"] = state ? state.srtPlayback : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["webRtc"] = state ? state.webRtc : undefined;
            resourceInputs["webRtcPlayback"] = state ? state.webRtcPlayback : undefined;
        } else {
            const args = argsOrState as StreamLiveInputArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["defaultCreator"] = args ? args.defaultCreator : undefined;
            resourceInputs["deleteRecordingAfterDays"] = args ? args.deleteRecordingAfterDays : undefined;
            resourceInputs["liveInputIdentifier"] = args ? args.liveInputIdentifier : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["recording"] = args ? args.recording : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["rtmps"] = undefined /*out*/;
            resourceInputs["rtmpsPlayback"] = undefined /*out*/;
            resourceInputs["srt"] = undefined /*out*/;
            resourceInputs["srtPlayback"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["webRtc"] = undefined /*out*/;
            resourceInputs["webRtcPlayback"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamLiveInput.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamLiveInput resources.
 */
export interface StreamLiveInputState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * The date and time the live input was created.
     */
    created?: pulumi.Input<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    defaultCreator?: pulumi.Input<string>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    deleteRecordingAfterDays?: pulumi.Input<number>;
    /**
     * A unique identifier for a live input.
     */
    liveInputIdentifier?: pulumi.Input<string>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    meta?: pulumi.Input<string>;
    /**
     * The date and time the live input was last modified.
     */
    modified?: pulumi.Input<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    recording?: pulumi.Input<inputs.StreamLiveInputRecording>;
    /**
     * Details for streaming to an live input using RTMPS.
     */
    rtmps?: pulumi.Input<inputs.StreamLiveInputRtmps>;
    /**
     * Details for playback from an live input using RTMPS.
     */
    rtmpsPlayback?: pulumi.Input<inputs.StreamLiveInputRtmpsPlayback>;
    /**
     * Details for streaming to a live input using SRT.
     */
    srt?: pulumi.Input<inputs.StreamLiveInputSrt>;
    /**
     * Details for playback from an live input using SRT.
     */
    srtPlayback?: pulumi.Input<inputs.StreamLiveInputSrtPlayback>;
    /**
     * The connection status of a live input.
     * Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
     */
    status?: pulumi.Input<string>;
    /**
     * A unique identifier for a live input.
     */
    uid?: pulumi.Input<string>;
    /**
     * Details for streaming to a live input using WebRTC.
     */
    webRtc?: pulumi.Input<inputs.StreamLiveInputWebRtc>;
    /**
     * Details for playback from a live input using WebRTC.
     */
    webRtcPlayback?: pulumi.Input<inputs.StreamLiveInputWebRtcPlayback>;
}

/**
 * The set of arguments for constructing a StreamLiveInput resource.
 */
export interface StreamLiveInputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Sets the creator ID asssociated with this live input.
     */
    defaultCreator?: pulumi.Input<string>;
    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     */
    deleteRecordingAfterDays?: pulumi.Input<number>;
    /**
     * A unique identifier for a live input.
     */
    liveInputIdentifier?: pulumi.Input<string>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     */
    meta?: pulumi.Input<string>;
    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     */
    recording?: pulumi.Input<inputs.StreamLiveInputRecording>;
}
