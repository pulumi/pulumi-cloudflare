// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getZoneDnssec(args: GetZoneDnssecArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneDnssecResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("cloudflare:index/getZoneDnssec:getZoneDnssec", {
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneDnssec.
 */
export interface GetZoneDnssecArgs {
    /**
     * The zone identifier to target for the resource.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getZoneDnssec.
 */
export interface GetZoneDnssecResult {
    readonly algorithm: string;
    readonly digest: string;
    readonly digestAlgorithm: string;
    readonly digestType: string;
    readonly ds: string;
    readonly flags: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyTag: number;
    readonly keyType: string;
    readonly publicKey: string;
    readonly status: string;
    /**
     * The zone identifier to target for the resource.
     */
    readonly zoneId: string;
}

export function getZoneDnssecOutput(args: GetZoneDnssecOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZoneDnssecResult> {
    return pulumi.output(args).apply(a => getZoneDnssec(a, opts))
}

/**
 * A collection of arguments for invoking getZoneDnssec.
 */
export interface GetZoneDnssecOutputArgs {
    /**
     * The zone identifier to target for the resource.
     */
    zoneId: pulumi.Input<string>;
}
