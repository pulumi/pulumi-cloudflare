// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWebAnalyticsSite = new cloudflare.WebAnalyticsSite("example_web_analytics_site", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     autoInstall: true,
 *     host: "example.com",
 *     zoneTag: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/webAnalyticsSite:WebAnalyticsSite example '<account_id>/<site_id>'
 * ```
 */
export class WebAnalyticsSite extends pulumi.CustomResource {
    /**
     * Get an existing WebAnalyticsSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebAnalyticsSiteState, opts?: pulumi.CustomResourceOptions): WebAnalyticsSite {
        return new WebAnalyticsSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/webAnalyticsSite:WebAnalyticsSite';

    /**
     * Returns true if the given object is an instance of WebAnalyticsSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebAnalyticsSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebAnalyticsSite.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
     */
    declare public readonly autoInstall: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Enables or disables RUM. This option can be used only when autoInstall is set to true.
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The hostname to use for gray-clouded sites.
     */
    declare public readonly host: pulumi.Output<string | undefined>;
    /**
     * If enabled, the JavaScript snippet will not be injected for visitors from the EU.
     */
    declare public readonly lite: pulumi.Output<boolean | undefined>;
    /**
     * A list of rules.
     */
    declare public /*out*/ readonly rules: pulumi.Output<outputs.WebAnalyticsSiteRule[]>;
    declare public /*out*/ readonly ruleset: pulumi.Output<outputs.WebAnalyticsSiteRuleset>;
    /**
     * The Web Analytics site identifier.
     */
    declare public /*out*/ readonly siteTag: pulumi.Output<string>;
    /**
     * The Web Analytics site token.
     */
    declare public /*out*/ readonly siteToken: pulumi.Output<string>;
    /**
     * Encoded JavaScript snippet.
     */
    declare public /*out*/ readonly snippet: pulumi.Output<string>;
    /**
     * The zone identifier.
     */
    declare public readonly zoneTag: pulumi.Output<string | undefined>;

    /**
     * Create a WebAnalyticsSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebAnalyticsSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebAnalyticsSiteArgs | WebAnalyticsSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebAnalyticsSiteState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["autoInstall"] = state?.autoInstall;
            resourceInputs["created"] = state?.created;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["host"] = state?.host;
            resourceInputs["lite"] = state?.lite;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["ruleset"] = state?.ruleset;
            resourceInputs["siteTag"] = state?.siteTag;
            resourceInputs["siteToken"] = state?.siteToken;
            resourceInputs["snippet"] = state?.snippet;
            resourceInputs["zoneTag"] = state?.zoneTag;
        } else {
            const args = argsOrState as WebAnalyticsSiteArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["autoInstall"] = args?.autoInstall;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["host"] = args?.host;
            resourceInputs["lite"] = args?.lite;
            resourceInputs["zoneTag"] = args?.zoneTag;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["ruleset"] = undefined /*out*/;
            resourceInputs["siteTag"] = undefined /*out*/;
            resourceInputs["siteToken"] = undefined /*out*/;
            resourceInputs["snippet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebAnalyticsSite.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WebAnalyticsSite resources.
 */
export interface WebAnalyticsSiteState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
     */
    autoInstall?: pulumi.Input<boolean>;
    created?: pulumi.Input<string>;
    /**
     * Enables or disables RUM. This option can be used only when autoInstall is set to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The hostname to use for gray-clouded sites.
     */
    host?: pulumi.Input<string>;
    /**
     * If enabled, the JavaScript snippet will not be injected for visitors from the EU.
     */
    lite?: pulumi.Input<boolean>;
    /**
     * A list of rules.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.WebAnalyticsSiteRule>[]>;
    ruleset?: pulumi.Input<inputs.WebAnalyticsSiteRuleset>;
    /**
     * The Web Analytics site identifier.
     */
    siteTag?: pulumi.Input<string>;
    /**
     * The Web Analytics site token.
     */
    siteToken?: pulumi.Input<string>;
    /**
     * Encoded JavaScript snippet.
     */
    snippet?: pulumi.Input<string>;
    /**
     * The zone identifier.
     */
    zoneTag?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebAnalyticsSite resource.
 */
export interface WebAnalyticsSiteArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
     */
    autoInstall?: pulumi.Input<boolean>;
    /**
     * Enables or disables RUM. This option can be used only when autoInstall is set to true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The hostname to use for gray-clouded sites.
     */
    host?: pulumi.Input<string>;
    /**
     * If enabled, the JavaScript snippet will not be injected for visitors from the EU.
     */
    lite?: pulumi.Input<boolean>;
    /**
     * The zone identifier.
     */
    zoneTag?: pulumi.Input<string>;
}
