// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleR2CustomDomain = new cloudflare.R2CustomDomain("example_r2_custom_domain", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     bucketName: "example-bucket",
 *     domain: "domain",
 *     enabled: true,
 *     zoneId: "zoneId",
 *     minTls: "1.0",
 * });
 * ```
 */
export class R2CustomDomain extends pulumi.CustomResource {
    /**
     * Get an existing R2CustomDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2CustomDomainState, opts?: pulumi.CustomResourceOptions): R2CustomDomain {
        return new R2CustomDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/r2CustomDomain:R2CustomDomain';

    /**
     * Returns true if the given object is an instance of R2CustomDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is R2CustomDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === R2CustomDomain.__pulumiType;
    }

    /**
     * Account ID.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Name of the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Name of the custom domain to be added.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    public readonly jurisdiction!: pulumi.Output<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    public readonly minTls!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<outputs.R2CustomDomainStatus>;
    /**
     * Zone ID of the custom domain.
     */
    public readonly zoneId!: pulumi.Output<string>;
    /**
     * Zone that the custom domain resides in.
     */
    public /*out*/ readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a R2CustomDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2CustomDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: R2CustomDomainArgs | R2CustomDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as R2CustomDomainState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["jurisdiction"] = state ? state.jurisdiction : undefined;
            resourceInputs["minTls"] = state ? state.minTls : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as R2CustomDomainArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["jurisdiction"] = args ? args.jurisdiction : undefined;
            resourceInputs["minTls"] = args ? args.minTls : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["zoneName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(R2CustomDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering R2CustomDomain resources.
 */
export interface R2CustomDomainState {
    /**
     * Account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Name of the custom domain to be added.
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    minTls?: pulumi.Input<string>;
    status?: pulumi.Input<inputs.R2CustomDomainStatus>;
    /**
     * Zone ID of the custom domain.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * Zone that the custom domain resides in.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a R2CustomDomain resource.
 */
export interface R2CustomDomainArgs {
    /**
     * Account ID.
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Name of the custom domain to be added.
     */
    domain: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    /**
     * Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: "1.0", "1.1", "1.2", "1.3".
     */
    minTls?: pulumi.Input<string>;
    /**
     * Zone ID of the custom domain.
     */
    zoneId: pulumi.Input<string>;
}
