// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflaredConfig = new cloudflare.ZeroTrustTunnelCloudflaredConfig("example_zero_trust_tunnel_cloudflared_config", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     tunnelId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     config: {
 *         ingress: [{
 *             hostname: "tunnel.example.com",
 *             service: "https://localhost:8001",
 *             originRequest: {
 *                 access: {
 *                     audTag: ["string"],
 *                     teamName: "zero-trust-organization-name",
 *                     required: false,
 *                 },
 *                 caPool: "caPool",
 *                 connectTimeout: 10,
 *                 disableChunkedEncoding: true,
 *                 http2Origin: true,
 *                 httpHostHeader: "httpHostHeader",
 *                 keepAliveConnections: 100,
 *                 keepAliveTimeout: 90,
 *                 noHappyEyeballs: false,
 *                 noTlsVerify: false,
 *                 originServerName: "originServerName",
 *                 proxyType: "proxyType",
 *                 tcpKeepAlive: 30,
 *                 tlsTimeout: 10,
 *             },
 *             path: "subpath",
 *         }],
 *         origin_request: {
 *             access: {
 *                 audTag: ["string"],
 *                 teamName: "zero-trust-organization-name",
 *                 required: false,
 *             },
 *             caPool: "caPool",
 *             connectTimeout: 10,
 *             disableChunkedEncoding: true,
 *             http2Origin: true,
 *             httpHostHeader: "httpHostHeader",
 *             keepAliveConnections: 100,
 *             keepAliveTimeout: 90,
 *             noHappyEyeballs: false,
 *             noTlsVerify: false,
 *             originServerName: "originServerName",
 *             proxyType: "proxyType",
 *             tcpKeepAlive: 30,
 *             tlsTimeout: 10,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/tunnelConfig:TunnelConfig example '<account_id>/<tunnel_id>'
 * ```
 *
 * @deprecated cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig
 */
export class TunnelConfig extends pulumi.CustomResource {
    /**
     * Get an existing TunnelConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelConfigState, opts?: pulumi.CustomResourceOptions): TunnelConfig {
        pulumi.log.warn("TunnelConfig is deprecated: cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig")
        return new TunnelConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/tunnelConfig:TunnelConfig';

    /**
     * Returns true if the given object is an instance of TunnelConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TunnelConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TunnelConfig.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    declare public readonly config: pulumi.Output<outputs.TunnelConfigConfig>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    declare public readonly source: pulumi.Output<string>;
    /**
     * UUID of the tunnel.
     */
    declare public readonly tunnelId: pulumi.Output<string>;
    /**
     * The version of the Tunnel Configuration.
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a TunnelConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig */
    constructor(name: string, args: TunnelConfigArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig */
    constructor(name: string, argsOrState?: TunnelConfigArgs | TunnelConfigState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("TunnelConfig is deprecated: cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelConfigState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["config"] = state?.config;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["source"] = state?.source;
            resourceInputs["tunnelId"] = state?.tunnelId;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TunnelConfigArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.tunnelId === undefined && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["config"] = args?.config;
            resourceInputs["source"] = args?.source;
            resourceInputs["tunnelId"] = args?.tunnelId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/tunnelConfig:TunnelConfig" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(TunnelConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TunnelConfig resources.
 */
export interface TunnelConfigState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    config?: pulumi.Input<inputs.TunnelConfigConfig>;
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    source?: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * The version of the Tunnel Configuration.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TunnelConfig resource.
 */
export interface TunnelConfigArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    config?: pulumi.Input<inputs.TunnelConfigConfig>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    source?: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId: pulumi.Input<string>;
}
