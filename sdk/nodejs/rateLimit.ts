// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > `cloudflare.RateLimit` is in a deprecation phase until June 15th, 2025.
 *   During this time period, this resource is still
 *   fully supported but you are strongly advised to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRateLimit = new cloudflare.RateLimit("example_rate_limit", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     action: {
 *         mode: "challenge",
 *         response: {
 *             body: "<error>This request has been rate-limited.</error>",
 *             contentType: "text/xml",
 *         },
 *         timeout: 86400,
 *     },
 *     match: {
 *         headers: [{
 *             name: "Cf-Cache-Status",
 *             op: "ne",
 *             value: "HIT",
 *         }],
 *         request: {
 *             methods: [
 *                 "GET",
 *                 "POST",
 *             ],
 *             schemes: [
 *                 "HTTP",
 *                 "HTTPS",
 *             ],
 *             url: "*.example.org/path*",
 *         },
 *         response: {
 *             originTraffic: true,
 *         },
 *     },
 *     period: 900,
 *     threshold: 60,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/rateLimit:RateLimit example '<zone_id>/<rate_limit_id>'
 * ```
 */
export class RateLimit extends pulumi.CustomResource {
    /**
     * Get an existing RateLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RateLimitState, opts?: pulumi.CustomResourceOptions): RateLimit {
        return new RateLimit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/rateLimit:RateLimit';

    /**
     * Returns true if the given object is an instance of RateLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RateLimit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RateLimit.__pulumiType;
    }

    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    public readonly action!: pulumi.Output<outputs.RateLimitAction>;
    /**
     * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     */
    public /*out*/ readonly bypasses!: pulumi.Output<outputs.RateLimitBypass[]>;
    /**
     * An informative summary of the rate limit. This value is sanitized and any tags will be removed.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * When true, indicates that the rate limit is currently disabled.
     */
    public /*out*/ readonly disabled!: pulumi.Output<boolean>;
    /**
     * Determines which traffic the rate limit counts towards the threshold.
     */
    public readonly match!: pulumi.Output<outputs.RateLimitMatch>;
    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     */
    public readonly period!: pulumi.Output<number>;
    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * Defines an identifier.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a RateLimit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RateLimitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RateLimitArgs | RateLimitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RateLimitState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["bypasses"] = state ? state.bypasses : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RateLimitArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["bypasses"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RateLimit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RateLimit resources.
 */
export interface RateLimitState {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    action?: pulumi.Input<inputs.RateLimitAction>;
    /**
     * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     */
    bypasses?: pulumi.Input<pulumi.Input<inputs.RateLimitBypass>[]>;
    /**
     * An informative summary of the rate limit. This value is sanitized and any tags will be removed.
     */
    description?: pulumi.Input<string>;
    /**
     * When true, indicates that the rate limit is currently disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Determines which traffic the rate limit counts towards the threshold.
     */
    match?: pulumi.Input<inputs.RateLimitMatch>;
    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     */
    period?: pulumi.Input<number>;
    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     */
    threshold?: pulumi.Input<number>;
    /**
     * Defines an identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RateLimit resource.
 */
export interface RateLimitArgs {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     */
    action: pulumi.Input<inputs.RateLimitAction>;
    /**
     * Determines which traffic the rate limit counts towards the threshold.
     */
    match: pulumi.Input<inputs.RateLimitMatch>;
    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     */
    period: pulumi.Input<number>;
    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     */
    threshold: pulumi.Input<number>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
