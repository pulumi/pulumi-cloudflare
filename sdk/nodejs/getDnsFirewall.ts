// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsFirewall = cloudflare.getDnsFirewall({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     dnsFirewallId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getDnsFirewall(args: GetDnsFirewallArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsFirewallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getDnsFirewall:getDnsFirewall", {
        "accountId": args.accountId,
        "dnsFirewallId": args.dnsFirewallId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsFirewall.
 */
export interface GetDnsFirewallArgs {
    /**
     * Identifier.
     */
    accountId: string;
    /**
     * Identifier.
     */
    dnsFirewallId?: string;
}

/**
 * A collection of values returned by getDnsFirewall.
 */
export interface GetDnsFirewallResult {
    /**
     * Identifier.
     */
    readonly accountId: string;
    /**
     * Attack mitigation settings
     */
    readonly attackMitigation: outputs.GetDnsFirewallAttackMitigation;
    /**
     * Whether to refuse to answer queries for the ANY type
     */
    readonly deprecateAnyRequests: boolean;
    /**
     * Identifier.
     */
    readonly dnsFirewallId?: string;
    readonly dnsFirewallIps: string[];
    /**
     * Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     */
    readonly ecsFallback: boolean;
    /**
     * Identifier.
     */
    readonly id: string;
    /**
     * Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     */
    readonly maximumCacheTtl: number;
    /**
     * Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     */
    readonly minimumCacheTtl: number;
    /**
     * Last modification of DNS Firewall cluster
     */
    readonly modifiedOn: string;
    /**
     * DNS Firewall cluster name
     */
    readonly name: string;
    /**
     * Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     */
    readonly negativeCacheTtl: number;
    /**
     * Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     */
    readonly ratelimit: number;
    /**
     * Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     */
    readonly retries: number;
    readonly upstreamIps: string[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsFirewall = cloudflare.getDnsFirewall({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     dnsFirewallId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getDnsFirewallOutput(args: GetDnsFirewallOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDnsFirewallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getDnsFirewall:getDnsFirewall", {
        "accountId": args.accountId,
        "dnsFirewallId": args.dnsFirewallId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsFirewall.
 */
export interface GetDnsFirewallOutputArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Identifier.
     */
    dnsFirewallId?: pulumi.Input<string>;
}
