// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneHold = new cloudflare.ZoneHold("example_zone_hold", {zoneId: "023e105f4ecef8ad9ca31a8372d0c353"});
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zoneHold:ZoneHold example '<zone_id>'
 * ```
 */
export class ZoneHold extends pulumi.CustomResource {
    /**
     * Get an existing ZoneHold resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneHoldState, opts?: pulumi.CustomResourceOptions): ZoneHold {
        return new ZoneHold(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zoneHold:ZoneHold';

    /**
     * Returns true if the given object is an instance of ZoneHold.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneHold {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneHold.__pulumiType;
    }

    public /*out*/ readonly hold!: pulumi.Output<boolean>;
    /**
     * If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
     * then automatically re-enabled by the system at the time specified
     * in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
     * no effect on an existing, enabled hold. Providing an empty string will set its value
     * to the current time.
     */
    public readonly holdAfter!: pulumi.Output<string>;
    /**
     * If `true`, the zone hold will extend to block any subdomain of the given zone, as well
     * as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
     * 'example.com' and include_subdomains=true will block 'example.com',
     * 'staging.example.com', 'api.staging.example.com', etc.
     */
    public readonly includeSubdomains!: pulumi.Output<boolean>;
    /**
     * Identifier.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a ZoneHold resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneHoldArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneHoldArgs | ZoneHoldState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneHoldState | undefined;
            resourceInputs["hold"] = state ? state.hold : undefined;
            resourceInputs["holdAfter"] = state ? state.holdAfter : undefined;
            resourceInputs["includeSubdomains"] = state ? state.includeSubdomains : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ZoneHoldArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["holdAfter"] = args ? args.holdAfter : undefined;
            resourceInputs["includeSubdomains"] = args ? args.includeSubdomains : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["hold"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneHold.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneHold resources.
 */
export interface ZoneHoldState {
    hold?: pulumi.Input<boolean>;
    /**
     * If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
     * then automatically re-enabled by the system at the time specified
     * in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
     * no effect on an existing, enabled hold. Providing an empty string will set its value
     * to the current time.
     */
    holdAfter?: pulumi.Input<string>;
    /**
     * If `true`, the zone hold will extend to block any subdomain of the given zone, as well
     * as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
     * 'example.com' and include_subdomains=true will block 'example.com',
     * 'staging.example.com', 'api.staging.example.com', etc.
     */
    includeSubdomains?: pulumi.Input<boolean>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneHold resource.
 */
export interface ZoneHoldArgs {
    /**
     * If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
     * then automatically re-enabled by the system at the time specified
     * in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
     * no effect on an existing, enabled hold. Providing an empty string will set its value
     * to the current time.
     */
    holdAfter?: pulumi.Input<string>;
    /**
     * If `true`, the zone hold will extend to block any subdomain of the given zone, as well
     * as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
     * 'example.com' and include_subdomains=true will block 'example.com',
     * 'staging.example.com', 'api.staging.example.com', etc.
     */
    includeSubdomains?: pulumi.Input<boolean>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
