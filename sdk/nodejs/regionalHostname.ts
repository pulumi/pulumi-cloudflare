// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleRegionalHostname = new cloudflare.RegionalHostname("example_regional_hostname", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     hostname: "foo.example.com",
 *     regionKey: "ca",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/regionalHostname:RegionalHostname example '<zone_id>/<hostname>'
 * ```
 */
export class RegionalHostname extends pulumi.CustomResource {
    /**
     * Get an existing RegionalHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionalHostnameState, opts?: pulumi.CustomResourceOptions): RegionalHostname {
        return new RegionalHostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/regionalHostname:RegionalHostname';

    /**
     * Returns true if the given object is an instance of RegionalHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionalHostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionalHostname.__pulumiType;
    }

    /**
     * When the regional hostname was created
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Identifying key for the region
     */
    public readonly regionKey!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a RegionalHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionalHostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionalHostnameArgs | RegionalHostnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionalHostnameState | undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["regionKey"] = state ? state.regionKey : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as RegionalHostnameArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.regionKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionKey'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["regionKey"] = args ? args.regionKey : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionalHostname.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionalHostname resources.
 */
export interface RegionalHostnameState {
    /**
     * When the regional hostname was created
     */
    createdOn?: pulumi.Input<string>;
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    hostname?: pulumi.Input<string>;
    /**
     * Identifying key for the region
     */
    regionKey?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegionalHostname resource.
 */
export interface RegionalHostnameArgs {
    /**
     * DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     */
    hostname: pulumi.Input<string>;
    /**
     * Identifying key for the region
     */
    regionKey: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
