// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWeb3Hostname = new cloudflare.Web3Hostname("example_web3_hostname", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: "gateway.example.com",
 *     target: "ipfs",
 *     description: "This is my IPFS gateway.",
 *     dnslink: "/ipns/onboarding.ipfs.cloudflare.com",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/web3Hostname:Web3Hostname example '<zone_id>/<identifier>'
 * ```
 */
export class Web3Hostname extends pulumi.CustomResource {
    /**
     * Get an existing Web3Hostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Web3HostnameState, opts?: pulumi.CustomResourceOptions): Web3Hostname {
        return new Web3Hostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/web3Hostname:Web3Hostname';

    /**
     * Returns true if the given object is an instance of Web3Hostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Web3Hostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Web3Hostname.__pulumiType;
    }

    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Specify an optional description of the hostname.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specify the DNSLink value used if the target is ipfs.
     */
    declare public readonly dnslink: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * Specify the hostname that points to the target gateway via CNAME.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the status of the hostname's activation.
     * Available values: "active", "pending", "deleting", "error".
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specify the target gateway of the hostname.
     * Available values: "ethereum", "ipfs", "ipfs*universal*path".
     */
    declare public readonly target: pulumi.Output<string>;
    /**
     * Specify the identifier of the hostname.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Web3Hostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Web3HostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Web3HostnameArgs | Web3HostnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Web3HostnameState | undefined;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnslink"] = state?.dnslink;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["status"] = state?.status;
            resourceInputs["target"] = state?.target;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as Web3HostnameArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.target === undefined && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["dnslink"] = args?.dnslink;
            resourceInputs["name"] = args?.name;
            resourceInputs["target"] = args?.target;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Web3Hostname.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Web3Hostname resources.
 */
export interface Web3HostnameState {
    createdOn?: pulumi.Input<string>;
    /**
     * Specify an optional description of the hostname.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify the DNSLink value used if the target is ipfs.
     */
    dnslink?: pulumi.Input<string>;
    modifiedOn?: pulumi.Input<string>;
    /**
     * Specify the hostname that points to the target gateway via CNAME.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the status of the hostname's activation.
     * Available values: "active", "pending", "deleting", "error".
     */
    status?: pulumi.Input<string>;
    /**
     * Specify the target gateway of the hostname.
     * Available values: "ethereum", "ipfs", "ipfs*universal*path".
     */
    target?: pulumi.Input<string>;
    /**
     * Specify the identifier of the hostname.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Web3Hostname resource.
 */
export interface Web3HostnameArgs {
    /**
     * Specify an optional description of the hostname.
     */
    description?: pulumi.Input<string>;
    /**
     * Specify the DNSLink value used if the target is ipfs.
     */
    dnslink?: pulumi.Input<string>;
    /**
     * Specify the hostname that points to the target gateway via CNAME.
     */
    name: pulumi.Input<string>;
    /**
     * Specify the target gateway of the hostname.
     * Available values: "ethereum", "ipfs", "ipfs*universal*path".
     */
    target: pulumi.Input<string>;
    /**
     * Specify the identifier of the hostname.
     */
    zoneId: pulumi.Input<string>;
}
