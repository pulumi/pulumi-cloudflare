// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare Device Posture Integration resource. Device
 * posture integrations configure third-party data providers for device
 * posture rules.
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import cloudflare:index/devicePostureIntegration:DevicePostureIntegration example <account_id>/<device_posture_integration_id>
 * ```
 */
export class DevicePostureIntegration extends pulumi.CustomResource {
    /**
     * Get an existing DevicePostureIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevicePostureIntegrationState, opts?: pulumi.CustomResourceOptions): DevicePostureIntegration {
        return new DevicePostureIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/devicePostureIntegration:DevicePostureIntegration';

    /**
     * Returns true if the given object is an instance of DevicePostureIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevicePostureIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevicePostureIntegration.__pulumiType;
    }

    /**
     * The account identifier to target for the resource.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The device posture integration's connection authorization parameters.
     */
    public readonly configs!: pulumi.Output<outputs.DevicePostureIntegrationConfig[] | undefined>;
    public readonly identifier!: pulumi.Output<string | undefined>;
    /**
     * Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    /**
     * Name of the device posture integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DevicePostureIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevicePostureIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevicePostureIntegrationArgs | DevicePostureIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevicePostureIntegrationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DevicePostureIntegrationArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevicePostureIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DevicePostureIntegration resources.
 */
export interface DevicePostureIntegrationState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The device posture integration's connection authorization parameters.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.DevicePostureIntegrationConfig>[]>;
    identifier?: pulumi.Input<string>;
    /**
     * Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
     */
    interval?: pulumi.Input<string>;
    /**
     * Name of the device posture integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DevicePostureIntegration resource.
 */
export interface DevicePostureIntegrationArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    /**
     * The device posture integration's connection authorization parameters.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.DevicePostureIntegrationConfig>[]>;
    identifier?: pulumi.Input<string>;
    /**
     * Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
     */
    interval?: pulumi.Input<string>;
    /**
     * Name of the device posture integration.
     */
    name: pulumi.Input<string>;
    /**
     * The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
     */
    type: pulumi.Input<string>;
}
