// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource, that manages IPsec tunnels for Magic Transit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.IpsecTunnel("example", {
 *     accountId: "c4a7362d577a6c3019a474fd6f485821",
 *     cloudflareEndpoint: "203.0.113.1",
 *     customerEndpoint: "203.0.113.1",
 *     description: "Tunnel for ISP X",
 *     interfaceAddress: "192.0.2.0/31",
 *     name: "IPsec_1",
 * });
 * ```
 *
 * ## Import
 *
 * An existing IPsec tunnel can be imported using the account ID and tunnel ID
 *
 * ```sh
 *  $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
 * ```
 */
export class IpsecTunnel extends pulumi.CustomResource {
    /**
     * Get an existing IpsecTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsecTunnelState, opts?: pulumi.CustomResourceOptions): IpsecTunnel {
        return new IpsecTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/ipsecTunnel:IpsecTunnel';

    /**
     * Returns true if the given object is an instance of IpsecTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsecTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsecTunnel.__pulumiType;
    }

    /**
     * The ID of the account where the tunnel is being created.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    public readonly cloudflareEndpoint!: pulumi.Output<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    public readonly customerEndpoint!: pulumi.Output<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    public readonly interfaceAddress!: pulumi.Output<string>;
    /**
     * Name of the IPsec tunnel.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a IpsecTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpsecTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsecTunnelArgs | IpsecTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsecTunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["cloudflareEndpoint"] = state ? state.cloudflareEndpoint : undefined;
            resourceInputs["customerEndpoint"] = state ? state.customerEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["interfaceAddress"] = state ? state.interfaceAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as IpsecTunnelArgs | undefined;
            if ((!args || args.cloudflareEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudflareEndpoint'");
            }
            if ((!args || args.customerEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerEndpoint'");
            }
            if ((!args || args.interfaceAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceAddress'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["cloudflareEndpoint"] = args ? args.cloudflareEndpoint : undefined;
            resourceInputs["customerEndpoint"] = args ? args.customerEndpoint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["interfaceAddress"] = args ? args.interfaceAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsecTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpsecTunnel resources.
 */
export interface IpsecTunnelState {
    /**
     * The ID of the account where the tunnel is being created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint?: pulumi.Input<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    customerEndpoint?: pulumi.Input<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress?: pulumi.Input<string>;
    /**
     * Name of the IPsec tunnel.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsecTunnel resource.
 */
export interface IpsecTunnelArgs {
    /**
     * The ID of the account where the tunnel is being created.
     */
    accountId?: pulumi.Input<string>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint: pulumi.Input<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    customerEndpoint: pulumi.Input<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * Name of the IPsec tunnel.
     */
    name: pulumi.Input<string>;
}
