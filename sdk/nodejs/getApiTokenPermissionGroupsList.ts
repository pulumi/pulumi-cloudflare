// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleApiTokenPermissionGroupsList = cloudflare.getApiTokenPermissionGroupsList({
 *     name: "Account%20Settings%20Write",
 *     scope: "com.cloudflare.api.account.zone",
 * });
 * ```
 */
export function getApiTokenPermissionGroupsList(args?: GetApiTokenPermissionGroupsListArgs, opts?: pulumi.InvokeOptions): Promise<GetApiTokenPermissionGroupsListResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getApiTokenPermissionGroupsList:getApiTokenPermissionGroupsList", {
        "maxItems": args.maxItems,
        "name": args.name,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiTokenPermissionGroupsList.
 */
export interface GetApiTokenPermissionGroupsListArgs {
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * Filter by the name of the permission group.
     * The value must be URL-encoded.
     */
    name?: string;
    /**
     * Filter by the scope of the permission group.
     * The value must be URL-encoded.
     */
    scope?: string;
}

/**
 * A collection of values returned by getApiTokenPermissionGroupsList.
 */
export interface GetApiTokenPermissionGroupsListResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * Filter by the name of the permission group.
     * The value must be URL-encoded.
     */
    readonly name?: string;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetApiTokenPermissionGroupsListResult[];
    /**
     * Filter by the scope of the permission group.
     * The value must be URL-encoded.
     */
    readonly scope?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleApiTokenPermissionGroupsList = cloudflare.getApiTokenPermissionGroupsList({
 *     name: "Account%20Settings%20Write",
 *     scope: "com.cloudflare.api.account.zone",
 * });
 * ```
 */
export function getApiTokenPermissionGroupsListOutput(args?: GetApiTokenPermissionGroupsListOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApiTokenPermissionGroupsListResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getApiTokenPermissionGroupsList:getApiTokenPermissionGroupsList", {
        "maxItems": args.maxItems,
        "name": args.name,
        "scope": args.scope,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiTokenPermissionGroupsList.
 */
export interface GetApiTokenPermissionGroupsListOutputArgs {
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * Filter by the name of the permission group.
     * The value must be URL-encoded.
     */
    name?: pulumi.Input<string>;
    /**
     * Filter by the scope of the permission group.
     * The value must be URL-encoded.
     */
    scope?: pulumi.Input<string>;
}
