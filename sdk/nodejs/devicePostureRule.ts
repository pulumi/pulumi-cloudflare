// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/devicePostureRule:DevicePostureRule example '<account_id>/<rule_id>'
 * ```
 *
 * @deprecated cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule
 */
export class DevicePostureRule extends pulumi.CustomResource {
    /**
     * Get an existing DevicePostureRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevicePostureRuleState, opts?: pulumi.CustomResourceOptions): DevicePostureRule {
        pulumi.log.warn("DevicePostureRule is deprecated: cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule")
        return new DevicePostureRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/devicePostureRule:DevicePostureRule';

    /**
     * Returns true if the given object is an instance of DevicePostureRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevicePostureRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevicePostureRule.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    /**
     * The description of the device posture rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
     */
    public readonly expiration!: pulumi.Output<string | undefined>;
    /**
     * The value to be checked against.
     */
    public readonly input!: pulumi.Output<outputs.DevicePostureRuleInput | undefined>;
    /**
     * The conditions that the client must match to run the rule.
     */
    public readonly matches!: pulumi.Output<outputs.DevicePostureRuleMatch[] | undefined>;
    /**
     * The name of the device posture rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * The type of device posture rule.
     * Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "customS2s".
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DevicePostureRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule */
    constructor(name: string, args: DevicePostureRuleArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule */
    constructor(name: string, argsOrState?: DevicePostureRuleArgs | DevicePostureRuleState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("DevicePostureRule is deprecated: cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevicePostureRuleState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["matches"] = state ? state.matches : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DevicePostureRuleArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["matches"] = args ? args.matches : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/devicePostureRule:DevicePostureRule" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DevicePostureRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DevicePostureRule resources.
 */
export interface DevicePostureRuleState {
    accountId?: pulumi.Input<string>;
    /**
     * The description of the device posture rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
     */
    expiration?: pulumi.Input<string>;
    /**
     * The value to be checked against.
     */
    input?: pulumi.Input<inputs.DevicePostureRuleInput>;
    /**
     * The conditions that the client must match to run the rule.
     */
    matches?: pulumi.Input<pulumi.Input<inputs.DevicePostureRuleMatch>[]>;
    /**
     * The name of the device posture rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The type of device posture rule.
     * Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "customS2s".
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DevicePostureRule resource.
 */
export interface DevicePostureRuleArgs {
    accountId: pulumi.Input<string>;
    /**
     * The description of the device posture rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
     */
    expiration?: pulumi.Input<string>;
    /**
     * The value to be checked against.
     */
    input?: pulumi.Input<inputs.DevicePostureRuleInput>;
    /**
     * The conditions that the client must match to run the rule.
     */
    matches?: pulumi.Input<pulumi.Input<inputs.DevicePostureRuleMatch>[]>;
    /**
     * The name of the device posture rule.
     */
    name: pulumi.Input<string>;
    /**
     * Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The type of device posture rule.
     * Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "customS2s".
     */
    type: pulumi.Input<string>;
}
