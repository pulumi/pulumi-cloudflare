// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneDnsSettings = cloudflare.getZoneDnsSettings({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getZoneDnsSettings(args: GetZoneDnsSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneDnsSettingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZoneDnsSettings:getZoneDnsSettings", {
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneDnsSettings.
 */
export interface GetZoneDnsSettingsArgs {
    /**
     * Identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getZoneDnsSettings.
 */
export interface GetZoneDnsSettingsResult {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    readonly flattenAllCnames: boolean;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    readonly foundationDns: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Settings for this internal zone.
     */
    readonly internalDns: outputs.GetZoneDnsSettingsInternalDns;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    readonly multiProvider: boolean;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    readonly nameservers: outputs.GetZoneDnsSettingsNameservers;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    readonly nsTtl: number;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    readonly secondaryOverrides: boolean;
    /**
     * Components of the zone's SOA record.
     */
    readonly soa: outputs.GetZoneDnsSettingsSoa;
    /**
     * Identifier.
     */
    readonly zoneId: string;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    readonly zoneMode: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneDnsSettings = cloudflare.getZoneDnsSettings({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getZoneDnsSettingsOutput(args: GetZoneDnsSettingsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZoneDnsSettingsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getZoneDnsSettings:getZoneDnsSettings", {
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneDnsSettings.
 */
export interface GetZoneDnsSettingsOutputArgs {
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
