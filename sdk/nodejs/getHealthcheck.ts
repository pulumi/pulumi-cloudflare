// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleHealthcheck = cloudflare.getHealthcheck({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     healthcheckId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getHealthcheck(args: GetHealthcheckArgs, opts?: pulumi.InvokeOptions): Promise<GetHealthcheckResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getHealthcheck:getHealthcheck", {
        "healthcheckId": args.healthcheckId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getHealthcheck.
 */
export interface GetHealthcheckArgs {
    /**
     * Identifier
     */
    healthcheckId?: string;
    /**
     * Identifier
     */
    zoneId: string;
}

/**
 * A collection of values returned by getHealthcheck.
 */
export interface GetHealthcheckResult {
    /**
     * The hostname or IP address of the origin server to run health checks on.
     */
    readonly address: string;
    /**
     * A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
     */
    readonly checkRegions: string[];
    /**
     * The number of consecutive fails required from a health check before changing the health to unhealthy.
     */
    readonly consecutiveFails: number;
    /**
     * The number of consecutive successes required from a health check before changing the health to healthy.
     */
    readonly consecutiveSuccesses: number;
    readonly createdOn: string;
    /**
     * A human-readable description of the health check.
     */
    readonly description: string;
    /**
     * The current failure reason if status is unhealthy.
     */
    readonly failureReason: string;
    /**
     * Identifier
     */
    readonly healthcheckId?: string;
    /**
     * Parameters specific to an HTTP or HTTPS health check.
     */
    readonly httpConfig: outputs.GetHealthcheckHttpConfig;
    /**
     * Identifier
     */
    readonly id: string;
    /**
     * The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
     */
    readonly interval: number;
    readonly modifiedOn: string;
    /**
     * A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
     */
    readonly name: string;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    readonly retries: number;
    /**
     * The current status of the origin server according to the health check.
     * Available values: "unknown", "healthy", "unhealthy", "suspended".
     */
    readonly status: string;
    /**
     * If suspended, no health checks are sent to the origin.
     */
    readonly suspended: boolean;
    /**
     * Parameters specific to TCP health check.
     */
    readonly tcpConfig: outputs.GetHealthcheckTcpConfig;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    readonly timeout: number;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
     */
    readonly type: string;
    /**
     * Identifier
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleHealthcheck = cloudflare.getHealthcheck({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     healthcheckId: "023e105f4ecef8ad9ca31a8372d0c353",
 * });
 * ```
 */
export function getHealthcheckOutput(args: GetHealthcheckOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetHealthcheckResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getHealthcheck:getHealthcheck", {
        "healthcheckId": args.healthcheckId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getHealthcheck.
 */
export interface GetHealthcheckOutputArgs {
    /**
     * Identifier
     */
    healthcheckId?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
