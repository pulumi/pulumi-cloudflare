// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleSchemaValidationSchemas = new cloudflare.SchemaValidationSchemas("example_schema_validation_schemas", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     kind: "openapi_v3",
 *     name: "petstore schema",
 *     source: "<schema file contents>",
 *     validationEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas example '<zone_id>/<schema_id>'
 * ```
 */
export class SchemaValidationSchemas extends pulumi.CustomResource {
    /**
     * Get an existing SchemaValidationSchemas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaValidationSchemasState, opts?: pulumi.CustomResourceOptions): SchemaValidationSchemas {
        return new SchemaValidationSchemas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas';

    /**
     * Returns true if the given object is an instance of SchemaValidationSchemas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaValidationSchemas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaValidationSchemas.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The kind of the schema
     * Available values: "openapiV3".
     */
    declare public readonly kind: pulumi.Output<string>;
    /**
     * A human-readable name for the schema
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A unique identifier of this schema
     */
    declare public /*out*/ readonly schemaId: pulumi.Output<string>;
    /**
     * The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     */
    declare public readonly source: pulumi.Output<string>;
    /**
     * An indicator if this schema is enabled
     */
    declare public readonly validationEnabled: pulumi.Output<boolean>;
    /**
     * Identifier.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a SchemaValidationSchemas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaValidationSchemasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaValidationSchemasArgs | SchemaValidationSchemasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaValidationSchemasState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["kind"] = state?.kind;
            resourceInputs["name"] = state?.name;
            resourceInputs["schemaId"] = state?.schemaId;
            resourceInputs["source"] = state?.source;
            resourceInputs["validationEnabled"] = state?.validationEnabled;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as SchemaValidationSchemasArgs | undefined;
            if (args?.kind === undefined && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if (args?.validationEnabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'validationEnabled'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["kind"] = args?.kind;
            resourceInputs["name"] = args?.name;
            resourceInputs["source"] = args?.source;
            resourceInputs["validationEnabled"] = args?.validationEnabled;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["schemaId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaValidationSchemas.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaValidationSchemas resources.
 */
export interface SchemaValidationSchemasState {
    createdAt?: pulumi.Input<string>;
    /**
     * The kind of the schema
     * Available values: "openapiV3".
     */
    kind?: pulumi.Input<string>;
    /**
     * A human-readable name for the schema
     */
    name?: pulumi.Input<string>;
    /**
     * A unique identifier of this schema
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     */
    source?: pulumi.Input<string>;
    /**
     * An indicator if this schema is enabled
     */
    validationEnabled?: pulumi.Input<boolean>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaValidationSchemas resource.
 */
export interface SchemaValidationSchemasArgs {
    /**
     * The kind of the schema
     * Available values: "openapiV3".
     */
    kind: pulumi.Input<string>;
    /**
     * A human-readable name for the schema
     */
    name: pulumi.Input<string>;
    /**
     * The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     */
    source: pulumi.Input<string>;
    /**
     * An indicator if this schema is enabled
     */
    validationEnabled: pulumi.Input<boolean>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
