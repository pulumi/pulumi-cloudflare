// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleLoadBalancerMonitor = new cloudflare.LoadBalancerMonitor("example_load_balancer_monitor", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     allowInsecure: true,
 *     consecutiveDown: 0,
 *     consecutiveUp: 0,
 *     description: "Login page monitor",
 *     expectedBody: "alive",
 *     expectedCodes: "2xx",
 *     followRedirects: true,
 *     header: {
 *         Host: ["example.com"],
 *         "X-App-ID": ["abc123"],
 *     },
 *     interval: 0,
 *     method: "GET",
 *     path: "/health",
 *     port: 0,
 *     probeZone: "example.com",
 *     retries: 0,
 *     timeout: 0,
 *     type: "https",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor example '<account_id>/<monitor_id>'
 * ```
 */
export class LoadBalancerMonitor extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerMonitorState, opts?: pulumi.CustomResourceOptions): LoadBalancerMonitor {
        return new LoadBalancerMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor';

    /**
     * Returns true if the given object is an instance of LoadBalancerMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerMonitor.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
     */
    public readonly allowInsecure!: pulumi.Output<boolean>;
    /**
     * To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
     */
    public readonly consecutiveDown!: pulumi.Output<number>;
    /**
     * To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
     */
    public readonly consecutiveUp!: pulumi.Output<number>;
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Object description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly expectedBody!: pulumi.Output<string | undefined>;
    /**
     * The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly expectedCodes!: pulumi.Output<string | undefined>;
    /**
     * Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly followRedirects!: pulumi.Output<boolean>;
    /**
     * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly header!: pulumi.Output<{[key: string]: string[]} | undefined>;
    /**
     * The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.
     */
    public readonly method!: pulumi.Output<string>;
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
     */
    public readonly probeZone!: pulumi.Output<string | undefined>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    public readonly retries!: pulumi.Output<number>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.
     * Available values: "http", "https", "tcp", "udp*icmp", "icmp*ping", "smtp".
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a LoadBalancerMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerMonitorArgs | LoadBalancerMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerMonitorState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["allowInsecure"] = state ? state.allowInsecure : undefined;
            resourceInputs["consecutiveDown"] = state ? state.consecutiveDown : undefined;
            resourceInputs["consecutiveUp"] = state ? state.consecutiveUp : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expectedBody"] = state ? state.expectedBody : undefined;
            resourceInputs["expectedCodes"] = state ? state.expectedCodes : undefined;
            resourceInputs["followRedirects"] = state ? state.followRedirects : undefined;
            resourceInputs["header"] = state ? state.header : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["probeZone"] = state ? state.probeZone : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as LoadBalancerMonitorArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["allowInsecure"] = args ? args.allowInsecure : undefined;
            resourceInputs["consecutiveDown"] = args ? args.consecutiveDown : undefined;
            resourceInputs["consecutiveUp"] = args ? args.consecutiveUp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expectedBody"] = args ? args.expectedBody : undefined;
            resourceInputs["expectedCodes"] = args ? args.expectedCodes : undefined;
            resourceInputs["followRedirects"] = args ? args.followRedirects : undefined;
            resourceInputs["header"] = args ? args.header : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["probeZone"] = args ? args.probeZone : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerMonitor resources.
 */
export interface LoadBalancerMonitorState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
     */
    allowInsecure?: pulumi.Input<boolean>;
    /**
     * To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
     */
    consecutiveDown?: pulumi.Input<number>;
    /**
     * To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
     */
    consecutiveUp?: pulumi.Input<number>;
    createdOn?: pulumi.Input<string>;
    /**
     * Object description.
     */
    description?: pulumi.Input<string>;
    /**
     * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
     */
    expectedBody?: pulumi.Input<string>;
    /**
     * The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
     */
    expectedCodes?: pulumi.Input<string>;
    /**
     * Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
     */
    followRedirects?: pulumi.Input<boolean>;
    /**
     * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
     */
    header?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
     */
    interval?: pulumi.Input<number>;
    /**
     * The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.
     */
    method?: pulumi.Input<string>;
    modifiedOn?: pulumi.Input<string>;
    /**
     * The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
     */
    path?: pulumi.Input<string>;
    /**
     * The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
     */
    port?: pulumi.Input<number>;
    /**
     * Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
     */
    probeZone?: pulumi.Input<string>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    retries?: pulumi.Input<number>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.
     * Available values: "http", "https", "tcp", "udp*icmp", "icmp*ping", "smtp".
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancerMonitor resource.
 */
export interface LoadBalancerMonitorArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
     */
    allowInsecure?: pulumi.Input<boolean>;
    /**
     * To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
     */
    consecutiveDown?: pulumi.Input<number>;
    /**
     * To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
     */
    consecutiveUp?: pulumi.Input<number>;
    /**
     * Object description.
     */
    description?: pulumi.Input<string>;
    /**
     * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
     */
    expectedBody?: pulumi.Input<string>;
    /**
     * The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
     */
    expectedCodes?: pulumi.Input<string>;
    /**
     * Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
     */
    followRedirects?: pulumi.Input<boolean>;
    /**
     * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
     */
    header?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
     */
    interval?: pulumi.Input<number>;
    /**
     * The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.
     */
    method?: pulumi.Input<string>;
    /**
     * The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
     */
    path?: pulumi.Input<string>;
    /**
     * The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
     */
    port?: pulumi.Input<number>;
    /**
     * Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
     */
    probeZone?: pulumi.Input<string>;
    /**
     * The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
     */
    retries?: pulumi.Input<number>;
    /**
     * The timeout (in seconds) before marking the health check as failed.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.
     * Available values: "http", "https", "tcp", "udp*icmp", "icmp*ping", "smtp".
     */
    type?: pulumi.Input<string>;
}
