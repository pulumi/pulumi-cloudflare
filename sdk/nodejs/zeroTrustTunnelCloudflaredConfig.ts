// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig example '<account_id>/<tunnel_id>'
 * ```
 */
export class ZeroTrustTunnelCloudflaredConfig extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustTunnelCloudflaredConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustTunnelCloudflaredConfigState, opts?: pulumi.CustomResourceOptions): ZeroTrustTunnelCloudflaredConfig {
        return new ZeroTrustTunnelCloudflaredConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig';

    /**
     * Returns true if the given object is an instance of ZeroTrustTunnelCloudflaredConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustTunnelCloudflaredConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustTunnelCloudflaredConfig.__pulumiType;
    }

    /**
     * Identifier.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    public readonly config!: pulumi.Output<outputs.ZeroTrustTunnelCloudflaredConfigConfig>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * UUID of the tunnel.
     */
    public readonly tunnelId!: pulumi.Output<string>;
    /**
     * The version of the Tunnel Configuration.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a ZeroTrustTunnelCloudflaredConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustTunnelCloudflaredConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustTunnelCloudflaredConfigArgs | ZeroTrustTunnelCloudflaredConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustTunnelCloudflaredConfigState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ZeroTrustTunnelCloudflaredConfigArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.tunnelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tunnelId"] = args ? args.tunnelId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/tunnelConfig:TunnelConfig" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustTunnelCloudflaredConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustTunnelCloudflaredConfig resources.
 */
export interface ZeroTrustTunnelCloudflaredConfigState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    config?: pulumi.Input<inputs.ZeroTrustTunnelCloudflaredConfigConfig>;
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    source?: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * The version of the Tunnel Configuration.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ZeroTrustTunnelCloudflaredConfig resource.
 */
export interface ZeroTrustTunnelCloudflaredConfigArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * The tunnel configuration and ingress rules.
     */
    config?: pulumi.Input<inputs.ZeroTrustTunnelCloudflaredConfigConfig>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    source?: pulumi.Input<string>;
    /**
     * UUID of the tunnel.
     */
    tunnelId: pulumi.Input<string>;
}
