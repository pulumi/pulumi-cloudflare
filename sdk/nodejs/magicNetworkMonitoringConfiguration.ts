// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class MagicNetworkMonitoringConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MagicNetworkMonitoringConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicNetworkMonitoringConfigurationState, opts?: pulumi.CustomResourceOptions): MagicNetworkMonitoringConfiguration {
        return new MagicNetworkMonitoringConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicNetworkMonitoringConfiguration:MagicNetworkMonitoringConfiguration';

    /**
     * Returns true if the given object is an instance of MagicNetworkMonitoringConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicNetworkMonitoringConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicNetworkMonitoringConfiguration.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    /**
     * Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     */
    public readonly defaultSampling!: pulumi.Output<number>;
    /**
     * The account name.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly routerIps!: pulumi.Output<string[] | undefined>;
    public readonly warpDevices!: pulumi.Output<outputs.MagicNetworkMonitoringConfigurationWarpDevice[] | undefined>;

    /**
     * Create a MagicNetworkMonitoringConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicNetworkMonitoringConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicNetworkMonitoringConfigurationArgs | MagicNetworkMonitoringConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicNetworkMonitoringConfigurationState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["defaultSampling"] = state ? state.defaultSampling : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routerIps"] = state ? state.routerIps : undefined;
            resourceInputs["warpDevices"] = state ? state.warpDevices : undefined;
        } else {
            const args = argsOrState as MagicNetworkMonitoringConfigurationArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["defaultSampling"] = args ? args.defaultSampling : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routerIps"] = args ? args.routerIps : undefined;
            resourceInputs["warpDevices"] = args ? args.warpDevices : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicNetworkMonitoringConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicNetworkMonitoringConfiguration resources.
 */
export interface MagicNetworkMonitoringConfigurationState {
    accountId?: pulumi.Input<string>;
    /**
     * Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     */
    defaultSampling?: pulumi.Input<number>;
    /**
     * The account name.
     */
    name?: pulumi.Input<string>;
    routerIps?: pulumi.Input<pulumi.Input<string>[]>;
    warpDevices?: pulumi.Input<pulumi.Input<inputs.MagicNetworkMonitoringConfigurationWarpDevice>[]>;
}

/**
 * The set of arguments for constructing a MagicNetworkMonitoringConfiguration resource.
 */
export interface MagicNetworkMonitoringConfigurationArgs {
    accountId: pulumi.Input<string>;
    /**
     * Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     */
    defaultSampling?: pulumi.Input<number>;
    /**
     * The account name.
     */
    name: pulumi.Input<string>;
    routerIps?: pulumi.Input<pulumi.Input<string>[]>;
    warpDevices?: pulumi.Input<pulumi.Input<inputs.MagicNetworkMonitoringConfigurationWarpDevice>[]>;
}
