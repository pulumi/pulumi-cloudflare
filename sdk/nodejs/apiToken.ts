// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a resource which manages Cloudflare API tokens.
 *
 * Read more about permission groups and their applicable scopes in the [developer documentation](https://developers.cloudflare.com/api/tokens/create/permissions).
 */
export class ApiToken extends pulumi.CustomResource {
    /**
     * Get an existing ApiToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiTokenState, opts?: pulumi.CustomResourceOptions): ApiToken {
        return new ApiToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/apiToken:ApiToken';

    /**
     * Returns true if the given object is an instance of ApiToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiToken.__pulumiType;
    }

    /**
     * Conditions under which the token should be considered valid.
     */
    public readonly condition!: pulumi.Output<outputs.ApiTokenCondition | undefined>;
    /**
     * Timestamp of when the token was issued.
     */
    public /*out*/ readonly issuedOn!: pulumi.Output<string>;
    /**
     * Timestamp of when the token was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * Name of the API Token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    public readonly policies!: pulumi.Output<outputs.ApiTokenPolicy[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The value of the API Token.
     */
    public /*out*/ readonly value!: pulumi.Output<string>;

    /**
     * Create a ApiToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiTokenArgs | ApiTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiTokenState | undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["issuedOn"] = state ? state.issuedOn : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ApiTokenArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["issuedOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["value"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiToken resources.
 */
export interface ApiTokenState {
    /**
     * Conditions under which the token should be considered valid.
     */
    condition?: pulumi.Input<inputs.ApiTokenCondition>;
    /**
     * Timestamp of when the token was issued.
     */
    issuedOn?: pulumi.Input<string>;
    /**
     * Timestamp of when the token was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Name of the API Token.
     */
    name?: pulumi.Input<string>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.ApiTokenPolicy>[]>;
    status?: pulumi.Input<string>;
    /**
     * The value of the API Token.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiToken resource.
 */
export interface ApiTokenArgs {
    /**
     * Conditions under which the token should be considered valid.
     */
    condition?: pulumi.Input<inputs.ApiTokenCondition>;
    /**
     * Name of the API Token.
     */
    name: pulumi.Input<string>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    policies: pulumi.Input<pulumi.Input<inputs.ApiTokenPolicy>[]>;
}
