// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreamWatermark = cloudflare.getStreamWatermark({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     identifier: "ea95132c15732412d22c1476fa83f27a",
 * });
 * ```
 */
export function getStreamWatermark(args: GetStreamWatermarkArgs, opts?: pulumi.InvokeOptions): Promise<GetStreamWatermarkResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getStreamWatermark:getStreamWatermark", {
        "accountId": args.accountId,
        "identifier": args.identifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamWatermark.
 */
export interface GetStreamWatermarkArgs {
    /**
     * The account identifier tag.
     */
    accountId: string;
    /**
     * The unique identifier for a watermark profile.
     */
    identifier: string;
}

/**
 * A collection of values returned by getStreamWatermark.
 */
export interface GetStreamWatermarkResult {
    /**
     * The account identifier tag.
     */
    readonly accountId: string;
    /**
     * The date and a time a watermark profile was created.
     */
    readonly created: string;
    /**
     * The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
     */
    readonly downloadedFrom: string;
    /**
     * The height of the image in pixels.
     */
    readonly height: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The unique identifier for a watermark profile.
     */
    readonly identifier: string;
    /**
     * A short description of the watermark profile.
     */
    readonly name: string;
    /**
     * The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     */
    readonly opacity: number;
    /**
     * The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     */
    readonly padding: number;
    /**
     * The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     */
    readonly position: string;
    /**
     * The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     */
    readonly scale: number;
    /**
     * The size of the image in bytes.
     */
    readonly size: number;
    /**
     * The unique identifier for a watermark profile.
     */
    readonly uid: string;
    /**
     * The width of the image in pixels.
     */
    readonly width: number;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStreamWatermark = cloudflare.getStreamWatermark({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     identifier: "ea95132c15732412d22c1476fa83f27a",
 * });
 * ```
 */
export function getStreamWatermarkOutput(args: GetStreamWatermarkOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStreamWatermarkResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getStreamWatermark:getStreamWatermark", {
        "accountId": args.accountId,
        "identifier": args.identifier,
    }, opts);
}

/**
 * A collection of arguments for invoking getStreamWatermark.
 */
export interface GetStreamWatermarkOutputArgs {
    /**
     * The account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * The unique identifier for a watermark profile.
     */
    identifier: pulumi.Input<string>;
}
