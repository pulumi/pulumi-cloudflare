// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessApplicationArgs, AccessApplicationState } from "./accessApplication";
export type AccessApplication = import("./accessApplication").AccessApplication;
export const AccessApplication: typeof import("./accessApplication").AccessApplication = null as any;
utilities.lazyLoad(exports, ["AccessApplication"], () => require("./accessApplication"));

export { AccessCaCertificateArgs, AccessCaCertificateState } from "./accessCaCertificate";
export type AccessCaCertificate = import("./accessCaCertificate").AccessCaCertificate;
export const AccessCaCertificate: typeof import("./accessCaCertificate").AccessCaCertificate = null as any;
utilities.lazyLoad(exports, ["AccessCaCertificate"], () => require("./accessCaCertificate"));

export { AccessCustomPageArgs, AccessCustomPageState } from "./accessCustomPage";
export type AccessCustomPage = import("./accessCustomPage").AccessCustomPage;
export const AccessCustomPage: typeof import("./accessCustomPage").AccessCustomPage = null as any;
utilities.lazyLoad(exports, ["AccessCustomPage"], () => require("./accessCustomPage"));

export { AccessGroupArgs, AccessGroupState } from "./accessGroup";
export type AccessGroup = import("./accessGroup").AccessGroup;
export const AccessGroup: typeof import("./accessGroup").AccessGroup = null as any;
utilities.lazyLoad(exports, ["AccessGroup"], () => require("./accessGroup"));

export { AccessIdentityProviderArgs, AccessIdentityProviderState } from "./accessIdentityProvider";
export type AccessIdentityProvider = import("./accessIdentityProvider").AccessIdentityProvider;
export const AccessIdentityProvider: typeof import("./accessIdentityProvider").AccessIdentityProvider = null as any;
utilities.lazyLoad(exports, ["AccessIdentityProvider"], () => require("./accessIdentityProvider"));

export { AccessKeysConfigurationArgs, AccessKeysConfigurationState } from "./accessKeysConfiguration";
export type AccessKeysConfiguration = import("./accessKeysConfiguration").AccessKeysConfiguration;
export const AccessKeysConfiguration: typeof import("./accessKeysConfiguration").AccessKeysConfiguration = null as any;
utilities.lazyLoad(exports, ["AccessKeysConfiguration"], () => require("./accessKeysConfiguration"));

export { AccessMutualTlsCertificateArgs, AccessMutualTlsCertificateState } from "./accessMutualTlsCertificate";
export type AccessMutualTlsCertificate = import("./accessMutualTlsCertificate").AccessMutualTlsCertificate;
export const AccessMutualTlsCertificate: typeof import("./accessMutualTlsCertificate").AccessMutualTlsCertificate = null as any;
utilities.lazyLoad(exports, ["AccessMutualTlsCertificate"], () => require("./accessMutualTlsCertificate"));

export { AccessMutualTlsHostnameSettingsArgs, AccessMutualTlsHostnameSettingsState } from "./accessMutualTlsHostnameSettings";
export type AccessMutualTlsHostnameSettings = import("./accessMutualTlsHostnameSettings").AccessMutualTlsHostnameSettings;
export const AccessMutualTlsHostnameSettings: typeof import("./accessMutualTlsHostnameSettings").AccessMutualTlsHostnameSettings = null as any;
utilities.lazyLoad(exports, ["AccessMutualTlsHostnameSettings"], () => require("./accessMutualTlsHostnameSettings"));

export { AccessOrganizationArgs, AccessOrganizationState } from "./accessOrganization";
export type AccessOrganization = import("./accessOrganization").AccessOrganization;
export const AccessOrganization: typeof import("./accessOrganization").AccessOrganization = null as any;
utilities.lazyLoad(exports, ["AccessOrganization"], () => require("./accessOrganization"));

export { AccessPolicyArgs, AccessPolicyState } from "./accessPolicy";
export type AccessPolicy = import("./accessPolicy").AccessPolicy;
export const AccessPolicy: typeof import("./accessPolicy").AccessPolicy = null as any;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));

export { AccessRuleArgs, AccessRuleState } from "./accessRule";
export type AccessRule = import("./accessRule").AccessRule;
export const AccessRule: typeof import("./accessRule").AccessRule = null as any;
utilities.lazyLoad(exports, ["AccessRule"], () => require("./accessRule"));

export { AccessServiceTokenArgs, AccessServiceTokenState } from "./accessServiceToken";
export type AccessServiceToken = import("./accessServiceToken").AccessServiceToken;
export const AccessServiceToken: typeof import("./accessServiceToken").AccessServiceToken = null as any;
utilities.lazyLoad(exports, ["AccessServiceToken"], () => require("./accessServiceToken"));

export { AccessTagArgs, AccessTagState } from "./accessTag";
export type AccessTag = import("./accessTag").AccessTag;
export const AccessTag: typeof import("./accessTag").AccessTag = null as any;
utilities.lazyLoad(exports, ["AccessTag"], () => require("./accessTag"));

export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountMemberArgs, AccountMemberState } from "./accountMember";
export type AccountMember = import("./accountMember").AccountMember;
export const AccountMember: typeof import("./accountMember").AccountMember = null as any;
utilities.lazyLoad(exports, ["AccountMember"], () => require("./accountMember"));

export { AddressMapArgs, AddressMapState } from "./addressMap";
export type AddressMap = import("./addressMap").AddressMap;
export const AddressMap: typeof import("./addressMap").AddressMap = null as any;
utilities.lazyLoad(exports, ["AddressMap"], () => require("./addressMap"));

export { ApiShieldArgs, ApiShieldState } from "./apiShield";
export type ApiShield = import("./apiShield").ApiShield;
export const ApiShield: typeof import("./apiShield").ApiShield = null as any;
utilities.lazyLoad(exports, ["ApiShield"], () => require("./apiShield"));

export { ApiShieldOperationArgs, ApiShieldOperationState } from "./apiShieldOperation";
export type ApiShieldOperation = import("./apiShieldOperation").ApiShieldOperation;
export const ApiShieldOperation: typeof import("./apiShieldOperation").ApiShieldOperation = null as any;
utilities.lazyLoad(exports, ["ApiShieldOperation"], () => require("./apiShieldOperation"));

export { ApiShieldOperationSchemaValidationSettingsArgs, ApiShieldOperationSchemaValidationSettingsState } from "./apiShieldOperationSchemaValidationSettings";
export type ApiShieldOperationSchemaValidationSettings = import("./apiShieldOperationSchemaValidationSettings").ApiShieldOperationSchemaValidationSettings;
export const ApiShieldOperationSchemaValidationSettings: typeof import("./apiShieldOperationSchemaValidationSettings").ApiShieldOperationSchemaValidationSettings = null as any;
utilities.lazyLoad(exports, ["ApiShieldOperationSchemaValidationSettings"], () => require("./apiShieldOperationSchemaValidationSettings"));

export { ApiShieldSchemaArgs, ApiShieldSchemaState } from "./apiShieldSchema";
export type ApiShieldSchema = import("./apiShieldSchema").ApiShieldSchema;
export const ApiShieldSchema: typeof import("./apiShieldSchema").ApiShieldSchema = null as any;
utilities.lazyLoad(exports, ["ApiShieldSchema"], () => require("./apiShieldSchema"));

export { ApiShieldSchemaValidationSettingsArgs, ApiShieldSchemaValidationSettingsState } from "./apiShieldSchemaValidationSettings";
export type ApiShieldSchemaValidationSettings = import("./apiShieldSchemaValidationSettings").ApiShieldSchemaValidationSettings;
export const ApiShieldSchemaValidationSettings: typeof import("./apiShieldSchemaValidationSettings").ApiShieldSchemaValidationSettings = null as any;
utilities.lazyLoad(exports, ["ApiShieldSchemaValidationSettings"], () => require("./apiShieldSchemaValidationSettings"));

export { ApiTokenArgs, ApiTokenState } from "./apiToken";
export type ApiToken = import("./apiToken").ApiToken;
export const ApiToken: typeof import("./apiToken").ApiToken = null as any;
utilities.lazyLoad(exports, ["ApiToken"], () => require("./apiToken"));

export { ArgoArgs, ArgoState } from "./argo";
export type Argo = import("./argo").Argo;
export const Argo: typeof import("./argo").Argo = null as any;
utilities.lazyLoad(exports, ["Argo"], () => require("./argo"));

export { AuthenticatedOriginPullsArgs, AuthenticatedOriginPullsState } from "./authenticatedOriginPulls";
export type AuthenticatedOriginPulls = import("./authenticatedOriginPulls").AuthenticatedOriginPulls;
export const AuthenticatedOriginPulls: typeof import("./authenticatedOriginPulls").AuthenticatedOriginPulls = null as any;
utilities.lazyLoad(exports, ["AuthenticatedOriginPulls"], () => require("./authenticatedOriginPulls"));

export { AuthenticatedOriginPullsCertificateArgs, AuthenticatedOriginPullsCertificateState } from "./authenticatedOriginPullsCertificate";
export type AuthenticatedOriginPullsCertificate = import("./authenticatedOriginPullsCertificate").AuthenticatedOriginPullsCertificate;
export const AuthenticatedOriginPullsCertificate: typeof import("./authenticatedOriginPullsCertificate").AuthenticatedOriginPullsCertificate = null as any;
utilities.lazyLoad(exports, ["AuthenticatedOriginPullsCertificate"], () => require("./authenticatedOriginPullsCertificate"));

export { BotManagementArgs, BotManagementState } from "./botManagement";
export type BotManagement = import("./botManagement").BotManagement;
export const BotManagement: typeof import("./botManagement").BotManagement = null as any;
utilities.lazyLoad(exports, ["BotManagement"], () => require("./botManagement"));

export { ByoIpPrefixArgs, ByoIpPrefixState } from "./byoIpPrefix";
export type ByoIpPrefix = import("./byoIpPrefix").ByoIpPrefix;
export const ByoIpPrefix: typeof import("./byoIpPrefix").ByoIpPrefix = null as any;
utilities.lazyLoad(exports, ["ByoIpPrefix"], () => require("./byoIpPrefix"));

export { CertificatePackArgs, CertificatePackState } from "./certificatePack";
export type CertificatePack = import("./certificatePack").CertificatePack;
export const CertificatePack: typeof import("./certificatePack").CertificatePack = null as any;
utilities.lazyLoad(exports, ["CertificatePack"], () => require("./certificatePack"));

export { CustomHostnameArgs, CustomHostnameState } from "./customHostname";
export type CustomHostname = import("./customHostname").CustomHostname;
export const CustomHostname: typeof import("./customHostname").CustomHostname = null as any;
utilities.lazyLoad(exports, ["CustomHostname"], () => require("./customHostname"));

export { CustomHostnameFallbackOriginArgs, CustomHostnameFallbackOriginState } from "./customHostnameFallbackOrigin";
export type CustomHostnameFallbackOrigin = import("./customHostnameFallbackOrigin").CustomHostnameFallbackOrigin;
export const CustomHostnameFallbackOrigin: typeof import("./customHostnameFallbackOrigin").CustomHostnameFallbackOrigin = null as any;
utilities.lazyLoad(exports, ["CustomHostnameFallbackOrigin"], () => require("./customHostnameFallbackOrigin"));

export { CustomPagesArgs, CustomPagesState } from "./customPages";
export type CustomPages = import("./customPages").CustomPages;
export const CustomPages: typeof import("./customPages").CustomPages = null as any;
utilities.lazyLoad(exports, ["CustomPages"], () => require("./customPages"));

export { CustomSslArgs, CustomSslState } from "./customSsl";
export type CustomSsl = import("./customSsl").CustomSsl;
export const CustomSsl: typeof import("./customSsl").CustomSsl = null as any;
utilities.lazyLoad(exports, ["CustomSsl"], () => require("./customSsl"));

export { D1DatabaseArgs, D1DatabaseState } from "./d1database";
export type D1Database = import("./d1database").D1Database;
export const D1Database: typeof import("./d1database").D1Database = null as any;
utilities.lazyLoad(exports, ["D1Database"], () => require("./d1database"));

export { DeviceDexTestArgs, DeviceDexTestState } from "./deviceDexTest";
export type DeviceDexTest = import("./deviceDexTest").DeviceDexTest;
export const DeviceDexTest: typeof import("./deviceDexTest").DeviceDexTest = null as any;
utilities.lazyLoad(exports, ["DeviceDexTest"], () => require("./deviceDexTest"));

export { DeviceManagedNetworksArgs, DeviceManagedNetworksState } from "./deviceManagedNetworks";
export type DeviceManagedNetworks = import("./deviceManagedNetworks").DeviceManagedNetworks;
export const DeviceManagedNetworks: typeof import("./deviceManagedNetworks").DeviceManagedNetworks = null as any;
utilities.lazyLoad(exports, ["DeviceManagedNetworks"], () => require("./deviceManagedNetworks"));

export { DevicePolicyCertificatesArgs, DevicePolicyCertificatesState } from "./devicePolicyCertificates";
export type DevicePolicyCertificates = import("./devicePolicyCertificates").DevicePolicyCertificates;
export const DevicePolicyCertificates: typeof import("./devicePolicyCertificates").DevicePolicyCertificates = null as any;
utilities.lazyLoad(exports, ["DevicePolicyCertificates"], () => require("./devicePolicyCertificates"));

export { DevicePostureIntegrationArgs, DevicePostureIntegrationState } from "./devicePostureIntegration";
export type DevicePostureIntegration = import("./devicePostureIntegration").DevicePostureIntegration;
export const DevicePostureIntegration: typeof import("./devicePostureIntegration").DevicePostureIntegration = null as any;
utilities.lazyLoad(exports, ["DevicePostureIntegration"], () => require("./devicePostureIntegration"));

export { DevicePostureRuleArgs, DevicePostureRuleState } from "./devicePostureRule";
export type DevicePostureRule = import("./devicePostureRule").DevicePostureRule;
export const DevicePostureRule: typeof import("./devicePostureRule").DevicePostureRule = null as any;
utilities.lazyLoad(exports, ["DevicePostureRule"], () => require("./devicePostureRule"));

export { DeviceSettingsPolicyArgs, DeviceSettingsPolicyState } from "./deviceSettingsPolicy";
export type DeviceSettingsPolicy = import("./deviceSettingsPolicy").DeviceSettingsPolicy;
export const DeviceSettingsPolicy: typeof import("./deviceSettingsPolicy").DeviceSettingsPolicy = null as any;
utilities.lazyLoad(exports, ["DeviceSettingsPolicy"], () => require("./deviceSettingsPolicy"));

export { DlpProfileArgs, DlpProfileState } from "./dlpProfile";
export type DlpProfile = import("./dlpProfile").DlpProfile;
export const DlpProfile: typeof import("./dlpProfile").DlpProfile = null as any;
utilities.lazyLoad(exports, ["DlpProfile"], () => require("./dlpProfile"));

export { EmailRoutingAddressArgs, EmailRoutingAddressState } from "./emailRoutingAddress";
export type EmailRoutingAddress = import("./emailRoutingAddress").EmailRoutingAddress;
export const EmailRoutingAddress: typeof import("./emailRoutingAddress").EmailRoutingAddress = null as any;
utilities.lazyLoad(exports, ["EmailRoutingAddress"], () => require("./emailRoutingAddress"));

export { EmailRoutingCatchAllArgs, EmailRoutingCatchAllState } from "./emailRoutingCatchAll";
export type EmailRoutingCatchAll = import("./emailRoutingCatchAll").EmailRoutingCatchAll;
export const EmailRoutingCatchAll: typeof import("./emailRoutingCatchAll").EmailRoutingCatchAll = null as any;
utilities.lazyLoad(exports, ["EmailRoutingCatchAll"], () => require("./emailRoutingCatchAll"));

export { EmailRoutingRuleArgs, EmailRoutingRuleState } from "./emailRoutingRule";
export type EmailRoutingRule = import("./emailRoutingRule").EmailRoutingRule;
export const EmailRoutingRule: typeof import("./emailRoutingRule").EmailRoutingRule = null as any;
utilities.lazyLoad(exports, ["EmailRoutingRule"], () => require("./emailRoutingRule"));

export { EmailRoutingSettingsArgs, EmailRoutingSettingsState } from "./emailRoutingSettings";
export type EmailRoutingSettings = import("./emailRoutingSettings").EmailRoutingSettings;
export const EmailRoutingSettings: typeof import("./emailRoutingSettings").EmailRoutingSettings = null as any;
utilities.lazyLoad(exports, ["EmailRoutingSettings"], () => require("./emailRoutingSettings"));

export { FallbackDomainArgs, FallbackDomainState } from "./fallbackDomain";
export type FallbackDomain = import("./fallbackDomain").FallbackDomain;
export const FallbackDomain: typeof import("./fallbackDomain").FallbackDomain = null as any;
utilities.lazyLoad(exports, ["FallbackDomain"], () => require("./fallbackDomain"));

export { FilterArgs, FilterState } from "./filter";
export type Filter = import("./filter").Filter;
export const Filter: typeof import("./filter").Filter = null as any;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAccessApplicationArgs, GetAccessApplicationResult, GetAccessApplicationOutputArgs } from "./getAccessApplication";
export const getAccessApplication: typeof import("./getAccessApplication").getAccessApplication = null as any;
export const getAccessApplicationOutput: typeof import("./getAccessApplication").getAccessApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getAccessApplication","getAccessApplicationOutput"], () => require("./getAccessApplication"));

export { GetAccessIdentityProviderArgs, GetAccessIdentityProviderResult, GetAccessIdentityProviderOutputArgs } from "./getAccessIdentityProvider";
export const getAccessIdentityProvider: typeof import("./getAccessIdentityProvider").getAccessIdentityProvider = null as any;
export const getAccessIdentityProviderOutput: typeof import("./getAccessIdentityProvider").getAccessIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getAccessIdentityProvider","getAccessIdentityProviderOutput"], () => require("./getAccessIdentityProvider"));

export { GetAccountRolesArgs, GetAccountRolesResult, GetAccountRolesOutputArgs } from "./getAccountRoles";
export const getAccountRoles: typeof import("./getAccountRoles").getAccountRoles = null as any;
export const getAccountRolesOutput: typeof import("./getAccountRoles").getAccountRolesOutput = null as any;
utilities.lazyLoad(exports, ["getAccountRoles","getAccountRolesOutput"], () => require("./getAccountRoles"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetApiTokenPermissionGroupsResult } from "./getApiTokenPermissionGroups";
export const getApiTokenPermissionGroups: typeof import("./getApiTokenPermissionGroups").getApiTokenPermissionGroups = null as any;
export const getApiTokenPermissionGroupsOutput: typeof import("./getApiTokenPermissionGroups").getApiTokenPermissionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getApiTokenPermissionGroups","getApiTokenPermissionGroupsOutput"], () => require("./getApiTokenPermissionGroups"));

export { GetDevicePostureRulesArgs, GetDevicePostureRulesResult, GetDevicePostureRulesOutputArgs } from "./getDevicePostureRules";
export const getDevicePostureRules: typeof import("./getDevicePostureRules").getDevicePostureRules = null as any;
export const getDevicePostureRulesOutput: typeof import("./getDevicePostureRules").getDevicePostureRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDevicePostureRules","getDevicePostureRulesOutput"], () => require("./getDevicePostureRules"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetDlpDatasetsArgs, GetDlpDatasetsResult, GetDlpDatasetsOutputArgs } from "./getDlpDatasets";
export const getDlpDatasets: typeof import("./getDlpDatasets").getDlpDatasets = null as any;
export const getDlpDatasetsOutput: typeof import("./getDlpDatasets").getDlpDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getDlpDatasets","getDlpDatasetsOutput"], () => require("./getDlpDatasets"));

export { GetIpRangesResult } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { GetListArgs, GetListResult, GetListOutputArgs } from "./getList";
export const getList: typeof import("./getList").getList = null as any;
export const getListOutput: typeof import("./getList").getListOutput = null as any;
utilities.lazyLoad(exports, ["getList","getListOutput"], () => require("./getList"));

export { GetListsArgs, GetListsResult, GetListsOutputArgs } from "./getLists";
export const getLists: typeof import("./getLists").getLists = null as any;
export const getListsOutput: typeof import("./getLists").getListsOutput = null as any;
utilities.lazyLoad(exports, ["getLists","getListsOutput"], () => require("./getLists"));

export { GetLoadBalancerPoolsArgs, GetLoadBalancerPoolsResult, GetLoadBalancerPoolsOutputArgs } from "./getLoadBalancerPools";
export const getLoadBalancerPools: typeof import("./getLoadBalancerPools").getLoadBalancerPools = null as any;
export const getLoadBalancerPoolsOutput: typeof import("./getLoadBalancerPools").getLoadBalancerPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerPools","getLoadBalancerPoolsOutput"], () => require("./getLoadBalancerPools"));

export { GetOriginCaCertificateArgs, GetOriginCaCertificateResult, GetOriginCaCertificateOutputArgs } from "./getOriginCaCertificate";
export const getOriginCaCertificate: typeof import("./getOriginCaCertificate").getOriginCaCertificate = null as any;
export const getOriginCaCertificateOutput: typeof import("./getOriginCaCertificate").getOriginCaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getOriginCaCertificate","getOriginCaCertificateOutput"], () => require("./getOriginCaCertificate"));

export { GetOriginCaRootCertificateArgs, GetOriginCaRootCertificateResult, GetOriginCaRootCertificateOutputArgs } from "./getOriginCaRootCertificate";
export const getOriginCaRootCertificate: typeof import("./getOriginCaRootCertificate").getOriginCaRootCertificate = null as any;
export const getOriginCaRootCertificateOutput: typeof import("./getOriginCaRootCertificate").getOriginCaRootCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getOriginCaRootCertificate","getOriginCaRootCertificateOutput"], () => require("./getOriginCaRootCertificate"));

export { GetRecordArgs, GetRecordResult, GetRecordOutputArgs } from "./getRecord";
export const getRecord: typeof import("./getRecord").getRecord = null as any;
export const getRecordOutput: typeof import("./getRecord").getRecordOutput = null as any;
utilities.lazyLoad(exports, ["getRecord","getRecordOutput"], () => require("./getRecord"));

export { GetRulesetsArgs, GetRulesetsResult, GetRulesetsOutputArgs } from "./getRulesets";
export const getRulesets: typeof import("./getRulesets").getRulesets = null as any;
export const getRulesetsOutput: typeof import("./getRulesets").getRulesetsOutput = null as any;
utilities.lazyLoad(exports, ["getRulesets","getRulesetsOutput"], () => require("./getRulesets"));

export { GetTunnelArgs, GetTunnelResult, GetTunnelOutputArgs } from "./getTunnel";
export const getTunnel: typeof import("./getTunnel").getTunnel = null as any;
export const getTunnelOutput: typeof import("./getTunnel").getTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getTunnel","getTunnelOutput"], () => require("./getTunnel"));

export { GetTunnelVirtualNetworkArgs, GetTunnelVirtualNetworkResult, GetTunnelVirtualNetworkOutputArgs } from "./getTunnelVirtualNetwork";
export const getTunnelVirtualNetwork: typeof import("./getTunnelVirtualNetwork").getTunnelVirtualNetwork = null as any;
export const getTunnelVirtualNetworkOutput: typeof import("./getTunnelVirtualNetwork").getTunnelVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getTunnelVirtualNetwork","getTunnelVirtualNetworkOutput"], () => require("./getTunnelVirtualNetwork"));

export { GetUserResult } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { GetZoneCacheReserveArgs, GetZoneCacheReserveResult, GetZoneCacheReserveOutputArgs } from "./getZoneCacheReserve";
export const getZoneCacheReserve: typeof import("./getZoneCacheReserve").getZoneCacheReserve = null as any;
export const getZoneCacheReserveOutput: typeof import("./getZoneCacheReserve").getZoneCacheReserveOutput = null as any;
utilities.lazyLoad(exports, ["getZoneCacheReserve","getZoneCacheReserveOutput"], () => require("./getZoneCacheReserve"));

export { GetZoneDnssecArgs, GetZoneDnssecResult, GetZoneDnssecOutputArgs } from "./getZoneDnssec";
export const getZoneDnssec: typeof import("./getZoneDnssec").getZoneDnssec = null as any;
export const getZoneDnssecOutput: typeof import("./getZoneDnssec").getZoneDnssecOutput = null as any;
utilities.lazyLoad(exports, ["getZoneDnssec","getZoneDnssecOutput"], () => require("./getZoneDnssec"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { GreTunnelArgs, GreTunnelState } from "./greTunnel";
export type GreTunnel = import("./greTunnel").GreTunnel;
export const GreTunnel: typeof import("./greTunnel").GreTunnel = null as any;
utilities.lazyLoad(exports, ["GreTunnel"], () => require("./greTunnel"));

export { HealthcheckArgs, HealthcheckState } from "./healthcheck";
export type Healthcheck = import("./healthcheck").Healthcheck;
export const Healthcheck: typeof import("./healthcheck").Healthcheck = null as any;
utilities.lazyLoad(exports, ["Healthcheck"], () => require("./healthcheck"));

export { HostnameTlsSettingArgs, HostnameTlsSettingState } from "./hostnameTlsSetting";
export type HostnameTlsSetting = import("./hostnameTlsSetting").HostnameTlsSetting;
export const HostnameTlsSetting: typeof import("./hostnameTlsSetting").HostnameTlsSetting = null as any;
utilities.lazyLoad(exports, ["HostnameTlsSetting"], () => require("./hostnameTlsSetting"));

export { HostnameTlsSettingCiphersArgs, HostnameTlsSettingCiphersState } from "./hostnameTlsSettingCiphers";
export type HostnameTlsSettingCiphers = import("./hostnameTlsSettingCiphers").HostnameTlsSettingCiphers;
export const HostnameTlsSettingCiphers: typeof import("./hostnameTlsSettingCiphers").HostnameTlsSettingCiphers = null as any;
utilities.lazyLoad(exports, ["HostnameTlsSettingCiphers"], () => require("./hostnameTlsSettingCiphers"));

export { HyperdriveConfigArgs, HyperdriveConfigState } from "./hyperdriveConfig";
export type HyperdriveConfig = import("./hyperdriveConfig").HyperdriveConfig;
export const HyperdriveConfig: typeof import("./hyperdriveConfig").HyperdriveConfig = null as any;
utilities.lazyLoad(exports, ["HyperdriveConfig"], () => require("./hyperdriveConfig"));

export { IpsecTunnelArgs, IpsecTunnelState } from "./ipsecTunnel";
export type IpsecTunnel = import("./ipsecTunnel").IpsecTunnel;
export const IpsecTunnel: typeof import("./ipsecTunnel").IpsecTunnel = null as any;
utilities.lazyLoad(exports, ["IpsecTunnel"], () => require("./ipsecTunnel"));

export { KeylessCertificateArgs, KeylessCertificateState } from "./keylessCertificate";
export type KeylessCertificate = import("./keylessCertificate").KeylessCertificate;
export const KeylessCertificate: typeof import("./keylessCertificate").KeylessCertificate = null as any;
utilities.lazyLoad(exports, ["KeylessCertificate"], () => require("./keylessCertificate"));

export { ListArgs, ListState } from "./list";
export type List = import("./list").List;
export const List: typeof import("./list").List = null as any;
utilities.lazyLoad(exports, ["List"], () => require("./list"));

export { ListItemArgs, ListItemState } from "./listItem";
export type ListItem = import("./listItem").ListItem;
export const ListItem: typeof import("./listItem").ListItem = null as any;
utilities.lazyLoad(exports, ["ListItem"], () => require("./listItem"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerMonitorArgs, LoadBalancerMonitorState } from "./loadBalancerMonitor";
export type LoadBalancerMonitor = import("./loadBalancerMonitor").LoadBalancerMonitor;
export const LoadBalancerMonitor: typeof import("./loadBalancerMonitor").LoadBalancerMonitor = null as any;
utilities.lazyLoad(exports, ["LoadBalancerMonitor"], () => require("./loadBalancerMonitor"));

export { LoadBalancerPoolArgs, LoadBalancerPoolState } from "./loadBalancerPool";
export type LoadBalancerPool = import("./loadBalancerPool").LoadBalancerPool;
export const LoadBalancerPool: typeof import("./loadBalancerPool").LoadBalancerPool = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPool"], () => require("./loadBalancerPool"));

export { LogpullRetentionArgs, LogpullRetentionState } from "./logpullRetention";
export type LogpullRetention = import("./logpullRetention").LogpullRetention;
export const LogpullRetention: typeof import("./logpullRetention").LogpullRetention = null as any;
utilities.lazyLoad(exports, ["LogpullRetention"], () => require("./logpullRetention"));

export { LogpushJobArgs, LogpushJobState } from "./logpushJob";
export type LogpushJob = import("./logpushJob").LogpushJob;
export const LogpushJob: typeof import("./logpushJob").LogpushJob = null as any;
utilities.lazyLoad(exports, ["LogpushJob"], () => require("./logpushJob"));

export { LogpushOwnershipChallengeArgs, LogpushOwnershipChallengeState } from "./logpushOwnershipChallenge";
export type LogpushOwnershipChallenge = import("./logpushOwnershipChallenge").LogpushOwnershipChallenge;
export const LogpushOwnershipChallenge: typeof import("./logpushOwnershipChallenge").LogpushOwnershipChallenge = null as any;
utilities.lazyLoad(exports, ["LogpushOwnershipChallenge"], () => require("./logpushOwnershipChallenge"));

export { MagicFirewallRulesetArgs, MagicFirewallRulesetState } from "./magicFirewallRuleset";
export type MagicFirewallRuleset = import("./magicFirewallRuleset").MagicFirewallRuleset;
export const MagicFirewallRuleset: typeof import("./magicFirewallRuleset").MagicFirewallRuleset = null as any;
utilities.lazyLoad(exports, ["MagicFirewallRuleset"], () => require("./magicFirewallRuleset"));

export { ManagedHeadersArgs, ManagedHeadersState } from "./managedHeaders";
export type ManagedHeaders = import("./managedHeaders").ManagedHeaders;
export const ManagedHeaders: typeof import("./managedHeaders").ManagedHeaders = null as any;
utilities.lazyLoad(exports, ["ManagedHeaders"], () => require("./managedHeaders"));

export { MtlsCertificateArgs, MtlsCertificateState } from "./mtlsCertificate";
export type MtlsCertificate = import("./mtlsCertificate").MtlsCertificate;
export const MtlsCertificate: typeof import("./mtlsCertificate").MtlsCertificate = null as any;
utilities.lazyLoad(exports, ["MtlsCertificate"], () => require("./mtlsCertificate"));

export { NotificationPolicyArgs, NotificationPolicyState } from "./notificationPolicy";
export type NotificationPolicy = import("./notificationPolicy").NotificationPolicy;
export const NotificationPolicy: typeof import("./notificationPolicy").NotificationPolicy = null as any;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));

export { NotificationPolicyWebhooksArgs, NotificationPolicyWebhooksState } from "./notificationPolicyWebhooks";
export type NotificationPolicyWebhooks = import("./notificationPolicyWebhooks").NotificationPolicyWebhooks;
export const NotificationPolicyWebhooks: typeof import("./notificationPolicyWebhooks").NotificationPolicyWebhooks = null as any;
utilities.lazyLoad(exports, ["NotificationPolicyWebhooks"], () => require("./notificationPolicyWebhooks"));

export { ObservatoryScheduledTestArgs, ObservatoryScheduledTestState } from "./observatoryScheduledTest";
export type ObservatoryScheduledTest = import("./observatoryScheduledTest").ObservatoryScheduledTest;
export const ObservatoryScheduledTest: typeof import("./observatoryScheduledTest").ObservatoryScheduledTest = null as any;
utilities.lazyLoad(exports, ["ObservatoryScheduledTest"], () => require("./observatoryScheduledTest"));

export { OriginCaCertificateArgs, OriginCaCertificateState } from "./originCaCertificate";
export type OriginCaCertificate = import("./originCaCertificate").OriginCaCertificate;
export const OriginCaCertificate: typeof import("./originCaCertificate").OriginCaCertificate = null as any;
utilities.lazyLoad(exports, ["OriginCaCertificate"], () => require("./originCaCertificate"));

export { PageRuleArgs, PageRuleState } from "./pageRule";
export type PageRule = import("./pageRule").PageRule;
export const PageRule: typeof import("./pageRule").PageRule = null as any;
utilities.lazyLoad(exports, ["PageRule"], () => require("./pageRule"));

export { PagesDomainArgs, PagesDomainState } from "./pagesDomain";
export type PagesDomain = import("./pagesDomain").PagesDomain;
export const PagesDomain: typeof import("./pagesDomain").PagesDomain = null as any;
utilities.lazyLoad(exports, ["PagesDomain"], () => require("./pagesDomain"));

export { PagesProjectArgs, PagesProjectState } from "./pagesProject";
export type PagesProject = import("./pagesProject").PagesProject;
export const PagesProject: typeof import("./pagesProject").PagesProject = null as any;
utilities.lazyLoad(exports, ["PagesProject"], () => require("./pagesProject"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { R2BucketArgs, R2BucketState } from "./r2bucket";
export type R2Bucket = import("./r2bucket").R2Bucket;
export const R2Bucket: typeof import("./r2bucket").R2Bucket = null as any;
utilities.lazyLoad(exports, ["R2Bucket"], () => require("./r2bucket"));

export { RateLimitArgs, RateLimitState } from "./rateLimit";
export type RateLimit = import("./rateLimit").RateLimit;
export const RateLimit: typeof import("./rateLimit").RateLimit = null as any;
utilities.lazyLoad(exports, ["RateLimit"], () => require("./rateLimit"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { RegionalHostnameArgs, RegionalHostnameState } from "./regionalHostname";
export type RegionalHostname = import("./regionalHostname").RegionalHostname;
export const RegionalHostname: typeof import("./regionalHostname").RegionalHostname = null as any;
utilities.lazyLoad(exports, ["RegionalHostname"], () => require("./regionalHostname"));

export { RegionalTieredCacheArgs, RegionalTieredCacheState } from "./regionalTieredCache";
export type RegionalTieredCache = import("./regionalTieredCache").RegionalTieredCache;
export const RegionalTieredCache: typeof import("./regionalTieredCache").RegionalTieredCache = null as any;
utilities.lazyLoad(exports, ["RegionalTieredCache"], () => require("./regionalTieredCache"));

export { RulesetArgs, RulesetState } from "./ruleset";
export type Ruleset = import("./ruleset").Ruleset;
export const Ruleset: typeof import("./ruleset").Ruleset = null as any;
utilities.lazyLoad(exports, ["Ruleset"], () => require("./ruleset"));

export { SpectrumApplicationArgs, SpectrumApplicationState } from "./spectrumApplication";
export type SpectrumApplication = import("./spectrumApplication").SpectrumApplication;
export const SpectrumApplication: typeof import("./spectrumApplication").SpectrumApplication = null as any;
utilities.lazyLoad(exports, ["SpectrumApplication"], () => require("./spectrumApplication"));

export { SplitTunnelArgs, SplitTunnelState } from "./splitTunnel";
export type SplitTunnel = import("./splitTunnel").SplitTunnel;
export const SplitTunnel: typeof import("./splitTunnel").SplitTunnel = null as any;
utilities.lazyLoad(exports, ["SplitTunnel"], () => require("./splitTunnel"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { TeamsAccountArgs, TeamsAccountState } from "./teamsAccount";
export type TeamsAccount = import("./teamsAccount").TeamsAccount;
export const TeamsAccount: typeof import("./teamsAccount").TeamsAccount = null as any;
utilities.lazyLoad(exports, ["TeamsAccount"], () => require("./teamsAccount"));

export { TeamsListArgs, TeamsListState } from "./teamsList";
export type TeamsList = import("./teamsList").TeamsList;
export const TeamsList: typeof import("./teamsList").TeamsList = null as any;
utilities.lazyLoad(exports, ["TeamsList"], () => require("./teamsList"));

export { TeamsLocationArgs, TeamsLocationState } from "./teamsLocation";
export type TeamsLocation = import("./teamsLocation").TeamsLocation;
export const TeamsLocation: typeof import("./teamsLocation").TeamsLocation = null as any;
utilities.lazyLoad(exports, ["TeamsLocation"], () => require("./teamsLocation"));

export { TeamsProxyEndpointArgs, TeamsProxyEndpointState } from "./teamsProxyEndpoint";
export type TeamsProxyEndpoint = import("./teamsProxyEndpoint").TeamsProxyEndpoint;
export const TeamsProxyEndpoint: typeof import("./teamsProxyEndpoint").TeamsProxyEndpoint = null as any;
utilities.lazyLoad(exports, ["TeamsProxyEndpoint"], () => require("./teamsProxyEndpoint"));

export { TeamsRuleArgs, TeamsRuleState } from "./teamsRule";
export type TeamsRule = import("./teamsRule").TeamsRule;
export const TeamsRule: typeof import("./teamsRule").TeamsRule = null as any;
utilities.lazyLoad(exports, ["TeamsRule"], () => require("./teamsRule"));

export { TieredCacheArgs, TieredCacheState } from "./tieredCache";
export type TieredCache = import("./tieredCache").TieredCache;
export const TieredCache: typeof import("./tieredCache").TieredCache = null as any;
utilities.lazyLoad(exports, ["TieredCache"], () => require("./tieredCache"));

export { TotalTlsArgs, TotalTlsState } from "./totalTls";
export type TotalTls = import("./totalTls").TotalTls;
export const TotalTls: typeof import("./totalTls").TotalTls = null as any;
utilities.lazyLoad(exports, ["TotalTls"], () => require("./totalTls"));

export { TunnelArgs, TunnelState } from "./tunnel";
export type Tunnel = import("./tunnel").Tunnel;
export const Tunnel: typeof import("./tunnel").Tunnel = null as any;
utilities.lazyLoad(exports, ["Tunnel"], () => require("./tunnel"));

export { TunnelConfigArgs, TunnelConfigState } from "./tunnelConfig";
export type TunnelConfig = import("./tunnelConfig").TunnelConfig;
export const TunnelConfig: typeof import("./tunnelConfig").TunnelConfig = null as any;
utilities.lazyLoad(exports, ["TunnelConfig"], () => require("./tunnelConfig"));

export { TunnelRouteArgs, TunnelRouteState } from "./tunnelRoute";
export type TunnelRoute = import("./tunnelRoute").TunnelRoute;
export const TunnelRoute: typeof import("./tunnelRoute").TunnelRoute = null as any;
utilities.lazyLoad(exports, ["TunnelRoute"], () => require("./tunnelRoute"));

export { TunnelVirtualNetworkArgs, TunnelVirtualNetworkState } from "./tunnelVirtualNetwork";
export type TunnelVirtualNetwork = import("./tunnelVirtualNetwork").TunnelVirtualNetwork;
export const TunnelVirtualNetwork: typeof import("./tunnelVirtualNetwork").TunnelVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["TunnelVirtualNetwork"], () => require("./tunnelVirtualNetwork"));

export { TurnstileWidgetArgs, TurnstileWidgetState } from "./turnstileWidget";
export type TurnstileWidget = import("./turnstileWidget").TurnstileWidget;
export const TurnstileWidget: typeof import("./turnstileWidget").TurnstileWidget = null as any;
utilities.lazyLoad(exports, ["TurnstileWidget"], () => require("./turnstileWidget"));

export { UrlNormalizationSettingsArgs, UrlNormalizationSettingsState } from "./urlNormalizationSettings";
export type UrlNormalizationSettings = import("./urlNormalizationSettings").UrlNormalizationSettings;
export const UrlNormalizationSettings: typeof import("./urlNormalizationSettings").UrlNormalizationSettings = null as any;
utilities.lazyLoad(exports, ["UrlNormalizationSettings"], () => require("./urlNormalizationSettings"));

export { UserAgentBlockingRuleArgs, UserAgentBlockingRuleState } from "./userAgentBlockingRule";
export type UserAgentBlockingRule = import("./userAgentBlockingRule").UserAgentBlockingRule;
export const UserAgentBlockingRule: typeof import("./userAgentBlockingRule").UserAgentBlockingRule = null as any;
utilities.lazyLoad(exports, ["UserAgentBlockingRule"], () => require("./userAgentBlockingRule"));

export { WaitingRoomArgs, WaitingRoomState } from "./waitingRoom";
export type WaitingRoom = import("./waitingRoom").WaitingRoom;
export const WaitingRoom: typeof import("./waitingRoom").WaitingRoom = null as any;
utilities.lazyLoad(exports, ["WaitingRoom"], () => require("./waitingRoom"));

export { WaitingRoomEventArgs, WaitingRoomEventState } from "./waitingRoomEvent";
export type WaitingRoomEvent = import("./waitingRoomEvent").WaitingRoomEvent;
export const WaitingRoomEvent: typeof import("./waitingRoomEvent").WaitingRoomEvent = null as any;
utilities.lazyLoad(exports, ["WaitingRoomEvent"], () => require("./waitingRoomEvent"));

export { WaitingRoomRulesArgs, WaitingRoomRulesState } from "./waitingRoomRules";
export type WaitingRoomRules = import("./waitingRoomRules").WaitingRoomRules;
export const WaitingRoomRules: typeof import("./waitingRoomRules").WaitingRoomRules = null as any;
utilities.lazyLoad(exports, ["WaitingRoomRules"], () => require("./waitingRoomRules"));

export { WaitingRoomSettingsArgs, WaitingRoomSettingsState } from "./waitingRoomSettings";
export type WaitingRoomSettings = import("./waitingRoomSettings").WaitingRoomSettings;
export const WaitingRoomSettings: typeof import("./waitingRoomSettings").WaitingRoomSettings = null as any;
utilities.lazyLoad(exports, ["WaitingRoomSettings"], () => require("./waitingRoomSettings"));

export { Web3HostnameArgs, Web3HostnameState } from "./web3Hostname";
export type Web3Hostname = import("./web3Hostname").Web3Hostname;
export const Web3Hostname: typeof import("./web3Hostname").Web3Hostname = null as any;
utilities.lazyLoad(exports, ["Web3Hostname"], () => require("./web3Hostname"));

export { WebAnalyticsRuleArgs, WebAnalyticsRuleState } from "./webAnalyticsRule";
export type WebAnalyticsRule = import("./webAnalyticsRule").WebAnalyticsRule;
export const WebAnalyticsRule: typeof import("./webAnalyticsRule").WebAnalyticsRule = null as any;
utilities.lazyLoad(exports, ["WebAnalyticsRule"], () => require("./webAnalyticsRule"));

export { WebAnalyticsSiteArgs, WebAnalyticsSiteState } from "./webAnalyticsSite";
export type WebAnalyticsSite = import("./webAnalyticsSite").WebAnalyticsSite;
export const WebAnalyticsSite: typeof import("./webAnalyticsSite").WebAnalyticsSite = null as any;
utilities.lazyLoad(exports, ["WebAnalyticsSite"], () => require("./webAnalyticsSite"));

export { WorkerCronTriggerArgs, WorkerCronTriggerState } from "./workerCronTrigger";
export type WorkerCronTrigger = import("./workerCronTrigger").WorkerCronTrigger;
export const WorkerCronTrigger: typeof import("./workerCronTrigger").WorkerCronTrigger = null as any;
utilities.lazyLoad(exports, ["WorkerCronTrigger"], () => require("./workerCronTrigger"));

export { WorkerDomainArgs, WorkerDomainState } from "./workerDomain";
export type WorkerDomain = import("./workerDomain").WorkerDomain;
export const WorkerDomain: typeof import("./workerDomain").WorkerDomain = null as any;
utilities.lazyLoad(exports, ["WorkerDomain"], () => require("./workerDomain"));

export { WorkerRouteArgs, WorkerRouteState } from "./workerRoute";
export type WorkerRoute = import("./workerRoute").WorkerRoute;
export const WorkerRoute: typeof import("./workerRoute").WorkerRoute = null as any;
utilities.lazyLoad(exports, ["WorkerRoute"], () => require("./workerRoute"));

export { WorkerScriptArgs, WorkerScriptState } from "./workerScript";
export type WorkerScript = import("./workerScript").WorkerScript;
export const WorkerScript: typeof import("./workerScript").WorkerScript = null as any;
utilities.lazyLoad(exports, ["WorkerScript"], () => require("./workerScript"));

export { WorkerSecretArgs, WorkerSecretState } from "./workerSecret";
export type WorkerSecret = import("./workerSecret").WorkerSecret;
export const WorkerSecret: typeof import("./workerSecret").WorkerSecret = null as any;
utilities.lazyLoad(exports, ["WorkerSecret"], () => require("./workerSecret"));

export { WorkersForPlatformsNamespaceArgs, WorkersForPlatformsNamespaceState } from "./workersForPlatformsNamespace";
export type WorkersForPlatformsNamespace = import("./workersForPlatformsNamespace").WorkersForPlatformsNamespace;
export const WorkersForPlatformsNamespace: typeof import("./workersForPlatformsNamespace").WorkersForPlatformsNamespace = null as any;
utilities.lazyLoad(exports, ["WorkersForPlatformsNamespace"], () => require("./workersForPlatformsNamespace"));

export { WorkersKvArgs, WorkersKvState } from "./workersKv";
export type WorkersKv = import("./workersKv").WorkersKv;
export const WorkersKv: typeof import("./workersKv").WorkersKv = null as any;
utilities.lazyLoad(exports, ["WorkersKv"], () => require("./workersKv"));

export { WorkersKvNamespaceArgs, WorkersKvNamespaceState } from "./workersKvNamespace";
export type WorkersKvNamespace = import("./workersKvNamespace").WorkersKvNamespace;
export const WorkersKvNamespace: typeof import("./workersKvNamespace").WorkersKvNamespace = null as any;
utilities.lazyLoad(exports, ["WorkersKvNamespace"], () => require("./workersKvNamespace"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneCacheReserveArgs, ZoneCacheReserveState } from "./zoneCacheReserve";
export type ZoneCacheReserve = import("./zoneCacheReserve").ZoneCacheReserve;
export const ZoneCacheReserve: typeof import("./zoneCacheReserve").ZoneCacheReserve = null as any;
utilities.lazyLoad(exports, ["ZoneCacheReserve"], () => require("./zoneCacheReserve"));

export { ZoneCacheVariantsArgs, ZoneCacheVariantsState } from "./zoneCacheVariants";
export type ZoneCacheVariants = import("./zoneCacheVariants").ZoneCacheVariants;
export const ZoneCacheVariants: typeof import("./zoneCacheVariants").ZoneCacheVariants = null as any;
utilities.lazyLoad(exports, ["ZoneCacheVariants"], () => require("./zoneCacheVariants"));

export { ZoneDnssecArgs, ZoneDnssecState } from "./zoneDnssec";
export type ZoneDnssec = import("./zoneDnssec").ZoneDnssec;
export const ZoneDnssec: typeof import("./zoneDnssec").ZoneDnssec = null as any;
utilities.lazyLoad(exports, ["ZoneDnssec"], () => require("./zoneDnssec"));

export { ZoneHoldArgs, ZoneHoldState } from "./zoneHold";
export type ZoneHold = import("./zoneHold").ZoneHold;
export const ZoneHold: typeof import("./zoneHold").ZoneHold = null as any;
utilities.lazyLoad(exports, ["ZoneHold"], () => require("./zoneHold"));

export { ZoneLockdownArgs, ZoneLockdownState } from "./zoneLockdown";
export type ZoneLockdown = import("./zoneLockdown").ZoneLockdown;
export const ZoneLockdown: typeof import("./zoneLockdown").ZoneLockdown = null as any;
utilities.lazyLoad(exports, ["ZoneLockdown"], () => require("./zoneLockdown"));

export { ZoneSettingsOverrideArgs, ZoneSettingsOverrideState } from "./zoneSettingsOverride";
export type ZoneSettingsOverride = import("./zoneSettingsOverride").ZoneSettingsOverride;
export const ZoneSettingsOverride: typeof import("./zoneSettingsOverride").ZoneSettingsOverride = null as any;
utilities.lazyLoad(exports, ["ZoneSettingsOverride"], () => require("./zoneSettingsOverride"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudflare:index/accessApplication:AccessApplication":
                return new AccessApplication(name, <any>undefined, { urn })
            case "cloudflare:index/accessCaCertificate:AccessCaCertificate":
                return new AccessCaCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/accessCustomPage:AccessCustomPage":
                return new AccessCustomPage(name, <any>undefined, { urn })
            case "cloudflare:index/accessGroup:AccessGroup":
                return new AccessGroup(name, <any>undefined, { urn })
            case "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
                return new AccessIdentityProvider(name, <any>undefined, { urn })
            case "cloudflare:index/accessKeysConfiguration:AccessKeysConfiguration":
                return new AccessKeysConfiguration(name, <any>undefined, { urn })
            case "cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate":
                return new AccessMutualTlsCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings":
                return new AccessMutualTlsHostnameSettings(name, <any>undefined, { urn })
            case "cloudflare:index/accessOrganization:AccessOrganization":
                return new AccessOrganization(name, <any>undefined, { urn })
            case "cloudflare:index/accessPolicy:AccessPolicy":
                return new AccessPolicy(name, <any>undefined, { urn })
            case "cloudflare:index/accessRule:AccessRule":
                return new AccessRule(name, <any>undefined, { urn })
            case "cloudflare:index/accessServiceToken:AccessServiceToken":
                return new AccessServiceToken(name, <any>undefined, { urn })
            case "cloudflare:index/accessTag:AccessTag":
                return new AccessTag(name, <any>undefined, { urn })
            case "cloudflare:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "cloudflare:index/accountMember:AccountMember":
                return new AccountMember(name, <any>undefined, { urn })
            case "cloudflare:index/addressMap:AddressMap":
                return new AddressMap(name, <any>undefined, { urn })
            case "cloudflare:index/apiShield:ApiShield":
                return new ApiShield(name, <any>undefined, { urn })
            case "cloudflare:index/apiShieldOperation:ApiShieldOperation":
                return new ApiShieldOperation(name, <any>undefined, { urn })
            case "cloudflare:index/apiShieldOperationSchemaValidationSettings:ApiShieldOperationSchemaValidationSettings":
                return new ApiShieldOperationSchemaValidationSettings(name, <any>undefined, { urn })
            case "cloudflare:index/apiShieldSchema:ApiShieldSchema":
                return new ApiShieldSchema(name, <any>undefined, { urn })
            case "cloudflare:index/apiShieldSchemaValidationSettings:ApiShieldSchemaValidationSettings":
                return new ApiShieldSchemaValidationSettings(name, <any>undefined, { urn })
            case "cloudflare:index/apiToken:ApiToken":
                return new ApiToken(name, <any>undefined, { urn })
            case "cloudflare:index/argo:Argo":
                return new Argo(name, <any>undefined, { urn })
            case "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
                return new AuthenticatedOriginPulls(name, <any>undefined, { urn })
            case "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
                return new AuthenticatedOriginPullsCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/botManagement:BotManagement":
                return new BotManagement(name, <any>undefined, { urn })
            case "cloudflare:index/byoIpPrefix:ByoIpPrefix":
                return new ByoIpPrefix(name, <any>undefined, { urn })
            case "cloudflare:index/certificatePack:CertificatePack":
                return new CertificatePack(name, <any>undefined, { urn })
            case "cloudflare:index/customHostname:CustomHostname":
                return new CustomHostname(name, <any>undefined, { urn })
            case "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
                return new CustomHostnameFallbackOrigin(name, <any>undefined, { urn })
            case "cloudflare:index/customPages:CustomPages":
                return new CustomPages(name, <any>undefined, { urn })
            case "cloudflare:index/customSsl:CustomSsl":
                return new CustomSsl(name, <any>undefined, { urn })
            case "cloudflare:index/d1Database:D1Database":
                return new D1Database(name, <any>undefined, { urn })
            case "cloudflare:index/deviceDexTest:DeviceDexTest":
                return new DeviceDexTest(name, <any>undefined, { urn })
            case "cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks":
                return new DeviceManagedNetworks(name, <any>undefined, { urn })
            case "cloudflare:index/devicePolicyCertificates:DevicePolicyCertificates":
                return new DevicePolicyCertificates(name, <any>undefined, { urn })
            case "cloudflare:index/devicePostureIntegration:DevicePostureIntegration":
                return new DevicePostureIntegration(name, <any>undefined, { urn })
            case "cloudflare:index/devicePostureRule:DevicePostureRule":
                return new DevicePostureRule(name, <any>undefined, { urn })
            case "cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy":
                return new DeviceSettingsPolicy(name, <any>undefined, { urn })
            case "cloudflare:index/dlpProfile:DlpProfile":
                return new DlpProfile(name, <any>undefined, { urn })
            case "cloudflare:index/emailRoutingAddress:EmailRoutingAddress":
                return new EmailRoutingAddress(name, <any>undefined, { urn })
            case "cloudflare:index/emailRoutingCatchAll:EmailRoutingCatchAll":
                return new EmailRoutingCatchAll(name, <any>undefined, { urn })
            case "cloudflare:index/emailRoutingRule:EmailRoutingRule":
                return new EmailRoutingRule(name, <any>undefined, { urn })
            case "cloudflare:index/emailRoutingSettings:EmailRoutingSettings":
                return new EmailRoutingSettings(name, <any>undefined, { urn })
            case "cloudflare:index/fallbackDomain:FallbackDomain":
                return new FallbackDomain(name, <any>undefined, { urn })
            case "cloudflare:index/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "cloudflare:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "cloudflare:index/greTunnel:GreTunnel":
                return new GreTunnel(name, <any>undefined, { urn })
            case "cloudflare:index/healthcheck:Healthcheck":
                return new Healthcheck(name, <any>undefined, { urn })
            case "cloudflare:index/hostnameTlsSetting:HostnameTlsSetting":
                return new HostnameTlsSetting(name, <any>undefined, { urn })
            case "cloudflare:index/hostnameTlsSettingCiphers:HostnameTlsSettingCiphers":
                return new HostnameTlsSettingCiphers(name, <any>undefined, { urn })
            case "cloudflare:index/hyperdriveConfig:HyperdriveConfig":
                return new HyperdriveConfig(name, <any>undefined, { urn })
            case "cloudflare:index/ipsecTunnel:IpsecTunnel":
                return new IpsecTunnel(name, <any>undefined, { urn })
            case "cloudflare:index/keylessCertificate:KeylessCertificate":
                return new KeylessCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/list:List":
                return new List(name, <any>undefined, { urn })
            case "cloudflare:index/listItem:ListItem":
                return new ListItem(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
                return new LoadBalancerMonitor(name, <any>undefined, { urn })
            case "cloudflare:index/loadBalancerPool:LoadBalancerPool":
                return new LoadBalancerPool(name, <any>undefined, { urn })
            case "cloudflare:index/logpullRetention:LogpullRetention":
                return new LogpullRetention(name, <any>undefined, { urn })
            case "cloudflare:index/logpushJob:LogpushJob":
                return new LogpushJob(name, <any>undefined, { urn })
            case "cloudflare:index/logpushOwnershipChallenge:LogpushOwnershipChallenge":
                return new LogpushOwnershipChallenge(name, <any>undefined, { urn })
            case "cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset":
                return new MagicFirewallRuleset(name, <any>undefined, { urn })
            case "cloudflare:index/managedHeaders:ManagedHeaders":
                return new ManagedHeaders(name, <any>undefined, { urn })
            case "cloudflare:index/mtlsCertificate:MtlsCertificate":
                return new MtlsCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks":
                return new NotificationPolicyWebhooks(name, <any>undefined, { urn })
            case "cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest":
                return new ObservatoryScheduledTest(name, <any>undefined, { urn })
            case "cloudflare:index/originCaCertificate:OriginCaCertificate":
                return new OriginCaCertificate(name, <any>undefined, { urn })
            case "cloudflare:index/pageRule:PageRule":
                return new PageRule(name, <any>undefined, { urn })
            case "cloudflare:index/pagesDomain:PagesDomain":
                return new PagesDomain(name, <any>undefined, { urn })
            case "cloudflare:index/pagesProject:PagesProject":
                return new PagesProject(name, <any>undefined, { urn })
            case "cloudflare:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "cloudflare:index/r2Bucket:R2Bucket":
                return new R2Bucket(name, <any>undefined, { urn })
            case "cloudflare:index/rateLimit:RateLimit":
                return new RateLimit(name, <any>undefined, { urn })
            case "cloudflare:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "cloudflare:index/regionalHostname:RegionalHostname":
                return new RegionalHostname(name, <any>undefined, { urn })
            case "cloudflare:index/regionalTieredCache:RegionalTieredCache":
                return new RegionalTieredCache(name, <any>undefined, { urn })
            case "cloudflare:index/ruleset:Ruleset":
                return new Ruleset(name, <any>undefined, { urn })
            case "cloudflare:index/spectrumApplication:SpectrumApplication":
                return new SpectrumApplication(name, <any>undefined, { urn })
            case "cloudflare:index/splitTunnel:SplitTunnel":
                return new SplitTunnel(name, <any>undefined, { urn })
            case "cloudflare:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "cloudflare:index/teamsAccount:TeamsAccount":
                return new TeamsAccount(name, <any>undefined, { urn })
            case "cloudflare:index/teamsList:TeamsList":
                return new TeamsList(name, <any>undefined, { urn })
            case "cloudflare:index/teamsLocation:TeamsLocation":
                return new TeamsLocation(name, <any>undefined, { urn })
            case "cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint":
                return new TeamsProxyEndpoint(name, <any>undefined, { urn })
            case "cloudflare:index/teamsRule:TeamsRule":
                return new TeamsRule(name, <any>undefined, { urn })
            case "cloudflare:index/tieredCache:TieredCache":
                return new TieredCache(name, <any>undefined, { urn })
            case "cloudflare:index/totalTls:TotalTls":
                return new TotalTls(name, <any>undefined, { urn })
            case "cloudflare:index/tunnel:Tunnel":
                return new Tunnel(name, <any>undefined, { urn })
            case "cloudflare:index/tunnelConfig:TunnelConfig":
                return new TunnelConfig(name, <any>undefined, { urn })
            case "cloudflare:index/tunnelRoute:TunnelRoute":
                return new TunnelRoute(name, <any>undefined, { urn })
            case "cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork":
                return new TunnelVirtualNetwork(name, <any>undefined, { urn })
            case "cloudflare:index/turnstileWidget:TurnstileWidget":
                return new TurnstileWidget(name, <any>undefined, { urn })
            case "cloudflare:index/urlNormalizationSettings:UrlNormalizationSettings":
                return new UrlNormalizationSettings(name, <any>undefined, { urn })
            case "cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule":
                return new UserAgentBlockingRule(name, <any>undefined, { urn })
            case "cloudflare:index/waitingRoom:WaitingRoom":
                return new WaitingRoom(name, <any>undefined, { urn })
            case "cloudflare:index/waitingRoomEvent:WaitingRoomEvent":
                return new WaitingRoomEvent(name, <any>undefined, { urn })
            case "cloudflare:index/waitingRoomRules:WaitingRoomRules":
                return new WaitingRoomRules(name, <any>undefined, { urn })
            case "cloudflare:index/waitingRoomSettings:WaitingRoomSettings":
                return new WaitingRoomSettings(name, <any>undefined, { urn })
            case "cloudflare:index/web3Hostname:Web3Hostname":
                return new Web3Hostname(name, <any>undefined, { urn })
            case "cloudflare:index/webAnalyticsRule:WebAnalyticsRule":
                return new WebAnalyticsRule(name, <any>undefined, { urn })
            case "cloudflare:index/webAnalyticsSite:WebAnalyticsSite":
                return new WebAnalyticsSite(name, <any>undefined, { urn })
            case "cloudflare:index/workerCronTrigger:WorkerCronTrigger":
                return new WorkerCronTrigger(name, <any>undefined, { urn })
            case "cloudflare:index/workerDomain:WorkerDomain":
                return new WorkerDomain(name, <any>undefined, { urn })
            case "cloudflare:index/workerRoute:WorkerRoute":
                return new WorkerRoute(name, <any>undefined, { urn })
            case "cloudflare:index/workerScript:WorkerScript":
                return new WorkerScript(name, <any>undefined, { urn })
            case "cloudflare:index/workerSecret:WorkerSecret":
                return new WorkerSecret(name, <any>undefined, { urn })
            case "cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace":
                return new WorkersForPlatformsNamespace(name, <any>undefined, { urn })
            case "cloudflare:index/workersKv:WorkersKv":
                return new WorkersKv(name, <any>undefined, { urn })
            case "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
                return new WorkersKvNamespace(name, <any>undefined, { urn })
            case "cloudflare:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "cloudflare:index/zoneCacheReserve:ZoneCacheReserve":
                return new ZoneCacheReserve(name, <any>undefined, { urn })
            case "cloudflare:index/zoneCacheVariants:ZoneCacheVariants":
                return new ZoneCacheVariants(name, <any>undefined, { urn })
            case "cloudflare:index/zoneDnssec:ZoneDnssec":
                return new ZoneDnssec(name, <any>undefined, { urn })
            case "cloudflare:index/zoneHold:ZoneHold":
                return new ZoneHold(name, <any>undefined, { urn })
            case "cloudflare:index/zoneLockdown:ZoneLockdown":
                return new ZoneLockdown(name, <any>undefined, { urn })
            case "cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride":
                return new ZoneSettingsOverride(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudflare", "index/accessApplication", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCaCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCustomPage", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessGroup", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessIdentityProvider", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessKeysConfiguration", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsHostnameSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessOrganization", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessPolicy", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessServiceToken", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accessTag", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/account", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/accountMember", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/addressMap", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShield", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperation", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperationSchemaValidationSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchema", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchemaValidationSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/apiToken", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/argo", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPulls", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPullsCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/botManagement", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/byoIpPrefix", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/certificatePack", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostname", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostnameFallbackOrigin", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customPages", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/customSsl", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/d1Database", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceDexTest", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceManagedNetworks", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePolicyCertificates", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureIntegration", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceSettingsPolicy", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/dlpProfile", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingAddress", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingCatchAll", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/fallbackDomain", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/filter", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/greTunnel", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/healthcheck", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/hostnameTlsSetting", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/hostnameTlsSettingCiphers", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/hyperdriveConfig", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/ipsecTunnel", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/keylessCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/list", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/listItem", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerMonitor", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerPool", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logpullRetention", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushJob", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushOwnershipChallenge", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/magicFirewallRuleset", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/managedHeaders", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/mtlsCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicyWebhooks", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/observatoryScheduledTest", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/originCaCertificate", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/pageRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesDomain", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesProject", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/queue", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/r2Bucket", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/rateLimit", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/record", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalHostname", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalTieredCache", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/ruleset", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/spectrumApplication", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/splitTunnel", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsAccount", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsList", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsLocation", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsProxyEndpoint", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/tieredCache", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/totalTls", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnel", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelConfig", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelRoute", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/turnstileWidget", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/urlNormalizationSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/userAgentBlockingRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoom", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomEvent", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomRules", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomSettings", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/web3Hostname", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsRule", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsSite", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerCronTrigger", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerDomain", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerRoute", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerScript", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workerSecret", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workersForPlatformsNamespace", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKv", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKvNamespace", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zone", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheReserve", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheVariants", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneDnssec", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneHold", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneLockdown", _module)
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneSettingsOverride", _module)
pulumi.runtime.registerResourcePackage("cloudflare", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudflare") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
