// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy example '<account_id>/<policy_id>'
 * ```
 */
export class ZeroTrustAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessPolicyState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessPolicy {
        return new ZeroTrustAccessPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy';

    /**
     * Returns true if the given object is an instance of ZeroTrustAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustAccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessPolicy.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    declare public readonly approvalGroups: pulumi.Output<outputs.ZeroTrustAccessPolicyApprovalGroup[] | undefined>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    declare public readonly approvalRequired: pulumi.Output<boolean | undefined>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    declare public readonly decision: pulumi.Output<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    declare public readonly excludes: pulumi.Output<outputs.ZeroTrustAccessPolicyExclude[] | undefined>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    declare public readonly includes: pulumi.Output<outputs.ZeroTrustAccessPolicyInclude[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    declare public readonly isolationRequired: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Access policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    declare public readonly purposeJustificationPrompt: pulumi.Output<string | undefined>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    declare public readonly purposeJustificationRequired: pulumi.Output<boolean | undefined>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    declare public readonly requires: pulumi.Output<outputs.ZeroTrustAccessPolicyRequire[] | undefined>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    declare public readonly sessionDuration: pulumi.Output<string>;

    /**
     * Create a ZeroTrustAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustAccessPolicyArgs | ZeroTrustAccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustAccessPolicyState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["approvalGroups"] = state?.approvalGroups;
            resourceInputs["approvalRequired"] = state?.approvalRequired;
            resourceInputs["decision"] = state?.decision;
            resourceInputs["excludes"] = state?.excludes;
            resourceInputs["includes"] = state?.includes;
            resourceInputs["isolationRequired"] = state?.isolationRequired;
            resourceInputs["name"] = state?.name;
            resourceInputs["purposeJustificationPrompt"] = state?.purposeJustificationPrompt;
            resourceInputs["purposeJustificationRequired"] = state?.purposeJustificationRequired;
            resourceInputs["requires"] = state?.requires;
            resourceInputs["sessionDuration"] = state?.sessionDuration;
        } else {
            const args = argsOrState as ZeroTrustAccessPolicyArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.decision === undefined && !opts.urn) {
                throw new Error("Missing required property 'decision'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["approvalGroups"] = args?.approvalGroups;
            resourceInputs["approvalRequired"] = args?.approvalRequired;
            resourceInputs["decision"] = args?.decision;
            resourceInputs["excludes"] = args?.excludes;
            resourceInputs["includes"] = args?.includes;
            resourceInputs["isolationRequired"] = args?.isolationRequired;
            resourceInputs["name"] = args?.name;
            resourceInputs["purposeJustificationPrompt"] = args?.purposeJustificationPrompt;
            resourceInputs["purposeJustificationRequired"] = args?.purposeJustificationRequired;
            resourceInputs["requires"] = args?.requires;
            resourceInputs["sessionDuration"] = args?.sessionDuration;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessPolicy:AccessPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustAccessPolicy resources.
 */
export interface ZeroTrustAccessPolicyState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision?: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustAccessPolicy resource.
 */
export interface ZeroTrustAccessPolicyArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyApprovalGroup>[]>;
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: "allow", "deny", "nonIdentity", "bypass".
     */
    decision: pulumi.Input<string>;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyExclude>[]>;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * The name of the Access policy.
     */
    name: pulumi.Input<string>;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyRequire>[]>;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     */
    sessionDuration?: pulumi.Input<string>;
}
