// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class AuthenticatedOriginPulls extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticatedOriginPulls resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticatedOriginPullsState, opts?: pulumi.CustomResourceOptions): AuthenticatedOriginPulls {
        return new AuthenticatedOriginPulls(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls';

    /**
     * Returns true if the given object is an instance of AuthenticatedOriginPulls.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticatedOriginPulls {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticatedOriginPulls.__pulumiType;
    }

    /**
     * Identifier.
     */
    public /*out*/ readonly certId!: pulumi.Output<string>;
    /**
     * Status of the certificate or the association.
     * Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
     */
    public /*out*/ readonly certStatus!: pulumi.Output<string>;
    /**
     * The time when the certificate was updated.
     */
    public /*out*/ readonly certUpdatedAt!: pulumi.Output<string>;
    /**
     * The time when the certificate was uploaded.
     */
    public /*out*/ readonly certUploadedOn!: pulumi.Output<string>;
    /**
     * The hostname certificate.
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly configs!: pulumi.Output<outputs.AuthenticatedOriginPullsConfig[]>;
    /**
     * The time when the certificate was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * The date when the certificate expires.
     */
    public /*out*/ readonly expiresOn!: pulumi.Output<string>;
    /**
     * The hostname on the origin for which the client certificate uploaded will be used.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * The certificate authority that issued the certificate.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * The hostname certificate's private key.
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * The serial number on the uploaded certificate.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * The type of hash used for the certificate.
     */
    public /*out*/ readonly signature!: pulumi.Output<string>;
    /**
     * Status of the certificate or the association.
     * Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The time when the certificate was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Identifier.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a AuthenticatedOriginPulls resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticatedOriginPullsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticatedOriginPullsArgs | AuthenticatedOriginPullsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticatedOriginPullsState | undefined;
            resourceInputs["certId"] = state ? state.certId : undefined;
            resourceInputs["certStatus"] = state ? state.certStatus : undefined;
            resourceInputs["certUpdatedAt"] = state ? state.certUpdatedAt : undefined;
            resourceInputs["certUploadedOn"] = state ? state.certUploadedOn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiresOn"] = state ? state.expiresOn : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AuthenticatedOriginPullsArgs | undefined;
            if ((!args || args.configs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configs'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["certId"] = undefined /*out*/;
            resourceInputs["certStatus"] = undefined /*out*/;
            resourceInputs["certUpdatedAt"] = undefined /*out*/;
            resourceInputs["certUploadedOn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["expiresOn"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signature"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AuthenticatedOriginPulls.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthenticatedOriginPulls resources.
 */
export interface AuthenticatedOriginPullsState {
    /**
     * Identifier.
     */
    certId?: pulumi.Input<string>;
    /**
     * Status of the certificate or the association.
     * Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
     */
    certStatus?: pulumi.Input<string>;
    /**
     * The time when the certificate was updated.
     */
    certUpdatedAt?: pulumi.Input<string>;
    /**
     * The time when the certificate was uploaded.
     */
    certUploadedOn?: pulumi.Input<string>;
    /**
     * The hostname certificate.
     */
    certificate?: pulumi.Input<string>;
    configs?: pulumi.Input<pulumi.Input<inputs.AuthenticatedOriginPullsConfig>[]>;
    /**
     * The time when the certificate was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The date when the certificate expires.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * The hostname on the origin for which the client certificate uploaded will be used.
     */
    hostname?: pulumi.Input<string>;
    /**
     * The certificate authority that issued the certificate.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The hostname certificate's private key.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The serial number on the uploaded certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The type of hash used for the certificate.
     */
    signature?: pulumi.Input<string>;
    /**
     * Status of the certificate or the association.
     * Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
     */
    status?: pulumi.Input<string>;
    /**
     * The time when the certificate was updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthenticatedOriginPulls resource.
 */
export interface AuthenticatedOriginPullsArgs {
    configs: pulumi.Input<pulumi.Input<inputs.AuthenticatedOriginPullsConfig>[]>;
    /**
     * The hostname on the origin for which the client certificate uploaded will be used.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
