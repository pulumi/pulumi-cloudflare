// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare Authenticated Origin Pulls resource. An `cloudflare.AuthenticatedOriginPulls` resource is required to use Per-Zone or Per-Hostname Authenticated Origin Pulls.
 *
 * ## Example Usage
 *
 * The arguments that you provide determine which form of Authenticated Origin Pulls to use:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // Authenticated Origin Pulls
 * const myAop = new cloudflare.AuthenticatedOriginPulls("myAop", {
 *     zoneId: _var.cloudflare_zone_id,
 *     enabled: true,
 * });
 * // Per-Zone Authenticated Origin Pulls
 * const myPerZoneAopCert = new cloudflare.AuthenticatedOriginPullsCertificate("myPerZoneAopCert", {
 *     zoneId: _var.cloudflare_zone_id,
 *     certificate: "-----INSERT CERTIFICATE-----",
 *     privateKey: "-----INSERT PRIVATE KEY-----",
 *     type: "per-zone",
 * });
 * const myPerZoneAop = new cloudflare.AuthenticatedOriginPulls("myPerZoneAop", {
 *     zoneId: _var.cloudflare_zone_id,
 *     authenticatedOriginPullsCertificate: myPerZoneAopCert.id,
 *     enabled: true,
 * });
 * // Per-Hostname Authenticated Origin Pulls
 * const myPerHostnameAopCert = new cloudflare.AuthenticatedOriginPullsCertificate("myPerHostnameAopCert", {
 *     zoneId: _var.cloudflare_zone_id,
 *     certificate: "-----INSERT CERTIFICATE-----",
 *     privateKey: "-----INSERT PRIVATE KEY-----",
 *     type: "per-hostname",
 * });
 * const myPerHostnameAop = new cloudflare.AuthenticatedOriginPulls("myPerHostnameAop", {
 *     zoneId: _var.cloudflare_zone_id,
 *     authenticatedOriginPullsCertificate: myPerHostnameAopCert.id,
 *     hostname: "aop.example.com",
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Authenticated Origin Pull configuration can be imported using a composite ID formed of the zone ID, the form of Authenticated Origin Pulls, and the certificate ID, with each section filled or left blank e.g. # Import Authenticated Origin Pull configuration
 *
 * ```sh
 *  $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls my_aop 023e105f4ecef8ad9ca31a8372d0c353//
 * ```
 *
 * # Import Per-Zone Authenticated Origin Pull configuration
 *
 * ```sh
 *  $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls my_per_zone_aop 023e105f4ecef8ad9ca31a8372d0c353/2458ce5a-0c35-4c7f-82c7-8e9487d3ff60/
 * ```
 *
 * # Import Per-Hostname Authenticated Origin Pull configuration
 *
 * ```sh
 *  $ pulumi import cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls my_per_hostname_aop 023e105f4ecef8ad9ca31a8372d0c353/2458ce5a-0c35-4c7f-82c7-8e9487d3ff60/aop.example.com
 * ```
 */
export class AuthenticatedOriginPulls extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticatedOriginPulls resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticatedOriginPullsState, opts?: pulumi.CustomResourceOptions): AuthenticatedOriginPulls {
        return new AuthenticatedOriginPulls(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls';

    /**
     * Returns true if the given object is an instance of AuthenticatedOriginPulls.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticatedOriginPulls {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticatedOriginPulls.__pulumiType;
    }

    /**
     * The id of an uploaded Authenticated Origin Pulls certificate. If no hostname is provided, this certificate will be used zone wide as Per-Zone Authenticated Origin Pulls.
     */
    public readonly authenticatedOriginPullsCertificate!: pulumi.Output<string | undefined>;
    /**
     * Whether or not to enable Authenticated Origin Pulls on the given zone or hostname.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Specify a hostname to enable Per-Hostname Authenticated Origin Pulls on, using the provided certificate.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * The zone ID to upload the certificate to.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a AuthenticatedOriginPulls resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticatedOriginPullsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticatedOriginPullsArgs | AuthenticatedOriginPullsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AuthenticatedOriginPullsState | undefined;
            inputs["authenticatedOriginPullsCertificate"] = state ? state.authenticatedOriginPullsCertificate : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AuthenticatedOriginPullsArgs | undefined;
            if (!args || args.enabled === undefined) {
                throw new Error("Missing required property 'enabled'");
            }
            if (!args || args.zoneId === undefined) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["authenticatedOriginPullsCertificate"] = args ? args.authenticatedOriginPullsCertificate : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AuthenticatedOriginPulls.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuthenticatedOriginPulls resources.
 */
export interface AuthenticatedOriginPullsState {
    /**
     * The id of an uploaded Authenticated Origin Pulls certificate. If no hostname is provided, this certificate will be used zone wide as Per-Zone Authenticated Origin Pulls.
     */
    readonly authenticatedOriginPullsCertificate?: pulumi.Input<string>;
    /**
     * Whether or not to enable Authenticated Origin Pulls on the given zone or hostname.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * Specify a hostname to enable Per-Hostname Authenticated Origin Pulls on, using the provided certificate.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The zone ID to upload the certificate to.
     */
    readonly zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthenticatedOriginPulls resource.
 */
export interface AuthenticatedOriginPullsArgs {
    /**
     * The id of an uploaded Authenticated Origin Pulls certificate. If no hostname is provided, this certificate will be used zone wide as Per-Zone Authenticated Origin Pulls.
     */
    readonly authenticatedOriginPullsCertificate?: pulumi.Input<string>;
    /**
     * Whether or not to enable Authenticated Origin Pulls on the given zone or hostname.
     */
    readonly enabled: pulumi.Input<boolean>;
    /**
     * Specify a hostname to enable Per-Hostname Authenticated Origin Pulls on, using the provided certificate.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The zone ID to upload the certificate to.
     */
    readonly zoneId: pulumi.Input<string>;
}
