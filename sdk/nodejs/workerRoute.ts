// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare worker route resource. A route will also require a `cloudflare_worker_script`.
 * 
 * ## Example Usage
 * 
 * __NOTE:__ This is for non-enterprise accounts where there is one script per zone. The `enabled` flag determines whether to run the worker script for a request that matches the specified `pattern`. For enterprise accounts, see the "multi-script" example below.
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * 
 * const myScript = new cloudflare.WorkerScript("my_script", {});
 * // Enables the zone's worker script for all URLs that match `example.com/*`
 * const myRoute = new cloudflare.WorkerRoute("my_route", {
 *     enabled: true,
 *     pattern: "example.com/*",
 *     zone: "example.com",
 * }, {dependsOn: [myScript]});
 * ```
 * 
 * ## Multi-script example usage
 * 
 * __NOTE:__ This is only for enterprise accounts. With multi-script, each route points to a particular script instead of setting an `enabled` flag
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * 
 * const myScript = new cloudflare.WorkerScript("my_script", {});
 * // Runs the specified worker script for all URLs that match `example.com/*`
 * const myRoute = new cloudflare.WorkerRoute("my_route", {
 *     pattern: "example.com/*",
 *     scriptName: myScript.name,
 *     zone: "example.com",
 * });
 * ```
 */
export class WorkerRoute extends pulumi.CustomResource {
    /**
     * Get an existing WorkerRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerRouteState, opts?: pulumi.CustomResourceOptions): WorkerRoute {
        return new WorkerRoute(name, <any>state, { ...opts, id: id });
    }

    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly multiScript!: pulumi.Output<boolean>;
    /**
     * The [route pattern](https://developers.cloudflare.com/workers/api/route-matching/)
     * * `enabled` (For single-script accounts only) Whether to run the worker script for requests that match the route pattern. Default is `false`
     * * `script_name` (For multi-script accounts only) Which worker script to run for requests that match the route pattern. If `script_name` is empty, workers will be skipped for matching requests.
     */
    public readonly pattern!: pulumi.Output<string>;
    public readonly scriptName!: pulumi.Output<string | undefined>;
    /**
     * The zone to add the route to.
     */
    public readonly zone!: pulumi.Output<string>;
    /**
     * The zone id of the route
     */
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a WorkerRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkerRouteArgs | WorkerRouteState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as WorkerRouteState | undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["multiScript"] = state ? state.multiScript : undefined;
            inputs["pattern"] = state ? state.pattern : undefined;
            inputs["scriptName"] = state ? state.scriptName : undefined;
            inputs["zone"] = state ? state.zone : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as WorkerRouteArgs | undefined;
            if (!args || args.pattern === undefined) {
                throw new Error("Missing required property 'pattern'");
            }
            if (!args || args.zone === undefined) {
                throw new Error("Missing required property 'zone'");
            }
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["pattern"] = args ? args.pattern : undefined;
            inputs["scriptName"] = args ? args.scriptName : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["multiScript"] = undefined /*out*/;
            inputs["zoneId"] = undefined /*out*/;
        }
        super("cloudflare:index/workerRoute:WorkerRoute", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkerRoute resources.
 */
export interface WorkerRouteState {
    readonly enabled?: pulumi.Input<boolean>;
    readonly multiScript?: pulumi.Input<boolean>;
    /**
     * The [route pattern](https://developers.cloudflare.com/workers/api/route-matching/)
     * * `enabled` (For single-script accounts only) Whether to run the worker script for requests that match the route pattern. Default is `false`
     * * `script_name` (For multi-script accounts only) Which worker script to run for requests that match the route pattern. If `script_name` is empty, workers will be skipped for matching requests.
     */
    readonly pattern?: pulumi.Input<string>;
    readonly scriptName?: pulumi.Input<string>;
    /**
     * The zone to add the route to.
     */
    readonly zone?: pulumi.Input<string>;
    /**
     * The zone id of the route
     */
    readonly zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkerRoute resource.
 */
export interface WorkerRouteArgs {
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The [route pattern](https://developers.cloudflare.com/workers/api/route-matching/)
     * * `enabled` (For single-script accounts only) Whether to run the worker script for requests that match the route pattern. Default is `false`
     * * `script_name` (For multi-script accounts only) Which worker script to run for requests that match the route pattern. If `script_name` is empty, workers will be skipped for matching requests.
     */
    readonly pattern: pulumi.Input<string>;
    readonly scriptName?: pulumi.Input<string>;
    /**
     * The zone to add the route to.
     */
    readonly zone: pulumi.Input<string>;
}
