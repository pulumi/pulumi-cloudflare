// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersScripts = cloudflare.getWorkersScripts({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     tags: "production:yes,staging:no",
 * });
 * ```
 */
export function getWorkersScripts(args: GetWorkersScriptsArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkersScriptsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getWorkersScripts:getWorkersScripts", {
        "accountId": args.accountId,
        "maxItems": args.maxItems,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersScripts.
 */
export interface GetWorkersScriptsArgs {
    /**
     * Identifier.
     */
    accountId: string;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * Filter scripts by tags. Format: comma-separated list of tag:allowed pairs where allowed is 'yes' or 'no'.
     */
    tags?: string;
}

/**
 * A collection of values returned by getWorkersScripts.
 */
export interface GetWorkersScriptsResult {
    /**
     * Identifier.
     */
    readonly accountId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetWorkersScriptsResult[];
    /**
     * Filter scripts by tags. Format: comma-separated list of tag:allowed pairs where allowed is 'yes' or 'no'.
     */
    readonly tags?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersScripts = cloudflare.getWorkersScripts({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     tags: "production:yes,staging:no",
 * });
 * ```
 */
export function getWorkersScriptsOutput(args: GetWorkersScriptsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWorkersScriptsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getWorkersScripts:getWorkersScripts", {
        "accountId": args.accountId,
        "maxItems": args.maxItems,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersScripts.
 */
export interface GetWorkersScriptsOutputArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * Filter scripts by tags. Format: comma-separated list of tag:allowed pairs where allowed is 'yes' or 'no'.
     */
    tags?: pulumi.Input<string>;
}
