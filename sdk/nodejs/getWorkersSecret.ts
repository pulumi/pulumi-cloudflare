// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersSecret = cloudflare.getWorkersSecret({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     dispatchNamespace: "my-dispatch-namespace",
 *     scriptName: "this-is_my_script-01",
 *     secretName: "mySecret",
 * });
 * ```
 */
export function getWorkersSecret(args: GetWorkersSecretArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkersSecretResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getWorkersSecret:getWorkersSecret", {
        "accountId": args.accountId,
        "dispatchNamespace": args.dispatchNamespace,
        "scriptName": args.scriptName,
        "secretName": args.secretName,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersSecret.
 */
export interface GetWorkersSecretArgs {
    /**
     * Identifier
     */
    accountId: string;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    dispatchNamespace: string;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName: string;
    /**
     * A JavaScript variable name for the secret binding.
     */
    secretName?: string;
}

/**
 * A collection of values returned by getWorkersSecret.
 */
export interface GetWorkersSecretResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    readonly dispatchNamespace: string;
    /**
     * A JavaScript variable name for the secret binding.
     */
    readonly id: string;
    /**
     * The name of this secret, this is what will be used to access it inside the Worker.
     */
    readonly name: string;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    readonly scriptName: string;
    /**
     * A JavaScript variable name for the secret binding.
     */
    readonly secretName?: string;
    /**
     * The type of secret.
     * Available values: "secretText".
     */
    readonly type: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersSecret = cloudflare.getWorkersSecret({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     dispatchNamespace: "my-dispatch-namespace",
 *     scriptName: "this-is_my_script-01",
 *     secretName: "mySecret",
 * });
 * ```
 */
export function getWorkersSecretOutput(args: GetWorkersSecretOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWorkersSecretResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getWorkersSecret:getWorkersSecret", {
        "accountId": args.accountId,
        "dispatchNamespace": args.dispatchNamespace,
        "scriptName": args.scriptName,
        "secretName": args.secretName,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersSecret.
 */
export interface GetWorkersSecretOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    dispatchNamespace: pulumi.Input<string>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName: pulumi.Input<string>;
    /**
     * A JavaScript variable name for the secret binding.
     */
    secretName?: pulumi.Input<string>;
}
