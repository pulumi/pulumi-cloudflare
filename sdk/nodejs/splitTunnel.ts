// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
 * include or exclude lists of routes from the WARP client's tunnel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // Excluding *.example.com from WARP routes
 * const exampleSplitTunnelExclude = new cloudflare.SplitTunnel("example_split_tunnel_exclude", {
 *     accountId: "1d5fdc9e88c8a8c4518b068cd94331fe",
 *     mode: "exclude",
 *     tunnels: [{
 *         description: "example domain",
 *         host: "*.example.com",
 *     }],
 * });
 * // Including *.example.com in WARP routes
 * const exampleSplitTunnelInclude = new cloudflare.SplitTunnel("example_split_tunnel_include", {
 *     accountId: "1d5fdc9e88c8a8c4518b068cd94331fe",
 *     mode: "include",
 *     tunnels: [{
 *         description: "example domain",
 *         host: "*.example.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Split Tunnels can be imported using the account identifer and mode.
 *
 * ```sh
 *  $ pulumi import cloudflare:index/splitTunnel:SplitTunnel example 1d5fdc9e88c8a8c4518b068cd94331fe/exclude
 * ```
 */
export class SplitTunnel extends pulumi.CustomResource {
    /**
     * Get an existing SplitTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SplitTunnelState, opts?: pulumi.CustomResourceOptions): SplitTunnel {
        return new SplitTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/splitTunnel:SplitTunnel';

    /**
     * Returns true if the given object is an instance of SplitTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SplitTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SplitTunnel.__pulumiType;
    }

    /**
     * The account to which the device posture rule should be added.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The split tunnel mode. Valid values are `include` or `exclude`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The value of the tunnel attributes (refer to the nested schema).
     */
    public readonly tunnels!: pulumi.Output<outputs.SplitTunnelTunnel[]>;

    /**
     * Create a SplitTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SplitTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SplitTunnelArgs | SplitTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SplitTunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["tunnels"] = state ? state.tunnels : undefined;
        } else {
            const args = argsOrState as SplitTunnelArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.tunnels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnels'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["tunnels"] = args ? args.tunnels : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SplitTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SplitTunnel resources.
 */
export interface SplitTunnelState {
    /**
     * The account to which the device posture rule should be added.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The split tunnel mode. Valid values are `include` or `exclude`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes (refer to the nested schema).
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.SplitTunnelTunnel>[]>;
}

/**
 * The set of arguments for constructing a SplitTunnel resource.
 */
export interface SplitTunnelArgs {
    /**
     * The account to which the device posture rule should be added.
     */
    accountId: pulumi.Input<string>;
    /**
     * The split tunnel mode. Valid values are `include` or `exclude`.
     */
    mode: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes (refer to the nested schema).
     */
    tunnels: pulumi.Input<pulumi.Input<inputs.SplitTunnelTunnel>[]>;
}
