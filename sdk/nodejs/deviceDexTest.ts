// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDexTest = new cloudflare.ZeroTrustDexTest("example_zero_trust_dex_test", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     data: {
 *         host: "https://dash.cloudflare.com",
 *         kind: "http",
 *         method: "GET",
 *     },
 *     enabled: true,
 *     interval: "30m",
 *     name: "HTTP dash health check",
 *     description: "Checks the dash endpoint every 30 minutes",
 *     targetPolicies: [{
 *         id: "id",
 *         "default": true,
 *         name: "name",
 *     }],
 *     targeted: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/deviceDexTest:DeviceDexTest example '<account_id>/<dex_test_id>'
 * ```
 *
 * @deprecated cloudflare.index/devicedextest.DeviceDexTest has been deprecated in favor of cloudflare.index/zerotrustdextest.ZeroTrustDexTest
 */
export class DeviceDexTest extends pulumi.CustomResource {
    /**
     * Get an existing DeviceDexTest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceDexTestState, opts?: pulumi.CustomResourceOptions): DeviceDexTest {
        pulumi.log.warn("DeviceDexTest is deprecated: cloudflare.index/devicedextest.DeviceDexTest has been deprecated in favor of cloudflare.index/zerotrustdextest.ZeroTrustDexTest")
        return new DeviceDexTest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/deviceDexTest:DeviceDexTest';

    /**
     * Returns true if the given object is an instance of DeviceDexTest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceDexTest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceDexTest.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    public readonly data!: pulumi.Output<outputs.DeviceDexTestData>;
    /**
     * Additional details about the test.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Determines whether or not the test is active.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * How often the test will run.
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Device settings profiles targeted by this test
     */
    public readonly targetPolicies!: pulumi.Output<outputs.DeviceDexTestTargetPolicy[]>;
    public readonly targeted!: pulumi.Output<boolean | undefined>;
    /**
     * The unique identifier for the test.
     */
    public /*out*/ readonly testId!: pulumi.Output<string>;

    /**
     * Create a DeviceDexTest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/devicedextest.DeviceDexTest has been deprecated in favor of cloudflare.index/zerotrustdextest.ZeroTrustDexTest */
    constructor(name: string, args: DeviceDexTestArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/devicedextest.DeviceDexTest has been deprecated in favor of cloudflare.index/zerotrustdextest.ZeroTrustDexTest */
    constructor(name: string, argsOrState?: DeviceDexTestArgs | DeviceDexTestState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("DeviceDexTest is deprecated: cloudflare.index/devicedextest.DeviceDexTest has been deprecated in favor of cloudflare.index/zerotrustdextest.ZeroTrustDexTest")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceDexTestState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["targetPolicies"] = state ? state.targetPolicies : undefined;
            resourceInputs["targeted"] = state ? state.targeted : undefined;
            resourceInputs["testId"] = state ? state.testId : undefined;
        } else {
            const args = argsOrState as DeviceDexTestArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetPolicies"] = args ? args.targetPolicies : undefined;
            resourceInputs["targeted"] = args ? args.targeted : undefined;
            resourceInputs["testId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/deviceDexTest:DeviceDexTest" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(DeviceDexTest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceDexTest resources.
 */
export interface DeviceDexTestState {
    accountId?: pulumi.Input<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    data?: pulumi.Input<inputs.DeviceDexTestData>;
    /**
     * Additional details about the test.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether or not the test is active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * How often the test will run.
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * Device settings profiles targeted by this test
     */
    targetPolicies?: pulumi.Input<pulumi.Input<inputs.DeviceDexTestTargetPolicy>[]>;
    targeted?: pulumi.Input<boolean>;
    /**
     * The unique identifier for the test.
     */
    testId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeviceDexTest resource.
 */
export interface DeviceDexTestArgs {
    accountId: pulumi.Input<string>;
    /**
     * The configuration object which contains the details for the WARP client to conduct the test.
     */
    data: pulumi.Input<inputs.DeviceDexTestData>;
    /**
     * Additional details about the test.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether or not the test is active.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * How often the test will run.
     */
    interval: pulumi.Input<string>;
    /**
     * The name of the DEX test. Must be unique.
     */
    name: pulumi.Input<string>;
    /**
     * Device settings profiles targeted by this test
     */
    targetPolicies?: pulumi.Input<pulumi.Input<inputs.DeviceDexTestTargetPolicy>[]>;
    targeted?: pulumi.Input<boolean>;
}
