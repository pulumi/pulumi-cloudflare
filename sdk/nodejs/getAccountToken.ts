// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleAccountToken = cloudflare.getAccountToken({
 *     accountId: "eb78d65290b24279ba6f44721b3ea3c4",
 *     tokenId: "ed17574386854bf78a67040be0a770b0",
 * });
 * ```
 */
export function getAccountToken(args: GetAccountTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getAccountToken:getAccountToken", {
        "accountId": args.accountId,
        "filter": args.filter,
        "tokenId": args.tokenId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAccountToken.
 */
export interface GetAccountTokenArgs {
    /**
     * Account identifier tag.
     */
    accountId: string;
    filter?: inputs.GetAccountTokenFilter;
    /**
     * Token identifier tag.
     */
    tokenId?: string;
}

/**
 * A collection of values returned by getAccountToken.
 */
export interface GetAccountTokenResult {
    /**
     * Account identifier tag.
     */
    readonly accountId: string;
    readonly condition: outputs.GetAccountTokenCondition;
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     */
    readonly expiresOn: string;
    readonly filter?: outputs.GetAccountTokenFilter;
    /**
     * Token identifier tag.
     */
    readonly id: string;
    /**
     * The time on which the token was created.
     */
    readonly issuedOn: string;
    /**
     * Last time the token was used.
     */
    readonly lastUsedOn: string;
    /**
     * Last time the token was modified.
     */
    readonly modifiedOn: string;
    /**
     * Token name.
     */
    readonly name: string;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    readonly notBefore: string;
    /**
     * List of access policies assigned to the token.
     */
    readonly policies: outputs.GetAccountTokenPolicy[];
    /**
     * Status of the token.
     * Available values: "active", "disabled", "expired".
     */
    readonly status: string;
    /**
     * Token identifier tag.
     */
    readonly tokenId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleAccountToken = cloudflare.getAccountToken({
 *     accountId: "eb78d65290b24279ba6f44721b3ea3c4",
 *     tokenId: "ed17574386854bf78a67040be0a770b0",
 * });
 * ```
 */
export function getAccountTokenOutput(args: GetAccountTokenOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAccountTokenResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getAccountToken:getAccountToken", {
        "accountId": args.accountId,
        "filter": args.filter,
        "tokenId": args.tokenId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAccountToken.
 */
export interface GetAccountTokenOutputArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.GetAccountTokenFilterArgs>;
    /**
     * Token identifier tag.
     */
    tokenId?: pulumi.Input<string>;
}
