// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleUserAgentBlockingRule = cloudflare.getUserAgentBlockingRule({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     uaRuleId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export function getUserAgentBlockingRule(args: GetUserAgentBlockingRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetUserAgentBlockingRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getUserAgentBlockingRule:getUserAgentBlockingRule", {
        "filter": args.filter,
        "uaRuleId": args.uaRuleId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserAgentBlockingRule.
 */
export interface GetUserAgentBlockingRuleArgs {
    filter?: inputs.GetUserAgentBlockingRuleFilter;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    uaRuleId?: string;
    /**
     * Defines an identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getUserAgentBlockingRule.
 */
export interface GetUserAgentBlockingRuleResult {
    /**
     * The configuration object for the current rule.
     */
    readonly configuration: outputs.GetUserAgentBlockingRuleConfiguration;
    /**
     * An informative summary of the rule.
     */
    readonly description: string;
    readonly filter?: outputs.GetUserAgentBlockingRuleFilter;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    readonly id: string;
    /**
     * The action to apply to a matched request.
     * Available values: "block", "challenge", "js*challenge", "managed*challenge".
     */
    readonly mode: string;
    /**
     * When true, indicates that the rule is currently paused.
     */
    readonly paused: boolean;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    readonly uaRuleId?: string;
    /**
     * Defines an identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleUserAgentBlockingRule = cloudflare.getUserAgentBlockingRule({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     uaRuleId: "372e67954025e0ba6aaa6d586b9e0b59",
 * });
 * ```
 */
export function getUserAgentBlockingRuleOutput(args: GetUserAgentBlockingRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetUserAgentBlockingRuleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getUserAgentBlockingRule:getUserAgentBlockingRule", {
        "filter": args.filter,
        "uaRuleId": args.uaRuleId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getUserAgentBlockingRule.
 */
export interface GetUserAgentBlockingRuleOutputArgs {
    filter?: pulumi.Input<inputs.GetUserAgentBlockingRuleFilterArgs>;
    /**
     * The unique identifier of the User Agent Blocking rule.
     */
    uaRuleId?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
