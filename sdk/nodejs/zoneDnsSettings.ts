// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneDnsSettings = new cloudflare.ZoneDnsSettings("example_zone_dns_settings", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     flattenAllCnames: false,
 *     foundationDns: false,
 *     internalDns: {
 *         reference_zone_id: "reference_zone_id",
 *     },
 *     multiProvider: false,
 *     nameservers: {
 *         ns_set: 1,
 *         type: "cloudflare.standard",
 *     },
 *     nsTtl: 86400,
 *     secondaryOverrides: false,
 *     soa: {
 *         expire: 604800,
 *         min_ttl: 1800,
 *         mname: "kristina.ns.cloudflare.com",
 *         refresh: 10000,
 *         retry: 2400,
 *         rname: "admin.example.com",
 *         ttl: 3600,
 *     },
 *     zoneMode: "dns_only",
 * });
 * ```
 */
export class ZoneDnsSettings extends pulumi.CustomResource {
    /**
     * Get an existing ZoneDnsSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneDnsSettingsState, opts?: pulumi.CustomResourceOptions): ZoneDnsSettings {
        return new ZoneDnsSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zoneDnsSettings:ZoneDnsSettings';

    /**
     * Returns true if the given object is an instance of ZoneDnsSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneDnsSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneDnsSettings.__pulumiType;
    }

    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    declare public readonly flattenAllCnames: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    declare public readonly foundationDns: pulumi.Output<boolean | undefined>;
    /**
     * Settings for this internal zone.
     */
    declare public readonly internalDns: pulumi.Output<outputs.ZoneDnsSettingsInternalDns | undefined>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    declare public readonly multiProvider: pulumi.Output<boolean | undefined>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    declare public readonly nameservers: pulumi.Output<outputs.ZoneDnsSettingsNameservers | undefined>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    declare public readonly nsTtl: pulumi.Output<number | undefined>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    declare public readonly secondaryOverrides: pulumi.Output<boolean | undefined>;
    /**
     * Components of the zone's SOA record.
     */
    declare public readonly soa: pulumi.Output<outputs.ZoneDnsSettingsSoa | undefined>;
    /**
     * Identifier.
     */
    declare public readonly zoneId: pulumi.Output<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    declare public readonly zoneMode: pulumi.Output<string | undefined>;

    /**
     * Create a ZoneDnsSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneDnsSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneDnsSettingsArgs | ZoneDnsSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneDnsSettingsState | undefined;
            resourceInputs["flattenAllCnames"] = state?.flattenAllCnames;
            resourceInputs["foundationDns"] = state?.foundationDns;
            resourceInputs["internalDns"] = state?.internalDns;
            resourceInputs["multiProvider"] = state?.multiProvider;
            resourceInputs["nameservers"] = state?.nameservers;
            resourceInputs["nsTtl"] = state?.nsTtl;
            resourceInputs["secondaryOverrides"] = state?.secondaryOverrides;
            resourceInputs["soa"] = state?.soa;
            resourceInputs["zoneId"] = state?.zoneId;
            resourceInputs["zoneMode"] = state?.zoneMode;
        } else {
            const args = argsOrState as ZoneDnsSettingsArgs | undefined;
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["flattenAllCnames"] = args?.flattenAllCnames;
            resourceInputs["foundationDns"] = args?.foundationDns;
            resourceInputs["internalDns"] = args?.internalDns;
            resourceInputs["multiProvider"] = args?.multiProvider;
            resourceInputs["nameservers"] = args?.nameservers;
            resourceInputs["nsTtl"] = args?.nsTtl;
            resourceInputs["secondaryOverrides"] = args?.secondaryOverrides;
            resourceInputs["soa"] = args?.soa;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["zoneMode"] = args?.zoneMode;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneDnsSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneDnsSettings resources.
 */
export interface ZoneDnsSettingsState {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    flattenAllCnames?: pulumi.Input<boolean>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    foundationDns?: pulumi.Input<boolean>;
    /**
     * Settings for this internal zone.
     */
    internalDns?: pulumi.Input<inputs.ZoneDnsSettingsInternalDns>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    multiProvider?: pulumi.Input<boolean>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    nameservers?: pulumi.Input<inputs.ZoneDnsSettingsNameservers>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    nsTtl?: pulumi.Input<number>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    secondaryOverrides?: pulumi.Input<boolean>;
    /**
     * Components of the zone's SOA record.
     */
    soa?: pulumi.Input<inputs.ZoneDnsSettingsSoa>;
    /**
     * Identifier.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    zoneMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneDnsSettings resource.
 */
export interface ZoneDnsSettingsArgs {
    /**
     * Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     */
    flattenAllCnames?: pulumi.Input<boolean>;
    /**
     * Whether to enable Foundation DNS Advanced Nameservers on the zone.
     */
    foundationDns?: pulumi.Input<boolean>;
    /**
     * Settings for this internal zone.
     */
    internalDns?: pulumi.Input<inputs.ZoneDnsSettingsInternalDns>;
    /**
     * Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     */
    multiProvider?: pulumi.Input<boolean>;
    /**
     * Settings determining the nameservers through which the zone should be available.
     */
    nameservers?: pulumi.Input<inputs.ZoneDnsSettingsNameservers>;
    /**
     * The time to live (TTL) of the zone's nameserver (NS) records.
     */
    nsTtl?: pulumi.Input<number>;
    /**
     * Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     */
    secondaryOverrides?: pulumi.Input<boolean>;
    /**
     * Components of the zone's SOA record.
     */
    soa?: pulumi.Input<inputs.ZoneDnsSettingsSoa>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
    /**
     * Whether the zone mode is a regular or CDN/DNS only zone.
     * Available values: "standard", "cdn*only", "dns*only".
     */
    zoneMode?: pulumi.Input<string>;
}
