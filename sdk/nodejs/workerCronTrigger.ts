// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerCronTrigger:WorkerCronTrigger example '<account_id>/<script_name>'
 * ```
 *
 * @deprecated cloudflare.index/workercrontrigger.WorkerCronTrigger has been deprecated in favor of cloudflare.index/workerscrontrigger.WorkersCronTrigger
 */
export class WorkerCronTrigger extends pulumi.CustomResource {
    /**
     * Get an existing WorkerCronTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerCronTriggerState, opts?: pulumi.CustomResourceOptions): WorkerCronTrigger {
        pulumi.log.warn("WorkerCronTrigger is deprecated: cloudflare.index/workercrontrigger.WorkerCronTrigger has been deprecated in favor of cloudflare.index/workerscrontrigger.WorkersCronTrigger")
        return new WorkerCronTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/workerCronTrigger:WorkerCronTrigger';

    /**
     * Returns true if the given object is an instance of WorkerCronTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkerCronTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerCronTrigger.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    declare public readonly schedules: pulumi.Output<outputs.WorkerCronTriggerSchedule[]>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    declare public readonly scriptName: pulumi.Output<string>;

    /**
     * Create a WorkerCronTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/workercrontrigger.WorkerCronTrigger has been deprecated in favor of cloudflare.index/workerscrontrigger.WorkersCronTrigger */
    constructor(name: string, args: WorkerCronTriggerArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/workercrontrigger.WorkerCronTrigger has been deprecated in favor of cloudflare.index/workerscrontrigger.WorkersCronTrigger */
    constructor(name: string, argsOrState?: WorkerCronTriggerArgs | WorkerCronTriggerState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("WorkerCronTrigger is deprecated: cloudflare.index/workercrontrigger.WorkerCronTrigger has been deprecated in favor of cloudflare.index/workerscrontrigger.WorkersCronTrigger")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkerCronTriggerState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["schedules"] = state?.schedules;
            resourceInputs["scriptName"] = state?.scriptName;
        } else {
            const args = argsOrState as WorkerCronTriggerArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.schedules === undefined && !opts.urn) {
                throw new Error("Missing required property 'schedules'");
            }
            if (args?.scriptName === undefined && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["schedules"] = args?.schedules;
            resourceInputs["scriptName"] = args?.scriptName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/workerCronTrigger:WorkerCronTrigger" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkerCronTrigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkerCronTrigger resources.
 */
export interface WorkerCronTriggerState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.WorkerCronTriggerSchedule>[]>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkerCronTrigger resource.
 */
export interface WorkerCronTriggerArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.WorkerCronTriggerSchedule>[]>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName: pulumi.Input<string>;
}
