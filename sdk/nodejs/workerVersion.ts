// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerVersion:WorkerVersion example '<account_id>/<worker_id>/<version_id>'
 * ```
 */
export class WorkerVersion extends pulumi.CustomResource {
    /**
     * Get an existing WorkerVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerVersionState, opts?: pulumi.CustomResourceOptions): WorkerVersion {
        return new WorkerVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/workerVersion:WorkerVersion';

    /**
     * Returns true if the given object is an instance of WorkerVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkerVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerVersion.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Metadata about the version.
     */
    declare public readonly annotations: pulumi.Output<outputs.WorkerVersionAnnotations>;
    /**
     * Configuration for assets within a Worker.
     */
    declare public readonly assets: pulumi.Output<outputs.WorkerVersionAssets | undefined>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    declare public readonly bindings: pulumi.Output<outputs.WorkerVersionBinding[] | undefined>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    declare public readonly compatibilityDate: pulumi.Output<string | undefined>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    declare public readonly compatibilityFlags: pulumi.Output<string[]>;
    /**
     * When the version was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Resource limits enforced at runtime.
     */
    declare public readonly limits: pulumi.Output<outputs.WorkerVersionLimits>;
    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     */
    declare public readonly mainModule: pulumi.Output<string | undefined>;
    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     */
    declare public readonly migrations: pulumi.Output<outputs.WorkerVersionMigrations | undefined>;
    /**
     * Code, sourcemaps, and other content used at runtime.
     *
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     */
    declare public readonly modules: pulumi.Output<outputs.WorkerVersionModule[] | undefined>;
    /**
     * The integer version number, starting from one.
     */
    declare public /*out*/ readonly number: pulumi.Output<number>;
    /**
     * Placement settings for the version.
     */
    declare public readonly placement: pulumi.Output<outputs.WorkerVersionPlacement | undefined>;
    /**
     * The client used to create the version.
     */
    declare public /*out*/ readonly source: pulumi.Output<string>;
    /**
     * Usage model for the version.
     * Available values: "standard", "bundled", "unbound".
     *
     * @deprecated This attribute is deprecated.
     */
    declare public readonly usageModel: pulumi.Output<string>;
    /**
     * Identifier for the Worker, which can be ID or name.
     */
    declare public readonly workerId: pulumi.Output<string>;

    /**
     * Create a WorkerVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkerVersionArgs | WorkerVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkerVersionState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["assets"] = state?.assets;
            resourceInputs["bindings"] = state?.bindings;
            resourceInputs["compatibilityDate"] = state?.compatibilityDate;
            resourceInputs["compatibilityFlags"] = state?.compatibilityFlags;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["limits"] = state?.limits;
            resourceInputs["mainModule"] = state?.mainModule;
            resourceInputs["migrations"] = state?.migrations;
            resourceInputs["modules"] = state?.modules;
            resourceInputs["number"] = state?.number;
            resourceInputs["placement"] = state?.placement;
            resourceInputs["source"] = state?.source;
            resourceInputs["usageModel"] = state?.usageModel;
            resourceInputs["workerId"] = state?.workerId;
        } else {
            const args = argsOrState as WorkerVersionArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.workerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workerId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["assets"] = args?.assets;
            resourceInputs["bindings"] = args?.bindings;
            resourceInputs["compatibilityDate"] = args?.compatibilityDate;
            resourceInputs["compatibilityFlags"] = args?.compatibilityFlags;
            resourceInputs["limits"] = args?.limits;
            resourceInputs["mainModule"] = args?.mainModule;
            resourceInputs["migrations"] = args?.migrations;
            resourceInputs["modules"] = args?.modules;
            resourceInputs["placement"] = args?.placement;
            resourceInputs["usageModel"] = args?.usageModel;
            resourceInputs["workerId"] = args?.workerId;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["number"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkerVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkerVersion resources.
 */
export interface WorkerVersionState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Metadata about the version.
     */
    annotations?: pulumi.Input<inputs.WorkerVersionAnnotations>;
    /**
     * Configuration for assets within a Worker.
     */
    assets?: pulumi.Input<inputs.WorkerVersionAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerVersionBinding>[]>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When the version was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Resource limits enforced at runtime.
     */
    limits?: pulumi.Input<inputs.WorkerVersionLimits>;
    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     */
    mainModule?: pulumi.Input<string>;
    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     */
    migrations?: pulumi.Input<inputs.WorkerVersionMigrations>;
    /**
     * Code, sourcemaps, and other content used at runtime.
     *
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     */
    modules?: pulumi.Input<pulumi.Input<inputs.WorkerVersionModule>[]>;
    /**
     * The integer version number, starting from one.
     */
    number?: pulumi.Input<number>;
    /**
     * Placement settings for the version.
     */
    placement?: pulumi.Input<inputs.WorkerVersionPlacement>;
    /**
     * The client used to create the version.
     */
    source?: pulumi.Input<string>;
    /**
     * Usage model for the version.
     * Available values: "standard", "bundled", "unbound".
     *
     * @deprecated This attribute is deprecated.
     */
    usageModel?: pulumi.Input<string>;
    /**
     * Identifier for the Worker, which can be ID or name.
     */
    workerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkerVersion resource.
 */
export interface WorkerVersionArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Metadata about the version.
     */
    annotations?: pulumi.Input<inputs.WorkerVersionAnnotations>;
    /**
     * Configuration for assets within a Worker.
     */
    assets?: pulumi.Input<inputs.WorkerVersionAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerVersionBinding>[]>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resource limits enforced at runtime.
     */
    limits?: pulumi.Input<inputs.WorkerVersionLimits>;
    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     */
    mainModule?: pulumi.Input<string>;
    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     */
    migrations?: pulumi.Input<inputs.WorkerVersionMigrations>;
    /**
     * Code, sourcemaps, and other content used at runtime.
     *
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     */
    modules?: pulumi.Input<pulumi.Input<inputs.WorkerVersionModule>[]>;
    /**
     * Placement settings for the version.
     */
    placement?: pulumi.Input<inputs.WorkerVersionPlacement>;
    /**
     * Usage model for the version.
     * Available values: "standard", "bundled", "unbound".
     *
     * @deprecated This attribute is deprecated.
     */
    usageModel?: pulumi.Input<string>;
    /**
     * Identifier for the Worker, which can be ID or name.
     */
    workerId: pulumi.Input<string>;
}
