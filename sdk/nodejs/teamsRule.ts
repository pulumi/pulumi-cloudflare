// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/teamsRule:TeamsRule example '<account_id>/<rule_id>'
 * ```
 *
 * @deprecated cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy
 */
export class TeamsRule extends pulumi.CustomResource {
    /**
     * Get an existing TeamsRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamsRuleState, opts?: pulumi.CustomResourceOptions): TeamsRule {
        pulumi.log.warn("TeamsRule is deprecated: cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy")
        return new TeamsRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/teamsRule:TeamsRule';

    /**
     * Returns true if the given object is an instance of TeamsRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamsRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamsRule.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
     * Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
     */
    declare public readonly action: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Indicate the date of deletion, if any.
     */
    declare public /*out*/ readonly deletedAt: pulumi.Output<string>;
    /**
     * Specify the rule description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly devicePosture: pulumi.Output<string>;
    /**
     * Specify whether the rule is enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
     */
    declare public readonly expiration: pulumi.Output<outputs.TeamsRuleExpiration>;
    /**
     * Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
     */
    declare public readonly filters: pulumi.Output<string[] | undefined>;
    declare public readonly identity: pulumi.Output<string>;
    /**
     * Specify the rule name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly precedence: pulumi.Output<number>;
    /**
     * Indicate that this rule is shared via the Orgs API and read only.
     */
    declare public /*out*/ readonly readOnly: pulumi.Output<boolean>;
    declare public readonly ruleSettings: pulumi.Output<outputs.TeamsRuleRuleSettings>;
    /**
     * Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
     */
    declare public readonly schedule: pulumi.Output<outputs.TeamsRuleSchedule>;
    /**
     * Indicate that this rule is sharable via the Orgs API.
     */
    declare public /*out*/ readonly sharable: pulumi.Output<boolean>;
    /**
     * Provide the account tag of the account that created the rule.
     */
    declare public /*out*/ readonly sourceAccount: pulumi.Output<string>;
    declare public readonly traffic: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Indicate the version number of the rule(read-only).
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Indicate a warning for a misconfigured rule, if any.
     */
    declare public /*out*/ readonly warningStatus: pulumi.Output<string>;

    /**
     * Create a TeamsRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy */
    constructor(name: string, args: TeamsRuleArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy */
    constructor(name: string, argsOrState?: TeamsRuleArgs | TeamsRuleState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("TeamsRule is deprecated: cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamsRuleState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["action"] = state?.action;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletedAt"] = state?.deletedAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["devicePosture"] = state?.devicePosture;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["expiration"] = state?.expiration;
            resourceInputs["filters"] = state?.filters;
            resourceInputs["identity"] = state?.identity;
            resourceInputs["name"] = state?.name;
            resourceInputs["precedence"] = state?.precedence;
            resourceInputs["readOnly"] = state?.readOnly;
            resourceInputs["ruleSettings"] = state?.ruleSettings;
            resourceInputs["schedule"] = state?.schedule;
            resourceInputs["sharable"] = state?.sharable;
            resourceInputs["sourceAccount"] = state?.sourceAccount;
            resourceInputs["traffic"] = state?.traffic;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["version"] = state?.version;
            resourceInputs["warningStatus"] = state?.warningStatus;
        } else {
            const args = argsOrState as TeamsRuleArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["devicePosture"] = args?.devicePosture;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["expiration"] = args?.expiration;
            resourceInputs["filters"] = args?.filters;
            resourceInputs["identity"] = args?.identity;
            resourceInputs["name"] = args?.name;
            resourceInputs["precedence"] = args?.precedence;
            resourceInputs["ruleSettings"] = args?.ruleSettings;
            resourceInputs["schedule"] = args?.schedule;
            resourceInputs["traffic"] = args?.traffic;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["readOnly"] = undefined /*out*/;
            resourceInputs["sharable"] = undefined /*out*/;
            resourceInputs["sourceAccount"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["warningStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/teamsRule:TeamsRule" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(TeamsRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamsRule resources.
 */
export interface TeamsRuleState {
    accountId?: pulumi.Input<string>;
    /**
     * Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
     * Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
     */
    action?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * Indicate the date of deletion, if any.
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * Specify the rule description.
     */
    description?: pulumi.Input<string>;
    devicePosture?: pulumi.Input<string>;
    /**
     * Specify whether the rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
     */
    expiration?: pulumi.Input<inputs.TeamsRuleExpiration>;
    /**
     * Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    identity?: pulumi.Input<string>;
    /**
     * Specify the rule name.
     */
    name?: pulumi.Input<string>;
    precedence?: pulumi.Input<number>;
    /**
     * Indicate that this rule is shared via the Orgs API and read only.
     */
    readOnly?: pulumi.Input<boolean>;
    ruleSettings?: pulumi.Input<inputs.TeamsRuleRuleSettings>;
    /**
     * Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
     */
    schedule?: pulumi.Input<inputs.TeamsRuleSchedule>;
    /**
     * Indicate that this rule is sharable via the Orgs API.
     */
    sharable?: pulumi.Input<boolean>;
    /**
     * Provide the account tag of the account that created the rule.
     */
    sourceAccount?: pulumi.Input<string>;
    traffic?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    /**
     * Indicate the version number of the rule(read-only).
     */
    version?: pulumi.Input<number>;
    /**
     * Indicate a warning for a misconfigured rule, if any.
     */
    warningStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamsRule resource.
 */
export interface TeamsRuleArgs {
    accountId: pulumi.Input<string>;
    /**
     * Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
     * Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
     */
    action: pulumi.Input<string>;
    /**
     * Specify the rule description.
     */
    description?: pulumi.Input<string>;
    devicePosture?: pulumi.Input<string>;
    /**
     * Specify whether the rule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
     */
    expiration?: pulumi.Input<inputs.TeamsRuleExpiration>;
    /**
     * Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
     */
    filters?: pulumi.Input<pulumi.Input<string>[]>;
    identity?: pulumi.Input<string>;
    /**
     * Specify the rule name.
     */
    name: pulumi.Input<string>;
    precedence?: pulumi.Input<number>;
    ruleSettings?: pulumi.Input<inputs.TeamsRuleRuleSettings>;
    /**
     * Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
     */
    schedule?: pulumi.Input<inputs.TeamsRuleSchedule>;
    traffic?: pulumi.Input<string>;
}
