// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDlpEntry = new cloudflare.ZeroTrustDlpEntry("example_zero_trust_dlp_entry", {
 *     accountId: "account_id",
 *     enabled: true,
 *     name: "name",
 *     pattern: {
 *         regex: "regex",
 *         validation: "luhn",
 *     },
 *     profileId: "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustDlpEntry:ZeroTrustDlpEntry example '<account_id>/<entry_id>'
 * ```
 */
export class ZeroTrustDlpEntry extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustDlpEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustDlpEntryState, opts?: pulumi.CustomResourceOptions): ZeroTrustDlpEntry {
        return new ZeroTrustDlpEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustDlpEntry:ZeroTrustDlpEntry';

    /**
     * Returns true if the given object is an instance of ZeroTrustDlpEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustDlpEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustDlpEntry.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Only applies to custom word lists.
     * Determines if the words should be matched in a case-sensitive manner
     * Cannot be set to false if secret is true
     */
    declare public /*out*/ readonly caseSensitive: pulumi.Output<boolean>;
    declare public /*out*/ readonly confidence: pulumi.Output<outputs.ZeroTrustDlpEntryConfidence>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly pattern: pulumi.Output<outputs.ZeroTrustDlpEntryPattern>;
    declare public readonly profileId: pulumi.Output<string>;
    declare public /*out*/ readonly secret: pulumi.Output<boolean>;
    /**
     * Available values: "custom", "predefined", "integration".
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public /*out*/ readonly wordList: pulumi.Output<string>;

    /**
     * Create a ZeroTrustDlpEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustDlpEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustDlpEntryArgs | ZeroTrustDlpEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustDlpEntryState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["caseSensitive"] = state?.caseSensitive;
            resourceInputs["confidence"] = state?.confidence;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["pattern"] = state?.pattern;
            resourceInputs["profileId"] = state?.profileId;
            resourceInputs["secret"] = state?.secret;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["wordList"] = state?.wordList;
        } else {
            const args = argsOrState as ZeroTrustDlpEntryArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.pattern === undefined && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            if (args?.profileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["pattern"] = args?.pattern;
            resourceInputs["profileId"] = args?.profileId;
            resourceInputs["type"] = args?.type;
            resourceInputs["caseSensitive"] = undefined /*out*/;
            resourceInputs["confidence"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["wordList"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustDlpEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustDlpEntry resources.
 */
export interface ZeroTrustDlpEntryState {
    accountId?: pulumi.Input<string>;
    /**
     * Only applies to custom word lists.
     * Determines if the words should be matched in a case-sensitive manner
     * Cannot be set to false if secret is true
     */
    caseSensitive?: pulumi.Input<boolean>;
    confidence?: pulumi.Input<inputs.ZeroTrustDlpEntryConfidence>;
    createdAt?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<inputs.ZeroTrustDlpEntryPattern>;
    profileId?: pulumi.Input<string>;
    secret?: pulumi.Input<boolean>;
    /**
     * Available values: "custom", "predefined", "integration".
     */
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    wordList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustDlpEntry resource.
 */
export interface ZeroTrustDlpEntryArgs {
    accountId: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    pattern: pulumi.Input<inputs.ZeroTrustDlpEntryPattern>;
    profileId: pulumi.Input<string>;
    /**
     * Available values: "custom", "predefined", "integration".
     */
    type?: pulumi.Input<string>;
}
