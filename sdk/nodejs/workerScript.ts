// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerScript:WorkerScript example '<account_id>/<script_name>'
 * ```
 *
 * @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript
 */
export class WorkerScript extends pulumi.CustomResource {
    /**
     * Get an existing WorkerScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerScriptState, opts?: pulumi.CustomResourceOptions): WorkerScript {
        pulumi.log.warn("WorkerScript is deprecated: cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript")
        return new WorkerScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/workerScript:WorkerScript';

    /**
     * Returns true if the given object is an instance of WorkerScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkerScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerScript.__pulumiType;
    }

    /**
     * Identifier.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Configuration for assets within a Worker
     */
    public readonly assets!: pulumi.Output<outputs.WorkerScriptAssets | undefined>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    public readonly bindings!: pulumi.Output<outputs.WorkerScriptBinding[] | undefined>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    public readonly bodyPart!: pulumi.Output<string | undefined>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    public readonly compatibilityDate!: pulumi.Output<string | undefined>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    public readonly compatibilityFlags!: pulumi.Output<string[] | undefined>;
    /**
     * Module or Service Worker contents of the Worker.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * When the script was created.
     */
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * Whether a Worker contains assets.
     */
    public /*out*/ readonly hasAssets!: pulumi.Output<boolean>;
    /**
     * Whether a Worker contains modules.
     */
    public /*out*/ readonly hasModules!: pulumi.Output<boolean>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    public readonly keepAssets!: pulumi.Output<boolean | undefined>;
    /**
     * List of binding types to keep from previous_upload.
     */
    public readonly keepBindings!: pulumi.Output<string[] | undefined>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    public readonly logpush!: pulumi.Output<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    public readonly mainModule!: pulumi.Output<string | undefined>;
    /**
     * Migrations to apply for Durable Objects associated with this Worker.
     */
    public readonly migrations!: pulumi.Output<outputs.WorkerScriptMigrations | undefined>;
    /**
     * When the script was last modified.
     */
    public /*out*/ readonly modifiedOn!: pulumi.Output<string>;
    /**
     * Observability settings for the Worker.
     */
    public readonly observability!: pulumi.Output<outputs.WorkerScriptObservability | undefined>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    public readonly placement!: pulumi.Output<outputs.WorkerScriptPlacement | undefined>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    public readonly scriptName!: pulumi.Output<string>;
    public /*out*/ readonly startupTimeMs!: pulumi.Output<number>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    public readonly tailConsumers!: pulumi.Output<outputs.WorkerScriptTailConsumer[] | undefined>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    public readonly usageModel!: pulumi.Output<string>;

    /**
     * Create a WorkerScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript */
    constructor(name: string, args: WorkerScriptArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript */
    constructor(name: string, argsOrState?: WorkerScriptArgs | WorkerScriptState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("WorkerScript is deprecated: cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkerScriptState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["assets"] = state ? state.assets : undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["bodyPart"] = state ? state.bodyPart : undefined;
            resourceInputs["compatibilityDate"] = state ? state.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = state ? state.compatibilityFlags : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["hasAssets"] = state ? state.hasAssets : undefined;
            resourceInputs["hasModules"] = state ? state.hasModules : undefined;
            resourceInputs["keepAssets"] = state ? state.keepAssets : undefined;
            resourceInputs["keepBindings"] = state ? state.keepBindings : undefined;
            resourceInputs["logpush"] = state ? state.logpush : undefined;
            resourceInputs["mainModule"] = state ? state.mainModule : undefined;
            resourceInputs["migrations"] = state ? state.migrations : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["observability"] = state ? state.observability : undefined;
            resourceInputs["placement"] = state ? state.placement : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["startupTimeMs"] = state ? state.startupTimeMs : undefined;
            resourceInputs["tailConsumers"] = state ? state.tailConsumers : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
        } else {
            const args = argsOrState as WorkerScriptArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.scriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["bodyPart"] = args ? args.bodyPart : undefined;
            resourceInputs["compatibilityDate"] = args ? args.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = args ? args.compatibilityFlags : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["keepAssets"] = args ? args.keepAssets : undefined;
            resourceInputs["keepBindings"] = args ? args.keepBindings : undefined;
            resourceInputs["logpush"] = args ? args.logpush : undefined;
            resourceInputs["mainModule"] = args ? args.mainModule : undefined;
            resourceInputs["migrations"] = args ? args.migrations : undefined;
            resourceInputs["observability"] = args ? args.observability : undefined;
            resourceInputs["placement"] = args ? args.placement : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["tailConsumers"] = args ? args.tailConsumers : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["hasAssets"] = undefined /*out*/;
            resourceInputs["hasModules"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["startupTimeMs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/workerScript:WorkerScript" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(WorkerScript.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkerScript resources.
 */
export interface WorkerScriptState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Configuration for assets within a Worker
     */
    assets?: pulumi.Input<inputs.WorkerScriptAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptBinding>[]>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    bodyPart?: pulumi.Input<string>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Module or Service Worker contents of the Worker.
     */
    content?: pulumi.Input<string>;
    /**
     * When the script was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     */
    etag?: pulumi.Input<string>;
    /**
     * Whether a Worker contains assets.
     */
    hasAssets?: pulumi.Input<boolean>;
    /**
     * Whether a Worker contains modules.
     */
    hasModules?: pulumi.Input<boolean>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    keepAssets?: pulumi.Input<boolean>;
    /**
     * List of binding types to keep from previous_upload.
     */
    keepBindings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    mainModule?: pulumi.Input<string>;
    /**
     * Migrations to apply for Durable Objects associated with this Worker.
     */
    migrations?: pulumi.Input<inputs.WorkerScriptMigrations>;
    /**
     * When the script was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerScriptObservability>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    placement?: pulumi.Input<inputs.WorkerScriptPlacement>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName?: pulumi.Input<string>;
    startupTimeMs?: pulumi.Input<number>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerScriptTailConsumer>[]>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    usageModel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkerScript resource.
 */
export interface WorkerScriptArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Configuration for assets within a Worker
     */
    assets?: pulumi.Input<inputs.WorkerScriptAssets>;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptBinding>[]>;
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     */
    bodyPart?: pulumi.Input<string>;
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Module or Service Worker contents of the Worker.
     */
    content: pulumi.Input<string>;
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     */
    keepAssets?: pulumi.Input<boolean>;
    /**
     * List of binding types to keep from previous_upload.
     */
    keepBindings?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether Logpush is turned on for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     */
    mainModule?: pulumi.Input<string>;
    /**
     * Migrations to apply for Durable Objects associated with this Worker.
     */
    migrations?: pulumi.Input<inputs.WorkerScriptMigrations>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerScriptObservability>;
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     */
    placement?: pulumi.Input<inputs.WorkerScriptPlacement>;
    /**
     * Name of the script, used in URLs and route configuration.
     */
    scriptName: pulumi.Input<string>;
    /**
     * List of Workers that will consume logs from the attached Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerScriptTailConsumer>[]>;
    /**
     * Usage model for the Worker invocations.
     * Available values: "standard".
     */
    usageModel?: pulumi.Input<string>;
}
