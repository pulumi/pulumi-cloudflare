// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkerVersion = cloudflare.getWorkerVersion({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     workerId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     versionId: "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
 *     include: "modules",
 * });
 * ```
 */
export function getWorkerVersion(args: GetWorkerVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkerVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getWorkerVersion:getWorkerVersion", {
        "accountId": args.accountId,
        "include": args.include,
        "versionId": args.versionId,
        "workerId": args.workerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkerVersion.
 */
export interface GetWorkerVersionArgs {
    /**
     * Identifier.
     */
    accountId: string;
    /**
     * Available values: "modules".
     */
    include?: string;
    versionId?: string;
    /**
     * Identifier.
     */
    workerId: string;
}

/**
 * A collection of values returned by getWorkerVersion.
 */
export interface GetWorkerVersionResult {
    /**
     * Identifier.
     */
    readonly accountId: string;
    /**
     * Metadata about the version.
     */
    readonly annotations: outputs.GetWorkerVersionAnnotations;
    /**
     * Configuration for assets within a Worker.
     */
    readonly assets: outputs.GetWorkerVersionAssets;
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     */
    readonly bindings: outputs.GetWorkerVersionBinding[];
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     */
    readonly compatibilityDate: string;
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
     */
    readonly compatibilityFlags: string[];
    /**
     * When the version was created.
     */
    readonly createdOn: string;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * Available values: "modules".
     */
    readonly include?: string;
    /**
     * Resource limits enforced at runtime.
     */
    readonly limits: outputs.GetWorkerVersionLimits;
    /**
     * The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     */
    readonly mainModule: string;
    /**
     * Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     */
    readonly migrations: outputs.GetWorkerVersionMigrations;
    /**
     * Code, sourcemaps, and other content used at runtime.
     */
    readonly modules: outputs.GetWorkerVersionModule[];
    /**
     * The integer version number, starting from one.
     */
    readonly number: number;
    /**
     * Placement settings for the version.
     */
    readonly placement: outputs.GetWorkerVersionPlacement;
    /**
     * The client used to create the version.
     */
    readonly source: string;
    /**
     * Usage model for the version.
     * Available values: "standard", "bundled", "unbound".
     *
     * @deprecated This attribute is deprecated.
     */
    readonly usageModel: string;
    readonly versionId?: string;
    /**
     * Identifier.
     */
    readonly workerId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkerVersion = cloudflare.getWorkerVersion({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     workerId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     versionId: "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
 *     include: "modules",
 * });
 * ```
 */
export function getWorkerVersionOutput(args: GetWorkerVersionOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWorkerVersionResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getWorkerVersion:getWorkerVersion", {
        "accountId": args.accountId,
        "include": args.include,
        "versionId": args.versionId,
        "workerId": args.workerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkerVersion.
 */
export interface GetWorkerVersionOutputArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Available values: "modules".
     */
    include?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    workerId: pulumi.Input<string>;
}
