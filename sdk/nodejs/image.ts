// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleImage = new cloudflare.Image("example_image", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     file: {},
 *     metadata: {},
 *     requireSignedUrls: true,
 *     url: "https://example.com/path/to/logo.png",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/image:Image example '<account_id>/<image_id>'
 * ```
 */
export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * Account identifier tag.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    public readonly file!: pulumi.Output<string | undefined>;
    /**
     * Image file name.
     */
    public /*out*/ readonly filename!: pulumi.Output<string>;
    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     */
    public /*out*/ readonly meta!: pulumi.Output<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    public readonly requireSignedUrls!: pulumi.Output<boolean>;
    /**
     * When the media item was uploaded.
     */
    public /*out*/ readonly uploaded!: pulumi.Output<string>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Object specifying available variants for an image.
     */
    public /*out*/ readonly variants!: pulumi.Output<string[]>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["requireSignedUrls"] = state ? state.requireSignedUrls : undefined;
            resourceInputs["uploaded"] = state ? state.uploaded : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["variants"] = state ? state.variants : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["requireSignedUrls"] = args ? args.requireSignedUrls : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["filename"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["uploaded"] = undefined /*out*/;
            resourceInputs["variants"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * Account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    file?: pulumi.Input<string>;
    /**
     * Image file name.
     */
    filename?: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     */
    meta?: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * When the media item was uploaded.
     */
    uploaded?: pulumi.Input<string>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    url?: pulumi.Input<string>;
    /**
     * Object specifying available variants for an image.
     */
    variants?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * An image binary data. Only needed when type is uploading a file.
     */
    file?: pulumi.Input<string>;
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Indicates whether the image requires a signature token for the access.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     */
    url?: pulumi.Input<string>;
}
