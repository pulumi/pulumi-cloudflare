// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessPolicy = cloudflare.getZeroTrustAccessPolicy({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     policyId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 * });
 * ```
 */
export function getZeroTrustAccessPolicy(args: GetZeroTrustAccessPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetZeroTrustAccessPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZeroTrustAccessPolicy:getZeroTrustAccessPolicy", {
        "accountId": args.accountId,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZeroTrustAccessPolicy.
 */
export interface GetZeroTrustAccessPolicyArgs {
    /**
     * Identifier
     */
    accountId: string;
    /**
     * The UUID of the policy
     */
    policyId?: string;
}

/**
 * A collection of values returned by getZeroTrustAccessPolicy.
 */
export interface GetZeroTrustAccessPolicyResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    /**
     * Number of access applications currently using this policy.
     */
    readonly appCount: number;
    /**
     * Administrators who can approve a temporary authentication request.
     */
    readonly approvalGroups: outputs.GetZeroTrustAccessPolicyApprovalGroup[];
    /**
     * Requires the user to request access from an administrator at the start of each session.
     */
    readonly approvalRequired: boolean;
    readonly createdAt: string;
    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     */
    readonly decision: string;
    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     */
    readonly excludes: outputs.GetZeroTrustAccessPolicyExclude[];
    /**
     * The UUID of the policy
     */
    readonly id: string;
    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     */
    readonly includes: outputs.GetZeroTrustAccessPolicyInclude[];
    /**
     * Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
     */
    readonly isolationRequired: boolean;
    /**
     * The name of the Access policy.
     */
    readonly name: string;
    /**
     * The UUID of the policy
     */
    readonly policyId?: string;
    /**
     * A custom message that will appear on the purpose justification screen.
     */
    readonly purposeJustificationPrompt: string;
    /**
     * Require users to enter a justification when they log in to the application.
     */
    readonly purposeJustificationRequired: boolean;
    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     */
    readonly requires: outputs.GetZeroTrustAccessPolicyRequire[];
    readonly reusable: boolean;
    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     */
    readonly sessionDuration: string;
    readonly updatedAt: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessPolicy = cloudflare.getZeroTrustAccessPolicy({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     policyId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 * });
 * ```
 */
export function getZeroTrustAccessPolicyOutput(args: GetZeroTrustAccessPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZeroTrustAccessPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getZeroTrustAccessPolicy:getZeroTrustAccessPolicy", {
        "accountId": args.accountId,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZeroTrustAccessPolicy.
 */
export interface GetZeroTrustAccessPolicyOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * The UUID of the policy
     */
    policyId?: pulumi.Input<string>;
}
