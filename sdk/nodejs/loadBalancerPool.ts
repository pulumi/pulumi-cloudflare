// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example '<account_id>/<pool_id>'
 * ```
 */
export class LoadBalancerPool extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerPoolState, opts?: pulumi.CustomResourceOptions): LoadBalancerPool {
        return new LoadBalancerPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/loadBalancerPool:LoadBalancerPool';

    /**
     * Returns true if the given object is an instance of LoadBalancerPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerPool.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * A list of regions from which to run health checks. Null means every Cloudflare data center.
     */
    declare public readonly checkRegions: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * A human-readable description of the pool.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     */
    declare public /*out*/ readonly disabledAt: pulumi.Output<string>;
    /**
     * Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     */
    declare public readonly latitude: pulumi.Output<number | undefined>;
    /**
     * Configures load shedding policies and percentages for the pool.
     */
    declare public readonly loadShedding: pulumi.Output<outputs.LoadBalancerPoolLoadShedding>;
    /**
     * The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     */
    declare public readonly longitude: pulumi.Output<number | undefined>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     */
    declare public readonly minimumOrigins: pulumi.Output<number>;
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * The ID of the Monitor to use for checking the health of origins within this pool.
     */
    declare public readonly monitor: pulumi.Output<string | undefined>;
    /**
     * The ID of the Monitor Group to use for checking the health of origins within this pool.
     */
    declare public readonly monitorGroup: pulumi.Output<string | undefined>;
    /**
     * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of networks where Load Balancer or Pool is enabled.
     */
    declare public /*out*/ readonly networks: pulumi.Output<string[]>;
    /**
     * This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    declare public readonly notificationEmail: pulumi.Output<string>;
    /**
     * Filter pool and origin health notifications by resource type or health status. Use null to reset.
     */
    declare public readonly notificationFilter: pulumi.Output<outputs.LoadBalancerPoolNotificationFilter>;
    /**
     * Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     */
    declare public readonly originSteering: pulumi.Output<outputs.LoadBalancerPoolOriginSteering>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    declare public readonly origins: pulumi.Output<outputs.LoadBalancerPoolOrigin[]>;

    /**
     * Create a LoadBalancerPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerPoolArgs | LoadBalancerPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerPoolState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["checkRegions"] = state?.checkRegions;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["description"] = state?.description;
            resourceInputs["disabledAt"] = state?.disabledAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["latitude"] = state?.latitude;
            resourceInputs["loadShedding"] = state?.loadShedding;
            resourceInputs["longitude"] = state?.longitude;
            resourceInputs["minimumOrigins"] = state?.minimumOrigins;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["monitor"] = state?.monitor;
            resourceInputs["monitorGroup"] = state?.monitorGroup;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["notificationEmail"] = state?.notificationEmail;
            resourceInputs["notificationFilter"] = state?.notificationFilter;
            resourceInputs["originSteering"] = state?.originSteering;
            resourceInputs["origins"] = state?.origins;
        } else {
            const args = argsOrState as LoadBalancerPoolArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.origins === undefined && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["checkRegions"] = args?.checkRegions;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["latitude"] = args?.latitude;
            resourceInputs["loadShedding"] = args?.loadShedding;
            resourceInputs["longitude"] = args?.longitude;
            resourceInputs["minimumOrigins"] = args?.minimumOrigins;
            resourceInputs["monitor"] = args?.monitor;
            resourceInputs["monitorGroup"] = args?.monitorGroup;
            resourceInputs["name"] = args?.name;
            resourceInputs["notificationEmail"] = args?.notificationEmail;
            resourceInputs["notificationFilter"] = args?.notificationFilter;
            resourceInputs["originSteering"] = args?.originSteering;
            resourceInputs["origins"] = args?.origins;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["disabledAt"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["networks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerPool resources.
 */
export interface LoadBalancerPoolState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * A list of regions from which to run health checks. Null means every Cloudflare data center.
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    createdOn?: pulumi.Input<string>;
    /**
     * A human-readable description of the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     */
    disabledAt?: pulumi.Input<string>;
    /**
     * Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     */
    latitude?: pulumi.Input<number>;
    /**
     * Configures load shedding policies and percentages for the pool.
     */
    loadShedding?: pulumi.Input<inputs.LoadBalancerPoolLoadShedding>;
    /**
     * The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     */
    longitude?: pulumi.Input<number>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     */
    minimumOrigins?: pulumi.Input<number>;
    modifiedOn?: pulumi.Input<string>;
    /**
     * The ID of the Monitor to use for checking the health of origins within this pool.
     */
    monitor?: pulumi.Input<string>;
    /**
     * The ID of the Monitor Group to use for checking the health of origins within this pool.
     */
    monitorGroup?: pulumi.Input<string>;
    /**
     * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * List of networks where Load Balancer or Pool is enabled.
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    notificationEmail?: pulumi.Input<string>;
    /**
     * Filter pool and origin health notifications by resource type or health status. Use null to reset.
     */
    notificationFilter?: pulumi.Input<inputs.LoadBalancerPoolNotificationFilter>;
    /**
     * Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     */
    originSteering?: pulumi.Input<inputs.LoadBalancerPoolOriginSteering>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    origins?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOrigin>[]>;
}

/**
 * The set of arguments for constructing a LoadBalancerPool resource.
 */
export interface LoadBalancerPoolArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * A list of regions from which to run health checks. Null means every Cloudflare data center.
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable description of the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     */
    latitude?: pulumi.Input<number>;
    /**
     * Configures load shedding policies and percentages for the pool.
     */
    loadShedding?: pulumi.Input<inputs.LoadBalancerPoolLoadShedding>;
    /**
     * The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     */
    longitude?: pulumi.Input<number>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     */
    minimumOrigins?: pulumi.Input<number>;
    /**
     * The ID of the Monitor to use for checking the health of origins within this pool.
     */
    monitor?: pulumi.Input<string>;
    /**
     * The ID of the Monitor Group to use for checking the health of origins within this pool.
     */
    monitorGroup?: pulumi.Input<string>;
    /**
     * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     */
    name: pulumi.Input<string>;
    /**
     * This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    notificationEmail?: pulumi.Input<string>;
    /**
     * Filter pool and origin health notifications by resource type or health status. Use null to reset.
     */
    notificationFilter?: pulumi.Input<inputs.LoadBalancerPoolNotificationFilter>;
    /**
     * Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     */
    originSteering?: pulumi.Input<inputs.LoadBalancerPoolOriginSteering>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    origins: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOrigin>[]>;
}
