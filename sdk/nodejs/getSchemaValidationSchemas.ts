// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleSchemaValidationSchemas = cloudflare.getSchemaValidationSchemas({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     schemaId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 *     omitSource: true,
 * });
 * ```
 */
export function getSchemaValidationSchemas(args: GetSchemaValidationSchemasArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaValidationSchemasResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", {
        "filter": args.filter,
        "omitSource": args.omitSource,
        "schemaId": args.schemaId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchemaValidationSchemas.
 */
export interface GetSchemaValidationSchemasArgs {
    filter?: inputs.GetSchemaValidationSchemasFilter;
    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     */
    omitSource?: boolean;
    /**
     * UUID.
     */
    schemaId?: string;
    /**
     * Identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getSchemaValidationSchemas.
 */
export interface GetSchemaValidationSchemasResult {
    readonly createdAt: string;
    readonly filter?: outputs.GetSchemaValidationSchemasFilter;
    /**
     * UUID.
     */
    readonly id: string;
    /**
     * The kind of the schema
     * Available values: "openapiV3".
     */
    readonly kind: string;
    /**
     * A human-readable name for the schema
     */
    readonly name: string;
    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     */
    readonly omitSource: boolean;
    /**
     * UUID.
     */
    readonly schemaId: string;
    /**
     * The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     */
    readonly source: string;
    /**
     * An indicator if this schema is enabled
     */
    readonly validationEnabled: boolean;
    /**
     * Identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleSchemaValidationSchemas = cloudflare.getSchemaValidationSchemas({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     schemaId: "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
 *     omitSource: true,
 * });
 * ```
 */
export function getSchemaValidationSchemasOutput(args: GetSchemaValidationSchemasOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSchemaValidationSchemasResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", {
        "filter": args.filter,
        "omitSource": args.omitSource,
        "schemaId": args.schemaId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchemaValidationSchemas.
 */
export interface GetSchemaValidationSchemasOutputArgs {
    filter?: pulumi.Input<inputs.GetSchemaValidationSchemasFilterArgs>;
    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     */
    omitSource?: pulumi.Input<boolean>;
    /**
     * UUID.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
