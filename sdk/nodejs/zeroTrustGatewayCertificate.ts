// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustGatewayCertificate = new cloudflare.ZeroTrustGatewayCertificate("example_zero_trust_gateway_certificate", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     validityPeriodDays: 1826,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate example '<account_id>/<certificate_id>'
 * ```
 */
export class ZeroTrustGatewayCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustGatewayCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustGatewayCertificateState, opts?: pulumi.CustomResourceOptions): ZeroTrustGatewayCertificate {
        return new ZeroTrustGatewayCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate';

    /**
     * Returns true if the given object is an instance of ZeroTrustGatewayCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustGatewayCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustGatewayCertificate.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    /**
     * The read only deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
     * Available values: "pending*deployment", "available", "pending*deletion", "inactive".
     */
    declare public /*out*/ readonly bindingStatus: pulumi.Output<string>;
    /**
     * The CA certificate(read only).
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly expiresOn: pulumi.Output<string>;
    /**
     * The SHA256 fingerprint of the certificate(read only).
     */
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * Read-only field that shows whether Gateway TLS interception is using this certificate. This value cannot be set directly. To configure the certificate for interception, use the Gateway configuration setting named certificate.
     */
    declare public /*out*/ readonly inUse: pulumi.Output<boolean>;
    /**
     * The organization that issued the certificate(read only).
     */
    declare public /*out*/ readonly issuerOrg: pulumi.Output<string>;
    /**
     * The entire issuer field of the certificate(read only).
     */
    declare public /*out*/ readonly issuerRaw: pulumi.Output<string>;
    /**
     * The type of certificate, either BYO-PKI (custom) or Gateway-managed(read only).
     * Available values: "custom", "gatewayManaged".
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public /*out*/ readonly uploadedOn: pulumi.Output<string>;
    declare public readonly validityPeriodDays: pulumi.Output<number | undefined>;

    /**
     * Create a ZeroTrustGatewayCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustGatewayCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustGatewayCertificateArgs | ZeroTrustGatewayCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustGatewayCertificateState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["bindingStatus"] = state?.bindingStatus;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["expiresOn"] = state?.expiresOn;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["inUse"] = state?.inUse;
            resourceInputs["issuerOrg"] = state?.issuerOrg;
            resourceInputs["issuerRaw"] = state?.issuerRaw;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["uploadedOn"] = state?.uploadedOn;
            resourceInputs["validityPeriodDays"] = state?.validityPeriodDays;
        } else {
            const args = argsOrState as ZeroTrustGatewayCertificateArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["validityPeriodDays"] = args?.validityPeriodDays;
            resourceInputs["bindingStatus"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiresOn"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["inUse"] = undefined /*out*/;
            resourceInputs["issuerOrg"] = undefined /*out*/;
            resourceInputs["issuerRaw"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["uploadedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustGatewayCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustGatewayCertificate resources.
 */
export interface ZeroTrustGatewayCertificateState {
    accountId?: pulumi.Input<string>;
    /**
     * The read only deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
     * Available values: "pending*deployment", "available", "pending*deletion", "inactive".
     */
    bindingStatus?: pulumi.Input<string>;
    /**
     * The CA certificate(read only).
     */
    certificate?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    expiresOn?: pulumi.Input<string>;
    /**
     * The SHA256 fingerprint of the certificate(read only).
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Read-only field that shows whether Gateway TLS interception is using this certificate. This value cannot be set directly. To configure the certificate for interception, use the Gateway configuration setting named certificate.
     */
    inUse?: pulumi.Input<boolean>;
    /**
     * The organization that issued the certificate(read only).
     */
    issuerOrg?: pulumi.Input<string>;
    /**
     * The entire issuer field of the certificate(read only).
     */
    issuerRaw?: pulumi.Input<string>;
    /**
     * The type of certificate, either BYO-PKI (custom) or Gateway-managed(read only).
     * Available values: "custom", "gatewayManaged".
     */
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    uploadedOn?: pulumi.Input<string>;
    validityPeriodDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ZeroTrustGatewayCertificate resource.
 */
export interface ZeroTrustGatewayCertificateArgs {
    accountId: pulumi.Input<string>;
    validityPeriodDays?: pulumi.Input<number>;
}
