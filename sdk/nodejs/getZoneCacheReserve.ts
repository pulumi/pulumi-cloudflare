// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare data source to look up Cache Reserve
 * status for a given zone.
 */
export function getZoneCacheReserve(args: GetZoneCacheReserveArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneCacheReserveResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZoneCacheReserve:getZoneCacheReserve", {
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneCacheReserve.
 */
export interface GetZoneCacheReserveArgs {
    /**
     * The zone identifier to target for the resource.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getZoneCacheReserve.
 */
export interface GetZoneCacheReserveResult {
    /**
     * The status of Cache Reserve support.
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The zone identifier to target for the resource.
     */
    readonly zoneId: string;
}
/**
 * Provides a Cloudflare data source to look up Cache Reserve
 * status for a given zone.
 */
export function getZoneCacheReserveOutput(args: GetZoneCacheReserveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZoneCacheReserveResult> {
    return pulumi.output(args).apply((a: any) => getZoneCacheReserve(a, opts))
}

/**
 * A collection of arguments for invoking getZoneCacheReserve.
 */
export interface GetZoneCacheReserveOutputArgs {
    /**
     * The zone identifier to target for the resource.
     */
    zoneId: pulumi.Input<string>;
}
