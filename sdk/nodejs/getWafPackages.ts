// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getWafPackages(args: GetWafPackagesArgs, opts?: pulumi.InvokeOptions): Promise<GetWafPackagesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("cloudflare:index/getWafPackages:getWafPackages", {
        "filter": args.filter,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWafPackages.
 */
export interface GetWafPackagesArgs {
    filter?: inputs.GetWafPackagesFilter;
    zoneId: string;
}

/**
 * A collection of values returned by getWafPackages.
 */
export interface GetWafPackagesResult {
    readonly filter?: outputs.GetWafPackagesFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly packages: outputs.GetWafPackagesPackage[];
    readonly zoneId: string;
}

export function getWafPackagesOutput(args: GetWafPackagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWafPackagesResult> {
    return pulumi.output(args).apply(a => getWafPackages(a, opts))
}

/**
 * A collection of arguments for invoking getWafPackages.
 */
export interface GetWafPackagesOutputArgs {
    filter?: pulumi.Input<inputs.GetWafPackagesFilterArgs>;
    zoneId: pulumi.Input<string>;
}
