// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflared = new cloudflare.ZeroTrustTunnelCloudflared("example_zero_trust_tunnel_cloudflared", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     name: "blog",
 *     configSrc: "cloudflare",
 *     tunnelSecret: "AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg=",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/tunnel:Tunnel example '<account_id>/<tunnel_id>'
 * ```
 *
 * @deprecated cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared
 */
export class Tunnel extends pulumi.CustomResource {
    /**
     * Get an existing Tunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TunnelState, opts?: pulumi.CustomResourceOptions): Tunnel {
        pulumi.log.warn("Tunnel is deprecated: cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared")
        return new Tunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/tunnel:Tunnel';

    /**
     * Returns true if the given object is an instance of Tunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tunnel.__pulumiType;
    }

    /**
     * Cloudflare account ID
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Cloudflare account ID
     */
    public /*out*/ readonly accountTag!: pulumi.Output<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    public readonly configSrc!: pulumi.Output<string>;
    /**
     * The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
     *
     * @deprecated This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
     */
    public /*out*/ readonly connections!: pulumi.Output<outputs.TunnelConnection[]>;
    /**
     * Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
     */
    public /*out*/ readonly connsActiveAt!: pulumi.Output<string>;
    /**
     * Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
     */
    public /*out*/ readonly connsInactiveAt!: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     */
    public /*out*/ readonly deletedAt!: pulumi.Output<string>;
    /**
     * Metadata associated with the tunnel.
     */
    public /*out*/ readonly metadata!: pulumi.Output<string>;
    /**
     * A user-friendly name for a tunnel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
     *
     * @deprecated Use the configSrc field instead.
     */
    public /*out*/ readonly remoteConfig!: pulumi.Output<boolean>;
    /**
     * The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: "inactive", "degraded", "healthy", "down".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The type of tunnel.
     * Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
     */
    public /*out*/ readonly tunType!: pulumi.Output<string>;
    /**
     * Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     */
    public readonly tunnelSecret!: pulumi.Output<string | undefined>;

    /**
     * Create a Tunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared */
    constructor(name: string, args: TunnelArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared */
    constructor(name: string, argsOrState?: TunnelArgs | TunnelState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("Tunnel is deprecated: cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["accountTag"] = state ? state.accountTag : undefined;
            resourceInputs["configSrc"] = state ? state.configSrc : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["connsActiveAt"] = state ? state.connsActiveAt : undefined;
            resourceInputs["connsInactiveAt"] = state ? state.connsInactiveAt : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletedAt"] = state ? state.deletedAt : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteConfig"] = state ? state.remoteConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tunType"] = state ? state.tunType : undefined;
            resourceInputs["tunnelSecret"] = state ? state.tunnelSecret : undefined;
        } else {
            const args = argsOrState as TunnelArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["configSrc"] = args ? args.configSrc : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tunnelSecret"] = args?.tunnelSecret ? pulumi.secret(args.tunnelSecret) : undefined;
            resourceInputs["accountTag"] = undefined /*out*/;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["connsActiveAt"] = undefined /*out*/;
            resourceInputs["connsInactiveAt"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["remoteConfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tunType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/tunnel:Tunnel" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        const secretOpts = { additionalSecretOutputs: ["tunnelSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Tunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tunnel resources.
 */
export interface TunnelState {
    /**
     * Cloudflare account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * Cloudflare account ID
     */
    accountTag?: pulumi.Input<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    configSrc?: pulumi.Input<string>;
    /**
     * The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
     *
     * @deprecated This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
     */
    connections?: pulumi.Input<pulumi.Input<inputs.TunnelConnection>[]>;
    /**
     * Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
     */
    connsActiveAt?: pulumi.Input<string>;
    /**
     * Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
     */
    connsInactiveAt?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * Metadata associated with the tunnel.
     */
    metadata?: pulumi.Input<string>;
    /**
     * A user-friendly name for a tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
     *
     * @deprecated Use the configSrc field instead.
     */
    remoteConfig?: pulumi.Input<boolean>;
    /**
     * The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: "inactive", "degraded", "healthy", "down".
     */
    status?: pulumi.Input<string>;
    /**
     * The type of tunnel.
     * Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
     */
    tunType?: pulumi.Input<string>;
    /**
     * Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     */
    tunnelSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tunnel resource.
 */
export interface TunnelArgs {
    /**
     * Cloudflare account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: "local", "cloudflare".
     */
    configSrc?: pulumi.Input<string>;
    /**
     * A user-friendly name for a tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
     */
    tunnelSecret?: pulumi.Input<string>;
}
