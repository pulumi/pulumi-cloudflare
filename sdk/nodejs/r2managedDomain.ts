// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleR2ManagedDomain = new cloudflare.R2ManagedDomain("example_r2_managed_domain", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     bucketName: "example-bucket",
 *     enabled: true,
 * });
 * ```
 */
export class R2ManagedDomain extends pulumi.CustomResource {
    /**
     * Get an existing R2ManagedDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2ManagedDomainState, opts?: pulumi.CustomResourceOptions): R2ManagedDomain {
        return new R2ManagedDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/r2ManagedDomain:R2ManagedDomain';

    /**
     * Returns true if the given object is an instance of R2ManagedDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is R2ManagedDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === R2ManagedDomain.__pulumiType;
    }

    /**
     * Account ID
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Bucket ID
     */
    public /*out*/ readonly bucketId!: pulumi.Output<string>;
    /**
     * Name of the bucket
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Domain name of the bucket's r2.dev domain
     */
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * Whether to enable public bucket access at the r2.dev domain
     */
    public readonly enabled!: pulumi.Output<boolean>;

    /**
     * Create a R2ManagedDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2ManagedDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: R2ManagedDomainArgs | R2ManagedDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as R2ManagedDomainState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
        } else {
            const args = argsOrState as R2ManagedDomainArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["bucketId"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(R2ManagedDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering R2ManagedDomain resources.
 */
export interface R2ManagedDomainState {
    /**
     * Account ID
     */
    accountId?: pulumi.Input<string>;
    /**
     * Bucket ID
     */
    bucketId?: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Domain name of the bucket's r2.dev domain
     */
    domain?: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the r2.dev domain
     */
    enabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a R2ManagedDomain resource.
 */
export interface R2ManagedDomainArgs {
    /**
     * Account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the bucket
     */
    bucketName: pulumi.Input<string>;
    /**
     * Whether to enable public bucket access at the r2.dev domain
     */
    enabled: pulumi.Input<boolean>;
}
