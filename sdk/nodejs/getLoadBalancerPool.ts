// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleLoadBalancerPool = cloudflare.getLoadBalancerPool({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     poolId: "17b5962d775c646f3f9725cbc7a53df4",
 * });
 * ```
 */
export function getLoadBalancerPool(args: GetLoadBalancerPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalancerPoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getLoadBalancerPool:getLoadBalancerPool", {
        "accountId": args.accountId,
        "filter": args.filter,
        "poolId": args.poolId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadBalancerPool.
 */
export interface GetLoadBalancerPoolArgs {
    /**
     * Identifier
     */
    accountId: string;
    filter?: inputs.GetLoadBalancerPoolFilter;
    poolId?: string;
}

/**
 * A collection of values returned by getLoadBalancerPool.
 */
export interface GetLoadBalancerPoolResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    /**
     * A list of regions from which to run health checks. Null means every Cloudflare data center.
     */
    readonly checkRegions: string[];
    readonly createdOn: string;
    /**
     * A human-readable description of the pool.
     */
    readonly description: string;
    /**
     * This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     */
    readonly disabledAt: string;
    /**
     * Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     */
    readonly enabled: boolean;
    readonly filter?: outputs.GetLoadBalancerPoolFilter;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     */
    readonly latitude: number;
    /**
     * Configures load shedding policies and percentages for the pool.
     */
    readonly loadShedding: outputs.GetLoadBalancerPoolLoadShedding;
    /**
     * The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     */
    readonly longitude: number;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     */
    readonly minimumOrigins: number;
    readonly modifiedOn: string;
    /**
     * The ID of the Monitor to use for checking the health of origins within this pool.
     */
    readonly monitor: string;
    /**
     * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     */
    readonly name: string;
    /**
     * List of networks where Load Balancer or Pool is enabled.
     */
    readonly networks: string[];
    /**
     * This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    readonly notificationEmail: string;
    /**
     * Filter pool and origin health notifications by resource type or health status. Use null to reset.
     */
    readonly notificationFilter: outputs.GetLoadBalancerPoolNotificationFilter;
    /**
     * Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     */
    readonly originSteering: outputs.GetLoadBalancerPoolOriginSteering;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    readonly origins: outputs.GetLoadBalancerPoolOrigin[];
    readonly poolId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleLoadBalancerPool = cloudflare.getLoadBalancerPool({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     poolId: "17b5962d775c646f3f9725cbc7a53df4",
 * });
 * ```
 */
export function getLoadBalancerPoolOutput(args: GetLoadBalancerPoolOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLoadBalancerPoolResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getLoadBalancerPool:getLoadBalancerPool", {
        "accountId": args.accountId,
        "filter": args.filter,
        "poolId": args.poolId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLoadBalancerPool.
 */
export interface GetLoadBalancerPoolOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.GetLoadBalancerPoolFilterArgs>;
    poolId?: pulumi.Input<string>;
}
