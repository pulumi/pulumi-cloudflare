// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleNotificationPolicy = cloudflare.getNotificationPolicy({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     policyId: "0da2b59e-f118-439d-8097-bdfb215203c9",
 * });
 * ```
 */
export function getNotificationPolicy(args: GetNotificationPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetNotificationPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getNotificationPolicy:getNotificationPolicy", {
        "accountId": args.accountId,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNotificationPolicy.
 */
export interface GetNotificationPolicyArgs {
    /**
     * The account id
     */
    accountId: string;
    /**
     * The unique identifier of a notification policy
     */
    policyId?: string;
}

/**
 * A collection of values returned by getNotificationPolicy.
 */
export interface GetNotificationPolicyResult {
    /**
     * The account id
     */
    readonly accountId: string;
    /**
     * Optional specification of how often to re-alert from the same incident, not support on all alert types.
     */
    readonly alertInterval: string;
    /**
     * Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * Available values: "access*custom*certificate*expiration*type", "advanced*ddos*attack*l4*alert", "advanced*ddos*attack*l7*alert", "advanced*http*alert*error", "bgp*hijack*notification", "billing*usage*alert", "block*notification*block*removed", "block*notification*new*block", "block*notification*review*rejected", "bot*traffic*basic*alert", "brand*protection*alert", "brand*protection*digest", "clickhouse*alert*fw*anomaly", "clickhouse*alert*fw*ent*anomaly", "cloudforce*one*request*notification", "custom*analytics", "custom*bot*detection*alert", "custom*ssl*certificate*event*type", "dedicated*ssl*certificate*event*type", "device*connectivity*anomaly*alert", "dos*attack*l4", "dos*attack*l7", "expiring*service*token*alert", "failing*logpush*job*disabled*alert", "fbm*auto*advertisement", "fbm*dosd*attack", "fbm*volumetric*attack", "health*check*status*notification", "hostname*aop*custom*certificate*expiration*type", "http*alert*edge*error", "http*alert*origin*error", "image*notification", "image*resizing*notification", "incident*alert", "load*balancing*health*alert", "load*balancing*pool*enablement*alert", "logo*match*alert", "magic*tunnel*health*check*event", "magic*wan*tunnel*health", "maintenance*event*notification", "mtls*certificate*store*certificate*expiration*type", "pages*event*alert", "radar*notification", "real*origin*monitoring", "scriptmonitor*alert*new*code*change*detections", "scriptmonitor*alert*new*hosts", "scriptmonitor*alert*new*malicious*hosts", "scriptmonitor*alert*new*malicious*scripts", "scriptmonitor*alert*new*malicious*url", "scriptmonitor*alert*new*max*length*resource*url", "scriptmonitor*alert*new*resources", "secondary*dns*all*primaries*failing", "secondary*dns*primaries*failing", "secondary*dns*warning", "secondary*dns*zone*successfully*updated", "secondary*dns*zone*validation*warning", "security*insights*alert", "sentinel*alert", "stream*live*notifications", "synthetic*test*latency*alert", "synthetic*test*low*availability*alert", "traffic*anomalies*alert", "tunnel*health*event", "tunnel*update*event", "universal*ssl*event*type", "web*analytics*metrics*update", "zone*aop*custom*certificate*expiration*type".
     */
    readonly alertType: string;
    readonly created: string;
    /**
     * Optional description for the Notification policy.
     */
    readonly description: string;
    /**
     * Whether or not the Notification policy is enabled.
     */
    readonly enabled: boolean;
    /**
     * Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     */
    readonly filters: outputs.GetNotificationPolicyFilters;
    /**
     * The unique identifier of a notification policy
     */
    readonly id: string;
    /**
     * List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     */
    readonly mechanisms: outputs.GetNotificationPolicyMechanisms;
    readonly modified: string;
    /**
     * Name of the policy.
     */
    readonly name: string;
    /**
     * The unique identifier of a notification policy
     */
    readonly policyId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleNotificationPolicy = cloudflare.getNotificationPolicy({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     policyId: "0da2b59e-f118-439d-8097-bdfb215203c9",
 * });
 * ```
 */
export function getNotificationPolicyOutput(args: GetNotificationPolicyOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNotificationPolicyResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getNotificationPolicy:getNotificationPolicy", {
        "accountId": args.accountId,
        "policyId": args.policyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getNotificationPolicy.
 */
export interface GetNotificationPolicyOutputArgs {
    /**
     * The account id
     */
    accountId: pulumi.Input<string>;
    /**
     * The unique identifier of a notification policy
     */
    policyId?: pulumi.Input<string>;
}
