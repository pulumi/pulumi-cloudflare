// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleFilters = cloudflare.getFilters({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     id: "372e67954025e0ba6aaa6d586b9e0b61",
 *     description: "browsers",
 *     expression: "php",
 *     paused: false,
 *     ref: "FIL-100",
 * });
 * ```
 */
export function getFilters(args: GetFiltersArgs, opts?: pulumi.InvokeOptions): Promise<GetFiltersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getFilters:getFilters", {
        "description": args.description,
        "expression": args.expression,
        "id": args.id,
        "maxItems": args.maxItems,
        "paused": args.paused,
        "ref": args.ref,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFilters.
 */
export interface GetFiltersArgs {
    /**
     * A case-insensitive string to find in the description.
     */
    description?: string;
    /**
     * A case-insensitive string to find in the expression.
     */
    expression?: string;
    /**
     * The unique identifier of the filter.
     */
    id?: string;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * When true, indicates that the filter is currently paused.
     */
    paused?: boolean;
    /**
     * The filter ref (a short reference tag) to search for. Must be an exact match.
     */
    ref?: string;
    /**
     * Defines an identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getFilters.
 */
export interface GetFiltersResult {
    /**
     * A case-insensitive string to find in the description.
     */
    readonly description?: string;
    /**
     * A case-insensitive string to find in the expression.
     */
    readonly expression?: string;
    /**
     * The unique identifier of the filter.
     */
    readonly id?: string;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * When true, indicates that the filter is currently paused.
     */
    readonly paused?: boolean;
    /**
     * The filter ref (a short reference tag) to search for. Must be an exact match.
     */
    readonly ref?: string;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetFiltersResult[];
    /**
     * Defines an identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleFilters = cloudflare.getFilters({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     id: "372e67954025e0ba6aaa6d586b9e0b61",
 *     description: "browsers",
 *     expression: "php",
 *     paused: false,
 *     ref: "FIL-100",
 * });
 * ```
 */
export function getFiltersOutput(args: GetFiltersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFiltersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getFilters:getFilters", {
        "description": args.description,
        "expression": args.expression,
        "id": args.id,
        "maxItems": args.maxItems,
        "paused": args.paused,
        "ref": args.ref,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFilters.
 */
export interface GetFiltersOutputArgs {
    /**
     * A case-insensitive string to find in the description.
     */
    description?: pulumi.Input<string>;
    /**
     * A case-insensitive string to find in the expression.
     */
    expression?: pulumi.Input<string>;
    /**
     * The unique identifier of the filter.
     */
    id?: pulumi.Input<string>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * When true, indicates that the filter is currently paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The filter ref (a short reference tag) to search for. Must be an exact match.
     */
    ref?: pulumi.Input<string>;
    /**
     * Defines an identifier.
     */
    zoneId: pulumi.Input<string>;
}
