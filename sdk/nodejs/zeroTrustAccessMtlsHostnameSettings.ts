// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustAccessMtlsHostnameSettings = new cloudflare.ZeroTrustAccessMtlsHostnameSettings("example_zero_trust_access_mtls_hostname_settings", {
 *     settings: [{
 *         china_network: false,
 *         client_certificate_forwarding: true,
 *         hostname: "admin.example.com",
 *     }],
 *     zoneId: "zone_id",
 * });
 * ```
 */
export class ZeroTrustAccessMtlsHostnameSettings extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessMtlsHostnameSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessMtlsHostnameSettingsState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessMtlsHostnameSettings {
        return new ZeroTrustAccessMtlsHostnameSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustAccessMtlsHostnameSettings:ZeroTrustAccessMtlsHostnameSettings';

    /**
     * Returns true if the given object is an instance of ZeroTrustAccessMtlsHostnameSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustAccessMtlsHostnameSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessMtlsHostnameSettings.__pulumiType;
    }

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    declare public readonly accountId: pulumi.Output<string | undefined>;
    /**
     * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     */
    declare public /*out*/ readonly chinaNetwork: pulumi.Output<boolean>;
    /**
     * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     */
    declare public /*out*/ readonly clientCertificateForwarding: pulumi.Output<boolean>;
    /**
     * The hostname that these settings apply to.
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    declare public readonly settings: pulumi.Output<outputs.ZeroTrustAccessMtlsHostnameSettingsSetting[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    declare public readonly zoneId: pulumi.Output<string | undefined>;

    /**
     * Create a ZeroTrustAccessMtlsHostnameSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessMtlsHostnameSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustAccessMtlsHostnameSettingsArgs | ZeroTrustAccessMtlsHostnameSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustAccessMtlsHostnameSettingsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["chinaNetwork"] = state?.chinaNetwork;
            resourceInputs["clientCertificateForwarding"] = state?.clientCertificateForwarding;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as ZeroTrustAccessMtlsHostnameSettingsArgs | undefined;
            if (args?.settings === undefined && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["chinaNetwork"] = undefined /*out*/;
            resourceInputs["clientCertificateForwarding"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(ZeroTrustAccessMtlsHostnameSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustAccessMtlsHostnameSettings resources.
 */
export interface ZeroTrustAccessMtlsHostnameSettingsState {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     */
    chinaNetwork?: pulumi.Input<boolean>;
    /**
     * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     */
    clientCertificateForwarding?: pulumi.Input<boolean>;
    /**
     * The hostname that these settings apply to.
     */
    hostname?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessMtlsHostnameSettingsSetting>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustAccessMtlsHostnameSettings resource.
 */
export interface ZeroTrustAccessMtlsHostnameSettingsArgs {
    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     */
    accountId?: pulumi.Input<string>;
    settings: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessMtlsHostnameSettingsSetting>[]>;
    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     */
    zoneId?: pulumi.Input<string>;
}
