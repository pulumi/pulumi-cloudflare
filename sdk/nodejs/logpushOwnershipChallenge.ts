// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a resource which manages Cloudflare Logpush ownership
 * challenges to use in a Logpush Job. On it's own, doesn't do much
 * however this resource should be used in conjunction to create
 * Logpush jobs.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.LogpushOwnershipChallenge("example", {
 *     destinationConf: "s3://my-bucket-path?region=us-west-2",
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class LogpushOwnershipChallenge extends pulumi.CustomResource {
    /**
     * Get an existing LogpushOwnershipChallenge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogpushOwnershipChallengeState, opts?: pulumi.CustomResourceOptions): LogpushOwnershipChallenge {
        return new LogpushOwnershipChallenge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/logpushOwnershipChallenge:LogpushOwnershipChallenge';

    /**
     * Returns true if the given object is an instance of LogpushOwnershipChallenge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogpushOwnershipChallenge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogpushOwnershipChallenge.__pulumiType;
    }

    /**
     * The account identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination). **Modifying this attribute will force creation of a new resource.**
     */
    public readonly destinationConf!: pulumi.Output<string>;
    /**
     * The filename of the ownership challenge which	contains the contents required for Logpush Job creation.
     */
    public /*out*/ readonly ownershipChallengeFilename!: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a LogpushOwnershipChallenge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogpushOwnershipChallengeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogpushOwnershipChallengeArgs | LogpushOwnershipChallengeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogpushOwnershipChallengeState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["destinationConf"] = state ? state.destinationConf : undefined;
            resourceInputs["ownershipChallengeFilename"] = state ? state.ownershipChallengeFilename : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LogpushOwnershipChallengeArgs | undefined;
            if ((!args || args.destinationConf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationConf'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["destinationConf"] = args ? args.destinationConf : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["ownershipChallengeFilename"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogpushOwnershipChallenge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogpushOwnershipChallenge resources.
 */
export interface LogpushOwnershipChallengeState {
    /**
     * The account identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination). **Modifying this attribute will force creation of a new resource.**
     */
    destinationConf?: pulumi.Input<string>;
    /**
     * The filename of the ownership challenge which	contains the contents required for Logpush Job creation.
     */
    ownershipChallengeFilename?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogpushOwnershipChallenge resource.
 */
export interface LogpushOwnershipChallengeArgs {
    /**
     * The account identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. See [Logpush destination documentation](https://developers.cloudflare.com/logs/logpush/logpush-configuration-api/understanding-logpush-api/#destination). **Modifying this attribute will force creation of a new resource.**
     */
    destinationConf: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Must provide only one of `accountId`, `zoneId`.
     */
    zoneId?: pulumi.Input<string>;
}
