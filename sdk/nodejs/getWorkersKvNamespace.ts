// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersKvNamespace = cloudflare.getWorkersKvNamespace({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     namespaceId: "0f2ac74b498b48028cb68387c421e279",
 * });
 * ```
 */
export function getWorkersKvNamespace(args: GetWorkersKvNamespaceArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkersKvNamespaceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", {
        "accountId": args.accountId,
        "filter": args.filter,
        "namespaceId": args.namespaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersKvNamespace.
 */
export interface GetWorkersKvNamespaceArgs {
    /**
     * Identifier
     */
    accountId: string;
    filter?: inputs.GetWorkersKvNamespaceFilter;
    /**
     * Namespace identifier tag.
     */
    namespaceId?: string;
}

/**
 * A collection of values returned by getWorkersKvNamespace.
 */
export interface GetWorkersKvNamespaceResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    readonly filter?: outputs.GetWorkersKvNamespaceFilter;
    /**
     * Namespace identifier tag.
     */
    readonly id: string;
    /**
     * Namespace identifier tag.
     */
    readonly namespaceId?: string;
    /**
     * True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
     */
    readonly supportsUrlEncoding: boolean;
    /**
     * A human-readable string name for a Namespace.
     */
    readonly title: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkersKvNamespace = cloudflare.getWorkersKvNamespace({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     namespaceId: "0f2ac74b498b48028cb68387c421e279",
 * });
 * ```
 */
export function getWorkersKvNamespaceOutput(args: GetWorkersKvNamespaceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWorkersKvNamespaceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", {
        "accountId": args.accountId,
        "filter": args.filter,
        "namespaceId": args.namespaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkersKvNamespace.
 */
export interface GetWorkersKvNamespaceOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.GetWorkersKvNamespaceFilterArgs>;
    /**
     * Namespace identifier tag.
     */
    namespaceId?: pulumi.Input<string>;
}
