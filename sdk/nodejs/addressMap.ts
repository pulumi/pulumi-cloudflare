// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleAddressMap = new cloudflare.AddressMap("example_address_map", {
 *     accountId: "258def64c72dae45f3e4c8516e2111f2",
 *     description: "My Ecommerce zones",
 *     enabled: true,
 *     ips: ["192.0.2.1"],
 *     memberships: [{
 *         identifier: "023e105f4ecef8ad9ca31a8372d0c353",
 *         kind: "zone",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/addressMap:AddressMap example '<account_id>/<address_map_id>'
 * ```
 */
export class AddressMap extends pulumi.CustomResource {
    /**
     * Get an existing AddressMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddressMapState, opts?: pulumi.CustomResourceOptions): AddressMap {
        return new AddressMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/addressMap:AddressMap';

    /**
     * Returns true if the given object is an instance of AddressMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AddressMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AddressMap.__pulumiType;
    }

    /**
     * Identifier of a Cloudflare account.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     */
    public /*out*/ readonly canDelete!: pulumi.Output<boolean>;
    /**
     * If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     */
    public /*out*/ readonly canModifyIps!: pulumi.Output<boolean>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     */
    public readonly defaultSni!: pulumi.Output<string | undefined>;
    /**
     * An optional description field which may be used to describe the types of IPs or zones on the map.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly ips!: pulumi.Output<string[] | undefined>;
    /**
     * Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     */
    public readonly memberships!: pulumi.Output<outputs.AddressMapMembership[]>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;

    /**
     * Create a AddressMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddressMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddressMapArgs | AddressMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddressMapState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["canDelete"] = state ? state.canDelete : undefined;
            resourceInputs["canModifyIps"] = state ? state.canModifyIps : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["defaultSni"] = state ? state.defaultSni : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["memberships"] = state ? state.memberships : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
        } else {
            const args = argsOrState as AddressMapArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["defaultSni"] = args ? args.defaultSni : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["memberships"] = args ? args.memberships : undefined;
            resourceInputs["canDelete"] = undefined /*out*/;
            resourceInputs["canModifyIps"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AddressMap.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AddressMap resources.
 */
export interface AddressMapState {
    /**
     * Identifier of a Cloudflare account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     */
    canDelete?: pulumi.Input<boolean>;
    /**
     * If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     */
    canModifyIps?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    /**
     * If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     */
    defaultSni?: pulumi.Input<string>;
    /**
     * An optional description field which may be used to describe the types of IPs or zones on the map.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     */
    memberships?: pulumi.Input<pulumi.Input<inputs.AddressMapMembership>[]>;
    modifiedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AddressMap resource.
 */
export interface AddressMapArgs {
    /**
     * Identifier of a Cloudflare account.
     */
    accountId: pulumi.Input<string>;
    /**
     * If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     */
    defaultSni?: pulumi.Input<string>;
    /**
     * An optional description field which may be used to describe the types of IPs or zones on the map.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     */
    memberships?: pulumi.Input<pulumi.Input<inputs.AddressMapMembership>[]>;
}
