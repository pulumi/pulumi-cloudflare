// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleCertificatePack = new cloudflare.CertificatePack("example_certificate_pack", {
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     certificateAuthority: "lets_encrypt",
 *     hosts: [
 *         "example.com",
 *         "*.example.com",
 *         "www.example.com",
 *     ],
 *     type: "advanced",
 *     validationMethod: "txt",
 *     validityDays: 14,
 *     cloudflareBranding: false,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/certificatePack:CertificatePack example '<zone_id>/<certificate_pack_id>'
 * ```
 *
 * While supported, importing isn't recommended and it is advised to replace the
 *
 * certificate entirely instead.
 */
export class CertificatePack extends pulumi.CustomResource {
    /**
     * Get an existing CertificatePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificatePackState, opts?: pulumi.CustomResourceOptions): CertificatePack {
        return new CertificatePack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/certificatePack:CertificatePack';

    /**
     * Returns true if the given object is an instance of CertificatePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificatePack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificatePack.__pulumiType;
    }

    /**
     * Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    public readonly certificateAuthority!: pulumi.Output<string>;
    /**
     * Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     */
    public readonly cloudflareBranding!: pulumi.Output<boolean | undefined>;
    /**
     * Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     */
    public readonly hosts!: pulumi.Output<string[]>;
    /**
     * Status of certificate pack.
     * Available values: "initializing", "pending*validation", "deleted", "pending*issuance", "pending*deployment", "pending*deletion", "pending*expiration", "expired", "active", "initializing*timed*out", "validation*timed*out", "issuance*timed*out", "deployment*timed*out", "deletion*timed*out", "pending*cleanup", "staging*deployment", "staging*active", "deactivating", "inactive", "backup*issued", "holding*deployment".
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type of certificate pack.
     * Available values: "advanced".
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Validation Method selected for the order.
     * Available values: "txt", "http", "email".
     */
    public readonly validationMethod!: pulumi.Output<string>;
    /**
     * Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     */
    public readonly validityDays!: pulumi.Output<number>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a CertificatePack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificatePackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificatePackArgs | CertificatePackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificatePackState | undefined;
            resourceInputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            resourceInputs["cloudflareBranding"] = state ? state.cloudflareBranding : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validationMethod"] = state ? state.validationMethod : undefined;
            resourceInputs["validityDays"] = state ? state.validityDays : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as CertificatePackArgs | undefined;
            if ((!args || args.certificateAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthority'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.validationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validationMethod'");
            }
            if ((!args || args.validityDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityDays'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["certificateAuthority"] = args ? args.certificateAuthority : undefined;
            resourceInputs["cloudflareBranding"] = args ? args.cloudflareBranding : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validationMethod"] = args ? args.validationMethod : undefined;
            resourceInputs["validityDays"] = args ? args.validityDays : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificatePack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CertificatePack resources.
 */
export interface CertificatePackState {
    /**
     * Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    certificateAuthority?: pulumi.Input<string>;
    /**
     * Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     */
    cloudflareBranding?: pulumi.Input<boolean>;
    /**
     * Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of certificate pack.
     * Available values: "initializing", "pending*validation", "deleted", "pending*issuance", "pending*deployment", "pending*deletion", "pending*expiration", "expired", "active", "initializing*timed*out", "validation*timed*out", "issuance*timed*out", "deployment*timed*out", "deletion*timed*out", "pending*cleanup", "staging*deployment", "staging*active", "deactivating", "inactive", "backup*issued", "holding*deployment".
     */
    status?: pulumi.Input<string>;
    /**
     * Type of certificate pack.
     * Available values: "advanced".
     */
    type?: pulumi.Input<string>;
    /**
     * Validation Method selected for the order.
     * Available values: "txt", "http", "email".
     */
    validationMethod?: pulumi.Input<string>;
    /**
     * Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     */
    validityDays?: pulumi.Input<number>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificatePack resource.
 */
export interface CertificatePackArgs {
    /**
     * Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: "google", "lets*encrypt", "ssl*com".
     */
    certificateAuthority: pulumi.Input<string>;
    /**
     * Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     */
    cloudflareBranding?: pulumi.Input<boolean>;
    /**
     * Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     */
    hosts: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of certificate pack.
     * Available values: "advanced".
     */
    type: pulumi.Input<string>;
    /**
     * Validation Method selected for the order.
     * Available values: "txt", "http", "email".
     */
    validationMethod: pulumi.Input<string>;
    /**
     * Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     */
    validityDays: pulumi.Input<number>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
