// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflaredRoutes = cloudflare.getZeroTrustTunnelCloudflaredRoutes({
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     existedAt: "2019-10-12T07%3A20%3A50.52Z",
 *     isDeleted: true,
 *     networkSubset: "172.16.0.0/16",
 *     networkSuperset: "172.16.0.0/16",
 *     routeId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     tunTypes: ["cfd_tunnel"],
 *     tunnelId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     virtualNetworkId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 * });
 * ```
 */
export function getZeroTrustTunnelCloudflaredRoutes(args: GetZeroTrustTunnelCloudflaredRoutesArgs, opts?: pulumi.InvokeOptions): Promise<GetZeroTrustTunnelCloudflaredRoutesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZeroTrustTunnelCloudflaredRoutes:getZeroTrustTunnelCloudflaredRoutes", {
        "accountId": args.accountId,
        "comment": args.comment,
        "existedAt": args.existedAt,
        "isDeleted": args.isDeleted,
        "maxItems": args.maxItems,
        "networkSubset": args.networkSubset,
        "networkSuperset": args.networkSuperset,
        "routeId": args.routeId,
        "tunTypes": args.tunTypes,
        "tunnelId": args.tunnelId,
        "virtualNetworkId": args.virtualNetworkId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZeroTrustTunnelCloudflaredRoutes.
 */
export interface GetZeroTrustTunnelCloudflaredRoutesArgs {
    /**
     * Cloudflare account ID
     */
    accountId: string;
    /**
     * Optional remark describing the route.
     */
    comment?: string;
    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     */
    existedAt?: string;
    /**
     * If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
     */
    isDeleted?: boolean;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * If set, only list routes that are contained within this IP range.
     */
    networkSubset?: string;
    /**
     * If set, only list routes that contain this IP range.
     */
    networkSuperset?: string;
    /**
     * UUID of the route.
     */
    routeId?: string;
    /**
     * The types of tunnels to filter by, separated by commas.
     */
    tunTypes?: string[];
    /**
     * UUID of the tunnel.
     */
    tunnelId?: string;
    /**
     * UUID of the virtual network.
     */
    virtualNetworkId?: string;
}

/**
 * A collection of values returned by getZeroTrustTunnelCloudflaredRoutes.
 */
export interface GetZeroTrustTunnelCloudflaredRoutesResult {
    /**
     * Cloudflare account ID
     */
    readonly accountId: string;
    /**
     * Optional remark describing the route.
     */
    readonly comment: string;
    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     */
    readonly existedAt?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
     */
    readonly isDeleted?: boolean;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * If set, only list routes that are contained within this IP range.
     */
    readonly networkSubset?: string;
    /**
     * If set, only list routes that contain this IP range.
     */
    readonly networkSuperset?: string;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetZeroTrustTunnelCloudflaredRoutesResult[];
    /**
     * UUID of the route.
     */
    readonly routeId?: string;
    /**
     * The types of tunnels to filter by, separated by commas.
     */
    readonly tunTypes?: string[];
    /**
     * UUID of the tunnel.
     */
    readonly tunnelId?: string;
    /**
     * UUID of the virtual network.
     */
    readonly virtualNetworkId?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustTunnelCloudflaredRoutes = cloudflare.getZeroTrustTunnelCloudflaredRoutes({
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     existedAt: "2019-10-12T07%3A20%3A50.52Z",
 *     isDeleted: true,
 *     networkSubset: "172.16.0.0/16",
 *     networkSuperset: "172.16.0.0/16",
 *     routeId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     tunTypes: ["cfd_tunnel"],
 *     tunnelId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 *     virtualNetworkId: "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
 * });
 * ```
 */
export function getZeroTrustTunnelCloudflaredRoutesOutput(args: GetZeroTrustTunnelCloudflaredRoutesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZeroTrustTunnelCloudflaredRoutesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getZeroTrustTunnelCloudflaredRoutes:getZeroTrustTunnelCloudflaredRoutes", {
        "accountId": args.accountId,
        "comment": args.comment,
        "existedAt": args.existedAt,
        "isDeleted": args.isDeleted,
        "maxItems": args.maxItems,
        "networkSubset": args.networkSubset,
        "networkSuperset": args.networkSuperset,
        "routeId": args.routeId,
        "tunTypes": args.tunTypes,
        "tunnelId": args.tunnelId,
        "virtualNetworkId": args.virtualNetworkId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZeroTrustTunnelCloudflaredRoutes.
 */
export interface GetZeroTrustTunnelCloudflaredRoutesOutputArgs {
    /**
     * Cloudflare account ID
     */
    accountId: pulumi.Input<string>;
    /**
     * Optional remark describing the route.
     */
    comment?: pulumi.Input<string>;
    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     */
    existedAt?: pulumi.Input<string>;
    /**
     * If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
     */
    isDeleted?: pulumi.Input<boolean>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * If set, only list routes that are contained within this IP range.
     */
    networkSubset?: pulumi.Input<string>;
    /**
     * If set, only list routes that contain this IP range.
     */
    networkSuperset?: pulumi.Input<string>;
    /**
     * UUID of the route.
     */
    routeId?: pulumi.Input<string>;
    /**
     * The types of tunnels to filter by, separated by commas.
     */
    tunTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UUID of the tunnel.
     */
    tunnelId?: pulumi.Input<string>;
    /**
     * UUID of the virtual network.
     */
    virtualNetworkId?: pulumi.Input<string>;
}
