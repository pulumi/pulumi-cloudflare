// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicTransitSite = new cloudflare.MagicTransitSite("example_magic_transit_site", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: "site_1",
 *     connectorId: "ac60d3d0435248289d446cedd870bcf4",
 *     description: "description",
 *     haMode: true,
 *     location: {
 *         lat: "37.6192",
 *         lon: "122.3816",
 *     },
 *     secondaryConnectorId: "8d67040d3835dbcf46ce29da440dc482",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitSite:MagicTransitSite example '<account_id>/<site_id>'
 * ```
 */
export class MagicTransitSite extends pulumi.CustomResource {
    /**
     * Get an existing MagicTransitSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicTransitSiteState, opts?: pulumi.CustomResourceOptions): MagicTransitSite {
        return new MagicTransitSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicTransitSite:MagicTransitSite';

    /**
     * Returns true if the given object is an instance of MagicTransitSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicTransitSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicTransitSite.__pulumiType;
    }

    /**
     * Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Magic Connector identifier tag.
     */
    declare public readonly connectorId: pulumi.Output<string | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     */
    declare public readonly haMode: pulumi.Output<boolean | undefined>;
    /**
     * Location of site in latitude and longitude.
     */
    declare public readonly location: pulumi.Output<outputs.MagicTransitSiteLocation | undefined>;
    /**
     * The name of the site.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Magic Connector identifier tag. Used when high availability mode is on.
     */
    declare public readonly secondaryConnectorId: pulumi.Output<string | undefined>;

    /**
     * Create a MagicTransitSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicTransitSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicTransitSiteArgs | MagicTransitSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicTransitSiteState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["connectorId"] = state?.connectorId;
            resourceInputs["description"] = state?.description;
            resourceInputs["haMode"] = state?.haMode;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["secondaryConnectorId"] = state?.secondaryConnectorId;
        } else {
            const args = argsOrState as MagicTransitSiteArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["connectorId"] = args?.connectorId;
            resourceInputs["description"] = args?.description;
            resourceInputs["haMode"] = args?.haMode;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["secondaryConnectorId"] = args?.secondaryConnectorId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicTransitSite.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicTransitSite resources.
 */
export interface MagicTransitSiteState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Magic Connector identifier tag.
     */
    connectorId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     */
    haMode?: pulumi.Input<boolean>;
    /**
     * Location of site in latitude and longitude.
     */
    location?: pulumi.Input<inputs.MagicTransitSiteLocation>;
    /**
     * The name of the site.
     */
    name?: pulumi.Input<string>;
    /**
     * Magic Connector identifier tag. Used when high availability mode is on.
     */
    secondaryConnectorId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MagicTransitSite resource.
 */
export interface MagicTransitSiteArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Magic Connector identifier tag.
     */
    connectorId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     */
    haMode?: pulumi.Input<boolean>;
    /**
     * Location of site in latitude and longitude.
     */
    location?: pulumi.Input<inputs.MagicTransitSiteLocation>;
    /**
     * The name of the site.
     */
    name: pulumi.Input<string>;
    /**
     * Magic Connector identifier tag. Used when high availability mode is on.
     */
    secondaryConnectorId?: pulumi.Input<string>;
}
