// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZone = new cloudflare.Zone("example_zone", {
 *     account: {
 *         id: "023e105f4ecef8ad9ca31a8372d0c353",
 *     },
 *     name: "example.com",
 *     type: "full",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zone:Zone example '<zone_id>'
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    declare public readonly account: pulumi.Output<outputs.ZoneAccount>;
    /**
     * The last time proof of ownership was detected and the zone was made
     * active.
     */
    declare public /*out*/ readonly activatedOn: pulumi.Output<string>;
    /**
     * Allows the customer to use a custom apex.
     * *Tenants Only Configuration*.
     */
    declare public /*out*/ readonly cnameSuffix: pulumi.Output<string>;
    /**
     * When the zone was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     */
    declare public /*out*/ readonly developmentMode: pulumi.Output<number>;
    /**
     * Metadata about the zone.
     */
    declare public /*out*/ readonly meta: pulumi.Output<outputs.ZoneMeta>;
    /**
     * When the zone was last modified.
     */
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    /**
     * The domain name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name servers Cloudflare assigns to a zone.
     */
    declare public /*out*/ readonly nameServers: pulumi.Output<string[]>;
    /**
     * DNS host at the time of switching to Cloudflare.
     */
    declare public /*out*/ readonly originalDnshost: pulumi.Output<string>;
    /**
     * Original name servers before moving to Cloudflare.
     */
    declare public /*out*/ readonly originalNameServers: pulumi.Output<string[]>;
    /**
     * Registrar for the domain at the time of switching to Cloudflare.
     */
    declare public /*out*/ readonly originalRegistrar: pulumi.Output<string>;
    /**
     * The owner of the zone.
     */
    declare public /*out*/ readonly owner: pulumi.Output<outputs.ZoneOwner>;
    /**
     * Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     */
    declare public readonly paused: pulumi.Output<boolean>;
    /**
     * Legacy permissions based on legacy user membership information.
     *
     * @deprecated This has been replaced by Account memberships.
     */
    declare public /*out*/ readonly permissions: pulumi.Output<string[]>;
    /**
     * A Zones subscription information.
     *
     * @deprecated Please use the `/zones/{zone_id}/subscription` API
to update a zone's plan. Changing this value will create/cancel
associated subscriptions. To view available plans for this zone,
see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/).
     */
    declare public /*out*/ readonly plan: pulumi.Output<outputs.ZonePlan>;
    /**
     * The zone status on Cloudflare.
     * Available values: "initializing", "pending", "active", "moved".
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The root organizational unit that this zone belongs to (such as a tenant or organization).
     */
    declare public /*out*/ readonly tenant: pulumi.Output<outputs.ZoneTenant>;
    /**
     * The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
     */
    declare public /*out*/ readonly tenantUnit: pulumi.Output<outputs.ZoneTenantUnit>;
    /**
     * A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: "full", "partial", "secondary", "internal".
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * An array of domains used for custom name servers. This is only
     * available for Business and Enterprise plans.
     */
    declare public readonly vanityNameServers: pulumi.Output<string[]>;
    /**
     * Verification key for partial zone setup.
     */
    declare public /*out*/ readonly verificationKey: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["account"] = state?.account;
            resourceInputs["activatedOn"] = state?.activatedOn;
            resourceInputs["cnameSuffix"] = state?.cnameSuffix;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["developmentMode"] = state?.developmentMode;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameServers"] = state?.nameServers;
            resourceInputs["originalDnshost"] = state?.originalDnshost;
            resourceInputs["originalNameServers"] = state?.originalNameServers;
            resourceInputs["originalRegistrar"] = state?.originalRegistrar;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["paused"] = state?.paused;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["plan"] = state?.plan;
            resourceInputs["status"] = state?.status;
            resourceInputs["tenant"] = state?.tenant;
            resourceInputs["tenantUnit"] = state?.tenantUnit;
            resourceInputs["type"] = state?.type;
            resourceInputs["vanityNameServers"] = state?.vanityNameServers;
            resourceInputs["verificationKey"] = state?.verificationKey;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if (args?.account === undefined && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["account"] = args?.account;
            resourceInputs["name"] = args?.name;
            resourceInputs["paused"] = args?.paused;
            resourceInputs["type"] = args?.type;
            resourceInputs["vanityNameServers"] = args?.vanityNameServers;
            resourceInputs["activatedOn"] = undefined /*out*/;
            resourceInputs["cnameSuffix"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["developmentMode"] = undefined /*out*/;
            resourceInputs["meta"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["nameServers"] = undefined /*out*/;
            resourceInputs["originalDnshost"] = undefined /*out*/;
            resourceInputs["originalNameServers"] = undefined /*out*/;
            resourceInputs["originalRegistrar"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["permissions"] = undefined /*out*/;
            resourceInputs["plan"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tenant"] = undefined /*out*/;
            resourceInputs["tenantUnit"] = undefined /*out*/;
            resourceInputs["verificationKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    account?: pulumi.Input<inputs.ZoneAccount>;
    /**
     * The last time proof of ownership was detected and the zone was made
     * active.
     */
    activatedOn?: pulumi.Input<string>;
    /**
     * Allows the customer to use a custom apex.
     * *Tenants Only Configuration*.
     */
    cnameSuffix?: pulumi.Input<string>;
    /**
     * When the zone was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     */
    developmentMode?: pulumi.Input<number>;
    /**
     * Metadata about the zone.
     */
    meta?: pulumi.Input<inputs.ZoneMeta>;
    /**
     * When the zone was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The domain name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name servers Cloudflare assigns to a zone.
     */
    nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DNS host at the time of switching to Cloudflare.
     */
    originalDnshost?: pulumi.Input<string>;
    /**
     * Original name servers before moving to Cloudflare.
     */
    originalNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Registrar for the domain at the time of switching to Cloudflare.
     */
    originalRegistrar?: pulumi.Input<string>;
    /**
     * The owner of the zone.
     */
    owner?: pulumi.Input<inputs.ZoneOwner>;
    /**
     * Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Legacy permissions based on legacy user membership information.
     *
     * @deprecated This has been replaced by Account memberships.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Zones subscription information.
     *
     * @deprecated Please use the `/zones/{zone_id}/subscription` API
to update a zone's plan. Changing this value will create/cancel
associated subscriptions. To view available plans for this zone,
see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/).
     */
    plan?: pulumi.Input<inputs.ZonePlan>;
    /**
     * The zone status on Cloudflare.
     * Available values: "initializing", "pending", "active", "moved".
     */
    status?: pulumi.Input<string>;
    /**
     * The root organizational unit that this zone belongs to (such as a tenant or organization).
     */
    tenant?: pulumi.Input<inputs.ZoneTenant>;
    /**
     * The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
     */
    tenantUnit?: pulumi.Input<inputs.ZoneTenantUnit>;
    /**
     * A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: "full", "partial", "secondary", "internal".
     */
    type?: pulumi.Input<string>;
    /**
     * An array of domains used for custom name servers. This is only
     * available for Business and Enterprise plans.
     */
    vanityNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Verification key for partial zone setup.
     */
    verificationKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    account: pulumi.Input<inputs.ZoneAccount>;
    /**
     * The domain name.
     */
    name: pulumi.Input<string>;
    /**
     * Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: "full", "partial", "secondary", "internal".
     */
    type?: pulumi.Input<string>;
    /**
     * An array of domains used for custom name servers. This is only
     * available for Business and Enterprise plans.
     */
    vanityNameServers?: pulumi.Input<pulumi.Input<string>[]>;
}
