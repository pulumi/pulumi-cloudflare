// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicNetworkMonitoringRule = new cloudflare.MagicNetworkMonitoringRule("example_magic_network_monitoring_rule", {
 *     accountId: "6f91088a406011ed95aed352566e8d4c",
 *     duration: "1m",
 *     name: "my_rule_1",
 *     automaticAdvertisement: true,
 *     bandwidth: 1000,
 *     packetThreshold: 10000,
 *     prefixes: ["203.0.113.1/32"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule example '<account_id>/<rule_id>'
 * ```
 */
export class MagicNetworkMonitoringRule extends pulumi.CustomResource {
    /**
     * Get an existing MagicNetworkMonitoringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicNetworkMonitoringRuleState, opts?: pulumi.CustomResourceOptions): MagicNetworkMonitoringRule {
        return new MagicNetworkMonitoringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule';

    /**
     * Returns true if the given object is an instance of MagicNetworkMonitoringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicNetworkMonitoringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicNetworkMonitoringRule.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     */
    declare public readonly automaticAdvertisement: pulumi.Output<boolean | undefined>;
    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    declare public readonly bandwidth: pulumi.Output<number | undefined>;
    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    declare public /*out*/ readonly bandwidthThreshold: pulumi.Output<number>;
    /**
     * The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
     * Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
     */
    declare public readonly duration: pulumi.Output<string>;
    /**
     * The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    declare public readonly packetThreshold: pulumi.Output<number | undefined>;
    /**
     * Prefix match type to be applied for a prefix auto advertisement when using an advancedDdos rule.
     * Available values: "exact", "subnet", "supernet".
     */
    declare public /*out*/ readonly prefixMatch: pulumi.Output<string>;
    declare public readonly prefixes: pulumi.Output<string[] | undefined>;
    /**
     * MNM rule type.
     * Available values: "threshold", "zscore", "advancedDdos".
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * Level of sensitivity set for zscore rules.
     * Available values: "low", "medium", "high".
     */
    declare public /*out*/ readonly zscoreSensitivity: pulumi.Output<string>;
    /**
     * Target of the zscore rule analysis.
     * Available values: "bits", "packets".
     */
    declare public /*out*/ readonly zscoreTarget: pulumi.Output<string>;

    /**
     * Create a MagicNetworkMonitoringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicNetworkMonitoringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicNetworkMonitoringRuleArgs | MagicNetworkMonitoringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicNetworkMonitoringRuleState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["automaticAdvertisement"] = state?.automaticAdvertisement;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["bandwidthThreshold"] = state?.bandwidthThreshold;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["name"] = state?.name;
            resourceInputs["packetThreshold"] = state?.packetThreshold;
            resourceInputs["prefixMatch"] = state?.prefixMatch;
            resourceInputs["prefixes"] = state?.prefixes;
            resourceInputs["type"] = state?.type;
            resourceInputs["zscoreSensitivity"] = state?.zscoreSensitivity;
            resourceInputs["zscoreTarget"] = state?.zscoreTarget;
        } else {
            const args = argsOrState as MagicNetworkMonitoringRuleArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["automaticAdvertisement"] = args?.automaticAdvertisement;
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["duration"] = args?.duration;
            resourceInputs["name"] = args?.name;
            resourceInputs["packetThreshold"] = args?.packetThreshold;
            resourceInputs["prefixes"] = args?.prefixes;
            resourceInputs["bandwidthThreshold"] = undefined /*out*/;
            resourceInputs["prefixMatch"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["zscoreSensitivity"] = undefined /*out*/;
            resourceInputs["zscoreTarget"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicNetworkMonitoringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicNetworkMonitoringRule resources.
 */
export interface MagicNetworkMonitoringRuleState {
    accountId?: pulumi.Input<string>;
    /**
     * Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     */
    automaticAdvertisement?: pulumi.Input<boolean>;
    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    bandwidthThreshold?: pulumi.Input<number>;
    /**
     * The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
     * Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
     */
    duration?: pulumi.Input<string>;
    /**
     * The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    packetThreshold?: pulumi.Input<number>;
    /**
     * Prefix match type to be applied for a prefix auto advertisement when using an advancedDdos rule.
     * Available values: "exact", "subnet", "supernet".
     */
    prefixMatch?: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * MNM rule type.
     * Available values: "threshold", "zscore", "advancedDdos".
     */
    type?: pulumi.Input<string>;
    /**
     * Level of sensitivity set for zscore rules.
     * Available values: "low", "medium", "high".
     */
    zscoreSensitivity?: pulumi.Input<string>;
    /**
     * Target of the zscore rule analysis.
     * Available values: "bits", "packets".
     */
    zscoreTarget?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MagicNetworkMonitoringRule resource.
 */
export interface MagicNetworkMonitoringRuleArgs {
    accountId: pulumi.Input<string>;
    /**
     * Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     */
    automaticAdvertisement?: pulumi.Input<boolean>;
    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
     * Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
     */
    duration?: pulumi.Input<string>;
    /**
     * The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     */
    name: pulumi.Input<string>;
    /**
     * The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     */
    packetThreshold?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}
