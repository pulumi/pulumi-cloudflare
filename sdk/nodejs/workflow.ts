// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorkflow = new cloudflare.Workflow("example_workflow", {
 *     accountId: "account_id",
 *     workflowName: "x",
 *     className: "x",
 *     scriptName: "x",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workflow:Workflow example '<account_id>/<workflow_name>'
 * ```
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    declare public readonly className: pulumi.Output<string>;
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    declare public /*out*/ readonly instances: pulumi.Output<outputs.WorkflowInstances>;
    declare public /*out*/ readonly isDeleted: pulumi.Output<number>;
    declare public /*out*/ readonly modifiedOn: pulumi.Output<string>;
    declare public /*out*/ readonly name: pulumi.Output<string>;
    declare public readonly scriptName: pulumi.Output<string>;
    declare public /*out*/ readonly terminatorRunning: pulumi.Output<number>;
    declare public /*out*/ readonly triggeredOn: pulumi.Output<string>;
    declare public /*out*/ readonly versionId: pulumi.Output<string>;
    declare public readonly workflowName: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["className"] = state?.className;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["isDeleted"] = state?.isDeleted;
            resourceInputs["modifiedOn"] = state?.modifiedOn;
            resourceInputs["name"] = state?.name;
            resourceInputs["scriptName"] = state?.scriptName;
            resourceInputs["terminatorRunning"] = state?.terminatorRunning;
            resourceInputs["triggeredOn"] = state?.triggeredOn;
            resourceInputs["versionId"] = state?.versionId;
            resourceInputs["workflowName"] = state?.workflowName;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.className === undefined && !opts.urn) {
                throw new Error("Missing required property 'className'");
            }
            if (args?.scriptName === undefined && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            if (args?.workflowName === undefined && !opts.urn) {
                throw new Error("Missing required property 'workflowName'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["className"] = args?.className;
            resourceInputs["scriptName"] = args?.scriptName;
            resourceInputs["workflowName"] = args?.workflowName;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["isDeleted"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["terminatorRunning"] = undefined /*out*/;
            resourceInputs["triggeredOn"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    accountId?: pulumi.Input<string>;
    className?: pulumi.Input<string>;
    createdOn?: pulumi.Input<string>;
    instances?: pulumi.Input<inputs.WorkflowInstances>;
    isDeleted?: pulumi.Input<number>;
    modifiedOn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scriptName?: pulumi.Input<string>;
    terminatorRunning?: pulumi.Input<number>;
    triggeredOn?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    accountId: pulumi.Input<string>;
    className: pulumi.Input<string>;
    scriptName: pulumi.Input<string>;
    workflowName: pulumi.Input<string>;
}
