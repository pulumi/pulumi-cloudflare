// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
 * include or exclude lists of routes from the WARP client's tunnel.
 */
export class ZeroTrustSplitTunnel extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustSplitTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustSplitTunnelState, opts?: pulumi.CustomResourceOptions): ZeroTrustSplitTunnel {
        return new ZeroTrustSplitTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustSplitTunnel:ZeroTrustSplitTunnel';

    /**
     * Returns true if the given object is an instance of ZeroTrustSplitTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustSplitTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustSplitTunnel.__pulumiType;
    }

    /**
     * The account identifier to target for the resource.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * The value of the tunnel attributes.
     */
    public readonly tunnels!: pulumi.Output<outputs.ZeroTrustSplitTunnelTunnel[]>;

    /**
     * Create a ZeroTrustSplitTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustSplitTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustSplitTunnelArgs | ZeroTrustSplitTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustSplitTunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["tunnels"] = state ? state.tunnels : undefined;
        } else {
            const args = argsOrState as ZeroTrustSplitTunnelArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.tunnels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnels'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["tunnels"] = args ? args.tunnels : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustSplitTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustSplitTunnel resources.
 */
export interface ZeroTrustSplitTunnelState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes.
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.ZeroTrustSplitTunnelTunnel>[]>;
}

/**
 * The set of arguments for constructing a ZeroTrustSplitTunnel resource.
 */
export interface ZeroTrustSplitTunnelArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    mode: pulumi.Input<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes.
     */
    tunnels: pulumi.Input<pulumi.Input<inputs.ZeroTrustSplitTunnelTunnel>[]>;
}
