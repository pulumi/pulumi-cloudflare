// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleStream = new cloudflare.Stream("example_stream", {accountId: "023e105f4ecef8ad9ca31a8372d0c353"});
 * ```
 */
export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamState, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/stream:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    /**
     * The account identifier tag.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     */
    declare public readonly allowedOrigins: pulumi.Output<string[] | undefined>;
    /**
     * The date and time the media item was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * A user-defined identifier for the media creator.
     */
    declare public readonly creator: pulumi.Output<string | undefined>;
    /**
     * The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     */
    declare public /*out*/ readonly duration: pulumi.Output<number>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    declare public readonly identifier: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly input: pulumi.Output<outputs.StreamInput>;
    /**
     * The live input ID used to upload a video with Stream Live.
     */
    declare public /*out*/ readonly liveInput: pulumi.Output<string>;
    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     */
    declare public readonly maxDurationSeconds: pulumi.Output<number | undefined>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     */
    declare public readonly meta: pulumi.Output<string | undefined>;
    /**
     * The date and time the media item was last modified.
     */
    declare public /*out*/ readonly modified: pulumi.Output<string>;
    declare public /*out*/ readonly playback: pulumi.Output<outputs.StreamPlayback>;
    /**
     * The video's preview page URI. This field is omitted until encoding is complete.
     */
    declare public /*out*/ readonly preview: pulumi.Output<string>;
    /**
     * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    declare public /*out*/ readonly readyToStream: pulumi.Output<boolean>;
    /**
     * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    declare public /*out*/ readonly readyToStreamAt: pulumi.Output<string>;
    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     */
    declare public readonly requireSignedUrls: pulumi.Output<boolean>;
    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     */
    declare public readonly scheduledDeletion: pulumi.Output<string | undefined>;
    /**
     * The size of the media item in bytes.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     */
    declare public /*out*/ readonly status: pulumi.Output<outputs.StreamStatus>;
    /**
     * The media item's thumbnail URI. This field is omitted until encoding is complete.
     */
    declare public /*out*/ readonly thumbnail: pulumi.Output<string>;
    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     */
    declare public readonly thumbnailTimestampPct: pulumi.Output<number>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    declare public /*out*/ readonly uid: pulumi.Output<string>;
    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     */
    declare public readonly uploadExpiry: pulumi.Output<string | undefined>;
    /**
     * The date and time the media item was uploaded.
     */
    declare public /*out*/ readonly uploaded: pulumi.Output<string>;
    declare public /*out*/ readonly watermark: pulumi.Output<outputs.StreamWatermark>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamArgs | StreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["allowedOrigins"] = state?.allowedOrigins;
            resourceInputs["created"] = state?.created;
            resourceInputs["creator"] = state?.creator;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["identifier"] = state?.identifier;
            resourceInputs["input"] = state?.input;
            resourceInputs["liveInput"] = state?.liveInput;
            resourceInputs["maxDurationSeconds"] = state?.maxDurationSeconds;
            resourceInputs["meta"] = state?.meta;
            resourceInputs["modified"] = state?.modified;
            resourceInputs["playback"] = state?.playback;
            resourceInputs["preview"] = state?.preview;
            resourceInputs["readyToStream"] = state?.readyToStream;
            resourceInputs["readyToStreamAt"] = state?.readyToStreamAt;
            resourceInputs["requireSignedUrls"] = state?.requireSignedUrls;
            resourceInputs["scheduledDeletion"] = state?.scheduledDeletion;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["thumbnail"] = state?.thumbnail;
            resourceInputs["thumbnailTimestampPct"] = state?.thumbnailTimestampPct;
            resourceInputs["uid"] = state?.uid;
            resourceInputs["uploadExpiry"] = state?.uploadExpiry;
            resourceInputs["uploaded"] = state?.uploaded;
            resourceInputs["watermark"] = state?.watermark;
        } else {
            const args = argsOrState as StreamArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["allowedOrigins"] = args?.allowedOrigins;
            resourceInputs["creator"] = args?.creator;
            resourceInputs["identifier"] = args?.identifier;
            resourceInputs["maxDurationSeconds"] = args?.maxDurationSeconds;
            resourceInputs["meta"] = args?.meta;
            resourceInputs["requireSignedUrls"] = args?.requireSignedUrls;
            resourceInputs["scheduledDeletion"] = args?.scheduledDeletion;
            resourceInputs["thumbnailTimestampPct"] = args?.thumbnailTimestampPct;
            resourceInputs["uploadExpiry"] = args?.uploadExpiry;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["input"] = undefined /*out*/;
            resourceInputs["liveInput"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["playback"] = undefined /*out*/;
            resourceInputs["preview"] = undefined /*out*/;
            resourceInputs["readyToStream"] = undefined /*out*/;
            resourceInputs["readyToStreamAt"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["thumbnail"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["uploaded"] = undefined /*out*/;
            resourceInputs["watermark"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Stream resources.
 */
export interface StreamState {
    /**
     * The account identifier tag.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The date and time the media item was created.
     */
    created?: pulumi.Input<string>;
    /**
     * A user-defined identifier for the media creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     */
    duration?: pulumi.Input<number>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    identifier?: pulumi.Input<string>;
    input?: pulumi.Input<inputs.StreamInput>;
    /**
     * The live input ID used to upload a video with Stream Live.
     */
    liveInput?: pulumi.Input<string>;
    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     */
    meta?: pulumi.Input<string>;
    /**
     * The date and time the media item was last modified.
     */
    modified?: pulumi.Input<string>;
    playback?: pulumi.Input<inputs.StreamPlayback>;
    /**
     * The video's preview page URI. This field is omitted until encoding is complete.
     */
    preview?: pulumi.Input<string>;
    /**
     * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    readyToStream?: pulumi.Input<boolean>;
    /**
     * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     */
    readyToStreamAt?: pulumi.Input<string>;
    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     */
    scheduledDeletion?: pulumi.Input<string>;
    /**
     * The size of the media item in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     */
    status?: pulumi.Input<inputs.StreamStatus>;
    /**
     * The media item's thumbnail URI. This field is omitted until encoding is complete.
     */
    thumbnail?: pulumi.Input<string>;
    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     */
    thumbnailTimestampPct?: pulumi.Input<number>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    uid?: pulumi.Input<string>;
    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     */
    uploadExpiry?: pulumi.Input<string>;
    /**
     * The date and time the media item was uploaded.
     */
    uploaded?: pulumi.Input<string>;
    watermark?: pulumi.Input<inputs.StreamWatermark>;
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    /**
     * The account identifier tag.
     */
    accountId: pulumi.Input<string>;
    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A user-defined identifier for the media creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * A Cloudflare-generated unique identifier for a media item.
     */
    identifier?: pulumi.Input<string>;
    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     */
    meta?: pulumi.Input<string>;
    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     */
    requireSignedUrls?: pulumi.Input<boolean>;
    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     */
    scheduledDeletion?: pulumi.Input<string>;
    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     */
    thumbnailTimestampPct?: pulumi.Input<number>;
    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     */
    uploadExpiry?: pulumi.Input<string>;
}
