// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsZoneTransfersOutgoing = new cloudflare.DnsZoneTransfersOutgoing("example_dns_zone_transfers_outgoing", {
 *     zoneId: "269d8f4853475ca241c4e730be286b20",
 *     name: "www.example.com.",
 *     peers: [
 *         "23ff594956f20c2a721606e94745a8aa",
 *         "00920f38ce07c2e2f4df50b1f61d4194",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing example '<zone_id>'
 * ```
 */
export class DnsZoneTransfersOutgoing extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneTransfersOutgoing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneTransfersOutgoingState, opts?: pulumi.CustomResourceOptions): DnsZoneTransfersOutgoing {
        return new DnsZoneTransfersOutgoing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing';

    /**
     * Returns true if the given object is an instance of DnsZoneTransfersOutgoing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZoneTransfersOutgoing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneTransfersOutgoing.__pulumiType;
    }

    /**
     * The time for a specific event.
     */
    declare public /*out*/ readonly checkedTime: pulumi.Output<string>;
    /**
     * The time for a specific event.
     */
    declare public /*out*/ readonly createdTime: pulumi.Output<string>;
    /**
     * The time for a specific event.
     */
    declare public /*out*/ readonly lastTransferredTime: pulumi.Output<string>;
    /**
     * Zone name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of peer tags.
     */
    declare public readonly peers: pulumi.Output<string[]>;
    /**
     * The serial number of the SOA for the given zone.
     */
    declare public /*out*/ readonly soaSerial: pulumi.Output<number>;
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DnsZoneTransfersOutgoing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneTransfersOutgoingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneTransfersOutgoingArgs | DnsZoneTransfersOutgoingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneTransfersOutgoingState | undefined;
            resourceInputs["checkedTime"] = state?.checkedTime;
            resourceInputs["createdTime"] = state?.createdTime;
            resourceInputs["lastTransferredTime"] = state?.lastTransferredTime;
            resourceInputs["name"] = state?.name;
            resourceInputs["peers"] = state?.peers;
            resourceInputs["soaSerial"] = state?.soaSerial;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DnsZoneTransfersOutgoingArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.peers === undefined && !opts.urn) {
                throw new Error("Missing required property 'peers'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["peers"] = args?.peers;
            resourceInputs["zoneId"] = args?.zoneId;
            resourceInputs["checkedTime"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastTransferredTime"] = undefined /*out*/;
            resourceInputs["soaSerial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZoneTransfersOutgoing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZoneTransfersOutgoing resources.
 */
export interface DnsZoneTransfersOutgoingState {
    /**
     * The time for a specific event.
     */
    checkedTime?: pulumi.Input<string>;
    /**
     * The time for a specific event.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The time for a specific event.
     */
    lastTransferredTime?: pulumi.Input<string>;
    /**
     * Zone name.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of peer tags.
     */
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The serial number of the SOA for the given zone.
     */
    soaSerial?: pulumi.Input<number>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZoneTransfersOutgoing resource.
 */
export interface DnsZoneTransfersOutgoingArgs {
    /**
     * Zone name.
     */
    name: pulumi.Input<string>;
    /**
     * A list of peer tags.
     */
    peers: pulumi.Input<pulumi.Input<string>[]>;
    zoneId: pulumi.Input<string>;
}
