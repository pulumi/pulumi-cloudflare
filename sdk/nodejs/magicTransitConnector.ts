// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitConnector:MagicTransitConnector example '<account_id>/<connector_id>'
 * ```
 */
export class MagicTransitConnector extends pulumi.CustomResource {
    /**
     * Get an existing MagicTransitConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicTransitConnectorState, opts?: pulumi.CustomResourceOptions): MagicTransitConnector {
        return new MagicTransitConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicTransitConnector:MagicTransitConnector';

    /**
     * Returns true if the given object is an instance of MagicTransitConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicTransitConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicTransitConnector.__pulumiType;
    }

    /**
     * Account identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    public readonly activated!: pulumi.Output<boolean>;
    public readonly device!: pulumi.Output<outputs.MagicTransitConnectorDevice>;
    public readonly interruptWindowDurationHours!: pulumi.Output<number>;
    public readonly interruptWindowHourOfDay!: pulumi.Output<number>;
    public readonly notes!: pulumi.Output<string>;
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a MagicTransitConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicTransitConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicTransitConnectorArgs | MagicTransitConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicTransitConnectorState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["interruptWindowDurationHours"] = state ? state.interruptWindowDurationHours : undefined;
            resourceInputs["interruptWindowHourOfDay"] = state ? state.interruptWindowHourOfDay : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as MagicTransitConnectorArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.device === undefined) && !opts.urn) {
                throw new Error("Missing required property 'device'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["activated"] = args ? args.activated : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["interruptWindowDurationHours"] = args ? args.interruptWindowDurationHours : undefined;
            resourceInputs["interruptWindowHourOfDay"] = args ? args.interruptWindowHourOfDay : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicTransitConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicTransitConnector resources.
 */
export interface MagicTransitConnectorState {
    /**
     * Account identifier
     */
    accountId?: pulumi.Input<string>;
    activated?: pulumi.Input<boolean>;
    device?: pulumi.Input<inputs.MagicTransitConnectorDevice>;
    interruptWindowDurationHours?: pulumi.Input<number>;
    interruptWindowHourOfDay?: pulumi.Input<number>;
    notes?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MagicTransitConnector resource.
 */
export interface MagicTransitConnectorArgs {
    /**
     * Account identifier
     */
    accountId: pulumi.Input<string>;
    activated?: pulumi.Input<boolean>;
    device: pulumi.Input<inputs.MagicTransitConnectorDevice>;
    interruptWindowDurationHours?: pulumi.Input<number>;
    interruptWindowHourOfDay?: pulumi.Input<number>;
    notes?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}
