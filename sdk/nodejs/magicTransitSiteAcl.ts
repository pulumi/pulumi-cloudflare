// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl example '<account_id>/<site_id>/<acl_id>'
 * ```
 */
export class MagicTransitSiteAcl extends pulumi.CustomResource {
    /**
     * Get an existing MagicTransitSiteAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicTransitSiteAclState, opts?: pulumi.CustomResourceOptions): MagicTransitSiteAcl {
        return new MagicTransitSiteAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl';

    /**
     * Returns true if the given object is an instance of MagicTransitSiteAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicTransitSiteAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicTransitSiteAcl.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Description for the ACL.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    public readonly forwardLocally!: pulumi.Output<boolean | undefined>;
    public readonly lan1!: pulumi.Output<outputs.MagicTransitSiteAclLan1>;
    public readonly lan2!: pulumi.Output<outputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly protocols!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier
     */
    public readonly siteId!: pulumi.Output<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    public readonly unidirectional!: pulumi.Output<boolean | undefined>;

    /**
     * Create a MagicTransitSiteAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicTransitSiteAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicTransitSiteAclArgs | MagicTransitSiteAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicTransitSiteAclState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forwardLocally"] = state ? state.forwardLocally : undefined;
            resourceInputs["lan1"] = state ? state.lan1 : undefined;
            resourceInputs["lan2"] = state ? state.lan2 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["unidirectional"] = state ? state.unidirectional : undefined;
        } else {
            const args = argsOrState as MagicTransitSiteAclArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.lan1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lan1'");
            }
            if ((!args || args.lan2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lan2'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forwardLocally"] = args ? args.forwardLocally : undefined;
            resourceInputs["lan1"] = args ? args.lan1 : undefined;
            resourceInputs["lan2"] = args ? args.lan2 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["unidirectional"] = args ? args.unidirectional : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicTransitSiteAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicTransitSiteAcl resources.
 */
export interface MagicTransitSiteAclState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * Description for the ACL.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    forwardLocally?: pulumi.Input<boolean>;
    lan1?: pulumi.Input<inputs.MagicTransitSiteAclLan1>;
    lan2?: pulumi.Input<inputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    name?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier
     */
    siteId?: pulumi.Input<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    unidirectional?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MagicTransitSiteAcl resource.
 */
export interface MagicTransitSiteAclArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Description for the ACL.
     */
    description?: pulumi.Input<string>;
    /**
     * The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     */
    forwardLocally?: pulumi.Input<boolean>;
    lan1: pulumi.Input<inputs.MagicTransitSiteAclLan1>;
    lan2: pulumi.Input<inputs.MagicTransitSiteAclLan2>;
    /**
     * The name of the ACL.
     */
    name: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier
     */
    siteId: pulumi.Input<string>;
    /**
     * The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
     */
    unidirectional?: pulumi.Input<boolean>;
}
