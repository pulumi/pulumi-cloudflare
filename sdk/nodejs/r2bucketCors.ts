// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleR2BucketCors = new cloudflare.R2BucketCors("example_r2_bucket_cors", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     bucketName: "example-bucket",
 *     rules: [{
 *         allowed: {
 *             methods: ["GET"],
 *             origins: ["http://localhost:3000"],
 *             headers: ["x-requested-by"],
 *         },
 *         id: "Allow Local Development",
 *         expose_headers: ["Content-Encoding"],
 *         max_age_seconds: 3600,
 *     }],
 * });
 * ```
 */
export class R2BucketCors extends pulumi.CustomResource {
    /**
     * Get an existing R2BucketCors resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: R2BucketCorsState, opts?: pulumi.CustomResourceOptions): R2BucketCors {
        return new R2BucketCors(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/r2BucketCors:R2BucketCors';

    /**
     * Returns true if the given object is an instance of R2BucketCors.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is R2BucketCors {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === R2BucketCors.__pulumiType;
    }

    /**
     * Account ID.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Name of the bucket.
     */
    declare public readonly bucketName: pulumi.Output<string>;
    /**
     * Jurisdiction of the bucket
     */
    declare public readonly jurisdiction: pulumi.Output<string>;
    declare public readonly rules: pulumi.Output<outputs.R2BucketCorsRule[] | undefined>;

    /**
     * Create a R2BucketCors resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: R2BucketCorsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: R2BucketCorsArgs | R2BucketCorsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as R2BucketCorsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["bucketName"] = state?.bucketName;
            resourceInputs["jurisdiction"] = state?.jurisdiction;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as R2BucketCorsArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.bucketName === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["bucketName"] = args?.bucketName;
            resourceInputs["jurisdiction"] = args?.jurisdiction;
            resourceInputs["rules"] = args?.rules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(R2BucketCors.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering R2BucketCors resources.
 */
export interface R2BucketCorsState {
    /**
     * Account ID.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.R2BucketCorsRule>[]>;
}

/**
 * The set of arguments for constructing a R2BucketCors resource.
 */
export interface R2BucketCorsArgs {
    /**
     * Account ID.
     */
    accountId: pulumi.Input<string>;
    /**
     * Name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Jurisdiction of the bucket
     */
    jurisdiction?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.R2BucketCorsRule>[]>;
}
