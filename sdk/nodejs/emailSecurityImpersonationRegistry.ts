// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleEmailSecurityImpersonationRegistry = new cloudflare.EmailSecurityImpersonationRegistry("example_email_security_impersonation_registry", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     email: "email",
 *     isEmailRegex: true,
 *     name: "name",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/emailSecurityImpersonationRegistry:EmailSecurityImpersonationRegistry example '<account_id>/<display_name_id>'
 * ```
 */
export class EmailSecurityImpersonationRegistry extends pulumi.CustomResource {
    /**
     * Get an existing EmailSecurityImpersonationRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailSecurityImpersonationRegistryState, opts?: pulumi.CustomResourceOptions): EmailSecurityImpersonationRegistry {
        return new EmailSecurityImpersonationRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/emailSecurityImpersonationRegistry:EmailSecurityImpersonationRegistry';

    /**
     * Returns true if the given object is an instance of EmailSecurityImpersonationRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailSecurityImpersonationRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailSecurityImpersonationRegistry.__pulumiType;
    }

    /**
     * Account Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    public /*out*/ readonly comments!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly directoryId!: pulumi.Output<number>;
    public /*out*/ readonly directoryNodeId!: pulumi.Output<number>;
    public readonly email!: pulumi.Output<string>;
    public /*out*/ readonly externalDirectoryNodeId!: pulumi.Output<string>;
    public readonly isEmailRegex!: pulumi.Output<boolean>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly provenance!: pulumi.Output<string>;

    /**
     * Create a EmailSecurityImpersonationRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailSecurityImpersonationRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailSecurityImpersonationRegistryArgs | EmailSecurityImpersonationRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailSecurityImpersonationRegistryState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["directoryNodeId"] = state ? state.directoryNodeId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["externalDirectoryNodeId"] = state ? state.externalDirectoryNodeId : undefined;
            resourceInputs["isEmailRegex"] = state ? state.isEmailRegex : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provenance"] = state ? state.provenance : undefined;
        } else {
            const args = argsOrState as EmailSecurityImpersonationRegistryArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.isEmailRegex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isEmailRegex'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["isEmailRegex"] = args ? args.isEmailRegex : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["comments"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["directoryId"] = undefined /*out*/;
            resourceInputs["directoryNodeId"] = undefined /*out*/;
            resourceInputs["externalDirectoryNodeId"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["provenance"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmailSecurityImpersonationRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmailSecurityImpersonationRegistry resources.
 */
export interface EmailSecurityImpersonationRegistryState {
    /**
     * Account Identifier
     */
    accountId?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    directoryId?: pulumi.Input<number>;
    directoryNodeId?: pulumi.Input<number>;
    email?: pulumi.Input<string>;
    externalDirectoryNodeId?: pulumi.Input<string>;
    isEmailRegex?: pulumi.Input<boolean>;
    lastModified?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    provenance?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmailSecurityImpersonationRegistry resource.
 */
export interface EmailSecurityImpersonationRegistryArgs {
    /**
     * Account Identifier
     */
    accountId: pulumi.Input<string>;
    email: pulumi.Input<string>;
    isEmailRegex: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}
