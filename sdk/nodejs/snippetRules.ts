// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class SnippetRules extends pulumi.CustomResource {
    /**
     * Get an existing SnippetRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnippetRulesState, opts?: pulumi.CustomResourceOptions): SnippetRules {
        return new SnippetRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/snippetRules:SnippetRules';

    /**
     * Returns true if the given object is an instance of SnippetRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnippetRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnippetRules.__pulumiType;
    }

    public /*out*/ readonly description!: pulumi.Output<string>;
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    public /*out*/ readonly expression!: pulumi.Output<string>;
    /**
     * List of snippet rules
     */
    public readonly rules!: pulumi.Output<outputs.SnippetRulesRule[] | undefined>;
    /**
     * Snippet identifying name
     */
    public /*out*/ readonly snippetName!: pulumi.Output<string>;
    /**
     * Identifier
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a SnippetRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnippetRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnippetRulesArgs | SnippetRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnippetRulesState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["snippetName"] = state ? state.snippetName : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as SnippetRulesArgs | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["expression"] = undefined /*out*/;
            resourceInputs["snippetName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnippetRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnippetRules resources.
 */
export interface SnippetRulesState {
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    expression?: pulumi.Input<string>;
    /**
     * List of snippet rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SnippetRulesRule>[]>;
    /**
     * Snippet identifying name
     */
    snippetName?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnippetRules resource.
 */
export interface SnippetRulesArgs {
    /**
     * List of snippet rules
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SnippetRulesRule>[]>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
