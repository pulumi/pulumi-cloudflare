// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan example '<account_id>/<site_id>/<lan_id>'
 * ```
 */
export class MagicTransitSiteLan extends pulumi.CustomResource {
    /**
     * Get an existing MagicTransitSiteLan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicTransitSiteLanState, opts?: pulumi.CustomResourceOptions): MagicTransitSiteLan {
        return new MagicTransitSiteLan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan';

    /**
     * Returns true if the given object is an instance of MagicTransitSiteLan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicTransitSiteLan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicTransitSiteLan.__pulumiType;
    }

    /**
     * Identifier
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     */
    declare public readonly haLink: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string | undefined>;
    declare public readonly nat: pulumi.Output<outputs.MagicTransitSiteLanNat | undefined>;
    declare public readonly physport: pulumi.Output<number>;
    declare public readonly routedSubnets: pulumi.Output<outputs.MagicTransitSiteLanRoutedSubnet[] | undefined>;
    /**
     * Identifier
     */
    declare public readonly siteId: pulumi.Output<string>;
    /**
     * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     */
    declare public readonly staticAddressing: pulumi.Output<outputs.MagicTransitSiteLanStaticAddressing | undefined>;
    /**
     * VLAN ID. Use zero for untagged.
     */
    declare public readonly vlanTag: pulumi.Output<number | undefined>;

    /**
     * Create a MagicTransitSiteLan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicTransitSiteLanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicTransitSiteLanArgs | MagicTransitSiteLanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicTransitSiteLanState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["haLink"] = state?.haLink;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat"] = state?.nat;
            resourceInputs["physport"] = state?.physport;
            resourceInputs["routedSubnets"] = state?.routedSubnets;
            resourceInputs["siteId"] = state?.siteId;
            resourceInputs["staticAddressing"] = state?.staticAddressing;
            resourceInputs["vlanTag"] = state?.vlanTag;
        } else {
            const args = argsOrState as MagicTransitSiteLanArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.physport === undefined && !opts.urn) {
                throw new Error("Missing required property 'physport'");
            }
            if (args?.siteId === undefined && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["haLink"] = args?.haLink;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat"] = args?.nat;
            resourceInputs["physport"] = args?.physport;
            resourceInputs["routedSubnets"] = args?.routedSubnets;
            resourceInputs["siteId"] = args?.siteId;
            resourceInputs["staticAddressing"] = args?.staticAddressing;
            resourceInputs["vlanTag"] = args?.vlanTag;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MagicTransitSiteLan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicTransitSiteLan resources.
 */
export interface MagicTransitSiteLanState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     */
    haLink?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<inputs.MagicTransitSiteLanNat>;
    physport?: pulumi.Input<number>;
    routedSubnets?: pulumi.Input<pulumi.Input<inputs.MagicTransitSiteLanRoutedSubnet>[]>;
    /**
     * Identifier
     */
    siteId?: pulumi.Input<string>;
    /**
     * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     */
    staticAddressing?: pulumi.Input<inputs.MagicTransitSiteLanStaticAddressing>;
    /**
     * VLAN ID. Use zero for untagged.
     */
    vlanTag?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MagicTransitSiteLan resource.
 */
export interface MagicTransitSiteLanArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     */
    haLink?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<inputs.MagicTransitSiteLanNat>;
    physport: pulumi.Input<number>;
    routedSubnets?: pulumi.Input<pulumi.Input<inputs.MagicTransitSiteLanRoutedSubnet>[]>;
    /**
     * Identifier
     */
    siteId: pulumi.Input<string>;
    /**
     * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     */
    staticAddressing?: pulumi.Input<inputs.MagicTransitSiteLanStaticAddressing>;
    /**
     * VLAN ID. Use zero for untagged.
     */
    vlanTag?: pulumi.Input<number>;
}
