// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneLockdowns = cloudflare.getZoneLockdowns({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     createdOn: "2014-01-01T05:20:00.12345Z",
 *     description: "endpoints",
 *     descriptionSearch: "endpoints",
 *     ip: "1.2.3.4",
 *     ipRangeSearch: "1.2.3.0/16",
 *     ipSearch: "1.2.3.4",
 *     modifiedOn: "2014-01-01T05:20:00.12345Z",
 *     priority: 5,
 *     uriSearch: "/some/path",
 * });
 * ```
 */
export function getZoneLockdowns(args: GetZoneLockdownsArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneLockdownsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZoneLockdowns:getZoneLockdowns", {
        "createdOn": args.createdOn,
        "description": args.description,
        "descriptionSearch": args.descriptionSearch,
        "ip": args.ip,
        "ipRangeSearch": args.ipRangeSearch,
        "ipSearch": args.ipSearch,
        "maxItems": args.maxItems,
        "modifiedOn": args.modifiedOn,
        "priority": args.priority,
        "uriSearch": args.uriSearch,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneLockdowns.
 */
export interface GetZoneLockdownsArgs {
    /**
     * The timestamp of when the rule was created.
     */
    createdOn?: string;
    /**
     * A string to search for in the description of existing rules.
     */
    description?: string;
    /**
     * A string to search for in the description of existing rules.
     */
    descriptionSearch?: string;
    /**
     * A single IP address to search for in existing rules.
     */
    ip?: string;
    /**
     * A single IP address range to search for in existing rules.
     */
    ipRangeSearch?: string;
    /**
     * A single IP address to search for in existing rules.
     */
    ipSearch?: string;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    /**
     * The timestamp of when the rule was last modified.
     */
    modifiedOn?: string;
    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     */
    priority?: number;
    /**
     * A single URI to search for in the list of URLs of existing rules.
     */
    uriSearch?: string;
    /**
     * Identifier
     */
    zoneId: string;
}

/**
 * A collection of values returned by getZoneLockdowns.
 */
export interface GetZoneLockdownsResult {
    /**
     * The timestamp of when the rule was created.
     */
    readonly createdOn?: string;
    /**
     * A string to search for in the description of existing rules.
     */
    readonly description?: string;
    /**
     * A string to search for in the description of existing rules.
     */
    readonly descriptionSearch?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A single IP address to search for in existing rules.
     */
    readonly ip?: string;
    /**
     * A single IP address range to search for in existing rules.
     */
    readonly ipRangeSearch?: string;
    /**
     * A single IP address to search for in existing rules.
     */
    readonly ipSearch?: string;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    /**
     * The timestamp of when the rule was last modified.
     */
    readonly modifiedOn?: string;
    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     */
    readonly priority?: number;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetZoneLockdownsResult[];
    /**
     * A single URI to search for in the list of URLs of existing rules.
     */
    readonly uriSearch?: string;
    /**
     * Identifier
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZoneLockdowns = cloudflare.getZoneLockdowns({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     createdOn: "2014-01-01T05:20:00.12345Z",
 *     description: "endpoints",
 *     descriptionSearch: "endpoints",
 *     ip: "1.2.3.4",
 *     ipRangeSearch: "1.2.3.0/16",
 *     ipSearch: "1.2.3.4",
 *     modifiedOn: "2014-01-01T05:20:00.12345Z",
 *     priority: 5,
 *     uriSearch: "/some/path",
 * });
 * ```
 */
export function getZoneLockdownsOutput(args: GetZoneLockdownsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetZoneLockdownsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getZoneLockdowns:getZoneLockdowns", {
        "createdOn": args.createdOn,
        "description": args.description,
        "descriptionSearch": args.descriptionSearch,
        "ip": args.ip,
        "ipRangeSearch": args.ipRangeSearch,
        "ipSearch": args.ipSearch,
        "maxItems": args.maxItems,
        "modifiedOn": args.modifiedOn,
        "priority": args.priority,
        "uriSearch": args.uriSearch,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getZoneLockdowns.
 */
export interface GetZoneLockdownsOutputArgs {
    /**
     * The timestamp of when the rule was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * A string to search for in the description of existing rules.
     */
    description?: pulumi.Input<string>;
    /**
     * A string to search for in the description of existing rules.
     */
    descriptionSearch?: pulumi.Input<string>;
    /**
     * A single IP address to search for in existing rules.
     */
    ip?: pulumi.Input<string>;
    /**
     * A single IP address range to search for in existing rules.
     */
    ipRangeSearch?: pulumi.Input<string>;
    /**
     * A single IP address to search for in existing rules.
     */
    ipSearch?: pulumi.Input<string>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    /**
     * The timestamp of when the rule was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * A single URI to search for in the list of URLs of existing rules.
     */
    uriSearch?: pulumi.Input<string>;
    /**
     * Identifier
     */
    zoneId: pulumi.Input<string>;
}
