// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleMagicWanIpsecTunnel = new cloudflare.MagicWanIpsecTunnel("example_magic_wan_ipsec_tunnel", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     cloudflareEndpoint: "203.0.113.1",
 *     interfaceAddress: "192.0.2.0/31",
 *     name: "IPsec_1",
 *     customerEndpoint: "203.0.113.1",
 *     description: "Tunnel for ISP X",
 *     healthCheck: {
 *         direction: "bidirectional",
 *         enabled: true,
 *         rate: "low",
 *         target: {
 *             saved: "203.0.113.1",
 *         },
 *         type: "request",
 *     },
 *     psk: "O3bwKSjnaoCxDoUxjcq4Rk8ZKkezQUiy",
 *     replayProtection: false,
 * });
 * ```
 */
export class MagicWanIpsecTunnel extends pulumi.CustomResource {
    /**
     * Get an existing MagicWanIpsecTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicWanIpsecTunnelState, opts?: pulumi.CustomResourceOptions): MagicWanIpsecTunnel {
        return new MagicWanIpsecTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel';

    /**
     * Returns true if the given object is an instance of MagicWanIpsecTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MagicWanIpsecTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MagicWanIpsecTunnel.__pulumiType;
    }

    /**
     * Identifier
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    public readonly cloudflareEndpoint!: pulumi.Output<string>;
    /**
     * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     */
    public readonly customerEndpoint!: pulumi.Output<string | undefined>;
    /**
     * An optional description forthe IPsec tunnel.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly healthCheck!: pulumi.Output<outputs.MagicWanIpsecTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    public readonly interfaceAddress!: pulumi.Output<string>;
    public /*out*/ readonly ipsecTunnel!: pulumi.Output<outputs.MagicWanIpsecTunnelIpsecTunnel>;
    /**
     * Identifier
     */
    public readonly ipsecTunnelId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ipsecTunnels!: pulumi.Output<outputs.MagicWanIpsecTunnelIpsecTunnel[]>;
    public /*out*/ readonly modified!: pulumi.Output<boolean>;
    public /*out*/ readonly modifiedIpsecTunnel!: pulumi.Output<outputs.MagicWanIpsecTunnelModifiedIpsecTunnel>;
    /**
     * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A randomly generated or provided string for use in the IPsec tunnel.
     */
    public readonly psk!: pulumi.Output<string | undefined>;
    /**
     * If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     */
    public readonly replayProtection!: pulumi.Output<boolean>;

    /**
     * Create a MagicWanIpsecTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicWanIpsecTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MagicWanIpsecTunnelArgs | MagicWanIpsecTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MagicWanIpsecTunnelState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["cloudflareEndpoint"] = state ? state.cloudflareEndpoint : undefined;
            resourceInputs["customerEndpoint"] = state ? state.customerEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["interfaceAddress"] = state ? state.interfaceAddress : undefined;
            resourceInputs["ipsecTunnel"] = state ? state.ipsecTunnel : undefined;
            resourceInputs["ipsecTunnelId"] = state ? state.ipsecTunnelId : undefined;
            resourceInputs["ipsecTunnels"] = state ? state.ipsecTunnels : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["modifiedIpsecTunnel"] = state ? state.modifiedIpsecTunnel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["replayProtection"] = state ? state.replayProtection : undefined;
        } else {
            const args = argsOrState as MagicWanIpsecTunnelArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.cloudflareEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudflareEndpoint'");
            }
            if ((!args || args.interfaceAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceAddress'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["cloudflareEndpoint"] = args ? args.cloudflareEndpoint : undefined;
            resourceInputs["customerEndpoint"] = args ? args.customerEndpoint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["interfaceAddress"] = args ? args.interfaceAddress : undefined;
            resourceInputs["ipsecTunnelId"] = args ? args.ipsecTunnelId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["replayProtection"] = args ? args.replayProtection : undefined;
            resourceInputs["ipsecTunnel"] = undefined /*out*/;
            resourceInputs["ipsecTunnels"] = undefined /*out*/;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["modifiedIpsecTunnel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "cloudflare:index/ipsecTunnel:IpsecTunnel" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MagicWanIpsecTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MagicWanIpsecTunnel resources.
 */
export interface MagicWanIpsecTunnelState {
    /**
     * Identifier
     */
    accountId?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint?: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     */
    customerEndpoint?: pulumi.Input<string>;
    /**
     * An optional description forthe IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.MagicWanIpsecTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress?: pulumi.Input<string>;
    ipsecTunnel?: pulumi.Input<inputs.MagicWanIpsecTunnelIpsecTunnel>;
    /**
     * Identifier
     */
    ipsecTunnelId?: pulumi.Input<string>;
    ipsecTunnels?: pulumi.Input<pulumi.Input<inputs.MagicWanIpsecTunnelIpsecTunnel>[]>;
    modified?: pulumi.Input<boolean>;
    modifiedIpsecTunnel?: pulumi.Input<inputs.MagicWanIpsecTunnelModifiedIpsecTunnel>;
    /**
     * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     */
    name?: pulumi.Input<string>;
    /**
     * A randomly generated or provided string for use in the IPsec tunnel.
     */
    psk?: pulumi.Input<string>;
    /**
     * If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     */
    replayProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MagicWanIpsecTunnel resource.
 */
export interface MagicWanIpsecTunnelArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     */
    customerEndpoint?: pulumi.Input<string>;
    /**
     * An optional description forthe IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.MagicWanIpsecTunnelHealthCheck>;
    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * Identifier
     */
    ipsecTunnelId?: pulumi.Input<string>;
    /**
     * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     */
    name: pulumi.Input<string>;
    /**
     * A randomly generated or provided string for use in the IPsec tunnel.
     */
    psk?: pulumi.Input<string>;
    /**
     * If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     */
    replayProtection?: pulumi.Input<boolean>;
}
