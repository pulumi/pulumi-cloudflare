// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWorker = new cloudflare.Worker("example_worker", {
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: "my-worker",
 *     logpush: true,
 *     observability: {
 *         enabled: true,
 *         head_sampling_rate: 1,
 *         logs: {
 *             enabled: true,
 *             headSamplingRate: 1,
 *             invocationLogs: true,
 *         },
 *     },
 *     subdomain: {
 *         enabled: true,
 *         previews_enabled: true,
 *     },
 *     tags: [
 *         "my-team",
 *         "my-public-api",
 *     ],
 *     tailConsumers: [{
 *         name: "my-tail-consumer",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/worker:Worker example '<account_id>/<worker_id>'
 * ```
 */
export class Worker extends pulumi.CustomResource {
    /**
     * Get an existing Worker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerState, opts?: pulumi.CustomResourceOptions): Worker {
        return new Worker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/worker:Worker';

    /**
     * Returns true if the given object is an instance of Worker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Worker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Worker.__pulumiType;
    }

    /**
     * Identifier.
     */
    declare public readonly accountId: pulumi.Output<string>;
    /**
     * When the Worker was created.
     */
    declare public /*out*/ readonly createdOn: pulumi.Output<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    declare public readonly logpush: pulumi.Output<boolean>;
    /**
     * Name of the Worker.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Observability settings for the Worker.
     */
    declare public readonly observability: pulumi.Output<outputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    declare public readonly subdomain: pulumi.Output<outputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    declare public readonly tags: pulumi.Output<string[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    declare public readonly tailConsumers: pulumi.Output<outputs.WorkerTailConsumer[]>;
    /**
     * When the Worker was most recently updated.
     */
    declare public /*out*/ readonly updatedOn: pulumi.Output<string>;

    /**
     * Create a Worker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkerArgs | WorkerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkerState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["createdOn"] = state?.createdOn;
            resourceInputs["logpush"] = state?.logpush;
            resourceInputs["name"] = state?.name;
            resourceInputs["observability"] = state?.observability;
            resourceInputs["subdomain"] = state?.subdomain;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tailConsumers"] = state?.tailConsumers;
            resourceInputs["updatedOn"] = state?.updatedOn;
        } else {
            const args = argsOrState as WorkerArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["logpush"] = args?.logpush;
            resourceInputs["name"] = args?.name;
            resourceInputs["observability"] = args?.observability;
            resourceInputs["subdomain"] = args?.subdomain;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tailConsumers"] = args?.tailConsumers;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["updatedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Worker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Worker resources.
 */
export interface WorkerState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When the Worker was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the Worker.
     */
    name?: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    subdomain?: pulumi.Input<inputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerTailConsumer>[]>;
    /**
     * When the Worker was most recently updated.
     */
    updatedOn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Worker resource.
 */
export interface WorkerArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the Worker.
     */
    name: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    subdomain?: pulumi.Input<inputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerTailConsumer>[]>;
}
