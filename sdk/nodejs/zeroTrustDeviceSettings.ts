// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleZeroTrustDeviceSettings = new cloudflare.ZeroTrustDeviceSettings("example_zero_trust_device_settings", {
 *     accountId: "699d98642c564d2e855e9661899b7252",
 *     disableForTime: 0,
 *     gatewayProxyEnabled: true,
 *     gatewayUdpProxyEnabled: true,
 *     rootCertificateInstallationEnabled: true,
 *     useZtVirtualIp: true,
 * });
 * ```
 */
export class ZeroTrustDeviceSettings extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustDeviceSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustDeviceSettingsState, opts?: pulumi.CustomResourceOptions): ZeroTrustDeviceSettings {
        return new ZeroTrustDeviceSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustDeviceSettings:ZeroTrustDeviceSettings';

    /**
     * Returns true if the given object is an instance of ZeroTrustDeviceSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustDeviceSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustDeviceSettings.__pulumiType;
    }

    declare public readonly accountId: pulumi.Output<string>;
    /**
     * Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
     */
    declare public readonly disableForTime: pulumi.Output<number | undefined>;
    /**
     * Enable gateway proxy filtering on TCP.
     */
    declare public readonly gatewayProxyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Enable gateway proxy filtering on UDP.
     */
    declare public readonly gatewayUdpProxyEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Enable installation of cloudflare managed root certificate.
     */
    declare public readonly rootCertificateInstallationEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Enable using CGNAT virtual IPv4.
     */
    declare public readonly useZtVirtualIp: pulumi.Output<boolean | undefined>;

    /**
     * Create a ZeroTrustDeviceSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustDeviceSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustDeviceSettingsArgs | ZeroTrustDeviceSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustDeviceSettingsState | undefined;
            resourceInputs["accountId"] = state?.accountId;
            resourceInputs["disableForTime"] = state?.disableForTime;
            resourceInputs["gatewayProxyEnabled"] = state?.gatewayProxyEnabled;
            resourceInputs["gatewayUdpProxyEnabled"] = state?.gatewayUdpProxyEnabled;
            resourceInputs["rootCertificateInstallationEnabled"] = state?.rootCertificateInstallationEnabled;
            resourceInputs["useZtVirtualIp"] = state?.useZtVirtualIp;
        } else {
            const args = argsOrState as ZeroTrustDeviceSettingsArgs | undefined;
            if (args?.accountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args?.accountId;
            resourceInputs["disableForTime"] = args?.disableForTime;
            resourceInputs["gatewayProxyEnabled"] = args?.gatewayProxyEnabled;
            resourceInputs["gatewayUdpProxyEnabled"] = args?.gatewayUdpProxyEnabled;
            resourceInputs["rootCertificateInstallationEnabled"] = args?.rootCertificateInstallationEnabled;
            resourceInputs["useZtVirtualIp"] = args?.useZtVirtualIp;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustDeviceSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustDeviceSettings resources.
 */
export interface ZeroTrustDeviceSettingsState {
    accountId?: pulumi.Input<string>;
    /**
     * Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
     */
    disableForTime?: pulumi.Input<number>;
    /**
     * Enable gateway proxy filtering on TCP.
     */
    gatewayProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Enable gateway proxy filtering on UDP.
     */
    gatewayUdpProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Enable installation of cloudflare managed root certificate.
     */
    rootCertificateInstallationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable using CGNAT virtual IPv4.
     */
    useZtVirtualIp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ZeroTrustDeviceSettings resource.
 */
export interface ZeroTrustDeviceSettingsArgs {
    accountId: pulumi.Input<string>;
    /**
     * Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
     */
    disableForTime?: pulumi.Input<number>;
    /**
     * Enable gateway proxy filtering on TCP.
     */
    gatewayProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Enable gateway proxy filtering on UDP.
     */
    gatewayUdpProxyEnabled?: pulumi.Input<boolean>;
    /**
     * Enable installation of cloudflare managed root certificate.
     */
    rootCertificateInstallationEnabled?: pulumi.Input<boolean>;
    /**
     * Enable using CGNAT virtual IPv4.
     */
    useZtVirtualIp?: pulumi.Input<boolean>;
}
