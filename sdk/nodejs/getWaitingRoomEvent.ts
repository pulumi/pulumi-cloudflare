// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWaitingRoomEvent = cloudflare.getWaitingRoomEvent({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     waitingRoomId: "699d98642c564d2e855e9661899b7252",
 *     eventId: "25756b2dfe6e378a06b033b670413757",
 * });
 * ```
 */
export function getWaitingRoomEvent(args: GetWaitingRoomEventArgs, opts?: pulumi.InvokeOptions): Promise<GetWaitingRoomEventResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getWaitingRoomEvent:getWaitingRoomEvent", {
        "eventId": args.eventId,
        "waitingRoomId": args.waitingRoomId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWaitingRoomEvent.
 */
export interface GetWaitingRoomEventArgs {
    eventId?: string;
    waitingRoomId: string;
    /**
     * Identifier.
     */
    zoneId: string;
}

/**
 * A collection of values returned by getWaitingRoomEvent.
 */
export interface GetWaitingRoomEventResult {
    readonly createdOn: string;
    /**
     * If set, the event will override the waiting room's `customPageHtml` property while it is active. If null, the event will inherit it.
     */
    readonly customPageHtml: string;
    /**
     * A note that you can use to add more details about the event.
     */
    readonly description: string;
    /**
     * If set, the event will override the waiting room's `disableSessionRenewal` property while it is active. If null, the event will inherit it.
     */
    readonly disableSessionRenewal: boolean;
    /**
     * An ISO 8601 timestamp that marks the end of the event.
     */
    readonly eventEndTime: string;
    readonly eventId?: string;
    /**
     * An ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. The start time must be at least one minute before `eventEndTime`.
     */
    readonly eventStartTime: string;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    readonly modifiedOn: string;
    /**
     * A unique name to identify the event. Only alphanumeric characters, hyphens and underscores are allowed.
     */
    readonly name: string;
    /**
     * If set, the event will override the waiting room's `newUsersPerMinute` property while it is active. If null, the event will inherit it. This can only be set if the event's `totalActiveUsers` property is also set.
     */
    readonly newUsersPerMinute: number;
    /**
     * An ISO 8601 timestamp that marks when to begin queueing all users before the event starts. The prequeue must start at least five minutes before `eventStartTime`.
     */
    readonly prequeueStartTime: string;
    /**
     * If set, the event will override the waiting room's `queueingMethod` property while it is active. If null, the event will inherit it.
     */
    readonly queueingMethod: string;
    /**
     * If set, the event will override the waiting room's `sessionDuration` property while it is active. If null, the event will inherit it.
     */
    readonly sessionDuration: number;
    /**
     * If enabled, users in the prequeue will be shuffled randomly at the `eventStartTime`. Requires that `prequeueStartTime` is not null. This is useful for situations when many users will join the event prequeue at the same time and you want to shuffle them to ensure fairness. Naturally, it makes the most sense to enable this feature when the `queueingMethod` during the event respects ordering such as **fifo**, or else the shuffling may be unnecessary.
     */
    readonly shuffleAtEventStart: boolean;
    /**
     * Suspends or allows an event. If set to `true`, the event is ignored and traffic will be handled based on the waiting room configuration.
     */
    readonly suspended: boolean;
    /**
     * If set, the event will override the waiting room's `totalActiveUsers` property while it is active. If null, the event will inherit it. This can only be set if the event's `newUsersPerMinute` property is also set.
     */
    readonly totalActiveUsers: number;
    /**
     * If set, the event will override the waiting room's `turnstileAction` property while it is active. If null, the event will inherit it.
     * Available values: "log", "infiniteQueue".
     */
    readonly turnstileAction: string;
    /**
     * If set, the event will override the waiting room's `turnstileMode` property while it is active. If null, the event will inherit it.
     * Available values: "off", "invisible", "visible*non*interactive", "visibleManaged".
     */
    readonly turnstileMode: string;
    readonly waitingRoomId: string;
    /**
     * Identifier.
     */
    readonly zoneId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleWaitingRoomEvent = cloudflare.getWaitingRoomEvent({
 *     zoneId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     waitingRoomId: "699d98642c564d2e855e9661899b7252",
 *     eventId: "25756b2dfe6e378a06b033b670413757",
 * });
 * ```
 */
export function getWaitingRoomEventOutput(args: GetWaitingRoomEventOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetWaitingRoomEventResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getWaitingRoomEvent:getWaitingRoomEvent", {
        "eventId": args.eventId,
        "waitingRoomId": args.waitingRoomId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getWaitingRoomEvent.
 */
export interface GetWaitingRoomEventOutputArgs {
    eventId?: pulumi.Input<string>;
    waitingRoomId: pulumi.Input<string>;
    /**
     * Identifier.
     */
    zoneId: pulumi.Input<string>;
}
