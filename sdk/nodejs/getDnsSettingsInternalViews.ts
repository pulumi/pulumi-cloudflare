// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsSettingsInternalViews = cloudflare.getDnsSettingsInternalViews({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: {
 *         contains: "view",
 *         endswith: "ew",
 *         exact: "my view",
 *         startswith: "my",
 *     },
 *     order: "name",
 *     zoneId: "ae29bea30e2e427ba9cd8d78b628177b",
 *     zoneName: "www.example.com",
 * });
 * ```
 */
export function getDnsSettingsInternalViews(args: GetDnsSettingsInternalViewsArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsSettingsInternalViewsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getDnsSettingsInternalViews:getDnsSettingsInternalViews", {
        "accountId": args.accountId,
        "direction": args.direction,
        "match": args.match,
        "maxItems": args.maxItems,
        "name": args.name,
        "order": args.order,
        "zoneId": args.zoneId,
        "zoneName": args.zoneName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsSettingsInternalViews.
 */
export interface GetDnsSettingsInternalViewsArgs {
    /**
     * Identifier
     */
    accountId: string;
    /**
     * Direction to order DNS views in.
     */
    direction?: string;
    /**
     * Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
     */
    match?: string;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: number;
    name?: inputs.GetDnsSettingsInternalViewsName;
    /**
     * Field to order DNS views by.
     */
    order?: string;
    /**
     * A zone ID that exists in the zones list for the view.
     */
    zoneId?: string;
    /**
     * A zone name that exists in the zones list for the view.
     */
    zoneName?: string;
}

/**
 * A collection of values returned by getDnsSettingsInternalViews.
 */
export interface GetDnsSettingsInternalViewsResult {
    /**
     * Identifier
     */
    readonly accountId: string;
    /**
     * Direction to order DNS views in.
     */
    readonly direction: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
     */
    readonly match: string;
    /**
     * Max items to fetch, default: 1000
     */
    readonly maxItems?: number;
    readonly name?: outputs.GetDnsSettingsInternalViewsName;
    /**
     * Field to order DNS views by.
     */
    readonly order?: string;
    /**
     * The items returned by the data source
     */
    readonly results: outputs.GetDnsSettingsInternalViewsResult[];
    /**
     * A zone ID that exists in the zones list for the view.
     */
    readonly zoneId?: string;
    /**
     * A zone name that exists in the zones list for the view.
     */
    readonly zoneName?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleDnsSettingsInternalViews = cloudflare.getDnsSettingsInternalViews({
 *     accountId: "023e105f4ecef8ad9ca31a8372d0c353",
 *     name: {
 *         contains: "view",
 *         endswith: "ew",
 *         exact: "my view",
 *         startswith: "my",
 *     },
 *     order: "name",
 *     zoneId: "ae29bea30e2e427ba9cd8d78b628177b",
 *     zoneName: "www.example.com",
 * });
 * ```
 */
export function getDnsSettingsInternalViewsOutput(args: GetDnsSettingsInternalViewsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDnsSettingsInternalViewsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudflare:index/getDnsSettingsInternalViews:getDnsSettingsInternalViews", {
        "accountId": args.accountId,
        "direction": args.direction,
        "match": args.match,
        "maxItems": args.maxItems,
        "name": args.name,
        "order": args.order,
        "zoneId": args.zoneId,
        "zoneName": args.zoneName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsSettingsInternalViews.
 */
export interface GetDnsSettingsInternalViewsOutputArgs {
    /**
     * Identifier
     */
    accountId: pulumi.Input<string>;
    /**
     * Direction to order DNS views in.
     */
    direction?: pulumi.Input<string>;
    /**
     * Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
     */
    match?: pulumi.Input<string>;
    /**
     * Max items to fetch, default: 1000
     */
    maxItems?: pulumi.Input<number>;
    name?: pulumi.Input<inputs.GetDnsSettingsInternalViewsNameArgs>;
    /**
     * Field to order DNS views by.
     */
    order?: pulumi.Input<string>;
    /**
     * A zone ID that exists in the zones list for the view.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * A zone name that exists in the zones list for the view.
     */
    zoneName?: pulumi.Input<string>;
}
