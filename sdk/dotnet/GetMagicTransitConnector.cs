// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicTransitConnector
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitConnector = Cloudflare.GetMagicTransitConnector.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ConnectorId = "connector_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicTransitConnectorResult> InvokeAsync(GetMagicTransitConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicTransitConnectorResult>("cloudflare:index/getMagicTransitConnector:getMagicTransitConnector", args ?? new GetMagicTransitConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitConnector = Cloudflare.GetMagicTransitConnector.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ConnectorId = "connector_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitConnectorResult> Invoke(GetMagicTransitConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitConnectorResult>("cloudflare:index/getMagicTransitConnector:getMagicTransitConnector", args ?? new GetMagicTransitConnectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitConnector = Cloudflare.GetMagicTransitConnector.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ConnectorId = "connector_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitConnectorResult> Invoke(GetMagicTransitConnectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitConnectorResult>("cloudflare:index/getMagicTransitConnector:getMagicTransitConnector", args ?? new GetMagicTransitConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicTransitConnectorArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("connectorId")]
        public string? ConnectorId { get; set; }

        public GetMagicTransitConnectorArgs()
        {
        }
        public static new GetMagicTransitConnectorArgs Empty => new GetMagicTransitConnectorArgs();
    }

    public sealed class GetMagicTransitConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        public GetMagicTransitConnectorInvokeArgs()
        {
        }
        public static new GetMagicTransitConnectorInvokeArgs Empty => new GetMagicTransitConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicTransitConnectorResult
    {
        public readonly string AccountId;
        public readonly bool Activated;
        public readonly string? ConnectorId;
        public readonly Outputs.GetMagicTransitConnectorDeviceResult Device;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly double InterruptWindowDurationHours;
        public readonly double InterruptWindowHourOfDay;
        public readonly string LastHeartbeat;
        public readonly string LastSeenVersion;
        public readonly string LastUpdated;
        public readonly string Notes;
        public readonly string Timezone;

        [OutputConstructor]
        private GetMagicTransitConnectorResult(
            string accountId,

            bool activated,

            string? connectorId,

            Outputs.GetMagicTransitConnectorDeviceResult device,

            string id,

            double interruptWindowDurationHours,

            double interruptWindowHourOfDay,

            string lastHeartbeat,

            string lastSeenVersion,

            string lastUpdated,

            string notes,

            string timezone)
        {
            AccountId = accountId;
            Activated = activated;
            ConnectorId = connectorId;
            Device = device;
            Id = id;
            InterruptWindowDurationHours = interruptWindowDurationHours;
            InterruptWindowHourOfDay = interruptWindowHourOfDay;
            LastHeartbeat = lastHeartbeat;
            LastSeenVersion = lastSeenVersion;
            LastUpdated = lastUpdated;
            Notes = notes;
            Timezone = timezone;
        }
    }
}
