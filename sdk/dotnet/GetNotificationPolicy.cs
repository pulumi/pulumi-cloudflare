// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetNotificationPolicy
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicy = Cloudflare.GetNotificationPolicy.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PolicyId = "0da2b59e-f118-439d-8097-bdfb215203c9",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNotificationPolicyResult> InvokeAsync(GetNotificationPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationPolicyResult>("cloudflare:index/getNotificationPolicy:getNotificationPolicy", args ?? new GetNotificationPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicy = Cloudflare.GetNotificationPolicy.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PolicyId = "0da2b59e-f118-439d-8097-bdfb215203c9",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationPolicyResult> Invoke(GetNotificationPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationPolicyResult>("cloudflare:index/getNotificationPolicy:getNotificationPolicy", args ?? new GetNotificationPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicy = Cloudflare.GetNotificationPolicy.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PolicyId = "0da2b59e-f118-439d-8097-bdfb215203c9",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationPolicyResult> Invoke(GetNotificationPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationPolicyResult>("cloudflare:index/getNotificationPolicy:getNotificationPolicy", args ?? new GetNotificationPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account id
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of a notification policy
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        public GetNotificationPolicyArgs()
        {
        }
        public static new GetNotificationPolicyArgs Empty => new GetNotificationPolicyArgs();
    }

    public sealed class GetNotificationPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account id
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of a notification policy
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public GetNotificationPolicyInvokeArgs()
        {
        }
        public static new GetNotificationPolicyInvokeArgs Empty => new GetNotificationPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationPolicyResult
    {
        /// <summary>
        /// The account id
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Optional specification of how often to re-alert from the same incident, not support on all alert types.
        /// </summary>
        public readonly string AlertInterval;
        /// <summary>
        /// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
        /// </summary>
        public readonly string AlertType;
        public readonly string Created;
        /// <summary>
        /// Optional description for the Notification policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether or not the Notification policy is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
        /// </summary>
        public readonly Outputs.GetNotificationPolicyFiltersResult Filters;
        /// <summary>
        /// The unique identifier of a notification policy
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
        /// </summary>
        public readonly Outputs.GetNotificationPolicyMechanismsResult Mechanisms;
        public readonly string Modified;
        /// <summary>
        /// Name of the policy.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The unique identifier of a notification policy
        /// </summary>
        public readonly string? PolicyId;

        [OutputConstructor]
        private GetNotificationPolicyResult(
            string accountId,

            string alertInterval,

            string alertType,

            string created,

            string description,

            bool enabled,

            Outputs.GetNotificationPolicyFiltersResult filters,

            string id,

            Outputs.GetNotificationPolicyMechanismsResult mechanisms,

            string modified,

            string name,

            string? policyId)
        {
            AccountId = accountId;
            AlertInterval = alertInterval;
            AlertType = alertType;
            Created = created;
            Description = description;
            Enabled = enabled;
            Filters = filters;
            Id = id;
            Mechanisms = mechanisms;
            Modified = modified;
            Name = name;
            PolicyId = policyId;
        }
    }
}
