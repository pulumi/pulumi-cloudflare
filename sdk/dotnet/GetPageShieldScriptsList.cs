// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetPageShieldScriptsList
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageShieldScriptsList = Cloudflare.GetPageShieldScriptsList.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Direction = "asc",
        ///         ExcludeUrls = "blog.cloudflare.com,www.example",
        ///         Export = "csv",
        ///         Hosts = "blog.cloudflare.com,www.example*,*cloudflare.com",
        ///         OrderBy = "first_seen_at",
        ///         Page = "2",
        ///         PageUrl = "example.com/page,*/checkout,example.com/*,*checkout*",
        ///         PerPage = 100,
        ///         PrioritizeMalicious = true,
        ///         Status = "active,inactive",
        ///         Urls = "blog.cloudflare.com,www.example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPageShieldScriptsListResult> InvokeAsync(GetPageShieldScriptsListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPageShieldScriptsListResult>("cloudflare:index/getPageShieldScriptsList:getPageShieldScriptsList", args ?? new GetPageShieldScriptsListArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageShieldScriptsList = Cloudflare.GetPageShieldScriptsList.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Direction = "asc",
        ///         ExcludeUrls = "blog.cloudflare.com,www.example",
        ///         Export = "csv",
        ///         Hosts = "blog.cloudflare.com,www.example*,*cloudflare.com",
        ///         OrderBy = "first_seen_at",
        ///         Page = "2",
        ///         PageUrl = "example.com/page,*/checkout,example.com/*,*checkout*",
        ///         PerPage = 100,
        ///         PrioritizeMalicious = true,
        ///         Status = "active,inactive",
        ///         Urls = "blog.cloudflare.com,www.example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPageShieldScriptsListResult> Invoke(GetPageShieldScriptsListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPageShieldScriptsListResult>("cloudflare:index/getPageShieldScriptsList:getPageShieldScriptsList", args ?? new GetPageShieldScriptsListInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageShieldScriptsList = Cloudflare.GetPageShieldScriptsList.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Direction = "asc",
        ///         ExcludeUrls = "blog.cloudflare.com,www.example",
        ///         Export = "csv",
        ///         Hosts = "blog.cloudflare.com,www.example*,*cloudflare.com",
        ///         OrderBy = "first_seen_at",
        ///         Page = "2",
        ///         PageUrl = "example.com/page,*/checkout,example.com/*,*checkout*",
        ///         PerPage = 100,
        ///         PrioritizeMalicious = true,
        ///         Status = "active,inactive",
        ///         Urls = "blog.cloudflare.com,www.example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPageShieldScriptsListResult> Invoke(GetPageShieldScriptsListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPageShieldScriptsListResult>("cloudflare:index/getPageShieldScriptsList:getPageShieldScriptsList", args ?? new GetPageShieldScriptsListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPageShieldScriptsListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direction used to sort returned scripts.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
        /// </summary>
        [Input("excludeCdnCgi")]
        public bool? ExcludeCdnCgi { get; set; }

        /// <summary>
        /// When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
        /// content matches and they share the same url host and zone hostname. In such case, we return the most
        /// recent script for the URL host and zone hostname combination.
        /// </summary>
        [Input("excludeDuplicates")]
        public bool? ExcludeDuplicates { get; set; }

        /// <summary>
        /// Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
        /// </summary>
        [Input("excludeUrls")]
        public string? ExcludeUrls { get; set; }

        /// <summary>
        /// Export the list of scripts as a file.
        /// Available values: "csv".
        /// </summary>
        [Input("export")]
        public string? Export { get; set; }

        /// <summary>
        /// Includes scripts that match one or more URL-encoded hostnames separated by commas.
        /// </summary>
        [Input("hosts")]
        public string? Hosts { get; set; }

        [Input("maxItems")]
        public int? MaxItems { get; set; }

        [Input("orderBy")]
        public string? OrderBy { get; set; }

        [Input("page")]
        public string? Page { get; set; }

        [Input("pageUrl")]
        public string? PageUrl { get; set; }

        [Input("perPage")]
        public double? PerPage { get; set; }

        [Input("prioritizeMalicious")]
        public bool? PrioritizeMalicious { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("urls")]
        public string? Urls { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetPageShieldScriptsListArgs()
        {
        }
        public static new GetPageShieldScriptsListArgs Empty => new GetPageShieldScriptsListArgs();
    }

    public sealed class GetPageShieldScriptsListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direction used to sort returned scripts.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
        /// </summary>
        [Input("excludeCdnCgi")]
        public Input<bool>? ExcludeCdnCgi { get; set; }

        /// <summary>
        /// When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
        /// content matches and they share the same url host and zone hostname. In such case, we return the most
        /// recent script for the URL host and zone hostname combination.
        /// </summary>
        [Input("excludeDuplicates")]
        public Input<bool>? ExcludeDuplicates { get; set; }

        /// <summary>
        /// Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
        /// </summary>
        [Input("excludeUrls")]
        public Input<string>? ExcludeUrls { get; set; }

        /// <summary>
        /// Export the list of scripts as a file.
        /// Available values: "csv".
        /// </summary>
        [Input("export")]
        public Input<string>? Export { get; set; }

        /// <summary>
        /// Includes scripts that match one or more URL-encoded hostnames separated by commas.
        /// </summary>
        [Input("hosts")]
        public Input<string>? Hosts { get; set; }

        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        [Input("page")]
        public Input<string>? Page { get; set; }

        [Input("pageUrl")]
        public Input<string>? PageUrl { get; set; }

        [Input("perPage")]
        public Input<double>? PerPage { get; set; }

        [Input("prioritizeMalicious")]
        public Input<bool>? PrioritizeMalicious { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("urls")]
        public Input<string>? Urls { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetPageShieldScriptsListInvokeArgs()
        {
        }
        public static new GetPageShieldScriptsListInvokeArgs Empty => new GetPageShieldScriptsListInvokeArgs();
    }


    [OutputType]
    public sealed class GetPageShieldScriptsListResult
    {
        /// <summary>
        /// The direction used to sort returned scripts.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
        /// </summary>
        public readonly bool ExcludeCdnCgi;
        /// <summary>
        /// When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
        /// content matches and they share the same url host and zone hostname. In such case, we return the most
        /// recent script for the URL host and zone hostname combination.
        /// </summary>
        public readonly bool ExcludeDuplicates;
        /// <summary>
        /// Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
        /// </summary>
        public readonly string? ExcludeUrls;
        /// <summary>
        /// Export the list of scripts as a file.
        /// Available values: "csv".
        /// </summary>
        public readonly string? Export;
        /// <summary>
        /// Includes scripts that match one or more URL-encoded hostnames separated by commas.
        /// </summary>
        public readonly string? Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? MaxItems;
        public readonly string? OrderBy;
        public readonly string? Page;
        public readonly string? PageUrl;
        public readonly double? PerPage;
        public readonly bool? PrioritizeMalicious;
        public readonly ImmutableArray<Outputs.GetPageShieldScriptsListResultResult> Results;
        public readonly string? Status;
        public readonly string? Urls;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetPageShieldScriptsListResult(
            string? direction,

            bool excludeCdnCgi,

            bool excludeDuplicates,

            string? excludeUrls,

            string? export,

            string? hosts,

            string id,

            int? maxItems,

            string? orderBy,

            string? page,

            string? pageUrl,

            double? perPage,

            bool? prioritizeMalicious,

            ImmutableArray<Outputs.GetPageShieldScriptsListResultResult> results,

            string? status,

            string? urls,

            string zoneId)
        {
            Direction = direction;
            ExcludeCdnCgi = excludeCdnCgi;
            ExcludeDuplicates = excludeDuplicates;
            ExcludeUrls = excludeUrls;
            Export = export;
            Hosts = hosts;
            Id = id;
            MaxItems = maxItems;
            OrderBy = orderBy;
            Page = page;
            PageUrl = pageUrl;
            PerPage = perPage;
            PrioritizeMalicious = prioritizeMalicious;
            Results = results;
            Status = status;
            Urls = urls;
            ZoneId = zoneId;
        }
    }
}
