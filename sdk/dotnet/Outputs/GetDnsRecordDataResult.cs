// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetDnsRecordDataResult
    {
        /// <summary>
        /// Algorithm.
        /// </summary>
        public readonly double Algorithm;
        /// <summary>
        /// Altitude of location in meters.
        /// </summary>
        public readonly double Altitude;
        /// <summary>
        /// Certificate.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Digest.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// Digest Type.
        /// </summary>
        public readonly double DigestType;
        /// <summary>
        /// fingerprint.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// Flags for the CAA record.
        /// </summary>
        public readonly object Flags;
        /// <summary>
        /// Key Tag.
        /// </summary>
        public readonly double KeyTag;
        /// <summary>
        /// Degrees of latitude.
        /// </summary>
        public readonly double LatDegrees;
        /// <summary>
        /// Latitude direction.
        /// </summary>
        public readonly string LatDirection;
        /// <summary>
        /// Minutes of latitude.
        /// </summary>
        public readonly double LatMinutes;
        /// <summary>
        /// Seconds of latitude.
        /// </summary>
        public readonly double LatSeconds;
        /// <summary>
        /// Degrees of longitude.
        /// </summary>
        public readonly double LongDegrees;
        /// <summary>
        /// Longitude direction.
        /// </summary>
        public readonly string LongDirection;
        /// <summary>
        /// Minutes of longitude.
        /// </summary>
        public readonly double LongMinutes;
        /// <summary>
        /// Seconds of longitude.
        /// </summary>
        public readonly double LongSeconds;
        /// <summary>
        /// Matching Type.
        /// </summary>
        public readonly double MatchingType;
        /// <summary>
        /// Order.
        /// </summary>
        public readonly double Order;
        /// <summary>
        /// The port of the service.
        /// </summary>
        public readonly double Port;
        /// <summary>
        /// Horizontal precision of location.
        /// </summary>
        public readonly double PrecisionHorz;
        /// <summary>
        /// Vertical precision of location.
        /// </summary>
        public readonly double PrecisionVert;
        /// <summary>
        /// Preference.
        /// </summary>
        public readonly double Preference;
        /// <summary>
        /// priority.
        /// </summary>
        public readonly double Priority;
        /// <summary>
        /// Protocol.
        /// </summary>
        public readonly double Protocol;
        /// <summary>
        /// Public Key.
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// Regex.
        /// </summary>
        public readonly string Regex;
        /// <summary>
        /// Replacement.
        /// </summary>
        public readonly string Replacement;
        /// <summary>
        /// Selector.
        /// </summary>
        public readonly double Selector;
        /// <summary>
        /// Service.
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// Size of location in meters.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// Name of the property controlled by this record (e.g.: issue, issuewild, iodef).
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// target.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// Type.
        /// </summary>
        public readonly double Type;
        /// <summary>
        /// Usage.
        /// </summary>
        public readonly double Usage;
        /// <summary>
        /// Value of the record. This field's semantics depend on the chosen tag.
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The record weight.
        /// </summary>
        public readonly double Weight;

        [OutputConstructor]
        private GetDnsRecordDataResult(
            double algorithm,

            double altitude,

            string certificate,

            string digest,

            double digestType,

            string fingerprint,

            object flags,

            double keyTag,

            double latDegrees,

            string latDirection,

            double latMinutes,

            double latSeconds,

            double longDegrees,

            string longDirection,

            double longMinutes,

            double longSeconds,

            double matchingType,

            double order,

            double port,

            double precisionHorz,

            double precisionVert,

            double preference,

            double priority,

            double protocol,

            string publicKey,

            string regex,

            string replacement,

            double selector,

            string service,

            double size,

            string tag,

            string target,

            double type,

            double usage,

            string value,

            double weight)
        {
            Algorithm = algorithm;
            Altitude = altitude;
            Certificate = certificate;
            Digest = digest;
            DigestType = digestType;
            Fingerprint = fingerprint;
            Flags = flags;
            KeyTag = keyTag;
            LatDegrees = latDegrees;
            LatDirection = latDirection;
            LatMinutes = latMinutes;
            LatSeconds = latSeconds;
            LongDegrees = longDegrees;
            LongDirection = longDirection;
            LongMinutes = longMinutes;
            LongSeconds = longSeconds;
            MatchingType = matchingType;
            Order = order;
            Port = port;
            PrecisionHorz = precisionHorz;
            PrecisionVert = precisionVert;
            Preference = preference;
            Priority = priority;
            Protocol = protocol;
            PublicKey = publicKey;
            Regex = regex;
            Replacement = replacement;
            Selector = selector;
            Service = service;
            Size = size;
            Tag = tag;
            Target = target;
            Type = type;
            Usage = usage;
            Value = value;
            Weight = weight;
        }
    }
}
