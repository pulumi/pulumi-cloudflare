// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetQueueConsumerSettingsResult
    {
        /// <summary>
        /// The maximum number of messages to include in a batch.
        /// </summary>
        public readonly double BatchSize;
        /// <summary>
        /// Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform's maximum (recommended).
        /// </summary>
        public readonly double MaxConcurrency;
        /// <summary>
        /// The maximum number of retries
        /// </summary>
        public readonly double MaxRetries;
        /// <summary>
        /// The number of milliseconds to wait for a batch to fill up before attempting to deliver it
        /// </summary>
        public readonly double MaxWaitTimeMs;
        /// <summary>
        /// The number of seconds to delay before making the message available for another attempt.
        /// </summary>
        public readonly double RetryDelay;
        /// <summary>
        /// The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
        /// </summary>
        public readonly double VisibilityTimeoutMs;

        [OutputConstructor]
        private GetQueueConsumerSettingsResult(
            double batchSize,

            double maxConcurrency,

            double maxRetries,

            double maxWaitTimeMs,

            double retryDelay,

            double visibilityTimeoutMs)
        {
            BatchSize = batchSize;
            MaxConcurrency = maxConcurrency;
            MaxRetries = maxRetries;
            MaxWaitTimeMs = maxWaitTimeMs;
            RetryDelay = retryDelay;
            VisibilityTimeoutMs = visibilityTimeoutMs;
        }
    }
}
