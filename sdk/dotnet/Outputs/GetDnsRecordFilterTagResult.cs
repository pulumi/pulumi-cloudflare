// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetDnsRecordFilterTagResult
    {
        /// <summary>
        /// Name of a tag which must *not* be present on the DNS record. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Absent;
        /// <summary>
        /// A tag and value, of the form `&lt;tag-name&gt;:&lt;tag-value&gt;`. The API will only return DNS records that have a tag named `&lt;tag-name&gt;` whose value contains `&lt;tag-value&gt;`. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Contains;
        /// <summary>
        /// A tag and value, of the form `&lt;tag-name&gt;:&lt;tag-value&gt;`. The API will only return DNS records that have a tag named `&lt;tag-name&gt;` whose value ends with `&lt;tag-value&gt;`. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Endswith;
        /// <summary>
        /// A tag and value, of the form `&lt;tag-name&gt;:&lt;tag-value&gt;`. The API will only return DNS records that have a tag named `&lt;tag-name&gt;` whose value is `&lt;tag-value&gt;`. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Exact;
        /// <summary>
        /// Name of a tag which must be present on the DNS record. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Present;
        /// <summary>
        /// A tag and value, of the form `&lt;tag-name&gt;:&lt;tag-value&gt;`. The API will only return DNS records that have a tag named `&lt;tag-name&gt;` whose value starts with `&lt;tag-value&gt;`. Tag filters are case-insensitive.
        /// </summary>
        public readonly string? Startswith;

        [OutputConstructor]
        private GetDnsRecordFilterTagResult(
            string? absent,

            string? contains,

            string? endswith,

            string? exact,

            string? present,

            string? startswith)
        {
            Absent = absent;
            Contains = contains;
            Endswith = endswith;
            Exact = exact;
            Present = present;
            Startswith = startswith;
        }
    }
}
