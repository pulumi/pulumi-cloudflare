// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class DevicePostureRuleInput
    {
        /// <summary>
        /// The number of active threats from SentinelOne.
        /// </summary>
        public readonly int? ActiveThreats;
        /// <summary>
        /// The UUID of a Cloudflare managed certificate.
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// Specific volume(s) to check for encryption.
        /// </summary>
        public readonly ImmutableArray<string> CheckDisks;
        /// <summary>
        /// The common name for a certificate.
        /// </summary>
        public readonly string? Cn;
        /// <summary>
        /// The workspace one device compliance status. Available values: `compliant`, `noncompliant`.
        /// </summary>
        public readonly string? ComplianceStatus;
        /// <summary>
        /// The workspace one connection id.
        /// </summary>
        public readonly string? ConnectionId;
        /// <summary>
        /// The count comparison operator for kolide. Available values: `&gt;`, `&gt;=`, `&lt;`, `&lt;=`, `==`.
        /// </summary>
        public readonly string? CountOperator;
        /// <summary>
        /// The domain that the client must join.
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// True if the firewall must be enabled.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Checks if the file should exist.
        /// </summary>
        public readonly bool? Exists;
        /// <summary>
        /// The Teams List id.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// True if SentinelOne device is infected.
        /// </summary>
        public readonly bool? Infected;
        /// <summary>
        /// True if SentinelOne device is active.
        /// </summary>
        public readonly bool? IsActive;
        /// <summary>
        /// The number of issues for kolide.
        /// </summary>
        public readonly string? IssueCount;
        /// <summary>
        /// The network status from SentinelOne. Available values: `connected`, `disconnected`, `disconnecting`, `connecting`.
        /// </summary>
        public readonly string? NetworkStatus;
        /// <summary>
        /// The version comparison operator. Available values: `&gt;`, `&gt;=`, `&lt;`, `&lt;=`, `==`.
        /// </summary>
        public readonly string? Operator;
        /// <summary>
        /// OS signal score from Crowdstrike. Value must be between 1 and 100.
        /// </summary>
        public readonly string? Os;
        /// <summary>
        /// The operating system excluding version information.
        /// </summary>
        public readonly string? OsDistroName;
        /// <summary>
        /// The operating system version excluding OS name information or release name.
        /// </summary>
        public readonly string? OsDistroRevision;
        /// <summary>
        /// Overall ZTA score from Crowdstrike. Value must be between 1 and 100.
        /// </summary>
        public readonly string? Overall;
        /// <summary>
        /// The path to the file.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// True if all drives must be encrypted.
        /// </summary>
        public readonly bool? RequireAll;
        /// <summary>
        /// Checks if the application should be running.
        /// </summary>
        public readonly bool? Running;
        /// <summary>
        /// Sensor signal score from Crowdstrike. Value must be between 1 and 100.
        /// </summary>
        public readonly string? SensorConfig;
        /// <summary>
        /// The sha256 hash of the file.
        /// </summary>
        public readonly string? Sha256;
        /// <summary>
        /// The thumbprint of the file certificate.
        /// </summary>
        public readonly string? Thumbprint;
        /// <summary>
        /// The operating system semantic version.
        /// </summary>
        public readonly string? Version;
        /// <summary>
        /// The version comparison operator for crowdstrike. Available values: `&gt;`, `&gt;=`, `&lt;`, `&lt;=`, `==`.
        /// </summary>
        public readonly string? VersionOperator;

        [OutputConstructor]
        private DevicePostureRuleInput(
            int? activeThreats,

            string? certificateId,

            ImmutableArray<string> checkDisks,

            string? cn,

            string? complianceStatus,

            string? connectionId,

            string? countOperator,

            string? domain,

            bool? enabled,

            bool? exists,

            string? id,

            bool? infected,

            bool? isActive,

            string? issueCount,

            string? networkStatus,

            string? @operator,

            string? os,

            string? osDistroName,

            string? osDistroRevision,

            string? overall,

            string? path,

            bool? requireAll,

            bool? running,

            string? sensorConfig,

            string? sha256,

            string? thumbprint,

            string? version,

            string? versionOperator)
        {
            ActiveThreats = activeThreats;
            CertificateId = certificateId;
            CheckDisks = checkDisks;
            Cn = cn;
            ComplianceStatus = complianceStatus;
            ConnectionId = connectionId;
            CountOperator = countOperator;
            Domain = domain;
            Enabled = enabled;
            Exists = exists;
            Id = id;
            Infected = infected;
            IsActive = isActive;
            IssueCount = issueCount;
            NetworkStatus = networkStatus;
            Operator = @operator;
            Os = os;
            OsDistroName = osDistroName;
            OsDistroRevision = osDistroRevision;
            Overall = overall;
            Path = path;
            RequireAll = requireAll;
            Running = running;
            SensorConfig = sensorConfig;
            Sha256 = sha256;
            Thumbprint = thumbprint;
            Version = version;
            VersionOperator = versionOperator;
        }
    }
}
