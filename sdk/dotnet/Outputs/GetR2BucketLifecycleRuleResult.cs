// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetR2BucketLifecycleRuleResult
    {
        /// <summary>
        /// Transition to abort ongoing multipart uploads
        /// </summary>
        public readonly Outputs.GetR2BucketLifecycleRuleAbortMultipartUploadsTransitionResult AbortMultipartUploadsTransition;
        /// <summary>
        /// Conditions that apply to all transitions of this rule
        /// </summary>
        public readonly Outputs.GetR2BucketLifecycleRuleConditionsResult Conditions;
        /// <summary>
        /// Transition to delete objects
        /// </summary>
        public readonly Outputs.GetR2BucketLifecycleRuleDeleteObjectsTransitionResult DeleteObjectsTransition;
        /// <summary>
        /// Whether or not this rule is in effect
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Unique identifier for this rule
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Transitions to change the storage class of objects
        /// </summary>
        public readonly ImmutableArray<Outputs.GetR2BucketLifecycleRuleStorageClassTransitionResult> StorageClassTransitions;

        [OutputConstructor]
        private GetR2BucketLifecycleRuleResult(
            Outputs.GetR2BucketLifecycleRuleAbortMultipartUploadsTransitionResult abortMultipartUploadsTransition,

            Outputs.GetR2BucketLifecycleRuleConditionsResult conditions,

            Outputs.GetR2BucketLifecycleRuleDeleteObjectsTransitionResult deleteObjectsTransition,

            bool enabled,

            string id,

            ImmutableArray<Outputs.GetR2BucketLifecycleRuleStorageClassTransitionResult> storageClassTransitions)
        {
            AbortMultipartUploadsTransition = abortMultipartUploadsTransition;
            Conditions = conditions;
            DeleteObjectsTransition = deleteObjectsTransition;
            Enabled = enabled;
            Id = id;
            StorageClassTransitions = storageClassTransitions;
        }
    }
}
