// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetZeroTrustGatewayPolicyRuleSettingsResult
    {
        /// <summary>
        /// Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> AddHeaders;
        /// <summary>
        /// Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
        /// </summary>
        public readonly bool AllowChildBypass;
        /// <summary>
        /// Define the settings for the Audit SSH action. Settable only for `l4` rules with `audit_ssh` action.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsAuditSshResult AuditSsh;
        /// <summary>
        /// Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsResult BisoAdminControls;
        /// <summary>
        /// Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsBlockPageResult BlockPage;
        /// <summary>
        /// Enable the custom block page. Settable only for `dns` rules with action `block`.
        /// </summary>
        public readonly bool BlockPageEnabled;
        /// <summary>
        /// Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
        /// </summary>
        public readonly string BlockReason;
        /// <summary>
        /// Set to enable MSP accounts to bypass their parent's rules. Only MSP child accounts can set this. Settable for all types of rules.
        /// </summary>
        public readonly bool BypassParentRule;
        /// <summary>
        /// Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsCheckSessionResult CheckSession;
        /// <summary>
        /// Configure custom resolvers to route queries that match the resolver policy. Unused with 'resolve*dns*through*cloudflare' or 'resolve*dns*internally' settings. DNS queries get routed to the address closest to their origin. Only valid when a rule's action set to 'resolve'. Settable only for `dns_resolver` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsDnsResolversResult DnsResolvers;
        /// <summary>
        /// Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsEgressResult Egress;
        /// <summary>
        /// Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dns_resolver` rules.
        /// </summary>
        public readonly bool IgnoreCnameCategoryMatches;
        /// <summary>
        /// Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
        /// </summary>
        public readonly bool InsecureDisableDnssecValidation;
        /// <summary>
        /// Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dns_resolver` rules.
        /// </summary>
        public readonly bool IpCategories;
        /// <summary>
        /// Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dns_resolver` rules.
        /// </summary>
        public readonly bool IpIndicatorFeeds;
        /// <summary>
        /// Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4_override`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsL4overrideResult L4override;
        /// <summary>
        /// Configure a notification to display on the user's device when this rule matched. Settable for all types of rules with the action set to `block`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsNotificationSettingsResult NotificationSettings;
        /// <summary>
        /// Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
        /// </summary>
        public readonly string OverrideHost;
        /// <summary>
        /// Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
        /// </summary>
        public readonly ImmutableArray<string> OverrideIps;
        /// <summary>
        /// Configure DLP payload logging. Settable only for `http` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsPayloadLogResult PayloadLog;
        /// <summary>
        /// Configure settings that apply to quarantine rules. Settable only for `http` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsQuarantineResult Quarantine;
        /// <summary>
        /// Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsRedirectResult Redirect;
        /// <summary>
        /// Configure to forward the query to the internal DNS service, passing the specified 'view*id' as input. Not used when 'dns*resolvers' is specified or 'resolve*dns*through*cloudflare' is set. Only valid when a rule's action set to 'resolve'. Settable only for `dns_resolver` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyResult ResolveDnsInternally;
        /// <summary>
        /// Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot set when 'dns*resolvers' specified or 'resolve*dns_internally' is set. Only valid when a rule's action set to 'resolve'. Settable only for `dns_resolver` rules.
        /// </summary>
        public readonly bool ResolveDnsThroughCloudflare;
        /// <summary>
        /// Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsUntrustedCertResult UntrustedCert;

        [OutputConstructor]
        private GetZeroTrustGatewayPolicyRuleSettingsResult(
            ImmutableDictionary<string, ImmutableArray<string>> addHeaders,

            bool allowChildBypass,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsAuditSshResult auditSsh,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsResult bisoAdminControls,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsBlockPageResult blockPage,

            bool blockPageEnabled,

            string blockReason,

            bool bypassParentRule,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsCheckSessionResult checkSession,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsDnsResolversResult dnsResolvers,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsEgressResult egress,

            bool ignoreCnameCategoryMatches,

            bool insecureDisableDnssecValidation,

            bool ipCategories,

            bool ipIndicatorFeeds,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsL4overrideResult l4override,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsNotificationSettingsResult notificationSettings,

            string overrideHost,

            ImmutableArray<string> overrideIps,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsPayloadLogResult payloadLog,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsQuarantineResult quarantine,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsRedirectResult redirect,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyResult resolveDnsInternally,

            bool resolveDnsThroughCloudflare,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsUntrustedCertResult untrustedCert)
        {
            AddHeaders = addHeaders;
            AllowChildBypass = allowChildBypass;
            AuditSsh = auditSsh;
            BisoAdminControls = bisoAdminControls;
            BlockPage = blockPage;
            BlockPageEnabled = blockPageEnabled;
            BlockReason = blockReason;
            BypassParentRule = bypassParentRule;
            CheckSession = checkSession;
            DnsResolvers = dnsResolvers;
            Egress = egress;
            IgnoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            InsecureDisableDnssecValidation = insecureDisableDnssecValidation;
            IpCategories = ipCategories;
            IpIndicatorFeeds = ipIndicatorFeeds;
            L4override = l4override;
            NotificationSettings = notificationSettings;
            OverrideHost = overrideHost;
            OverrideIps = overrideIps;
            PayloadLog = payloadLog;
            Quarantine = quarantine;
            Redirect = redirect;
            ResolveDnsInternally = resolveDnsInternally;
            ResolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            UntrustedCert = untrustedCert;
        }
    }
}
