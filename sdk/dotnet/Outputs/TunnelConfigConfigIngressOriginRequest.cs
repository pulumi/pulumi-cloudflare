// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class TunnelConfigConfigIngressOriginRequest
    {
        /// <summary>
        /// For all L7 requests to this hostname, cloudflared will validate each request's Cf-Access-Jwt-Assertion request header.
        /// </summary>
        public readonly Outputs.TunnelConfigConfigIngressOriginRequestAccess? Access;
        /// <summary>
        /// Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
        /// </summary>
        public readonly string? CaPool;
        /// <summary>
        /// Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
        /// </summary>
        public readonly int? ConnectTimeout;
        /// <summary>
        /// Disables chunked transfer encoding. Useful if you are running a WSGI server.
        /// </summary>
        public readonly bool? DisableChunkedEncoding;
        /// <summary>
        /// Attempt to connect to origin using HTTP2. Origin must be configured as https.
        /// </summary>
        public readonly bool? Http2Origin;
        /// <summary>
        /// Sets the HTTP Host header on requests sent to the local service.
        /// </summary>
        public readonly string? HttpHostHeader;
        /// <summary>
        /// Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
        /// </summary>
        public readonly int? KeepAliveConnections;
        /// <summary>
        /// Timeout after which an idle keepalive connection can be discarded.
        /// </summary>
        public readonly int? KeepAliveTimeout;
        /// <summary>
        /// Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
        /// </summary>
        public readonly bool? NoHappyEyeballs;
        /// <summary>
        /// Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
        /// </summary>
        public readonly bool? NoTlsVerify;
        /// <summary>
        /// Hostname that cloudflared should expect from your origin server certificate.
        /// </summary>
        public readonly string? OriginServerName;
        /// <summary>
        /// cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: "" for the regular proxy and "socks" for a SOCKS5 proxy.
        /// </summary>
        public readonly string? ProxyType;
        /// <summary>
        /// The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
        /// </summary>
        public readonly int? TcpKeepAlive;
        /// <summary>
        /// Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
        /// </summary>
        public readonly int? TlsTimeout;

        [OutputConstructor]
        private TunnelConfigConfigIngressOriginRequest(
            Outputs.TunnelConfigConfigIngressOriginRequestAccess? access,

            string? caPool,

            int? connectTimeout,

            bool? disableChunkedEncoding,

            bool? http2Origin,

            string? httpHostHeader,

            int? keepAliveConnections,

            int? keepAliveTimeout,

            bool? noHappyEyeballs,

            bool? noTlsVerify,

            string? originServerName,

            string? proxyType,

            int? tcpKeepAlive,

            int? tlsTimeout)
        {
            Access = access;
            CaPool = caPool;
            ConnectTimeout = connectTimeout;
            DisableChunkedEncoding = disableChunkedEncoding;
            Http2Origin = http2Origin;
            HttpHostHeader = httpHostHeader;
            KeepAliveConnections = keepAliveConnections;
            KeepAliveTimeout = keepAliveTimeout;
            NoHappyEyeballs = noHappyEyeballs;
            NoTlsVerify = noTlsVerify;
            OriginServerName = originServerName;
            ProxyType = proxyType;
            TcpKeepAlive = tcpKeepAlive;
            TlsTimeout = tlsTimeout;
        }
    }
}
