// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetLoadBalancerPoolsResultResult
    {
        /// <summary>
        /// A list of regions from which to run health checks. Null means every Cloudflare data center.
        /// </summary>
        public readonly ImmutableArray<string> CheckRegions;
        public readonly string CreatedOn;
        /// <summary>
        /// A human-readable description of the pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
        /// </summary>
        public readonly string DisabledAt;
        /// <summary>
        /// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
        /// </summary>
        public readonly bool Enabled;
        public readonly string Id;
        /// <summary>
        /// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
        /// </summary>
        public readonly double Latitude;
        /// <summary>
        /// Configures load shedding policies and percentages for the pool.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolsResultLoadSheddingResult LoadShedding;
        /// <summary>
        /// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
        /// </summary>
        public readonly double Longitude;
        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
        /// </summary>
        public readonly int MinimumOrigins;
        public readonly string ModifiedOn;
        /// <summary>
        /// The ID of the Monitor to use for checking the health of origins within this pool.
        /// </summary>
        public readonly string Monitor;
        /// <summary>
        /// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public readonly ImmutableArray<string> Networks;
        /// <summary>
        /// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        public readonly string NotificationEmail;
        /// <summary>
        /// Filter pool and origin health notifications by resource type or health status. Use null to reset.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolsResultNotificationFilterResult NotificationFilter;
        /// <summary>
        /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolsResultOriginSteeringResult OriginSteering;
        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerPoolsResultOriginResult> Origins;

        [OutputConstructor]
        private GetLoadBalancerPoolsResultResult(
            ImmutableArray<string> checkRegions,

            string createdOn,

            string description,

            string disabledAt,

            bool enabled,

            string id,

            double latitude,

            Outputs.GetLoadBalancerPoolsResultLoadSheddingResult loadShedding,

            double longitude,

            int minimumOrigins,

            string modifiedOn,

            string monitor,

            string name,

            ImmutableArray<string> networks,

            string notificationEmail,

            Outputs.GetLoadBalancerPoolsResultNotificationFilterResult notificationFilter,

            Outputs.GetLoadBalancerPoolsResultOriginSteeringResult originSteering,

            ImmutableArray<Outputs.GetLoadBalancerPoolsResultOriginResult> origins)
        {
            CheckRegions = checkRegions;
            CreatedOn = createdOn;
            Description = description;
            DisabledAt = disabledAt;
            Enabled = enabled;
            Id = id;
            Latitude = latitude;
            LoadShedding = loadShedding;
            Longitude = longitude;
            MinimumOrigins = minimumOrigins;
            ModifiedOn = modifiedOn;
            Monitor = monitor;
            Name = name;
            Networks = networks;
            NotificationEmail = notificationEmail;
            NotificationFilter = notificationFilter;
            OriginSteering = originSteering;
            Origins = origins;
        }
    }
}
