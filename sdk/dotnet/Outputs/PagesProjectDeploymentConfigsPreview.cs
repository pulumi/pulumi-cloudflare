// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class PagesProjectDeploymentConfigsPreview
    {
        /// <summary>
        /// Constellation bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewAiBindings>? AiBindings;
        /// <summary>
        /// Analytics Engine bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets>? AnalyticsEngineDatasets;
        /// <summary>
        /// Browser bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewBrowsers>? Browsers;
        /// <summary>
        /// Compatibility date used for Pages Functions.
        /// </summary>
        public readonly string? CompatibilityDate;
        /// <summary>
        /// Compatibility flags used for Pages Functions.
        /// </summary>
        public readonly ImmutableArray<string> CompatibilityFlags;
        /// <summary>
        /// D1 databases used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewD1Databases>? D1Databases;
        /// <summary>
        /// Durable Object namespaces used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewDurableObjectNamespaces>? DurableObjectNamespaces;
        /// <summary>
        /// Environment variables used for builds and Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewEnvVars>? EnvVars;
        /// <summary>
        /// Hyperdrive bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewHyperdriveBindings>? HyperdriveBindings;
        /// <summary>
        /// KV namespaces used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewKvNamespaces>? KvNamespaces;
        /// <summary>
        /// mTLS bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewMtlsCertificates>? MtlsCertificates;
        /// <summary>
        /// Placement setting used for Pages Functions.
        /// </summary>
        public readonly Outputs.PagesProjectDeploymentConfigsPreviewPlacement? Placement;
        /// <summary>
        /// Queue Producer bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewQueueProducers>? QueueProducers;
        /// <summary>
        /// R2 buckets used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewR2Buckets>? R2Buckets;
        /// <summary>
        /// Services used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewServices>? Services;
        /// <summary>
        /// Vectorize bindings used for Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewVectorizeBindings>? VectorizeBindings;

        [OutputConstructor]
        private PagesProjectDeploymentConfigsPreview(
            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewAiBindings>? aiBindings,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets>? analyticsEngineDatasets,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewBrowsers>? browsers,

            string? compatibilityDate,

            ImmutableArray<string> compatibilityFlags,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewD1Databases>? d1Databases,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewDurableObjectNamespaces>? durableObjectNamespaces,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewEnvVars>? envVars,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewHyperdriveBindings>? hyperdriveBindings,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewKvNamespaces>? kvNamespaces,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewMtlsCertificates>? mtlsCertificates,

            Outputs.PagesProjectDeploymentConfigsPreviewPlacement? placement,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewQueueProducers>? queueProducers,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewR2Buckets>? r2Buckets,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewServices>? services,

            ImmutableDictionary<string, Outputs.PagesProjectDeploymentConfigsPreviewVectorizeBindings>? vectorizeBindings)
        {
            AiBindings = aiBindings;
            AnalyticsEngineDatasets = analyticsEngineDatasets;
            Browsers = browsers;
            CompatibilityDate = compatibilityDate;
            CompatibilityFlags = compatibilityFlags;
            D1Databases = d1Databases;
            DurableObjectNamespaces = durableObjectNamespaces;
            EnvVars = envVars;
            HyperdriveBindings = hyperdriveBindings;
            KvNamespaces = kvNamespaces;
            MtlsCertificates = mtlsCertificates;
            Placement = placement;
            QueueProducers = queueProducers;
            R2Buckets = r2Buckets;
            Services = services;
            VectorizeBindings = vectorizeBindings;
        }
    }
}
