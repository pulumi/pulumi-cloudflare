// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetRulesetRuleActionParametersResult
    {
        /// <summary>
        /// A list of additional ports that caching should be enabled on.
        /// </summary>
        public readonly ImmutableArray<int> AdditionalCacheablePorts;
        /// <summary>
        /// Custom order for compression algorithms.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersAlgorithmResult> Algorithms;
        /// <summary>
        /// The name of a custom asset to serve as the response.
        /// </summary>
        public readonly string AssetName;
        /// <summary>
        /// Whether to enable Automatic HTTPS Rewrites.
        /// </summary>
        public readonly bool AutomaticHttpsRewrites;
        /// <summary>
        /// Which file extensions to minify automatically.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersAutominifyResult Autominify;
        /// <summary>
        /// Whether to enable Browser Integrity Check (BIC).
        /// </summary>
        public readonly bool Bic;
        /// <summary>
        /// How long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersBrowserTtlResult BrowserTtl;
        /// <summary>
        /// Whether the request's response from the origin is eligible for caching. Caching itself will still depend on the cache control header and your other caching configurations.
        /// </summary>
        public readonly bool Cache;
        /// <summary>
        /// Which components of the request are included in or excluded from the cache key Cloudflare uses to store the response in cache.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersCacheKeyResult CacheKey;
        /// <summary>
        /// Settings to determine whether the request's response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersCacheReserveResult CacheReserve;
        /// <summary>
        /// The response content.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// The content type header to set with the error response.
        /// Available values: "application/json", "text/html", "text/plain", "text/xml".
        /// </summary>
        public readonly string ContentType;
        /// <summary>
        /// The cookie fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersCookieFieldResult> CookieFields;
        /// <summary>
        /// Whether to disable Cloudflare Apps.
        /// </summary>
        public readonly bool DisableApps;
        /// <summary>
        /// Whether to disable Real User Monitoring (RUM).
        /// </summary>
        public readonly bool DisableRum;
        /// <summary>
        /// Whether to disable Zaraz.
        /// </summary>
        public readonly bool DisableZaraz;
        /// <summary>
        /// How long the Cloudflare edge network should cache the response.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersEdgeTtlResult EdgeTtl;
        /// <summary>
        /// Whether to enable Email Obfuscation.
        /// </summary>
        public readonly bool EmailObfuscation;
        /// <summary>
        /// Whether to enable Cloudflare Fonts.
        /// </summary>
        public readonly bool Fonts;
        /// <summary>
        /// A redirect based on a bulk list lookup.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersFromListResult FromList;
        /// <summary>
        /// A redirect based on the request properties.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersFromValueResult FromValue;
        /// <summary>
        /// A map of headers to rewrite.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetRulesetRuleActionParametersHeadersResult> Headers;
        /// <summary>
        /// A value to rewrite the HTTP host header to.
        /// </summary>
        public readonly string HostHeader;
        /// <summary>
        /// Whether to enable Hotlink Protection.
        /// </summary>
        public readonly bool HotlinkProtection;
        /// <summary>
        /// The ID of the ruleset to execute.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A delta to change the score by, which can be either positive or negative.
        /// </summary>
        public readonly int Increment;
        /// <summary>
        /// The configuration to use for matched data logging.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersMatchedDataResult MatchedData;
        /// <summary>
        /// Whether to enable Mirage.
        /// </summary>
        public readonly bool Mirage;
        /// <summary>
        /// Whether to enable Opportunistic Encryption.
        /// </summary>
        public readonly bool OpportunisticEncryption;
        /// <summary>
        /// An origin to route to.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersOriginResult Origin;
        /// <summary>
        /// Whether Cloudflare will aim to strictly adhere to RFC 7234.
        /// </summary>
        public readonly bool OriginCacheControl;
        /// <summary>
        /// Whether to generate Cloudflare error pages for issues from the origin server.
        /// </summary>
        public readonly bool OriginErrorPagePassthru;
        /// <summary>
        /// A set of overrides to apply to the target ruleset.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersOverridesResult Overrides;
        /// <summary>
        /// A list of phases to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "ddos*l4", "ddos*l7", "http*config*settings", "http*custom*errors", "http*log*custom*fields", "http*ratelimit", "http*request*cache*settings", "http*request*dynamic*redirect", "http*request*firewall*custom", "http*request*firewall*managed", "http*request*late*transform", "http*request*origin", "http*request*redirect", "http*request*sanitize", "http*request*sbfm", "http*request*transform", "http*response*compression", "http*response*firewall*managed", "http*response*headers*transform", "magic*transit", "magic*transit*ids*managed", "magic*transit*managed", "magic*transit_ratelimit".
        /// </summary>
        public readonly ImmutableArray<string> Phases;
        /// <summary>
        /// The Polish level to configure.
        /// Available values: "off", "lossless", "lossy", "webp".
        /// </summary>
        public readonly string Polish;
        /// <summary>
        /// A list of legacy security products to skip the execution of.
        /// Available values: "bic", "hot", "rateLimit", "securityLevel", "uaBlock", "waf", "zoneLockdown".
        /// </summary>
        public readonly ImmutableArray<string> Products;
        /// <summary>
        /// The raw response fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersRawResponseFieldResult> RawResponseFields;
        /// <summary>
        /// A timeout value between two successive read operations to use for your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
        /// </summary>
        public readonly int ReadTimeout;
        /// <summary>
        /// The raw request fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersRequestFieldResult> RequestFields;
        /// <summary>
        /// Whether Cloudflare should respect strong ETag (entity tag) headers. If false, Cloudflare converts strong ETag headers to weak ETag headers.
        /// </summary>
        public readonly bool RespectStrongEtags;
        /// <summary>
        /// The response to show when the block is applied.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersResponseResult Response;
        /// <summary>
        /// The transformed response fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersResponseFieldResult> ResponseFields;
        /// <summary>
        /// Whether to enable Rocket Loader.
        /// </summary>
        public readonly bool RocketLoader;
        /// <summary>
        /// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> Rules;
        /// <summary>
        /// A ruleset to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "current".
        /// </summary>
        public readonly string Ruleset;
        /// <summary>
        /// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
        /// </summary>
        public readonly ImmutableArray<string> Rulesets;
        /// <summary>
        /// The Security Level to configure.
        /// Available values: "off", "essentially*off", "low", "medium", "high", "under*attack".
        /// </summary>
        public readonly string SecurityLevel;
        /// <summary>
        /// When to serve stale content from cache.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersServeStaleResult ServeStale;
        /// <summary>
        /// Whether to enable Server-Side Excludes.
        /// </summary>
        public readonly bool ServerSideExcludes;
        /// <summary>
        /// A Server Name Indication (SNI) override.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersSniResult Sni;
        /// <summary>
        /// The SSL level to configure.
        /// Available values: "off", "flexible", "full", "strict", "origin_pull".
        /// </summary>
        public readonly string Ssl;
        /// <summary>
        /// The status code to use for the error.
        /// </summary>
        public readonly int StatusCode;
        /// <summary>
        /// Whether to enable Signed Exchanges (SXG).
        /// </summary>
        public readonly bool Sxg;
        /// <summary>
        /// The transformed request fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleActionParametersTransformedRequestFieldResult> TransformedRequestFields;
        /// <summary>
        /// A URI rewrite.
        /// </summary>
        public readonly Outputs.GetRulesetRuleActionParametersUriResult Uri;

        [OutputConstructor]
        private GetRulesetRuleActionParametersResult(
            ImmutableArray<int> additionalCacheablePorts,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersAlgorithmResult> algorithms,

            string assetName,

            bool automaticHttpsRewrites,

            Outputs.GetRulesetRuleActionParametersAutominifyResult autominify,

            bool bic,

            Outputs.GetRulesetRuleActionParametersBrowserTtlResult browserTtl,

            bool cache,

            Outputs.GetRulesetRuleActionParametersCacheKeyResult cacheKey,

            Outputs.GetRulesetRuleActionParametersCacheReserveResult cacheReserve,

            string content,

            string contentType,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersCookieFieldResult> cookieFields,

            bool disableApps,

            bool disableRum,

            bool disableZaraz,

            Outputs.GetRulesetRuleActionParametersEdgeTtlResult edgeTtl,

            bool emailObfuscation,

            bool fonts,

            Outputs.GetRulesetRuleActionParametersFromListResult fromList,

            Outputs.GetRulesetRuleActionParametersFromValueResult fromValue,

            ImmutableDictionary<string, Outputs.GetRulesetRuleActionParametersHeadersResult> headers,

            string hostHeader,

            bool hotlinkProtection,

            string id,

            int increment,

            Outputs.GetRulesetRuleActionParametersMatchedDataResult matchedData,

            bool mirage,

            bool opportunisticEncryption,

            Outputs.GetRulesetRuleActionParametersOriginResult origin,

            bool originCacheControl,

            bool originErrorPagePassthru,

            Outputs.GetRulesetRuleActionParametersOverridesResult overrides,

            ImmutableArray<string> phases,

            string polish,

            ImmutableArray<string> products,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersRawResponseFieldResult> rawResponseFields,

            int readTimeout,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersRequestFieldResult> requestFields,

            bool respectStrongEtags,

            Outputs.GetRulesetRuleActionParametersResponseResult response,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersResponseFieldResult> responseFields,

            bool rocketLoader,

            ImmutableDictionary<string, ImmutableArray<string>> rules,

            string ruleset,

            ImmutableArray<string> rulesets,

            string securityLevel,

            Outputs.GetRulesetRuleActionParametersServeStaleResult serveStale,

            bool serverSideExcludes,

            Outputs.GetRulesetRuleActionParametersSniResult sni,

            string ssl,

            int statusCode,

            bool sxg,

            ImmutableArray<Outputs.GetRulesetRuleActionParametersTransformedRequestFieldResult> transformedRequestFields,

            Outputs.GetRulesetRuleActionParametersUriResult uri)
        {
            AdditionalCacheablePorts = additionalCacheablePorts;
            Algorithms = algorithms;
            AssetName = assetName;
            AutomaticHttpsRewrites = automaticHttpsRewrites;
            Autominify = autominify;
            Bic = bic;
            BrowserTtl = browserTtl;
            Cache = cache;
            CacheKey = cacheKey;
            CacheReserve = cacheReserve;
            Content = content;
            ContentType = contentType;
            CookieFields = cookieFields;
            DisableApps = disableApps;
            DisableRum = disableRum;
            DisableZaraz = disableZaraz;
            EdgeTtl = edgeTtl;
            EmailObfuscation = emailObfuscation;
            Fonts = fonts;
            FromList = fromList;
            FromValue = fromValue;
            Headers = headers;
            HostHeader = hostHeader;
            HotlinkProtection = hotlinkProtection;
            Id = id;
            Increment = increment;
            MatchedData = matchedData;
            Mirage = mirage;
            OpportunisticEncryption = opportunisticEncryption;
            Origin = origin;
            OriginCacheControl = originCacheControl;
            OriginErrorPagePassthru = originErrorPagePassthru;
            Overrides = overrides;
            Phases = phases;
            Polish = polish;
            Products = products;
            RawResponseFields = rawResponseFields;
            ReadTimeout = readTimeout;
            RequestFields = requestFields;
            RespectStrongEtags = respectStrongEtags;
            Response = response;
            ResponseFields = responseFields;
            RocketLoader = rocketLoader;
            Rules = rules;
            Ruleset = ruleset;
            Rulesets = rulesets;
            SecurityLevel = securityLevel;
            ServeStale = serveStale;
            ServerSideExcludes = serverSideExcludes;
            Sni = sni;
            Ssl = ssl;
            StatusCode = statusCode;
            Sxg = sxg;
            TransformedRequestFields = transformedRequestFields;
            Uri = uri;
        }
    }
}
