// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetDnsFirewallsResultResult
    {
        /// <summary>
        /// Attack mitigation settings
        /// </summary>
        public readonly Outputs.GetDnsFirewallsResultAttackMitigationResult AttackMitigation;
        /// <summary>
        /// Whether to refuse to answer queries for the ANY type
        /// </summary>
        public readonly bool DeprecateAnyRequests;
        public readonly ImmutableArray<string> DnsFirewallIps;
        /// <summary>
        /// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
        /// </summary>
        public readonly bool EcsFallback;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
        /// </summary>
        public readonly double MaximumCacheTtl;
        /// <summary>
        /// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
        /// </summary>
        public readonly double MinimumCacheTtl;
        /// <summary>
        /// Last modification of DNS Firewall cluster
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// DNS Firewall cluster name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
        /// </summary>
        public readonly double NegativeCacheTtl;
        /// <summary>
        /// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
        /// </summary>
        public readonly double Ratelimit;
        /// <summary>
        /// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
        /// </summary>
        public readonly double Retries;
        public readonly ImmutableArray<string> UpstreamIps;

        [OutputConstructor]
        private GetDnsFirewallsResultResult(
            Outputs.GetDnsFirewallsResultAttackMitigationResult attackMitigation,

            bool deprecateAnyRequests,

            ImmutableArray<string> dnsFirewallIps,

            bool ecsFallback,

            string id,

            double maximumCacheTtl,

            double minimumCacheTtl,

            string modifiedOn,

            string name,

            double negativeCacheTtl,

            double ratelimit,

            double retries,

            ImmutableArray<string> upstreamIps)
        {
            AttackMitigation = attackMitigation;
            DeprecateAnyRequests = deprecateAnyRequests;
            DnsFirewallIps = dnsFirewallIps;
            EcsFallback = ecsFallback;
            Id = id;
            MaximumCacheTtl = maximumCacheTtl;
            MinimumCacheTtl = minimumCacheTtl;
            ModifiedOn = modifiedOn;
            Name = name;
            NegativeCacheTtl = negativeCacheTtl;
            Ratelimit = ratelimit;
            Retries = retries;
            UpstreamIps = upstreamIps;
        }
    }
}
