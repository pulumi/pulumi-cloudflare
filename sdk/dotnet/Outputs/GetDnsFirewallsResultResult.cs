// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetDnsFirewallsResultResult
    {
        /// <summary>
        /// Attack mitigation settings
        /// </summary>
        public readonly Outputs.GetDnsFirewallsResultAttackMitigationResult AttackMitigation;
        /// <summary>
        /// Whether to refuse to answer queries for the ANY type
        /// </summary>
        public readonly bool DeprecateAnyRequests;
        public readonly ImmutableArray<string> DnsFirewallIps;
        /// <summary>
        /// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
        /// </summary>
        public readonly bool EcsFallback;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// By default, Cloudflare attempts to cache responses for as long as
        /// indicated by the TTL received from upstream nameservers. This setting
        /// sets an upper bound on this duration. For caching purposes, higher TTLs
        /// will be decreased to the maximum value defined by this setting.
        /// </summary>
        public readonly double MaximumCacheTtl;
        /// <summary>
        /// By default, Cloudflare attempts to cache responses for as long as
        /// indicated by the TTL received from upstream nameservers. This setting
        /// sets a lower bound on this duration. For caching purposes, lower TTLs
        /// will be increased to the minimum value defined by this setting.
        /// 
        /// This setting does not affect the TTL value in the DNS response
        /// Cloudflare returns to clients. Cloudflare will always forward the TTL
        /// value received from upstream nameservers.
        /// 
        /// Note that, even with this setting, there is no guarantee that a
        /// response will be cached for at least the specified duration. Cached
        /// responses may be removed earlier for capacity or other operational
        /// reasons.
        /// </summary>
        public readonly double MinimumCacheTtl;
        /// <summary>
        /// Last modification of DNS Firewall cluster
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// DNS Firewall cluster name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// This setting controls how long DNS Firewall should cache negative
        /// responses (e.g., NXDOMAIN) from the upstream servers.
        /// 
        /// This setting does not affect the TTL value in the DNS response
        /// Cloudflare returns to clients. Cloudflare will always forward the TTL
        /// value received from upstream nameservers.
        /// </summary>
        public readonly double NegativeCacheTtl;
        /// <summary>
        /// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
        /// </summary>
        public readonly double Ratelimit;
        /// <summary>
        /// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
        /// </summary>
        public readonly double Retries;
        public readonly ImmutableArray<string> UpstreamIps;

        [OutputConstructor]
        private GetDnsFirewallsResultResult(
            Outputs.GetDnsFirewallsResultAttackMitigationResult attackMitigation,

            bool deprecateAnyRequests,

            ImmutableArray<string> dnsFirewallIps,

            bool ecsFallback,

            string id,

            double maximumCacheTtl,

            double minimumCacheTtl,

            string modifiedOn,

            string name,

            double negativeCacheTtl,

            double ratelimit,

            double retries,

            ImmutableArray<string> upstreamIps)
        {
            AttackMitigation = attackMitigation;
            DeprecateAnyRequests = deprecateAnyRequests;
            DnsFirewallIps = dnsFirewallIps;
            EcsFallback = ecsFallback;
            Id = id;
            MaximumCacheTtl = maximumCacheTtl;
            MinimumCacheTtl = minimumCacheTtl;
            ModifiedOn = modifiedOn;
            Name = name;
            NegativeCacheTtl = negativeCacheTtl;
            Ratelimit = ratelimit;
            Retries = retries;
            UpstreamIps = upstreamIps;
        }
    }
}
