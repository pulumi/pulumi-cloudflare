// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class CustomHostnameSsl
    {
        /// <summary>
        /// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
        /// Available values: "ubiquitous", "optimal", "force".
        /// </summary>
        public readonly string? BundleMethod;
        /// <summary>
        /// The Certificate Authority that will issue the certificate
        /// Available values: "digicert", "google", "lets*encrypt", "ssl*com".
        /// </summary>
        public readonly string? CertificateAuthority;
        /// <summary>
        /// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true
        /// </summary>
        public readonly bool? CloudflareBranding;
        /// <summary>
        /// Array of custom certificate and key pairs (1 or 2 pairs allowed)
        /// </summary>
        public readonly ImmutableArray<Outputs.CustomHostnameSslCustomCertBundle> CustomCertBundles;
        /// <summary>
        /// If a custom uploaded certificate is used.
        /// </summary>
        public readonly string? CustomCertificate;
        /// <summary>
        /// The key for a custom uploaded certificate.
        /// </summary>
        public readonly string? CustomKey;
        /// <summary>
        /// Domain control validation (DCV) method used for this hostname.
        /// Available values: "http", "txt", "email".
        /// </summary>
        public readonly string? Method;
        /// <summary>
        /// SSL specific settings.
        /// </summary>
        public readonly Outputs.CustomHostnameSslSettings? Settings;
        /// <summary>
        /// Level of validation to be used for this hostname. Domain validation (dv) must be used.
        /// Available values: "dv".
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Indicates whether the certificate covers a wildcard.
        /// </summary>
        public readonly bool? Wildcard;

        [OutputConstructor]
        private CustomHostnameSsl(
            string? bundleMethod,

            string? certificateAuthority,

            bool? cloudflareBranding,

            ImmutableArray<Outputs.CustomHostnameSslCustomCertBundle> customCertBundles,

            string? customCertificate,

            string? customKey,

            string? method,

            Outputs.CustomHostnameSslSettings? settings,

            string? type,

            bool? wildcard)
        {
            BundleMethod = bundleMethod;
            CertificateAuthority = certificateAuthority;
            CloudflareBranding = cloudflareBranding;
            CustomCertBundles = customCertBundles;
            CustomCertificate = customCertificate;
            CustomKey = customKey;
            Method = method;
            Settings = settings;
            Type = type;
            Wildcard = wildcard;
        }
    }
}
