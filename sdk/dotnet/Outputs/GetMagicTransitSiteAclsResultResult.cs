// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetMagicTransitSiteAclsResultResult
    {
        /// <summary>
        /// Description for the ACL.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
        /// </summary>
        public readonly bool ForwardLocally;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetMagicTransitSiteAclsResultLan1Result Lan1;
        public readonly Outputs.GetMagicTransitSiteAclsResultLan2Result Lan2;
        /// <summary>
        /// The name of the ACL.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
        /// </summary>
        public readonly bool Unidirectional;

        [OutputConstructor]
        private GetMagicTransitSiteAclsResultResult(
            string description,

            bool forwardLocally,

            string id,

            Outputs.GetMagicTransitSiteAclsResultLan1Result lan1,

            Outputs.GetMagicTransitSiteAclsResultLan2Result lan2,

            string name,

            ImmutableArray<string> protocols,

            bool unidirectional)
        {
            Description = description;
            ForwardLocally = forwardLocally;
            Id = id;
            Lan1 = lan1;
            Lan2 = lan2;
            Name = name;
            Protocols = protocols;
            Unidirectional = unidirectional;
        }
    }
}
