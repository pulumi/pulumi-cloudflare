// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetMagicWanIpsecTunnelIpsecTunnelResult
    {
        /// <summary>
        /// When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).
        /// </summary>
        public readonly bool AllowNullCipher;
        public readonly Outputs.GetMagicWanIpsecTunnelIpsecTunnelBgpResult Bgp;
        public readonly Outputs.GetMagicWanIpsecTunnelIpsecTunnelBgpStatusResult BgpStatus;
        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        public readonly string CloudflareEndpoint;
        /// <summary>
        /// The date and time the tunnel was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        public readonly string CustomerEndpoint;
        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetMagicWanIpsecTunnelIpsecTunnelHealthCheckResult HealthCheck;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        public readonly string InterfaceAddress;
        /// <summary>
        /// A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
        /// </summary>
        public readonly string InterfaceAddress6;
        /// <summary>
        /// The date and time the tunnel was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The PSK metadata that includes when the PSK was generated.
        /// </summary>
        public readonly Outputs.GetMagicWanIpsecTunnelIpsecTunnelPskMetadataResult PskMetadata;
        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        public readonly bool ReplayProtection;

        [OutputConstructor]
        private GetMagicWanIpsecTunnelIpsecTunnelResult(
            bool allowNullCipher,

            Outputs.GetMagicWanIpsecTunnelIpsecTunnelBgpResult bgp,

            Outputs.GetMagicWanIpsecTunnelIpsecTunnelBgpStatusResult bgpStatus,

            string cloudflareEndpoint,

            string createdOn,

            string customerEndpoint,

            string description,

            Outputs.GetMagicWanIpsecTunnelIpsecTunnelHealthCheckResult healthCheck,

            string id,

            string interfaceAddress,

            string interfaceAddress6,

            string modifiedOn,

            string name,

            Outputs.GetMagicWanIpsecTunnelIpsecTunnelPskMetadataResult pskMetadata,

            bool replayProtection)
        {
            AllowNullCipher = allowNullCipher;
            Bgp = bgp;
            BgpStatus = bgpStatus;
            CloudflareEndpoint = cloudflareEndpoint;
            CreatedOn = createdOn;
            CustomerEndpoint = customerEndpoint;
            Description = description;
            HealthCheck = healthCheck;
            Id = id;
            InterfaceAddress = interfaceAddress;
            InterfaceAddress6 = interfaceAddress6;
            ModifiedOn = modifiedOn;
            Name = name;
            PskMetadata = pskMetadata;
            ReplayProtection = replayProtection;
        }
    }
}
