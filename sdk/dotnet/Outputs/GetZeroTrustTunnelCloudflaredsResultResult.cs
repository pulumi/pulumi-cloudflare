// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetZeroTrustTunnelCloudflaredsResultResult
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        public readonly string AccountTag;
        /// <summary>
        /// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustTunnelCloudflaredsResultConnectionResult> Connections;
        /// <summary>
        /// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
        /// </summary>
        public readonly string ConnsActiveAt;
        /// <summary>
        /// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
        /// </summary>
        public readonly string ConnsInactiveAt;
        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
        /// </summary>
        public readonly string DeletedAt;
        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metadata associated with the tunnel.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// A user-friendly name for a tunnel.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
        /// </summary>
        public readonly bool RemoteConfig;
        /// <summary>
        /// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
        /// Available values: "inactive", "degraded", "healthy", "down".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The type of tunnel.
        /// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ip_sec", "gre", "cni".
        /// </summary>
        public readonly string TunType;

        [OutputConstructor]
        private GetZeroTrustTunnelCloudflaredsResultResult(
            string accountTag,

            ImmutableArray<Outputs.GetZeroTrustTunnelCloudflaredsResultConnectionResult> connections,

            string connsActiveAt,

            string connsInactiveAt,

            string createdAt,

            string deletedAt,

            string id,

            string metadata,

            string name,

            bool remoteConfig,

            string status,

            string tunType)
        {
            AccountTag = accountTag;
            Connections = connections;
            ConnsActiveAt = connsActiveAt;
            ConnsInactiveAt = connsInactiveAt;
            CreatedAt = createdAt;
            DeletedAt = deletedAt;
            Id = id;
            Metadata = metadata;
            Name = name;
            RemoteConfig = remoteConfig;
            Status = status;
            TunType = tunType;
        }
    }
}
