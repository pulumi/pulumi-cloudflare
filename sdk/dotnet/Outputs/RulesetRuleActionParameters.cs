// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class RulesetRuleActionParameters
    {
        /// <summary>
        /// List of additional ports that caching can be enabled on.
        /// </summary>
        public readonly ImmutableArray<int> AdditionalCacheablePorts;
        /// <summary>
        /// Custom order for compression algorithms.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersAlgorithm> Algorithms;
        /// <summary>
        /// Turn on or off Automatic HTTPS Rewrites.
        /// </summary>
        public readonly bool? AutomaticHttpsRewrites;
        /// <summary>
        /// Select which file extensions to minify automatically.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersAutominify? Autominify;
        /// <summary>
        /// Turn on or off Browser Integrity Check.
        /// </summary>
        public readonly bool? Bic;
        /// <summary>
        /// Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersBrowserTtl? BrowserTtl;
        /// <summary>
        /// Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
        /// </summary>
        public readonly bool? Cache;
        /// <summary>
        /// Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersCacheKey? CacheKey;
        /// <summary>
        /// Mark whether the request's response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersCacheReserve? CacheReserve;
        /// <summary>
        /// Error response content.
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// Content-type header to set with the response.
        /// Available values: "application/json", "text/xml", "text/plain", "text/html".
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// The cookie fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersCookieField> CookieFields;
        /// <summary>
        /// Turn off all active Cloudflare Apps.
        /// </summary>
        public readonly bool? DisableApps;
        /// <summary>
        /// Turn off Real User Monitoring (RUM).
        /// </summary>
        public readonly bool? DisableRum;
        /// <summary>
        /// Turn off Zaraz.
        /// </summary>
        public readonly bool? DisableZaraz;
        /// <summary>
        /// TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersEdgeTtl? EdgeTtl;
        /// <summary>
        /// Turn on or off Email Obfuscation.
        /// </summary>
        public readonly bool? EmailObfuscation;
        /// <summary>
        /// Turn on or off Cloudflare Fonts.
        /// </summary>
        public readonly bool? Fonts;
        /// <summary>
        /// Serve a redirect based on a bulk list lookup.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersFromList? FromList;
        /// <summary>
        /// Serve a redirect based on the request properties.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersFromValue? FromValue;
        /// <summary>
        /// Map of request headers to modify.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.RulesetRuleActionParametersHeaders>? Headers;
        /// <summary>
        /// Rewrite the HTTP Host header.
        /// </summary>
        public readonly string? HostHeader;
        /// <summary>
        /// Turn on or off the Hotlink Protection.
        /// </summary>
        public readonly bool? HotlinkProtection;
        /// <summary>
        /// The ID of the ruleset to execute.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Increment contains the delta to change the score and can be either positive or negative.
        /// </summary>
        public readonly int? Increment;
        /// <summary>
        /// The configuration to use for matched data logging.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersMatchedData? MatchedData;
        /// <summary>
        /// Turn on or off Mirage.
        /// </summary>
        public readonly bool? Mirage;
        /// <summary>
        /// Turn on or off Opportunistic Encryption.
        /// </summary>
        public readonly bool? OpportunisticEncryption;
        /// <summary>
        /// Override the IP/TCP destination.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersOrigin? Origin;
        /// <summary>
        /// When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
        /// </summary>
        public readonly bool? OriginCacheControl;
        /// <summary>
        /// Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
        /// </summary>
        public readonly bool? OriginErrorPagePassthru;
        /// <summary>
        /// A set of overrides to apply to the target ruleset.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersOverrides? Overrides;
        /// <summary>
        /// A list of phases to skip the execution of. This option is incompatible with the rulesets option.
        /// </summary>
        public readonly ImmutableArray<string> Phases;
        /// <summary>
        /// Configure the Polish level.
        /// Available values: "off", "lossless", "lossy".
        /// </summary>
        public readonly string? Polish;
        /// <summary>
        /// A list of legacy security products to skip the execution of.
        /// </summary>
        public readonly ImmutableArray<string> Products;
        /// <summary>
        /// The raw response fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersRawResponseField> RawResponseFields;
        /// <summary>
        /// Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
        /// </summary>
        public readonly int? ReadTimeout;
        /// <summary>
        /// The raw request fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersRequestField> RequestFields;
        /// <summary>
        /// Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
        /// </summary>
        public readonly bool? RespectStrongEtags;
        /// <summary>
        /// The response to show when the block is applied.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersResponse? Response;
        /// <summary>
        /// The transformed response fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersResponseField> ResponseFields;
        /// <summary>
        /// Turn on or off Rocket Loader
        /// </summary>
        public readonly bool? RocketLoader;
        /// <summary>
        /// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>>? Rules;
        /// <summary>
        /// A ruleset to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "current".
        /// </summary>
        public readonly string? Ruleset;
        /// <summary>
        /// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
        /// </summary>
        public readonly ImmutableArray<string> Rulesets;
        /// <summary>
        /// Configure the Security Level.
        /// Available values: "off", "essentially*off", "low", "medium", "high", "under*attack".
        /// </summary>
        public readonly string? SecurityLevel;
        /// <summary>
        /// Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersServeStale? ServeStale;
        /// <summary>
        /// Turn on or off Server Side Excludes.
        /// </summary>
        public readonly bool? ServerSideExcludes;
        /// <summary>
        /// Override the Server Name Indication (SNI).
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersSni? Sni;
        /// <summary>
        /// Configure the SSL level.
        /// Available values: "off", "flexible", "full", "strict", "origin_pull".
        /// </summary>
        public readonly string? Ssl;
        /// <summary>
        /// The status code to use for the error.
        /// </summary>
        public readonly double? StatusCode;
        /// <summary>
        /// Turn on or off Signed Exchanges (SXG).
        /// </summary>
        public readonly bool? Sxg;
        /// <summary>
        /// The transformed request fields to log.
        /// </summary>
        public readonly ImmutableArray<Outputs.RulesetRuleActionParametersTransformedRequestField> TransformedRequestFields;
        /// <summary>
        /// URI to rewrite the request to.
        /// </summary>
        public readonly Outputs.RulesetRuleActionParametersUri? Uri;

        [OutputConstructor]
        private RulesetRuleActionParameters(
            ImmutableArray<int> additionalCacheablePorts,

            ImmutableArray<Outputs.RulesetRuleActionParametersAlgorithm> algorithms,

            bool? automaticHttpsRewrites,

            Outputs.RulesetRuleActionParametersAutominify? autominify,

            bool? bic,

            Outputs.RulesetRuleActionParametersBrowserTtl? browserTtl,

            bool? cache,

            Outputs.RulesetRuleActionParametersCacheKey? cacheKey,

            Outputs.RulesetRuleActionParametersCacheReserve? cacheReserve,

            string? content,

            string? contentType,

            ImmutableArray<Outputs.RulesetRuleActionParametersCookieField> cookieFields,

            bool? disableApps,

            bool? disableRum,

            bool? disableZaraz,

            Outputs.RulesetRuleActionParametersEdgeTtl? edgeTtl,

            bool? emailObfuscation,

            bool? fonts,

            Outputs.RulesetRuleActionParametersFromList? fromList,

            Outputs.RulesetRuleActionParametersFromValue? fromValue,

            ImmutableDictionary<string, Outputs.RulesetRuleActionParametersHeaders>? headers,

            string? hostHeader,

            bool? hotlinkProtection,

            string? id,

            int? increment,

            Outputs.RulesetRuleActionParametersMatchedData? matchedData,

            bool? mirage,

            bool? opportunisticEncryption,

            Outputs.RulesetRuleActionParametersOrigin? origin,

            bool? originCacheControl,

            bool? originErrorPagePassthru,

            Outputs.RulesetRuleActionParametersOverrides? overrides,

            ImmutableArray<string> phases,

            string? polish,

            ImmutableArray<string> products,

            ImmutableArray<Outputs.RulesetRuleActionParametersRawResponseField> rawResponseFields,

            int? readTimeout,

            ImmutableArray<Outputs.RulesetRuleActionParametersRequestField> requestFields,

            bool? respectStrongEtags,

            Outputs.RulesetRuleActionParametersResponse? response,

            ImmutableArray<Outputs.RulesetRuleActionParametersResponseField> responseFields,

            bool? rocketLoader,

            ImmutableDictionary<string, ImmutableArray<string>>? rules,

            string? ruleset,

            ImmutableArray<string> rulesets,

            string? securityLevel,

            Outputs.RulesetRuleActionParametersServeStale? serveStale,

            bool? serverSideExcludes,

            Outputs.RulesetRuleActionParametersSni? sni,

            string? ssl,

            double? statusCode,

            bool? sxg,

            ImmutableArray<Outputs.RulesetRuleActionParametersTransformedRequestField> transformedRequestFields,

            Outputs.RulesetRuleActionParametersUri? uri)
        {
            AdditionalCacheablePorts = additionalCacheablePorts;
            Algorithms = algorithms;
            AutomaticHttpsRewrites = automaticHttpsRewrites;
            Autominify = autominify;
            Bic = bic;
            BrowserTtl = browserTtl;
            Cache = cache;
            CacheKey = cacheKey;
            CacheReserve = cacheReserve;
            Content = content;
            ContentType = contentType;
            CookieFields = cookieFields;
            DisableApps = disableApps;
            DisableRum = disableRum;
            DisableZaraz = disableZaraz;
            EdgeTtl = edgeTtl;
            EmailObfuscation = emailObfuscation;
            Fonts = fonts;
            FromList = fromList;
            FromValue = fromValue;
            Headers = headers;
            HostHeader = hostHeader;
            HotlinkProtection = hotlinkProtection;
            Id = id;
            Increment = increment;
            MatchedData = matchedData;
            Mirage = mirage;
            OpportunisticEncryption = opportunisticEncryption;
            Origin = origin;
            OriginCacheControl = originCacheControl;
            OriginErrorPagePassthru = originErrorPagePassthru;
            Overrides = overrides;
            Phases = phases;
            Polish = polish;
            Products = products;
            RawResponseFields = rawResponseFields;
            ReadTimeout = readTimeout;
            RequestFields = requestFields;
            RespectStrongEtags = respectStrongEtags;
            Response = response;
            ResponseFields = responseFields;
            RocketLoader = rocketLoader;
            Rules = rules;
            Ruleset = ruleset;
            Rulesets = rulesets;
            SecurityLevel = securityLevel;
            ServeStale = serveStale;
            ServerSideExcludes = serverSideExcludes;
            Sni = sni;
            Ssl = ssl;
            StatusCode = statusCode;
            Sxg = sxg;
            TransformedRequestFields = transformedRequestFields;
            Uri = uri;
        }
    }
}
