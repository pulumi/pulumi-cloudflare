// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetRateLimitsResultResult
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        public readonly Outputs.GetRateLimitsResultActionResult Action;
        /// <summary>
        /// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRateLimitsResultBypassResult> Bypasses;
        /// <summary>
        /// An informative summary of the rule. This value is sanitized and any tags will be removed.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// When true, indicates that the rate limit is currently disabled.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// The unique identifier of the rate limit.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold.
        /// </summary>
        public readonly Outputs.GetRateLimitsResultMatchResult Match;
        /// <summary>
        /// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
        /// </summary>
        public readonly double Period;
        /// <summary>
        /// The threshold that will trigger the configured mitigation action. Configure this value along with the `Period` property to establish a threshold per period.
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private GetRateLimitsResultResult(
            Outputs.GetRateLimitsResultActionResult action,

            ImmutableArray<Outputs.GetRateLimitsResultBypassResult> bypasses,

            string description,

            bool disabled,

            string id,

            Outputs.GetRateLimitsResultMatchResult match,

            double period,

            double threshold)
        {
            Action = action;
            Bypasses = bypasses;
            Description = description;
            Disabled = disabled;
            Id = id;
            Match = match;
            Period = period;
            Threshold = threshold;
        }
    }
}
