// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class MagicWanIpsecTunnelHealthCheck
    {
        /// <summary>
        /// The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
        /// Available values: "unidirectional", "bidirectional".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// Determines whether to run healthchecks for a tunnel.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// How frequent the health check is run. The default value is `mid`.
        /// Available values: "low", "mid", "high".
        /// </summary>
        public readonly string? Rate;
        /// <summary>
        /// The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
        /// </summary>
        public readonly Outputs.MagicWanIpsecTunnelHealthCheckTarget? Target;
        /// <summary>
        /// The type of healthcheck to run, reply or request. The default value is `reply`.
        /// Available values: "reply", "request".
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private MagicWanIpsecTunnelHealthCheck(
            string? direction,

            bool? enabled,

            string? rate,

            Outputs.MagicWanIpsecTunnelHealthCheckTarget? target,

            string? type)
        {
            Direction = direction;
            Enabled = enabled;
            Rate = rate;
            Target = target;
            Type = type;
        }
    }
}
