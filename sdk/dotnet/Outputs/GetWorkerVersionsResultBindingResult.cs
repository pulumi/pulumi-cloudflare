// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetWorkerVersionsResultBindingResult
    {
        /// <summary>
        /// Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
        /// </summary>
        public readonly string Algorithm;
        /// <summary>
        /// List of allowed destination addresses.
        /// </summary>
        public readonly ImmutableArray<string> AllowedDestinationAddresses;
        /// <summary>
        /// List of allowed sender addresses.
        /// </summary>
        public readonly ImmutableArray<string> AllowedSenderAddresses;
        /// <summary>
        /// R2 bucket to bind to.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// Identifier of the certificate to bind to.
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// The exported class name of the Durable Object.
        /// </summary>
        public readonly string ClassName;
        /// <summary>
        /// The name of the dataset to bind to.
        /// </summary>
        public readonly string Dataset;
        /// <summary>
        /// Destination address for the email.
        /// </summary>
        public readonly string DestinationAddress;
        /// <summary>
        /// The environment of the script_name to bind to.
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
        /// Available values: "raw", "pkcs8", "spki", "jwk".
        /// </summary>
        public readonly string Format;
        /// <summary>
        /// Identifier of the D1 database to bind to.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the Vectorize index to bind to.
        /// </summary>
        public readonly string IndexName;
        /// <summary>
        /// JSON data to use.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
        /// Available values: "eu", "fedramp".
        /// </summary>
        public readonly string Jurisdiction;
        /// <summary>
        /// Base64-encoded key data. Required if `format` is "raw", "pkcs8", or "spki".
        /// </summary>
        public readonly string KeyBase64;
        /// <summary>
        /// Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is "jwk".
        /// </summary>
        public readonly string KeyJwk;
        /// <summary>
        /// A JavaScript variable name for the binding.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Namespace to bind to.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        public readonly string NamespaceId;
        /// <summary>
        /// The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
        /// </summary>
        public readonly string OldName;
        /// <summary>
        /// Outbound worker.
        /// </summary>
        public readonly Outputs.GetWorkerVersionsResultBindingOutboundResult Outbound;
        /// <summary>
        /// The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
        /// </summary>
        public readonly string Part;
        /// <summary>
        /// Name of the Pipeline to bind to.
        /// </summary>
        public readonly string Pipeline;
        /// <summary>
        /// Name of the Queue to bind to.
        /// </summary>
        public readonly string QueueName;
        /// <summary>
        /// The script where the Durable Object is defined, if it is external to this Worker.
        /// </summary>
        public readonly string ScriptName;
        /// <summary>
        /// Name of the secret in the store.
        /// </summary>
        public readonly string SecretName;
        /// <summary>
        /// Name of Worker to bind to.
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// ID of the store containing the secret.
        /// </summary>
        public readonly string StoreId;
        /// <summary>
        /// The text value to use.
        /// </summary>
        public readonly string Text;
        /// <summary>
        /// The kind of resource that the binding provides.
        /// Available values: "ai", "analytics*engine", "assets", "browser", "d1", "data*blob", "dispatch*namespace", "durable*object*namespace", "hyperdrive", "inherit", "images", "json", "kv*namespace", "mtls*certificate", "plain*text", "pipelines", "queue", "r2*bucket", "secret*text", "send*email", "service", "tail*consumer", "text*blob", "vectorize", "version*metadata", "secrets*store*secret", "secret*key", "workflow", "wasm*module".
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
        /// </summary>
        public readonly ImmutableArray<string> Usages;
        /// <summary>
        /// Identifier for the version to inherit the binding from, which can be the version ID or the literal "latest" to inherit from the latest version. Defaults to inheriting the binding from the latest version.
        /// </summary>
        public readonly string VersionId;
        /// <summary>
        /// Name of the Workflow to bind to.
        /// </summary>
        public readonly string WorkflowName;

        [OutputConstructor]
        private GetWorkerVersionsResultBindingResult(
            string algorithm,

            ImmutableArray<string> allowedDestinationAddresses,

            ImmutableArray<string> allowedSenderAddresses,

            string bucketName,

            string certificateId,

            string className,

            string dataset,

            string destinationAddress,

            string environment,

            string format,

            string id,

            string indexName,

            string json,

            string jurisdiction,

            string keyBase64,

            string keyJwk,

            string name,

            string @namespace,

            string namespaceId,

            string oldName,

            Outputs.GetWorkerVersionsResultBindingOutboundResult outbound,

            string part,

            string pipeline,

            string queueName,

            string scriptName,

            string secretName,

            string service,

            string storeId,

            string text,

            string type,

            ImmutableArray<string> usages,

            string versionId,

            string workflowName)
        {
            Algorithm = algorithm;
            AllowedDestinationAddresses = allowedDestinationAddresses;
            AllowedSenderAddresses = allowedSenderAddresses;
            BucketName = bucketName;
            CertificateId = certificateId;
            ClassName = className;
            Dataset = dataset;
            DestinationAddress = destinationAddress;
            Environment = environment;
            Format = format;
            Id = id;
            IndexName = indexName;
            Json = json;
            Jurisdiction = jurisdiction;
            KeyBase64 = keyBase64;
            KeyJwk = keyJwk;
            Name = name;
            Namespace = @namespace;
            NamespaceId = namespaceId;
            OldName = oldName;
            Outbound = outbound;
            Part = part;
            Pipeline = pipeline;
            QueueName = queueName;
            ScriptName = scriptName;
            SecretName = secretName;
            Service = service;
            StoreId = storeId;
            Text = text;
            Type = type;
            Usages = usages;
            VersionId = versionId;
            WorkflowName = workflowName;
        }
    }
}
