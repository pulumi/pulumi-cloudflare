// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetFirewallRulesResultResult
    {
        /// <summary>
        /// The action to apply to a matched request. The `Log` action is only available on an Enterprise plan.
        /// Available values: "block", "challenge", "js*challenge", "managed*challenge", "allow", "log", "bypass".
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// An informative summary of the firewall rule.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetFirewallRulesResultFilterResult Filter;
        /// <summary>
        /// The unique identifier of the firewall rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
        /// </summary>
        public readonly double Priority;
        public readonly ImmutableArray<string> Products;
        /// <summary>
        /// A short reference tag. Allows you to select related firewall rules.
        /// </summary>
        public readonly string Ref;

        [OutputConstructor]
        private GetFirewallRulesResultResult(
            string action,

            string description,

            Outputs.GetFirewallRulesResultFilterResult filter,

            string id,

            bool paused,

            double priority,

            ImmutableArray<string> products,

            string @ref)
        {
            Action = action;
            Description = description;
            Filter = filter;
            Id = id;
            Paused = paused;
            Priority = priority;
            Products = products;
            Ref = @ref;
        }
    }
}
