// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class ZeroTrustAccessApplicationDestination
    {
        /// <summary>
        /// The CIDR range of the destination. Single IPs will be computed as /32.
        /// </summary>
        public readonly string? Cidr;
        /// <summary>
        /// The hostname of the destination. Matches a valid SNI served by an HTTPS origin.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// The L4 protocol of the destination. When omitted, both UDP and TCP traffic will match.
        /// Available values: "tcp", "udp".
        /// </summary>
        public readonly string? L4Protocol;
        /// <summary>
        /// The port range of the destination. Can be a single port or a range of ports. When omitted, all ports will match.
        /// </summary>
        public readonly string? PortRange;
        /// <summary>
        /// Available values: "public".
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The URI of the destination. Public destinations' URIs can include a domain and path with [wildcards](https://developers.cloudflare.com/cloudflare-one/policies/access/app-paths/).
        /// </summary>
        public readonly string? Uri;
        /// <summary>
        /// The VNET ID to match the destination. When omitted, all VNETs will match.
        /// </summary>
        public readonly string? VnetId;

        [OutputConstructor]
        private ZeroTrustAccessApplicationDestination(
            string? cidr,

            string? hostname,

            string? l4Protocol,

            string? portRange,

            string? type,

            string? uri,

            string? vnetId)
        {
            Cidr = cidr;
            Hostname = hostname;
            L4Protocol = l4Protocol;
            PortRange = portRange;
            Type = type;
            Uri = uri;
            VnetId = vnetId;
        }
    }
}
