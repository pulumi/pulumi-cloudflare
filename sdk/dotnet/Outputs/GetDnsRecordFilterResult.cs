// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetDnsRecordFilterResult
    {
        public readonly Outputs.GetDnsRecordFilterCommentResult? Comment;
        public readonly Outputs.GetDnsRecordFilterContentResult? Content;
        /// <summary>
        /// Direction to order DNS records in.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.
        /// Available values: "any", "all".
        /// </summary>
        public readonly string Match;
        public readonly Outputs.GetDnsRecordFilterNameResult? Name;
        /// <summary>
        /// Field to order DNS records by.
        /// Available values: "type", "name", "content", "ttl", "proxied".
        /// </summary>
        public readonly string Order;
        /// <summary>
        /// Whether the record is receiving the performance and security benefits of Cloudflare.
        /// </summary>
        public readonly bool Proxied;
        /// <summary>
        /// Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.
        /// </summary>
        public readonly string? Search;
        public readonly Outputs.GetDnsRecordFilterTagResult? Tag;
        /// <summary>
        /// Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.
        /// Available values: "any", "all".
        /// </summary>
        public readonly string TagMatch;
        /// <summary>
        /// Record type.
        /// Available values: "A", "AAAA", "CAA", "CERT", "CNAME", "DNSKEY", "DS", "HTTPS", "LOC", "MX", "NAPTR", "NS", "OPENPGPKEY", "PTR", "SMIMEA", "SRV", "SSHFP", "SVCB", "TLSA", "TXT", "URI".
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetDnsRecordFilterResult(
            Outputs.GetDnsRecordFilterCommentResult? comment,

            Outputs.GetDnsRecordFilterContentResult? content,

            string direction,

            string match,

            Outputs.GetDnsRecordFilterNameResult? name,

            string order,

            bool proxied,

            string? search,

            Outputs.GetDnsRecordFilterTagResult? tag,

            string tagMatch,

            string? type)
        {
            Comment = comment;
            Content = content;
            Direction = direction;
            Match = match;
            Name = name;
            Order = order;
            Proxied = proxied;
            Search = search;
            Tag = tag;
            TagMatch = tagMatch;
            Type = type;
        }
    }
}
