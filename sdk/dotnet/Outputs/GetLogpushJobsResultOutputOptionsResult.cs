// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetLogpushJobsResultOutputOptionsResult
    {
        /// <summary>
        /// String to be prepended before each batch.
        /// </summary>
        public readonly string BatchPrefix;
        /// <summary>
        /// String to be appended after each batch.
        /// </summary>
        public readonly string BatchSuffix;
        /// <summary>
        /// If set to true, will cause all occurrences of `${` in the generated files to be replaced with `x{`.
        /// </summary>
        public readonly bool Cve202144228;
        /// <summary>
        /// String to join fields. This field be ignored when `record_template` is set.
        /// </summary>
        public readonly string FieldDelimiter;
        /// <summary>
        /// List of field names to be included in the Logpush output. For the moment, there is no option to add all fields at once, so you must specify all the fields names you are interested in.
        /// </summary>
        public readonly ImmutableArray<string> FieldNames;
        /// <summary>
        /// Specifies the output type, such as `ndjson` or `csv`. This sets default values for the rest of the settings, depending on the chosen output type. Some formatting rules, like string quoting, are different between output types.
        /// Available values: "ndjson", "csv".
        /// </summary>
        public readonly string OutputType;
        /// <summary>
        /// String to be inserted in-between the records as separator.
        /// </summary>
        public readonly string RecordDelimiter;
        /// <summary>
        /// String to be prepended before each record.
        /// </summary>
        public readonly string RecordPrefix;
        /// <summary>
        /// String to be appended after each record.
        /// </summary>
        public readonly string RecordSuffix;
        /// <summary>
        /// String to use as template for each record instead of the default comma-separated list. All fields used in the template must be present in `field_names` as well, otherwise they will end up as null. Format as a Go `text/template` without any standard functions, like conditionals, loops, sub-templates, etc.
        /// </summary>
        public readonly string RecordTemplate;
        /// <summary>
        /// Floating number to specify sampling rate. Sampling is applied on top of filtering, and regardless of the current `sample_interval` of the data.
        /// </summary>
        public readonly double SampleRate;
        /// <summary>
        /// String to specify the format for timestamps, such as `unixnano`, `unix`, or `rfc3339`.
        /// Available values: "unixnano", "unix", "rfc3339".
        /// </summary>
        public readonly string TimestampFormat;

        [OutputConstructor]
        private GetLogpushJobsResultOutputOptionsResult(
            string batchPrefix,

            string batchSuffix,

            bool cve202144228,

            string fieldDelimiter,

            ImmutableArray<string> fieldNames,

            string outputType,

            string recordDelimiter,

            string recordPrefix,

            string recordSuffix,

            string recordTemplate,

            double sampleRate,

            string timestampFormat)
        {
            BatchPrefix = batchPrefix;
            BatchSuffix = batchSuffix;
            Cve202144228 = cve202144228;
            FieldDelimiter = fieldDelimiter;
            FieldNames = fieldNames;
            OutputType = outputType;
            RecordDelimiter = recordDelimiter;
            RecordPrefix = recordPrefix;
            RecordSuffix = recordSuffix;
            RecordTemplate = recordTemplate;
            SampleRate = sampleRate;
            TimestampFormat = timestampFormat;
        }
    }
}
