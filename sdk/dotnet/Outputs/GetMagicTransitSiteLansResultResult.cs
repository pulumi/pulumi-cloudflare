// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetMagicTransitSiteLansResultResult
    {
        /// <summary>
        /// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
        /// </summary>
        public readonly bool HaLink;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly Outputs.GetMagicTransitSiteLansResultNatResult Nat;
        public readonly int Physport;
        public readonly ImmutableArray<Outputs.GetMagicTransitSiteLansResultRoutedSubnetResult> RoutedSubnets;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string SiteId;
        /// <summary>
        /// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
        /// </summary>
        public readonly Outputs.GetMagicTransitSiteLansResultStaticAddressingResult StaticAddressing;
        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        public readonly int VlanTag;

        [OutputConstructor]
        private GetMagicTransitSiteLansResultResult(
            bool haLink,

            string id,

            string name,

            Outputs.GetMagicTransitSiteLansResultNatResult nat,

            int physport,

            ImmutableArray<Outputs.GetMagicTransitSiteLansResultRoutedSubnetResult> routedSubnets,

            string siteId,

            Outputs.GetMagicTransitSiteLansResultStaticAddressingResult staticAddressing,

            int vlanTag)
        {
            HaLink = haLink;
            Id = id;
            Name = name;
            Nat = nat;
            Physport = physport;
            RoutedSubnets = routedSubnets;
            SiteId = siteId;
            StaticAddressing = staticAddressing;
            VlanTag = vlanTag;
        }
    }
}
