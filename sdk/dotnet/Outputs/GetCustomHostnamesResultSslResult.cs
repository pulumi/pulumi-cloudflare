// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetCustomHostnamesResultSslResult
    {
        /// <summary>
        /// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
        /// Available values: "ubiquitous", "optimal", "force".
        /// </summary>
        public readonly string BundleMethod;
        /// <summary>
        /// The Certificate Authority that will issue the certificate
        /// Available values: "digicert", "google", "lets*encrypt", "ssl*com".
        /// </summary>
        public readonly string CertificateAuthority;
        /// <summary>
        /// If a custom uploaded certificate is used.
        /// </summary>
        public readonly string CustomCertificate;
        /// <summary>
        /// The identifier for the Custom CSR that was used.
        /// </summary>
        public readonly string CustomCsrId;
        /// <summary>
        /// The key for a custom uploaded certificate.
        /// </summary>
        public readonly string CustomKey;
        /// <summary>
        /// The time the custom certificate expires on.
        /// </summary>
        public readonly string ExpiresOn;
        /// <summary>
        /// A list of Hostnames on a custom uploaded certificate.
        /// </summary>
        public readonly ImmutableArray<string> Hosts;
        /// <summary>
        /// Custom hostname SSL identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The issuer on a custom uploaded certificate.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// Domain control validation (DCV) method used for this hostname.
        /// Available values: "http", "txt", "email".
        /// </summary>
        public readonly string Method;
        /// <summary>
        /// The serial number on a custom uploaded certificate.
        /// </summary>
        public readonly string SerialNumber;
        public readonly Outputs.GetCustomHostnamesResultSslSettingsResult Settings;
        /// <summary>
        /// The signature on a custom uploaded certificate.
        /// </summary>
        public readonly string Signature;
        /// <summary>
        /// Status of the hostname's SSL certificates.
        /// Available values: "initializing", "pending*validation", "deleted", "pending*issuance", "pending*deployment", "pending*deletion", "pending*expiration", "expired", "active", "initializing*timed*out", "validation*timed*out", "issuance*timed*out", "deployment*timed*out", "deletion*timed*out", "pending*cleanup", "staging*deployment", "staging*active", "deactivating", "inactive", "backup*issued", "holding*deployment".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Level of validation to be used for this hostname. Domain validation (dv) must be used.
        /// Available values: "dv".
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The time the custom certificate was uploaded.
        /// </summary>
        public readonly string UploadedOn;
        /// <summary>
        /// Domain validation errors that have been received by the certificate authority (CA).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCustomHostnamesResultSslValidationErrorResult> ValidationErrors;
        public readonly ImmutableArray<Outputs.GetCustomHostnamesResultSslValidationRecordResult> ValidationRecords;
        /// <summary>
        /// Indicates whether the certificate covers a wildcard.
        /// </summary>
        public readonly bool Wildcard;

        [OutputConstructor]
        private GetCustomHostnamesResultSslResult(
            string bundleMethod,

            string certificateAuthority,

            string customCertificate,

            string customCsrId,

            string customKey,

            string expiresOn,

            ImmutableArray<string> hosts,

            string id,

            string issuer,

            string method,

            string serialNumber,

            Outputs.GetCustomHostnamesResultSslSettingsResult settings,

            string signature,

            string status,

            string type,

            string uploadedOn,

            ImmutableArray<Outputs.GetCustomHostnamesResultSslValidationErrorResult> validationErrors,

            ImmutableArray<Outputs.GetCustomHostnamesResultSslValidationRecordResult> validationRecords,

            bool wildcard)
        {
            BundleMethod = bundleMethod;
            CertificateAuthority = certificateAuthority;
            CustomCertificate = customCertificate;
            CustomCsrId = customCsrId;
            CustomKey = customKey;
            ExpiresOn = expiresOn;
            Hosts = hosts;
            Id = id;
            Issuer = issuer;
            Method = method;
            SerialNumber = serialNumber;
            Settings = settings;
            Signature = signature;
            Status = status;
            Type = type;
            UploadedOn = uploadedOn;
            ValidationErrors = validationErrors;
            ValidationRecords = validationRecords;
            Wildcard = wildcard;
        }
    }
}
