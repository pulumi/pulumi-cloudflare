// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetAccessRuleFilterResult
    {
        public readonly Outputs.GetAccessRuleFilterConfigurationResult? Configuration;
        /// <summary>
        /// Defines the direction used to sort returned rules.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// Defines the search requirements. When set to `All`, all the search requirements must match. When set to `Any`, only one of the search requirements has to match.
        /// Available values: "any", "all".
        /// </summary>
        public readonly string Match;
        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// Defines the string to search for in the notes of existing IP Access rules.
        /// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// Defines the field used to sort returned rules.
        /// Available values: "configuration.target", "configuration.value", "mode".
        /// </summary>
        public readonly string? Order;

        [OutputConstructor]
        private GetAccessRuleFilterResult(
            Outputs.GetAccessRuleFilterConfigurationResult? configuration,

            string? direction,

            string match,

            string? mode,

            string? notes,

            string? order)
        {
            Configuration = configuration;
            Direction = direction;
            Match = match;
            Mode = mode;
            Notes = notes;
            Order = order;
        }
    }
}
