// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetNotificationPoliciesResultResult
    {
        /// <summary>
        /// Optional specification of how often to re-alert from the same incident, not support on all alert types.
        /// </summary>
        public readonly string AlertInterval;
        /// <summary>
        /// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
        /// Available values: "access*custom*certificate*expiration*type", "advanced*ddos*attack*l4*alert", "advanced*ddos*attack*l7*alert", "advanced*http*alert*error", "bgp*hijack*notification", "billing*usage*alert", "block*notification*block*removed", "block*notification*new*block", "block*notification*review*rejected", "brand*protection*alert", "brand*protection*digest", "clickhouse*alert*fw*anomaly", "clickhouse*alert*fw*ent*anomaly", "cloudforce*one*request*notification", "custom*analytics", "custom*ssl*certificate*event*type", "dedicated*ssl*certificate*event*type", "device*connectivity*anomaly*alert", "dos*attack*l4", "dos*attack*l7", "expiring*service*token*alert", "failing*logpush*job*disabled*alert", "fbm*auto*advertisement", "fbm*dosd*attack", "fbm*volumetric*attack", "health*check*status*notification", "hostname*aop*custom*certificate*expiration*type", "http*alert*edge*error", "http*alert*origin*error", "image*notification", "image*resizing*notification", "incident*alert", "load*balancing*health*alert", "load*balancing*pool*enablement*alert", "logo*match*alert", "magic*tunnel*health*check*event", "magic*wan*tunnel*health", "maintenance*event*notification", "mtls*certificate*store*certificate*expiration*type", "pages*event*alert", "radar*notification", "real*origin*monitoring", "scriptmonitor*alert*new*code*change*detections", "scriptmonitor*alert*new*hosts", "scriptmonitor*alert*new*malicious*hosts", "scriptmonitor*alert*new*malicious*scripts", "scriptmonitor*alert*new*malicious*url", "scriptmonitor*alert*new*max*length*resource*url", "scriptmonitor*alert*new*resources", "secondary*dns*all*primaries*failing", "secondary*dns*primaries*failing", "secondary*dns*warning", "secondary*dns*zone*successfully*updated", "secondary*dns*zone*validation*warning", "security*insights*alert", "sentinel*alert", "stream*live*notifications", "synthetic*test*latency*alert", "synthetic*test*low*availability*alert", "traffic*anomalies*alert", "tunnel*health*event", "tunnel*update*event", "universal*ssl*event*type", "web*analytics*metrics*update", "zone*aop*custom*certificate*expiration*type".
        /// </summary>
        public readonly string AlertType;
        public readonly string Created;
        /// <summary>
        /// Optional description for the Notification policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether or not the Notification policy is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
        /// </summary>
        public readonly Outputs.GetNotificationPoliciesResultFiltersResult Filters;
        /// <summary>
        /// The unique identifier of a notification policy
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
        /// </summary>
        public readonly Outputs.GetNotificationPoliciesResultMechanismsResult Mechanisms;
        public readonly string Modified;
        /// <summary>
        /// Name of the policy.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetNotificationPoliciesResultResult(
            string alertInterval,

            string alertType,

            string created,

            string description,

            bool enabled,

            Outputs.GetNotificationPoliciesResultFiltersResult filters,

            string id,

            Outputs.GetNotificationPoliciesResultMechanismsResult mechanisms,

            string modified,

            string name)
        {
            AlertInterval = alertInterval;
            AlertType = alertType;
            Created = created;
            Description = description;
            Enabled = enabled;
            Filters = filters;
            Id = id;
            Mechanisms = mechanisms;
            Modified = modified;
            Name = name;
        }
    }
}
