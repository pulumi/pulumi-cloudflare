// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetPagesProjectCanonicalDeploymentResult
    {
        /// <summary>
        /// A list of alias URLs pointing to this deployment.
        /// </summary>
        public readonly ImmutableArray<string> Aliases;
        /// <summary>
        /// Configs for the project build process.
        /// </summary>
        public readonly Outputs.GetPagesProjectCanonicalDeploymentBuildConfigResult BuildConfig;
        /// <summary>
        /// When the deployment was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Info about what caused the deployment.
        /// </summary>
        public readonly Outputs.GetPagesProjectCanonicalDeploymentDeploymentTriggerResult DeploymentTrigger;
        /// <summary>
        /// Environment variables used for builds and Pages Functions.
        /// </summary>
        public readonly ImmutableDictionary<string, Outputs.GetPagesProjectCanonicalDeploymentEnvVarsResult> EnvVars;
        /// <summary>
        /// Type of deploy.
        /// Available values: "preview", "production".
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// Id of the deployment.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If the deployment has been skipped.
        /// </summary>
        public readonly bool IsSkipped;
        /// <summary>
        /// The status of the deployment.
        /// </summary>
        public readonly Outputs.GetPagesProjectCanonicalDeploymentLatestStageResult LatestStage;
        /// <summary>
        /// When the deployment was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// Id of the project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Name of the project.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// Short Id (8 character) of the deployment.
        /// </summary>
        public readonly string ShortId;
        public readonly Outputs.GetPagesProjectCanonicalDeploymentSourceResult Source;
        /// <summary>
        /// List of past stages.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPagesProjectCanonicalDeploymentStageResult> Stages;
        /// <summary>
        /// The live URL to view this deployment.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetPagesProjectCanonicalDeploymentResult(
            ImmutableArray<string> aliases,

            Outputs.GetPagesProjectCanonicalDeploymentBuildConfigResult buildConfig,

            string createdOn,

            Outputs.GetPagesProjectCanonicalDeploymentDeploymentTriggerResult deploymentTrigger,

            ImmutableDictionary<string, Outputs.GetPagesProjectCanonicalDeploymentEnvVarsResult> envVars,

            string environment,

            string id,

            bool isSkipped,

            Outputs.GetPagesProjectCanonicalDeploymentLatestStageResult latestStage,

            string modifiedOn,

            string projectId,

            string projectName,

            string shortId,

            Outputs.GetPagesProjectCanonicalDeploymentSourceResult source,

            ImmutableArray<Outputs.GetPagesProjectCanonicalDeploymentStageResult> stages,

            string url)
        {
            Aliases = aliases;
            BuildConfig = buildConfig;
            CreatedOn = createdOn;
            DeploymentTrigger = deploymentTrigger;
            EnvVars = envVars;
            Environment = environment;
            Id = id;
            IsSkipped = isSkipped;
            LatestStage = latestStage;
            ModifiedOn = modifiedOn;
            ProjectId = projectId;
            ProjectName = projectName;
            ShortId = shortId;
            Source = source;
            Stages = stages;
            Url = url;
        }
    }
}
