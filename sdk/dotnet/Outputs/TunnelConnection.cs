// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class TunnelConnection
    {
        /// <summary>
        /// UUID of the Cloudflare Tunnel connector.
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// The cloudflared version used to establish this connection.
        /// </summary>
        public readonly string? ClientVersion;
        /// <summary>
        /// The Cloudflare data center used for this connection.
        /// </summary>
        public readonly string? ColoName;
        /// <summary>
        /// UUID of the Cloudflare Tunnel connection.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
        /// </summary>
        public readonly bool? IsPendingReconnect;
        /// <summary>
        /// Timestamp of when the connection was established.
        /// </summary>
        public readonly string? OpenedAt;
        /// <summary>
        /// The public IP address of the host running cloudflared.
        /// </summary>
        public readonly string? OriginIp;
        /// <summary>
        /// UUID of the Cloudflare Tunnel connection.
        /// </summary>
        public readonly string? Uuid;

        [OutputConstructor]
        private TunnelConnection(
            string? clientId,

            string? clientVersion,

            string? coloName,

            string? id,

            bool? isPendingReconnect,

            string? openedAt,

            string? originIp,

            string? uuid)
        {
            ClientId = clientId;
            ClientVersion = clientVersion;
            ColoName = coloName;
            Id = id;
            IsPendingReconnect = isPendingReconnect;
            OpenedAt = openedAt;
            OriginIp = originIp;
            Uuid = uuid;
        }
    }
}
