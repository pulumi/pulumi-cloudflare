// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetZonesResultResult
    {
        /// <summary>
        /// The account the zone belongs to
        /// </summary>
        public readonly Outputs.GetZonesResultAccountResult Account;
        /// <summary>
        /// The last time proof of ownership was detected and the zone was made
        /// active
        /// </summary>
        public readonly string ActivatedOn;
        /// <summary>
        /// When the zone was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The interval (in seconds) from when development mode expires
        /// (positive integer) or last expired (negative integer) for the
        /// domain. If development mode has never been enabled, this value is 0.
        /// </summary>
        public readonly double DevelopmentMode;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metadata about the zone
        /// </summary>
        public readonly Outputs.GetZonesResultMetaResult Meta;
        /// <summary>
        /// When the zone was last modified
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// The domain name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The name servers Cloudflare assigns to a zone
        /// </summary>
        public readonly ImmutableArray<string> NameServers;
        /// <summary>
        /// DNS host at the time of switching to Cloudflare
        /// </summary>
        public readonly string OriginalDnshost;
        /// <summary>
        /// Original name servers before moving to Cloudflare
        /// </summary>
        public readonly ImmutableArray<string> OriginalNameServers;
        /// <summary>
        /// Registrar for the domain at the time of switching to Cloudflare
        /// </summary>
        public readonly string OriginalRegistrar;
        /// <summary>
        /// The owner of the zone
        /// </summary>
        public readonly Outputs.GetZonesResultOwnerResult Owner;
        /// <summary>
        /// Indicates whether the zone is only using Cloudflare DNS services. A
        /// true value means the zone will not receive security or performance
        /// benefits.
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// The zone status on Cloudflare.
        /// Available values: "initializing", "pending", "active", "moved".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        /// typically a partner-hosted zone or a CNAME setup.
        /// Available values: "full", "partial", "secondary", "internal".
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// An array of domains used for custom name servers. This is only available for Business and Enterprise plans.
        /// </summary>
        public readonly ImmutableArray<string> VanityNameServers;
        /// <summary>
        /// Verification key for partial zone setup.
        /// </summary>
        public readonly string VerificationKey;

        [OutputConstructor]
        private GetZonesResultResult(
            Outputs.GetZonesResultAccountResult account,

            string activatedOn,

            string createdOn,

            double developmentMode,

            string id,

            Outputs.GetZonesResultMetaResult meta,

            string modifiedOn,

            string name,

            ImmutableArray<string> nameServers,

            string originalDnshost,

            ImmutableArray<string> originalNameServers,

            string originalRegistrar,

            Outputs.GetZonesResultOwnerResult owner,

            bool paused,

            string status,

            string type,

            ImmutableArray<string> vanityNameServers,

            string verificationKey)
        {
            Account = account;
            ActivatedOn = activatedOn;
            CreatedOn = createdOn;
            DevelopmentMode = developmentMode;
            Id = id;
            Meta = meta;
            ModifiedOn = modifiedOn;
            Name = name;
            NameServers = nameServers;
            OriginalDnshost = originalDnshost;
            OriginalNameServers = originalNameServers;
            OriginalRegistrar = originalRegistrar;
            Owner = owner;
            Paused = paused;
            Status = status;
            Type = type;
            VanityNameServers = vanityNameServers;
            VerificationKey = verificationKey;
        }
    }
}
