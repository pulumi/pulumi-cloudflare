// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Outputs
{

    [OutputType]
    public sealed class GetAccountDnsSettingsZoneDefaultsResult
    {
        /// <summary>
        /// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
        /// </summary>
        public readonly bool FlattenAllCnames;
        /// <summary>
        /// Whether to enable Foundation DNS Advanced Nameservers on the zone.
        /// </summary>
        public readonly bool FoundationDns;
        /// <summary>
        /// Settings for this internal zone.
        /// </summary>
        public readonly Outputs.GetAccountDnsSettingsZoneDefaultsInternalDnsResult InternalDns;
        /// <summary>
        /// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
        /// </summary>
        public readonly bool MultiProvider;
        /// <summary>
        /// Settings determining the nameservers through which the zone should be available.
        /// </summary>
        public readonly Outputs.GetAccountDnsSettingsZoneDefaultsNameserversResult Nameservers;
        /// <summary>
        /// The time to live (TTL) of the zone's nameserver (NS) records.
        /// </summary>
        public readonly double NsTtl;
        /// <summary>
        /// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
        /// </summary>
        public readonly bool SecondaryOverrides;
        /// <summary>
        /// Components of the zone's SOA record.
        /// </summary>
        public readonly Outputs.GetAccountDnsSettingsZoneDefaultsSoaResult Soa;
        /// <summary>
        /// Whether the zone mode is a regular or CDN/DNS only zone.
        /// Available values: "standard", "cdn*only", "dns*only".
        /// </summary>
        public readonly string ZoneMode;

        [OutputConstructor]
        private GetAccountDnsSettingsZoneDefaultsResult(
            bool flattenAllCnames,

            bool foundationDns,

            Outputs.GetAccountDnsSettingsZoneDefaultsInternalDnsResult internalDns,

            bool multiProvider,

            Outputs.GetAccountDnsSettingsZoneDefaultsNameserversResult nameservers,

            double nsTtl,

            bool secondaryOverrides,

            Outputs.GetAccountDnsSettingsZoneDefaultsSoaResult soa,

            string zoneMode)
        {
            FlattenAllCnames = flattenAllCnames;
            FoundationDns = foundationDns;
            InternalDns = internalDns;
            MultiProvider = multiProvider;
            Nameservers = nameservers;
            NsTtl = nsTtl;
            SecondaryOverrides = secondaryOverrides;
            Soa = soa;
            ZoneMode = zoneMode;
        }
    }
}
