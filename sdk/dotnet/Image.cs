// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleImage = new Cloudflare.Image("example_image", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         File = null,
    ///         Metadata = null,
    ///         RequireSignedUrls = true,
    ///         Url = "https://example.com/path/to/logo.png",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/image:Image example '&lt;account_id&gt;/&lt;image_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// An image binary data. Only needed when type is uploading a file.
        /// </summary>
        [Output("file")]
        public Output<string?> File { get; private set; } = null!;

        /// <summary>
        /// Image file name.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
        /// </summary>
        [Output("meta")]
        public Output<string> Meta { get; private set; } = null!;

        /// <summary>
        /// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the image requires a signature token for the access.
        /// </summary>
        [Output("requireSignedUrls")]
        public Output<bool> RequireSignedUrls { get; private set; } = null!;

        /// <summary>
        /// When the media item was uploaded.
        /// </summary>
        [Output("uploaded")]
        public Output<string> Uploaded { get; private set; } = null!;

        /// <summary>
        /// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// Object specifying available variants for an image.
        /// </summary>
        [Output("variants")]
        public Output<ImmutableArray<string>> Variants { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// An image binary data. Only needed when type is uploading a file.
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        /// <summary>
        /// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// Indicates whether the image requires a signature token for the access.
        /// </summary>
        [Input("requireSignedUrls")]
        public Input<bool>? RequireSignedUrls { get; set; }

        /// <summary>
        /// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// An image binary data. Only needed when type is uploading a file.
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        /// <summary>
        /// Image file name.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// Indicates whether the image requires a signature token for the access.
        /// </summary>
        [Input("requireSignedUrls")]
        public Input<bool>? RequireSignedUrls { get; set; }

        /// <summary>
        /// When the media item was uploaded.
        /// </summary>
        [Input("uploaded")]
        public Input<string>? Uploaded { get; set; }

        /// <summary>
        /// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("variants")]
        private InputList<string>? _variants;

        /// <summary>
        /// Object specifying available variants for an image.
        /// </summary>
        public InputList<string> Variants
        {
            get => _variants ?? (_variants = new InputList<string>());
            set => _variants = value;
        }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
