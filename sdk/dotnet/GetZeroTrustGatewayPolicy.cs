// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustGatewayPolicy
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayPolicy = Cloudflare.GetZeroTrustGatewayPolicy.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         RuleId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustGatewayPolicyResult> InvokeAsync(GetZeroTrustGatewayPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustGatewayPolicyResult>("cloudflare:index/getZeroTrustGatewayPolicy:getZeroTrustGatewayPolicy", args ?? new GetZeroTrustGatewayPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayPolicy = Cloudflare.GetZeroTrustGatewayPolicy.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         RuleId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustGatewayPolicyResult> Invoke(GetZeroTrustGatewayPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustGatewayPolicyResult>("cloudflare:index/getZeroTrustGatewayPolicy:getZeroTrustGatewayPolicy", args ?? new GetZeroTrustGatewayPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayPolicy = Cloudflare.GetZeroTrustGatewayPolicy.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         RuleId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustGatewayPolicyResult> Invoke(GetZeroTrustGatewayPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustGatewayPolicyResult>("cloudflare:index/getZeroTrustGatewayPolicy:getZeroTrustGatewayPolicy", args ?? new GetZeroTrustGatewayPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustGatewayPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identify the API resource with a UUID.
        /// </summary>
        [Input("ruleId")]
        public string? RuleId { get; set; }

        public GetZeroTrustGatewayPolicyArgs()
        {
        }
        public static new GetZeroTrustGatewayPolicyArgs Empty => new GetZeroTrustGatewayPolicyArgs();
    }

    public sealed class GetZeroTrustGatewayPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identify the API resource with a UUID.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        public GetZeroTrustGatewayPolicyInvokeArgs()
        {
        }
        public static new GetZeroTrustGatewayPolicyInvokeArgs Empty => new GetZeroTrustGatewayPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustGatewayPolicyResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
        /// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4_override", "egress", "resolve", "quarantine", "redirect".
        /// </summary>
        public readonly string Action;
        public readonly string CreatedAt;
        /// <summary>
        /// Indicate the date of deletion, if any.
        /// </summary>
        public readonly string DeletedAt;
        /// <summary>
        /// Specify the rule description.
        /// </summary>
        public readonly string Description;
        public readonly string DevicePosture;
        /// <summary>
        /// Specify whether the rule is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyExpirationResult Expiration;
        /// <summary>
        /// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
        /// </summary>
        public readonly ImmutableArray<string> Filters;
        /// <summary>
        /// Identify the API resource with a UUID.
        /// </summary>
        public readonly string Id;
        public readonly string Identity;
        /// <summary>
        /// Specify the rule name.
        /// </summary>
        public readonly string Name;
        public readonly int Precedence;
        /// <summary>
        /// Indicate that this rule is shared via the Orgs API and read only.
        /// </summary>
        public readonly bool ReadOnly;
        /// <summary>
        /// Identify the API resource with a UUID.
        /// </summary>
        public readonly string? RuleId;
        public readonly Outputs.GetZeroTrustGatewayPolicyRuleSettingsResult RuleSettings;
        /// <summary>
        /// Defines the schedule for activating DNS policies. Settable only for `dns` and `dns_resolver` rules.
        /// </summary>
        public readonly Outputs.GetZeroTrustGatewayPolicyScheduleResult Schedule;
        /// <summary>
        /// Indicate that this rule is sharable via the Orgs API.
        /// </summary>
        public readonly bool Sharable;
        /// <summary>
        /// Provide the account tag of the account that created the rule.
        /// </summary>
        public readonly string SourceAccount;
        public readonly string Traffic;
        public readonly string UpdatedAt;
        /// <summary>
        /// Indicate the version number of the rule(read-only).
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Indicate a warning for a misconfigured rule, if any.
        /// </summary>
        public readonly string WarningStatus;

        [OutputConstructor]
        private GetZeroTrustGatewayPolicyResult(
            string accountId,

            string action,

            string createdAt,

            string deletedAt,

            string description,

            string devicePosture,

            bool enabled,

            Outputs.GetZeroTrustGatewayPolicyExpirationResult expiration,

            ImmutableArray<string> filters,

            string id,

            string identity,

            string name,

            int precedence,

            bool readOnly,

            string? ruleId,

            Outputs.GetZeroTrustGatewayPolicyRuleSettingsResult ruleSettings,

            Outputs.GetZeroTrustGatewayPolicyScheduleResult schedule,

            bool sharable,

            string sourceAccount,

            string traffic,

            string updatedAt,

            int version,

            string warningStatus)
        {
            AccountId = accountId;
            Action = action;
            CreatedAt = createdAt;
            DeletedAt = deletedAt;
            Description = description;
            DevicePosture = devicePosture;
            Enabled = enabled;
            Expiration = expiration;
            Filters = filters;
            Id = id;
            Identity = identity;
            Name = name;
            Precedence = precedence;
            ReadOnly = readOnly;
            RuleId = ruleId;
            RuleSettings = ruleSettings;
            Schedule = schedule;
            Sharable = sharable;
            SourceAccount = sourceAccount;
            Traffic = traffic;
            UpdatedAt = updatedAt;
            Version = version;
            WarningStatus = warningStatus;
        }
    }
}
