// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls")]
    public partial class AuthenticatedOriginPulls : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("certId")]
        public Output<string> CertId { get; private set; } = null!;

        /// <summary>
        /// Status of the certificate or the association.
        /// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
        /// </summary>
        [Output("certStatus")]
        public Output<string> CertStatus { get; private set; } = null!;

        /// <summary>
        /// The time when the certificate was updated.
        /// </summary>
        [Output("certUpdatedAt")]
        public Output<string> CertUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The time when the certificate was uploaded.
        /// </summary>
        [Output("certUploadedOn")]
        public Output<string> CertUploadedOn { get; private set; } = null!;

        /// <summary>
        /// The hostname certificate.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        [Output("configs")]
        public Output<ImmutableArray<Outputs.AuthenticatedOriginPullsConfig>> Configs { get; private set; } = null!;

        /// <summary>
        /// The time when the certificate was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The date when the certificate expires.
        /// </summary>
        [Output("expiresOn")]
        public Output<string> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// The hostname on the origin for which the client certificate uploaded will be used.
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// The hostname certificate's private key.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The serial number on the uploaded certificate.
        /// </summary>
        [Output("serialNumber")]
        public Output<string> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// The type of hash used for the certificate.
        /// </summary>
        [Output("signature")]
        public Output<string> Signature { get; private set; } = null!;

        /// <summary>
        /// Status of the certificate or the association.
        /// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The time when the certificate was updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AuthenticatedOriginPulls resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthenticatedOriginPulls(string name, AuthenticatedOriginPullsArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls", name, args ?? new AuthenticatedOriginPullsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthenticatedOriginPulls(string name, Input<string> id, AuthenticatedOriginPullsState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthenticatedOriginPulls resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthenticatedOriginPulls Get(string name, Input<string> id, AuthenticatedOriginPullsState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthenticatedOriginPulls(name, id, state, options);
        }
    }

    public sealed class AuthenticatedOriginPullsArgs : global::Pulumi.ResourceArgs
    {
        [Input("configs", required: true)]
        private InputList<Inputs.AuthenticatedOriginPullsConfigArgs>? _configs;
        public InputList<Inputs.AuthenticatedOriginPullsConfigArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.AuthenticatedOriginPullsConfigArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// The hostname on the origin for which the client certificate uploaded will be used.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public AuthenticatedOriginPullsArgs()
        {
        }
        public static new AuthenticatedOriginPullsArgs Empty => new AuthenticatedOriginPullsArgs();
    }

    public sealed class AuthenticatedOriginPullsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("certId")]
        public Input<string>? CertId { get; set; }

        /// <summary>
        /// Status of the certificate or the association.
        /// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
        /// </summary>
        [Input("certStatus")]
        public Input<string>? CertStatus { get; set; }

        /// <summary>
        /// The time when the certificate was updated.
        /// </summary>
        [Input("certUpdatedAt")]
        public Input<string>? CertUpdatedAt { get; set; }

        /// <summary>
        /// The time when the certificate was uploaded.
        /// </summary>
        [Input("certUploadedOn")]
        public Input<string>? CertUploadedOn { get; set; }

        /// <summary>
        /// The hostname certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("configs")]
        private InputList<Inputs.AuthenticatedOriginPullsConfigGetArgs>? _configs;
        public InputList<Inputs.AuthenticatedOriginPullsConfigGetArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.AuthenticatedOriginPullsConfigGetArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// The time when the certificate was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The date when the certificate expires.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The hostname on the origin for which the client certificate uploaded will be used.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The hostname certificate's private key.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The serial number on the uploaded certificate.
        /// </summary>
        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        /// <summary>
        /// The type of hash used for the certificate.
        /// </summary>
        [Input("signature")]
        public Input<string>? Signature { get; set; }

        /// <summary>
        /// Status of the certificate or the association.
        /// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The time when the certificate was updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AuthenticatedOriginPullsState()
        {
        }
        public static new AuthenticatedOriginPullsState Empty => new AuthenticatedOriginPullsState();
    }
}
