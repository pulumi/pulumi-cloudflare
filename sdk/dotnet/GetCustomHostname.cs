// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetCustomHostname
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostname = Cloudflare.GetCustomHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CustomHostnameId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCustomHostnameResult> InvokeAsync(GetCustomHostnameArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomHostnameResult>("cloudflare:index/getCustomHostname:getCustomHostname", args ?? new GetCustomHostnameArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostname = Cloudflare.GetCustomHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CustomHostnameId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCustomHostnameResult> Invoke(GetCustomHostnameInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomHostnameResult>("cloudflare:index/getCustomHostname:getCustomHostname", args ?? new GetCustomHostnameInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostname = Cloudflare.GetCustomHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CustomHostnameId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCustomHostnameResult> Invoke(GetCustomHostnameInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomHostnameResult>("cloudflare:index/getCustomHostname:getCustomHostname", args ?? new GetCustomHostnameInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomHostnameArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("customHostnameId")]
        public string? CustomHostnameId { get; set; }

        [Input("filter")]
        public Inputs.GetCustomHostnameFilterArgs? Filter { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetCustomHostnameArgs()
        {
        }
        public static new GetCustomHostnameArgs Empty => new GetCustomHostnameArgs();
    }

    public sealed class GetCustomHostnameInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("customHostnameId")]
        public Input<string>? CustomHostnameId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetCustomHostnameFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetCustomHostnameInvokeArgs()
        {
        }
        public static new GetCustomHostnameInvokeArgs Empty => new GetCustomHostnameInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomHostnameResult
    {
        /// <summary>
        /// This is the time the hostname was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string? CustomHostnameId;
        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        public readonly ImmutableDictionary<string, string> CustomMetadata;
        /// <summary>
        /// a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        public readonly string CustomOriginServer;
        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        public readonly string CustomOriginSni;
        public readonly Outputs.GetCustomHostnameFilterResult? Filter;
        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// This is a record which can be placed to activate a hostname.
        /// </summary>
        public readonly Outputs.GetCustomHostnameOwnershipVerificationResult OwnershipVerification;
        /// <summary>
        /// This presents the token to be served by the given http url to activate a hostname.
        /// </summary>
        public readonly Outputs.GetCustomHostnameOwnershipVerificationHttpResult OwnershipVerificationHttp;
        public readonly Outputs.GetCustomHostnameSslResult Ssl;
        /// <summary>
        /// Status of the hostname's activation.
        /// Available values: "active", "pending", "active*redeploying", "moved", "pending*deletion", "deleted", "pending*blocked", "pending*migration", "pending*provisioned", "test*pending", "test*active", "test*active*apex", "test*blocked", "test_failed", "provisioned", "blocked".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// These are errors that were encountered while trying to activate a hostname.
        /// </summary>
        public readonly ImmutableArray<string> VerificationErrors;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetCustomHostnameResult(
            string createdAt,

            string? customHostnameId,

            ImmutableDictionary<string, string> customMetadata,

            string customOriginServer,

            string customOriginSni,

            Outputs.GetCustomHostnameFilterResult? filter,

            string hostname,

            string id,

            Outputs.GetCustomHostnameOwnershipVerificationResult ownershipVerification,

            Outputs.GetCustomHostnameOwnershipVerificationHttpResult ownershipVerificationHttp,

            Outputs.GetCustomHostnameSslResult ssl,

            string status,

            ImmutableArray<string> verificationErrors,

            string zoneId)
        {
            CreatedAt = createdAt;
            CustomHostnameId = customHostnameId;
            CustomMetadata = customMetadata;
            CustomOriginServer = customOriginServer;
            CustomOriginSni = customOriginSni;
            Filter = filter;
            Hostname = hostname;
            Id = id;
            OwnershipVerification = ownershipVerification;
            OwnershipVerificationHttp = ownershipVerificationHttp;
            Ssl = ssl;
            Status = status;
            VerificationErrors = verificationErrors;
            ZoneId = zoneId;
        }
    }
}
