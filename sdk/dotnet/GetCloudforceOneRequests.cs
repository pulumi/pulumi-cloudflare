// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetCloudforceOneRequests
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCloudforceOneRequests = Cloudflare.GetCloudforceOneRequests.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Page = 0,
        ///         PerPage = 10,
        ///         CompletedAfter = "2022-01-01T00:00:00Z",
        ///         CompletedBefore = "2024-01-01T00:00:00Z",
        ///         CreatedAfter = "2022-01-01T00:00:00Z",
        ///         CreatedBefore = "2024-01-01T00:00:00Z",
        ///         RequestType = "Victomology",
        ///         SortBy = "created",
        ///         SortOrder = "asc",
        ///         Status = "open",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCloudforceOneRequestsResult> InvokeAsync(GetCloudforceOneRequestsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCloudforceOneRequestsResult>("cloudflare:index/getCloudforceOneRequests:getCloudforceOneRequests", args ?? new GetCloudforceOneRequestsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCloudforceOneRequests = Cloudflare.GetCloudforceOneRequests.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Page = 0,
        ///         PerPage = 10,
        ///         CompletedAfter = "2022-01-01T00:00:00Z",
        ///         CompletedBefore = "2024-01-01T00:00:00Z",
        ///         CreatedAfter = "2022-01-01T00:00:00Z",
        ///         CreatedBefore = "2024-01-01T00:00:00Z",
        ///         RequestType = "Victomology",
        ///         SortBy = "created",
        ///         SortOrder = "asc",
        ///         Status = "open",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCloudforceOneRequestsResult> Invoke(GetCloudforceOneRequestsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCloudforceOneRequestsResult>("cloudflare:index/getCloudforceOneRequests:getCloudforceOneRequests", args ?? new GetCloudforceOneRequestsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCloudforceOneRequests = Cloudflare.GetCloudforceOneRequests.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Page = 0,
        ///         PerPage = 10,
        ///         CompletedAfter = "2022-01-01T00:00:00Z",
        ///         CompletedBefore = "2024-01-01T00:00:00Z",
        ///         CreatedAfter = "2022-01-01T00:00:00Z",
        ///         CreatedBefore = "2024-01-01T00:00:00Z",
        ///         RequestType = "Victomology",
        ///         SortBy = "created",
        ///         SortOrder = "asc",
        ///         Status = "open",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCloudforceOneRequestsResult> Invoke(GetCloudforceOneRequestsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCloudforceOneRequestsResult>("cloudflare:index/getCloudforceOneRequests:getCloudforceOneRequests", args ?? new GetCloudforceOneRequestsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCloudforceOneRequestsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Retrieve requests completed after this time.
        /// </summary>
        [Input("completedAfter")]
        public string? CompletedAfter { get; set; }

        /// <summary>
        /// Retrieve requests completed before this time.
        /// </summary>
        [Input("completedBefore")]
        public string? CompletedBefore { get; set; }

        /// <summary>
        /// Retrieve requests created after this time.
        /// </summary>
        [Input("createdAfter")]
        public string? CreatedAfter { get; set; }

        /// <summary>
        /// Retrieve requests created before this time.
        /// </summary>
        [Input("createdBefore")]
        public string? CreatedBefore { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Page number of results.
        /// </summary>
        [Input("page", required: true)]
        public int Page { get; set; }

        /// <summary>
        /// Number of results per page.
        /// </summary>
        [Input("perPage", required: true)]
        public int PerPage { get; set; }

        /// <summary>
        /// Requested information from request.
        /// </summary>
        [Input("requestType")]
        public string? RequestType { get; set; }

        /// <summary>
        /// Field to sort results by.
        /// </summary>
        [Input("sortBy")]
        public string? SortBy { get; set; }

        /// <summary>
        /// Sort order (asc or desc).
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("sortOrder")]
        public string? SortOrder { get; set; }

        /// <summary>
        /// Request Status.
        /// Available values: "open", "accepted", "reported", "approved", "completed", "declined".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetCloudforceOneRequestsArgs()
        {
        }
        public static new GetCloudforceOneRequestsArgs Empty => new GetCloudforceOneRequestsArgs();
    }

    public sealed class GetCloudforceOneRequestsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Retrieve requests completed after this time.
        /// </summary>
        [Input("completedAfter")]
        public Input<string>? CompletedAfter { get; set; }

        /// <summary>
        /// Retrieve requests completed before this time.
        /// </summary>
        [Input("completedBefore")]
        public Input<string>? CompletedBefore { get; set; }

        /// <summary>
        /// Retrieve requests created after this time.
        /// </summary>
        [Input("createdAfter")]
        public Input<string>? CreatedAfter { get; set; }

        /// <summary>
        /// Retrieve requests created before this time.
        /// </summary>
        [Input("createdBefore")]
        public Input<string>? CreatedBefore { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Page number of results.
        /// </summary>
        [Input("page", required: true)]
        public Input<int> Page { get; set; } = null!;

        /// <summary>
        /// Number of results per page.
        /// </summary>
        [Input("perPage", required: true)]
        public Input<int> PerPage { get; set; } = null!;

        /// <summary>
        /// Requested information from request.
        /// </summary>
        [Input("requestType")]
        public Input<string>? RequestType { get; set; }

        /// <summary>
        /// Field to sort results by.
        /// </summary>
        [Input("sortBy")]
        public Input<string>? SortBy { get; set; }

        /// <summary>
        /// Sort order (asc or desc).
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("sortOrder")]
        public Input<string>? SortOrder { get; set; }

        /// <summary>
        /// Request Status.
        /// Available values: "open", "accepted", "reported", "approved", "completed", "declined".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetCloudforceOneRequestsInvokeArgs()
        {
        }
        public static new GetCloudforceOneRequestsInvokeArgs Empty => new GetCloudforceOneRequestsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCloudforceOneRequestsResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Retrieve requests completed after this time.
        /// </summary>
        public readonly string? CompletedAfter;
        /// <summary>
        /// Retrieve requests completed before this time.
        /// </summary>
        public readonly string? CompletedBefore;
        /// <summary>
        /// Retrieve requests created after this time.
        /// </summary>
        public readonly string? CreatedAfter;
        /// <summary>
        /// Retrieve requests created before this time.
        /// </summary>
        public readonly string? CreatedBefore;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// Page number of results.
        /// </summary>
        public readonly int Page;
        /// <summary>
        /// Number of results per page.
        /// </summary>
        public readonly int PerPage;
        /// <summary>
        /// Requested information from request.
        /// </summary>
        public readonly string? RequestType;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCloudforceOneRequestsResultResult> Results;
        /// <summary>
        /// Field to sort results by.
        /// </summary>
        public readonly string? SortBy;
        /// <summary>
        /// Sort order (asc or desc).
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? SortOrder;
        /// <summary>
        /// Request Status.
        /// Available values: "open", "accepted", "reported", "approved", "completed", "declined".
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetCloudforceOneRequestsResult(
            string accountId,

            string? completedAfter,

            string? completedBefore,

            string? createdAfter,

            string? createdBefore,

            string id,

            int? maxItems,

            int page,

            int perPage,

            string? requestType,

            ImmutableArray<Outputs.GetCloudforceOneRequestsResultResult> results,

            string? sortBy,

            string? sortOrder,

            string? status)
        {
            AccountId = accountId;
            CompletedAfter = completedAfter;
            CompletedBefore = completedBefore;
            CreatedAfter = createdAfter;
            CreatedBefore = createdBefore;
            Id = id;
            MaxItems = maxItems;
            Page = page;
            PerPage = perPage;
            RequestType = requestType;
            Results = results;
            SortBy = sortBy;
            SortOrder = sortOrder;
            Status = status;
        }
    }
}
