// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Device Managed Network resource. Device managed networks allow for building location-aware device settings policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var managedNetworks = new Cloudflare.DeviceManagedNetworks("managedNetworks", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Config = new Cloudflare.Inputs.DeviceManagedNetworksConfigArgs
    ///         {
    ///             Sha256 = "b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c",
    ///             TlsSockaddr = "foobar:1234",
    ///         },
    ///         Name = "managed-network-1",
    ///         Type = "tls",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks example &lt;account_id&gt;/&lt;device_managed_networks_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks")]
    public partial class DeviceManagedNetworks : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The configuration containing information for the WARP client to detect the managed network.
        /// </summary>
        [Output("config")]
        public Output<Outputs.DeviceManagedNetworksConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The name of the Device Managed Network. Must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of Device Managed Network. Available values: `tls`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceManagedNetworks resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceManagedNetworks(string name, DeviceManagedNetworksArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks", name, args ?? new DeviceManagedNetworksArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceManagedNetworks(string name, Input<string> id, DeviceManagedNetworksState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceManagedNetworks resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceManagedNetworks Get(string name, Input<string> id, DeviceManagedNetworksState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceManagedNetworks(name, id, state, options);
        }
    }

    public sealed class DeviceManagedNetworksArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The configuration containing information for the WARP client to detect the managed network.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.DeviceManagedNetworksConfigArgs> Config { get; set; } = null!;

        /// <summary>
        /// The name of the Device Managed Network. Must be unique.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The type of Device Managed Network. Available values: `tls`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DeviceManagedNetworksArgs()
        {
        }
        public static new DeviceManagedNetworksArgs Empty => new DeviceManagedNetworksArgs();
    }

    public sealed class DeviceManagedNetworksState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The configuration containing information for the WARP client to detect the managed network.
        /// </summary>
        [Input("config")]
        public Input<Inputs.DeviceManagedNetworksConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The name of the Device Managed Network. Must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of Device Managed Network. Available values: `tls`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DeviceManagedNetworksState()
        {
        }
        public static new DeviceManagedNetworksState Empty => new DeviceManagedNetworksState();
    }
}
