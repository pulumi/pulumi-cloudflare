// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Teams Proxy Endpoint resource. Teams Proxy Endpoints are used for pointing proxy clients at
    /// Cloudflare Secure Gateway.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var corporateOffice = new Cloudflare.TeamsProxyEndpoint("corporateOffice", new Cloudflare.TeamsProxyEndpointArgs
    ///         {
    ///             AccountId = "1d5fdc9e88c8a8c4518b068cd94331fe",
    ///             Ips = 
    ///             {
    ///                 "192.0.2.0/24",
    ///             },
    ///             Name = "office",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Teams Proxy Endpoints can be imported using a composite ID formed of account ID and teams proxy_endpoint ID.
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint corporate_office cb029e245cfdd66dc8d2e570d5dd3322/d41d8cd98f00b204e9800998ecf8427e
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint")]
    public partial class TeamsProxyEndpoint : Pulumi.CustomResource
    {
        /// <summary>
        /// The account to which the teams proxy endpoint should be added.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The networks CIDRs that will be allowed to initiate proxy connections.
        /// </summary>
        [Output("ips")]
        public Output<ImmutableArray<string>> Ips { get; private set; } = null!;

        /// <summary>
        /// Name of the teams proxy endpoint.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The FQDN that proxy clients should be pointed at.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;


        /// <summary>
        /// Create a TeamsProxyEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamsProxyEndpoint(string name, TeamsProxyEndpointArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint", name, args ?? new TeamsProxyEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamsProxyEndpoint(string name, Input<string> id, TeamsProxyEndpointState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamsProxyEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamsProxyEndpoint Get(string name, Input<string> id, TeamsProxyEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamsProxyEndpoint(name, id, state, options);
        }
    }

    public sealed class TeamsProxyEndpointArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account to which the teams proxy endpoint should be added.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("ips", required: true)]
        private InputList<string>? _ips;

        /// <summary>
        /// The networks CIDRs that will be allowed to initiate proxy connections.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// Name of the teams proxy endpoint.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public TeamsProxyEndpointArgs()
        {
        }
    }

    public sealed class TeamsProxyEndpointState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account to which the teams proxy endpoint should be added.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("ips")]
        private InputList<string>? _ips;

        /// <summary>
        /// The networks CIDRs that will be allowed to initiate proxy connections.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// Name of the teams proxy endpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The FQDN that proxy clients should be pointed at.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public TeamsProxyEndpointState()
        {
        }
    }
}
