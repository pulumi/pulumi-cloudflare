// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkersForPlatformsDispatchNamespace = new Cloudflare.WorkersForPlatformsDispatchNamespace("example_workers_for_platforms_dispatch_namespace", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Name = "my-dispatch-namespace",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace example '&lt;account_id&gt;/&lt;dispatch_namespace&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace")]
    public partial class WorkersForPlatformsDispatchNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("modifiedBy")]
        public Output<string> ModifiedBy { get; private set; } = null!;

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The name of the dispatch namespace
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// API Resource UUID tag.
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// Name of the Workers for Platforms dispatch namespace.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// The current number of scripts in this Dispatch Namespace
        /// </summary>
        [Output("scriptCount")]
        public Output<int> ScriptCount { get; private set; } = null!;


        /// <summary>
        /// Create a WorkersForPlatformsDispatchNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkersForPlatformsDispatchNamespace(string name, WorkersForPlatformsDispatchNamespaceArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace", name, args ?? new WorkersForPlatformsDispatchNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkersForPlatformsDispatchNamespace(string name, Input<string> id, WorkersForPlatformsDispatchNamespaceState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkersForPlatformsDispatchNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkersForPlatformsDispatchNamespace Get(string name, Input<string> id, WorkersForPlatformsDispatchNamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkersForPlatformsDispatchNamespace(name, id, state, options);
        }
    }

    public sealed class WorkersForPlatformsDispatchNamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The name of the dispatch namespace
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public WorkersForPlatformsDispatchNamespaceArgs()
        {
        }
        public static new WorkersForPlatformsDispatchNamespaceArgs Empty => new WorkersForPlatformsDispatchNamespaceArgs();
    }

    public sealed class WorkersForPlatformsDispatchNamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("modifiedBy")]
        public Input<string>? ModifiedBy { get; set; }

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The name of the dispatch namespace
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// API Resource UUID tag.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// Name of the Workers for Platforms dispatch namespace.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        /// <summary>
        /// The current number of scripts in this Dispatch Namespace
        /// </summary>
        [Input("scriptCount")]
        public Input<int>? ScriptCount { get; set; }

        public WorkersForPlatformsDispatchNamespaceState()
        {
        }
        public static new WorkersForPlatformsDispatchNamespaceState Empty => new WorkersForPlatformsDispatchNamespaceState();
    }
}
