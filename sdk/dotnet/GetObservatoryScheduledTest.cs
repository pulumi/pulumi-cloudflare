// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetObservatoryScheduledTest
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleObservatoryScheduledTest = Cloudflare.GetObservatoryScheduledTest.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Url = "example.com",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetObservatoryScheduledTestResult> InvokeAsync(GetObservatoryScheduledTestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetObservatoryScheduledTestResult>("cloudflare:index/getObservatoryScheduledTest:getObservatoryScheduledTest", args ?? new GetObservatoryScheduledTestArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleObservatoryScheduledTest = Cloudflare.GetObservatoryScheduledTest.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Url = "example.com",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetObservatoryScheduledTestResult> Invoke(GetObservatoryScheduledTestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetObservatoryScheduledTestResult>("cloudflare:index/getObservatoryScheduledTest:getObservatoryScheduledTest", args ?? new GetObservatoryScheduledTestInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleObservatoryScheduledTest = Cloudflare.GetObservatoryScheduledTest.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Url = "example.com",
        ///         Region = "us-central1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetObservatoryScheduledTestResult> Invoke(GetObservatoryScheduledTestInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetObservatoryScheduledTestResult>("cloudflare:index/getObservatoryScheduledTest:getObservatoryScheduledTest", args ?? new GetObservatoryScheduledTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetObservatoryScheduledTestArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A test region.
        /// Available values: "asia-east1", "asia-northeast1", "asia-northeast2", "asia-south1", "asia-southeast1", "australia-southeast1", "europe-north1", "europe-southwest1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west8", "europe-west9", "me-west1", "southamerica-east1", "us-central1", "us-east1", "us-east4", "us-south1", "us-west1".
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// A URL.
        /// </summary>
        [Input("url", required: true)]
        public string Url { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetObservatoryScheduledTestArgs()
        {
        }
        public static new GetObservatoryScheduledTestArgs Empty => new GetObservatoryScheduledTestArgs();
    }

    public sealed class GetObservatoryScheduledTestInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A test region.
        /// Available values: "asia-east1", "asia-northeast1", "asia-northeast2", "asia-south1", "asia-southeast1", "australia-southeast1", "europe-north1", "europe-southwest1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west8", "europe-west9", "me-west1", "southamerica-east1", "us-central1", "us-east1", "us-east4", "us-south1", "us-west1".
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// A URL.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetObservatoryScheduledTestInvokeArgs()
        {
        }
        public static new GetObservatoryScheduledTestInvokeArgs Empty => new GetObservatoryScheduledTestInvokeArgs();
    }


    [OutputType]
    public sealed class GetObservatoryScheduledTestResult
    {
        /// <summary>
        /// The frequency of the test.
        /// Available values: "DAILY", "WEEKLY".
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A test region.
        /// Available values: "asia-east1", "asia-northeast1", "asia-northeast2", "asia-south1", "asia-southeast1", "australia-southeast1", "europe-north1", "europe-southwest1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west8", "europe-west9", "me-west1", "southamerica-east1", "us-central1", "us-east1", "us-east4", "us-south1", "us-west1".
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// A URL.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetObservatoryScheduledTestResult(
            string frequency,

            string id,

            string region,

            string url,

            string zoneId)
        {
            Frequency = frequency;
            Id = id;
            Region = region;
            Url = url;
            ZoneId = zoneId;
        }
    }
}
