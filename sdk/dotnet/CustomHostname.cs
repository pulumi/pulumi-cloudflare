// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCustomHostname = new Cloudflare.CustomHostname("example_custom_hostname", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Hostname = "app.example.com",
    ///         Ssl = new Cloudflare.Inputs.CustomHostnameSslArgs
    ///         {
    ///             Bundle_method = "ubiquitous",
    ///             Certificate_authority = "google",
    ///             Cloudflare_branding = false,
    ///             Custom_cert_bundle = new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "customCertificate", @"      -----BEGIN CERTIFICATE-----
    ///       MIIDdjCCAl6gAwIBAgIJAPnMg0Fs+/B0MA0GCSqGSIb3DQEBCwUAMFsx...
    ///       -----END CERTIFICATE-----
    /// 
    /// " },
    ///                     { "customKey", @"      -----BEGIN PRIVATE KEY-----
    ///       MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/SCB5...
    ///       -----END PRIVATE KEY-----
    /// 
    /// " },
    ///                 },
    ///             },
    ///             Custom_certificate = "-----BEGIN CERTIFICATE-----\\nMIIFJDCCBAygAwIBAgIQD0ifmj/Yi5NP/2gdUySbfzANBgkqhkiG9w0BAQsFADBN\\nMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMScwJQYDVQQDEx5E...SzSHfXp5lnu/3V08I72q1QNzOCgY1XeL4GKVcj4or6cT6tX6oJH7ePPmfrBfqI/O\\nOeH8gMJ+FuwtXYEPa4hBf38M5eU5xWG7\\n-----END CERTIFICATE-----\\n",
    ///             Custom_key = @"    -----BEGIN RSA PRIVATE KEY-----
    ///     MIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG
    ///     dtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn
    ///     abIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid
    ///     tnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py
    ///     FxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE
    ///     ewooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb
    ///     HBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/
    ///     axiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb
    ///     +ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g
    ///     +j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv
    ///     KLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7
    ///     9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo
    ///     /WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu
    ///     iacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9
    ///     N2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe
    ///     VAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB
    ///     vULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U
    ///     lySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR
    ///     9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7
    ///     mEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX
    ///     dFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe
    ///     PG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS
    ///     fhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W
    ///     qu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T
    ///     lv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi
    ///     -----END RSA PRIVATE KEY-----
    /// 
    /// ",
    ///             Method = "http",
    ///             Settings = new Cloudflare.Inputs.CustomHostnameSslSettingsArgs
    ///             {
    ///                 Ciphers = new[]
    ///                 {
    ///                     "ECDHE-RSA-AES128-GCM-SHA256",
    ///                     "AES128-SHA",
    ///                 },
    ///                 EarlyHints = "on",
    ///                 Http2 = "on",
    ///                 MinTlsVersion = "1.2",
    ///                 Tls13 = "on",
    ///             },
    ///             Type = "dv",
    ///             Wildcard = false,
    ///         },
    ///         CustomMetadata = 
    ///         {
    ///             { "foo", "string" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/customHostname:CustomHostname example '&lt;zone_id&gt;/&lt;custom_hostname_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/customHostname:CustomHostname")]
    public partial class CustomHostname : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is the time the hostname was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        [Output("customMetadata")]
        public Output<ImmutableDictionary<string, string>?> CustomMetadata { get; private set; } = null!;

        /// <summary>
        /// a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Output("customOriginServer")]
        public Output<string?> CustomOriginServer { get; private set; } = null!;

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Output("customOriginSni")]
        public Output<string?> CustomOriginSni { get; private set; } = null!;

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// This is a record which can be placed to activate a hostname.
        /// </summary>
        [Output("ownershipVerification")]
        public Output<Outputs.CustomHostnameOwnershipVerification> OwnershipVerification { get; private set; } = null!;

        /// <summary>
        /// This presents the token to be served by the given http url to activate a hostname.
        /// </summary>
        [Output("ownershipVerificationHttp")]
        public Output<Outputs.CustomHostnameOwnershipVerificationHttp> OwnershipVerificationHttp { get; private set; } = null!;

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Output("ssl")]
        public Output<Outputs.CustomHostnameSsl> Ssl { get; private set; } = null!;

        /// <summary>
        /// Status of the hostname's activation.
        /// Available values: "active", "pending", "active*redeploying", "moved", "pending*deletion", "deleted", "pending*blocked", "pending*migration", "pending*provisioned", "test*pending", "test*active", "test*active*apex", "test*blocked", "TestFailed", "provisioned", "blocked".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// These are errors that were encountered while trying to activate a hostname.
        /// </summary>
        [Output("verificationErrors")]
        public Output<ImmutableArray<string>> VerificationErrors { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CustomHostname resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomHostname(string name, CustomHostnameArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/customHostname:CustomHostname", name, args ?? new CustomHostnameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomHostname(string name, Input<string> id, CustomHostnameState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/customHostname:CustomHostname", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomHostname resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomHostname Get(string name, Input<string> id, CustomHostnameState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomHostname(name, id, state, options);
        }
    }

    public sealed class CustomHostnameArgs : global::Pulumi.ResourceArgs
    {
        [Input("customMetadata")]
        private InputMap<string>? _customMetadata;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        public InputMap<string> CustomMetadata
        {
            get => _customMetadata ?? (_customMetadata = new InputMap<string>());
            set => _customMetadata = value;
        }

        /// <summary>
        /// a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Input("customOriginServer")]
        public Input<string>? CustomOriginServer { get; set; }

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Input("customOriginSni")]
        public Input<string>? CustomOriginSni { get; set; }

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Input("ssl", required: true)]
        public Input<Inputs.CustomHostnameSslArgs> Ssl { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CustomHostnameArgs()
        {
        }
        public static new CustomHostnameArgs Empty => new CustomHostnameArgs();
    }

    public sealed class CustomHostnameState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the time the hostname was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("customMetadata")]
        private InputMap<string>? _customMetadata;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        public InputMap<string> CustomMetadata
        {
            get => _customMetadata ?? (_customMetadata = new InputMap<string>());
            set => _customMetadata = value;
        }

        /// <summary>
        /// a valid hostname thatâ€™s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Input("customOriginServer")]
        public Input<string>? CustomOriginServer { get; set; }

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Input("customOriginSni")]
        public Input<string>? CustomOriginSni { get; set; }

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// This is a record which can be placed to activate a hostname.
        /// </summary>
        [Input("ownershipVerification")]
        public Input<Inputs.CustomHostnameOwnershipVerificationGetArgs>? OwnershipVerification { get; set; }

        /// <summary>
        /// This presents the token to be served by the given http url to activate a hostname.
        /// </summary>
        [Input("ownershipVerificationHttp")]
        public Input<Inputs.CustomHostnameOwnershipVerificationHttpGetArgs>? OwnershipVerificationHttp { get; set; }

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.CustomHostnameSslGetArgs>? Ssl { get; set; }

        /// <summary>
        /// Status of the hostname's activation.
        /// Available values: "active", "pending", "active*redeploying", "moved", "pending*deletion", "deleted", "pending*blocked", "pending*migration", "pending*provisioned", "test*pending", "test*active", "test*active*apex", "test*blocked", "TestFailed", "provisioned", "blocked".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("verificationErrors")]
        private InputList<string>? _verificationErrors;

        /// <summary>
        /// These are errors that were encountered while trying to activate a hostname.
        /// </summary>
        public InputList<string> VerificationErrors
        {
            get => _verificationErrors ?? (_verificationErrors = new InputList<string>());
            set => _verificationErrors = value;
        }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CustomHostnameState()
        {
        }
        public static new CustomHostnameState Empty => new CustomHostnameState();
    }
}
