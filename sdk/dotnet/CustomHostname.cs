// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/customHostname:CustomHostname example '&lt;zone_id&gt;/&lt;custom_hostname_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/customHostname:CustomHostname")]
    public partial class CustomHostname : global::Pulumi.CustomResource
    {
        /// <summary>
        /// This is the time the hostname was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        [Output("customMetadata")]
        public Output<ImmutableDictionary<string, string>?> CustomMetadata { get; private set; } = null!;

        /// <summary>
        /// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Output("customOriginServer")]
        public Output<string?> CustomOriginServer { get; private set; } = null!;

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Output("customOriginSni")]
        public Output<string?> CustomOriginSni { get; private set; } = null!;

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// This is a record which can be placed to activate a hostname.
        /// </summary>
        [Output("ownershipVerification")]
        public Output<Outputs.CustomHostnameOwnershipVerification> OwnershipVerification { get; private set; } = null!;

        /// <summary>
        /// This presents the token to be served by the given http url to activate a hostname.
        /// </summary>
        [Output("ownershipVerificationHttp")]
        public Output<Outputs.CustomHostnameOwnershipVerificationHttp> OwnershipVerificationHttp { get; private set; } = null!;

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Output("ssl")]
        public Output<Outputs.CustomHostnameSsl> Ssl { get; private set; } = null!;

        /// <summary>
        /// Status of the hostname's activation.
        /// Available values: "active", "pending", "active*redeploying", "moved", "pending*deletion", "deleted", "pending*blocked", "pending*migration", "pending*provisioned", "test*pending", "test*active", "test*active*apex", "test*blocked", "test_failed", "provisioned", "blocked".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// These are errors that were encountered while trying to activate a hostname.
        /// </summary>
        [Output("verificationErrors")]
        public Output<ImmutableArray<string>> VerificationErrors { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CustomHostname resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomHostname(string name, CustomHostnameArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/customHostname:CustomHostname", name, args ?? new CustomHostnameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomHostname(string name, Input<string> id, CustomHostnameState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/customHostname:CustomHostname", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomHostname resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomHostname Get(string name, Input<string> id, CustomHostnameState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomHostname(name, id, state, options);
        }
    }

    public sealed class CustomHostnameArgs : global::Pulumi.ResourceArgs
    {
        [Input("customMetadata")]
        private InputMap<string>? _customMetadata;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        public InputMap<string> CustomMetadata
        {
            get => _customMetadata ?? (_customMetadata = new InputMap<string>());
            set => _customMetadata = value;
        }

        /// <summary>
        /// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Input("customOriginServer")]
        public Input<string>? CustomOriginServer { get; set; }

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Input("customOriginSni")]
        public Input<string>? CustomOriginSni { get; set; }

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Input("ssl", required: true)]
        public Input<Inputs.CustomHostnameSslArgs> Ssl { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CustomHostnameArgs()
        {
        }
        public static new CustomHostnameArgs Empty => new CustomHostnameArgs();
    }

    public sealed class CustomHostnameState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the time the hostname was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("customMetadata")]
        private InputMap<string>? _customMetadata;

        /// <summary>
        /// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
        /// </summary>
        public InputMap<string> CustomMetadata
        {
            get => _customMetadata ?? (_customMetadata = new InputMap<string>());
            set => _customMetadata = value;
        }

        /// <summary>
        /// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
        /// </summary>
        [Input("customOriginServer")]
        public Input<string>? CustomOriginServer { get; set; }

        /// <summary>
        /// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
        /// </summary>
        [Input("customOriginSni")]
        public Input<string>? CustomOriginSni { get; set; }

        /// <summary>
        /// The custom hostname that will point to your hostname via CNAME.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// This is a record which can be placed to activate a hostname.
        /// </summary>
        [Input("ownershipVerification")]
        public Input<Inputs.CustomHostnameOwnershipVerificationGetArgs>? OwnershipVerification { get; set; }

        /// <summary>
        /// This presents the token to be served by the given http url to activate a hostname.
        /// </summary>
        [Input("ownershipVerificationHttp")]
        public Input<Inputs.CustomHostnameOwnershipVerificationHttpGetArgs>? OwnershipVerificationHttp { get; set; }

        /// <summary>
        /// SSL properties used when creating the custom hostname.
        /// </summary>
        [Input("ssl")]
        public Input<Inputs.CustomHostnameSslGetArgs>? Ssl { get; set; }

        /// <summary>
        /// Status of the hostname's activation.
        /// Available values: "active", "pending", "active*redeploying", "moved", "pending*deletion", "deleted", "pending*blocked", "pending*migration", "pending*provisioned", "test*pending", "test*active", "test*active*apex", "test*blocked", "test_failed", "provisioned", "blocked".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("verificationErrors")]
        private InputList<string>? _verificationErrors;

        /// <summary>
        /// These are errors that were encountered while trying to activate a hostname.
        /// </summary>
        public InputList<string> VerificationErrors
        {
            get => _verificationErrors ?? (_verificationErrors = new InputList<string>());
            set => _verificationErrors = value;
        }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CustomHostnameState()
        {
        }
        public static new CustomHostnameState Empty => new CustomHostnameState();
    }
}
