// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccessRule
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRule = Cloudflare.GetAccessRule.Invoke(new()
        ///     {
        ///         RuleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccessRuleResult> InvokeAsync(GetAccessRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessRuleResult>("cloudflare:index/getAccessRule:getAccessRule", args ?? new GetAccessRuleArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRule = Cloudflare.GetAccessRule.Invoke(new()
        ///     {
        ///         RuleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessRuleResult> Invoke(GetAccessRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessRuleResult>("cloudflare:index/getAccessRule:getAccessRule", args ?? new GetAccessRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRule = Cloudflare.GetAccessRule.Invoke(new()
        ///     {
        ///         RuleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessRuleResult> Invoke(GetAccessRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessRuleResult>("cloudflare:index/getAccessRule:getAccessRule", args ?? new GetAccessRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        [Input("filter")]
        public Inputs.GetAccessRuleFilterArgs? Filter { get; set; }

        /// <summary>
        /// Unique identifier for a rule.
        /// </summary>
        [Input("ruleId")]
        public string? RuleId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetAccessRuleArgs()
        {
        }
        public static new GetAccessRuleArgs Empty => new GetAccessRuleArgs();
    }

    public sealed class GetAccessRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetAccessRuleFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Unique identifier for a rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetAccessRuleInvokeArgs()
        {
        }
        public static new GetAccessRuleInvokeArgs Empty => new GetAccessRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessRuleResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// The available actions that a rule can apply to a matched request.
        /// </summary>
        public readonly ImmutableArray<string> AllowedModes;
        /// <summary>
        /// The rule configuration.
        /// </summary>
        public readonly Outputs.GetAccessRuleConfigurationResult Configuration;
        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        public readonly string CreatedOn;
        public readonly Outputs.GetAccessRuleFilterResult? Filter;
        /// <summary>
        /// Unique identifier for a rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// An informative summary of the rule, typically used as a reminder or explanation.
        /// </summary>
        public readonly string Notes;
        /// <summary>
        /// Unique identifier for a rule.
        /// </summary>
        public readonly string? RuleId;
        /// <summary>
        /// All zones owned by the user will have the rule applied.
        /// </summary>
        public readonly Outputs.GetAccessRuleScopeResult Scope;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetAccessRuleResult(
            string? accountId,

            ImmutableArray<string> allowedModes,

            Outputs.GetAccessRuleConfigurationResult configuration,

            string createdOn,

            Outputs.GetAccessRuleFilterResult? filter,

            string id,

            string mode,

            string modifiedOn,

            string notes,

            string? ruleId,

            Outputs.GetAccessRuleScopeResult scope,

            string? zoneId)
        {
            AccountId = accountId;
            AllowedModes = allowedModes;
            Configuration = configuration;
            CreatedOn = createdOn;
            Filter = filter;
            Id = id;
            Mode = mode;
            ModifiedOn = modifiedOn;
            Notes = notes;
            RuleId = ruleId;
            Scope = scope;
            ZoneId = zoneId;
        }
    }
}
