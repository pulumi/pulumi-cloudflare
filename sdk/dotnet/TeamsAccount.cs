// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustGatewaySettings = new Cloudflare.ZeroTrustGatewaySettings("example_zero_trust_gateway_settings", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Settings = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsArgs
    ///         {
    ///             Activity_log = 
    ///             {
    ///                 { "enabled", true },
    ///             },
    ///             Antivirus = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsAntivirusArgs
    ///             {
    ///                 EnabledDownloadPhase = false,
    ///                 EnabledUploadPhase = false,
    ///                 FailClosed = false,
    ///                 NotificationSettings = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsAntivirusNotificationSettingsArgs
    ///                 {
    ///                     Enabled = true,
    ///                     IncludeContext = true,
    ///                     Msg = "msg",
    ///                     SupportUrl = "support_url",
    ///                 },
    ///             },
    ///             Block_page = 
    ///             {
    ///                 { "backgroundColor", "background_color" },
    ///                 { "enabled", true },
    ///                 { "footerText", "--footer--" },
    ///                 { "headerText", "--header--" },
    ///                 { "includeContext", true },
    ///                 { "logoPath", "https://logos.com/a.png" },
    ///                 { "mailtoAddress", "admin@example.com" },
    ///                 { "mailtoSubject", "Blocked User Inquiry" },
    ///                 { "mode", "" },
    ///                 { "name", "Cloudflare" },
    ///                 { "suppressFooter", false },
    ///                 { "targetUri", "https://example.com" },
    ///             },
    ///             Body_scanning = 
    ///             {
    ///                 { "inspectionMode", "deep" },
    ///             },
    ///             Browser_isolation = 
    ///             {
    ///                 { "nonIdentityEnabled", true },
    ///                 { "urlBrowserIsolationEnabled", true },
    ///             },
    ///             Certificate = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsCertificateArgs
    ///             {
    ///                 Id = "d1b364c5-1311-466e-a194-f0e943e0799f",
    ///             },
    ///             Custom_certificate = 
    ///             {
    ///                 { "enabled", true },
    ///                 { "id", "d1b364c5-1311-466e-a194-f0e943e0799f" },
    ///             },
    ///             Extended_email_matching = 
    ///             {
    ///                 { "enabled", true },
    ///             },
    ///             Fips = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsFipsArgs
    ///             {
    ///                 Tls = true,
    ///             },
    ///             Host_selector = 
    ///             {
    ///                 { "enabled", false },
    ///             },
    ///             Inspection = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsInspectionArgs
    ///             {
    ///                 Mode = "static",
    ///             },
    ///             Protocol_detection = 
    ///             {
    ///                 { "enabled", true },
    ///             },
    ///             Sandbox = new Cloudflare.Inputs.ZeroTrustGatewaySettingsSettingsSandboxArgs
    ///             {
    ///                 Enabled = true,
    ///                 FallbackAction = "allow",
    ///             },
    ///             Tls_decrypt = 
    ///             {
    ///                 { "enabled", true },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/teamsAccount:TeamsAccount example '&lt;account_id&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/teamsaccount.TeamsAccount has been deprecated in favor of cloudflare.index/zerotrustgatewaysettings.ZeroTrustGatewaySettings")]
    [CloudflareResourceType("cloudflare:index/teamsAccount:TeamsAccount")]
    public partial class TeamsAccount : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Specify account settings.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.TeamsAccountSettings?> Settings { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TeamsAccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamsAccount(string name, TeamsAccountArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsAccount:TeamsAccount", name, args ?? new TeamsAccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamsAccount(string name, Input<string> id, TeamsAccountState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsAccount:TeamsAccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/teamsAccount:TeamsAccount" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamsAccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamsAccount Get(string name, Input<string> id, TeamsAccountState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamsAccount(name, id, state, options);
        }
    }

    public sealed class TeamsAccountArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Specify account settings.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.TeamsAccountSettingsArgs>? Settings { get; set; }

        public TeamsAccountArgs()
        {
        }
        public static new TeamsAccountArgs Empty => new TeamsAccountArgs();
    }

    public sealed class TeamsAccountState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Specify account settings.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.TeamsAccountSettingsGetArgs>? Settings { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TeamsAccountState()
        {
        }
        public static new TeamsAccountState Empty => new TeamsAccountState();
    }
}
