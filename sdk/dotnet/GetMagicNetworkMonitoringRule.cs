// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicNetworkMonitoringRule
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicNetworkMonitoringRule = Cloudflare.GetMagicNetworkMonitoringRule.Invoke(new()
        ///     {
        ///         AccountId = "6f91088a406011ed95aed352566e8d4c",
        ///         RuleId = "2890e6fa406311ed9b5a23f70f6fb8cf",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicNetworkMonitoringRuleResult> InvokeAsync(GetMagicNetworkMonitoringRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicNetworkMonitoringRuleResult>("cloudflare:index/getMagicNetworkMonitoringRule:getMagicNetworkMonitoringRule", args ?? new GetMagicNetworkMonitoringRuleArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicNetworkMonitoringRule = Cloudflare.GetMagicNetworkMonitoringRule.Invoke(new()
        ///     {
        ///         AccountId = "6f91088a406011ed95aed352566e8d4c",
        ///         RuleId = "2890e6fa406311ed9b5a23f70f6fb8cf",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicNetworkMonitoringRuleResult> Invoke(GetMagicNetworkMonitoringRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicNetworkMonitoringRuleResult>("cloudflare:index/getMagicNetworkMonitoringRule:getMagicNetworkMonitoringRule", args ?? new GetMagicNetworkMonitoringRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicNetworkMonitoringRule = Cloudflare.GetMagicNetworkMonitoringRule.Invoke(new()
        ///     {
        ///         AccountId = "6f91088a406011ed95aed352566e8d4c",
        ///         RuleId = "2890e6fa406311ed9b5a23f70f6fb8cf",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicNetworkMonitoringRuleResult> Invoke(GetMagicNetworkMonitoringRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicNetworkMonitoringRuleResult>("cloudflare:index/getMagicNetworkMonitoringRule:getMagicNetworkMonitoringRule", args ?? new GetMagicNetworkMonitoringRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicNetworkMonitoringRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The id of the rule. Must be unique.
        /// </summary>
        [Input("ruleId")]
        public string? RuleId { get; set; }

        public GetMagicNetworkMonitoringRuleArgs()
        {
        }
        public static new GetMagicNetworkMonitoringRuleArgs Empty => new GetMagicNetworkMonitoringRuleArgs();
    }

    public sealed class GetMagicNetworkMonitoringRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The id of the rule. Must be unique.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        public GetMagicNetworkMonitoringRuleInvokeArgs()
        {
        }
        public static new GetMagicNetworkMonitoringRuleInvokeArgs Empty => new GetMagicNetworkMonitoringRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicNetworkMonitoringRuleResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
        /// </summary>
        public readonly bool AutomaticAdvertisement;
        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        public readonly double BandwidthThreshold;
        /// <summary>
        /// The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
        /// Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
        /// </summary>
        public readonly string Duration;
        /// <summary>
        /// The id of the rule. Must be unique.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You canâ€™t have a space in the rule name. Max 256 characters.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        public readonly double PacketThreshold;
        /// <summary>
        /// Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.
        /// Available values: "exact", "subnet", "supernet".
        /// </summary>
        public readonly string PrefixMatch;
        public readonly ImmutableArray<string> Prefixes;
        /// <summary>
        /// The id of the rule. Must be unique.
        /// </summary>
        public readonly string? RuleId;
        /// <summary>
        /// MNM rule type.
        /// Available values: "threshold", "zscore", "advanced_ddos".
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Level of sensitivity set for zscore rules.
        /// Available values: "low", "medium", "high".
        /// </summary>
        public readonly string ZscoreSensitivity;
        /// <summary>
        /// Target of the zscore rule analysis.
        /// Available values: "bits", "packets".
        /// </summary>
        public readonly string ZscoreTarget;

        [OutputConstructor]
        private GetMagicNetworkMonitoringRuleResult(
            string accountId,

            bool automaticAdvertisement,

            double bandwidthThreshold,

            string duration,

            string id,

            string name,

            double packetThreshold,

            string prefixMatch,

            ImmutableArray<string> prefixes,

            string? ruleId,

            string type,

            string zscoreSensitivity,

            string zscoreTarget)
        {
            AccountId = accountId;
            AutomaticAdvertisement = automaticAdvertisement;
            BandwidthThreshold = bandwidthThreshold;
            Duration = duration;
            Id = id;
            Name = name;
            PacketThreshold = packetThreshold;
            PrefixMatch = prefixMatch;
            Prefixes = prefixes;
            RuleId = ruleId;
            Type = type;
            ZscoreSensitivity = zscoreSensitivity;
            ZscoreTarget = zscoreTarget;
        }
    }
}
