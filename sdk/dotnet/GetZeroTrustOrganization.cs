// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustOrganization
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustOrganization = Cloudflare.GetZeroTrustOrganization.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustOrganizationResult> InvokeAsync(GetZeroTrustOrganizationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustOrganizationResult>("cloudflare:index/getZeroTrustOrganization:getZeroTrustOrganization", args ?? new GetZeroTrustOrganizationArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustOrganization = Cloudflare.GetZeroTrustOrganization.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustOrganizationResult> Invoke(GetZeroTrustOrganizationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustOrganizationResult>("cloudflare:index/getZeroTrustOrganization:getZeroTrustOrganization", args ?? new GetZeroTrustOrganizationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustOrganization = Cloudflare.GetZeroTrustOrganization.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustOrganizationResult> Invoke(GetZeroTrustOrganizationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustOrganizationResult>("cloudflare:index/getZeroTrustOrganization:getZeroTrustOrganization", args ?? new GetZeroTrustOrganizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustOrganizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetZeroTrustOrganizationArgs()
        {
        }
        public static new GetZeroTrustOrganizationArgs Empty => new GetZeroTrustOrganizationArgs();
    }

    public sealed class GetZeroTrustOrganizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetZeroTrustOrganizationInvokeArgs()
        {
        }
        public static new GetZeroTrustOrganizationInvokeArgs Empty => new GetZeroTrustOrganizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustOrganizationResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        public readonly bool AllowAuthenticateViaWarp;
        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        public readonly string AuthDomain;
        /// <summary>
        /// When set to `true`, users skip the identity provider selection step during login.
        /// </summary>
        public readonly bool AutoRedirectToIdentity;
        public readonly string CreatedAt;
        public readonly Outputs.GetZeroTrustOrganizationCustomPagesResult CustomPages;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsUiReadOnly;
        public readonly Outputs.GetZeroTrustOrganizationLoginDesignResult LoginDesign;
        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        public readonly string SessionDuration;
        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        public readonly string UiReadOnlyToggleReason;
        public readonly string UpdatedAt;
        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        /// </summary>
        public readonly string UserSeatExpirationInactiveTime;
        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        public readonly string WarpAuthSessionDuration;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetZeroTrustOrganizationResult(
            string? accountId,

            bool allowAuthenticateViaWarp,

            string authDomain,

            bool autoRedirectToIdentity,

            string createdAt,

            Outputs.GetZeroTrustOrganizationCustomPagesResult customPages,

            string id,

            bool isUiReadOnly,

            Outputs.GetZeroTrustOrganizationLoginDesignResult loginDesign,

            string name,

            string sessionDuration,

            string uiReadOnlyToggleReason,

            string updatedAt,

            string userSeatExpirationInactiveTime,

            string warpAuthSessionDuration,

            string? zoneId)
        {
            AccountId = accountId;
            AllowAuthenticateViaWarp = allowAuthenticateViaWarp;
            AuthDomain = authDomain;
            AutoRedirectToIdentity = autoRedirectToIdentity;
            CreatedAt = createdAt;
            CustomPages = customPages;
            Id = id;
            IsUiReadOnly = isUiReadOnly;
            LoginDesign = loginDesign;
            Name = name;
            SessionDuration = sessionDuration;
            UiReadOnlyToggleReason = uiReadOnlyToggleReason;
            UpdatedAt = updatedAt;
            UserSeatExpirationInactiveTime = userSeatExpirationInactiveTime;
            WarpAuthSessionDuration = warpAuthSessionDuration;
            ZoneId = zoneId;
        }
    }
}
