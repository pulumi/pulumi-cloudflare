// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountMembers
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMembers = Cloudflare.GetAccountMembers.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         Direction = "desc",
        ///         Order = "status",
        ///         Status = "accepted",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountMembersResult> InvokeAsync(GetAccountMembersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountMembersResult>("cloudflare:index/getAccountMembers:getAccountMembers", args ?? new GetAccountMembersArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMembers = Cloudflare.GetAccountMembers.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         Direction = "desc",
        ///         Order = "status",
        ///         Status = "accepted",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountMembersResult> Invoke(GetAccountMembersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountMembersResult>("cloudflare:index/getAccountMembers:getAccountMembers", args ?? new GetAccountMembersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMembers = Cloudflare.GetAccountMembers.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         Direction = "desc",
        ///         Order = "status",
        ///         Status = "accepted",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountMembersResult> Invoke(GetAccountMembersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountMembersResult>("cloudflare:index/getAccountMembers:getAccountMembers", args ?? new GetAccountMembersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountMembersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Direction to order results.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Field to order results by.
        /// Available values: "user.first*name", "user.last*name", "user.email", "status".
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// A member's status in the account.
        /// Available values: "accepted", "pending", "rejected".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetAccountMembersArgs()
        {
        }
        public static new GetAccountMembersArgs Empty => new GetAccountMembersArgs();
    }

    public sealed class GetAccountMembersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Direction to order results.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Field to order results by.
        /// Available values: "user.first*name", "user.last*name", "user.email", "status".
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// A member's status in the account.
        /// Available values: "accepted", "pending", "rejected".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetAccountMembersInvokeArgs()
        {
        }
        public static new GetAccountMembersInvokeArgs Empty => new GetAccountMembersInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountMembersResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Direction to order results.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// Field to order results by.
        /// Available values: "user.first*name", "user.last*name", "user.email", "status".
        /// </summary>
        public readonly string? Order;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountMembersResultResult> Results;
        /// <summary>
        /// A member's status in the account.
        /// Available values: "accepted", "pending", "rejected".
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetAccountMembersResult(
            string accountId,

            string? direction,

            string id,

            int? maxItems,

            string? order,

            ImmutableArray<Outputs.GetAccountMembersResultResult> results,

            string? status)
        {
            AccountId = accountId;
            Direction = direction;
            Id = id;
            MaxItems = maxItems;
            Order = order;
            Results = results;
            Status = status;
        }
    }
}
