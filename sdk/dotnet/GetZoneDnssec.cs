// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZoneDnssec
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneDnssec = Cloudflare.GetZoneDnssec.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneDnssecResult> InvokeAsync(GetZoneDnssecArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneDnssecResult>("cloudflare:index/getZoneDnssec:getZoneDnssec", args ?? new GetZoneDnssecArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneDnssec = Cloudflare.GetZoneDnssec.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneDnssecResult> Invoke(GetZoneDnssecInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneDnssecResult>("cloudflare:index/getZoneDnssec:getZoneDnssec", args ?? new GetZoneDnssecInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneDnssec = Cloudflare.GetZoneDnssec.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneDnssecResult> Invoke(GetZoneDnssecInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneDnssecResult>("cloudflare:index/getZoneDnssec:getZoneDnssec", args ?? new GetZoneDnssecInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneDnssecArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneDnssecArgs()
        {
        }
        public static new GetZoneDnssecArgs Empty => new GetZoneDnssecArgs();
    }

    public sealed class GetZoneDnssecInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneDnssecInvokeArgs()
        {
        }
        public static new GetZoneDnssecInvokeArgs Empty => new GetZoneDnssecInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneDnssecResult
    {
        /// <summary>
        /// Algorithm key code.
        /// </summary>
        public readonly string Algorithm;
        /// <summary>
        /// Digest hash.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// Type of digest algorithm.
        /// </summary>
        public readonly string DigestAlgorithm;
        /// <summary>
        /// Coded type for digest algorithm.
        /// </summary>
        public readonly string DigestType;
        /// <summary>
        /// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
        /// providers to serve a DNSSEC-signed zone at the same time.
        /// This is required for DNSKEY records (except those automatically
        /// generated by Cloudflare) to be added to the zone.
        /// </summary>
        public readonly bool DnssecMultiSigner;
        public readonly bool DnssecPresigned;
        public readonly bool DnssecUseNsec3;
        public readonly string Ds;
        public readonly double Flags;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly double KeyTag;
        public readonly string KeyType;
        public readonly string ModifiedOn;
        public readonly string PublicKey;
        public readonly string Status;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneDnssecResult(
            string algorithm,

            string digest,

            string digestAlgorithm,

            string digestType,

            bool dnssecMultiSigner,

            bool dnssecPresigned,

            bool dnssecUseNsec3,

            string ds,

            double flags,

            string id,

            double keyTag,

            string keyType,

            string modifiedOn,

            string publicKey,

            string status,

            string zoneId)
        {
            Algorithm = algorithm;
            Digest = digest;
            DigestAlgorithm = digestAlgorithm;
            DigestType = digestType;
            DnssecMultiSigner = dnssecMultiSigner;
            DnssecPresigned = dnssecPresigned;
            DnssecUseNsec3 = dnssecUseNsec3;
            Ds = ds;
            Flags = flags;
            Id = id;
            KeyTag = keyTag;
            KeyType = keyType;
            ModifiedOn = modifiedOn;
            PublicKey = publicKey;
            Status = status;
            ZoneId = zoneId;
        }
    }
}
