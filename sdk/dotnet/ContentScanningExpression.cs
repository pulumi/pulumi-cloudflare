// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Content Scanning Expression resource for managing custom scan expression within a specific zone.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Enable Content Scanning before trying to add custom scan expressions
    ///     var example = new Cloudflare.ContentScanning("example", new()
    ///     {
    ///         ZoneId = "399c6f4950c01a5a141b99ff7fbcbd8b",
    ///         Enabled = true,
    ///     });
    /// 
    ///     var firstExample = new Cloudflare.ContentScanningExpression("first_example", new()
    ///     {
    ///         ZoneId = example.ZoneId,
    ///         Payload = "lookup_json_string(http.request.body.raw, \"file\")",
    ///     });
    /// 
    ///     var secondExample = new Cloudflare.ContentScanningExpression("second_example", new()
    ///     {
    ///         ZoneId = example.ZoneId,
    ///         Payload = "lookup_json_string(http.request.body.raw, \"document\")",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/contentScanningExpression:ContentScanningExpression example &lt;zone_id&gt;/&lt;resource_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/contentScanningExpression:ContentScanningExpression")]
    public partial class ContentScanningExpression : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom scan expression to tell the content scanner where to find the content objects.
        /// </summary>
        [Output("payload")]
        public Output<string> Payload { get; private set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ContentScanningExpression resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContentScanningExpression(string name, ContentScanningExpressionArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/contentScanningExpression:ContentScanningExpression", name, args ?? new ContentScanningExpressionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContentScanningExpression(string name, Input<string> id, ContentScanningExpressionState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/contentScanningExpression:ContentScanningExpression", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContentScanningExpression resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContentScanningExpression Get(string name, Input<string> id, ContentScanningExpressionState? state = null, CustomResourceOptions? options = null)
        {
            return new ContentScanningExpression(name, id, state, options);
        }
    }

    public sealed class ContentScanningExpressionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom scan expression to tell the content scanner where to find the content objects.
        /// </summary>
        [Input("payload", required: true)]
        public Input<string> Payload { get; set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ContentScanningExpressionArgs()
        {
        }
        public static new ContentScanningExpressionArgs Empty => new ContentScanningExpressionArgs();
    }

    public sealed class ContentScanningExpressionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom scan expression to tell the content scanner where to find the content objects.
        /// </summary>
        [Input("payload")]
        public Input<string>? Payload { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ContentScanningExpressionState()
        {
        }
        public static new ContentScanningExpressionState Empty => new ContentScanningExpressionState();
    }
}
