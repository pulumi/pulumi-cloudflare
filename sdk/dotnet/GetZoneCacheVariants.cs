// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZoneCacheVariants
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneCacheVariants = Cloudflare.GetZoneCacheVariants.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneCacheVariantsResult> InvokeAsync(GetZoneCacheVariantsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneCacheVariantsResult>("cloudflare:index/getZoneCacheVariants:getZoneCacheVariants", args ?? new GetZoneCacheVariantsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneCacheVariants = Cloudflare.GetZoneCacheVariants.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneCacheVariantsResult> Invoke(GetZoneCacheVariantsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneCacheVariantsResult>("cloudflare:index/getZoneCacheVariants:getZoneCacheVariants", args ?? new GetZoneCacheVariantsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneCacheVariants = Cloudflare.GetZoneCacheVariants.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneCacheVariantsResult> Invoke(GetZoneCacheVariantsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneCacheVariantsResult>("cloudflare:index/getZoneCacheVariants:getZoneCacheVariants", args ?? new GetZoneCacheVariantsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneCacheVariantsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneCacheVariantsArgs()
        {
        }
        public static new GetZoneCacheVariantsArgs Empty => new GetZoneCacheVariantsArgs();
    }

    public sealed class GetZoneCacheVariantsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneCacheVariantsInvokeArgs()
        {
        }
        public static new GetZoneCacheVariantsInvokeArgs Empty => new GetZoneCacheVariantsInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneCacheVariantsResult
    {
        /// <summary>
        /// Whether the setting is editable.
        /// </summary>
        public readonly bool Editable;
        /// <summary>
        /// The identifier of the caching setting.
        /// Available values: "variants".
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Last time this setting was modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// Value of the zone setting.
        /// </summary>
        public readonly Outputs.GetZoneCacheVariantsValueResult Value;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneCacheVariantsResult(
            bool editable,

            string id,

            string modifiedOn,

            Outputs.GetZoneCacheVariantsValueResult value,

            string zoneId)
        {
            Editable = editable;
            Id = id;
            ModifiedOn = modifiedOn;
            Value = value;
            ZoneId = zoneId;
        }
    }
}
