// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetCertificatePacks
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCertificatePacks = Cloudflare.GetCertificatePacks.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Status = "all",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificatePacksResult> InvokeAsync(GetCertificatePacksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificatePacksResult>("cloudflare:index/getCertificatePacks:getCertificatePacks", args ?? new GetCertificatePacksArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCertificatePacks = Cloudflare.GetCertificatePacks.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Status = "all",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatePacksResult> Invoke(GetCertificatePacksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatePacksResult>("cloudflare:index/getCertificatePacks:getCertificatePacks", args ?? new GetCertificatePacksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCertificatePacks = Cloudflare.GetCertificatePacks.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Status = "all",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificatePacksResult> Invoke(GetCertificatePacksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificatePacksResult>("cloudflare:index/getCertificatePacks:getCertificatePacks", args ?? new GetCertificatePacksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificatePacksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Include Certificate Packs of all statuses, not just active ones.
        /// Available values: "all".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetCertificatePacksArgs()
        {
        }
        public static new GetCertificatePacksArgs Empty => new GetCertificatePacksArgs();
    }

    public sealed class GetCertificatePacksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Include Certificate Packs of all statuses, not just active ones.
        /// Available values: "all".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetCertificatePacksInvokeArgs()
        {
        }
        public static new GetCertificatePacksInvokeArgs Empty => new GetCertificatePacksInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificatePacksResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificatePacksResultResult> Results;
        /// <summary>
        /// Include Certificate Packs of all statuses, not just active ones.
        /// Available values: "all".
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetCertificatePacksResult(
            string id,

            int? maxItems,

            ImmutableArray<Outputs.GetCertificatePacksResultResult> results,

            string? status,

            string zoneId)
        {
            Id = id;
            MaxItems = maxItems;
            Results = results;
            Status = status;
            ZoneId = zoneId;
        }
    }
}
