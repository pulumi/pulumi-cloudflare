// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustDeviceCustomProfile
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceCustomProfile = Cloudflare.GetZeroTrustDeviceCustomProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         PolicyId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustDeviceCustomProfileResult> InvokeAsync(GetZeroTrustDeviceCustomProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustDeviceCustomProfileResult>("cloudflare:index/getZeroTrustDeviceCustomProfile:getZeroTrustDeviceCustomProfile", args ?? new GetZeroTrustDeviceCustomProfileArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceCustomProfile = Cloudflare.GetZeroTrustDeviceCustomProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         PolicyId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDeviceCustomProfileResult> Invoke(GetZeroTrustDeviceCustomProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDeviceCustomProfileResult>("cloudflare:index/getZeroTrustDeviceCustomProfile:getZeroTrustDeviceCustomProfile", args ?? new GetZeroTrustDeviceCustomProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceCustomProfile = Cloudflare.GetZeroTrustDeviceCustomProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         PolicyId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDeviceCustomProfileResult> Invoke(GetZeroTrustDeviceCustomProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDeviceCustomProfileResult>("cloudflare:index/getZeroTrustDeviceCustomProfile:getZeroTrustDeviceCustomProfile", args ?? new GetZeroTrustDeviceCustomProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustDeviceCustomProfileArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("policyId")]
        public string? PolicyId { get; set; }

        public GetZeroTrustDeviceCustomProfileArgs()
        {
        }
        public static new GetZeroTrustDeviceCustomProfileArgs Empty => new GetZeroTrustDeviceCustomProfileArgs();
    }

    public sealed class GetZeroTrustDeviceCustomProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public GetZeroTrustDeviceCustomProfileInvokeArgs()
        {
        }
        public static new GetZeroTrustDeviceCustomProfileInvokeArgs Empty => new GetZeroTrustDeviceCustomProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustDeviceCustomProfileResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Whether to allow the user to switch WARP between modes.
        /// </summary>
        public readonly bool AllowModeSwitch;
        /// <summary>
        /// Whether to receive update notifications when a new version of the client is available.
        /// </summary>
        public readonly bool AllowUpdates;
        /// <summary>
        /// Whether to allow devices to leave the organization.
        /// </summary>
        public readonly bool AllowedToLeave;
        /// <summary>
        /// The amount of time in seconds to reconnect after having been disabled.
        /// </summary>
        public readonly double AutoConnect;
        /// <summary>
        /// Turn on the captive portal after the specified amount of time.
        /// </summary>
        public readonly double CaptivePortal;
        /// <summary>
        /// Whether the policy is the default policy for an account.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// A description of the policy.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        /// </summary>
        public readonly bool DisableAutoFallback;
        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Whether to add Microsoft IPs to Split Tunnel exclusions.
        /// </summary>
        public readonly bool ExcludeOfficeIps;
        /// <summary>
        /// List of routes excluded in the WARP client's tunnel.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileExcludeResult> Excludes;
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileFallbackDomainResult> FallbackDomains;
        public readonly string GatewayUniqueId;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of routes included in the WARP client's tunnel.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileIncludeResult> Includes;
        /// <summary>
        /// The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
        /// </summary>
        public readonly double LanAllowMinutes;
        /// <summary>
        /// The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
        /// </summary>
        public readonly double LanAllowSubnetSize;
        /// <summary>
        /// The wirefilter expression to match devices. Available values: "identity.email", "identity.groups.id", "identity.groups.name", "identity.groups.email", "identity.service*token*uuid", "identity.saml_attributes", "network", "os.name", "os.version"
        /// </summary>
        public readonly string Match;
        /// <summary>
        /// The name of the device settings profile.
        /// </summary>
        public readonly string Name;
        public readonly string PolicyId;
        /// <summary>
        /// The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
        /// </summary>
        public readonly double Precedence;
        /// <summary>
        /// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
        /// </summary>
        public readonly bool RegisterInterfaceIpWithDns;
        public readonly Outputs.GetZeroTrustDeviceCustomProfileServiceModeV2Result ServiceModeV2;
        /// <summary>
        /// The URL to launch when the Send Feedback button is clicked.
        /// </summary>
        public readonly string SupportUrl;
        /// <summary>
        /// Whether to allow the user to turn off the WARP switch and disconnect the client.
        /// </summary>
        public readonly bool SwitchLocked;
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileTargetTestResult> TargetTests;
        /// <summary>
        /// Determines which tunnel protocol to use.
        /// </summary>
        public readonly string TunnelProtocol;

        [OutputConstructor]
        private GetZeroTrustDeviceCustomProfileResult(
            string accountId,

            bool allowModeSwitch,

            bool allowUpdates,

            bool allowedToLeave,

            double autoConnect,

            double captivePortal,

            bool @default,

            string description,

            bool disableAutoFallback,

            bool enabled,

            bool excludeOfficeIps,

            ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileExcludeResult> excludes,

            ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileFallbackDomainResult> fallbackDomains,

            string gatewayUniqueId,

            string id,

            ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileIncludeResult> includes,

            double lanAllowMinutes,

            double lanAllowSubnetSize,

            string match,

            string name,

            string policyId,

            double precedence,

            bool registerInterfaceIpWithDns,

            Outputs.GetZeroTrustDeviceCustomProfileServiceModeV2Result serviceModeV2,

            string supportUrl,

            bool switchLocked,

            ImmutableArray<Outputs.GetZeroTrustDeviceCustomProfileTargetTestResult> targetTests,

            string tunnelProtocol)
        {
            AccountId = accountId;
            AllowModeSwitch = allowModeSwitch;
            AllowUpdates = allowUpdates;
            AllowedToLeave = allowedToLeave;
            AutoConnect = autoConnect;
            CaptivePortal = captivePortal;
            Default = @default;
            Description = description;
            DisableAutoFallback = disableAutoFallback;
            Enabled = enabled;
            ExcludeOfficeIps = excludeOfficeIps;
            Excludes = excludes;
            FallbackDomains = fallbackDomains;
            GatewayUniqueId = gatewayUniqueId;
            Id = id;
            Includes = includes;
            LanAllowMinutes = lanAllowMinutes;
            LanAllowSubnetSize = lanAllowSubnetSize;
            Match = match;
            Name = name;
            PolicyId = policyId;
            Precedence = precedence;
            RegisterInterfaceIpWithDns = registerInterfaceIpWithDns;
            ServiceModeV2 = serviceModeV2;
            SupportUrl = supportUrl;
            SwitchLocked = switchLocked;
            TargetTests = targetTests;
            TunnelProtocol = tunnelProtocol;
        }
    }
}
