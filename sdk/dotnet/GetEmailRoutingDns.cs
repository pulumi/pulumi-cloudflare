// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetEmailRoutingDns
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEmailRoutingDns = Cloudflare.GetEmailRoutingDns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Subdomain = "example.net",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetEmailRoutingDnsResult> InvokeAsync(GetEmailRoutingDnsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEmailRoutingDnsResult>("cloudflare:index/getEmailRoutingDns:getEmailRoutingDns", args ?? new GetEmailRoutingDnsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEmailRoutingDns = Cloudflare.GetEmailRoutingDns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Subdomain = "example.net",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEmailRoutingDnsResult> Invoke(GetEmailRoutingDnsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEmailRoutingDnsResult>("cloudflare:index/getEmailRoutingDns:getEmailRoutingDns", args ?? new GetEmailRoutingDnsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEmailRoutingDns = Cloudflare.GetEmailRoutingDns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Subdomain = "example.net",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetEmailRoutingDnsResult> Invoke(GetEmailRoutingDnsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEmailRoutingDnsResult>("cloudflare:index/getEmailRoutingDns:getEmailRoutingDns", args ?? new GetEmailRoutingDnsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEmailRoutingDnsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain of your zone.
        /// </summary>
        [Input("subdomain")]
        public string? Subdomain { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetEmailRoutingDnsArgs()
        {
        }
        public static new GetEmailRoutingDnsArgs Empty => new GetEmailRoutingDnsArgs();
    }

    public sealed class GetEmailRoutingDnsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain of your zone.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetEmailRoutingDnsInvokeArgs()
        {
        }
        public static new GetEmailRoutingDnsInvokeArgs Empty => new GetEmailRoutingDnsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEmailRoutingDnsResult
    {
        public readonly ImmutableArray<Outputs.GetEmailRoutingDnsErrorResult> Errors;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetEmailRoutingDnsMessageResult> Messages;
        public readonly Outputs.GetEmailRoutingDnsResultResult Result;
        public readonly Outputs.GetEmailRoutingDnsResultInfoResult ResultInfo;
        /// <summary>
        /// Domain of your zone.
        /// </summary>
        public readonly string? Subdomain;
        /// <summary>
        /// Whether the API call was successful.
        /// </summary>
        public readonly bool Success;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetEmailRoutingDnsResult(
            ImmutableArray<Outputs.GetEmailRoutingDnsErrorResult> errors,

            string id,

            ImmutableArray<Outputs.GetEmailRoutingDnsMessageResult> messages,

            Outputs.GetEmailRoutingDnsResultResult result,

            Outputs.GetEmailRoutingDnsResultInfoResult resultInfo,

            string? subdomain,

            bool success,

            string zoneId)
        {
            Errors = errors;
            Id = id;
            Messages = messages;
            Result = result;
            ResultInfo = resultInfo;
            Subdomain = subdomain;
            Success = success;
            ZoneId = zoneId;
        }
    }
}
