// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountApiTokenPermissionGroups
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountApiTokenPermissionGroups = Cloudflare.GetAccountApiTokenPermissionGroups.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountApiTokenPermissionGroupsResult> InvokeAsync(GetAccountApiTokenPermissionGroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountApiTokenPermissionGroupsResult>("cloudflare:index/getAccountApiTokenPermissionGroups:getAccountApiTokenPermissionGroups", args ?? new GetAccountApiTokenPermissionGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountApiTokenPermissionGroups = Cloudflare.GetAccountApiTokenPermissionGroups.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountApiTokenPermissionGroupsResult> Invoke(GetAccountApiTokenPermissionGroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountApiTokenPermissionGroupsResult>("cloudflare:index/getAccountApiTokenPermissionGroups:getAccountApiTokenPermissionGroups", args ?? new GetAccountApiTokenPermissionGroupsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountApiTokenPermissionGroups = Cloudflare.GetAccountApiTokenPermissionGroups.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountApiTokenPermissionGroupsResult> Invoke(GetAccountApiTokenPermissionGroupsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountApiTokenPermissionGroupsResult>("cloudflare:index/getAccountApiTokenPermissionGroups:getAccountApiTokenPermissionGroups", args ?? new GetAccountApiTokenPermissionGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountApiTokenPermissionGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetAccountApiTokenPermissionGroupsArgs()
        {
        }
        public static new GetAccountApiTokenPermissionGroupsArgs Empty => new GetAccountApiTokenPermissionGroupsArgs();
    }

    public sealed class GetAccountApiTokenPermissionGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetAccountApiTokenPermissionGroupsInvokeArgs()
        {
        }
        public static new GetAccountApiTokenPermissionGroupsInvokeArgs Empty => new GetAccountApiTokenPermissionGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountApiTokenPermissionGroupsResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        public readonly string? Scope;

        [OutputConstructor]
        private GetAccountApiTokenPermissionGroupsResult(
            string accountId,

            string id,

            string? name,

            string? scope)
        {
            AccountId = accountId;
            Id = id;
            Name = name;
            Scope = scope;
        }
    }
}
