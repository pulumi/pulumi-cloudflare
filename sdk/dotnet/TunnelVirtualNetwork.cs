// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustTunnelCloudflaredVirtualNetwork = new Cloudflare.ZeroTrustTunnelCloudflaredVirtualNetwork("example_zero_trust_tunnel_cloudflared_virtual_network", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Name = "us-east-1-vpc",
    ///         Comment = "Staging VPC for data science",
    ///         IsDefault = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork example '&lt;account_id&gt;/&lt;virtual_network_id&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/tunnelvirtualnetwork.TunnelVirtualNetwork has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredvirtualnetwork.ZeroTrustTunnelCloudflaredVirtualNetwork")]
    [CloudflareResourceType("cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork")]
    public partial class TunnelVirtualNetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Optional remark describing the virtual network.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
        /// </summary>
        [Output("deletedAt")]
        public Output<string> DeletedAt { get; private set; } = null!;

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Output("isDefaultNetwork")]
        public Output<bool?> IsDefaultNetwork { get; private set; } = null!;

        /// <summary>
        /// A user-friendly name for the virtual network.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a TunnelVirtualNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TunnelVirtualNetwork(string name, TunnelVirtualNetworkArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork", name, args ?? new TunnelVirtualNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TunnelVirtualNetwork(string name, Input<string> id, TunnelVirtualNetworkState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TunnelVirtualNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TunnelVirtualNetwork Get(string name, Input<string> id, TunnelVirtualNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new TunnelVirtualNetwork(name, id, state, options);
        }
    }

    public sealed class TunnelVirtualNetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Optional remark describing the virtual network.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Input("isDefaultNetwork")]
        public Input<bool>? IsDefaultNetwork { get; set; }

        /// <summary>
        /// A user-friendly name for the virtual network.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public TunnelVirtualNetworkArgs()
        {
        }
        public static new TunnelVirtualNetworkArgs Empty => new TunnelVirtualNetworkArgs();
    }

    public sealed class TunnelVirtualNetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Optional remark describing the virtual network.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
        /// </summary>
        [Input("deletedAt")]
        public Input<string>? DeletedAt { get; set; }

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// If `true`, this virtual network is the default for the account.
        /// </summary>
        [Input("isDefaultNetwork")]
        public Input<bool>? IsDefaultNetwork { get; set; }

        /// <summary>
        /// A user-friendly name for the virtual network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TunnelVirtualNetworkState()
        {
        }
        public static new TunnelVirtualNetworkState Empty => new TunnelVirtualNetworkState();
    }
}
