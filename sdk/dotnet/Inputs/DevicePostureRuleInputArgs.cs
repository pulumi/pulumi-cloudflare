// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class DevicePostureRuleInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Number of active threats.
        /// </summary>
        [Input("activeThreats")]
        public Input<double>? ActiveThreats { get; set; }

        /// <summary>
        /// UUID of Cloudflare managed certificate.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("checkDisks")]
        private InputList<string>? _checkDisks;

        /// <summary>
        /// List of volume names to be checked for encryption.
        /// </summary>
        public InputList<string> CheckDisks
        {
            get => _checkDisks ?? (_checkDisks = new InputList<string>());
            set => _checkDisks = value;
        }

        /// <summary>
        /// Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
        /// </summary>
        [Input("checkPrivateKey")]
        public Input<bool>? CheckPrivateKey { get; set; }

        /// <summary>
        /// Common Name that is protected by the certificate
        /// </summary>
        [Input("cn")]
        public Input<string>? Cn { get; set; }

        /// <summary>
        /// Compliance Status
        /// Available values: "compliant", "noncompliant", "unknown".
        /// </summary>
        [Input("complianceStatus")]
        public Input<string>? ComplianceStatus { get; set; }

        /// <summary>
        /// Posture Integration ID.
        /// </summary>
        [Input("connectionId")]
        public Input<string>? ConnectionId { get; set; }

        /// <summary>
        /// Count Operator
        /// Available values: "&lt;", "&lt;=", "&gt;", "&gt;=", "==".
        /// </summary>
        [Input("countOperator")]
        public Input<string>? CountOperator { get; set; }

        /// <summary>
        /// Domain
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// For more details on eid last seen, refer to the Tanium documentation.
        /// </summary>
        [Input("eidLastSeen")]
        public Input<string>? EidLastSeen { get; set; }

        /// <summary>
        /// Enabled
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Whether or not file exists
        /// </summary>
        [Input("exists")]
        public Input<bool>? Exists { get; set; }

        [Input("extendedKeyUsages")]
        private InputList<string>? _extendedKeyUsages;

        /// <summary>
        /// List of values indicating purposes for which the certificate public key can be used
        /// </summary>
        public InputList<string> ExtendedKeyUsages
        {
            get => _extendedKeyUsages ?? (_extendedKeyUsages = new InputList<string>());
            set => _extendedKeyUsages = value;
        }

        /// <summary>
        /// List ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Whether device is infected.
        /// </summary>
        [Input("infected")]
        public Input<bool>? Infected { get; set; }

        /// <summary>
        /// Whether device is active.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// The Number of Issues.
        /// </summary>
        [Input("issueCount")]
        public Input<string>? IssueCount { get; set; }

        /// <summary>
        /// For more details on last seen, please refer to the Crowdstrike documentation.
        /// </summary>
        [Input("lastSeen")]
        public Input<string>? LastSeen { get; set; }

        [Input("locations")]
        public Input<Inputs.DevicePostureRuleInputLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// Network status of device.
        /// Available values: "connected", "disconnected", "disconnecting", "connecting".
        /// </summary>
        [Input("networkStatus")]
        public Input<string>? NetworkStatus { get; set; }

        /// <summary>
        /// Operating system
        /// Available values: "windows", "linux", "mac".
        /// </summary>
        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        /// <summary>
        /// Agent operational state.
        /// Available values: "na", "partially*disabled", "auto*fully*disabled", "fully*disabled", "auto*partially*disabled", "disabled*error", "db*corruption".
        /// </summary>
        [Input("operationalState")]
        public Input<string>? OperationalState { get; set; }

        /// <summary>
        /// operator
        /// Available values: "&lt;", "&lt;=", "&gt;", "&gt;=", "==".
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// Os Version
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// Operating System Distribution Name (linux only)
        /// </summary>
        [Input("osDistroName")]
        public Input<string>? OsDistroName { get; set; }

        /// <summary>
        /// Version of OS Distribution (linux only)
        /// </summary>
        [Input("osDistroRevision")]
        public Input<string>? OsDistroRevision { get; set; }

        /// <summary>
        /// Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only)
        /// </summary>
        [Input("osVersionExtra")]
        public Input<string>? OsVersionExtra { get; set; }

        /// <summary>
        /// overall
        /// </summary>
        [Input("overall")]
        public Input<string>? Overall { get; set; }

        /// <summary>
        /// File path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// Whether to check all disks for encryption.
        /// </summary>
        [Input("requireAll")]
        public Input<bool>? RequireAll { get; set; }

        /// <summary>
        /// For more details on risk level, refer to the Tanium documentation.
        /// Available values: "low", "medium", "high", "critical".
        /// </summary>
        [Input("riskLevel")]
        public Input<string>? RiskLevel { get; set; }

        /// <summary>
        /// A value between 0-100 assigned to devices set by the 3rd party posture provider.
        /// </summary>
        [Input("score")]
        public Input<double>? Score { get; set; }

        /// <summary>
        /// Score Operator
        /// Available values: "&lt;", "&lt;=", "&gt;", "&gt;=", "==".
        /// </summary>
        [Input("scoreOperator")]
        public Input<string>? ScoreOperator { get; set; }

        /// <summary>
        /// SensorConfig
        /// </summary>
        [Input("sensorConfig")]
        public Input<string>? SensorConfig { get; set; }

        /// <summary>
        /// SHA-256.
        /// </summary>
        [Input("sha256")]
        public Input<string>? Sha256 { get; set; }

        /// <summary>
        /// For more details on state, please refer to the Crowdstrike documentation.
        /// Available values: "online", "offline", "unknown".
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Signing certificate thumbprint.
        /// </summary>
        [Input("thumbprint")]
        public Input<string>? Thumbprint { get; set; }

        /// <summary>
        /// For more details on total score, refer to the Tanium documentation.
        /// </summary>
        [Input("totalScore")]
        public Input<double>? TotalScore { get; set; }

        /// <summary>
        /// Version of OS
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Version Operator
        /// Available values: "&lt;", "&lt;=", "&gt;", "&gt;=", "==".
        /// </summary>
        [Input("versionOperator")]
        public Input<string>? VersionOperator { get; set; }

        public DevicePostureRuleInputArgs()
        {
        }
        public static new DevicePostureRuleInputArgs Empty => new DevicePostureRuleInputArgs();
    }
}
