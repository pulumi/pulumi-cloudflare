// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class ZoneCacheVariantsValueGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("avifs")]
        private InputList<string>? _avifs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for avif.
        /// </summary>
        public InputList<string> Avifs
        {
            get => _avifs ?? (_avifs = new InputList<string>());
            set => _avifs = value;
        }

        [Input("bmps")]
        private InputList<string>? _bmps;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for bmp.
        /// </summary>
        public InputList<string> Bmps
        {
            get => _bmps ?? (_bmps = new InputList<string>());
            set => _bmps = value;
        }

        [Input("gifs")]
        private InputList<string>? _gifs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for gif.
        /// </summary>
        public InputList<string> Gifs
        {
            get => _gifs ?? (_gifs = new InputList<string>());
            set => _gifs = value;
        }

        [Input("jp2s")]
        private InputList<string>? _jp2s;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for jp2.
        /// </summary>
        public InputList<string> Jp2s
        {
            get => _jp2s ?? (_jp2s = new InputList<string>());
            set => _jp2s = value;
        }

        [Input("jpegs")]
        private InputList<string>? _jpegs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for jpeg.
        /// </summary>
        public InputList<string> Jpegs
        {
            get => _jpegs ?? (_jpegs = new InputList<string>());
            set => _jpegs = value;
        }

        [Input("jpg2s")]
        private InputList<string>? _jpg2s;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for jpg2.
        /// </summary>
        public InputList<string> Jpg2s
        {
            get => _jpg2s ?? (_jpg2s = new InputList<string>());
            set => _jpg2s = value;
        }

        [Input("jpgs")]
        private InputList<string>? _jpgs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for jpg.
        /// </summary>
        public InputList<string> Jpgs
        {
            get => _jpgs ?? (_jpgs = new InputList<string>());
            set => _jpgs = value;
        }

        [Input("pngs")]
        private InputList<string>? _pngs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for png.
        /// </summary>
        public InputList<string> Pngs
        {
            get => _pngs ?? (_pngs = new InputList<string>());
            set => _pngs = value;
        }

        [Input("tiffs")]
        private InputList<string>? _tiffs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for tiff.
        /// </summary>
        public InputList<string> Tiffs
        {
            get => _tiffs ?? (_tiffs = new InputList<string>());
            set => _tiffs = value;
        }

        [Input("tifs")]
        private InputList<string>? _tifs;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for tif.
        /// </summary>
        public InputList<string> Tifs
        {
            get => _tifs ?? (_tifs = new InputList<string>());
            set => _tifs = value;
        }

        [Input("webps")]
        private InputList<string>? _webps;

        /// <summary>
        /// List of strings with the MIME types of all the variants that should be served for webp.
        /// </summary>
        public InputList<string> Webps
        {
            get => _webps ?? (_webps = new InputList<string>());
            set => _webps = value;
        }

        public ZoneCacheVariantsValueGetArgs()
        {
        }
        public static new ZoneCacheVariantsValueGetArgs Empty => new ZoneCacheVariantsValueGetArgs();
    }
}
