// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class LoadBalancerRuleOverridesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
        /// </summary>
        [Input("adaptiveRouting")]
        public Input<Inputs.LoadBalancerRuleOverridesAdaptiveRoutingArgs>? AdaptiveRouting { get; set; }

        [Input("countryPools")]
        private InputMap<ImmutableArray<string>>? _countryPools;

        /// <summary>
        /// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputMap<ImmutableArray<string>>());
            set => _countryPools = value;
        }

        [Input("defaultPools")]
        private InputList<string>? _defaultPools;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
        /// </summary>
        public InputList<string> DefaultPools
        {
            get => _defaultPools ?? (_defaultPools = new InputList<string>());
            set => _defaultPools = value;
        }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPool")]
        public Input<string>? FallbackPool { get; set; }

        /// <summary>
        /// Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
        /// </summary>
        [Input("locationStrategy")]
        public Input<Inputs.LoadBalancerRuleOverridesLocationStrategyArgs>? LocationStrategy { get; set; }

        [Input("popPools")]
        private InputMap<ImmutableArray<string>>? _popPools;

        /// <summary>
        /// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> PopPools
        {
            get => _popPools ?? (_popPools = new InputMap<ImmutableArray<string>>());
            set => _popPools = value;
        }

        /// <summary>
        /// Configures pool weights.
        /// </summary>
        [Input("randomSteering")]
        public Input<Inputs.LoadBalancerRuleOverridesRandomSteeringArgs>? RandomSteering { get; set; }

        [Input("regionPools")]
        private InputMap<ImmutableArray<string>>? _regionPools;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputMap<ImmutableArray<string>>());
            set => _regionPools = value;
        }

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// Configures attributes for session affinity.
        /// </summary>
        [Input("sessionAffinityAttributes")]
        public Input<Inputs.LoadBalancerRuleOverridesSessionAffinityAttributesArgs>? SessionAffinityAttributes { get; set; }

        /// <summary>
        /// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<double>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// Steering Policy for this load balancer.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        public LoadBalancerRuleOverridesArgs()
        {
        }
        public static new LoadBalancerRuleOverridesArgs Empty => new LoadBalancerRuleOverridesArgs();
    }
}
