// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class TunnelConnectionGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// UUID of the Cloudflare Tunnel connector.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The cloudflared version used to establish this connection.
        /// </summary>
        [Input("clientVersion")]
        public Input<string>? ClientVersion { get; set; }

        /// <summary>
        /// The Cloudflare data center used for this connection.
        /// </summary>
        [Input("coloName")]
        public Input<string>? ColoName { get; set; }

        /// <summary>
        /// UUID of the Cloudflare Tunnel connection.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Cloudflare continues to track connections for several minutes after they disconnect. This is an optimization to improve latency and reliability of reconnecting.  If `true`, the connection has disconnected but is still being tracked. If `false`, the connection is actively serving traffic.
        /// </summary>
        [Input("isPendingReconnect")]
        public Input<bool>? IsPendingReconnect { get; set; }

        /// <summary>
        /// Timestamp of when the connection was established.
        /// </summary>
        [Input("openedAt")]
        public Input<string>? OpenedAt { get; set; }

        /// <summary>
        /// The public IP address of the host running cloudflared.
        /// </summary>
        [Input("originIp")]
        public Input<string>? OriginIp { get; set; }

        /// <summary>
        /// UUID of the Cloudflare Tunnel connection.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public TunnelConnectionGetArgs()
        {
        }
        public static new TunnelConnectionGetArgs Empty => new TunnelConnectionGetArgs();
    }
}
