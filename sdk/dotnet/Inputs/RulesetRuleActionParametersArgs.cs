// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class RulesetRuleActionParametersArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalCacheablePorts")]
        private InputList<int>? _additionalCacheablePorts;

        /// <summary>
        /// A list of additional ports that caching should be enabled on.
        /// </summary>
        public InputList<int> AdditionalCacheablePorts
        {
            get => _additionalCacheablePorts ?? (_additionalCacheablePorts = new InputList<int>());
            set => _additionalCacheablePorts = value;
        }

        [Input("algorithms")]
        private InputList<Inputs.RulesetRuleActionParametersAlgorithmArgs>? _algorithms;

        /// <summary>
        /// Custom order for compression algorithms.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersAlgorithmArgs> Algorithms
        {
            get => _algorithms ?? (_algorithms = new InputList<Inputs.RulesetRuleActionParametersAlgorithmArgs>());
            set => _algorithms = value;
        }

        /// <summary>
        /// The name of a custom asset to serve as the response.
        /// </summary>
        [Input("assetName")]
        public Input<string>? AssetName { get; set; }

        /// <summary>
        /// Whether to enable Automatic HTTPS Rewrites.
        /// </summary>
        [Input("automaticHttpsRewrites")]
        public Input<bool>? AutomaticHttpsRewrites { get; set; }

        /// <summary>
        /// Which file extensions to minify automatically.
        /// </summary>
        [Input("autominify")]
        public Input<Inputs.RulesetRuleActionParametersAutominifyArgs>? Autominify { get; set; }

        /// <summary>
        /// Whether to enable Browser Integrity Check (BIC).
        /// </summary>
        [Input("bic")]
        public Input<bool>? Bic { get; set; }

        /// <summary>
        /// How long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
        /// </summary>
        [Input("browserTtl")]
        public Input<Inputs.RulesetRuleActionParametersBrowserTtlArgs>? BrowserTtl { get; set; }

        /// <summary>
        /// Whether the request's response from the origin is eligible for caching. Caching itself will still depend on the cache control header and your other caching configurations.
        /// </summary>
        [Input("cache")]
        public Input<bool>? Cache { get; set; }

        /// <summary>
        /// Which components of the request are included in or excluded from the cache key Cloudflare uses to store the response in cache.
        /// </summary>
        [Input("cacheKey")]
        public Input<Inputs.RulesetRuleActionParametersCacheKeyArgs>? CacheKey { get; set; }

        /// <summary>
        /// Settings to determine whether the request's response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
        /// </summary>
        [Input("cacheReserve")]
        public Input<Inputs.RulesetRuleActionParametersCacheReserveArgs>? CacheReserve { get; set; }

        /// <summary>
        /// The response content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The content type header to set with the error response.
        /// Available values: "application/json", "text/html", "text/plain", "text/xml".
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cookieFields")]
        private InputList<Inputs.RulesetRuleActionParametersCookieFieldArgs>? _cookieFields;

        /// <summary>
        /// The cookie fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersCookieFieldArgs> CookieFields
        {
            get => _cookieFields ?? (_cookieFields = new InputList<Inputs.RulesetRuleActionParametersCookieFieldArgs>());
            set => _cookieFields = value;
        }

        /// <summary>
        /// Whether to disable Cloudflare Apps.
        /// </summary>
        [Input("disableApps")]
        public Input<bool>? DisableApps { get; set; }

        /// <summary>
        /// Whether to disable Real User Monitoring (RUM).
        /// </summary>
        [Input("disableRum")]
        public Input<bool>? DisableRum { get; set; }

        /// <summary>
        /// Whether to disable Zaraz.
        /// </summary>
        [Input("disableZaraz")]
        public Input<bool>? DisableZaraz { get; set; }

        /// <summary>
        /// How long the Cloudflare edge network should cache the response.
        /// </summary>
        [Input("edgeTtl")]
        public Input<Inputs.RulesetRuleActionParametersEdgeTtlArgs>? EdgeTtl { get; set; }

        /// <summary>
        /// Whether to enable Email Obfuscation.
        /// </summary>
        [Input("emailObfuscation")]
        public Input<bool>? EmailObfuscation { get; set; }

        /// <summary>
        /// Whether to enable Cloudflare Fonts.
        /// </summary>
        [Input("fonts")]
        public Input<bool>? Fonts { get; set; }

        /// <summary>
        /// A redirect based on a bulk list lookup.
        /// </summary>
        [Input("fromList")]
        public Input<Inputs.RulesetRuleActionParametersFromListArgs>? FromList { get; set; }

        /// <summary>
        /// A redirect based on the request properties.
        /// </summary>
        [Input("fromValue")]
        public Input<Inputs.RulesetRuleActionParametersFromValueArgs>? FromValue { get; set; }

        [Input("headers")]
        private InputMap<Inputs.RulesetRuleActionParametersHeadersArgs>? _headers;

        /// <summary>
        /// A map of headers to rewrite.
        /// </summary>
        public InputMap<Inputs.RulesetRuleActionParametersHeadersArgs> Headers
        {
            get => _headers ?? (_headers = new InputMap<Inputs.RulesetRuleActionParametersHeadersArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// A value to rewrite the HTTP host header to.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// Whether to enable Hotlink Protection.
        /// </summary>
        [Input("hotlinkProtection")]
        public Input<bool>? HotlinkProtection { get; set; }

        /// <summary>
        /// The ID of the ruleset to execute.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// A delta to change the score by, which can be either positive or negative.
        /// </summary>
        [Input("increment")]
        public Input<int>? Increment { get; set; }

        /// <summary>
        /// The configuration to use for matched data logging.
        /// </summary>
        [Input("matchedData")]
        public Input<Inputs.RulesetRuleActionParametersMatchedDataArgs>? MatchedData { get; set; }

        /// <summary>
        /// Whether to enable Mirage.
        /// </summary>
        [Input("mirage")]
        public Input<bool>? Mirage { get; set; }

        /// <summary>
        /// Whether to enable Opportunistic Encryption.
        /// </summary>
        [Input("opportunisticEncryption")]
        public Input<bool>? OpportunisticEncryption { get; set; }

        /// <summary>
        /// An origin to route to.
        /// </summary>
        [Input("origin")]
        public Input<Inputs.RulesetRuleActionParametersOriginArgs>? Origin { get; set; }

        /// <summary>
        /// Whether Cloudflare will aim to strictly adhere to RFC 7234.
        /// </summary>
        [Input("originCacheControl")]
        public Input<bool>? OriginCacheControl { get; set; }

        /// <summary>
        /// Whether to generate Cloudflare error pages for issues from the origin server.
        /// </summary>
        [Input("originErrorPagePassthru")]
        public Input<bool>? OriginErrorPagePassthru { get; set; }

        /// <summary>
        /// A set of overrides to apply to the target ruleset.
        /// </summary>
        [Input("overrides")]
        public Input<Inputs.RulesetRuleActionParametersOverridesArgs>? Overrides { get; set; }

        [Input("phases")]
        private InputList<string>? _phases;

        /// <summary>
        /// A list of phases to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "ddos*l4", "ddos*l7", "http*config*settings", "http*custom*errors", "http*log*custom*fields", "http*ratelimit", "http*request*cache*settings", "http*request*dynamic*redirect", "http*request*firewall*custom", "http*request*firewall*managed", "http*request*late*transform", "http*request*origin", "http*request*redirect", "http*request*sanitize", "http*request*sbfm", "http*request*transform", "http*response*compression", "http*response*firewall*managed", "http*response*headers*transform", "magic*transit", "magic*transit*ids*managed", "magic*transit*managed", "magic*transit_ratelimit".
        /// </summary>
        public InputList<string> Phases
        {
            get => _phases ?? (_phases = new InputList<string>());
            set => _phases = value;
        }

        /// <summary>
        /// The Polish level to configure.
        /// Available values: "off", "lossless", "lossy", "webp".
        /// </summary>
        [Input("polish")]
        public Input<string>? Polish { get; set; }

        [Input("products")]
        private InputList<string>? _products;

        /// <summary>
        /// A list of legacy security products to skip the execution of.
        /// Available values: "bic", "hot", "rateLimit", "securityLevel", "uaBlock", "waf", "zoneLockdown".
        /// </summary>
        public InputList<string> Products
        {
            get => _products ?? (_products = new InputList<string>());
            set => _products = value;
        }

        [Input("rawResponseFields")]
        private InputList<Inputs.RulesetRuleActionParametersRawResponseFieldArgs>? _rawResponseFields;

        /// <summary>
        /// The raw response fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersRawResponseFieldArgs> RawResponseFields
        {
            get => _rawResponseFields ?? (_rawResponseFields = new InputList<Inputs.RulesetRuleActionParametersRawResponseFieldArgs>());
            set => _rawResponseFields = value;
        }

        /// <summary>
        /// A timeout value between two successive read operations to use for your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        [Input("requestFields")]
        private InputList<Inputs.RulesetRuleActionParametersRequestFieldArgs>? _requestFields;

        /// <summary>
        /// The raw request fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersRequestFieldArgs> RequestFields
        {
            get => _requestFields ?? (_requestFields = new InputList<Inputs.RulesetRuleActionParametersRequestFieldArgs>());
            set => _requestFields = value;
        }

        /// <summary>
        /// Whether Cloudflare should respect strong ETag (entity tag) headers. If false, Cloudflare converts strong ETag headers to weak ETag headers.
        /// </summary>
        [Input("respectStrongEtags")]
        public Input<bool>? RespectStrongEtags { get; set; }

        /// <summary>
        /// The response to show when the block is applied.
        /// </summary>
        [Input("response")]
        public Input<Inputs.RulesetRuleActionParametersResponseArgs>? Response { get; set; }

        [Input("responseFields")]
        private InputList<Inputs.RulesetRuleActionParametersResponseFieldArgs>? _responseFields;

        /// <summary>
        /// The transformed response fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersResponseFieldArgs> ResponseFields
        {
            get => _responseFields ?? (_responseFields = new InputList<Inputs.RulesetRuleActionParametersResponseFieldArgs>());
            set => _responseFields = value;
        }

        /// <summary>
        /// Whether to enable Rocket Loader.
        /// </summary>
        [Input("rocketLoader")]
        public Input<bool>? RocketLoader { get; set; }

        [Input("rules")]
        private InputMap<ImmutableArray<string>>? _rules;

        /// <summary>
        /// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
        /// </summary>
        public InputMap<ImmutableArray<string>> Rules
        {
            get => _rules ?? (_rules = new InputMap<ImmutableArray<string>>());
            set => _rules = value;
        }

        /// <summary>
        /// A ruleset to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "current".
        /// </summary>
        [Input("ruleset")]
        public Input<string>? Ruleset { get; set; }

        [Input("rulesets")]
        private InputList<string>? _rulesets;

        /// <summary>
        /// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
        /// </summary>
        public InputList<string> Rulesets
        {
            get => _rulesets ?? (_rulesets = new InputList<string>());
            set => _rulesets = value;
        }

        /// <summary>
        /// The Security Level to configure.
        /// Available values: "off", "essentially*off", "low", "medium", "high", "under*attack".
        /// </summary>
        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        /// <summary>
        /// When to serve stale content from cache.
        /// </summary>
        [Input("serveStale")]
        public Input<Inputs.RulesetRuleActionParametersServeStaleArgs>? ServeStale { get; set; }

        /// <summary>
        /// Whether to enable Server-Side Excludes.
        /// </summary>
        [Input("serverSideExcludes")]
        public Input<bool>? ServerSideExcludes { get; set; }

        /// <summary>
        /// A Server Name Indication (SNI) override.
        /// </summary>
        [Input("sni")]
        public Input<Inputs.RulesetRuleActionParametersSniArgs>? Sni { get; set; }

        /// <summary>
        /// The SSL level to configure.
        /// Available values: "off", "flexible", "full", "strict", "OriginPull".
        /// </summary>
        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        /// <summary>
        /// The status code to use for the error.
        /// </summary>
        [Input("statusCode")]
        public Input<int>? StatusCode { get; set; }

        /// <summary>
        /// Whether to enable Signed Exchanges (SXG).
        /// </summary>
        [Input("sxg")]
        public Input<bool>? Sxg { get; set; }

        [Input("transformedRequestFields")]
        private InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldArgs>? _transformedRequestFields;

        /// <summary>
        /// The transformed request fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldArgs> TransformedRequestFields
        {
            get => _transformedRequestFields ?? (_transformedRequestFields = new InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldArgs>());
            set => _transformedRequestFields = value;
        }

        /// <summary>
        /// A URI rewrite.
        /// </summary>
        [Input("uri")]
        public Input<Inputs.RulesetRuleActionParametersUriArgs>? Uri { get; set; }

        public RulesetRuleActionParametersArgs()
        {
        }
        public static new RulesetRuleActionParametersArgs Empty => new RulesetRuleActionParametersArgs();
    }
}
