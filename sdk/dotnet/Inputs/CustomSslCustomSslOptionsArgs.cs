// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class CustomSslCustomSslOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Method of building intermediate certificate chain. A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Valid values are `ubiquitous` (default), `optimal`, `force`.
        /// </summary>
        [Input("bundleMethod")]
        public Input<string>? BundleMethod { get; set; }

        /// <summary>
        /// Certificate certificate and the intermediate(s)
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Specifies the region where your private key can be held locally. Valid values are `us`, `eu`, `highest_security`.
        /// </summary>
        [Input("geoRestrictions")]
        public Input<string>? GeoRestrictions { get; set; }

        /// <summary>
        /// Certificate's private key
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// Whether to enable support for legacy clients which do not include SNI in the TLS handshake. Valid values are `legacy_custom` (default), `sni_custom`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CustomSslCustomSslOptionsArgs()
        {
        }
        public static new CustomSslCustomSslOptionsArgs Empty => new CustomSslCustomSslOptionsArgs();
    }
}
