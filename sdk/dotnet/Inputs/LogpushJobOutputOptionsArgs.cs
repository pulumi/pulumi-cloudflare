// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class LogpushJobOutputOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String to be prepended before each batch.
        /// </summary>
        [Input("batchPrefix")]
        public Input<string>? BatchPrefix { get; set; }

        /// <summary>
        /// String to be appended after each batch.
        /// </summary>
        [Input("batchSuffix")]
        public Input<string>? BatchSuffix { get; set; }

        /// <summary>
        /// If set to true, will cause all occurrences of `${` in the generated files to be replaced with `x{`.
        /// </summary>
        [Input("cve202144228")]
        public Input<bool>? Cve202144228 { get; set; }

        /// <summary>
        /// String to join fields. This field be ignored when `RecordTemplate` is set.
        /// </summary>
        [Input("fieldDelimiter")]
        public Input<string>? FieldDelimiter { get; set; }

        [Input("fieldNames")]
        private InputList<string>? _fieldNames;

        /// <summary>
        /// List of field names to be included in the Logpush output. For the moment, there is no option to add all fields at once, so you must specify all the fields names you are interested in.
        /// </summary>
        public InputList<string> FieldNames
        {
            get => _fieldNames ?? (_fieldNames = new InputList<string>());
            set => _fieldNames = value;
        }

        /// <summary>
        /// Specifies the output type, such as `Ndjson` or `Csv`. This sets default values for the rest of the settings, depending on the chosen output type. Some formatting rules, like string quoting, are different between output types.
        /// Available values: "ndjson", "csv".
        /// </summary>
        [Input("outputType")]
        public Input<string>? OutputType { get; set; }

        /// <summary>
        /// String to be inserted in-between the records as separator.
        /// </summary>
        [Input("recordDelimiter")]
        public Input<string>? RecordDelimiter { get; set; }

        /// <summary>
        /// String to be prepended before each record.
        /// </summary>
        [Input("recordPrefix")]
        public Input<string>? RecordPrefix { get; set; }

        /// <summary>
        /// String to be appended after each record.
        /// </summary>
        [Input("recordSuffix")]
        public Input<string>? RecordSuffix { get; set; }

        /// <summary>
        /// String to use as template for each record instead of the default json key value mapping. All fields used in the template must be present in `FieldNames` as well, otherwise they will end up as null. Format as a Go `text/template` without any standard functions, like conditionals, loops, sub-templates, etc.
        /// </summary>
        [Input("recordTemplate")]
        public Input<string>? RecordTemplate { get; set; }

        /// <summary>
        /// Floating number to specify sampling rate. Sampling is applied on top of filtering, and regardless of the current `SampleInterval` of the data.
        /// </summary>
        [Input("sampleRate")]
        public Input<double>? SampleRate { get; set; }

        /// <summary>
        /// String to specify the format for timestamps, such as `Unixnano`, `Unix`, or `Rfc3339`.
        /// Available values: "unixnano", "unix", "rfc3339".
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public LogpushJobOutputOptionsArgs()
        {
        }
        public static new LogpushJobOutputOptionsArgs Empty => new LogpushJobOutputOptionsArgs();
    }
}
