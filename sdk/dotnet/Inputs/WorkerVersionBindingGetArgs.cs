// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class WorkerVersionBindingGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        [Input("allowedDestinationAddresses")]
        private InputList<string>? _allowedDestinationAddresses;

        /// <summary>
        /// List of allowed destination addresses.
        /// </summary>
        public InputList<string> AllowedDestinationAddresses
        {
            get => _allowedDestinationAddresses ?? (_allowedDestinationAddresses = new InputList<string>());
            set => _allowedDestinationAddresses = value;
        }

        [Input("allowedSenderAddresses")]
        private InputList<string>? _allowedSenderAddresses;

        /// <summary>
        /// List of allowed sender addresses.
        /// </summary>
        public InputList<string> AllowedSenderAddresses
        {
            get => _allowedSenderAddresses ?? (_allowedSenderAddresses = new InputList<string>());
            set => _allowedSenderAddresses = value;
        }

        /// <summary>
        /// R2 bucket to bind to.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Identifier of the certificate to bind to.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The exported class name of the Durable Object.
        /// </summary>
        [Input("className")]
        public Input<string>? ClassName { get; set; }

        /// <summary>
        /// The name of the dataset to bind to.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// Destination address for the email.
        /// </summary>
        [Input("destinationAddress")]
        public Input<string>? DestinationAddress { get; set; }

        /// <summary>
        /// The environment of the script_name to bind to.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
        /// Available values: "raw", "pkcs8", "spki", "jwk".
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Identifier of the D1 database to bind to.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the Vectorize index to bind to.
        /// </summary>
        [Input("indexName")]
        public Input<string>? IndexName { get; set; }

        /// <summary>
        /// JSON data to use.
        /// </summary>
        [Input("json")]
        public Input<string>? Json { get; set; }

        /// <summary>
        /// The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
        /// Available values: "eu", "fedramp".
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        [Input("keyBase64")]
        private Input<string>? _keyBase64;

        /// <summary>
        /// Base64-encoded key data. Required if `format` is "raw", "pkcs8", or "spki".
        /// </summary>
        public Input<string>? KeyBase64
        {
            get => _keyBase64;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyBase64 = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keyJwk")]
        private Input<string>? _keyJwk;

        /// <summary>
        /// Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is "jwk".
        /// </summary>
        public Input<string>? KeyJwk
        {
            get => _keyJwk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyJwk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A JavaScript variable name for the binding.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Namespace to bind to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
        /// </summary>
        [Input("oldName")]
        public Input<string>? OldName { get; set; }

        /// <summary>
        /// Outbound worker.
        /// </summary>
        [Input("outbound")]
        public Input<Inputs.WorkerVersionBindingOutboundGetArgs>? Outbound { get; set; }

        /// <summary>
        /// The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
        /// </summary>
        [Input("part")]
        public Input<string>? Part { get; set; }

        /// <summary>
        /// Name of the Pipeline to bind to.
        /// </summary>
        [Input("pipeline")]
        public Input<string>? Pipeline { get; set; }

        /// <summary>
        /// Name of the Queue to bind to.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        /// <summary>
        /// The script where the Durable Object is defined, if it is external to this Worker.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        /// <summary>
        /// Name of the secret in the store.
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        /// <summary>
        /// Name of Worker to bind to.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// ID of the store containing the secret.
        /// </summary>
        [Input("storeId")]
        public Input<string>? StoreId { get; set; }

        [Input("text")]
        private Input<string>? _text;

        /// <summary>
        /// The text value to use.
        /// </summary>
        public Input<string>? Text
        {
            get => _text;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _text = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The kind of resource that the binding provides.
        /// Available values: "ai", "analytics*engine", "assets", "browser", "d1", "data*blob", "dispatch*namespace", "durable*object*namespace", "hyperdrive", "inherit", "images", "json", "kv*namespace", "mtls*certificate", "plain*text", "pipelines", "queue", "r2*bucket", "secret*text", "send*email", "service", "tail*consumer", "text*blob", "vectorize", "version*metadata", "secrets*store*secret", "secret*key", "workflow", "wasm*module".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("usages")]
        private InputList<string>? _usages;

        /// <summary>
        /// Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
        /// </summary>
        public InputList<string> Usages
        {
            get => _usages ?? (_usages = new InputList<string>());
            set => _usages = value;
        }

        /// <summary>
        /// Identifier for the version to inherit the binding from, which can be the version ID or the literal "latest" to inherit from the latest version. Defaults to inheriting the binding from the latest version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// Name of the Workflow to bind to.
        /// </summary>
        [Input("workflowName")]
        public Input<string>? WorkflowName { get; set; }

        public WorkerVersionBindingGetArgs()
        {
        }
        public static new WorkerVersionBindingGetArgs Empty => new WorkerVersionBindingGetArgs();
    }
}
