// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class WorkersScriptBindingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// R2 bucket to bind to.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Identifier of the certificate to bind to.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The exported class name of the Durable Object.
        /// </summary>
        [Input("className")]
        public Input<string>? ClassName { get; set; }

        /// <summary>
        /// The name of the dataset to bind to.
        /// </summary>
        [Input("dataset")]
        public Input<string>? Dataset { get; set; }

        /// <summary>
        /// The environment of the script_name to bind to.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// Identifier of the D1 database to bind to.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the Vectorize index to bind to.
        /// </summary>
        [Input("indexName")]
        public Input<string>? IndexName { get; set; }

        /// <summary>
        /// JSON data to use.
        /// </summary>
        [Input("json")]
        public Input<string>? Json { get; set; }

        /// <summary>
        /// A JavaScript variable name for the binding.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Namespace to bind to.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// Outbound worker.
        /// </summary>
        [Input("outbound")]
        public Input<Inputs.WorkersScriptBindingOutboundArgs>? Outbound { get; set; }

        /// <summary>
        /// Name of the Queue to bind to.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        /// <summary>
        /// The script where the Durable Object is defined, if it is external to this Worker.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        /// <summary>
        /// Name of Worker to bind to.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("text")]
        private Input<string>? _text;

        /// <summary>
        /// The text value to use.
        /// </summary>
        public Input<string>? Text
        {
            get => _text;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _text = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The kind of resource that the binding provides.
        /// Available values: "ai", "analytics*engine", "assets", "browser*rendering", "d1", "dispatch*namespace", "durable*object*namespace", "hyperdrive", "json", "kv*namespace", "mtls*certificate", "plain*text", "queue", "r2*bucket", "secret*text", "service", "tail*consumer", "vectorize", "version*metadata".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WorkersScriptBindingArgs()
        {
        }
        public static new WorkersScriptBindingArgs Empty => new WorkersScriptBindingArgs();
    }
}
