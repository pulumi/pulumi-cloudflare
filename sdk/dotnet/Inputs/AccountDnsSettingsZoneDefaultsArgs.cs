// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class AccountDnsSettingsZoneDefaultsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
        /// </summary>
        [Input("flattenAllCnames")]
        public Input<bool>? FlattenAllCnames { get; set; }

        /// <summary>
        /// Whether to enable Foundation DNS Advanced Nameservers on the zone.
        /// </summary>
        [Input("foundationDns")]
        public Input<bool>? FoundationDns { get; set; }

        /// <summary>
        /// Settings for this internal zone.
        /// </summary>
        [Input("internalDns")]
        public Input<Inputs.AccountDnsSettingsZoneDefaultsInternalDnsArgs>? InternalDns { get; set; }

        /// <summary>
        /// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
        /// </summary>
        [Input("multiProvider")]
        public Input<bool>? MultiProvider { get; set; }

        /// <summary>
        /// Settings determining the nameservers through which the zone should be available.
        /// </summary>
        [Input("nameservers")]
        public Input<Inputs.AccountDnsSettingsZoneDefaultsNameserversArgs>? Nameservers { get; set; }

        /// <summary>
        /// The time to live (TTL) of the zone's nameserver (NS) records.
        /// </summary>
        [Input("nsTtl")]
        public Input<double>? NsTtl { get; set; }

        /// <summary>
        /// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
        /// </summary>
        [Input("secondaryOverrides")]
        public Input<bool>? SecondaryOverrides { get; set; }

        /// <summary>
        /// Components of the zone's SOA record.
        /// </summary>
        [Input("soa")]
        public Input<Inputs.AccountDnsSettingsZoneDefaultsSoaArgs>? Soa { get; set; }

        /// <summary>
        /// Whether the zone mode is a regular or CDN/DNS only zone.
        /// Available values: "standard", "cdn*only", "dns*only".
        /// </summary>
        [Input("zoneMode")]
        public Input<string>? ZoneMode { get; set; }

        public AccountDnsSettingsZoneDefaultsArgs()
        {
        }
        public static new AccountDnsSettingsZoneDefaultsArgs Empty => new AccountDnsSettingsZoneDefaultsArgs();
    }
}
