// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class WorkerScriptMigrationsStepGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("deletedClasses")]
        private InputList<string>? _deletedClasses;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// A list of classes to delete Durable Object namespaces from.
        /// </summary>
        public InputList<string> DeletedClasses
        {
            get => _deletedClasses ?? (_deletedClasses = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _deletedClasses = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("newClasses")]
        private InputList<string>? _newClasses;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// A list of classes to create Durable Object namespaces from.
        /// </summary>
        public InputList<string> NewClasses
        {
            get => _newClasses ?? (_newClasses = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _newClasses = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("newSqliteClasses")]
        private InputList<string>? _newSqliteClasses;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// A list of classes to create Durable Object namespaces with SQLite from.
        /// </summary>
        public InputList<string> NewSqliteClasses
        {
            get => _newSqliteClasses ?? (_newSqliteClasses = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _newSqliteClasses = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("renamedClasses")]
        private InputList<Inputs.WorkerScriptMigrationsStepRenamedClassGetArgs>? _renamedClasses;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// A list of classes with Durable Object namespaces that were renamed.
        /// </summary>
        public InputList<Inputs.WorkerScriptMigrationsStepRenamedClassGetArgs> RenamedClasses
        {
            get => _renamedClasses ?? (_renamedClasses = new InputList<Inputs.WorkerScriptMigrationsStepRenamedClassGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.WorkerScriptMigrationsStepRenamedClassGetArgs>());
                _renamedClasses = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("transferredClasses")]
        private InputList<Inputs.WorkerScriptMigrationsStepTransferredClassGetArgs>? _transferredClasses;

        /// <summary>
        /// **NOTE:** This field is write-only and its value will not be updated in state as part of read operations.
        /// A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
        /// </summary>
        public InputList<Inputs.WorkerScriptMigrationsStepTransferredClassGetArgs> TransferredClasses
        {
            get => _transferredClasses ?? (_transferredClasses = new InputList<Inputs.WorkerScriptMigrationsStepTransferredClassGetArgs>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<Inputs.WorkerScriptMigrationsStepTransferredClassGetArgs>());
                _transferredClasses = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public WorkerScriptMigrationsStepGetArgs()
        {
        }
        public static new WorkerScriptMigrationsStepGetArgs Empty => new WorkerScriptMigrationsStepGetArgs();
    }
}
