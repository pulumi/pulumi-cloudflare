// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class RulesetRuleActionParametersGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalCacheablePorts")]
        private InputList<int>? _additionalCacheablePorts;

        /// <summary>
        /// List of additional ports that caching can be enabled on.
        /// </summary>
        public InputList<int> AdditionalCacheablePorts
        {
            get => _additionalCacheablePorts ?? (_additionalCacheablePorts = new InputList<int>());
            set => _additionalCacheablePorts = value;
        }

        [Input("algorithms")]
        private InputList<Inputs.RulesetRuleActionParametersAlgorithmGetArgs>? _algorithms;

        /// <summary>
        /// Custom order for compression algorithms.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersAlgorithmGetArgs> Algorithms
        {
            get => _algorithms ?? (_algorithms = new InputList<Inputs.RulesetRuleActionParametersAlgorithmGetArgs>());
            set => _algorithms = value;
        }

        /// <summary>
        /// Turn on or off Automatic HTTPS Rewrites.
        /// </summary>
        [Input("automaticHttpsRewrites")]
        public Input<bool>? AutomaticHttpsRewrites { get; set; }

        /// <summary>
        /// Select which file extensions to minify automatically.
        /// </summary>
        [Input("autominify")]
        public Input<Inputs.RulesetRuleActionParametersAutominifyGetArgs>? Autominify { get; set; }

        /// <summary>
        /// Turn on or off Browser Integrity Check.
        /// </summary>
        [Input("bic")]
        public Input<bool>? Bic { get; set; }

        /// <summary>
        /// Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
        /// </summary>
        [Input("browserTtl")]
        public Input<Inputs.RulesetRuleActionParametersBrowserTtlGetArgs>? BrowserTtl { get; set; }

        /// <summary>
        /// Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
        /// </summary>
        [Input("cache")]
        public Input<bool>? Cache { get; set; }

        /// <summary>
        /// Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
        /// </summary>
        [Input("cacheKey")]
        public Input<Inputs.RulesetRuleActionParametersCacheKeyGetArgs>? CacheKey { get; set; }

        /// <summary>
        /// Mark whether the request's response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
        /// </summary>
        [Input("cacheReserve")]
        public Input<Inputs.RulesetRuleActionParametersCacheReserveGetArgs>? CacheReserve { get; set; }

        /// <summary>
        /// Error response content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Content-type header to set with the response.
        /// Available values: "application/json", "text/xml", "text/plain", "text/html".
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("cookieFields")]
        private InputList<Inputs.RulesetRuleActionParametersCookieFieldGetArgs>? _cookieFields;

        /// <summary>
        /// The cookie fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersCookieFieldGetArgs> CookieFields
        {
            get => _cookieFields ?? (_cookieFields = new InputList<Inputs.RulesetRuleActionParametersCookieFieldGetArgs>());
            set => _cookieFields = value;
        }

        /// <summary>
        /// Turn off all active Cloudflare Apps.
        /// </summary>
        [Input("disableApps")]
        public Input<bool>? DisableApps { get; set; }

        /// <summary>
        /// Turn off Real User Monitoring (RUM).
        /// </summary>
        [Input("disableRum")]
        public Input<bool>? DisableRum { get; set; }

        /// <summary>
        /// Turn off Zaraz.
        /// </summary>
        [Input("disableZaraz")]
        public Input<bool>? DisableZaraz { get; set; }

        /// <summary>
        /// TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
        /// </summary>
        [Input("edgeTtl")]
        public Input<Inputs.RulesetRuleActionParametersEdgeTtlGetArgs>? EdgeTtl { get; set; }

        /// <summary>
        /// Turn on or off Email Obfuscation.
        /// </summary>
        [Input("emailObfuscation")]
        public Input<bool>? EmailObfuscation { get; set; }

        /// <summary>
        /// Turn on or off Cloudflare Fonts.
        /// </summary>
        [Input("fonts")]
        public Input<bool>? Fonts { get; set; }

        /// <summary>
        /// Serve a redirect based on a bulk list lookup.
        /// </summary>
        [Input("fromList")]
        public Input<Inputs.RulesetRuleActionParametersFromListGetArgs>? FromList { get; set; }

        /// <summary>
        /// Serve a redirect based on the request properties.
        /// </summary>
        [Input("fromValue")]
        public Input<Inputs.RulesetRuleActionParametersFromValueGetArgs>? FromValue { get; set; }

        [Input("headers")]
        private InputMap<Inputs.RulesetRuleActionParametersHeadersGetArgs>? _headers;

        /// <summary>
        /// Map of request headers to modify.
        /// </summary>
        public InputMap<Inputs.RulesetRuleActionParametersHeadersGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputMap<Inputs.RulesetRuleActionParametersHeadersGetArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// Rewrite the HTTP Host header.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// Turn on or off the Hotlink Protection.
        /// </summary>
        [Input("hotlinkProtection")]
        public Input<bool>? HotlinkProtection { get; set; }

        /// <summary>
        /// The ID of the ruleset to execute.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Increment contains the delta to change the score and can be either positive or negative.
        /// </summary>
        [Input("increment")]
        public Input<int>? Increment { get; set; }

        /// <summary>
        /// The configuration to use for matched data logging.
        /// </summary>
        [Input("matchedData")]
        public Input<Inputs.RulesetRuleActionParametersMatchedDataGetArgs>? MatchedData { get; set; }

        /// <summary>
        /// Turn on or off Mirage.
        /// </summary>
        [Input("mirage")]
        public Input<bool>? Mirage { get; set; }

        /// <summary>
        /// Turn on or off Opportunistic Encryption.
        /// </summary>
        [Input("opportunisticEncryption")]
        public Input<bool>? OpportunisticEncryption { get; set; }

        /// <summary>
        /// Override the IP/TCP destination.
        /// </summary>
        [Input("origin")]
        public Input<Inputs.RulesetRuleActionParametersOriginGetArgs>? Origin { get; set; }

        /// <summary>
        /// When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
        /// </summary>
        [Input("originCacheControl")]
        public Input<bool>? OriginCacheControl { get; set; }

        /// <summary>
        /// Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin.
        /// </summary>
        [Input("originErrorPagePassthru")]
        public Input<bool>? OriginErrorPagePassthru { get; set; }

        /// <summary>
        /// A set of overrides to apply to the target ruleset.
        /// </summary>
        [Input("overrides")]
        public Input<Inputs.RulesetRuleActionParametersOverridesGetArgs>? Overrides { get; set; }

        /// <summary>
        /// A phase to skip the execution of. This property is only compatible with products.
        /// Available values: "current".
        /// </summary>
        [Input("phase")]
        public Input<string>? Phase { get; set; }

        [Input("phases")]
        private InputList<string>? _phases;

        /// <summary>
        /// A list of phases to skip the execution of. This option is incompatible with the rulesets option.
        /// </summary>
        public InputList<string> Phases
        {
            get => _phases ?? (_phases = new InputList<string>());
            set => _phases = value;
        }

        /// <summary>
        /// Configure the Polish level.
        /// Available values: "off", "lossless", "lossy", "webp".
        /// </summary>
        [Input("polish")]
        public Input<string>? Polish { get; set; }

        [Input("products")]
        private InputList<string>? _products;

        /// <summary>
        /// A list of legacy security products to skip the execution of.
        /// </summary>
        public InputList<string> Products
        {
            get => _products ?? (_products = new InputList<string>());
            set => _products = value;
        }

        [Input("rawResponseFields")]
        private InputList<Inputs.RulesetRuleActionParametersRawResponseFieldGetArgs>? _rawResponseFields;

        /// <summary>
        /// The raw response fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersRawResponseFieldGetArgs> RawResponseFields
        {
            get => _rawResponseFields ?? (_rawResponseFields = new InputList<Inputs.RulesetRuleActionParametersRawResponseFieldGetArgs>());
            set => _rawResponseFields = value;
        }

        /// <summary>
        /// Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        [Input("requestFields")]
        private InputList<Inputs.RulesetRuleActionParametersRequestFieldGetArgs>? _requestFields;

        /// <summary>
        /// The raw request fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersRequestFieldGetArgs> RequestFields
        {
            get => _requestFields ?? (_requestFields = new InputList<Inputs.RulesetRuleActionParametersRequestFieldGetArgs>());
            set => _requestFields = value;
        }

        /// <summary>
        /// Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
        /// </summary>
        [Input("respectStrongEtags")]
        public Input<bool>? RespectStrongEtags { get; set; }

        /// <summary>
        /// The response to show when the block is applied.
        /// </summary>
        [Input("response")]
        public Input<Inputs.RulesetRuleActionParametersResponseGetArgs>? Response { get; set; }

        [Input("responseFields")]
        private InputList<Inputs.RulesetRuleActionParametersResponseFieldGetArgs>? _responseFields;

        /// <summary>
        /// The transformed response fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersResponseFieldGetArgs> ResponseFields
        {
            get => _responseFields ?? (_responseFields = new InputList<Inputs.RulesetRuleActionParametersResponseFieldGetArgs>());
            set => _responseFields = value;
        }

        /// <summary>
        /// Turn on or off Rocket Loader.
        /// </summary>
        [Input("rocketLoader")]
        public Input<bool>? RocketLoader { get; set; }

        [Input("rules")]
        private InputMap<ImmutableArray<string>>? _rules;

        /// <summary>
        /// A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
        /// </summary>
        public InputMap<ImmutableArray<string>> Rules
        {
            get => _rules ?? (_rules = new InputMap<ImmutableArray<string>>());
            set => _rules = value;
        }

        /// <summary>
        /// A ruleset to skip the execution of. This option is incompatible with the rulesets option.
        /// Available values: "current".
        /// </summary>
        [Input("ruleset")]
        public Input<string>? Ruleset { get; set; }

        [Input("rulesets")]
        private InputList<string>? _rulesets;

        /// <summary>
        /// A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
        /// </summary>
        public InputList<string> Rulesets
        {
            get => _rulesets ?? (_rulesets = new InputList<string>());
            set => _rulesets = value;
        }

        /// <summary>
        /// Configure the Security Level.
        /// Available values: "off", "essentially*off", "low", "medium", "high", "under*attack".
        /// </summary>
        [Input("securityLevel")]
        public Input<string>? SecurityLevel { get; set; }

        /// <summary>
        /// Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
        /// </summary>
        [Input("serveStale")]
        public Input<Inputs.RulesetRuleActionParametersServeStaleGetArgs>? ServeStale { get; set; }

        /// <summary>
        /// Turn on or off Server Side Excludes.
        /// </summary>
        [Input("serverSideExcludes")]
        public Input<bool>? ServerSideExcludes { get; set; }

        /// <summary>
        /// Override the Server Name Indication (SNI).
        /// </summary>
        [Input("sni")]
        public Input<Inputs.RulesetRuleActionParametersSniGetArgs>? Sni { get; set; }

        /// <summary>
        /// Configure the SSL level.
        /// Available values: "off", "flexible", "full", "strict", "origin_pull".
        /// </summary>
        [Input("ssl")]
        public Input<string>? Ssl { get; set; }

        /// <summary>
        /// The status code to use for the error.
        /// </summary>
        [Input("statusCode")]
        public Input<double>? StatusCode { get; set; }

        /// <summary>
        /// Turn on or off Signed Exchanges (SXG).
        /// </summary>
        [Input("sxg")]
        public Input<bool>? Sxg { get; set; }

        [Input("transformedRequestFields")]
        private InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldGetArgs>? _transformedRequestFields;

        /// <summary>
        /// The transformed request fields to log.
        /// </summary>
        public InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldGetArgs> TransformedRequestFields
        {
            get => _transformedRequestFields ?? (_transformedRequestFields = new InputList<Inputs.RulesetRuleActionParametersTransformedRequestFieldGetArgs>());
            set => _transformedRequestFields = value;
        }

        /// <summary>
        /// URI to rewrite the request to.
        /// </summary>
        [Input("uri")]
        public Input<Inputs.RulesetRuleActionParametersUriGetArgs>? Uri { get; set; }

        public RulesetRuleActionParametersGetArgs()
        {
        }
        public static new RulesetRuleActionParametersGetArgs Empty => new RulesetRuleActionParametersGetArgs();
    }
}
