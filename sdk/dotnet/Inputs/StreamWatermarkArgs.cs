// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class StreamWatermarkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and a time a watermark profile was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
        /// </summary>
        [Input("downloadedFrom")]
        public Input<string>? DownloadedFrom { get; set; }

        /// <summary>
        /// The height of the image in pixels.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// A short description of the watermark profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
        /// </summary>
        [Input("opacity")]
        public Input<double>? Opacity { get; set; }

        /// <summary>
        /// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
        /// </summary>
        [Input("padding")]
        public Input<double>? Padding { get; set; }

        /// <summary>
        /// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `Center`. Note that `Center` ignores the `Padding` parameter.
        /// </summary>
        [Input("position")]
        public Input<string>? Position { get; set; }

        /// <summary>
        /// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
        /// </summary>
        [Input("scale")]
        public Input<double>? Scale { get; set; }

        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The width of the image in pixels.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public StreamWatermarkArgs()
        {
        }
        public static new StreamWatermarkArgs Empty => new StreamWatermarkArgs();
    }
}
