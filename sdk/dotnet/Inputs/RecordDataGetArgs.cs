// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class RecordDataGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Algorithm.
        /// </summary>
        [Input("algorithm")]
        public Input<double>? Algorithm { get; set; }

        /// <summary>
        /// Altitude of location in meters.
        /// </summary>
        [Input("altitude")]
        public Input<double>? Altitude { get; set; }

        /// <summary>
        /// Certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Digest.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        /// <summary>
        /// Digest Type.
        /// </summary>
        [Input("digestType")]
        public Input<double>? DigestType { get; set; }

        /// <summary>
        /// fingerprint.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Flags for the CAA record.
        /// </summary>
        [Input("flags")]
        public Input<double>? Flags { get; set; }

        /// <summary>
        /// Key Tag.
        /// </summary>
        [Input("keyTag")]
        public Input<double>? KeyTag { get; set; }

        /// <summary>
        /// Degrees of latitude.
        /// </summary>
        [Input("latDegrees")]
        public Input<double>? LatDegrees { get; set; }

        /// <summary>
        /// Latitude direction.
        /// </summary>
        [Input("latDirection")]
        public Input<string>? LatDirection { get; set; }

        /// <summary>
        /// Minutes of latitude.
        /// </summary>
        [Input("latMinutes")]
        public Input<double>? LatMinutes { get; set; }

        /// <summary>
        /// Seconds of latitude.
        /// </summary>
        [Input("latSeconds")]
        public Input<double>? LatSeconds { get; set; }

        /// <summary>
        /// Degrees of longitude.
        /// </summary>
        [Input("longDegrees")]
        public Input<double>? LongDegrees { get; set; }

        /// <summary>
        /// Longitude direction.
        /// </summary>
        [Input("longDirection")]
        public Input<string>? LongDirection { get; set; }

        /// <summary>
        /// Minutes of longitude.
        /// </summary>
        [Input("longMinutes")]
        public Input<double>? LongMinutes { get; set; }

        /// <summary>
        /// Seconds of longitude.
        /// </summary>
        [Input("longSeconds")]
        public Input<double>? LongSeconds { get; set; }

        /// <summary>
        /// Matching Type.
        /// </summary>
        [Input("matchingType")]
        public Input<double>? MatchingType { get; set; }

        /// <summary>
        /// Order.
        /// </summary>
        [Input("order")]
        public Input<double>? Order { get; set; }

        /// <summary>
        /// The port of the service.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Horizontal precision of location.
        /// </summary>
        [Input("precisionHorz")]
        public Input<double>? PrecisionHorz { get; set; }

        /// <summary>
        /// Vertical precision of location.
        /// </summary>
        [Input("precisionVert")]
        public Input<double>? PrecisionVert { get; set; }

        /// <summary>
        /// Preference.
        /// </summary>
        [Input("preference")]
        public Input<double>? Preference { get; set; }

        /// <summary>
        /// priority.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// Protocol.
        /// </summary>
        [Input("protocol")]
        public Input<double>? Protocol { get; set; }

        /// <summary>
        /// Public Key.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// Regex.
        /// </summary>
        [Input("regex")]
        public Input<string>? Regex { get; set; }

        /// <summary>
        /// Replacement.
        /// </summary>
        [Input("replacement")]
        public Input<string>? Replacement { get; set; }

        /// <summary>
        /// Selector.
        /// </summary>
        [Input("selector")]
        public Input<double>? Selector { get; set; }

        /// <summary>
        /// Service.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Size of location in meters.
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// Name of the property controlled by this record (e.g.: issue, issuewild, iodef).
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// target.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// Type.
        /// </summary>
        [Input("type")]
        public Input<double>? Type { get; set; }

        /// <summary>
        /// Usage.
        /// </summary>
        [Input("usage")]
        public Input<double>? Usage { get; set; }

        /// <summary>
        /// Value of the record. This field's semantics depend on the chosen tag.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The record weight.
        /// </summary>
        [Input("weight")]
        public Input<double>? Weight { get; set; }

        public RecordDataGetArgs()
        {
        }
        public static new RecordDataGetArgs Empty => new RecordDataGetArgs();
    }
}
