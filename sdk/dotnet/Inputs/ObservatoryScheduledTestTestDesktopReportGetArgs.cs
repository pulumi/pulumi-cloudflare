// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class ObservatoryScheduledTestTestDesktopReportGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cumulative Layout Shift.
        /// </summary>
        [Input("cls")]
        public Input<double>? Cls { get; set; }

        /// <summary>
        /// The type of device.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        [Input("error")]
        public Input<Inputs.ObservatoryScheduledTestTestDesktopReportErrorGetArgs>? Error { get; set; }

        /// <summary>
        /// First Contentful Paint.
        /// </summary>
        [Input("fcp")]
        public Input<double>? Fcp { get; set; }

        /// <summary>
        /// The URL to the full Lighthouse JSON report.
        /// </summary>
        [Input("jsonReportUrl")]
        public Input<string>? JsonReportUrl { get; set; }

        /// <summary>
        /// Largest Contentful Paint.
        /// </summary>
        [Input("lcp")]
        public Input<double>? Lcp { get; set; }

        /// <summary>
        /// The Lighthouse performance score.
        /// </summary>
        [Input("performanceScore")]
        public Input<double>? PerformanceScore { get; set; }

        /// <summary>
        /// Speed Index.
        /// </summary>
        [Input("si")]
        public Input<double>? Si { get; set; }

        /// <summary>
        /// The state of the Lighthouse report.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Total Blocking Time.
        /// </summary>
        [Input("tbt")]
        public Input<double>? Tbt { get; set; }

        /// <summary>
        /// Time To First Byte.
        /// </summary>
        [Input("ttfb")]
        public Input<double>? Ttfb { get; set; }

        /// <summary>
        /// Time To Interactive.
        /// </summary>
        [Input("tti")]
        public Input<double>? Tti { get; set; }

        public ObservatoryScheduledTestTestDesktopReportGetArgs()
        {
        }
        public static new ObservatoryScheduledTestTestDesktopReportGetArgs Empty => new ObservatoryScheduledTestTestDesktopReportGetArgs();
    }
}
