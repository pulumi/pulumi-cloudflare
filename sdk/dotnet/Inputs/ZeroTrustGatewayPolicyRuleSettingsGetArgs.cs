// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class ZeroTrustGatewayPolicyRuleSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("addHeaders")]
        private InputMap<string>? _addHeaders;

        /// <summary>
        /// Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
        /// </summary>
        public InputMap<string> AddHeaders
        {
            get => _addHeaders ?? (_addHeaders = new InputMap<string>());
            set => _addHeaders = value;
        }

        /// <summary>
        /// Set by parent MSP accounts to enable their children to bypass this rule.
        /// </summary>
        [Input("allowChildBypass")]
        public Input<bool>? AllowChildBypass { get; set; }

        /// <summary>
        /// Settings for the Audit SSH action.
        /// </summary>
        [Input("auditSsh")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsAuditSshGetArgs>? AuditSsh { get; set; }

        /// <summary>
        /// Configure how browser isolation behaves.
        /// </summary>
        [Input("bisoAdminControls")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsBisoAdminControlsGetArgs>? BisoAdminControls { get; set; }

        /// <summary>
        /// Enable the custom block page.
        /// </summary>
        [Input("blockPageEnabled")]
        public Input<bool>? BlockPageEnabled { get; set; }

        /// <summary>
        /// The text describing why this block occurred, displayed on the custom block page (if enabled).
        /// </summary>
        [Input("blockReason")]
        public Input<string>? BlockReason { get; set; }

        /// <summary>
        /// Set by children MSP accounts to bypass their parent's rules.
        /// </summary>
        [Input("bypassParentRule")]
        public Input<bool>? BypassParentRule { get; set; }

        /// <summary>
        /// Configure how session check behaves.
        /// </summary>
        [Input("checkSession")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsCheckSessionGetArgs>? CheckSession { get; set; }

        /// <summary>
        /// Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when 'resolve*dns*through*cloudflare' or 'resolve*dns*internally' are set. DNS queries will route to the address closest to their origin. Only valid when a rule's action is set to 'resolve'.
        /// </summary>
        [Input("dnsResolvers")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsDnsResolversGetArgs>? DnsResolvers { get; set; }

        /// <summary>
        /// Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs.
        /// </summary>
        [Input("egress")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsEgressGetArgs>? Egress { get; set; }

        /// <summary>
        /// Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
        /// </summary>
        [Input("ignoreCnameCategoryMatches")]
        public Input<bool>? IgnoreCnameCategoryMatches { get; set; }

        /// <summary>
        /// INSECURE - disable DNSSEC validation (for Allow actions).
        /// </summary>
        [Input("insecureDisableDnssecValidation")]
        public Input<bool>? InsecureDisableDnssecValidation { get; set; }

        /// <summary>
        /// Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
        /// </summary>
        [Input("ipCategories")]
        public Input<bool>? IpCategories { get; set; }

        /// <summary>
        /// Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
        /// </summary>
        [Input("ipIndicatorFeeds")]
        public Input<bool>? IpIndicatorFeeds { get; set; }

        /// <summary>
        /// Send matching traffic to the supplied destination IP address and port.
        /// </summary>
        [Input("l4override")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsL4overrideGetArgs>? L4override { get; set; }

        /// <summary>
        /// Configure a notification to display on the user's device when this rule is matched.
        /// </summary>
        [Input("notificationSettings")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsNotificationSettingsGetArgs>? NotificationSettings { get; set; }

        /// <summary>
        /// Override matching DNS queries with a hostname.
        /// </summary>
        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        [Input("overrideIps")]
        private InputList<string>? _overrideIps;

        /// <summary>
        /// Override matching DNS queries with an IP or set of IPs.
        /// </summary>
        public InputList<string> OverrideIps
        {
            get => _overrideIps ?? (_overrideIps = new InputList<string>());
            set => _overrideIps = value;
        }

        /// <summary>
        /// Configure DLP payload logging.
        /// </summary>
        [Input("payloadLog")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsPayloadLogGetArgs>? PayloadLog { get; set; }

        /// <summary>
        /// Settings that apply to quarantine rules
        /// </summary>
        [Input("quarantine")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsQuarantineGetArgs>? Quarantine { get; set; }

        /// <summary>
        /// Configure to forward the query to the internal DNS service, passing the specified 'view*id' as input. Cannot be set when 'dns*resolvers' are specified or 'resolve*dns*through*cloudflare' is set. Only valid when a rule's action is set to 'resolve'.
        /// </summary>
        [Input("resolveDnsInternally")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyGetArgs>? ResolveDnsInternally { get; set; }

        /// <summary>
        /// Enable to send queries that match the policy to Cloudflare's default 1.1.1.1 DNS resolver. Cannot be set when 'dns*resolvers' are specified or 'resolve*dns_internally' is set. Only valid when a rule's action is set to 'resolve'.
        /// </summary>
        [Input("resolveDnsThroughCloudflare")]
        public Input<bool>? ResolveDnsThroughCloudflare { get; set; }

        /// <summary>
        /// Configure behavior when an upstream cert is invalid or an SSL error occurs.
        /// </summary>
        [Input("untrustedCert")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsUntrustedCertGetArgs>? UntrustedCert { get; set; }

        public ZeroTrustGatewayPolicyRuleSettingsGetArgs()
        {
        }
        public static new ZeroTrustGatewayPolicyRuleSettingsGetArgs Empty => new ZeroTrustGatewayPolicyRuleSettingsGetArgs();
    }
}
