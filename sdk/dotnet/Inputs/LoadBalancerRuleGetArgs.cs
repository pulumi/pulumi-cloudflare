// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class LoadBalancerRuleGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The condition expressions to evaluate. If the condition evaluates to true, the overrides or FixedResponse in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// Disable this specific rule. It will no longer be evaluated by this load balancer.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed*response is supplied the rule will be marked as terminates.
        /// </summary>
        [Input("fixedResponse")]
        public Input<Inputs.LoadBalancerRuleFixedResponseGetArgs>? FixedResponse { get; set; }

        /// <summary>
        /// Name of this rule. Only used for human readability.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A collection of overrides to apply to the load balancer when this rule's condition is true. All fields are optional.
        /// </summary>
        [Input("overrides")]
        public Input<Inputs.LoadBalancerRuleOverridesGetArgs>? Overrides { get; set; }

        /// <summary>
        /// The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// If this rule's condition is true, this causes rule evaluation to stop after processing this rule.
        /// </summary>
        [Input("terminates")]
        public Input<bool>? Terminates { get; set; }

        public LoadBalancerRuleGetArgs()
        {
        }
        public static new LoadBalancerRuleGetArgs Empty => new LoadBalancerRuleGetArgs();
    }
}
