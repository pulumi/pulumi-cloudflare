// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class TeamsAccountSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify activity log settings.
        /// </summary>
        [Input("activityLog")]
        public Input<Inputs.TeamsAccountSettingsActivityLogGetArgs>? ActivityLog { get; set; }

        /// <summary>
        /// Specify anti-virus settings.
        /// </summary>
        [Input("antivirus")]
        public Input<Inputs.TeamsAccountSettingsAntivirusGetArgs>? Antivirus { get; set; }

        /// <summary>
        /// Specify block page layout settings.
        /// </summary>
        [Input("blockPage")]
        public Input<Inputs.TeamsAccountSettingsBlockPageGetArgs>? BlockPage { get; set; }

        /// <summary>
        /// Specify the DLP inspection mode.
        /// </summary>
        [Input("bodyScanning")]
        public Input<Inputs.TeamsAccountSettingsBodyScanningGetArgs>? BodyScanning { get; set; }

        /// <summary>
        /// Specify Clientless Browser Isolation settings.
        /// </summary>
        [Input("browserIsolation")]
        public Input<Inputs.TeamsAccountSettingsBrowserIsolationGetArgs>? BrowserIsolation { get; set; }

        /// <summary>
        /// Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
        /// </summary>
        [Input("certificate")]
        public Input<Inputs.TeamsAccountSettingsCertificateGetArgs>? Certificate { get; set; }

        /// <summary>
        /// Specify custom certificate settings for BYO-PKI. This field is deprecated; use `Certificate` instead.
        /// </summary>
        [Input("customCertificate")]
        public Input<Inputs.TeamsAccountSettingsCustomCertificateGetArgs>? CustomCertificate { get; set; }

        /// <summary>
        /// Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
        /// </summary>
        [Input("extendedEmailMatching")]
        public Input<Inputs.TeamsAccountSettingsExtendedEmailMatchingGetArgs>? ExtendedEmailMatching { get; set; }

        /// <summary>
        /// Specify FIPS settings.
        /// </summary>
        [Input("fips")]
        public Input<Inputs.TeamsAccountSettingsFipsGetArgs>? Fips { get; set; }

        /// <summary>
        /// Enable host selection in egress policies.
        /// </summary>
        [Input("hostSelector")]
        public Input<Inputs.TeamsAccountSettingsHostSelectorGetArgs>? HostSelector { get; set; }

        /// <summary>
        /// Define the proxy inspection mode.
        /// </summary>
        [Input("inspection")]
        public Input<Inputs.TeamsAccountSettingsInspectionGetArgs>? Inspection { get; set; }

        /// <summary>
        /// Specify whether to detect protocols from the initial bytes of client traffic.
        /// </summary>
        [Input("protocolDetection")]
        public Input<Inputs.TeamsAccountSettingsProtocolDetectionGetArgs>? ProtocolDetection { get; set; }

        /// <summary>
        /// Specify whether to enable the sandbox.
        /// </summary>
        [Input("sandbox")]
        public Input<Inputs.TeamsAccountSettingsSandboxGetArgs>? Sandbox { get; set; }

        /// <summary>
        /// Specify whether to inspect encrypted HTTP traffic.
        /// </summary>
        [Input("tlsDecrypt")]
        public Input<Inputs.TeamsAccountSettingsTlsDecryptGetArgs>? TlsDecrypt { get; set; }

        public TeamsAccountSettingsGetArgs()
        {
        }
        public static new TeamsAccountSettingsGetArgs Empty => new TeamsAccountSettingsGetArgs();
    }
}
