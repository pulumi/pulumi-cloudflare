// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare.Inputs
{

    public sealed class TeamsRuleRuleSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("addHeaders")]
        private InputMap<string>? _addHeaders;

        /// <summary>
        /// Add custom headers to allowed requests in the form of key-value pairs.
        /// </summary>
        public InputMap<string> AddHeaders
        {
            get => _addHeaders ?? (_addHeaders = new InputMap<string>());
            set => _addHeaders = value;
        }

        /// <summary>
        /// Allow parent MSP accounts to enable bypass their children's rules.
        /// </summary>
        [Input("allowChildBypass")]
        public Input<bool>? AllowChildBypass { get; set; }

        /// <summary>
        /// Settings for auditing SSH usage.
        /// </summary>
        [Input("auditSsh")]
        public Input<Inputs.TeamsRuleRuleSettingsAuditSshGetArgs>? AuditSsh { get; set; }

        /// <summary>
        /// Configure how browser isolation behaves.
        /// </summary>
        [Input("bisoAdminControls")]
        public Input<Inputs.TeamsRuleRuleSettingsBisoAdminControlsGetArgs>? BisoAdminControls { get; set; }

        /// <summary>
        /// Indicator of block page enablement.
        /// </summary>
        [Input("blockPageEnabled")]
        public Input<bool>? BlockPageEnabled { get; set; }

        /// <summary>
        /// The displayed reason for a user being blocked.
        /// </summary>
        [Input("blockPageReason")]
        public Input<string>? BlockPageReason { get; set; }

        /// <summary>
        /// Allow child MSP accounts to bypass their parent's rule.
        /// </summary>
        [Input("bypassParentRule")]
        public Input<bool>? BypassParentRule { get; set; }

        /// <summary>
        /// Configure how session check behaves.
        /// </summary>
        [Input("checkSession")]
        public Input<Inputs.TeamsRuleRuleSettingsCheckSessionGetArgs>? CheckSession { get; set; }

        /// <summary>
        /// Configure how Proxy traffic egresses. Can be set for rules with Egress action and Egress filter. Can be omitted to indicate local egress via Warp IPs.
        /// </summary>
        [Input("egress")]
        public Input<Inputs.TeamsRuleRuleSettingsEgressGetArgs>? Egress { get; set; }

        /// <summary>
        /// Disable DNSSEC validation (must be Allow rule).
        /// </summary>
        [Input("insecureDisableDnssecValidation")]
        public Input<bool>? InsecureDisableDnssecValidation { get; set; }

        /// <summary>
        /// Turns on IP category based filter on dns if the rule contains dns category checks.
        /// </summary>
        [Input("ipCategories")]
        public Input<bool>? IpCategories { get; set; }

        /// <summary>
        /// Settings to forward layer 4 traffic.
        /// </summary>
        [Input("l4override")]
        public Input<Inputs.TeamsRuleRuleSettingsL4overrideGetArgs>? L4override { get; set; }

        /// <summary>
        /// The host to override matching DNS queries with.
        /// </summary>
        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        [Input("overrideIps")]
        private InputList<string>? _overrideIps;

        /// <summary>
        /// The IPs to override matching DNS queries with.
        /// </summary>
        public InputList<string> OverrideIps
        {
            get => _overrideIps ?? (_overrideIps = new InputList<string>());
            set => _overrideIps = value;
        }

        /// <summary>
        /// Configure DLP Payload Logging settings for this rule.
        /// </summary>
        [Input("payloadLog")]
        public Input<Inputs.TeamsRuleRuleSettingsPayloadLogGetArgs>? PayloadLog { get; set; }

        /// <summary>
        /// Configure untrusted certificate settings for this rule.
        /// </summary>
        [Input("untrustedCert")]
        public Input<Inputs.TeamsRuleRuleSettingsUntrustedCertGetArgs>? UntrustedCert { get; set; }

        public TeamsRuleRuleSettingsGetArgs()
        {
        }
        public static new TeamsRuleRuleSettingsGetArgs Empty => new TeamsRuleRuleSettingsGetArgs();
    }
}
