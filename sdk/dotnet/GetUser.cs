// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetUser
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUser = Cloudflare.GetUser.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("cloudflare:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUser = Cloudflare.GetUser.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("cloudflare:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUser = Cloudflare.GetUser.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("cloudflare:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// Lists the betas that the user is participating in.
        /// </summary>
        public readonly ImmutableArray<string> Betas;
        /// <summary>
        /// The country in which the user lives.
        /// </summary>
        public readonly string Country;
        /// <summary>
        /// User's first name
        /// </summary>
        public readonly string FirstName;
        /// <summary>
        /// Indicates whether user has any business zones
        /// </summary>
        public readonly bool HasBusinessZones;
        /// <summary>
        /// Indicates whether user has any enterprise zones
        /// </summary>
        public readonly bool HasEnterpriseZones;
        /// <summary>
        /// Indicates whether user has any pro zones
        /// </summary>
        public readonly bool HasProZones;
        /// <summary>
        /// Identifier of the user.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// User's last name
        /// </summary>
        public readonly string LastName;
        public readonly ImmutableArray<Outputs.GetUserOrganizationResult> Organizations;
        /// <summary>
        /// Indicates whether user has been suspended
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// User's telephone number
        /// </summary>
        public readonly string Telephone;
        /// <summary>
        /// Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
        /// </summary>
        public readonly bool TwoFactorAuthenticationEnabled;
        /// <summary>
        /// Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
        /// </summary>
        public readonly bool TwoFactorAuthenticationLocked;
        /// <summary>
        /// The zipcode or postal code where the user lives.
        /// </summary>
        public readonly string Zipcode;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<string> betas,

            string country,

            string firstName,

            bool hasBusinessZones,

            bool hasEnterpriseZones,

            bool hasProZones,

            string id,

            string lastName,

            ImmutableArray<Outputs.GetUserOrganizationResult> organizations,

            bool suspended,

            string telephone,

            bool twoFactorAuthenticationEnabled,

            bool twoFactorAuthenticationLocked,

            string zipcode)
        {
            Betas = betas;
            Country = country;
            FirstName = firstName;
            HasBusinessZones = hasBusinessZones;
            HasEnterpriseZones = hasEnterpriseZones;
            HasProZones = hasProZones;
            Id = id;
            LastName = lastName;
            Organizations = organizations;
            Suspended = suspended;
            Telephone = telephone;
            TwoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            TwoFactorAuthenticationLocked = twoFactorAuthenticationLocked;
            Zipcode = zipcode;
        }
    }
}
