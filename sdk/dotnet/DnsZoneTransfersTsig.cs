// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDnsZoneTransfersTsig = new Cloudflare.DnsZoneTransfersTsig("example_dns_zone_transfers_tsig", new()
    ///     {
    ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
    ///         Algo = "hmac-sha512.",
    ///         Name = "tsig.customer.cf.",
    ///         Secret = "caf79a7804b04337c9c66ccd7bef9190a1e1679b5dd03d8aa10f7ad45e1a9dab92b417896c15d4d007c7c14194538d2a5d0feffdecc5a7f0e1c570cfa700837c",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig example '&lt;account_id&gt;/&lt;tsig_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig")]
    public partial class DnsZoneTransfersTsig : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// TSIG algorithm.
        /// </summary>
        [Output("algo")]
        public Output<string> Algo { get; private set; } = null!;

        /// <summary>
        /// TSIG key name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// TSIG secret.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZoneTransfersTsig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZoneTransfersTsig(string name, DnsZoneTransfersTsigArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig", name, args ?? new DnsZoneTransfersTsigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZoneTransfersTsig(string name, Input<string> id, DnsZoneTransfersTsigState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZoneTransfersTsig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZoneTransfersTsig Get(string name, Input<string> id, DnsZoneTransfersTsigState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZoneTransfersTsig(name, id, state, options);
        }
    }

    public sealed class DnsZoneTransfersTsigArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// TSIG algorithm.
        /// </summary>
        [Input("algo", required: true)]
        public Input<string> Algo { get; set; } = null!;

        /// <summary>
        /// TSIG key name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// TSIG secret.
        /// </summary>
        [Input("secret", required: true)]
        public Input<string> Secret { get; set; } = null!;

        public DnsZoneTransfersTsigArgs()
        {
        }
        public static new DnsZoneTransfersTsigArgs Empty => new DnsZoneTransfersTsigArgs();
    }

    public sealed class DnsZoneTransfersTsigState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// TSIG algorithm.
        /// </summary>
        [Input("algo")]
        public Input<string>? Algo { get; set; }

        /// <summary>
        /// TSIG key name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// TSIG secret.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        public DnsZoneTransfersTsigState()
        {
        }
        public static new DnsZoneTransfersTsigState Empty => new DnsZoneTransfersTsigState();
    }
}
