// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleAccessRule = new Cloudflare.AccessRule("example_access_rule", new()
    ///     {
    ///         Configuration = new Cloudflare.Inputs.AccessRuleConfigurationArgs
    ///         {
    ///             Target = "ip",
    ///             Value = "198.51.100.4",
    ///         },
    ///         Mode = "challenge",
    ///         ZoneId = "zone_id",
    ///         Notes = "This rule is enabled because of an event that occurred on date X.",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/accessRule:AccessRule example '&lt;{accounts|zones}/{account_id|zone_id}&gt;/&lt;rule_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/accessRule:AccessRule")]
    public partial class AccessRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The available actions that a rule can apply to a matched request.
        /// </summary>
        [Output("allowedModes")]
        public Output<ImmutableArray<string>> AllowedModes { get; private set; } = null!;

        /// <summary>
        /// The rule configuration.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.AccessRuleConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// An informative summary of the rule, typically used as a reminder or explanation.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// All zones owned by the user will have the rule applied.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.AccessRuleScope> Scope { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessRule(string name, AccessRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessRule:AccessRule", name, args ?? new AccessRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessRule(string name, Input<string> id, AccessRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessRule:AccessRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessRule Get(string name, Input<string> id, AccessRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessRule(name, id, state, options);
        }
    }

    public sealed class AccessRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The rule configuration.
        /// </summary>
        [Input("configuration", required: true)]
        public Input<Inputs.AccessRuleConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// An informative summary of the rule, typically used as a reminder or explanation.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessRuleArgs()
        {
        }
        public static new AccessRuleArgs Empty => new AccessRuleArgs();
    }

    public sealed class AccessRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("allowedModes")]
        private InputList<string>? _allowedModes;

        /// <summary>
        /// The available actions that a rule can apply to a matched request.
        /// </summary>
        public InputList<string> AllowedModes
        {
            get => _allowedModes ?? (_allowedModes = new InputList<string>());
            set => _allowedModes = value;
        }

        /// <summary>
        /// The rule configuration.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.AccessRuleConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// An informative summary of the rule, typically used as a reminder or explanation.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// All zones owned by the user will have the rule applied.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.AccessRuleScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessRuleState()
        {
        }
        public static new AccessRuleState Empty => new AccessRuleState();
    }
}
