// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetStreamLiveInput
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamLiveInput = Cloudflare.GetStreamLiveInput.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LiveInputIdentifier = "66be4bf738797e01e1fca35a7bdecdcd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamLiveInputResult> InvokeAsync(GetStreamLiveInputArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamLiveInputResult>("cloudflare:index/getStreamLiveInput:getStreamLiveInput", args ?? new GetStreamLiveInputArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamLiveInput = Cloudflare.GetStreamLiveInput.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LiveInputIdentifier = "66be4bf738797e01e1fca35a7bdecdcd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamLiveInputResult> Invoke(GetStreamLiveInputInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamLiveInputResult>("cloudflare:index/getStreamLiveInput:getStreamLiveInput", args ?? new GetStreamLiveInputInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamLiveInput = Cloudflare.GetStreamLiveInput.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LiveInputIdentifier = "66be4bf738797e01e1fca35a7bdecdcd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamLiveInputResult> Invoke(GetStreamLiveInputInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamLiveInputResult>("cloudflare:index/getStreamLiveInput:getStreamLiveInput", args ?? new GetStreamLiveInputInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamLiveInputArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Input("liveInputIdentifier", required: true)]
        public string LiveInputIdentifier { get; set; } = null!;

        public GetStreamLiveInputArgs()
        {
        }
        public static new GetStreamLiveInputArgs Empty => new GetStreamLiveInputArgs();
    }

    public sealed class GetStreamLiveInputInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Input("liveInputIdentifier", required: true)]
        public Input<string> LiveInputIdentifier { get; set; } = null!;

        public GetStreamLiveInputInvokeArgs()
        {
        }
        public static new GetStreamLiveInputInvokeArgs Empty => new GetStreamLiveInputInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamLiveInputResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The date and time the live input was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
        /// </summary>
        public readonly double DeleteRecordingAfterDays;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        public readonly string LiveInputIdentifier;
        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing live inputs.
        /// </summary>
        public readonly string Meta;
        /// <summary>
        /// The date and time the live input was last modified.
        /// </summary>
        public readonly string Modified;
        /// <summary>
        /// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputRecordingResult Recording;
        /// <summary>
        /// Details for streaming to an live input using RTMPS.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputRtmpsResult Rtmps;
        /// <summary>
        /// Details for playback from an live input using RTMPS.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputRtmpsPlaybackResult RtmpsPlayback;
        /// <summary>
        /// Details for streaming to a live input using SRT.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputSrtResult Srt;
        /// <summary>
        /// Details for playback from an live input using SRT.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputSrtPlaybackResult SrtPlayback;
        /// <summary>
        /// The connection status of a live input.
        /// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Details for streaming to a live input using WebRTC.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputWebRtcResult WebRtc;
        /// <summary>
        /// Details for playback from a live input using WebRTC.
        /// </summary>
        public readonly Outputs.GetStreamLiveInputWebRtcPlaybackResult WebRtcPlayback;

        [OutputConstructor]
        private GetStreamLiveInputResult(
            string accountId,

            string created,

            double deleteRecordingAfterDays,

            string id,

            string liveInputIdentifier,

            string meta,

            string modified,

            Outputs.GetStreamLiveInputRecordingResult recording,

            Outputs.GetStreamLiveInputRtmpsResult rtmps,

            Outputs.GetStreamLiveInputRtmpsPlaybackResult rtmpsPlayback,

            Outputs.GetStreamLiveInputSrtResult srt,

            Outputs.GetStreamLiveInputSrtPlaybackResult srtPlayback,

            string status,

            string uid,

            Outputs.GetStreamLiveInputWebRtcResult webRtc,

            Outputs.GetStreamLiveInputWebRtcPlaybackResult webRtcPlayback)
        {
            AccountId = accountId;
            Created = created;
            DeleteRecordingAfterDays = deleteRecordingAfterDays;
            Id = id;
            LiveInputIdentifier = liveInputIdentifier;
            Meta = meta;
            Modified = modified;
            Recording = recording;
            Rtmps = rtmps;
            RtmpsPlayback = rtmpsPlayback;
            Srt = srt;
            SrtPlayback = srtPlayback;
            Status = status;
            Uid = uid;
            WebRtc = webRtc;
            WebRtcPlayback = webRtcPlayback;
        }
    }
}
