// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleObservatoryScheduledTest = new Cloudflare.ObservatoryScheduledTest("example_observatory_scheduled_test", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Url = "example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest example '&lt;zone_id&gt;/&lt;url&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest")]
    public partial class ObservatoryScheduledTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The frequency of the test.
        /// </summary>
        [Output("frequency")]
        public Output<string> Frequency { get; private set; } = null!;

        /// <summary>
        /// A test region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The test schedule.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.ObservatoryScheduledTestSchedule> Schedule { get; private set; } = null!;

        [Output("test")]
        public Output<Outputs.ObservatoryScheduledTestTest> Test { get; private set; } = null!;

        /// <summary>
        /// A URL.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ObservatoryScheduledTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ObservatoryScheduledTest(string name, ObservatoryScheduledTestArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest", name, args ?? new ObservatoryScheduledTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ObservatoryScheduledTest(string name, Input<string> id, ObservatoryScheduledTestState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ObservatoryScheduledTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ObservatoryScheduledTest Get(string name, Input<string> id, ObservatoryScheduledTestState? state = null, CustomResourceOptions? options = null)
        {
            return new ObservatoryScheduledTest(name, id, state, options);
        }
    }

    public sealed class ObservatoryScheduledTestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A URL.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ObservatoryScheduledTestArgs()
        {
        }
        public static new ObservatoryScheduledTestArgs Empty => new ObservatoryScheduledTestArgs();
    }

    public sealed class ObservatoryScheduledTestState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The frequency of the test.
        /// </summary>
        [Input("frequency")]
        public Input<string>? Frequency { get; set; }

        /// <summary>
        /// A test region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The test schedule.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.ObservatoryScheduledTestScheduleGetArgs>? Schedule { get; set; }

        [Input("test")]
        public Input<Inputs.ObservatoryScheduledTestTestGetArgs>? Test { get; set; }

        /// <summary>
        /// A URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ObservatoryScheduledTestState()
        {
        }
        public static new ObservatoryScheduledTestState Empty => new ObservatoryScheduledTestState();
    }
}
