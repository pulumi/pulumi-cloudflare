// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetWorkersKvNamespace
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkersKvNamespace = Cloudflare.GetWorkersKvNamespace.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         NamespaceId = "0f2ac74b498b48028cb68387c421e279",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkersKvNamespaceResult> InvokeAsync(GetWorkersKvNamespaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkersKvNamespaceResult>("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", args ?? new GetWorkersKvNamespaceArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkersKvNamespace = Cloudflare.GetWorkersKvNamespace.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         NamespaceId = "0f2ac74b498b48028cb68387c421e279",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkersKvNamespaceResult> Invoke(GetWorkersKvNamespaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkersKvNamespaceResult>("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", args ?? new GetWorkersKvNamespaceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkersKvNamespace = Cloudflare.GetWorkersKvNamespace.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         NamespaceId = "0f2ac74b498b48028cb68387c421e279",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkersKvNamespaceResult> Invoke(GetWorkersKvNamespaceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkersKvNamespaceResult>("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", args ?? new GetWorkersKvNamespaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkersKvNamespaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetWorkersKvNamespaceFilterArgs? Filter { get; set; }

        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        [Input("namespaceId")]
        public string? NamespaceId { get; set; }

        public GetWorkersKvNamespaceArgs()
        {
        }
        public static new GetWorkersKvNamespaceArgs Empty => new GetWorkersKvNamespaceArgs();
    }

    public sealed class GetWorkersKvNamespaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetWorkersKvNamespaceFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        public GetWorkersKvNamespaceInvokeArgs()
        {
        }
        public static new GetWorkersKvNamespaceInvokeArgs Empty => new GetWorkersKvNamespaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkersKvNamespaceResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        public readonly Outputs.GetWorkersKvNamespaceFilterResult? Filter;
        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Namespace identifier tag.
        /// </summary>
        public readonly string? NamespaceId;
        /// <summary>
        /// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
        /// </summary>
        public readonly bool SupportsUrlEncoding;
        /// <summary>
        /// A human-readable string name for a Namespace.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private GetWorkersKvNamespaceResult(
            string accountId,

            Outputs.GetWorkersKvNamespaceFilterResult? filter,

            string id,

            string? namespaceId,

            bool supportsUrlEncoding,

            string title)
        {
            AccountId = accountId;
            Filter = filter;
            Id = id;
            NamespaceId = namespaceId;
            SupportsUrlEncoding = supportsUrlEncoding;
            Title = title;
        }
    }
}
