// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetLoadBalancerPools
    {
        /// <summary>
        /// A datasource to find Load Balancer Pools.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Cloudflare.GetLoadBalancerPools.Invoke(new()
        ///     {
        ///         AccountId = "f037e56e89293a057740de681ac9abbe",
        ///         Filter = new Cloudflare.Inputs.GetLoadBalancerPoolsFilterInputArgs
        ///         {
        ///             Name = "example-lb-pool",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoadBalancerPoolsResult> InvokeAsync(GetLoadBalancerPoolsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerPoolsResult>("cloudflare:index/getLoadBalancerPools:getLoadBalancerPools", args ?? new GetLoadBalancerPoolsArgs(), options.WithDefaults());

        /// <summary>
        /// A datasource to find Load Balancer Pools.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Cloudflare.GetLoadBalancerPools.Invoke(new()
        ///     {
        ///         AccountId = "f037e56e89293a057740de681ac9abbe",
        ///         Filter = new Cloudflare.Inputs.GetLoadBalancerPoolsFilterInputArgs
        ///         {
        ///             Name = "example-lb-pool",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerPoolsResult> Invoke(GetLoadBalancerPoolsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerPoolsResult>("cloudflare:index/getLoadBalancerPools:getLoadBalancerPools", args ?? new GetLoadBalancerPoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerPoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier to target for the datasource lookups.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// One or more values used to look up Load Balancer pools. If more than one value is given all values must match in order to be included.
        /// </summary>
        [Input("filter")]
        public Inputs.GetLoadBalancerPoolsFilterArgs? Filter { get; set; }

        [Input("pools")]
        private List<Inputs.GetLoadBalancerPoolsPoolArgs>? _pools;

        /// <summary>
        /// A list of Load Balancer Pools details.
        /// </summary>
        public List<Inputs.GetLoadBalancerPoolsPoolArgs> Pools
        {
            get => _pools ?? (_pools = new List<Inputs.GetLoadBalancerPoolsPoolArgs>());
            set => _pools = value;
        }

        public GetLoadBalancerPoolsArgs()
        {
        }
        public static new GetLoadBalancerPoolsArgs Empty => new GetLoadBalancerPoolsArgs();
    }

    public sealed class GetLoadBalancerPoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier to target for the datasource lookups.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// One or more values used to look up Load Balancer pools. If more than one value is given all values must match in order to be included.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.GetLoadBalancerPoolsFilterInputArgs>? Filter { get; set; }

        [Input("pools")]
        private InputList<Inputs.GetLoadBalancerPoolsPoolInputArgs>? _pools;

        /// <summary>
        /// A list of Load Balancer Pools details.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerPoolsPoolInputArgs> Pools
        {
            get => _pools ?? (_pools = new InputList<Inputs.GetLoadBalancerPoolsPoolInputArgs>());
            set => _pools = value;
        }

        public GetLoadBalancerPoolsInvokeArgs()
        {
        }
        public static new GetLoadBalancerPoolsInvokeArgs Empty => new GetLoadBalancerPoolsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerPoolsResult
    {
        /// <summary>
        /// The account identifier to target for the datasource lookups.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// One or more values used to look up Load Balancer pools. If more than one value is given all values must match in order to be included.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolsFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of Load Balancer Pools details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerPoolsPoolResult> Pools;

        [OutputConstructor]
        private GetLoadBalancerPoolsResult(
            string accountId,

            Outputs.GetLoadBalancerPoolsFilterResult? filter,

            string id,

            ImmutableArray<Outputs.GetLoadBalancerPoolsPoolResult> pools)
        {
            AccountId = accountId;
            Filter = filter;
            Id = id;
            Pools = pools;
        }
    }
}
