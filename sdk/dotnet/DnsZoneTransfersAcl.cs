// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDnsZoneTransfersAcl = new Cloudflare.DnsZoneTransfersAcl("example_dns_zone_transfers_acl", new()
    ///     {
    ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
    ///         IpRange = "192.0.2.53/28",
    ///         Name = "my-acl-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl example '&lt;account_id&gt;/&lt;acl_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl")]
    public partial class DnsZoneTransfersAcl : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
        /// </summary>
        [Output("ipRange")]
        public Output<string> IpRange { get; private set; } = null!;

        /// <summary>
        /// The name of the acl.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZoneTransfersAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZoneTransfersAcl(string name, DnsZoneTransfersAclArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl", name, args ?? new DnsZoneTransfersAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZoneTransfersAcl(string name, Input<string> id, DnsZoneTransfersAclState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersAcl:DnsZoneTransfersAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZoneTransfersAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZoneTransfersAcl Get(string name, Input<string> id, DnsZoneTransfersAclState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZoneTransfersAcl(name, id, state, options);
        }
    }

    public sealed class DnsZoneTransfersAclArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
        /// </summary>
        [Input("ipRange", required: true)]
        public Input<string> IpRange { get; set; } = null!;

        /// <summary>
        /// The name of the acl.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DnsZoneTransfersAclArgs()
        {
        }
        public static new DnsZoneTransfersAclArgs Empty => new DnsZoneTransfersAclArgs();
    }

    public sealed class DnsZoneTransfersAclState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// The name of the acl.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DnsZoneTransfersAclState()
        {
        }
        public static new DnsZoneTransfersAclState Empty => new DnsZoneTransfersAclState();
    }
}
