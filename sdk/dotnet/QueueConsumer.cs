// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleQueueConsumer = new Cloudflare.QueueConsumer("example_queue_consumer", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         QueueId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         DeadLetterQueue = "example-queue",
    ///         ScriptName = "my-consumer-worker",
    ///         Settings = new Cloudflare.Inputs.QueueConsumerSettingsArgs
    ///         {
    ///             Batch_size = 50,
    ///             Max_concurrency = 10,
    ///             Max_retries = 3,
    ///             Max_wait_time_ms = 5000,
    ///             Retry_delay = 10,
    ///         },
    ///         Type = "worker",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/queueConsumer:QueueConsumer")]
    public partial class QueueConsumer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Output("consumerId")]
        public Output<string?> ConsumerId { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        [Output("deadLetterQueue")]
        public Output<string?> DeadLetterQueue { get; private set; } = null!;

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Output("queueId")]
        public Output<string> QueueId { get; private set; } = null!;

        /// <summary>
        /// Name of a Worker
        /// </summary>
        [Output("script")]
        public Output<string> Script { get; private set; } = null!;

        /// <summary>
        /// Name of a Worker
        /// </summary>
        [Output("scriptName")]
        public Output<string?> ScriptName { get; private set; } = null!;

        [Output("settings")]
        public Output<Outputs.QueueConsumerSettings?> Settings { get; private set; } = null!;

        /// <summary>
        /// Available values: "worker", "HttpPull".
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a QueueConsumer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QueueConsumer(string name, QueueConsumerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/queueConsumer:QueueConsumer", name, args ?? new QueueConsumerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QueueConsumer(string name, Input<string> id, QueueConsumerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/queueConsumer:QueueConsumer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QueueConsumer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QueueConsumer Get(string name, Input<string> id, QueueConsumerState? state = null, CustomResourceOptions? options = null)
        {
            return new QueueConsumer(name, id, state, options);
        }
    }

    public sealed class QueueConsumerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        [Input("deadLetterQueue")]
        public Input<string>? DeadLetterQueue { get; set; }

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("queueId", required: true)]
        public Input<string> QueueId { get; set; } = null!;

        /// <summary>
        /// Name of a Worker
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        [Input("settings")]
        public Input<Inputs.QueueConsumerSettingsArgs>? Settings { get; set; }

        /// <summary>
        /// Available values: "worker", "HttpPull".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public QueueConsumerArgs()
        {
        }
        public static new QueueConsumerArgs Empty => new QueueConsumerArgs();
    }

    public sealed class QueueConsumerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("consumerId")]
        public Input<string>? ConsumerId { get; set; }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("deadLetterQueue")]
        public Input<string>? DeadLetterQueue { get; set; }

        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("queueId")]
        public Input<string>? QueueId { get; set; }

        /// <summary>
        /// Name of a Worker
        /// </summary>
        [Input("script")]
        public Input<string>? Script { get; set; }

        /// <summary>
        /// Name of a Worker
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        [Input("settings")]
        public Input<Inputs.QueueConsumerSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// Available values: "worker", "HttpPull".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public QueueConsumerState()
        {
        }
        public static new QueueConsumerState Empty => new QueueConsumerState();
    }
}
