// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Load Balancer pool resource. This provides a
    /// pool of origins that can be used by a Cloudflare Load Balancer.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example &lt;account_id&gt;/&lt;load_balancer_pool_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/loadBalancerPool:LoadBalancerPool")]
    public partial class LoadBalancerPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
        /// </summary>
        [Output("checkRegions")]
        public Output<ImmutableArray<string>> CheckRegions { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Free text description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this origin is enabled. Disabled origins will not receive traffic and are excluded from health checks. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The latitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Output("latitude")]
        public Output<double?> Latitude { get; private set; } = null!;

        /// <summary>
        /// Setting for controlling load shedding for this pool.
        /// </summary>
        [Output("loadSheddings")]
        public Output<ImmutableArray<Outputs.LoadBalancerPoolLoadShedding>> LoadSheddings { get; private set; } = null!;

        /// <summary>
        /// The longitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Output("longitude")]
        public Output<double?> Longitude { get; private set; } = null!;

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
        /// </summary>
        [Output("minimumOrigins")]
        public Output<int?> MinimumOrigins { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The ID of the Monitor to use for health checking origins within this pool.
        /// </summary>
        [Output("monitor")]
        public Output<string?> Monitor { get; private set; } = null!;

        /// <summary>
        /// A human-identifiable name for the origin.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Output("notificationEmail")]
        public Output<string?> NotificationEmail { get; private set; } = null!;

        /// <summary>
        /// Set an origin steering policy to control origin selection within a pool.
        /// </summary>
        [Output("originSteerings")]
        public Output<ImmutableArray<Outputs.LoadBalancerPoolOriginSteering>> OriginSteerings { get; private set; } = null!;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        [Output("origins")]
        public Output<ImmutableArray<Outputs.LoadBalancerPoolOrigin>> Origins { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancerPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancerPool(string name, LoadBalancerPoolArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, args ?? new LoadBalancerPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancerPool(string name, Input<string> id, LoadBalancerPoolState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancerPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancerPool Get(string name, Input<string> id, LoadBalancerPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancerPool(name, id, state, options);
        }
    }

    public sealed class LoadBalancerPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this origin is enabled. Disabled origins will not receive traffic and are excluded from health checks. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The latitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        [Input("loadSheddings")]
        private InputList<Inputs.LoadBalancerPoolLoadSheddingArgs>? _loadSheddings;

        /// <summary>
        /// Setting for controlling load shedding for this pool.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolLoadSheddingArgs> LoadSheddings
        {
            get => _loadSheddings ?? (_loadSheddings = new InputList<Inputs.LoadBalancerPoolLoadSheddingArgs>());
            set => _loadSheddings = value;
        }

        /// <summary>
        /// The longitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
        /// </summary>
        [Input("minimumOrigins")]
        public Input<int>? MinimumOrigins { get; set; }

        /// <summary>
        /// The ID of the Monitor to use for health checking origins within this pool.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// A human-identifiable name for the origin.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Input("notificationEmail")]
        public Input<string>? NotificationEmail { get; set; }

        [Input("originSteerings")]
        private InputList<Inputs.LoadBalancerPoolOriginSteeringArgs>? _originSteerings;

        /// <summary>
        /// Set an origin steering policy to control origin selection within a pool.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginSteeringArgs> OriginSteerings
        {
            get => _originSteerings ?? (_originSteerings = new InputList<Inputs.LoadBalancerPoolOriginSteeringArgs>());
            set => _originSteerings = value;
        }

        [Input("origins", required: true)]
        private InputList<Inputs.LoadBalancerPoolOriginArgs>? _origins;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.LoadBalancerPoolOriginArgs>());
            set => _origins = value;
        }

        public LoadBalancerPoolArgs()
        {
        }
        public static new LoadBalancerPoolArgs Empty => new LoadBalancerPoolArgs();
    }

    public sealed class LoadBalancerPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this origin is enabled. Disabled origins will not receive traffic and are excluded from health checks. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The latitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        [Input("loadSheddings")]
        private InputList<Inputs.LoadBalancerPoolLoadSheddingGetArgs>? _loadSheddings;

        /// <summary>
        /// Setting for controlling load shedding for this pool.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolLoadSheddingGetArgs> LoadSheddings
        {
            get => _loadSheddings ?? (_loadSheddings = new InputList<Inputs.LoadBalancerPoolLoadSheddingGetArgs>());
            set => _loadSheddings = value;
        }

        /// <summary>
        /// The longitude this pool is physically located at; used for proximity steering.
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
        /// </summary>
        [Input("minimumOrigins")]
        public Input<int>? MinimumOrigins { get; set; }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The ID of the Monitor to use for health checking origins within this pool.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// A human-identifiable name for the origin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Input("notificationEmail")]
        public Input<string>? NotificationEmail { get; set; }

        [Input("originSteerings")]
        private InputList<Inputs.LoadBalancerPoolOriginSteeringGetArgs>? _originSteerings;

        /// <summary>
        /// Set an origin steering policy to control origin selection within a pool.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginSteeringGetArgs> OriginSteerings
        {
            get => _originSteerings ?? (_originSteerings = new InputList<Inputs.LoadBalancerPoolOriginSteeringGetArgs>());
            set => _originSteerings = value;
        }

        [Input("origins")]
        private InputList<Inputs.LoadBalancerPoolOriginGetArgs>? _origins;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginGetArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.LoadBalancerPoolOriginGetArgs>());
            set => _origins = value;
        }

        public LoadBalancerPoolState()
        {
        }
        public static new LoadBalancerPoolState Empty => new LoadBalancerPoolState();
    }
}
