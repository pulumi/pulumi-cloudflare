// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example '&lt;account_id&gt;/&lt;pool_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/loadBalancerPool:LoadBalancerPool")]
    public partial class LoadBalancerPool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// A list of regions from which to run health checks. Null means every Cloudflare data center.
        /// </summary>
        [Output("checkRegions")]
        public Output<ImmutableArray<string>> CheckRegions { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// A human-readable description of the pool.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
        /// </summary>
        [Output("disabledAt")]
        public Output<string> DisabledAt { get; private set; } = null!;

        /// <summary>
        /// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
        /// </summary>
        [Output("latitude")]
        public Output<double?> Latitude { get; private set; } = null!;

        /// <summary>
        /// Configures load shedding policies and percentages for the pool.
        /// </summary>
        [Output("loadShedding")]
        public Output<Outputs.LoadBalancerPoolLoadShedding> LoadShedding { get; private set; } = null!;

        /// <summary>
        /// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
        /// </summary>
        [Output("longitude")]
        public Output<double?> Longitude { get; private set; } = null!;

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
        /// </summary>
        [Output("minimumOrigins")]
        public Output<int> MinimumOrigins { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The ID of the Monitor to use for checking the health of origins within this pool.
        /// </summary>
        [Output("monitor")]
        public Output<string?> Monitor { get; private set; } = null!;

        /// <summary>
        /// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<string>> Networks { get; private set; } = null!;

        /// <summary>
        /// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Output("notificationEmail")]
        public Output<string> NotificationEmail { get; private set; } = null!;

        /// <summary>
        /// Filter pool and origin health notifications by resource type or health status. Use null to reset.
        /// </summary>
        [Output("notificationFilter")]
        public Output<Outputs.LoadBalancerPoolNotificationFilter> NotificationFilter { get; private set; } = null!;

        /// <summary>
        /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
        /// </summary>
        [Output("originSteering")]
        public Output<Outputs.LoadBalancerPoolOriginSteering> OriginSteering { get; private set; } = null!;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        [Output("origins")]
        public Output<ImmutableArray<Outputs.LoadBalancerPoolOrigin>> Origins { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancerPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancerPool(string name, LoadBalancerPoolArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, args ?? new LoadBalancerPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancerPool(string name, Input<string> id, LoadBalancerPoolState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancerPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancerPool Get(string name, Input<string> id, LoadBalancerPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancerPool(name, id, state, options);
        }
    }

    public sealed class LoadBalancerPoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions from which to run health checks. Null means every Cloudflare data center.
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        /// <summary>
        /// A human-readable description of the pool.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        /// <summary>
        /// Configures load shedding policies and percentages for the pool.
        /// </summary>
        [Input("loadShedding")]
        public Input<Inputs.LoadBalancerPoolLoadSheddingArgs>? LoadShedding { get; set; }

        /// <summary>
        /// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
        /// </summary>
        [Input("minimumOrigins")]
        public Input<int>? MinimumOrigins { get; set; }

        /// <summary>
        /// The ID of the Monitor to use for checking the health of origins within this pool.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Input("notificationEmail")]
        public Input<string>? NotificationEmail { get; set; }

        /// <summary>
        /// Filter pool and origin health notifications by resource type or health status. Use null to reset.
        /// </summary>
        [Input("notificationFilter")]
        public Input<Inputs.LoadBalancerPoolNotificationFilterArgs>? NotificationFilter { get; set; }

        /// <summary>
        /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
        /// </summary>
        [Input("originSteering")]
        public Input<Inputs.LoadBalancerPoolOriginSteeringArgs>? OriginSteering { get; set; }

        [Input("origins", required: true)]
        private InputList<Inputs.LoadBalancerPoolOriginArgs>? _origins;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.LoadBalancerPoolOriginArgs>());
            set => _origins = value;
        }

        public LoadBalancerPoolArgs()
        {
        }
        public static new LoadBalancerPoolArgs Empty => new LoadBalancerPoolArgs();
    }

    public sealed class LoadBalancerPoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions from which to run health checks. Null means every Cloudflare data center.
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// A human-readable description of the pool.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
        /// </summary>
        [Input("disabledAt")]
        public Input<string>? DisabledAt { get; set; }

        /// <summary>
        /// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        /// <summary>
        /// Configures load shedding policies and percentages for the pool.
        /// </summary>
        [Input("loadShedding")]
        public Input<Inputs.LoadBalancerPoolLoadSheddingGetArgs>? LoadShedding { get; set; }

        /// <summary>
        /// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
        /// </summary>
        [Input("minimumOrigins")]
        public Input<int>? MinimumOrigins { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The ID of the Monitor to use for checking the health of origins within this pool.
        /// </summary>
        [Input("monitor")]
        public Input<string>? Monitor { get; set; }

        /// <summary>
        /// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        /// <summary>
        /// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        [Input("notificationEmail")]
        public Input<string>? NotificationEmail { get; set; }

        /// <summary>
        /// Filter pool and origin health notifications by resource type or health status. Use null to reset.
        /// </summary>
        [Input("notificationFilter")]
        public Input<Inputs.LoadBalancerPoolNotificationFilterGetArgs>? NotificationFilter { get; set; }

        /// <summary>
        /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
        /// </summary>
        [Input("originSteering")]
        public Input<Inputs.LoadBalancerPoolOriginSteeringGetArgs>? OriginSteering { get; set; }

        [Input("origins")]
        private InputList<Inputs.LoadBalancerPoolOriginGetArgs>? _origins;

        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public InputList<Inputs.LoadBalancerPoolOriginGetArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.LoadBalancerPoolOriginGetArgs>());
            set => _origins = value;
        }

        public LoadBalancerPoolState()
        {
        }
        public static new LoadBalancerPoolState Empty => new LoadBalancerPoolState();
    }
}
