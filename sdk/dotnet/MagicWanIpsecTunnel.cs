// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicWanIpsecTunnel = new Cloudflare.MagicWanIpsecTunnel("example_magic_wan_ipsec_tunnel", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         CloudflareEndpoint = "203.0.113.1",
    ///         InterfaceAddress = "192.0.2.0/31",
    ///         Name = "IPsec_1",
    ///         CustomerEndpoint = "203.0.113.1",
    ///         Description = "Tunnel for ISP X",
    ///         HealthCheck = new Cloudflare.Inputs.MagicWanIpsecTunnelHealthCheckArgs
    ///         {
    ///             Direction = "unidirectional",
    ///             Enabled = true,
    ///             Rate = "low",
    ///             Target = new Cloudflare.Inputs.MagicWanIpsecTunnelHealthCheckTargetArgs
    ///             {
    ///                 Saved = "203.0.113.1",
    ///             },
    ///             Type = "reply",
    ///         },
    ///         Psk = "O3bwKSjnaoCxDoUxjcq4Rk8ZKkezQUiy",
    ///         ReplayProtection = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel")]
    public partial class MagicWanIpsecTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Output("cloudflareEndpoint")]
        public Output<string> CloudflareEndpoint { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Output("customerEndpoint")]
        public Output<string?> CustomerEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("healthCheck")]
        public Output<Outputs.MagicWanIpsecTunnelHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Output("interfaceAddress")]
        public Output<string> InterfaceAddress { get; private set; } = null!;

        [Output("ipsecTunnel")]
        public Output<Outputs.MagicWanIpsecTunnelIpsecTunnel> IpsecTunnel { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("ipsecTunnelId")]
        public Output<string?> IpsecTunnelId { get; private set; } = null!;

        [Output("ipsecTunnels")]
        public Output<ImmutableArray<Outputs.MagicWanIpsecTunnelIpsecTunnel>> IpsecTunnels { get; private set; } = null!;

        [Output("modified")]
        public Output<bool> Modified { get; private set; } = null!;

        [Output("modifiedIpsecTunnel")]
        public Output<Outputs.MagicWanIpsecTunnelModifiedIpsecTunnel> ModifiedIpsecTunnel { get; private set; } = null!;

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        [Output("psk")]
        public Output<string?> Psk { get; private set; } = null!;

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Output("replayProtection")]
        public Output<bool> ReplayProtection { get; private set; } = null!;


        /// <summary>
        /// Create a MagicWanIpsecTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicWanIpsecTunnel(string name, MagicWanIpsecTunnelArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, args ?? new MagicWanIpsecTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicWanIpsecTunnel(string name, Input<string> id, MagicWanIpsecTunnelState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicWanIpsecTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicWanIpsecTunnel Get(string name, Input<string> id, MagicWanIpsecTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicWanIpsecTunnel(name, id, state, options);
        }
    }

    public sealed class MagicWanIpsecTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint", required: true)]
        public Input<string> CloudflareEndpoint { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanIpsecTunnelHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress", required: true)]
        public Input<string> InterfaceAddress { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("ipsecTunnelId")]
        public Input<string>? IpsecTunnelId { get; set; }

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        [Input("psk")]
        public Input<string>? Psk { get; set; }

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Input("replayProtection")]
        public Input<bool>? ReplayProtection { get; set; }

        public MagicWanIpsecTunnelArgs()
        {
        }
        public static new MagicWanIpsecTunnelArgs Empty => new MagicWanIpsecTunnelArgs();
    }

    public sealed class MagicWanIpsecTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint")]
        public Input<string>? CloudflareEndpoint { get; set; }

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanIpsecTunnelHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress")]
        public Input<string>? InterfaceAddress { get; set; }

        [Input("ipsecTunnel")]
        public Input<Inputs.MagicWanIpsecTunnelIpsecTunnelGetArgs>? IpsecTunnel { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("ipsecTunnelId")]
        public Input<string>? IpsecTunnelId { get; set; }

        [Input("ipsecTunnels")]
        private InputList<Inputs.MagicWanIpsecTunnelIpsecTunnelGetArgs>? _ipsecTunnels;
        public InputList<Inputs.MagicWanIpsecTunnelIpsecTunnelGetArgs> IpsecTunnels
        {
            get => _ipsecTunnels ?? (_ipsecTunnels = new InputList<Inputs.MagicWanIpsecTunnelIpsecTunnelGetArgs>());
            set => _ipsecTunnels = value;
        }

        [Input("modified")]
        public Input<bool>? Modified { get; set; }

        [Input("modifiedIpsecTunnel")]
        public Input<Inputs.MagicWanIpsecTunnelModifiedIpsecTunnelGetArgs>? ModifiedIpsecTunnel { get; set; }

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        [Input("psk")]
        public Input<string>? Psk { get; set; }

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Input("replayProtection")]
        public Input<bool>? ReplayProtection { get; set; }

        public MagicWanIpsecTunnelState()
        {
        }
        public static new MagicWanIpsecTunnelState Empty => new MagicWanIpsecTunnelState();
    }
}
