// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel example '&lt;account_id&gt;/&lt;ipsec_tunnel_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel")]
    public partial class MagicWanIpsecTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).
        /// </summary>
        [Output("allowNullCipher")]
        public Output<bool> AllowNullCipher { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Output("cloudflareEndpoint")]
        public Output<string> CloudflareEndpoint { get; private set; } = null!;

        /// <summary>
        /// The date and time the tunnel was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Output("customerEndpoint")]
        public Output<string?> CustomerEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("healthCheck")]
        public Output<Outputs.MagicWanIpsecTunnelHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Output("interfaceAddress")]
        public Output<string> InterfaceAddress { get; private set; } = null!;

        /// <summary>
        /// A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
        /// </summary>
        [Output("interfaceAddress6")]
        public Output<string?> InterfaceAddress6 { get; private set; } = null!;

        /// <summary>
        /// The date and time the tunnel was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        [Output("psk")]
        public Output<string?> Psk { get; private set; } = null!;

        /// <summary>
        /// The PSK metadata that includes when the PSK was generated.
        /// </summary>
        [Output("pskMetadata")]
        public Output<Outputs.MagicWanIpsecTunnelPskMetadata> PskMetadata { get; private set; } = null!;

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Output("replayProtection")]
        public Output<bool> ReplayProtection { get; private set; } = null!;


        /// <summary>
        /// Create a MagicWanIpsecTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicWanIpsecTunnel(string name, MagicWanIpsecTunnelArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, args ?? new MagicWanIpsecTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicWanIpsecTunnel(string name, Input<string> id, MagicWanIpsecTunnelState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/ipsecTunnel:IpsecTunnel" },
                },
                AdditionalSecretOutputs =
                {
                    "psk",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicWanIpsecTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicWanIpsecTunnel Get(string name, Input<string> id, MagicWanIpsecTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicWanIpsecTunnel(name, id, state, options);
        }
    }

    public sealed class MagicWanIpsecTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint", required: true)]
        public Input<string> CloudflareEndpoint { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanIpsecTunnelHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress", required: true)]
        public Input<string> InterfaceAddress { get; set; } = null!;

        /// <summary>
        /// A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
        /// </summary>
        [Input("interfaceAddress6")]
        public Input<string>? InterfaceAddress6 { get; set; }

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("psk")]
        private Input<string>? _psk;

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        public Input<string>? Psk
        {
            get => _psk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Input("replayProtection")]
        public Input<bool>? ReplayProtection { get; set; }

        public MagicWanIpsecTunnelArgs()
        {
        }
        public static new MagicWanIpsecTunnelArgs Empty => new MagicWanIpsecTunnelArgs();
    }

    public sealed class MagicWanIpsecTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).
        /// </summary>
        [Input("allowNullCipher")]
        public Input<bool>? AllowNullCipher { get; set; }

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint")]
        public Input<string>? CloudflareEndpoint { get; set; }

        /// <summary>
        /// The date and time the tunnel was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description forthe IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanIpsecTunnelHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress")]
        public Input<string>? InterfaceAddress { get; set; }

        /// <summary>
        /// A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
        /// </summary>
        [Input("interfaceAddress6")]
        public Input<string>? InterfaceAddress6 { get; set; }

        /// <summary>
        /// The date and time the tunnel was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("psk")]
        private Input<string>? _psk;

        /// <summary>
        /// A randomly generated or provided string for use in the IPsec tunnel.
        /// </summary>
        public Input<string>? Psk
        {
            get => _psk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The PSK metadata that includes when the PSK was generated.
        /// </summary>
        [Input("pskMetadata")]
        public Input<Inputs.MagicWanIpsecTunnelPskMetadataGetArgs>? PskMetadata { get; set; }

        /// <summary>
        /// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
        /// </summary>
        [Input("replayProtection")]
        public Input<bool>? ReplayProtection { get; set; }

        public MagicWanIpsecTunnelState()
        {
        }
        public static new MagicWanIpsecTunnelState Empty => new MagicWanIpsecTunnelState();
    }
}
