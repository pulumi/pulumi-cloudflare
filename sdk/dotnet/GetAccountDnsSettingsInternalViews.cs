// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountDnsSettingsInternalViews
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountDnsSettingsInternalViews = Cloudflare.GetAccountDnsSettingsInternalViews.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = new Cloudflare.Inputs.GetAccountDnsSettingsInternalViewsNameInputArgs
        ///         {
        ///             Contains = "view",
        ///             Endswith = "ew",
        ///             Exact = "my view",
        ///             Startswith = "my",
        ///         },
        ///         Order = "name",
        ///         ZoneId = "ae29bea30e2e427ba9cd8d78b628177b",
        ///         ZoneName = "www.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountDnsSettingsInternalViewsResult> InvokeAsync(GetAccountDnsSettingsInternalViewsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountDnsSettingsInternalViewsResult>("cloudflare:index/getAccountDnsSettingsInternalViews:getAccountDnsSettingsInternalViews", args ?? new GetAccountDnsSettingsInternalViewsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountDnsSettingsInternalViews = Cloudflare.GetAccountDnsSettingsInternalViews.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = new Cloudflare.Inputs.GetAccountDnsSettingsInternalViewsNameInputArgs
        ///         {
        ///             Contains = "view",
        ///             Endswith = "ew",
        ///             Exact = "my view",
        ///             Startswith = "my",
        ///         },
        ///         Order = "name",
        ///         ZoneId = "ae29bea30e2e427ba9cd8d78b628177b",
        ///         ZoneName = "www.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountDnsSettingsInternalViewsResult> Invoke(GetAccountDnsSettingsInternalViewsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountDnsSettingsInternalViewsResult>("cloudflare:index/getAccountDnsSettingsInternalViews:getAccountDnsSettingsInternalViews", args ?? new GetAccountDnsSettingsInternalViewsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountDnsSettingsInternalViews = Cloudflare.GetAccountDnsSettingsInternalViews.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Name = new Cloudflare.Inputs.GetAccountDnsSettingsInternalViewsNameInputArgs
        ///         {
        ///             Contains = "view",
        ///             Endswith = "ew",
        ///             Exact = "my view",
        ///             Startswith = "my",
        ///         },
        ///         Order = "name",
        ///         ZoneId = "ae29bea30e2e427ba9cd8d78b628177b",
        ///         ZoneName = "www.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountDnsSettingsInternalViewsResult> Invoke(GetAccountDnsSettingsInternalViewsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountDnsSettingsInternalViewsResult>("cloudflare:index/getAccountDnsSettingsInternalViews:getAccountDnsSettingsInternalViews", args ?? new GetAccountDnsSettingsInternalViewsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountDnsSettingsInternalViewsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Direction to order DNS views in.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
        /// Available values: "any", "all".
        /// </summary>
        [Input("match")]
        public string? Match { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        [Input("name")]
        public Inputs.GetAccountDnsSettingsInternalViewsNameArgs? Name { get; set; }

        /// <summary>
        /// Field to order DNS views by.
        /// Available values: "name", "created*on", "modified*on".
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// A zone ID that exists in the zones list for the view.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        /// <summary>
        /// A zone name that exists in the zones list for the view.
        /// </summary>
        [Input("zoneName")]
        public string? ZoneName { get; set; }

        public GetAccountDnsSettingsInternalViewsArgs()
        {
        }
        public static new GetAccountDnsSettingsInternalViewsArgs Empty => new GetAccountDnsSettingsInternalViewsArgs();
    }

    public sealed class GetAccountDnsSettingsInternalViewsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Direction to order DNS views in.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
        /// Available values: "any", "all".
        /// </summary>
        [Input("match")]
        public Input<string>? Match { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        [Input("name")]
        public Input<Inputs.GetAccountDnsSettingsInternalViewsNameInputArgs>? Name { get; set; }

        /// <summary>
        /// Field to order DNS views by.
        /// Available values: "name", "created*on", "modified*on".
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// A zone ID that exists in the zones list for the view.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// A zone name that exists in the zones list for the view.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public GetAccountDnsSettingsInternalViewsInvokeArgs()
        {
        }
        public static new GetAccountDnsSettingsInternalViewsInvokeArgs Empty => new GetAccountDnsSettingsInternalViewsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountDnsSettingsInternalViewsResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Direction to order DNS views in.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string Direction;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
        /// Available values: "any", "all".
        /// </summary>
        public readonly string Match;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        public readonly Outputs.GetAccountDnsSettingsInternalViewsNameResult? Name;
        /// <summary>
        /// Field to order DNS views by.
        /// Available values: "name", "created*on", "modified*on".
        /// </summary>
        public readonly string? Order;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountDnsSettingsInternalViewsResultResult> Results;
        /// <summary>
        /// A zone ID that exists in the zones list for the view.
        /// </summary>
        public readonly string? ZoneId;
        /// <summary>
        /// A zone name that exists in the zones list for the view.
        /// </summary>
        public readonly string? ZoneName;

        [OutputConstructor]
        private GetAccountDnsSettingsInternalViewsResult(
            string accountId,

            string direction,

            string id,

            string match,

            int? maxItems,

            Outputs.GetAccountDnsSettingsInternalViewsNameResult? name,

            string? order,

            ImmutableArray<Outputs.GetAccountDnsSettingsInternalViewsResultResult> results,

            string? zoneId,

            string? zoneName)
        {
            AccountId = accountId;
            Direction = direction;
            Id = id;
            Match = match;
            MaxItems = maxItems;
            Name = name;
            Order = order;
            Results = results;
            ZoneId = zoneId;
            ZoneName = zoneName;
        }
    }
}
