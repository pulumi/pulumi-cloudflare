// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource, that manages a notification policy for
    /// Cloudflare's products. The delivery mechanisms supported are email,
    /// webhooks, and PagerDuty.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //## With Filters
    ///     var example = new Cloudflare.NotificationPolicy("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         AlertType = "health_check_status_notification",
    ///         Description = "Notification policy to alert on unhealthy Healthcheck status",
    ///         EmailIntegrations = new[]
    ///         {
    ///             new Cloudflare.Inputs.NotificationPolicyEmailIntegrationArgs
    ///             {
    ///                 Id = "myemail@example.com",
    ///             },
    ///         },
    ///         Enabled = true,
    ///         Filters = new Cloudflare.Inputs.NotificationPolicyFiltersArgs
    ///         {
    ///             HealthCheckIds = new[]
    ///             {
    ///                 "699d98642c564d2e855e9661899b7252",
    ///             },
    ///             Statuses = new[]
    ///             {
    ///                 "Unhealthy",
    ///             },
    ///         },
    ///         Name = "Policy for Healthcheck notification",
    ///         PagerdutyIntegrations = new[]
    ///         {
    ///             new Cloudflare.Inputs.NotificationPolicyPagerdutyIntegrationArgs
    ///             {
    ///                 Id = "850129d136459401860572c5d964d27k",
    ///             },
    ///         },
    ///         WebhooksIntegrations = new[]
    ///         {
    ///             new Cloudflare.Inputs.NotificationPolicyWebhooksIntegrationArgs
    ///             {
    ///                 Id = "1860572c5d964d27aa0f379d13645940",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example &lt;account_id&gt;/&lt;policy_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/notificationPolicy:NotificationPolicy")]
    public partial class NotificationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of [available alert types](https://developers.cloudflare.com/fundamentals/notifications/notification-available/). Available values: `advanced_http_alert_error`, `access_custom_certificate_expiration_type`, `advanced_ddos_attack_l4_alert`, `advanced_ddos_attack_l7_alert`, `bgp_hijack_notification`, `billing_usage_alert`, `block_notification_block_removed`, `block_notification_new_block`, `block_notification_review_rejected`, `brand_protection_alert`, `brand_protection_digest`, `clickhouse_alert_fw_anomaly`, `clickhouse_alert_fw_ent_anomaly`, `custom_ssl_certificate_event_type`, `dedicated_ssl_certificate_event_type`, `dos_attack_l4`, `dos_attack_l7`, `expiring_service_token_alert`, `failing_logpush_job_disabled_alert`, `fbm_auto_advertisement`, `fbm_dosd_attack`, `fbm_volumetric_attack`, `health_check_status_notification`, `hostname_aop_custom_certificate_expiration_type`, `http_alert_edge_error`, `http_alert_origin_error`, `incident_alert`, `load_balancing_health_alert`, `load_balancing_pool_enablement_alert`, `logo_match_alert`, `magic_tunnel_health_check_event`, `maintenance_event_notification`, `mtls_certificate_store_certificate_expiration_type`, `pages_event_alert`, `radar_notification`, `real_origin_monitoring`, `scriptmonitor_alert_new_code_change_detections`, `scriptmonitor_alert_new_hosts`, `scriptmonitor_alert_new_malicious_hosts`, `scriptmonitor_alert_new_malicious_scripts`, `scriptmonitor_alert_new_malicious_url`, `scriptmonitor_alert_new_max_length_resource_url`, `scriptmonitor_alert_new_resources`, `secondary_dns_all_primaries_failing`, `secondary_dns_primaries_failing`, `secondary_dns_zone_successfully_updated`, `secondary_dns_zone_validation_warning`, `sentinel_alert`, `stream_live_notifications`, `traffic_anomalies_alert`, `tunnel_health_event`, `tunnel_update_event`, `universal_ssl_event_type`, `web_analytics_metrics_update`, `weekly_account_overview`, `workers_alert`, `zone_aop_custom_certificate_expiration_type`.
        /// </summary>
        [Output("alertType")]
        public Output<string> AlertType { get; private set; } = null!;

        /// <summary>
        /// When the notification policy was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The email ID to which the notification should be dispatched.
        /// </summary>
        [Output("emailIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyEmailIntegration>> EmailIntegrations { get; private set; } = null!;

        /// <summary>
        /// State of the pool to alert on.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// An optional nested block of filters that applies to the selected `alert_type`. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields).
        /// </summary>
        [Output("filters")]
        public Output<Outputs.NotificationPolicyFilters?> Filters { get; private set; } = null!;

        /// <summary>
        /// When the notification policy was last modified.
        /// </summary>
        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The unique ID of a configured pagerduty endpoint to which the notification should be dispatched.
        /// </summary>
        [Output("pagerdutyIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyPagerdutyIntegration>> PagerdutyIntegrations { get; private set; } = null!;

        /// <summary>
        /// The unique ID of a configured webhooks endpoint to which the notification should be dispatched.
        /// </summary>
        [Output("webhooksIntegrations")]
        public Output<ImmutableArray<Outputs.NotificationPolicyWebhooksIntegration>> WebhooksIntegrations { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationPolicy(string name, NotificationPolicyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicy:NotificationPolicy", name, args ?? new NotificationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationPolicy(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicy:NotificationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationPolicy Get(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationPolicy(name, id, state, options);
        }
    }

    public sealed class NotificationPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of [available alert types](https://developers.cloudflare.com/fundamentals/notifications/notification-available/). Available values: `advanced_http_alert_error`, `access_custom_certificate_expiration_type`, `advanced_ddos_attack_l4_alert`, `advanced_ddos_attack_l7_alert`, `bgp_hijack_notification`, `billing_usage_alert`, `block_notification_block_removed`, `block_notification_new_block`, `block_notification_review_rejected`, `brand_protection_alert`, `brand_protection_digest`, `clickhouse_alert_fw_anomaly`, `clickhouse_alert_fw_ent_anomaly`, `custom_ssl_certificate_event_type`, `dedicated_ssl_certificate_event_type`, `dos_attack_l4`, `dos_attack_l7`, `expiring_service_token_alert`, `failing_logpush_job_disabled_alert`, `fbm_auto_advertisement`, `fbm_dosd_attack`, `fbm_volumetric_attack`, `health_check_status_notification`, `hostname_aop_custom_certificate_expiration_type`, `http_alert_edge_error`, `http_alert_origin_error`, `incident_alert`, `load_balancing_health_alert`, `load_balancing_pool_enablement_alert`, `logo_match_alert`, `magic_tunnel_health_check_event`, `maintenance_event_notification`, `mtls_certificate_store_certificate_expiration_type`, `pages_event_alert`, `radar_notification`, `real_origin_monitoring`, `scriptmonitor_alert_new_code_change_detections`, `scriptmonitor_alert_new_hosts`, `scriptmonitor_alert_new_malicious_hosts`, `scriptmonitor_alert_new_malicious_scripts`, `scriptmonitor_alert_new_malicious_url`, `scriptmonitor_alert_new_max_length_resource_url`, `scriptmonitor_alert_new_resources`, `secondary_dns_all_primaries_failing`, `secondary_dns_primaries_failing`, `secondary_dns_zone_successfully_updated`, `secondary_dns_zone_validation_warning`, `sentinel_alert`, `stream_live_notifications`, `traffic_anomalies_alert`, `tunnel_health_event`, `tunnel_update_event`, `universal_ssl_event_type`, `web_analytics_metrics_update`, `weekly_account_overview`, `workers_alert`, `zone_aop_custom_certificate_expiration_type`.
        /// </summary>
        [Input("alertType", required: true)]
        public Input<string> AlertType { get; set; } = null!;

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIntegrations")]
        private InputList<Inputs.NotificationPolicyEmailIntegrationArgs>? _emailIntegrations;

        /// <summary>
        /// The email ID to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyEmailIntegrationArgs> EmailIntegrations
        {
            get => _emailIntegrations ?? (_emailIntegrations = new InputList<Inputs.NotificationPolicyEmailIntegrationArgs>());
            set => _emailIntegrations = value;
        }

        /// <summary>
        /// State of the pool to alert on.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// An optional nested block of filters that applies to the selected `alert_type`. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields).
        /// </summary>
        [Input("filters")]
        public Input<Inputs.NotificationPolicyFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("pagerdutyIntegrations")]
        private InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs>? _pagerdutyIntegrations;

        /// <summary>
        /// The unique ID of a configured pagerduty endpoint to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs> PagerdutyIntegrations
        {
            get => _pagerdutyIntegrations ?? (_pagerdutyIntegrations = new InputList<Inputs.NotificationPolicyPagerdutyIntegrationArgs>());
            set => _pagerdutyIntegrations = value;
        }

        [Input("webhooksIntegrations")]
        private InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs>? _webhooksIntegrations;

        /// <summary>
        /// The unique ID of a configured webhooks endpoint to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs> WebhooksIntegrations
        {
            get => _webhooksIntegrations ?? (_webhooksIntegrations = new InputList<Inputs.NotificationPolicyWebhooksIntegrationArgs>());
            set => _webhooksIntegrations = value;
        }

        public NotificationPolicyArgs()
        {
        }
        public static new NotificationPolicyArgs Empty => new NotificationPolicyArgs();
    }

    public sealed class NotificationPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of [available alert types](https://developers.cloudflare.com/fundamentals/notifications/notification-available/). Available values: `advanced_http_alert_error`, `access_custom_certificate_expiration_type`, `advanced_ddos_attack_l4_alert`, `advanced_ddos_attack_l7_alert`, `bgp_hijack_notification`, `billing_usage_alert`, `block_notification_block_removed`, `block_notification_new_block`, `block_notification_review_rejected`, `brand_protection_alert`, `brand_protection_digest`, `clickhouse_alert_fw_anomaly`, `clickhouse_alert_fw_ent_anomaly`, `custom_ssl_certificate_event_type`, `dedicated_ssl_certificate_event_type`, `dos_attack_l4`, `dos_attack_l7`, `expiring_service_token_alert`, `failing_logpush_job_disabled_alert`, `fbm_auto_advertisement`, `fbm_dosd_attack`, `fbm_volumetric_attack`, `health_check_status_notification`, `hostname_aop_custom_certificate_expiration_type`, `http_alert_edge_error`, `http_alert_origin_error`, `incident_alert`, `load_balancing_health_alert`, `load_balancing_pool_enablement_alert`, `logo_match_alert`, `magic_tunnel_health_check_event`, `maintenance_event_notification`, `mtls_certificate_store_certificate_expiration_type`, `pages_event_alert`, `radar_notification`, `real_origin_monitoring`, `scriptmonitor_alert_new_code_change_detections`, `scriptmonitor_alert_new_hosts`, `scriptmonitor_alert_new_malicious_hosts`, `scriptmonitor_alert_new_malicious_scripts`, `scriptmonitor_alert_new_malicious_url`, `scriptmonitor_alert_new_max_length_resource_url`, `scriptmonitor_alert_new_resources`, `secondary_dns_all_primaries_failing`, `secondary_dns_primaries_failing`, `secondary_dns_zone_successfully_updated`, `secondary_dns_zone_validation_warning`, `sentinel_alert`, `stream_live_notifications`, `traffic_anomalies_alert`, `tunnel_health_event`, `tunnel_update_event`, `universal_ssl_event_type`, `web_analytics_metrics_update`, `weekly_account_overview`, `workers_alert`, `zone_aop_custom_certificate_expiration_type`.
        /// </summary>
        [Input("alertType")]
        public Input<string>? AlertType { get; set; }

        /// <summary>
        /// When the notification policy was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Description of the notification policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("emailIntegrations")]
        private InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs>? _emailIntegrations;

        /// <summary>
        /// The email ID to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs> EmailIntegrations
        {
            get => _emailIntegrations ?? (_emailIntegrations = new InputList<Inputs.NotificationPolicyEmailIntegrationGetArgs>());
            set => _emailIntegrations = value;
        }

        /// <summary>
        /// State of the pool to alert on.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// An optional nested block of filters that applies to the selected `alert_type`. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields).
        /// </summary>
        [Input("filters")]
        public Input<Inputs.NotificationPolicyFiltersGetArgs>? Filters { get; set; }

        /// <summary>
        /// When the notification policy was last modified.
        /// </summary>
        [Input("modified")]
        public Input<string>? Modified { get; set; }

        /// <summary>
        /// The name of the notification policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pagerdutyIntegrations")]
        private InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs>? _pagerdutyIntegrations;

        /// <summary>
        /// The unique ID of a configured pagerduty endpoint to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs> PagerdutyIntegrations
        {
            get => _pagerdutyIntegrations ?? (_pagerdutyIntegrations = new InputList<Inputs.NotificationPolicyPagerdutyIntegrationGetArgs>());
            set => _pagerdutyIntegrations = value;
        }

        [Input("webhooksIntegrations")]
        private InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs>? _webhooksIntegrations;

        /// <summary>
        /// The unique ID of a configured webhooks endpoint to which the notification should be dispatched.
        /// </summary>
        public InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs> WebhooksIntegrations
        {
            get => _webhooksIntegrations ?? (_webhooksIntegrations = new InputList<Inputs.NotificationPolicyWebhooksIntegrationGetArgs>());
            set => _webhooksIntegrations = value;
        }

        public NotificationPolicyState()
        {
        }
        public static new NotificationPolicyState Empty => new NotificationPolicyState();
    }
}
