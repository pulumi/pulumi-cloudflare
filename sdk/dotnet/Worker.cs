// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorker = new Cloudflare.Worker("example_worker", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Name = "my-worker",
    ///         Logpush = true,
    ///         Observability = new Cloudflare.Inputs.WorkerObservabilityArgs
    ///         {
    ///             Enabled = true,
    ///             Head_sampling_rate = 1,
    ///             Logs = new Cloudflare.Inputs.WorkerObservabilityLogsArgs
    ///             {
    ///                 Enabled = true,
    ///                 HeadSamplingRate = 1,
    ///                 InvocationLogs = true,
    ///             },
    ///         },
    ///         Subdomain = new Cloudflare.Inputs.WorkerSubdomainArgs
    ///         {
    ///             Enabled = true,
    ///             Previews_enabled = true,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "my-team",
    ///             "my-public-api",
    ///         },
    ///         TailConsumers = new[]
    ///         {
    ///             new Cloudflare.Inputs.WorkerTailConsumerArgs
    ///             {
    ///                 Name = "my-tail-consumer",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/worker:Worker example '&lt;account_id&gt;/&lt;worker_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/worker:Worker")]
    public partial class Worker : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// When the Worker was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Whether logpush is enabled for the Worker.
        /// </summary>
        [Output("logpush")]
        public Output<bool> Logpush { get; private set; } = null!;

        /// <summary>
        /// Name of the Worker.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Output("observability")]
        public Output<Outputs.WorkerObservability> Observability { get; private set; } = null!;

        /// <summary>
        /// Subdomain settings for the Worker.
        /// </summary>
        [Output("subdomain")]
        public Output<Outputs.WorkerSubdomain> Subdomain { get; private set; } = null!;

        /// <summary>
        /// Tags associated with the Worker.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Other Workers that should consume logs from the Worker.
        /// </summary>
        [Output("tailConsumers")]
        public Output<ImmutableArray<Outputs.WorkerTailConsumer>> TailConsumers { get; private set; } = null!;

        /// <summary>
        /// When the Worker was most recently updated.
        /// </summary>
        [Output("updatedOn")]
        public Output<string> UpdatedOn { get; private set; } = null!;


        /// <summary>
        /// Create a Worker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Worker(string name, WorkerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/worker:Worker", name, args ?? new WorkerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Worker(string name, Input<string> id, WorkerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/worker:Worker", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Worker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Worker Get(string name, Input<string> id, WorkerState? state = null, CustomResourceOptions? options = null)
        {
            return new Worker(name, id, state, options);
        }
    }

    public sealed class WorkerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Whether logpush is enabled for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the Worker.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkerObservabilityArgs>? Observability { get; set; }

        /// <summary>
        /// Subdomain settings for the Worker.
        /// </summary>
        [Input("subdomain")]
        public Input<Inputs.WorkerSubdomainArgs>? Subdomain { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the Worker.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tailConsumers")]
        private InputList<Inputs.WorkerTailConsumerArgs>? _tailConsumers;

        /// <summary>
        /// Other Workers that should consume logs from the Worker.
        /// </summary>
        public InputList<Inputs.WorkerTailConsumerArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkerTailConsumerArgs>());
            set => _tailConsumers = value;
        }

        public WorkerArgs()
        {
        }
        public static new WorkerArgs Empty => new WorkerArgs();
    }

    public sealed class WorkerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When the Worker was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Whether logpush is enabled for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the Worker.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkerObservabilityGetArgs>? Observability { get; set; }

        /// <summary>
        /// Subdomain settings for the Worker.
        /// </summary>
        [Input("subdomain")]
        public Input<Inputs.WorkerSubdomainGetArgs>? Subdomain { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags associated with the Worker.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tailConsumers")]
        private InputList<Inputs.WorkerTailConsumerGetArgs>? _tailConsumers;

        /// <summary>
        /// Other Workers that should consume logs from the Worker.
        /// </summary>
        public InputList<Inputs.WorkerTailConsumerGetArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkerTailConsumerGetArgs>());
            set => _tailConsumers = value;
        }

        /// <summary>
        /// When the Worker was most recently updated.
        /// </summary>
        [Input("updatedOn")]
        public Input<string>? UpdatedOn { get; set; }

        public WorkerState()
        {
        }
        public static new WorkerState Empty => new WorkerState();
    }
}
