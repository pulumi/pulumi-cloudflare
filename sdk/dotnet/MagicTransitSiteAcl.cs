// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl example '&lt;account_id&gt;/&lt;site_id&gt;/&lt;acl_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl")]
    public partial class MagicTransitSiteAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Description for the ACL.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
        /// </summary>
        [Output("forwardLocally")]
        public Output<bool?> ForwardLocally { get; private set; } = null!;

        [Output("lan1")]
        public Output<Outputs.MagicTransitSiteAclLan1> Lan1 { get; private set; } = null!;

        [Output("lan2")]
        public Output<Outputs.MagicTransitSiteAclLan2> Lan2 { get; private set; } = null!;

        /// <summary>
        /// The name of the ACL.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
        /// </summary>
        [Output("unidirectional")]
        public Output<bool?> Unidirectional { get; private set; } = null!;


        /// <summary>
        /// Create a MagicTransitSiteAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicTransitSiteAcl(string name, MagicTransitSiteAclArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl", name, args ?? new MagicTransitSiteAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicTransitSiteAcl(string name, Input<string> id, MagicTransitSiteAclState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicTransitSiteAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicTransitSiteAcl Get(string name, Input<string> id, MagicTransitSiteAclState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicTransitSiteAcl(name, id, state, options);
        }
    }

    public sealed class MagicTransitSiteAclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Description for the ACL.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
        /// </summary>
        [Input("forwardLocally")]
        public Input<bool>? ForwardLocally { get; set; }

        [Input("lan1", required: true)]
        public Input<Inputs.MagicTransitSiteAclLan1Args> Lan1 { get; set; } = null!;

        [Input("lan2", required: true)]
        public Input<Inputs.MagicTransitSiteAclLan2Args> Lan2 { get; set; } = null!;

        /// <summary>
        /// The name of the ACL.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("protocols")]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
        /// </summary>
        [Input("unidirectional")]
        public Input<bool>? Unidirectional { get; set; }

        public MagicTransitSiteAclArgs()
        {
        }
        public static new MagicTransitSiteAclArgs Empty => new MagicTransitSiteAclArgs();
    }

    public sealed class MagicTransitSiteAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Description for the ACL.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
        /// </summary>
        [Input("forwardLocally")]
        public Input<bool>? ForwardLocally { get; set; }

        [Input("lan1")]
        public Input<Inputs.MagicTransitSiteAclLan1GetArgs>? Lan1 { get; set; }

        [Input("lan2")]
        public Input<Inputs.MagicTransitSiteAclLan2GetArgs>? Lan2 { get; set; }

        /// <summary>
        /// The name of the ACL.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
        /// </summary>
        [Input("unidirectional")]
        public Input<bool>? Unidirectional { get; set; }

        public MagicTransitSiteAclState()
        {
        }
        public static new MagicTransitSiteAclState Empty => new MagicTransitSiteAclState();
    }
}
