// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetWorkerVersion
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersion = Cloudflare.GetWorkerVersion.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         VersionId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///         Include = "modules",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkerVersionResult> InvokeAsync(GetWorkerVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkerVersionResult>("cloudflare:index/getWorkerVersion:getWorkerVersion", args ?? new GetWorkerVersionArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersion = Cloudflare.GetWorkerVersion.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         VersionId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///         Include = "modules",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerVersionResult> Invoke(GetWorkerVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerVersionResult>("cloudflare:index/getWorkerVersion:getWorkerVersion", args ?? new GetWorkerVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersion = Cloudflare.GetWorkerVersion.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         VersionId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///         Include = "modules",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerVersionResult> Invoke(GetWorkerVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerVersionResult>("cloudflare:index/getWorkerVersion:getWorkerVersion", args ?? new GetWorkerVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkerVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Available values: "modules".
        /// </summary>
        [Input("include")]
        public string? Include { get; set; }

        [Input("versionId")]
        public string? VersionId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("workerId", required: true)]
        public string WorkerId { get; set; } = null!;

        public GetWorkerVersionArgs()
        {
        }
        public static new GetWorkerVersionArgs Empty => new GetWorkerVersionArgs();
    }

    public sealed class GetWorkerVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Available values: "modules".
        /// </summary>
        [Input("include")]
        public Input<string>? Include { get; set; }

        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("workerId", required: true)]
        public Input<string> WorkerId { get; set; } = null!;

        public GetWorkerVersionInvokeArgs()
        {
        }
        public static new GetWorkerVersionInvokeArgs Empty => new GetWorkerVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkerVersionResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Metadata about the version.
        /// </summary>
        public readonly Outputs.GetWorkerVersionAnnotationsResult Annotations;
        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        public readonly Outputs.GetWorkerVersionAssetsResult Assets;
        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerVersionBindingResult> Bindings;
        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        public readonly string CompatibilityDate;
        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        public readonly ImmutableArray<string> CompatibilityFlags;
        /// <summary>
        /// When the version was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Available values: "modules".
        /// </summary>
        public readonly string? Include;
        /// <summary>
        /// Resource limits enforced at runtime.
        /// </summary>
        public readonly Outputs.GetWorkerVersionLimitsResult Limits;
        /// <summary>
        /// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
        /// </summary>
        public readonly string MainModule;
        /// <summary>
        /// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
        /// </summary>
        public readonly Outputs.GetWorkerVersionMigrationsResult Migrations;
        /// <summary>
        /// Code, sourcemaps, and other content used at runtime.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerVersionModuleResult> Modules;
        /// <summary>
        /// The integer version number, starting from one.
        /// </summary>
        public readonly int Number;
        /// <summary>
        /// Placement settings for the version.
        /// </summary>
        public readonly Outputs.GetWorkerVersionPlacementResult Placement;
        /// <summary>
        /// The client used to create the version.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Usage model for the version.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        public readonly string UsageModel;
        public readonly string? VersionId;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string WorkerId;

        [OutputConstructor]
        private GetWorkerVersionResult(
            string accountId,

            Outputs.GetWorkerVersionAnnotationsResult annotations,

            Outputs.GetWorkerVersionAssetsResult assets,

            ImmutableArray<Outputs.GetWorkerVersionBindingResult> bindings,

            string compatibilityDate,

            ImmutableArray<string> compatibilityFlags,

            string createdOn,

            string id,

            string? include,

            Outputs.GetWorkerVersionLimitsResult limits,

            string mainModule,

            Outputs.GetWorkerVersionMigrationsResult migrations,

            ImmutableArray<Outputs.GetWorkerVersionModuleResult> modules,

            int number,

            Outputs.GetWorkerVersionPlacementResult placement,

            string source,

            string usageModel,

            string? versionId,

            string workerId)
        {
            AccountId = accountId;
            Annotations = annotations;
            Assets = assets;
            Bindings = bindings;
            CompatibilityDate = compatibilityDate;
            CompatibilityFlags = compatibilityFlags;
            CreatedOn = createdOn;
            Id = id;
            Include = include;
            Limits = limits;
            MainModule = mainModule;
            Migrations = migrations;
            Modules = modules;
            Number = number;
            Placement = placement;
            Source = source;
            UsageModel = usageModel;
            VersionId = versionId;
            WorkerId = workerId;
        }
    }
}
