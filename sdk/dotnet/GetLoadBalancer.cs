// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancer = Cloudflare.GetLoadBalancer.Invoke(new()
        ///     {
        ///         ZoneId = "699d98642c564d2e855e9661899b7252",
        ///         LoadBalancerId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("cloudflare:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancer = Cloudflare.GetLoadBalancer.Invoke(new()
        ///     {
        ///         ZoneId = "699d98642c564d2e855e9661899b7252",
        ///         LoadBalancerId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("cloudflare:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancer = Cloudflare.GetLoadBalancer.Invoke(new()
        ///     {
        ///         ZoneId = "699d98642c564d2e855e9661899b7252",
        ///         LoadBalancerId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("cloudflare:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : global::Pulumi.InvokeArgs
    {
        [Input("loadBalancerId")]
        public string? LoadBalancerId { get; set; }

        [Input("popPools")]
        private Dictionary<string, ImmutableArray<string>>? _popPools;

        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public Dictionary<string, ImmutableArray<string>> PopPools
        {
            get => _popPools ?? (_popPools = new Dictionary<string, ImmutableArray<string>>());
            set => _popPools = value;
        }

        [Input("regionPools")]
        private Dictionary<string, ImmutableArray<string>>? _regionPools;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public Dictionary<string, ImmutableArray<string>> RegionPools
        {
            get => _regionPools ?? (_regionPools = new Dictionary<string, ImmutableArray<string>>());
            set => _regionPools = value;
        }

        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetLoadBalancerArgs()
        {
        }
        public static new GetLoadBalancerArgs Empty => new GetLoadBalancerArgs();
    }

    public sealed class GetLoadBalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        [Input("popPools")]
        private InputMap<ImmutableArray<string>>? _popPools;

        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> PopPools
        {
            get => _popPools ?? (_popPools = new InputMap<ImmutableArray<string>>());
            set => _popPools = value;
        }

        [Input("regionPools")]
        private InputMap<ImmutableArray<string>>? _regionPools;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputMap<ImmutableArray<string>>());
            set => _regionPools = value;
        }

        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetLoadBalancerInvokeArgs()
        {
        }
        public static new GetLoadBalancerInvokeArgs Empty => new GetLoadBalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
        /// </summary>
        public readonly Outputs.GetLoadBalancerAdaptiveRoutingResult AdaptiveRouting;
        /// <summary>
        /// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> CountryPools;
        public readonly string CreatedOn;
        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
        /// </summary>
        public readonly ImmutableArray<string> DefaultPools;
        /// <summary>
        /// Object description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether to enable (the default) this load balancer.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        public readonly string FallbackPool;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string? LoadBalancerId;
        /// <summary>
        /// Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
        /// </summary>
        public readonly Outputs.GetLoadBalancerLocationStrategyResult LocationStrategy;
        public readonly string ModifiedOn;
        /// <summary>
        /// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public readonly ImmutableArray<string> Networks;
        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> PopPools;
        /// <summary>
        /// Whether the hostname should be gray clouded (false) or orange clouded (true).
        /// </summary>
        public readonly bool Proxied;
        /// <summary>
        /// Configures pool weights.
        /// </summary>
        public readonly Outputs.GetLoadBalancerRandomSteeringResult RandomSteering;
        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> RegionPools;
        /// <summary>
        /// BETA Field Not General Access: A list of rules for this load balancer to execute.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerRuleResult> Rules;
        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ip_cookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
        /// Available values: "none", "cookie", "ip_cookie", "header".
        /// </summary>
        public readonly string SessionAffinity;
        /// <summary>
        /// Configures attributes for session affinity.
        /// </summary>
        public readonly Outputs.GetLoadBalancerSessionAffinityAttributesResult SessionAffinityAttributes;
        /// <summary>
        /// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `"cookie"` / `"ip_cookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
        /// </summary>
        public readonly double SessionAffinityTtl;
        /// <summary>
        /// Steering Policy for this load balancer.
        /// </summary>
        public readonly string SteeringPolicy;
        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
        /// </summary>
        public readonly double Ttl;
        public readonly string ZoneId;

        [OutputConstructor]
        private GetLoadBalancerResult(
            Outputs.GetLoadBalancerAdaptiveRoutingResult adaptiveRouting,

            ImmutableDictionary<string, ImmutableArray<string>> countryPools,

            string createdOn,

            ImmutableArray<string> defaultPools,

            string description,

            bool enabled,

            string fallbackPool,

            string id,

            string? loadBalancerId,

            Outputs.GetLoadBalancerLocationStrategyResult locationStrategy,

            string modifiedOn,

            string name,

            ImmutableArray<string> networks,

            ImmutableDictionary<string, ImmutableArray<string>> popPools,

            bool proxied,

            Outputs.GetLoadBalancerRandomSteeringResult randomSteering,

            ImmutableDictionary<string, ImmutableArray<string>> regionPools,

            ImmutableArray<Outputs.GetLoadBalancerRuleResult> rules,

            string sessionAffinity,

            Outputs.GetLoadBalancerSessionAffinityAttributesResult sessionAffinityAttributes,

            double sessionAffinityTtl,

            string steeringPolicy,

            double ttl,

            string zoneId)
        {
            AdaptiveRouting = adaptiveRouting;
            CountryPools = countryPools;
            CreatedOn = createdOn;
            DefaultPools = defaultPools;
            Description = description;
            Enabled = enabled;
            FallbackPool = fallbackPool;
            Id = id;
            LoadBalancerId = loadBalancerId;
            LocationStrategy = locationStrategy;
            ModifiedOn = modifiedOn;
            Name = name;
            Networks = networks;
            PopPools = popPools;
            Proxied = proxied;
            RandomSteering = randomSteering;
            RegionPools = regionPools;
            Rules = rules;
            SessionAffinity = sessionAffinity;
            SessionAffinityAttributes = sessionAffinityAttributes;
            SessionAffinityTtl = sessionAffinityTtl;
            SteeringPolicy = steeringPolicy;
            Ttl = ttl;
            ZoneId = zoneId;
        }
    }
}
