// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleStreamWatermark = new Cloudflare.StreamWatermark("example_stream_watermark", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         File = "@/Users/rchen/Downloads/watermark.png",
    ///         Name = "Marketing Videos",
    ///         Opacity = 0.75,
    ///         Padding = 0.1,
    ///         Position = "center",
    ///         Scale = 0.1,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/streamWatermark:StreamWatermark")]
    public partial class StreamWatermark : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The date and a time a watermark profile was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
        /// </summary>
        [Output("downloadedFrom")]
        public Output<string> DownloadedFrom { get; private set; } = null!;

        /// <summary>
        /// The image file to upload.
        /// </summary>
        [Output("file")]
        public Output<string> File { get; private set; } = null!;

        /// <summary>
        /// The height of the image in pixels.
        /// </summary>
        [Output("height")]
        public Output<int> Height { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Output("identifier")]
        public Output<string?> Identifier { get; private set; } = null!;

        /// <summary>
        /// A short description of the watermark profile.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
        /// </summary>
        [Output("opacity")]
        public Output<double> Opacity { get; private set; } = null!;

        /// <summary>
        /// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
        /// </summary>
        [Output("padding")]
        public Output<double> Padding { get; private set; } = null!;

        /// <summary>
        /// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
        /// </summary>
        [Output("position")]
        public Output<string> Position { get; private set; } = null!;

        /// <summary>
        /// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
        /// </summary>
        [Output("scale")]
        public Output<double> Scale { get; private set; } = null!;

        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The width of the image in pixels.
        /// </summary>
        [Output("width")]
        public Output<int> Width { get; private set; } = null!;


        /// <summary>
        /// Create a StreamWatermark resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamWatermark(string name, StreamWatermarkArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamWatermark:StreamWatermark", name, args ?? new StreamWatermarkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamWatermark(string name, Input<string> id, StreamWatermarkState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamWatermark:StreamWatermark", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamWatermark resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamWatermark Get(string name, Input<string> id, StreamWatermarkState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamWatermark(name, id, state, options);
        }
    }

    public sealed class StreamWatermarkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The image file to upload.
        /// </summary>
        [Input("file", required: true)]
        public Input<string> File { get; set; } = null!;

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// A short description of the watermark profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
        /// </summary>
        [Input("opacity")]
        public Input<double>? Opacity { get; set; }

        /// <summary>
        /// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
        /// </summary>
        [Input("padding")]
        public Input<double>? Padding { get; set; }

        /// <summary>
        /// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
        /// </summary>
        [Input("position")]
        public Input<string>? Position { get; set; }

        /// <summary>
        /// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
        /// </summary>
        [Input("scale")]
        public Input<double>? Scale { get; set; }

        public StreamWatermarkArgs()
        {
        }
        public static new StreamWatermarkArgs Empty => new StreamWatermarkArgs();
    }

    public sealed class StreamWatermarkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The date and a time a watermark profile was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
        /// </summary>
        [Input("downloadedFrom")]
        public Input<string>? DownloadedFrom { get; set; }

        /// <summary>
        /// The image file to upload.
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        /// <summary>
        /// The height of the image in pixels.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// A short description of the watermark profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
        /// </summary>
        [Input("opacity")]
        public Input<double>? Opacity { get; set; }

        /// <summary>
        /// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
        /// </summary>
        [Input("padding")]
        public Input<double>? Padding { get; set; }

        /// <summary>
        /// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
        /// </summary>
        [Input("position")]
        public Input<string>? Position { get; set; }

        /// <summary>
        /// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
        /// </summary>
        [Input("scale")]
        public Input<double>? Scale { get; set; }

        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The width of the image in pixels.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public StreamWatermarkState()
        {
        }
        public static new StreamWatermarkState Empty => new StreamWatermarkState();
    }
}
