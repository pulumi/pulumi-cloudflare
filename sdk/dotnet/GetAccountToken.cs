// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountToken
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountToken = Cloudflare.GetAccountToken.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         TokenId = "ed17574386854bf78a67040be0a770b0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountTokenResult> InvokeAsync(GetAccountTokenArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountTokenResult>("cloudflare:index/getAccountToken:getAccountToken", args ?? new GetAccountTokenArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountToken = Cloudflare.GetAccountToken.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         TokenId = "ed17574386854bf78a67040be0a770b0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountTokenResult> Invoke(GetAccountTokenInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountTokenResult>("cloudflare:index/getAccountToken:getAccountToken", args ?? new GetAccountTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountToken = Cloudflare.GetAccountToken.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         TokenId = "ed17574386854bf78a67040be0a770b0",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountTokenResult> Invoke(GetAccountTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountTokenResult>("cloudflare:index/getAccountToken:getAccountToken", args ?? new GetAccountTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetAccountTokenFilterArgs? Filter { get; set; }

        /// <summary>
        /// Token identifier tag.
        /// </summary>
        [Input("tokenId")]
        public string? TokenId { get; set; }

        public GetAccountTokenArgs()
        {
        }
        public static new GetAccountTokenArgs Empty => new GetAccountTokenArgs();
    }

    public sealed class GetAccountTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetAccountTokenFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Token identifier tag.
        /// </summary>
        [Input("tokenId")]
        public Input<string>? TokenId { get; set; }

        public GetAccountTokenInvokeArgs()
        {
        }
        public static new GetAccountTokenInvokeArgs Empty => new GetAccountTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountTokenResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        public readonly Outputs.GetAccountTokenConditionResult Condition;
        /// <summary>
        /// The expiration time on or after which the JWT MUST NOT be accepted for processing.
        /// </summary>
        public readonly string ExpiresOn;
        public readonly Outputs.GetAccountTokenFilterResult? Filter;
        /// <summary>
        /// Token identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The time on which the token was created.
        /// </summary>
        public readonly string IssuedOn;
        /// <summary>
        /// Last time the token was used.
        /// </summary>
        public readonly string LastUsedOn;
        /// <summary>
        /// Last time the token was modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// Token name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The time before which the token MUST NOT be accepted for processing.
        /// </summary>
        public readonly string NotBefore;
        /// <summary>
        /// List of access policies assigned to the token.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountTokenPolicyResult> Policies;
        /// <summary>
        /// Status of the token.
        /// Available values: "active", "disabled", "expired".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Token identifier tag.
        /// </summary>
        public readonly string? TokenId;

        [OutputConstructor]
        private GetAccountTokenResult(
            string accountId,

            Outputs.GetAccountTokenConditionResult condition,

            string expiresOn,

            Outputs.GetAccountTokenFilterResult? filter,

            string id,

            string issuedOn,

            string lastUsedOn,

            string modifiedOn,

            string name,

            string notBefore,

            ImmutableArray<Outputs.GetAccountTokenPolicyResult> policies,

            string status,

            string? tokenId)
        {
            AccountId = accountId;
            Condition = condition;
            ExpiresOn = expiresOn;
            Filter = filter;
            Id = id;
            IssuedOn = issuedOn;
            LastUsedOn = lastUsedOn;
            ModifiedOn = modifiedOn;
            Name = name;
            NotBefore = notBefore;
            Policies = policies;
            Status = status;
            TokenId = tokenId;
        }
    }
}
