// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustNetworkHostnameRoutes
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustNetworkHostnameRoutes = Cloudflare.GetZeroTrustNetworkHostnameRoutes.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         Id = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         Comment = "example%20comment",
        ///         ExistedAt = "2019-10-12T07%3A20%3A50.52Z",
        ///         Hostname = "office-1.local",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustNetworkHostnameRoutesResult> InvokeAsync(GetZeroTrustNetworkHostnameRoutesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustNetworkHostnameRoutesResult>("cloudflare:index/getZeroTrustNetworkHostnameRoutes:getZeroTrustNetworkHostnameRoutes", args ?? new GetZeroTrustNetworkHostnameRoutesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustNetworkHostnameRoutes = Cloudflare.GetZeroTrustNetworkHostnameRoutes.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         Id = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         Comment = "example%20comment",
        ///         ExistedAt = "2019-10-12T07%3A20%3A50.52Z",
        ///         Hostname = "office-1.local",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustNetworkHostnameRoutesResult> Invoke(GetZeroTrustNetworkHostnameRoutesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustNetworkHostnameRoutesResult>("cloudflare:index/getZeroTrustNetworkHostnameRoutes:getZeroTrustNetworkHostnameRoutes", args ?? new GetZeroTrustNetworkHostnameRoutesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustNetworkHostnameRoutes = Cloudflare.GetZeroTrustNetworkHostnameRoutes.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         Id = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         Comment = "example%20comment",
        ///         ExistedAt = "2019-10-12T07%3A20%3A50.52Z",
        ///         Hostname = "office-1.local",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustNetworkHostnameRoutesResult> Invoke(GetZeroTrustNetworkHostnameRoutesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustNetworkHostnameRoutesResult>("cloudflare:index/getZeroTrustNetworkHostnameRoutes:getZeroTrustNetworkHostnameRoutes", args ?? new GetZeroTrustNetworkHostnameRoutesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustNetworkHostnameRoutesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// If set, only list hostname routes with the given comment.
        /// </summary>
        [Input("comment")]
        public string? Comment { get; set; }

        /// <summary>
        /// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
        /// </summary>
        [Input("existedAt")]
        public string? ExistedAt { get; set; }

        /// <summary>
        /// If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// The hostname route ID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// If `True`, only return deleted hostname routes. If `False`, exclude deleted hostname routes.
        /// </summary>
        [Input("isDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// If set, only list hostname routes that point to a specific tunnel.
        /// </summary>
        [Input("tunnelId")]
        public string? TunnelId { get; set; }

        public GetZeroTrustNetworkHostnameRoutesArgs()
        {
        }
        public static new GetZeroTrustNetworkHostnameRoutesArgs Empty => new GetZeroTrustNetworkHostnameRoutesArgs();
    }

    public sealed class GetZeroTrustNetworkHostnameRoutesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// If set, only list hostname routes with the given comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
        /// </summary>
        [Input("existedAt")]
        public Input<string>? ExistedAt { get; set; }

        /// <summary>
        /// If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// The hostname route ID.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// If `True`, only return deleted hostname routes. If `False`, exclude deleted hostname routes.
        /// </summary>
        [Input("isDeleted")]
        public Input<bool>? IsDeleted { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// If set, only list hostname routes that point to a specific tunnel.
        /// </summary>
        [Input("tunnelId")]
        public Input<string>? TunnelId { get; set; }

        public GetZeroTrustNetworkHostnameRoutesInvokeArgs()
        {
        }
        public static new GetZeroTrustNetworkHostnameRoutesInvokeArgs Empty => new GetZeroTrustNetworkHostnameRoutesInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustNetworkHostnameRoutesResult
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// If set, only list hostname routes with the given comment.
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
        /// </summary>
        public readonly string? ExistedAt;
        /// <summary>
        /// If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// The hostname route ID.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// If `True`, only return deleted hostname routes. If `False`, exclude deleted hostname routes.
        /// </summary>
        public readonly bool IsDeleted;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustNetworkHostnameRoutesResultResult> Results;
        /// <summary>
        /// If set, only list hostname routes that point to a specific tunnel.
        /// </summary>
        public readonly string? TunnelId;

        [OutputConstructor]
        private GetZeroTrustNetworkHostnameRoutesResult(
            string accountId,

            string? comment,

            string? existedAt,

            string? hostname,

            string? id,

            bool isDeleted,

            int? maxItems,

            ImmutableArray<Outputs.GetZeroTrustNetworkHostnameRoutesResultResult> results,

            string? tunnelId)
        {
            AccountId = accountId;
            Comment = comment;
            ExistedAt = existedAt;
            Hostname = hostname;
            Id = id;
            IsDeleted = isDeleted;
            MaxItems = maxItems;
            Results = results;
            TunnelId = tunnelId;
        }
    }
}
