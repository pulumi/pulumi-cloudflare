// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleStreamKey = new Cloudflare.StreamKey("example_stream_key", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/streamKey:StreamKey example '&lt;account_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/streamKey:StreamKey")]
    public partial class StreamKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The date and time a signing key was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The signing key in JWK format.
        /// </summary>
        [Output("jwk")]
        public Output<string> Jwk { get; private set; } = null!;

        /// <summary>
        /// The signing key in PEM format.
        /// </summary>
        [Output("pem")]
        public Output<string> Pem { get; private set; } = null!;


        /// <summary>
        /// Create a StreamKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamKey(string name, StreamKeyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamKey:StreamKey", name, args ?? new StreamKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamKey(string name, Input<string> id, StreamKeyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamKey:StreamKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "jwk",
                    "pem",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamKey Get(string name, Input<string> id, StreamKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamKey(name, id, state, options);
        }
    }

    public sealed class StreamKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        public StreamKeyArgs()
        {
        }
        public static new StreamKeyArgs Empty => new StreamKeyArgs();
    }

    public sealed class StreamKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The date and time a signing key was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        [Input("jwk")]
        private Input<string>? _jwk;

        /// <summary>
        /// The signing key in JWK format.
        /// </summary>
        public Input<string>? Jwk
        {
            get => _jwk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _jwk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pem")]
        private Input<string>? _pem;

        /// <summary>
        /// The signing key in PEM format.
        /// </summary>
        public Input<string>? Pem
        {
            get => _pem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public StreamKeyState()
        {
        }
        public static new StreamKeyState Empty => new StreamKeyState();
    }
}
