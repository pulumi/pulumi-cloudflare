// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleRegistrarDomain = new Cloudflare.RegistrarDomain("example_registrar_domain", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         DomainName = "cloudflare.com",
    ///         AutoRenew = true,
    ///         Locked = false,
    ///         Privacy = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/registrarDomain:RegistrarDomain")]
    public partial class RegistrarDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// Domain name.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Shows whether a registrar lock is in place for a domain.
        /// </summary>
        [Output("locked")]
        public Output<bool?> Locked { get; private set; } = null!;

        /// <summary>
        /// Privacy option controls redacting WHOIS information.
        /// </summary>
        [Output("privacy")]
        public Output<bool?> Privacy { get; private set; } = null!;


        /// <summary>
        /// Create a RegistrarDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistrarDomain(string name, RegistrarDomainArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/registrarDomain:RegistrarDomain", name, args ?? new RegistrarDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistrarDomain(string name, Input<string> id, RegistrarDomainState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/registrarDomain:RegistrarDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistrarDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistrarDomain Get(string name, Input<string> id, RegistrarDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistrarDomain(name, id, state, options);
        }
    }

    public sealed class RegistrarDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Domain name.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Shows whether a registrar lock is in place for a domain.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Privacy option controls redacting WHOIS information.
        /// </summary>
        [Input("privacy")]
        public Input<bool>? Privacy { get; set; }

        public RegistrarDomainArgs()
        {
        }
        public static new RegistrarDomainArgs Empty => new RegistrarDomainArgs();
    }

    public sealed class RegistrarDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Domain name.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Shows whether a registrar lock is in place for a domain.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Privacy option controls redacting WHOIS information.
        /// </summary>
        [Input("privacy")]
        public Input<bool>? Privacy { get; set; }

        public RegistrarDomainState()
        {
        }
        public static new RegistrarDomainState Empty => new RegistrarDomainState();
    }
}
