// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Access Group resource. Access Groups are used
    /// in conjunction with Access Policies to restrict access to a
    /// particular resource based on group membership.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Allowing access to `test@example.com` email address only
    ///         var testGroupAccessGroup = new Cloudflare.AccessGroup("testGroupAccessGroup", new Cloudflare.AccessGroupArgs
    ///         {
    ///             AccountId = "975ecf5a45e3bcb680dba0722a420ad9",
    ///             Name = "staging group",
    ///             Includes = 
    ///             {
    ///                 new Cloudflare.Inputs.AccessGroupIncludeArgs
    ///                 {
    ///                     Emails = 
    ///                     {
    ///                         "test@example.com",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///         // Allowing `test@example.com` to access but only when coming from a
    ///         // specific IP.
    ///         var testGroupIndex_accessGroupAccessGroup = new Cloudflare.AccessGroup("testGroupIndex/accessGroupAccessGroup", new Cloudflare.AccessGroupArgs
    ///         {
    ///             AccountId = "975ecf5a45e3bcb680dba0722a420ad9",
    ///             Name = "staging group",
    ///             Includes = 
    ///             {
    ///                 new Cloudflare.Inputs.AccessGroupIncludeArgs
    ///                 {
    ///                     Emails = 
    ///                     {
    ///                         "test@example.com",
    ///                     },
    ///                 },
    ///             },
    ///             Requires = 
    ///             {
    ///                 { "ips", 
    ///                 {
    ///                     @var.Office_ip,
    ///                 } },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Conditions
    /// 
    /// `require`, `exclude` and `include` arguments share the available
    /// conditions which can be applied. The conditions are:
    /// 
    /// * `ip` - (Optional) A list of IP addresses or ranges. Example:
    /// `ip = ["1.2.3.4", "10.0.0.0/2"]`
    /// * `email` - (Optional) A list of email addresses. Example:
    /// `email = ["test@example.com"]`
    /// * `email_domain` - (Optional) A list of email domains. Example:
    /// `email_domain = ["example.com"]`
    /// * `service_token` - (Optional) A list of service token ids. Example:
    /// `service_token = [cloudflare_access_service_token.demo.id]`
    /// * `any_valid_service_token` - (Optional) Boolean indicating if allow
    /// all tokens to be granted. Example: `any_valid_service_token = true`
    /// * `group` - (Optional) A list of access group ids. Example:
    /// `group = [cloudflare_access_group.demo.id]`
    /// * `everyone` - (Optional) Boolean indicating permitting access for all
    /// requests. Example: `everyone = true`
    /// * `certificate` - (Optional) Whether to use mTLS certificate authentication.
    /// * `common_name` - (Optional) Use a certificate common name to authenticate with.
    /// * `auth_method` - (Optional) A string identifying the authentication
    /// method code. The list of codes are listed here: https://tools.ietf.org/html/rfc8176#section-2.
    /// Custom values are also supported. Example: `auth_method = ["swk"]`
    /// * `geo` - (Optional) A list of country codes. Example: `geo = ["US"]`
    /// * `login_method` - (Optional) A list of identity provider ids. Example: `login_method = [cloudflare_access_identity_provider.my_idp.id]`
    /// * `device_posture` - (Optional) A list of device_posture integration_uids. Example: `device_posture = [cloudflare_device_posture_rule.my_posture_rule.id]`
    /// * `gsuite` - (Optional) Use GSuite as the authentication mechanism. Example:
    /// * `github` - (Optional) Use a GitHub organization as the `include` condition. Example:
    /// * `azure` - (Optional) Use Azure AD as the `include` condition. Example:
    /// * `okta` - (Optional) Use Okta as the `include` condition. Example:
    /// * `saml` - (Optional) Use an external SAML setup as the `include` condition.
    /// Example:
    ///   * `external_evaluation` - (Optional) Pass a user's identity to an external URL as the `include` condition.
    ///     Example:
    /// 
    /// ## Import
    /// 
    /// Access Groups can be imported using a composite ID formed of account ID and group ID.
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/accessGroup:AccessGroup staging 975ecf5a45e3bcb680dba0722a420ad9/67ea780ce4982c1cfbe6b7293afc765d
    /// ```
    /// 
    ///  where * `975ecf5a45e3bcb680dba0722a420ad9` - Account ID * `67ea780ce4982c1cfbe6b7293afc765d` - Access Group ID
    /// </summary>
    [CloudflareResourceType("cloudflare:index/accessGroup:AccessGroup")]
    public partial class AccessGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account the group is associated with. Conflicts with `zone_id`.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<Outputs.AccessGroupExclude>> Excludes { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("includes")]
        public Output<ImmutableArray<Outputs.AccessGroupInclude>> Includes { get; private set; } = null!;

        /// <summary>
        /// Friendly name of the Access Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        [Output("requires")]
        public Output<ImmutableArray<Outputs.AccessGroupRequire>> Requires { get; private set; } = null!;

        /// <summary>
        /// The ID of the zone the group is associated with. Conflicts with `account_id`.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessGroup(string name, AccessGroupArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessGroup:AccessGroup", name, args ?? new AccessGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessGroup(string name, Input<string> id, AccessGroupState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessGroup:AccessGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessGroup Get(string name, Input<string> id, AccessGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessGroup(name, id, state, options);
        }
    }

    public sealed class AccessGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account the group is associated with. Conflicts with `zone_id`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("excludes")]
        private InputList<Inputs.AccessGroupExcludeArgs>? _excludes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupExcludeArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessGroupExcludeArgs>());
            set => _excludes = value;
        }

        [Input("includes", required: true)]
        private InputList<Inputs.AccessGroupIncludeArgs>? _includes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupIncludeArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessGroupIncludeArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Friendly name of the Access Group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requires")]
        private InputList<Inputs.AccessGroupRequireArgs>? _requires;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupRequireArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessGroupRequireArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The ID of the zone the group is associated with. Conflicts with `account_id`.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessGroupArgs()
        {
        }
    }

    public sealed class AccessGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account the group is associated with. Conflicts with `zone_id`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("excludes")]
        private InputList<Inputs.AccessGroupExcludeGetArgs>? _excludes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupExcludeGetArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessGroupExcludeGetArgs>());
            set => _excludes = value;
        }

        [Input("includes")]
        private InputList<Inputs.AccessGroupIncludeGetArgs>? _includes;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupIncludeGetArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessGroupIncludeGetArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Friendly name of the Access Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("requires")]
        private InputList<Inputs.AccessGroupRequireGetArgs>? _requires;

        /// <summary>
        /// A series of access conditions, see below for
        /// full list.
        /// </summary>
        public InputList<Inputs.AccessGroupRequireGetArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessGroupRequireGetArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The ID of the zone the group is associated with. Conflicts with `account_id`.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessGroupState()
        {
        }
    }
}
