// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustAccessGroup = new Cloudflare.ZeroTrustAccessGroup("example_zero_trust_access_group", new()
    ///     {
    ///         Includes = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustAccessGroupIncludeArgs
    ///             {
    ///                 Group = new Cloudflare.Inputs.ZeroTrustAccessGroupIncludeGroupArgs
    ///                 {
    ///                     Id = "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
    ///                 },
    ///             },
    ///         },
    ///         Name = "Allow devs",
    ///         ZoneId = "zone_id",
    ///         Excludes = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustAccessGroupExcludeArgs
    ///             {
    ///                 Group = new Cloudflare.Inputs.ZeroTrustAccessGroupExcludeGroupArgs
    ///                 {
    ///                     Id = "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
    ///                 },
    ///             },
    ///         },
    ///         IsDefault = true,
    ///         Requires = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustAccessGroupRequireArgs
    ///             {
    ///                 Group = new Cloudflare.Inputs.ZeroTrustAccessGroupRequireGroupArgs
    ///                 {
    ///                     Id = "aa0a4aab-672b-4bdb-bc33-a59f1130a11f",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/accessGroup:AccessGroup example '&lt;{accounts|zones}/{account_id|zone_id}&gt;/&lt;group_id&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/accessgroup.AccessGroup has been deprecated in favor of cloudflare.index/zerotrustaccessgroup.ZeroTrustAccessGroup")]
    [CloudflareResourceType("cloudflare:index/accessGroup:AccessGroup")]
    public partial class AccessGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<Outputs.AccessGroupExclude>> Excludes { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        [Output("includes")]
        public Output<ImmutableArray<Outputs.AccessGroupInclude>> Includes { get; private set; } = null!;

        /// <summary>
        /// Whether this is the default group
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// The name of the Access group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
        /// </summary>
        [Output("requires")]
        public Output<ImmutableArray<Outputs.AccessGroupRequire>> Requires { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessGroup(string name, AccessGroupArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessGroup:AccessGroup", name, args ?? new AccessGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessGroup(string name, Input<string> id, AccessGroupState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessGroup:AccessGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessGroup:AccessGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessGroup Get(string name, Input<string> id, AccessGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessGroup(name, id, state, options);
        }
    }

    public sealed class AccessGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("excludes")]
        private InputList<Inputs.AccessGroupExcludeArgs>? _excludes;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        public InputList<Inputs.AccessGroupExcludeArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessGroupExcludeArgs>());
            set => _excludes = value;
        }

        [Input("includes", required: true)]
        private InputList<Inputs.AccessGroupIncludeArgs>? _includes;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        public InputList<Inputs.AccessGroupIncludeArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessGroupIncludeArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Whether this is the default group
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// The name of the Access group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requires")]
        private InputList<Inputs.AccessGroupRequireArgs>? _requires;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
        /// </summary>
        public InputList<Inputs.AccessGroupRequireArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessGroupRequireArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessGroupArgs()
        {
        }
        public static new AccessGroupArgs Empty => new AccessGroupArgs();
    }

    public sealed class AccessGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("excludes")]
        private InputList<Inputs.AccessGroupExcludeGetArgs>? _excludes;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        public InputList<Inputs.AccessGroupExcludeGetArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.AccessGroupExcludeGetArgs>());
            set => _excludes = value;
        }

        [Input("includes")]
        private InputList<Inputs.AccessGroupIncludeGetArgs>? _includes;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        public InputList<Inputs.AccessGroupIncludeGetArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.AccessGroupIncludeGetArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Whether this is the default group
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// The name of the Access group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("requires")]
        private InputList<Inputs.AccessGroupRequireGetArgs>? _requires;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
        /// </summary>
        public InputList<Inputs.AccessGroupRequireGetArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.AccessGroupRequireGetArgs>());
            set => _requires = value;
        }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessGroupState()
        {
        }
        public static new AccessGroupState Empty => new AccessGroupState();
    }
}
