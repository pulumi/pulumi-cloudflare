// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustOrganization:ZeroTrustOrganization")]
    public partial class ZeroTrustOrganization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Output("allowAuthenticateViaWarp")]
        public Output<bool?> AllowAuthenticateViaWarp { get; private set; } = null!;

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Output("authDomain")]
        public Output<string?> AuthDomain { get; private set; } = null!;

        /// <summary>
        /// When set to `true`, users skip the identity provider selection step during login.
        /// </summary>
        [Output("autoRedirectToIdentity")]
        public Output<bool> AutoRedirectToIdentity { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("customPages")]
        public Output<Outputs.ZeroTrustOrganizationCustomPages?> CustomPages { get; private set; } = null!;

        [Output("isUiReadOnly")]
        public Output<bool?> IsUiReadOnly { get; private set; } = null!;

        [Output("loginDesign")]
        public Output<Outputs.ZeroTrustOrganizationLoginDesign?> LoginDesign { get; private set; } = null!;

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Output("sessionDuration")]
        public Output<string?> SessionDuration { get; private set; } = null!;

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Output("uiReadOnlyToggleReason")]
        public Output<string?> UiReadOnlyToggleReason { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        /// </summary>
        [Output("userSeatExpirationInactiveTime")]
        public Output<string?> UserSeatExpirationInactiveTime { get; private set; } = null!;

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Output("warpAuthSessionDuration")]
        public Output<string?> WarpAuthSessionDuration { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustOrganization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustOrganization(string name, ZeroTrustOrganizationArgs? args = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustOrganization:ZeroTrustOrganization", name, args ?? new ZeroTrustOrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustOrganization(string name, Input<string> id, ZeroTrustOrganizationState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustOrganization:ZeroTrustOrganization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessOrganization:AccessOrganization" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustOrganization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustOrganization Get(string name, Input<string> id, ZeroTrustOrganizationState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustOrganization(name, id, state, options);
        }
    }

    public sealed class ZeroTrustOrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Input("allowAuthenticateViaWarp")]
        public Input<bool>? AllowAuthenticateViaWarp { get; set; }

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Input("authDomain")]
        public Input<string>? AuthDomain { get; set; }

        /// <summary>
        /// When set to `true`, users skip the identity provider selection step during login.
        /// </summary>
        [Input("autoRedirectToIdentity")]
        public Input<bool>? AutoRedirectToIdentity { get; set; }

        [Input("customPages")]
        public Input<Inputs.ZeroTrustOrganizationCustomPagesArgs>? CustomPages { get; set; }

        [Input("isUiReadOnly")]
        public Input<bool>? IsUiReadOnly { get; set; }

        [Input("loginDesign")]
        public Input<Inputs.ZeroTrustOrganizationLoginDesignArgs>? LoginDesign { get; set; }

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Input("uiReadOnlyToggleReason")]
        public Input<string>? UiReadOnlyToggleReason { get; set; }

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        /// </summary>
        [Input("userSeatExpirationInactiveTime")]
        public Input<string>? UserSeatExpirationInactiveTime { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Input("warpAuthSessionDuration")]
        public Input<string>? WarpAuthSessionDuration { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustOrganizationArgs()
        {
        }
        public static new ZeroTrustOrganizationArgs Empty => new ZeroTrustOrganizationArgs();
    }

    public sealed class ZeroTrustOrganizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Input("allowAuthenticateViaWarp")]
        public Input<bool>? AllowAuthenticateViaWarp { get; set; }

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Input("authDomain")]
        public Input<string>? AuthDomain { get; set; }

        /// <summary>
        /// When set to `true`, users skip the identity provider selection step during login.
        /// </summary>
        [Input("autoRedirectToIdentity")]
        public Input<bool>? AutoRedirectToIdentity { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("customPages")]
        public Input<Inputs.ZeroTrustOrganizationCustomPagesGetArgs>? CustomPages { get; set; }

        [Input("isUiReadOnly")]
        public Input<bool>? IsUiReadOnly { get; set; }

        [Input("loginDesign")]
        public Input<Inputs.ZeroTrustOrganizationLoginDesignGetArgs>? LoginDesign { get; set; }

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Input("uiReadOnlyToggleReason")]
        public Input<string>? UiReadOnlyToggleReason { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        /// </summary>
        [Input("userSeatExpirationInactiveTime")]
        public Input<string>? UserSeatExpirationInactiveTime { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Input("warpAuthSessionDuration")]
        public Input<string>? WarpAuthSessionDuration { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustOrganizationState()
        {
        }
        public static new ZeroTrustOrganizationState Empty => new ZeroTrustOrganizationState();
    }
}
