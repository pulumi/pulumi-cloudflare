// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWeb3Hostname = new Cloudflare.Web3Hostname("example_web3_hostname", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Name = "gateway.example.com",
    ///         Target = "ethereum",
    ///         Description = "This is my IPFS gateway.",
    ///         Dnslink = "/ipns/onboarding.ipfs.cloudflare.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/web3Hostname:Web3Hostname example '&lt;zone_id&gt;/&lt;identifier&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/web3Hostname:Web3Hostname")]
    public partial class Web3Hostname : global::Pulumi.CustomResource
    {
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// An optional description of the hostname.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// DNSLink value used if the target is ipfs.
        /// </summary>
        [Output("dnslink")]
        public Output<string?> Dnslink { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The hostname that will point to the target gateway via CNAME.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Status of the hostname's activation.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Target gateway of the hostname.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Web3Hostname resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Web3Hostname(string name, Web3HostnameArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/web3Hostname:Web3Hostname", name, args ?? new Web3HostnameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Web3Hostname(string name, Input<string> id, Web3HostnameState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/web3Hostname:Web3Hostname", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Web3Hostname resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Web3Hostname Get(string name, Input<string> id, Web3HostnameState? state = null, CustomResourceOptions? options = null)
        {
            return new Web3Hostname(name, id, state, options);
        }
    }

    public sealed class Web3HostnameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional description of the hostname.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DNSLink value used if the target is ipfs.
        /// </summary>
        [Input("dnslink")]
        public Input<string>? Dnslink { get; set; }

        /// <summary>
        /// The hostname that will point to the target gateway via CNAME.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Target gateway of the hostname.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public Web3HostnameArgs()
        {
        }
        public static new Web3HostnameArgs Empty => new Web3HostnameArgs();
    }

    public sealed class Web3HostnameState : global::Pulumi.ResourceArgs
    {
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// An optional description of the hostname.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DNSLink value used if the target is ipfs.
        /// </summary>
        [Input("dnslink")]
        public Input<string>? Dnslink { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The hostname that will point to the target gateway via CNAME.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Status of the hostname's activation.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Target gateway of the hostname.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public Web3HostnameState()
        {
        }
        public static new Web3HostnameState Empty => new Web3HostnameState();
    }
}
