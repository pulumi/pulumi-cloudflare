// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustTunnelCloudflareds
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelCloudflareds = Cloudflare.GetZeroTrustTunnelCloudflareds.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         ExcludePrefix = "vpc1-",
        ///         ExistedAt = "2019-10-12T07:20:50.52Z",
        ///         IncludePrefix = "vpc1-",
        ///         IsDeleted = true,
        ///         Name = "blog",
        ///         Status = "inactive",
        ///         Uuid = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         WasActiveAt = "2009-11-10T23:00:00Z",
        ///         WasInactiveAt = "2009-11-10T23:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustTunnelCloudflaredsResult> InvokeAsync(GetZeroTrustTunnelCloudflaredsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustTunnelCloudflaredsResult>("cloudflare:index/getZeroTrustTunnelCloudflareds:getZeroTrustTunnelCloudflareds", args ?? new GetZeroTrustTunnelCloudflaredsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelCloudflareds = Cloudflare.GetZeroTrustTunnelCloudflareds.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         ExcludePrefix = "vpc1-",
        ///         ExistedAt = "2019-10-12T07:20:50.52Z",
        ///         IncludePrefix = "vpc1-",
        ///         IsDeleted = true,
        ///         Name = "blog",
        ///         Status = "inactive",
        ///         Uuid = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         WasActiveAt = "2009-11-10T23:00:00Z",
        ///         WasInactiveAt = "2009-11-10T23:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustTunnelCloudflaredsResult> Invoke(GetZeroTrustTunnelCloudflaredsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustTunnelCloudflaredsResult>("cloudflare:index/getZeroTrustTunnelCloudflareds:getZeroTrustTunnelCloudflareds", args ?? new GetZeroTrustTunnelCloudflaredsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelCloudflareds = Cloudflare.GetZeroTrustTunnelCloudflareds.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         ExcludePrefix = "vpc1-",
        ///         ExistedAt = "2019-10-12T07:20:50.52Z",
        ///         IncludePrefix = "vpc1-",
        ///         IsDeleted = true,
        ///         Name = "blog",
        ///         Status = "inactive",
        ///         Uuid = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///         WasActiveAt = "2009-11-10T23:00:00Z",
        ///         WasInactiveAt = "2009-11-10T23:00:00Z",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustTunnelCloudflaredsResult> Invoke(GetZeroTrustTunnelCloudflaredsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustTunnelCloudflaredsResult>("cloudflare:index/getZeroTrustTunnelCloudflareds:getZeroTrustTunnelCloudflareds", args ?? new GetZeroTrustTunnelCloudflaredsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustTunnelCloudflaredsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("excludePrefix")]
        public string? ExcludePrefix { get; set; }

        /// <summary>
        /// If provided, include only tunnels that were created (and not deleted) before this time.
        /// </summary>
        [Input("existedAt")]
        public string? ExistedAt { get; set; }

        [Input("includePrefix")]
        public string? IncludePrefix { get; set; }

        /// <summary>
        /// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
        /// </summary>
        [Input("isDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// A user-friendly name for a tunnel.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("uuid")]
        public string? Uuid { get; set; }

        [Input("wasActiveAt")]
        public string? WasActiveAt { get; set; }

        [Input("wasInactiveAt")]
        public string? WasInactiveAt { get; set; }

        public GetZeroTrustTunnelCloudflaredsArgs()
        {
        }
        public static new GetZeroTrustTunnelCloudflaredsArgs Empty => new GetZeroTrustTunnelCloudflaredsArgs();
    }

    public sealed class GetZeroTrustTunnelCloudflaredsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("excludePrefix")]
        public Input<string>? ExcludePrefix { get; set; }

        /// <summary>
        /// If provided, include only tunnels that were created (and not deleted) before this time.
        /// </summary>
        [Input("existedAt")]
        public Input<string>? ExistedAt { get; set; }

        [Input("includePrefix")]
        public Input<string>? IncludePrefix { get; set; }

        /// <summary>
        /// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
        /// </summary>
        [Input("isDeleted")]
        public Input<bool>? IsDeleted { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// A user-friendly name for a tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        [Input("wasActiveAt")]
        public Input<string>? WasActiveAt { get; set; }

        [Input("wasInactiveAt")]
        public Input<string>? WasInactiveAt { get; set; }

        public GetZeroTrustTunnelCloudflaredsInvokeArgs()
        {
        }
        public static new GetZeroTrustTunnelCloudflaredsInvokeArgs Empty => new GetZeroTrustTunnelCloudflaredsInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustTunnelCloudflaredsResult
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        public readonly string AccountId;
        public readonly string? ExcludePrefix;
        /// <summary>
        /// If provided, include only tunnels that were created (and not deleted) before this time.
        /// </summary>
        public readonly string? ExistedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? IncludePrefix;
        /// <summary>
        /// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
        /// </summary>
        public readonly bool? IsDeleted;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// A user-friendly name for a tunnel.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustTunnelCloudflaredsResultResult> Results;
        /// <summary>
        /// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        public readonly string? Uuid;
        public readonly string? WasActiveAt;
        public readonly string? WasInactiveAt;

        [OutputConstructor]
        private GetZeroTrustTunnelCloudflaredsResult(
            string accountId,

            string? excludePrefix,

            string? existedAt,

            string id,

            string? includePrefix,

            bool? isDeleted,

            int? maxItems,

            string? name,

            ImmutableArray<Outputs.GetZeroTrustTunnelCloudflaredsResultResult> results,

            string? status,

            string? uuid,

            string? wasActiveAt,

            string? wasInactiveAt)
        {
            AccountId = accountId;
            ExcludePrefix = excludePrefix;
            ExistedAt = existedAt;
            Id = id;
            IncludePrefix = includePrefix;
            IsDeleted = isDeleted;
            MaxItems = maxItems;
            Name = name;
            Results = results;
            Status = status;
            Uuid = uuid;
            WasActiveAt = wasActiveAt;
            WasInactiveAt = wasInactiveAt;
        }
    }
}
