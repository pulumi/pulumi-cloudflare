// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustDeviceSettings = new Cloudflare.ZeroTrustDeviceSettings("example_zero_trust_device_settings", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         DisableForTime = 0,
    ///         GatewayProxyEnabled = true,
    ///         GatewayUdpProxyEnabled = true,
    ///         RootCertificateInstallationEnabled = true,
    ///         UseZtVirtualIp = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustDeviceSettings:ZeroTrustDeviceSettings")]
    public partial class ZeroTrustDeviceSettings : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
        /// </summary>
        [Output("disableForTime")]
        public Output<double?> DisableForTime { get; private set; } = null!;

        /// <summary>
        /// Enable gateway proxy filtering on TCP.
        /// </summary>
        [Output("gatewayProxyEnabled")]
        public Output<bool?> GatewayProxyEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable gateway proxy filtering on UDP.
        /// </summary>
        [Output("gatewayUdpProxyEnabled")]
        public Output<bool?> GatewayUdpProxyEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable installation of cloudflare managed root certificate.
        /// </summary>
        [Output("rootCertificateInstallationEnabled")]
        public Output<bool?> RootCertificateInstallationEnabled { get; private set; } = null!;

        /// <summary>
        /// Enable using CGNAT virtual IPv4.
        /// </summary>
        [Output("useZtVirtualIp")]
        public Output<bool?> UseZtVirtualIp { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustDeviceSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustDeviceSettings(string name, ZeroTrustDeviceSettingsArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDeviceSettings:ZeroTrustDeviceSettings", name, args ?? new ZeroTrustDeviceSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustDeviceSettings(string name, Input<string> id, ZeroTrustDeviceSettingsState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDeviceSettings:ZeroTrustDeviceSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustDeviceSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustDeviceSettings Get(string name, Input<string> id, ZeroTrustDeviceSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustDeviceSettings(name, id, state, options);
        }
    }

    public sealed class ZeroTrustDeviceSettingsArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
        /// </summary>
        [Input("disableForTime")]
        public Input<double>? DisableForTime { get; set; }

        /// <summary>
        /// Enable gateway proxy filtering on TCP.
        /// </summary>
        [Input("gatewayProxyEnabled")]
        public Input<bool>? GatewayProxyEnabled { get; set; }

        /// <summary>
        /// Enable gateway proxy filtering on UDP.
        /// </summary>
        [Input("gatewayUdpProxyEnabled")]
        public Input<bool>? GatewayUdpProxyEnabled { get; set; }

        /// <summary>
        /// Enable installation of cloudflare managed root certificate.
        /// </summary>
        [Input("rootCertificateInstallationEnabled")]
        public Input<bool>? RootCertificateInstallationEnabled { get; set; }

        /// <summary>
        /// Enable using CGNAT virtual IPv4.
        /// </summary>
        [Input("useZtVirtualIp")]
        public Input<bool>? UseZtVirtualIp { get; set; }

        public ZeroTrustDeviceSettingsArgs()
        {
        }
        public static new ZeroTrustDeviceSettingsArgs Empty => new ZeroTrustDeviceSettingsArgs();
    }

    public sealed class ZeroTrustDeviceSettingsState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
        /// </summary>
        [Input("disableForTime")]
        public Input<double>? DisableForTime { get; set; }

        /// <summary>
        /// Enable gateway proxy filtering on TCP.
        /// </summary>
        [Input("gatewayProxyEnabled")]
        public Input<bool>? GatewayProxyEnabled { get; set; }

        /// <summary>
        /// Enable gateway proxy filtering on UDP.
        /// </summary>
        [Input("gatewayUdpProxyEnabled")]
        public Input<bool>? GatewayUdpProxyEnabled { get; set; }

        /// <summary>
        /// Enable installation of cloudflare managed root certificate.
        /// </summary>
        [Input("rootCertificateInstallationEnabled")]
        public Input<bool>? RootCertificateInstallationEnabled { get; set; }

        /// <summary>
        /// Enable using CGNAT virtual IPv4.
        /// </summary>
        [Input("useZtVirtualIp")]
        public Input<bool>? UseZtVirtualIp { get; set; }

        public ZeroTrustDeviceSettingsState()
        {
        }
        public static new ZeroTrustDeviceSettingsState Empty => new ZeroTrustDeviceSettingsState();
    }
}
