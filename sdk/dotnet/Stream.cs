// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleStream = new Cloudflare.Stream("example_stream", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/stream:Stream")]
    public partial class Stream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
        /// </summary>
        [Output("allowedOrigins")]
        public Output<ImmutableArray<string>> AllowedOrigins { get; private set; } = null!;

        /// <summary>
        /// The date and time the media item was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        [Output("creator")]
        public Output<string?> Creator { get; private set; } = null!;

        /// <summary>
        /// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
        /// </summary>
        [Output("duration")]
        public Output<double> Duration { get; private set; } = null!;

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Output("identifier")]
        public Output<string?> Identifier { get; private set; } = null!;

        [Output("input")]
        public Output<Outputs.StreamInput> Input { get; private set; } = null!;

        /// <summary>
        /// The live input ID used to upload a video with Stream Live.
        /// </summary>
        [Output("liveInput")]
        public Output<string> LiveInput { get; private set; } = null!;

        /// <summary>
        /// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
        /// </summary>
        [Output("maxDurationSeconds")]
        public Output<int?> MaxDurationSeconds { get; private set; } = null!;

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing videos.
        /// </summary>
        [Output("meta")]
        public Output<string?> Meta { get; private set; } = null!;

        /// <summary>
        /// The date and time the media item was last modified.
        /// </summary>
        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        [Output("playback")]
        public Output<Outputs.StreamPlayback> Playback { get; private set; } = null!;

        /// <summary>
        /// The video's preview page URI. This field is omitted until encoding is complete.
        /// </summary>
        [Output("preview")]
        public Output<string> Preview { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        [Output("readyToStream")]
        public Output<bool> ReadyToStream { get; private set; } = null!;

        /// <summary>
        /// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        [Output("readyToStreamAt")]
        public Output<string> ReadyToStreamAt { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
        /// </summary>
        [Output("requireSignedUrls")]
        public Output<bool> RequireSignedUrls { get; private set; } = null!;

        /// <summary>
        /// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
        /// </summary>
        [Output("scheduledDeletion")]
        public Output<string?> ScheduledDeletion { get; private set; } = null!;

        /// <summary>
        /// The size of the media item in bytes.
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
        /// </summary>
        [Output("status")]
        public Output<Outputs.StreamStatus> Status { get; private set; } = null!;

        /// <summary>
        /// The media item's thumbnail URI. This field is omitted until encoding is complete.
        /// </summary>
        [Output("thumbnail")]
        public Output<string> Thumbnail { get; private set; } = null!;

        /// <summary>
        /// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
        /// </summary>
        [Output("thumbnailTimestampPct")]
        public Output<double> ThumbnailTimestampPct { get; private set; } = null!;

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// The date and time when the video upload URL is no longer valid for direct user uploads.
        /// </summary>
        [Output("uploadExpiry")]
        public Output<string?> UploadExpiry { get; private set; } = null!;

        /// <summary>
        /// The date and time the media item was uploaded.
        /// </summary>
        [Output("uploaded")]
        public Output<string> Uploaded { get; private set; } = null!;

        [Output("watermark")]
        public Output<Outputs.StreamWatermark> Watermark { get; private set; } = null!;


        /// <summary>
        /// Create a Stream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stream(string name, StreamArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/stream:Stream", name, args ?? new StreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stream(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/stream:Stream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stream Get(string name, Input<string> id, StreamState? state = null, CustomResourceOptions? options = null)
        {
            return new Stream(name, id, state, options);
        }
    }

    public sealed class StreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("allowedOrigins")]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
        /// </summary>
        [Input("maxDurationSeconds")]
        public Input<int>? MaxDurationSeconds { get; set; }

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing videos.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
        /// </summary>
        [Input("requireSignedUrls")]
        public Input<bool>? RequireSignedUrls { get; set; }

        /// <summary>
        /// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
        /// </summary>
        [Input("scheduledDeletion")]
        public Input<string>? ScheduledDeletion { get; set; }

        /// <summary>
        /// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
        /// </summary>
        [Input("thumbnailTimestampPct")]
        public Input<double>? ThumbnailTimestampPct { get; set; }

        /// <summary>
        /// The date and time when the video upload URL is no longer valid for direct user uploads.
        /// </summary>
        [Input("uploadExpiry")]
        public Input<string>? UploadExpiry { get; set; }

        public StreamArgs()
        {
        }
        public static new StreamArgs Empty => new StreamArgs();
    }

    public sealed class StreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("allowedOrigins")]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// The date and time the media item was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
        /// </summary>
        [Input("duration")]
        public Input<double>? Duration { get; set; }

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        [Input("input")]
        public Input<Inputs.StreamInputGetArgs>? Input { get; set; }

        /// <summary>
        /// The live input ID used to upload a video with Stream Live.
        /// </summary>
        [Input("liveInput")]
        public Input<string>? LiveInput { get; set; }

        /// <summary>
        /// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
        /// </summary>
        [Input("maxDurationSeconds")]
        public Input<int>? MaxDurationSeconds { get; set; }

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing videos.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// The date and time the media item was last modified.
        /// </summary>
        [Input("modified")]
        public Input<string>? Modified { get; set; }

        [Input("playback")]
        public Input<Inputs.StreamPlaybackGetArgs>? Playback { get; set; }

        /// <summary>
        /// The video's preview page URI. This field is omitted until encoding is complete.
        /// </summary>
        [Input("preview")]
        public Input<string>? Preview { get; set; }

        /// <summary>
        /// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        [Input("readyToStream")]
        public Input<bool>? ReadyToStream { get; set; }

        /// <summary>
        /// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        [Input("readyToStreamAt")]
        public Input<string>? ReadyToStreamAt { get; set; }

        /// <summary>
        /// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
        /// </summary>
        [Input("requireSignedUrls")]
        public Input<bool>? RequireSignedUrls { get; set; }

        /// <summary>
        /// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
        /// </summary>
        [Input("scheduledDeletion")]
        public Input<string>? ScheduledDeletion { get; set; }

        /// <summary>
        /// The size of the media item in bytes.
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
        /// </summary>
        [Input("status")]
        public Input<Inputs.StreamStatusGetArgs>? Status { get; set; }

        /// <summary>
        /// The media item's thumbnail URI. This field is omitted until encoding is complete.
        /// </summary>
        [Input("thumbnail")]
        public Input<string>? Thumbnail { get; set; }

        /// <summary>
        /// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
        /// </summary>
        [Input("thumbnailTimestampPct")]
        public Input<double>? ThumbnailTimestampPct { get; set; }

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// The date and time when the video upload URL is no longer valid for direct user uploads.
        /// </summary>
        [Input("uploadExpiry")]
        public Input<string>? UploadExpiry { get; set; }

        /// <summary>
        /// The date and time the media item was uploaded.
        /// </summary>
        [Input("uploaded")]
        public Input<string>? Uploaded { get; set; }

        [Input("watermark")]
        public Input<Inputs.StreamWatermarkGetArgs>? Watermark { get; set; }

        public StreamState()
        {
        }
        public static new StreamState Empty => new StreamState();
    }
}
