// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetLoadBalancerPool
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancerPool = Cloudflare.GetLoadBalancerPool.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PoolId = "17b5962d775c646f3f9725cbc7a53df4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoadBalancerPoolResult> InvokeAsync(GetLoadBalancerPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerPoolResult>("cloudflare:index/getLoadBalancerPool:getLoadBalancerPool", args ?? new GetLoadBalancerPoolArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancerPool = Cloudflare.GetLoadBalancerPool.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PoolId = "17b5962d775c646f3f9725cbc7a53df4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerPoolResult> Invoke(GetLoadBalancerPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerPoolResult>("cloudflare:index/getLoadBalancerPool:getLoadBalancerPool", args ?? new GetLoadBalancerPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleLoadBalancerPool = Cloudflare.GetLoadBalancerPool.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PoolId = "17b5962d775c646f3f9725cbc7a53df4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerPoolResult> Invoke(GetLoadBalancerPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerPoolResult>("cloudflare:index/getLoadBalancerPool:getLoadBalancerPool", args ?? new GetLoadBalancerPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetLoadBalancerPoolFilterArgs? Filter { get; set; }

        [Input("poolId")]
        public string? PoolId { get; set; }

        public GetLoadBalancerPoolArgs()
        {
        }
        public static new GetLoadBalancerPoolArgs Empty => new GetLoadBalancerPoolArgs();
    }

    public sealed class GetLoadBalancerPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetLoadBalancerPoolFilterInputArgs>? Filter { get; set; }

        [Input("poolId")]
        public Input<string>? PoolId { get; set; }

        public GetLoadBalancerPoolInvokeArgs()
        {
        }
        public static new GetLoadBalancerPoolInvokeArgs Empty => new GetLoadBalancerPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerPoolResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// A list of regions from which to run health checks. Null means every Cloudflare data center.
        /// </summary>
        public readonly ImmutableArray<string> CheckRegions;
        public readonly string CreatedOn;
        /// <summary>
        /// A human-readable description of the pool.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
        /// </summary>
        public readonly string DisabledAt;
        /// <summary>
        /// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
        /// </summary>
        public readonly bool Enabled;
        public readonly Outputs.GetLoadBalancerPoolFilterResult? Filter;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
        /// </summary>
        public readonly double Latitude;
        /// <summary>
        /// Configures load shedding policies and percentages for the pool.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolLoadSheddingResult LoadShedding;
        /// <summary>
        /// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
        /// </summary>
        public readonly double Longitude;
        /// <summary>
        /// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
        /// </summary>
        public readonly int MinimumOrigins;
        public readonly string ModifiedOn;
        /// <summary>
        /// The ID of the Monitor to use for checking the health of origins within this pool.
        /// </summary>
        public readonly string Monitor;
        /// <summary>
        /// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public readonly ImmutableArray<string> Networks;
        /// <summary>
        /// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
        /// </summary>
        public readonly string NotificationEmail;
        /// <summary>
        /// Filter pool and origin health notifications by resource type or health status. Use null to reset.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolNotificationFilterResult NotificationFilter;
        /// <summary>
        /// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
        /// </summary>
        public readonly Outputs.GetLoadBalancerPoolOriginSteeringResult OriginSteering;
        /// <summary>
        /// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerPoolOriginResult> Origins;
        public readonly string? PoolId;

        [OutputConstructor]
        private GetLoadBalancerPoolResult(
            string accountId,

            ImmutableArray<string> checkRegions,

            string createdOn,

            string description,

            string disabledAt,

            bool enabled,

            Outputs.GetLoadBalancerPoolFilterResult? filter,

            string id,

            double latitude,

            Outputs.GetLoadBalancerPoolLoadSheddingResult loadShedding,

            double longitude,

            int minimumOrigins,

            string modifiedOn,

            string monitor,

            string name,

            ImmutableArray<string> networks,

            string notificationEmail,

            Outputs.GetLoadBalancerPoolNotificationFilterResult notificationFilter,

            Outputs.GetLoadBalancerPoolOriginSteeringResult originSteering,

            ImmutableArray<Outputs.GetLoadBalancerPoolOriginResult> origins,

            string? poolId)
        {
            AccountId = accountId;
            CheckRegions = checkRegions;
            CreatedOn = createdOn;
            Description = description;
            DisabledAt = disabledAt;
            Enabled = enabled;
            Filter = filter;
            Id = id;
            Latitude = latitude;
            LoadShedding = loadShedding;
            Longitude = longitude;
            MinimumOrigins = minimumOrigins;
            ModifiedOn = modifiedOn;
            Monitor = monitor;
            Name = name;
            Networks = networks;
            NotificationEmail = notificationEmail;
            NotificationFilter = notificationFilter;
            OriginSteering = originSteering;
            Origins = origins;
            PoolId = poolId;
        }
    }
}
