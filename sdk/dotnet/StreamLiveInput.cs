// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/streamLiveInput:StreamLiveInput")]
    public partial class StreamLiveInput : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The date and time the live input was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Sets the creator ID asssociated with this live input.
        /// </summary>
        [Output("defaultCreator")]
        public Output<string?> DefaultCreator { get; private set; } = null!;

        /// <summary>
        /// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `Null` value to remove an existing scheduled deletion.
        /// </summary>
        [Output("deleteRecordingAfterDays")]
        public Output<double?> DeleteRecordingAfterDays { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Output("liveInputIdentifier")]
        public Output<string?> LiveInputIdentifier { get; private set; } = null!;

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing live inputs.
        /// </summary>
        [Output("meta")]
        public Output<string?> Meta { get; private set; } = null!;

        /// <summary>
        /// The date and time the live input was last modified.
        /// </summary>
        [Output("modified")]
        public Output<string> Modified { get; private set; } = null!;

        /// <summary>
        /// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
        /// </summary>
        [Output("recording")]
        public Output<Outputs.StreamLiveInputRecording> Recording { get; private set; } = null!;

        /// <summary>
        /// Details for streaming to an live input using RTMPS.
        /// </summary>
        [Output("rtmps")]
        public Output<Outputs.StreamLiveInputRtmps> Rtmps { get; private set; } = null!;

        /// <summary>
        /// Details for playback from an live input using RTMPS.
        /// </summary>
        [Output("rtmpsPlayback")]
        public Output<Outputs.StreamLiveInputRtmpsPlayback> RtmpsPlayback { get; private set; } = null!;

        /// <summary>
        /// Details for streaming to a live input using SRT.
        /// </summary>
        [Output("srt")]
        public Output<Outputs.StreamLiveInputSrt> Srt { get; private set; } = null!;

        /// <summary>
        /// Details for playback from an live input using SRT.
        /// </summary>
        [Output("srtPlayback")]
        public Output<Outputs.StreamLiveInputSrtPlayback> SrtPlayback { get; private set; } = null!;

        /// <summary>
        /// The connection status of a live input.
        /// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;

        /// <summary>
        /// Details for streaming to a live input using WebRTC.
        /// </summary>
        [Output("webRtc")]
        public Output<Outputs.StreamLiveInputWebRtc> WebRtc { get; private set; } = null!;

        /// <summary>
        /// Details for playback from a live input using WebRTC.
        /// </summary>
        [Output("webRtcPlayback")]
        public Output<Outputs.StreamLiveInputWebRtcPlayback> WebRtcPlayback { get; private set; } = null!;


        /// <summary>
        /// Create a StreamLiveInput resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamLiveInput(string name, StreamLiveInputArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamLiveInput:StreamLiveInput", name, args ?? new StreamLiveInputArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamLiveInput(string name, Input<string> id, StreamLiveInputState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamLiveInput:StreamLiveInput", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamLiveInput resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamLiveInput Get(string name, Input<string> id, StreamLiveInputState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamLiveInput(name, id, state, options);
        }
    }

    public sealed class StreamLiveInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Sets the creator ID asssociated with this live input.
        /// </summary>
        [Input("defaultCreator")]
        public Input<string>? DefaultCreator { get; set; }

        /// <summary>
        /// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `Null` value to remove an existing scheduled deletion.
        /// </summary>
        [Input("deleteRecordingAfterDays")]
        public Input<double>? DeleteRecordingAfterDays { get; set; }

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Input("liveInputIdentifier")]
        public Input<string>? LiveInputIdentifier { get; set; }

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing live inputs.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
        /// </summary>
        [Input("recording")]
        public Input<Inputs.StreamLiveInputRecordingArgs>? Recording { get; set; }

        public StreamLiveInputArgs()
        {
        }
        public static new StreamLiveInputArgs Empty => new StreamLiveInputArgs();
    }

    public sealed class StreamLiveInputState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The date and time the live input was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Sets the creator ID asssociated with this live input.
        /// </summary>
        [Input("defaultCreator")]
        public Input<string>? DefaultCreator { get; set; }

        /// <summary>
        /// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `Null` value to remove an existing scheduled deletion.
        /// </summary>
        [Input("deleteRecordingAfterDays")]
        public Input<double>? DeleteRecordingAfterDays { get; set; }

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Input("liveInputIdentifier")]
        public Input<string>? LiveInputIdentifier { get; set; }

        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing live inputs.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// The date and time the live input was last modified.
        /// </summary>
        [Input("modified")]
        public Input<string>? Modified { get; set; }

        /// <summary>
        /// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
        /// </summary>
        [Input("recording")]
        public Input<Inputs.StreamLiveInputRecordingGetArgs>? Recording { get; set; }

        /// <summary>
        /// Details for streaming to an live input using RTMPS.
        /// </summary>
        [Input("rtmps")]
        public Input<Inputs.StreamLiveInputRtmpsGetArgs>? Rtmps { get; set; }

        /// <summary>
        /// Details for playback from an live input using RTMPS.
        /// </summary>
        [Input("rtmpsPlayback")]
        public Input<Inputs.StreamLiveInputRtmpsPlaybackGetArgs>? RtmpsPlayback { get; set; }

        /// <summary>
        /// Details for streaming to a live input using SRT.
        /// </summary>
        [Input("srt")]
        public Input<Inputs.StreamLiveInputSrtGetArgs>? Srt { get; set; }

        /// <summary>
        /// Details for playback from an live input using SRT.
        /// </summary>
        [Input("srtPlayback")]
        public Input<Inputs.StreamLiveInputSrtPlaybackGetArgs>? SrtPlayback { get; set; }

        /// <summary>
        /// The connection status of a live input.
        /// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A unique identifier for a live input.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Details for streaming to a live input using WebRTC.
        /// </summary>
        [Input("webRtc")]
        public Input<Inputs.StreamLiveInputWebRtcGetArgs>? WebRtc { get; set; }

        /// <summary>
        /// Details for playback from a live input using WebRTC.
        /// </summary>
        [Input("webRtcPlayback")]
        public Input<Inputs.StreamLiveInputWebRtcPlaybackGetArgs>? WebRtcPlayback { get; set; }

        public StreamLiveInputState()
        {
        }
        public static new StreamLiveInputState Empty => new StreamLiveInputState();
    }
}
