// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy example '&lt;account_id&gt;/&lt;rule_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy")]
    public partial class ZeroTrustGatewayPolicy : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The action to perform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
        /// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4_override", "egress", "resolve", "quarantine", "redirect".
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Date of deletion, if any.
        /// </summary>
        [Output("deletedAt")]
        public Output<string> DeletedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("devicePosture")]
        public Output<string> DevicePosture { get; private set; } = null!;

        /// <summary>
        /// True if the rule is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The expiration time stamp and default duration of a DNS policy. Takes
        /// precedence over the policy's `schedule` configuration, if any.
        /// </summary>
        [Output("expiration")]
        public Output<Outputs.ZeroTrustGatewayPolicyExpiration> Expiration { get; private set; } = null!;

        /// <summary>
        /// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<string>> Filters { get; private set; } = null!;

        [Output("identity")]
        public Output<string> Identity { get; private set; } = null!;

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The rule cannot be shared via the Orgs API
        /// </summary>
        [Output("notSharable")]
        public Output<bool> NotSharable { get; private set; } = null!;

        [Output("precedence")]
        public Output<int> Precedence { get; private set; } = null!;

        /// <summary>
        /// The rule was shared via the Orgs API and cannot be edited by the current account
        /// </summary>
        [Output("readOnly")]
        public Output<bool> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Additional settings that modify the rule's action.
        /// </summary>
        [Output("ruleSettings")]
        public Output<Outputs.ZeroTrustGatewayPolicyRuleSettings> RuleSettings { get; private set; } = null!;

        /// <summary>
        /// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.ZeroTrustGatewayPolicySchedule> Schedule { get; private set; } = null!;

        /// <summary>
        /// account tag of account that created the rule
        /// </summary>
        [Output("sourceAccount")]
        public Output<string> SourceAccount { get; private set; } = null!;

        [Output("traffic")]
        public Output<string> Traffic { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// version number of the rule
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Warning for a misconfigured rule, if any.
        /// </summary>
        [Output("warningStatus")]
        public Output<string> WarningStatus { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustGatewayPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustGatewayPolicy(string name, ZeroTrustGatewayPolicyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy", name, args ?? new ZeroTrustGatewayPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustGatewayPolicy(string name, Input<string> id, ZeroTrustGatewayPolicyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/teamsRule:TeamsRule" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustGatewayPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustGatewayPolicy Get(string name, Input<string> id, ZeroTrustGatewayPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustGatewayPolicy(name, id, state, options);
        }
    }

    public sealed class ZeroTrustGatewayPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The action to perform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
        /// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4_override", "egress", "resolve", "quarantine", "redirect".
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("devicePosture")]
        public Input<string>? DevicePosture { get; set; }

        /// <summary>
        /// True if the rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The expiration time stamp and default duration of a DNS policy. Takes
        /// precedence over the policy's `schedule` configuration, if any.
        /// </summary>
        [Input("expiration")]
        public Input<Inputs.ZeroTrustGatewayPolicyExpirationArgs>? Expiration { get; set; }

        [Input("filters")]
        private InputList<string>? _filters;

        /// <summary>
        /// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
        /// </summary>
        public InputList<string> Filters
        {
            get => _filters ?? (_filters = new InputList<string>());
            set => _filters = value;
        }

        [Input("identity")]
        public Input<string>? Identity { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("precedence")]
        public Input<int>? Precedence { get; set; }

        /// <summary>
        /// Additional settings that modify the rule's action.
        /// </summary>
        [Input("ruleSettings")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsArgs>? RuleSettings { get; set; }

        /// <summary>
        /// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.ZeroTrustGatewayPolicyScheduleArgs>? Schedule { get; set; }

        [Input("traffic")]
        public Input<string>? Traffic { get; set; }

        public ZeroTrustGatewayPolicyArgs()
        {
        }
        public static new ZeroTrustGatewayPolicyArgs Empty => new ZeroTrustGatewayPolicyArgs();
    }

    public sealed class ZeroTrustGatewayPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The action to perform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
        /// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4_override", "egress", "resolve", "quarantine", "redirect".
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Date of deletion, if any.
        /// </summary>
        [Input("deletedAt")]
        public Input<string>? DeletedAt { get; set; }

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("devicePosture")]
        public Input<string>? DevicePosture { get; set; }

        /// <summary>
        /// True if the rule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The expiration time stamp and default duration of a DNS policy. Takes
        /// precedence over the policy's `schedule` configuration, if any.
        /// </summary>
        [Input("expiration")]
        public Input<Inputs.ZeroTrustGatewayPolicyExpirationGetArgs>? Expiration { get; set; }

        [Input("filters")]
        private InputList<string>? _filters;

        /// <summary>
        /// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
        /// </summary>
        public InputList<string> Filters
        {
            get => _filters ?? (_filters = new InputList<string>());
            set => _filters = value;
        }

        [Input("identity")]
        public Input<string>? Identity { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The rule cannot be shared via the Orgs API
        /// </summary>
        [Input("notSharable")]
        public Input<bool>? NotSharable { get; set; }

        [Input("precedence")]
        public Input<int>? Precedence { get; set; }

        /// <summary>
        /// The rule was shared via the Orgs API and cannot be edited by the current account
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Additional settings that modify the rule's action.
        /// </summary>
        [Input("ruleSettings")]
        public Input<Inputs.ZeroTrustGatewayPolicyRuleSettingsGetArgs>? RuleSettings { get; set; }

        /// <summary>
        /// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.ZeroTrustGatewayPolicyScheduleGetArgs>? Schedule { get; set; }

        /// <summary>
        /// account tag of account that created the rule
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        [Input("traffic")]
        public Input<string>? Traffic { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// version number of the rule
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Warning for a misconfigured rule, if any.
        /// </summary>
        [Input("warningStatus")]
        public Input<string>? WarningStatus { get; set; }

        public ZeroTrustGatewayPolicyState()
        {
        }
        public static new ZeroTrustGatewayPolicyState Empty => new ZeroTrustGatewayPolicyState();
    }
}
