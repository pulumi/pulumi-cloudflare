// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleR2BucketEventNotification = new Cloudflare.R2BucketEventNotification("example_r2_bucket_event_notification", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         BucketName = "example-bucket",
    ///         QueueId = "queue_id",
    ///         Rules = new[]
    ///         {
    ///             new Cloudflare.Inputs.R2BucketEventNotificationRuleArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "PutObject",
    ///                     "CopyObject",
    ///                 },
    ///                 Description = "Notifications from source bucket to queue",
    ///                 Prefix = "img/",
    ///                 Suffix = ".jpeg",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/r2BucketEventNotification:R2BucketEventNotification")]
    public partial class R2BucketEventNotification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Output("jurisdiction")]
        public Output<string> Jurisdiction { get; private set; } = null!;

        /// <summary>
        /// Queue ID.
        /// </summary>
        [Output("queueId")]
        public Output<string> QueueId { get; private set; } = null!;

        /// <summary>
        /// Name of the queue.
        /// </summary>
        [Output("queueName")]
        public Output<string> QueueName { get; private set; } = null!;

        /// <summary>
        /// Array of rules to drive notifications.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.R2BucketEventNotificationRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a R2BucketEventNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public R2BucketEventNotification(string name, R2BucketEventNotificationArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2BucketEventNotification:R2BucketEventNotification", name, args ?? new R2BucketEventNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private R2BucketEventNotification(string name, Input<string> id, R2BucketEventNotificationState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2BucketEventNotification:R2BucketEventNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing R2BucketEventNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static R2BucketEventNotification Get(string name, Input<string> id, R2BucketEventNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new R2BucketEventNotification(name, id, state, options);
        }
    }

    public sealed class R2BucketEventNotificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// Queue ID.
        /// </summary>
        [Input("queueId", required: true)]
        public Input<string> QueueId { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.R2BucketEventNotificationRuleArgs>? _rules;

        /// <summary>
        /// Array of rules to drive notifications.
        /// </summary>
        public InputList<Inputs.R2BucketEventNotificationRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.R2BucketEventNotificationRuleArgs>());
            set => _rules = value;
        }

        public R2BucketEventNotificationArgs()
        {
        }
        public static new R2BucketEventNotificationArgs Empty => new R2BucketEventNotificationArgs();
    }

    public sealed class R2BucketEventNotificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// Queue ID.
        /// </summary>
        [Input("queueId")]
        public Input<string>? QueueId { get; set; }

        /// <summary>
        /// Name of the queue.
        /// </summary>
        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        [Input("rules")]
        private InputList<Inputs.R2BucketEventNotificationRuleGetArgs>? _rules;

        /// <summary>
        /// Array of rules to drive notifications.
        /// </summary>
        public InputList<Inputs.R2BucketEventNotificationRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.R2BucketEventNotificationRuleGetArgs>());
            set => _rules = value;
        }

        public R2BucketEventNotificationState()
        {
        }
        public static new R2BucketEventNotificationState Empty => new R2BucketEventNotificationState();
    }
}
