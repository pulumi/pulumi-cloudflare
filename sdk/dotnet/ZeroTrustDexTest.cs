// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustDexTest = new Cloudflare.ZeroTrustDexTest("example_zero_trust_dex_test", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Data = new Cloudflare.Inputs.ZeroTrustDexTestDataArgs
    ///         {
    ///             Host = "https://dash.cloudflare.com",
    ///             Kind = "http",
    ///             Method = "GET",
    ///         },
    ///         Enabled = true,
    ///         Interval = "30m",
    ///         Name = "HTTP dash health check",
    ///         Description = "Checks the dash endpoint every 30 minutes",
    ///         TargetPolicies = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustDexTestTargetPolicyArgs
    ///             {
    ///                 Id = "id",
    ///                 Default = true,
    ///                 Name = "name",
    ///             },
    ///         },
    ///         Targeted = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest example '&lt;account_id&gt;/&lt;dex_test_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest")]
    public partial class ZeroTrustDexTest : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Output("data")]
        public Output<Outputs.ZeroTrustDexTestData> Data { get; private set; } = null!;

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Output("interval")]
        public Output<string> Interval { get; private set; } = null!;

        /// <summary>
        /// The name of the DEX test. Must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Device settings profiles targeted by this test
        /// </summary>
        [Output("targetPolicies")]
        public Output<ImmutableArray<Outputs.ZeroTrustDexTestTargetPolicy>> TargetPolicies { get; private set; } = null!;

        [Output("targeted")]
        public Output<bool?> Targeted { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        [Output("testId")]
        public Output<string> TestId { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustDexTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustDexTest(string name, ZeroTrustDexTestArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest", name, args ?? new ZeroTrustDexTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustDexTest(string name, Input<string> id, ZeroTrustDexTestState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustDexTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustDexTest Get(string name, Input<string> id, ZeroTrustDexTestState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustDexTest(name, id, state, options);
        }
    }

    public sealed class ZeroTrustDexTestArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Input("data", required: true)]
        public Input<Inputs.ZeroTrustDexTestDataArgs> Data { get; set; } = null!;

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Input("interval", required: true)]
        public Input<string> Interval { get; set; } = null!;

        /// <summary>
        /// The name of the DEX test. Must be unique.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("targetPolicies")]
        private InputList<Inputs.ZeroTrustDexTestTargetPolicyArgs>? _targetPolicies;

        /// <summary>
        /// Device settings profiles targeted by this test
        /// </summary>
        public InputList<Inputs.ZeroTrustDexTestTargetPolicyArgs> TargetPolicies
        {
            get => _targetPolicies ?? (_targetPolicies = new InputList<Inputs.ZeroTrustDexTestTargetPolicyArgs>());
            set => _targetPolicies = value;
        }

        [Input("targeted")]
        public Input<bool>? Targeted { get; set; }

        public ZeroTrustDexTestArgs()
        {
        }
        public static new ZeroTrustDexTestArgs Empty => new ZeroTrustDexTestArgs();
    }

    public sealed class ZeroTrustDexTestState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Input("data")]
        public Input<Inputs.ZeroTrustDexTestDataGetArgs>? Data { get; set; }

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the DEX test. Must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetPolicies")]
        private InputList<Inputs.ZeroTrustDexTestTargetPolicyGetArgs>? _targetPolicies;

        /// <summary>
        /// Device settings profiles targeted by this test
        /// </summary>
        public InputList<Inputs.ZeroTrustDexTestTargetPolicyGetArgs> TargetPolicies
        {
            get => _targetPolicies ?? (_targetPolicies = new InputList<Inputs.ZeroTrustDexTestTargetPolicyGetArgs>());
            set => _targetPolicies = value;
        }

        [Input("targeted")]
        public Input<bool>? Targeted { get; set; }

        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        [Input("testId")]
        public Input<string>? TestId { get; set; }

        public ZeroTrustDexTestState()
        {
        }
        public static new ZeroTrustDexTestState Empty => new ZeroTrustDexTestState();
    }
}
