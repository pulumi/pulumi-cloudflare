// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetPagesProject
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePagesProject = Cloudflare.GetPagesProject.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ProjectName = "this-is-my-project-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPagesProjectResult> InvokeAsync(GetPagesProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPagesProjectResult>("cloudflare:index/getPagesProject:getPagesProject", args ?? new GetPagesProjectArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePagesProject = Cloudflare.GetPagesProject.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ProjectName = "this-is-my-project-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPagesProjectResult> Invoke(GetPagesProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPagesProjectResult>("cloudflare:index/getPagesProject:getPagesProject", args ?? new GetPagesProjectInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePagesProject = Cloudflare.GetPagesProject.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         ProjectName = "this-is-my-project-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPagesProjectResult> Invoke(GetPagesProjectInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPagesProjectResult>("cloudflare:index/getPagesProject:getPagesProject", args ?? new GetPagesProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPagesProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public string ProjectName { get; set; } = null!;

        public GetPagesProjectArgs()
        {
        }
        public static new GetPagesProjectArgs Empty => new GetPagesProjectArgs();
    }

    public sealed class GetPagesProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        public GetPagesProjectInvokeArgs()
        {
        }
        public static new GetPagesProjectInvokeArgs Empty => new GetPagesProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetPagesProjectResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Configs for the project build process.
        /// </summary>
        public readonly Outputs.GetPagesProjectBuildConfigResult BuildConfig;
        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        public readonly Outputs.GetPagesProjectCanonicalDeploymentResult CanonicalDeployment;
        /// <summary>
        /// When the project was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Configs for deployments in a project.
        /// </summary>
        public readonly Outputs.GetPagesProjectDeploymentConfigsResult DeploymentConfigs;
        /// <summary>
        /// A list of associated custom domains for the project.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// Id of the project.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        public readonly Outputs.GetPagesProjectLatestDeploymentResult LatestDeployment;
        /// <summary>
        /// Name of the project.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Production branch of the project. Used to identify production deployments.
        /// </summary>
        public readonly string ProductionBranch;
        /// <summary>
        /// Name of the project.
        /// </summary>
        public readonly string ProjectName;
        public readonly Outputs.GetPagesProjectSourceResult Source;
        /// <summary>
        /// The Cloudflare subdomain associated with the project.
        /// </summary>
        public readonly string Subdomain;

        [OutputConstructor]
        private GetPagesProjectResult(
            string accountId,

            Outputs.GetPagesProjectBuildConfigResult buildConfig,

            Outputs.GetPagesProjectCanonicalDeploymentResult canonicalDeployment,

            string createdOn,

            Outputs.GetPagesProjectDeploymentConfigsResult deploymentConfigs,

            ImmutableArray<string> domains,

            string id,

            Outputs.GetPagesProjectLatestDeploymentResult latestDeployment,

            string name,

            string productionBranch,

            string projectName,

            Outputs.GetPagesProjectSourceResult source,

            string subdomain)
        {
            AccountId = accountId;
            BuildConfig = buildConfig;
            CanonicalDeployment = canonicalDeployment;
            CreatedOn = createdOn;
            DeploymentConfigs = deploymentConfigs;
            Domains = domains;
            Id = id;
            LatestDeployment = latestDeployment;
            Name = name;
            ProductionBranch = productionBranch;
            ProjectName = projectName;
            Source = source;
            Subdomain = subdomain;
        }
    }
}
