// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetApiTokenPermissionGroupsList
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiTokenPermissionGroupsList = Cloudflare.GetApiTokenPermissionGroupsList.Invoke(new()
        ///     {
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetApiTokenPermissionGroupsListResult> InvokeAsync(GetApiTokenPermissionGroupsListArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiTokenPermissionGroupsListResult>("cloudflare:index/getApiTokenPermissionGroupsList:getApiTokenPermissionGroupsList", args ?? new GetApiTokenPermissionGroupsListArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiTokenPermissionGroupsList = Cloudflare.GetApiTokenPermissionGroupsList.Invoke(new()
        ///     {
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiTokenPermissionGroupsListResult> Invoke(GetApiTokenPermissionGroupsListInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiTokenPermissionGroupsListResult>("cloudflare:index/getApiTokenPermissionGroupsList:getApiTokenPermissionGroupsList", args ?? new GetApiTokenPermissionGroupsListInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleApiTokenPermissionGroupsList = Cloudflare.GetApiTokenPermissionGroupsList.Invoke(new()
        ///     {
        ///         Name = "Account%20Settings%20Write",
        ///         Scope = "com.cloudflare.api.account.zone",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetApiTokenPermissionGroupsListResult> Invoke(GetApiTokenPermissionGroupsListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiTokenPermissionGroupsListResult>("cloudflare:index/getApiTokenPermissionGroupsList:getApiTokenPermissionGroupsList", args ?? new GetApiTokenPermissionGroupsListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApiTokenPermissionGroupsListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        public GetApiTokenPermissionGroupsListArgs()
        {
        }
        public static new GetApiTokenPermissionGroupsListArgs Empty => new GetApiTokenPermissionGroupsListArgs();
    }

    public sealed class GetApiTokenPermissionGroupsListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public GetApiTokenPermissionGroupsListInvokeArgs()
        {
        }
        public static new GetApiTokenPermissionGroupsListInvokeArgs Empty => new GetApiTokenPermissionGroupsListInvokeArgs();
    }


    [OutputType]
    public sealed class GetApiTokenPermissionGroupsListResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// Filter by the name of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApiTokenPermissionGroupsListResultResult> Results;
        /// <summary>
        /// Filter by the scope of the permission group.
        /// The value must be URL-encoded.
        /// </summary>
        public readonly string? Scope;

        [OutputConstructor]
        private GetApiTokenPermissionGroupsListResult(
            string id,

            int? maxItems,

            string? name,

            ImmutableArray<Outputs.GetApiTokenPermissionGroupsListResultResult> results,

            string? scope)
        {
            Id = id;
            MaxItems = maxItems;
            Name = name;
            Results = results;
            Scope = scope;
        }
    }
}
