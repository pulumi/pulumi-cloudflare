// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZoneHold
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneHold = Cloudflare.GetZoneHold.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneHoldResult> InvokeAsync(GetZoneHoldArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneHoldResult>("cloudflare:index/getZoneHold:getZoneHold", args ?? new GetZoneHoldArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneHold = Cloudflare.GetZoneHold.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneHoldResult> Invoke(GetZoneHoldInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneHoldResult>("cloudflare:index/getZoneHold:getZoneHold", args ?? new GetZoneHoldInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneHold = Cloudflare.GetZoneHold.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneHoldResult> Invoke(GetZoneHoldInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneHoldResult>("cloudflare:index/getZoneHold:getZoneHold", args ?? new GetZoneHoldInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneHoldArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneHoldArgs()
        {
        }
        public static new GetZoneHoldArgs Empty => new GetZoneHoldArgs();
    }

    public sealed class GetZoneHoldInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneHoldInvokeArgs()
        {
        }
        public static new GetZoneHoldInvokeArgs Empty => new GetZoneHoldInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneHoldResult
    {
        public readonly bool Hold;
        public readonly string HoldAfter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IncludeSubdomains;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneHoldResult(
            bool hold,

            string holdAfter,

            string id,

            string includeSubdomains,

            string zoneId)
        {
            Hold = hold;
            HoldAfter = holdAfter;
            Id = id;
            IncludeSubdomains = includeSubdomains;
            ZoneId = zoneId;
        }
    }
}
