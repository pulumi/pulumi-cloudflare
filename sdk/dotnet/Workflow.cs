// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkflow = new Cloudflare.Workflow("example_workflow", new()
    ///     {
    ///         AccountId = "account_id",
    ///         WorkflowName = "x",
    ///         ClassName = "x",
    ///         ScriptName = "x",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workflow:Workflow example '&lt;account_id&gt;/&lt;workflow_name&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/workflow:Workflow")]
    public partial class Workflow : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("className")]
        public Output<string> ClassName { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        [Output("instances")]
        public Output<Outputs.WorkflowInstances> Instances { get; private set; } = null!;

        [Output("isDeleted")]
        public Output<double> IsDeleted { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("scriptName")]
        public Output<string> ScriptName { get; private set; } = null!;

        [Output("terminatorRunning")]
        public Output<double> TerminatorRunning { get; private set; } = null!;

        [Output("triggeredOn")]
        public Output<string> TriggeredOn { get; private set; } = null!;

        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;

        [Output("workflowName")]
        public Output<string> WorkflowName { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workflow:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workflow(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workflow:Workflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, state, options);
        }
    }

    public sealed class WorkflowArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("className", required: true)]
        public Input<string> ClassName { get; set; } = null!;

        [Input("scriptName", required: true)]
        public Input<string> ScriptName { get; set; } = null!;

        [Input("workflowName", required: true)]
        public Input<string> WorkflowName { get; set; } = null!;

        public WorkflowArgs()
        {
        }
        public static new WorkflowArgs Empty => new WorkflowArgs();
    }

    public sealed class WorkflowState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("className")]
        public Input<string>? ClassName { get; set; }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("instances")]
        public Input<Inputs.WorkflowInstancesGetArgs>? Instances { get; set; }

        [Input("isDeleted")]
        public Input<double>? IsDeleted { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        [Input("terminatorRunning")]
        public Input<double>? TerminatorRunning { get; set; }

        [Input("triggeredOn")]
        public Input<string>? TriggeredOn { get; set; }

        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        [Input("workflowName")]
        public Input<string>? WorkflowName { get; set; }

        public WorkflowState()
        {
        }
        public static new WorkflowState Empty => new WorkflowState();
    }
}
