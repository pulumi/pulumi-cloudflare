// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workerScript:WorkerScript example '&lt;account_id&gt;/&lt;script_name&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript")]
    [CloudflareResourceType("cloudflare:index/workerScript:WorkerScript")]
    public partial class WorkerScript : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Configuration for assets within a Worker
        /// </summary>
        [Output("assets")]
        public Output<Outputs.WorkerScriptAssets?> Assets { get; private set; } = null!;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        [Output("bindings")]
        public Output<ImmutableArray<Outputs.WorkerScriptBinding>> Bindings { get; private set; } = null!;

        /// <summary>
        /// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Output("bodyPart")]
        public Output<string?> BodyPart { get; private set; } = null!;

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Output("compatibilityDate")]
        public Output<string?> CompatibilityDate { get; private set; } = null!;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        [Output("compatibilityFlags")]
        public Output<ImmutableArray<string>> CompatibilityFlags { get; private set; } = null!;

        /// <summary>
        /// Module or Service Worker contents of the Worker.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Hashed script content, can be used in a If-None-Match header when updating.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Whether a Worker contains assets.
        /// </summary>
        [Output("hasAssets")]
        public Output<bool> HasAssets { get; private set; } = null!;

        /// <summary>
        /// Whether a Worker contains modules.
        /// </summary>
        [Output("hasModules")]
        public Output<bool> HasModules { get; private set; } = null!;

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Output("keepAssets")]
        public Output<bool?> KeepAssets { get; private set; } = null!;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        [Output("keepBindings")]
        public Output<ImmutableArray<string>> KeepBindings { get; private set; } = null!;

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Output("logpush")]
        public Output<bool> Logpush { get; private set; } = null!;

        /// <summary>
        /// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Output("mainModule")]
        public Output<string?> MainModule { get; private set; } = null!;

        /// <summary>
        /// Migrations to apply for Durable Objects associated with this Worker.
        /// </summary>
        [Output("migrations")]
        public Output<Outputs.WorkerScriptMigrations> Migrations { get; private set; } = null!;

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Output("observability")]
        public Output<Outputs.WorkerScriptObservability> Observability { get; private set; } = null!;

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Output("placement")]
        public Output<Outputs.WorkerScriptPlacement> Placement { get; private set; } = null!;

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Output("scriptName")]
        public Output<string> ScriptName { get; private set; } = null!;

        [Output("startupTimeMs")]
        public Output<int> StartupTimeMs { get; private set; } = null!;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        [Output("tailConsumers")]
        public Output<ImmutableArray<Outputs.WorkerScriptTailConsumer>> TailConsumers { get; private set; } = null!;

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard".
        /// </summary>
        [Output("usageModel")]
        public Output<string> UsageModel { get; private set; } = null!;


        /// <summary>
        /// Create a WorkerScript resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkerScript(string name, WorkerScriptArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workerScript:WorkerScript", name, args ?? new WorkerScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkerScript(string name, Input<string> id, WorkerScriptState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workerScript:WorkerScript", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/workerScript:WorkerScript" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkerScript resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkerScript Get(string name, Input<string> id, WorkerScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkerScript(name, id, state, options);
        }
    }

    public sealed class WorkerScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Configuration for assets within a Worker
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkerScriptAssetsArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkerScriptBindingArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkerScriptBindingArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkerScriptBindingArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Input("bodyPart")]
        public Input<string>? BodyPart { get; set; }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// Module or Service Worker contents of the Worker.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Input("keepAssets")]
        public Input<bool>? KeepAssets { get; set; }

        [Input("keepBindings")]
        private InputList<string>? _keepBindings;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        public InputList<string> KeepBindings
        {
            get => _keepBindings ?? (_keepBindings = new InputList<string>());
            set => _keepBindings = value;
        }

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// Migrations to apply for Durable Objects associated with this Worker.
        /// </summary>
        [Input("migrations")]
        public Input<Inputs.WorkerScriptMigrationsArgs>? Migrations { get; set; }

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkerScriptObservabilityArgs>? Observability { get; set; }

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkerScriptPlacementArgs>? Placement { get; set; }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName", required: true)]
        public Input<string> ScriptName { get; set; } = null!;

        [Input("tailConsumers")]
        private InputList<Inputs.WorkerScriptTailConsumerArgs>? _tailConsumers;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        public InputList<Inputs.WorkerScriptTailConsumerArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkerScriptTailConsumerArgs>());
            set => _tailConsumers = value;
        }

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        public WorkerScriptArgs()
        {
        }
        public static new WorkerScriptArgs Empty => new WorkerScriptArgs();
    }

    public sealed class WorkerScriptState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Configuration for assets within a Worker
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkerScriptAssetsGetArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkerScriptBindingGetArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkerScriptBindingGetArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkerScriptBindingGetArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Input("bodyPart")]
        public Input<string>? BodyPart { get; set; }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// Module or Service Worker contents of the Worker.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Hashed script content, can be used in a If-None-Match header when updating.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Whether a Worker contains assets.
        /// </summary>
        [Input("hasAssets")]
        public Input<bool>? HasAssets { get; set; }

        /// <summary>
        /// Whether a Worker contains modules.
        /// </summary>
        [Input("hasModules")]
        public Input<bool>? HasModules { get; set; }

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Input("keepAssets")]
        public Input<bool>? KeepAssets { get; set; }

        [Input("keepBindings")]
        private InputList<string>? _keepBindings;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        public InputList<string> KeepBindings
        {
            get => _keepBindings ?? (_keepBindings = new InputList<string>());
            set => _keepBindings = value;
        }

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// Migrations to apply for Durable Objects associated with this Worker.
        /// </summary>
        [Input("migrations")]
        public Input<Inputs.WorkerScriptMigrationsGetArgs>? Migrations { get; set; }

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkerScriptObservabilityGetArgs>? Observability { get; set; }

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkerScriptPlacementGetArgs>? Placement { get; set; }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        [Input("startupTimeMs")]
        public Input<int>? StartupTimeMs { get; set; }

        [Input("tailConsumers")]
        private InputList<Inputs.WorkerScriptTailConsumerGetArgs>? _tailConsumers;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        public InputList<Inputs.WorkerScriptTailConsumerGetArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkerScriptTailConsumerGetArgs>());
            set => _tailConsumers = value;
        }

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        public WorkerScriptState()
        {
        }
        public static new WorkerScriptState Empty => new WorkerScriptState();
    }
}
