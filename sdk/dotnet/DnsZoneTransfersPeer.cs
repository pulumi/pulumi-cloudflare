// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDnsZoneTransfersPeer = new Cloudflare.DnsZoneTransfersPeer("example_dns_zone_transfers_peer", new()
    ///     {
    ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
    ///         Name = "my-peer-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer example '&lt;account_id&gt;/&lt;peer_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer")]
    public partial class DnsZoneTransfersPeer : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
        /// </summary>
        [Output("ip")]
        public Output<string?> Ip { get; private set; } = null!;

        /// <summary>
        /// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
        /// </summary>
        [Output("ixfrEnable")]
        public Output<bool?> IxfrEnable { get; private set; } = null!;

        /// <summary>
        /// The name of the peer.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
        /// </summary>
        [Output("port")]
        public Output<double?> Port { get; private set; } = null!;

        /// <summary>
        /// TSIG authentication will be used for zone transfer if configured.
        /// </summary>
        [Output("tsigId")]
        public Output<string?> TsigId { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZoneTransfersPeer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZoneTransfersPeer(string name, DnsZoneTransfersPeerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, args ?? new DnsZoneTransfersPeerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZoneTransfersPeer(string name, Input<string> id, DnsZoneTransfersPeerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZoneTransfersPeer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZoneTransfersPeer Get(string name, Input<string> id, DnsZoneTransfersPeerState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZoneTransfersPeer(name, id, state, options);
        }
    }

    public sealed class DnsZoneTransfersPeerArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
        /// </summary>
        [Input("ixfrEnable")]
        public Input<bool>? IxfrEnable { get; set; }

        /// <summary>
        /// The name of the peer.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// TSIG authentication will be used for zone transfer if configured.
        /// </summary>
        [Input("tsigId")]
        public Input<string>? TsigId { get; set; }

        public DnsZoneTransfersPeerArgs()
        {
        }
        public static new DnsZoneTransfersPeerArgs Empty => new DnsZoneTransfersPeerArgs();
    }

    public sealed class DnsZoneTransfersPeerState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
        /// </summary>
        [Input("ixfrEnable")]
        public Input<bool>? IxfrEnable { get; set; }

        /// <summary>
        /// The name of the peer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// TSIG authentication will be used for zone transfer if configured.
        /// </summary>
        [Input("tsigId")]
        public Input<string>? TsigId { get; set; }

        public DnsZoneTransfersPeerState()
        {
        }
        public static new DnsZoneTransfersPeerState Empty => new DnsZoneTransfersPeerState();
    }
}
