// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountMember
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMember = Cloudflare.GetAccountMember.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         MemberId = "4536bcfad5faccb111b47003c79917fa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountMemberResult> InvokeAsync(GetAccountMemberArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountMemberResult>("cloudflare:index/getAccountMember:getAccountMember", args ?? new GetAccountMemberArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMember = Cloudflare.GetAccountMember.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         MemberId = "4536bcfad5faccb111b47003c79917fa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountMemberResult> Invoke(GetAccountMemberInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountMemberResult>("cloudflare:index/getAccountMember:getAccountMember", args ?? new GetAccountMemberInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountMember = Cloudflare.GetAccountMember.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         MemberId = "4536bcfad5faccb111b47003c79917fa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountMemberResult> Invoke(GetAccountMemberInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountMemberResult>("cloudflare:index/getAccountMember:getAccountMember", args ?? new GetAccountMemberInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountMemberArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetAccountMemberFilterArgs? Filter { get; set; }

        /// <summary>
        /// Membership identifier tag.
        /// </summary>
        [Input("memberId")]
        public string? MemberId { get; set; }

        public GetAccountMemberArgs()
        {
        }
        public static new GetAccountMemberArgs Empty => new GetAccountMemberArgs();
    }

    public sealed class GetAccountMemberInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetAccountMemberFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Membership identifier tag.
        /// </summary>
        [Input("memberId")]
        public Input<string>? MemberId { get; set; }

        public GetAccountMemberInvokeArgs()
        {
        }
        public static new GetAccountMemberInvokeArgs Empty => new GetAccountMemberInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountMemberResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        public readonly Outputs.GetAccountMemberFilterResult? Filter;
        /// <summary>
        /// Membership identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Membership identifier tag.
        /// </summary>
        public readonly string? MemberId;
        /// <summary>
        /// Access policy for the membership
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountMemberPolicyResult> Policies;
        /// <summary>
        /// Roles assigned to this Member.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccountMemberRoleResult> Roles;
        /// <summary>
        /// A member's status in the account.
        /// Available values: "accepted", "pending".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Details of the user associated to the membership.
        /// </summary>
        public readonly Outputs.GetAccountMemberUserResult User;

        [OutputConstructor]
        private GetAccountMemberResult(
            string accountId,

            Outputs.GetAccountMemberFilterResult? filter,

            string id,

            string? memberId,

            ImmutableArray<Outputs.GetAccountMemberPolicyResult> policies,

            ImmutableArray<Outputs.GetAccountMemberRoleResult> roles,

            string status,

            Outputs.GetAccountMemberUserResult user)
        {
            AccountId = accountId;
            Filter = filter;
            Id = id;
            MemberId = memberId;
            Policies = policies;
            Roles = roles;
            Status = status;
            User = user;
        }
    }
}
