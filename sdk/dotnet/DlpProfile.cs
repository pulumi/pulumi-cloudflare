// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare DLP Profile resource. Data Loss Prevention profiles
    /// are a set of entries that can be matched in HTTP bodies or files.
    /// They are referenced in Zero Trust Gateway rules.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/dlpProfile:DlpProfile example &lt;account_id&gt;/&lt;dlp_profile_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/dlpProfile:DlpProfile")]
    public partial class DlpProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Related DLP policies will trigger when the match count exceeds the number set.
        /// </summary>
        [Output("allowedMatchCount")]
        public Output<int> AllowedMatchCount { get; private set; } = null!;

        /// <summary>
        /// Brief summary of the profile and its intended use.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of entries to apply to the profile.
        /// </summary>
        [Output("entries")]
        public Output<ImmutableArray<Outputs.DlpProfileEntry>> Entries { get; private set; } = null!;

        /// <summary>
        /// Name of the entry to deploy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DlpProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DlpProfile(string name, DlpProfileArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/dlpProfile:DlpProfile", name, args ?? new DlpProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DlpProfile(string name, Input<string> id, DlpProfileState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/dlpProfile:DlpProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DlpProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DlpProfile Get(string name, Input<string> id, DlpProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new DlpProfile(name, id, state, options);
        }
    }

    public sealed class DlpProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Related DLP policies will trigger when the match count exceeds the number set.
        /// </summary>
        [Input("allowedMatchCount", required: true)]
        public Input<int> AllowedMatchCount { get; set; } = null!;

        /// <summary>
        /// Brief summary of the profile and its intended use.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entries", required: true)]
        private InputList<Inputs.DlpProfileEntryArgs>? _entries;

        /// <summary>
        /// List of entries to apply to the profile.
        /// </summary>
        public InputList<Inputs.DlpProfileEntryArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.DlpProfileEntryArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// Name of the entry to deploy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DlpProfileArgs()
        {
        }
        public static new DlpProfileArgs Empty => new DlpProfileArgs();
    }

    public sealed class DlpProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Related DLP policies will trigger when the match count exceeds the number set.
        /// </summary>
        [Input("allowedMatchCount")]
        public Input<int>? AllowedMatchCount { get; set; }

        /// <summary>
        /// Brief summary of the profile and its intended use.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entries")]
        private InputList<Inputs.DlpProfileEntryGetArgs>? _entries;

        /// <summary>
        /// List of entries to apply to the profile.
        /// </summary>
        public InputList<Inputs.DlpProfileEntryGetArgs> Entries
        {
            get => _entries ?? (_entries = new InputList<Inputs.DlpProfileEntryGetArgs>());
            set => _entries = value;
        }

        /// <summary>
        /// Name of the entry to deploy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DlpProfileState()
        {
        }
        public static new DlpProfileState Empty => new DlpProfileState();
    }
}
