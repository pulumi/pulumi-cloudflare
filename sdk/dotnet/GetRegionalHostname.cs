// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetRegionalHostname
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegionalHostname = Cloudflare.GetRegionalHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Hostname = "foo.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionalHostnameResult> InvokeAsync(GetRegionalHostnameArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionalHostnameResult>("cloudflare:index/getRegionalHostname:getRegionalHostname", args ?? new GetRegionalHostnameArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegionalHostname = Cloudflare.GetRegionalHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Hostname = "foo.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalHostnameResult> Invoke(GetRegionalHostnameInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalHostnameResult>("cloudflare:index/getRegionalHostname:getRegionalHostname", args ?? new GetRegionalHostnameInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegionalHostname = Cloudflare.GetRegionalHostname.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Hostname = "foo.example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionalHostnameResult> Invoke(GetRegionalHostnameInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionalHostnameResult>("cloudflare:index/getRegionalHostname:getRegionalHostname", args ?? new GetRegionalHostnameInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionalHostnameArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetRegionalHostnameArgs()
        {
        }
        public static new GetRegionalHostnameArgs Empty => new GetRegionalHostnameArgs();
    }

    public sealed class GetRegionalHostnameInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetRegionalHostnameInvokeArgs()
        {
        }
        public static new GetRegionalHostnameInvokeArgs Empty => new GetRegionalHostnameInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionalHostnameResult
    {
        /// <summary>
        /// When the regional hostname was created
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifying key for the region
        /// </summary>
        public readonly string RegionKey;
        /// <summary>
        /// Configure which routing method to use for the regional hostname
        /// </summary>
        public readonly string Routing;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetRegionalHostnameResult(
            string createdOn,

            string hostname,

            string id,

            string regionKey,

            string routing,

            string zoneId)
        {
            CreatedOn = createdOn;
            Hostname = hostname;
            Id = id;
            RegionKey = regionKey;
            Routing = routing;
            ZoneId = zoneId;
        }
    }
}
