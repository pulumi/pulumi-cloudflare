// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/r2BucketSippy:R2BucketSippy")]
    public partial class R2BucketSippy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// R2 bucket to copy objects to
        /// </summary>
        [Output("destination")]
        public Output<Outputs.R2BucketSippyDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// State of Sippy for this bucket
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Output("jurisdiction")]
        public Output<string> Jurisdiction { get; private set; } = null!;

        /// <summary>
        /// AWS S3 bucket to copy objects from
        /// </summary>
        [Output("source")]
        public Output<Outputs.R2BucketSippySource> Source { get; private set; } = null!;


        /// <summary>
        /// Create a R2BucketSippy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public R2BucketSippy(string name, R2BucketSippyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2BucketSippy:R2BucketSippy", name, args ?? new R2BucketSippyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private R2BucketSippy(string name, Input<string> id, R2BucketSippyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2BucketSippy:R2BucketSippy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing R2BucketSippy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static R2BucketSippy Get(string name, Input<string> id, R2BucketSippyState? state = null, CustomResourceOptions? options = null)
        {
            return new R2BucketSippy(name, id, state, options);
        }
    }

    public sealed class R2BucketSippyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// R2 bucket to copy objects to
        /// </summary>
        [Input("destination")]
        public Input<Inputs.R2BucketSippyDestinationArgs>? Destination { get; set; }

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// AWS S3 bucket to copy objects from
        /// </summary>
        [Input("source")]
        public Input<Inputs.R2BucketSippySourceArgs>? Source { get; set; }

        public R2BucketSippyArgs()
        {
        }
        public static new R2BucketSippyArgs Empty => new R2BucketSippyArgs();
    }

    public sealed class R2BucketSippyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// R2 bucket to copy objects to
        /// </summary>
        [Input("destination")]
        public Input<Inputs.R2BucketSippyDestinationGetArgs>? Destination { get; set; }

        /// <summary>
        /// State of Sippy for this bucket
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// AWS S3 bucket to copy objects from
        /// </summary>
        [Input("source")]
        public Input<Inputs.R2BucketSippySourceGetArgs>? Source { get; set; }

        public R2BucketSippyState()
        {
        }
        public static new R2BucketSippyState Empty => new R2BucketSippyState();
    }
}
