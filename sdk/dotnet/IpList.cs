// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// IP Lists are a set of IP addresses or CIDR ranges that are configured on the account level. Once created, IP Lists can be
    /// used in Firewall Rules across all zones within the same account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Cloudflare.IpList("example", new Cloudflare.IpListArgs
    ///         {
    ///             AccountId = "d41d8cd98f00b204e9800998ecf8427e",
    ///             Description = "list description",
    ///             Items = 
    ///             {
    ///                 new Cloudflare.Inputs.IpListItemArgs
    ///                 {
    ///                     Comment = "Office IP",
    ///                     Value = "192.0.2.1",
    ///                 },
    ///                 new Cloudflare.Inputs.IpListItemArgs
    ///                 {
    ///                     Comment = "Datacenter range",
    ///                     Value = "203.0.113.0/24",
    ///                 },
    ///             },
    ///             Kind = "ip",
    ///             Name = "example_list",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing IP List can be imported using the account ID and list ID
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/ipList:IpList example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
    /// ```
    /// </summary>
    public partial class IpList : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account where the IP List is being created.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// A note that can be used to annotate the List. Maximum Length: 500
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("items")]
        public Output<ImmutableArray<Outputs.IpListItem>> Items { get; private set; } = null!;

        /// <summary>
        /// The kind of values in the List. Valid values: `ip`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a IpList resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpList(string name, IpListArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipList:IpList", name, args ?? new IpListArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpList(string name, Input<string> id, IpListState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipList:IpList", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpList resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpList Get(string name, Input<string> id, IpListState? state = null, CustomResourceOptions? options = null)
        {
            return new IpList(name, id, state, options);
        }
    }

    public sealed class IpListArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account where the IP List is being created.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// A note that can be used to annotate the List. Maximum Length: 500
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("items")]
        private InputList<Inputs.IpListItemArgs>? _items;
        public InputList<Inputs.IpListItemArgs> Items
        {
            get => _items ?? (_items = new InputList<Inputs.IpListItemArgs>());
            set => _items = value;
        }

        /// <summary>
        /// The kind of values in the List. Valid values: `ip`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public IpListArgs()
        {
        }
    }

    public sealed class IpListState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account where the IP List is being created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// A note that can be used to annotate the List. Maximum Length: 500
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("items")]
        private InputList<Inputs.IpListItemGetArgs>? _items;
        public InputList<Inputs.IpListItemGetArgs> Items
        {
            get => _items ?? (_items = new InputList<Inputs.IpListItemGetArgs>());
            set => _items = value;
        }

        /// <summary>
        /// The kind of values in the List. Valid values: `ip`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public IpListState()
        {
        }
    }
}
