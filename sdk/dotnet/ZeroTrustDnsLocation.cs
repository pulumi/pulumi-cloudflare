// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Teams Location resource. Teams Locations are
    /// referenced when creating secure web gateway policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Cloudflare.ZeroTrustDnsLocation("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Name = "office",
    ///         ClientDefault = true,
    ///         EcsSupport = false,
    ///         Networks = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustDnsLocationNetworkArgs
    ///             {
    ///                 Network = "203.0.113.1/32",
    ///             },
    ///             new Cloudflare.Inputs.ZeroTrustDnsLocationNetworkArgs
    ///             {
    ///                 Network = "203.0.113.2/32",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation example &lt;account_id&gt;/&lt;teams_location_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation")]
    public partial class ZeroTrustDnsLocation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Indicator that anonymized logs are enabled.
        /// </summary>
        [Output("anonymizedLogsEnabled")]
        public Output<bool> AnonymizedLogsEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicator that this is the default location.
        /// </summary>
        [Output("clientDefault")]
        public Output<bool?> ClientDefault { get; private set; } = null!;

        /// <summary>
        /// The FQDN that DoH clients should be pointed at.
        /// </summary>
        [Output("dohSubdomain")]
        public Output<string> DohSubdomain { get; private set; } = null!;

        /// <summary>
        /// Indicator that this location needs to resolve EDNS queries.
        /// </summary>
        [Output("ecsSupport")]
        public Output<bool?> EcsSupport { get; private set; } = null!;

        /// <summary>
        /// Client IP address.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// IP to direct all IPv4 DNS queries to.
        /// </summary>
        [Output("ipv4Destination")]
        public Output<string> Ipv4Destination { get; private set; } = null!;

        /// <summary>
        /// Name of the teams location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The networks CIDRs that comprise the location.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.ZeroTrustDnsLocationNetwork>> Networks { get; private set; } = null!;

        [Output("policyIds")]
        public Output<ImmutableArray<string>> PolicyIds { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustDnsLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustDnsLocation(string name, ZeroTrustDnsLocationArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation", name, args ?? new ZeroTrustDnsLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustDnsLocation(string name, Input<string> id, ZeroTrustDnsLocationState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustDnsLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustDnsLocation Get(string name, Input<string> id, ZeroTrustDnsLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustDnsLocation(name, id, state, options);
        }
    }

    public sealed class ZeroTrustDnsLocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Indicator that this is the default location.
        /// </summary>
        [Input("clientDefault")]
        public Input<bool>? ClientDefault { get; set; }

        /// <summary>
        /// Indicator that this location needs to resolve EDNS queries.
        /// </summary>
        [Input("ecsSupport")]
        public Input<bool>? EcsSupport { get; set; }

        /// <summary>
        /// Name of the teams location.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networks")]
        private InputList<Inputs.ZeroTrustDnsLocationNetworkArgs>? _networks;

        /// <summary>
        /// The networks CIDRs that comprise the location.
        /// </summary>
        public InputList<Inputs.ZeroTrustDnsLocationNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ZeroTrustDnsLocationNetworkArgs>());
            set => _networks = value;
        }

        public ZeroTrustDnsLocationArgs()
        {
        }
        public static new ZeroTrustDnsLocationArgs Empty => new ZeroTrustDnsLocationArgs();
    }

    public sealed class ZeroTrustDnsLocationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Indicator that anonymized logs are enabled.
        /// </summary>
        [Input("anonymizedLogsEnabled")]
        public Input<bool>? AnonymizedLogsEnabled { get; set; }

        /// <summary>
        /// Indicator that this is the default location.
        /// </summary>
        [Input("clientDefault")]
        public Input<bool>? ClientDefault { get; set; }

        /// <summary>
        /// The FQDN that DoH clients should be pointed at.
        /// </summary>
        [Input("dohSubdomain")]
        public Input<string>? DohSubdomain { get; set; }

        /// <summary>
        /// Indicator that this location needs to resolve EDNS queries.
        /// </summary>
        [Input("ecsSupport")]
        public Input<bool>? EcsSupport { get; set; }

        /// <summary>
        /// Client IP address.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// IP to direct all IPv4 DNS queries to.
        /// </summary>
        [Input("ipv4Destination")]
        public Input<string>? Ipv4Destination { get; set; }

        /// <summary>
        /// Name of the teams location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ZeroTrustDnsLocationNetworkGetArgs>? _networks;

        /// <summary>
        /// The networks CIDRs that comprise the location.
        /// </summary>
        public InputList<Inputs.ZeroTrustDnsLocationNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ZeroTrustDnsLocationNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("policyIds")]
        private InputList<string>? _policyIds;
        public InputList<string> PolicyIds
        {
            get => _policyIds ?? (_policyIds = new InputList<string>());
            set => _policyIds = value;
        }

        public ZeroTrustDnsLocationState()
        {
        }
        public static new ZeroTrustDnsLocationState Empty => new ZeroTrustDnsLocationState();
    }
}
