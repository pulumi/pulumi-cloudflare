// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetFirewallRules
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFirewallRules = Cloudflare.GetFirewallRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "372e67954025e0ba6aaa6d586b9e0b60",
        ///         Action = "block",
        ///         Description = "mir",
        ///         Paused = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFirewallRulesResult> InvokeAsync(GetFirewallRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallRulesResult>("cloudflare:index/getFirewallRules:getFirewallRules", args ?? new GetFirewallRulesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFirewallRules = Cloudflare.GetFirewallRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "372e67954025e0ba6aaa6d586b9e0b60",
        ///         Action = "block",
        ///         Description = "mir",
        ///         Paused = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirewallRulesResult> Invoke(GetFirewallRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRulesResult>("cloudflare:index/getFirewallRules:getFirewallRules", args ?? new GetFirewallRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFirewallRules = Cloudflare.GetFirewallRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "372e67954025e0ba6aaa6d586b9e0b60",
        ///         Action = "block",
        ///         Description = "mir",
        ///         Paused = false,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirewallRulesResult> Invoke(GetFirewallRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRulesResult>("cloudflare:index/getFirewallRules:getFirewallRules", args ?? new GetFirewallRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The action to search for. Must be an exact match.
        /// </summary>
        [Input("action")]
        public string? Action { get; set; }

        /// <summary>
        /// A case-insensitive string to find in the description.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The unique identifier of the firewall rule.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        [Input("paused")]
        public bool? Paused { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetFirewallRulesArgs()
        {
        }
        public static new GetFirewallRulesArgs Empty => new GetFirewallRulesArgs();
    }

    public sealed class GetFirewallRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The action to search for. Must be an exact match.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// A case-insensitive string to find in the description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The unique identifier of the firewall rule.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetFirewallRulesInvokeArgs()
        {
        }
        public static new GetFirewallRulesInvokeArgs Empty => new GetFirewallRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallRulesResult
    {
        /// <summary>
        /// The action to search for. Must be an exact match.
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// A case-insensitive string to find in the description.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The unique identifier of the firewall rule.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        public readonly bool? Paused;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallRulesResultResult> Results;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetFirewallRulesResult(
            string? action,

            string? description,

            string? id,

            int? maxItems,

            bool? paused,

            ImmutableArray<Outputs.GetFirewallRulesResultResult> results,

            string zoneId)
        {
            Action = action;
            Description = description;
            Id = id;
            MaxItems = maxItems;
            Paused = paused;
            Results = results;
            ZoneId = zoneId;
        }
    }
}
