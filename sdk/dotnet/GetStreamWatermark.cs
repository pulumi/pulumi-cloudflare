// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetStreamWatermark
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamWatermark = Cloudflare.GetStreamWatermark.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamWatermarkResult> InvokeAsync(GetStreamWatermarkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamWatermarkResult>("cloudflare:index/getStreamWatermark:getStreamWatermark", args ?? new GetStreamWatermarkArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamWatermark = Cloudflare.GetStreamWatermark.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamWatermarkResult> Invoke(GetStreamWatermarkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamWatermarkResult>("cloudflare:index/getStreamWatermark:getStreamWatermark", args ?? new GetStreamWatermarkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreamWatermark = Cloudflare.GetStreamWatermark.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamWatermarkResult> Invoke(GetStreamWatermarkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamWatermarkResult>("cloudflare:index/getStreamWatermark:getStreamWatermark", args ?? new GetStreamWatermarkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamWatermarkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        public GetStreamWatermarkArgs()
        {
        }
        public static new GetStreamWatermarkArgs Empty => new GetStreamWatermarkArgs();
    }

    public sealed class GetStreamWatermarkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        public GetStreamWatermarkInvokeArgs()
        {
        }
        public static new GetStreamWatermarkInvokeArgs Empty => new GetStreamWatermarkInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamWatermarkResult
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The date and a time a watermark profile was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
        /// </summary>
        public readonly string DownloadedFrom;
        /// <summary>
        /// The height of the image in pixels.
        /// </summary>
        public readonly int Height;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        public readonly string Identifier;
        /// <summary>
        /// A short description of the watermark profile.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
        /// </summary>
        public readonly double Opacity;
        /// <summary>
        /// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
        /// </summary>
        public readonly double Padding;
        /// <summary>
        /// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `Center`. Note that `Center` ignores the `Padding` parameter.
        /// </summary>
        public readonly string Position;
        /// <summary>
        /// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
        /// </summary>
        public readonly double Scale;
        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// The unique identifier for a watermark profile.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The width of the image in pixels.
        /// </summary>
        public readonly int Width;

        [OutputConstructor]
        private GetStreamWatermarkResult(
            string accountId,

            string created,

            string downloadedFrom,

            int height,

            string id,

            string identifier,

            string name,

            double opacity,

            double padding,

            string position,

            double scale,

            double size,

            string uid,

            int width)
        {
            AccountId = accountId;
            Created = created;
            DownloadedFrom = downloadedFrom;
            Height = height;
            Id = id;
            Identifier = identifier;
            Name = name;
            Opacity = opacity;
            Padding = padding;
            Position = position;
            Scale = scale;
            Size = size;
            Uid = uid;
            Width = width;
        }
    }
}
