// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetWorker
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorker = Cloudflare.GetWorker.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkerResult> InvokeAsync(GetWorkerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkerResult>("cloudflare:index/getWorker:getWorker", args ?? new GetWorkerArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorker = Cloudflare.GetWorker.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerResult> Invoke(GetWorkerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerResult>("cloudflare:index/getWorker:getWorker", args ?? new GetWorkerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorker = Cloudflare.GetWorker.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerResult> Invoke(GetWorkerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerResult>("cloudflare:index/getWorker:getWorker", args ?? new GetWorkerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("workerId")]
        public string? WorkerId { get; set; }

        public GetWorkerArgs()
        {
        }
        public static new GetWorkerArgs Empty => new GetWorkerArgs();
    }

    public sealed class GetWorkerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("workerId")]
        public Input<string>? WorkerId { get; set; }

        public GetWorkerInvokeArgs()
        {
        }
        public static new GetWorkerInvokeArgs Empty => new GetWorkerInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkerResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// When the Worker was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether logpush is enabled for the Worker.
        /// </summary>
        public readonly bool Logpush;
        /// <summary>
        /// Name of the Worker.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        public readonly Outputs.GetWorkerObservabilityResult Observability;
        /// <summary>
        /// Subdomain settings for the Worker.
        /// </summary>
        public readonly Outputs.GetWorkerSubdomainResult Subdomain;
        /// <summary>
        /// Tags associated with the Worker.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Other Workers that should consume logs from the Worker.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerTailConsumerResult> TailConsumers;
        /// <summary>
        /// When the Worker was most recently updated.
        /// </summary>
        public readonly string UpdatedOn;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string? WorkerId;

        [OutputConstructor]
        private GetWorkerResult(
            string accountId,

            string createdOn,

            string id,

            bool logpush,

            string name,

            Outputs.GetWorkerObservabilityResult observability,

            Outputs.GetWorkerSubdomainResult subdomain,

            ImmutableArray<string> tags,

            ImmutableArray<Outputs.GetWorkerTailConsumerResult> tailConsumers,

            string updatedOn,

            string? workerId)
        {
            AccountId = accountId;
            CreatedOn = createdOn;
            Id = id;
            Logpush = logpush;
            Name = name;
            Observability = observability;
            Subdomain = subdomain;
            Tags = tags;
            TailConsumers = tailConsumers;
            UpdatedOn = updatedOn;
            WorkerId = workerId;
        }
    }
}
