// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Cloudflare
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("cloudflare");

        private static readonly __Value<string?> _apiKey = new __Value<string?>(() => __config.Get("apiKey"));
        /// <summary>
        /// The API key for operations. Alternatively, can be configured using the `CLOUDFLARE_API_KEY` environment variable. API
        /// keys are [now considered legacy by
        /// Cloudflare](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations), API tokens should be used
        /// instead. Must provide only one of `api_key`, `api_token`, `api_user_service_key`.
        /// </summary>
        public static string? ApiKey
        {
            get => _apiKey.Get();
            set => _apiKey.Set(value);
        }

        private static readonly __Value<string?> _apiToken = new __Value<string?>(() => __config.Get("apiToken"));
        /// <summary>
        /// The API Token for operations. Alternatively, can be configured using the `CLOUDFLARE_API_TOKEN` environment variable.
        /// Must provide only one of `api_key`, `api_token`, `api_user_service_key`.
        /// </summary>
        public static string? ApiToken
        {
            get => _apiToken.Get();
            set => _apiToken.Set(value);
        }

        private static readonly __Value<string?> _apiUserServiceKey = new __Value<string?>(() => __config.Get("apiUserServiceKey"));
        /// <summary>
        /// A special Cloudflare API key good for a restricted set of endpoints. Alternatively, can be configured using the
        /// `CLOUDFLARE_API_USER_SERVICE_KEY` environment variable. Must provide only one of `api_key`, `api_token`,
        /// `api_user_service_key`.
        /// </summary>
        public static string? ApiUserServiceKey
        {
            get => _apiUserServiceKey.Get();
            set => _apiUserServiceKey.Set(value);
        }

        private static readonly __Value<string?> _baseUrl = new __Value<string?>(() => __config.Get("baseUrl"));
        /// <summary>
        /// Value to override the default HTTP client base URL. Alternatively, can be configured using the `base_url` environment
        /// variable.
        /// </summary>
        public static string? BaseUrl
        {
            get => _baseUrl.Get();
            set => _baseUrl.Set(value);
        }

        private static readonly __Value<string?> _email = new __Value<string?>(() => __config.Get("email"));
        /// <summary>
        /// A registered Cloudflare email address. Alternatively, can be configured using the `CLOUDFLARE_EMAIL` environment
        /// variable. Required when using `api_key`. Conflicts with `api_token`.
        /// </summary>
        public static string? Email
        {
            get => _email.Get();
            set => _email.Set(value);
        }

        private static readonly __Value<string?> _userAgentOperatorSuffix = new __Value<string?>(() => __config.Get("userAgentOperatorSuffix"));
        public static string? UserAgentOperatorSuffix
        {
            get => _userAgentOperatorSuffix.Get();
            set => _userAgentOperatorSuffix.Set(value);
        }

    }
}
