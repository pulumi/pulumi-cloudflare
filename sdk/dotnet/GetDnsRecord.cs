// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetDnsRecord
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsRecord = Cloudflare.GetDnsRecord.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsRecordId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsRecordResult> InvokeAsync(GetDnsRecordArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsRecordResult>("cloudflare:index/getDnsRecord:getDnsRecord", args ?? new GetDnsRecordArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsRecord = Cloudflare.GetDnsRecord.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsRecordId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsRecordResult> Invoke(GetDnsRecordInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsRecordResult>("cloudflare:index/getDnsRecord:getDnsRecord", args ?? new GetDnsRecordInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsRecord = Cloudflare.GetDnsRecord.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsRecordId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsRecordResult> Invoke(GetDnsRecordInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsRecordResult>("cloudflare:index/getDnsRecord:getDnsRecord", args ?? new GetDnsRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("dnsRecordId")]
        public string? DnsRecordId { get; set; }

        [Input("filter")]
        public Inputs.GetDnsRecordFilterArgs? Filter { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetDnsRecordArgs()
        {
        }
        public static new GetDnsRecordArgs Empty => new GetDnsRecordArgs();
    }

    public sealed class GetDnsRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("dnsRecordId")]
        public Input<string>? DnsRecordId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetDnsRecordFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetDnsRecordInvokeArgs()
        {
        }
        public static new GetDnsRecordInvokeArgs Empty => new GetDnsRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsRecordResult
    {
        /// <summary>
        /// Comments or notes about the DNS record. This field has no effect on DNS responses.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// When the record comment was last modified. Omitted if there is no comment.
        /// </summary>
        public readonly string CommentModifiedOn;
        /// <summary>
        /// A valid IPv4 address.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// When the record was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Components of a CAA record.
        /// </summary>
        public readonly Outputs.GetDnsRecordDataResult Data;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? DnsRecordId;
        public readonly Outputs.GetDnsRecordFilterResult? Filter;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Extra Cloudflare-specific information about the record.
        /// </summary>
        public readonly string Meta;
        /// <summary>
        /// When the record was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// DNS record name (or @ for the zone apex) in Punycode.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
        /// </summary>
        public readonly double Priority;
        /// <summary>
        /// Whether the record can be proxied by Cloudflare or not.
        /// </summary>
        public readonly bool Proxiable;
        /// <summary>
        /// Whether the record is receiving the performance and security benefits of Cloudflare.
        /// </summary>
        public readonly bool Proxied;
        /// <summary>
        /// Settings for the DNS record.
        /// </summary>
        public readonly Outputs.GetDnsRecordSettingsResult Settings;
        /// <summary>
        /// Custom tags for the DNS record. This field has no effect on DNS responses.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// When the record tags were last modified. Omitted if there are no tags.
        /// </summary>
        public readonly string TagsModifiedOn;
        /// <summary>
        /// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
        /// </summary>
        public readonly double Ttl;
        /// <summary>
        /// Record type.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetDnsRecordResult(
            string comment,

            string commentModifiedOn,

            string content,

            string createdOn,

            Outputs.GetDnsRecordDataResult data,

            string? dnsRecordId,

            Outputs.GetDnsRecordFilterResult? filter,

            string id,

            string meta,

            string modifiedOn,

            string name,

            double priority,

            bool proxiable,

            bool proxied,

            Outputs.GetDnsRecordSettingsResult settings,

            ImmutableArray<string> tags,

            string tagsModifiedOn,

            double ttl,

            string type,

            string zoneId)
        {
            Comment = comment;
            CommentModifiedOn = commentModifiedOn;
            Content = content;
            CreatedOn = createdOn;
            Data = data;
            DnsRecordId = dnsRecordId;
            Filter = filter;
            Id = id;
            Meta = meta;
            ModifiedOn = modifiedOn;
            Name = name;
            Priority = priority;
            Proxiable = proxiable;
            Proxied = proxied;
            Settings = settings;
            Tags = tags;
            TagsModifiedOn = tagsModifiedOn;
            Ttl = ttl;
            Type = type;
            ZoneId = zoneId;
        }
    }
}
