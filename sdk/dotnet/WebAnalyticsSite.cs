// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWebAnalyticsSite = new Cloudflare.WebAnalyticsSite("example_web_analytics_site", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         AutoInstall = true,
    ///         Host = "example.com",
    ///         ZoneTag = "023e105f4ecef8ad9ca31a8372d0c353",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/webAnalyticsSite:WebAnalyticsSite example '&lt;account_id&gt;/&lt;site_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/webAnalyticsSite:WebAnalyticsSite")]
    public partial class WebAnalyticsSite : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
        /// </summary>
        [Output("autoInstall")]
        public Output<bool?> AutoInstall { get; private set; } = null!;

        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Enables or disables RUM. This option can be used only when AutoInstall is set to true.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The hostname to use for gray-clouded sites.
        /// </summary>
        [Output("host")]
        public Output<string?> Host { get; private set; } = null!;

        /// <summary>
        /// If enabled, the JavaScript snippet will not be injected for visitors from the EU.
        /// </summary>
        [Output("lite")]
        public Output<bool?> Lite { get; private set; } = null!;

        /// <summary>
        /// A list of rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.WebAnalyticsSiteRule>> Rules { get; private set; } = null!;

        [Output("ruleset")]
        public Output<Outputs.WebAnalyticsSiteRuleset> Ruleset { get; private set; } = null!;

        /// <summary>
        /// The Web Analytics site identifier.
        /// </summary>
        [Output("siteTag")]
        public Output<string> SiteTag { get; private set; } = null!;

        /// <summary>
        /// The Web Analytics site token.
        /// </summary>
        [Output("siteToken")]
        public Output<string> SiteToken { get; private set; } = null!;

        /// <summary>
        /// Encoded JavaScript snippet.
        /// </summary>
        [Output("snippet")]
        public Output<string> Snippet { get; private set; } = null!;

        /// <summary>
        /// The zone identifier.
        /// </summary>
        [Output("zoneTag")]
        public Output<string?> ZoneTag { get; private set; } = null!;


        /// <summary>
        /// Create a WebAnalyticsSite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAnalyticsSite(string name, WebAnalyticsSiteArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/webAnalyticsSite:WebAnalyticsSite", name, args ?? new WebAnalyticsSiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAnalyticsSite(string name, Input<string> id, WebAnalyticsSiteState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/webAnalyticsSite:WebAnalyticsSite", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAnalyticsSite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAnalyticsSite Get(string name, Input<string> id, WebAnalyticsSiteState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAnalyticsSite(name, id, state, options);
        }
    }

    public sealed class WebAnalyticsSiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
        /// </summary>
        [Input("autoInstall")]
        public Input<bool>? AutoInstall { get; set; }

        /// <summary>
        /// Enables or disables RUM. This option can be used only when AutoInstall is set to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The hostname to use for gray-clouded sites.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// If enabled, the JavaScript snippet will not be injected for visitors from the EU.
        /// </summary>
        [Input("lite")]
        public Input<bool>? Lite { get; set; }

        /// <summary>
        /// The zone identifier.
        /// </summary>
        [Input("zoneTag")]
        public Input<string>? ZoneTag { get; set; }

        public WebAnalyticsSiteArgs()
        {
        }
        public static new WebAnalyticsSiteArgs Empty => new WebAnalyticsSiteArgs();
    }

    public sealed class WebAnalyticsSiteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// If enabled, the JavaScript snippet is automatically injected for orange-clouded sites.
        /// </summary>
        [Input("autoInstall")]
        public Input<bool>? AutoInstall { get; set; }

        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Enables or disables RUM. This option can be used only when AutoInstall is set to true.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The hostname to use for gray-clouded sites.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// If enabled, the JavaScript snippet will not be injected for visitors from the EU.
        /// </summary>
        [Input("lite")]
        public Input<bool>? Lite { get; set; }

        [Input("rules")]
        private InputList<Inputs.WebAnalyticsSiteRuleGetArgs>? _rules;

        /// <summary>
        /// A list of rules.
        /// </summary>
        public InputList<Inputs.WebAnalyticsSiteRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WebAnalyticsSiteRuleGetArgs>());
            set => _rules = value;
        }

        [Input("ruleset")]
        public Input<Inputs.WebAnalyticsSiteRulesetGetArgs>? Ruleset { get; set; }

        /// <summary>
        /// The Web Analytics site identifier.
        /// </summary>
        [Input("siteTag")]
        public Input<string>? SiteTag { get; set; }

        /// <summary>
        /// The Web Analytics site token.
        /// </summary>
        [Input("siteToken")]
        public Input<string>? SiteToken { get; set; }

        /// <summary>
        /// Encoded JavaScript snippet.
        /// </summary>
        [Input("snippet")]
        public Input<string>? Snippet { get; set; }

        /// <summary>
        /// The zone identifier.
        /// </summary>
        [Input("zoneTag")]
        public Input<string>? ZoneTag { get; set; }

        public WebAnalyticsSiteState()
        {
        }
        public static new WebAnalyticsSiteState Empty => new WebAnalyticsSiteState();
    }
}
