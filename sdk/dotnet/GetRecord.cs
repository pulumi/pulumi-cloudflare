// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetRecord
    {
        /// <summary>
        /// Use this data source to lookup a single [DNS Record](https://api.cloudflare.com/#dns-records-for-a-zone-properties).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Cloudflare.GetRecord.Invoke(new()
        ///     {
        ///         Hostname = "example.com",
        ///         ZoneId = "0da42c8d2132a9ddaf714f9e7c920711",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetRecordResult> InvokeAsync(GetRecordArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordResult>("cloudflare:index/getRecord:getRecord", args ?? new GetRecordArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to lookup a single [DNS Record](https://api.cloudflare.com/#dns-records-for-a-zone-properties).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Cloudflare.GetRecord.Invoke(new()
        ///     {
        ///         Hostname = "example.com",
        ///         ZoneId = "0da42c8d2132a9ddaf714f9e7c920711",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetRecordResult> Invoke(GetRecordInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordResult>("cloudflare:index/getRecord:getRecord", args ?? new GetRecordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Content to filter record results on.
        /// </summary>
        [Input("content")]
        public string? Content { get; set; }

        /// <summary>
        /// Hostname to filter DNS record results on.
        /// </summary>
        [Input("hostname", required: true)]
        public string Hostname { get; set; } = null!;

        /// <summary>
        /// DNS priority to filter record results on.
        /// </summary>
        [Input("priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// DNS record type to filter record results on. Defaults to `A`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetRecordArgs()
        {
        }
        public static new GetRecordArgs Empty => new GetRecordArgs();
    }

    public sealed class GetRecordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Content to filter record results on.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Hostname to filter DNS record results on.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// DNS priority to filter record results on.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// DNS record type to filter record results on. Defaults to `A`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetRecordInvokeArgs()
        {
        }
        public static new GetRecordInvokeArgs Empty => new GetRecordInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordResult
    {
        /// <summary>
        /// Content to filter record results on.
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// Hostname to filter DNS record results on.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Locked status of the found DNS record.
        /// </summary>
        public readonly bool Locked;
        /// <summary>
        /// DNS priority to filter record results on.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// Proxiable status of the found DNS record.
        /// </summary>
        public readonly bool Proxiable;
        /// <summary>
        /// Proxied status of the found DNS record.
        /// </summary>
        public readonly bool Proxied;
        /// <summary>
        /// TTL of the found DNS record.
        /// </summary>
        public readonly int Ttl;
        /// <summary>
        /// DNS record type to filter record results on. Defaults to `A`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Value of the found DNS record.
        /// </summary>
        public readonly string Value;
        /// <summary>
        /// The zone identifier to target for the resource.
        /// </summary>
        public readonly string ZoneId;
        /// <summary>
        /// Zone name of the found DNS record.
        /// </summary>
        public readonly string ZoneName;

        [OutputConstructor]
        private GetRecordResult(
            string? content,

            string hostname,

            string id,

            bool locked,

            int? priority,

            bool proxiable,

            bool proxied,

            int ttl,

            string? type,

            string value,

            string zoneId,

            string zoneName)
        {
            Content = content;
            Hostname = hostname;
            Id = id;
            Locked = locked;
            Priority = priority;
            Proxiable = proxiable;
            Proxied = proxied;
            Ttl = ttl;
            Type = type;
            Value = value;
            ZoneId = zoneId;
            ZoneName = zoneName;
        }
    }
}
