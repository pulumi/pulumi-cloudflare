// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Device Dex Test resource. Device Dex Tests allow for building location-aware device settings policies.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Cloudflare.DeviceDexTest("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Name = "GET homepage",
    ///         Description = "Send a HTTP GET request to the home endpoint every half hour.",
    ///         Interval = "0h30m0s",
    ///         Enabled = true,
    ///         Data = new Cloudflare.Inputs.DeviceDexTestDataArgs
    ///         {
    ///             Host = "https://example.com/home",
    ///             Kind = "http",
    ///             Method = "GET",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/deviceDexTest:DeviceDexTest example &lt;account_id&gt;/&lt;device_dex_test_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/deviceDexTest:DeviceDexTest")]
    public partial class DeviceDexTest : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the Dex Test was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Output("data")]
        public Output<Outputs.DeviceDexTestData> Data { get; private set; } = null!;

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Output("interval")]
        public Output<string> Interval { get; private set; } = null!;

        /// <summary>
        /// The name of the Device Dex Test. Must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the Dex Test was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceDexTest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceDexTest(string name, DeviceDexTestArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/deviceDexTest:DeviceDexTest", name, args ?? new DeviceDexTestArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceDexTest(string name, Input<string> id, DeviceDexTestState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/deviceDexTest:DeviceDexTest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceDexTest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceDexTest Get(string name, Input<string> id, DeviceDexTestState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceDexTest(name, id, state, options);
        }
    }

    public sealed class DeviceDexTestArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Input("data", required: true)]
        public Input<Inputs.DeviceDexTestDataArgs> Data { get; set; } = null!;

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Input("interval", required: true)]
        public Input<string> Interval { get; set; } = null!;

        /// <summary>
        /// The name of the Device Dex Test. Must be unique.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DeviceDexTestArgs()
        {
        }
        public static new DeviceDexTestArgs Empty => new DeviceDexTestArgs();
    }

    public sealed class DeviceDexTestState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Timestamp of when the Dex Test was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        [Input("data")]
        public Input<Inputs.DeviceDexTestDataGetArgs>? Data { get; set; }

        /// <summary>
        /// Additional details about the test.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// How often the test will run.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The name of the Device Dex Test. Must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Timestamp of when the Dex Test was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        public DeviceDexTestState()
        {
        }
        public static new DeviceDexTestState Empty => new DeviceDexTestState();
    }
}
