// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/imageVariant:ImageVariant example '&lt;account_id&gt;/&lt;variant_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/imageVariant:ImageVariant")]
    public partial class ImageVariant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the variant can access an image without a signature, regardless of image access control.
        /// </summary>
        [Output("neverRequireSignedUrls")]
        public Output<bool> NeverRequireSignedUrls { get; private set; } = null!;

        /// <summary>
        /// Allows you to define image resizing sizes for different use cases.
        /// </summary>
        [Output("options")]
        public Output<Outputs.ImageVariantOptions> Options { get; private set; } = null!;

        [Output("variant")]
        public Output<Outputs.ImageVariantVariant> Variant { get; private set; } = null!;


        /// <summary>
        /// Create a ImageVariant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageVariant(string name, ImageVariantArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/imageVariant:ImageVariant", name, args ?? new ImageVariantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageVariant(string name, Input<string> id, ImageVariantState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/imageVariant:ImageVariant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageVariant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageVariant Get(string name, Input<string> id, ImageVariantState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageVariant(name, id, state, options);
        }
    }

    public sealed class ImageVariantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Indicates whether the variant can access an image without a signature, regardless of image access control.
        /// </summary>
        [Input("neverRequireSignedUrls")]
        public Input<bool>? NeverRequireSignedUrls { get; set; }

        /// <summary>
        /// Allows you to define image resizing sizes for different use cases.
        /// </summary>
        [Input("options", required: true)]
        public Input<Inputs.ImageVariantOptionsArgs> Options { get; set; } = null!;

        public ImageVariantArgs()
        {
        }
        public static new ImageVariantArgs Empty => new ImageVariantArgs();
    }

    public sealed class ImageVariantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Indicates whether the variant can access an image without a signature, regardless of image access control.
        /// </summary>
        [Input("neverRequireSignedUrls")]
        public Input<bool>? NeverRequireSignedUrls { get; set; }

        /// <summary>
        /// Allows you to define image resizing sizes for different use cases.
        /// </summary>
        [Input("options")]
        public Input<Inputs.ImageVariantOptionsGetArgs>? Options { get; set; }

        [Input("variant")]
        public Input<Inputs.ImageVariantVariantGetArgs>? Variant { get; set; }

        public ImageVariantState()
        {
        }
        public static new ImageVariantState Empty => new ImageVariantState();
    }
}
