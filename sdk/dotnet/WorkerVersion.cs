// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workerVersion:WorkerVersion example '&lt;account_id&gt;/&lt;worker_id&gt;/&lt;version_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/workerVersion:WorkerVersion")]
    public partial class WorkerVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Metadata about the version.
        /// </summary>
        [Output("annotations")]
        public Output<Outputs.WorkerVersionAnnotations> Annotations { get; private set; } = null!;

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Output("assets")]
        public Output<Outputs.WorkerVersionAssets?> Assets { get; private set; } = null!;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        [Output("bindings")]
        public Output<ImmutableArray<Outputs.WorkerVersionBinding>> Bindings { get; private set; } = null!;

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Output("compatibilityDate")]
        public Output<string?> CompatibilityDate { get; private set; } = null!;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        [Output("compatibilityFlags")]
        public Output<ImmutableArray<string>> CompatibilityFlags { get; private set; } = null!;

        /// <summary>
        /// When the version was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Resource limits enforced at runtime.
        /// </summary>
        [Output("limits")]
        public Output<Outputs.WorkerVersionLimits> Limits { get; private set; } = null!;

        /// <summary>
        /// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
        /// </summary>
        [Output("mainModule")]
        public Output<string?> MainModule { get; private set; } = null!;

        /// <summary>
        /// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
        /// </summary>
        [Output("migrations")]
        public Output<Outputs.WorkerVersionMigrations?> Migrations { get; private set; } = null!;

        /// <summary>
        /// Code, sourcemaps, and other content used at runtime.
        /// 
        /// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
        /// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
        /// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
        /// included as modules named `_headers` and `_redirects` with content type `text/plain`.
        /// </summary>
        [Output("modules")]
        public Output<ImmutableArray<Outputs.WorkerVersionModule>> Modules { get; private set; } = null!;

        /// <summary>
        /// The integer version number, starting from one.
        /// </summary>
        [Output("number")]
        public Output<int> Number { get; private set; } = null!;

        /// <summary>
        /// Placement settings for the version.
        /// </summary>
        [Output("placement")]
        public Output<Outputs.WorkerVersionPlacement?> Placement { get; private set; } = null!;

        /// <summary>
        /// The client used to create the version.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Usage model for the version.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Output("usageModel")]
        public Output<string> UsageModel { get; private set; } = null!;

        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        [Output("workerId")]
        public Output<string> WorkerId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkerVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkerVersion(string name, WorkerVersionArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workerVersion:WorkerVersion", name, args ?? new WorkerVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkerVersion(string name, Input<string> id, WorkerVersionState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workerVersion:WorkerVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkerVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkerVersion Get(string name, Input<string> id, WorkerVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkerVersion(name, id, state, options);
        }
    }

    public sealed class WorkerVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Metadata about the version.
        /// </summary>
        [Input("annotations")]
        public Input<Inputs.WorkerVersionAnnotationsArgs>? Annotations { get; set; }

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkerVersionAssetsArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkerVersionBindingArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkerVersionBindingArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkerVersionBindingArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// Resource limits enforced at runtime.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.WorkerVersionLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
        /// </summary>
        [Input("migrations")]
        public Input<Inputs.WorkerVersionMigrationsArgs>? Migrations { get; set; }

        [Input("modules")]
        private InputList<Inputs.WorkerVersionModuleArgs>? _modules;

        /// <summary>
        /// Code, sourcemaps, and other content used at runtime.
        /// 
        /// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
        /// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
        /// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
        /// included as modules named `_headers` and `_redirects` with content type `text/plain`.
        /// </summary>
        public InputList<Inputs.WorkerVersionModuleArgs> Modules
        {
            get => _modules ?? (_modules = new InputList<Inputs.WorkerVersionModuleArgs>());
            set => _modules = value;
        }

        /// <summary>
        /// Placement settings for the version.
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkerVersionPlacementArgs>? Placement { get; set; }

        /// <summary>
        /// Usage model for the version.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        [Input("workerId", required: true)]
        public Input<string> WorkerId { get; set; } = null!;

        public WorkerVersionArgs()
        {
        }
        public static new WorkerVersionArgs Empty => new WorkerVersionArgs();
    }

    public sealed class WorkerVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Metadata about the version.
        /// </summary>
        [Input("annotations")]
        public Input<Inputs.WorkerVersionAnnotationsGetArgs>? Annotations { get; set; }

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkerVersionAssetsGetArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkerVersionBindingGetArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkerVersionBindingGetArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkerVersionBindingGetArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// When the version was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Resource limits enforced at runtime.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.WorkerVersionLimitsGetArgs>? Limits { get; set; }

        /// <summary>
        /// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
        /// </summary>
        [Input("migrations")]
        public Input<Inputs.WorkerVersionMigrationsGetArgs>? Migrations { get; set; }

        [Input("modules")]
        private InputList<Inputs.WorkerVersionModuleGetArgs>? _modules;

        /// <summary>
        /// Code, sourcemaps, and other content used at runtime.
        /// 
        /// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
        /// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure 
        /// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be 
        /// included as modules named `_headers` and `_redirects` with content type `text/plain`.
        /// </summary>
        public InputList<Inputs.WorkerVersionModuleGetArgs> Modules
        {
            get => _modules ?? (_modules = new InputList<Inputs.WorkerVersionModuleGetArgs>());
            set => _modules = value;
        }

        /// <summary>
        /// The integer version number, starting from one.
        /// </summary>
        [Input("number")]
        public Input<int>? Number { get; set; }

        /// <summary>
        /// Placement settings for the version.
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkerVersionPlacementGetArgs>? Placement { get; set; }

        /// <summary>
        /// The client used to create the version.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Usage model for the version.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        [Input("workerId")]
        public Input<string>? WorkerId { get; set; }

        public WorkerVersionState()
        {
        }
        public static new WorkerVersionState Empty => new WorkerVersionState();
    }
}
