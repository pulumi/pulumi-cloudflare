// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetDnsFirewall
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsFirewall = Cloudflare.GetDnsFirewall.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsFirewallId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsFirewallResult> InvokeAsync(GetDnsFirewallArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsFirewallResult>("cloudflare:index/getDnsFirewall:getDnsFirewall", args ?? new GetDnsFirewallArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsFirewall = Cloudflare.GetDnsFirewall.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsFirewallId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsFirewallResult> Invoke(GetDnsFirewallInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsFirewallResult>("cloudflare:index/getDnsFirewall:getDnsFirewall", args ?? new GetDnsFirewallInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsFirewall = Cloudflare.GetDnsFirewall.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DnsFirewallId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsFirewallResult> Invoke(GetDnsFirewallInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsFirewallResult>("cloudflare:index/getDnsFirewall:getDnsFirewall", args ?? new GetDnsFirewallInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsFirewallArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("dnsFirewallId")]
        public string? DnsFirewallId { get; set; }

        public GetDnsFirewallArgs()
        {
        }
        public static new GetDnsFirewallArgs Empty => new GetDnsFirewallArgs();
    }

    public sealed class GetDnsFirewallInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("dnsFirewallId")]
        public Input<string>? DnsFirewallId { get; set; }

        public GetDnsFirewallInvokeArgs()
        {
        }
        public static new GetDnsFirewallInvokeArgs Empty => new GetDnsFirewallInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsFirewallResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Attack mitigation settings
        /// </summary>
        public readonly Outputs.GetDnsFirewallAttackMitigationResult AttackMitigation;
        /// <summary>
        /// Whether to refuse to answer queries for the ANY type
        /// </summary>
        public readonly bool DeprecateAnyRequests;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string? DnsFirewallId;
        public readonly ImmutableArray<string> DnsFirewallIps;
        /// <summary>
        /// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
        /// </summary>
        public readonly bool EcsFallback;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// By default, Cloudflare attempts to cache responses for as long as
        /// indicated by the TTL received from upstream nameservers. This setting
        /// sets an upper bound on this duration. For caching purposes, higher TTLs
        /// will be decreased to the maximum value defined by this setting.
        /// </summary>
        public readonly double MaximumCacheTtl;
        public readonly double MinimumCacheTtl;
        public readonly string ModifiedOn;
        public readonly string Name;
        public readonly double NegativeCacheTtl;
        public readonly double Ratelimit;
        public readonly double Retries;
        public readonly ImmutableArray<string> UpstreamIps;

        [OutputConstructor]
        private GetDnsFirewallResult(
            string accountId,

            Outputs.GetDnsFirewallAttackMitigationResult attackMitigation,

            bool deprecateAnyRequests,

            string? dnsFirewallId,

            ImmutableArray<string> dnsFirewallIps,

            bool ecsFallback,

            string id,

            double maximumCacheTtl,

            double minimumCacheTtl,

            string modifiedOn,

            string name,

            double negativeCacheTtl,

            double ratelimit,

            double retries,

            ImmutableArray<string> upstreamIps)
        {
            AccountId = accountId;
            AttackMitigation = attackMitigation;
            DeprecateAnyRequests = deprecateAnyRequests;
            DnsFirewallId = dnsFirewallId;
            DnsFirewallIps = dnsFirewallIps;
            EcsFallback = ecsFallback;
            Id = id;
            MaximumCacheTtl = maximumCacheTtl;
            MinimumCacheTtl = minimumCacheTtl;
            ModifiedOn = modifiedOn;
            Name = name;
            NegativeCacheTtl = negativeCacheTtl;
            Ratelimit = ratelimit;
            Retries = retries;
            UpstreamIps = upstreamIps;
        }
    }
}
