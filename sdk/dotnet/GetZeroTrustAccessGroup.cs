// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustAccessGroup
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessGroup = Cloudflare.GetZeroTrustAccessGroup.Invoke(new()
        ///     {
        ///         GroupId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustAccessGroupResult> InvokeAsync(GetZeroTrustAccessGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustAccessGroupResult>("cloudflare:index/getZeroTrustAccessGroup:getZeroTrustAccessGroup", args ?? new GetZeroTrustAccessGroupArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessGroup = Cloudflare.GetZeroTrustAccessGroup.Invoke(new()
        ///     {
        ///         GroupId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustAccessGroupResult> Invoke(GetZeroTrustAccessGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustAccessGroupResult>("cloudflare:index/getZeroTrustAccessGroup:getZeroTrustAccessGroup", args ?? new GetZeroTrustAccessGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessGroup = Cloudflare.GetZeroTrustAccessGroup.Invoke(new()
        ///     {
        ///         GroupId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustAccessGroupResult> Invoke(GetZeroTrustAccessGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustAccessGroupResult>("cloudflare:index/getZeroTrustAccessGroup:getZeroTrustAccessGroup", args ?? new GetZeroTrustAccessGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustAccessGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        [Input("filter")]
        public Inputs.GetZeroTrustAccessGroupFilterArgs? Filter { get; set; }

        /// <summary>
        /// UUID
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetZeroTrustAccessGroupArgs()
        {
        }
        public static new GetZeroTrustAccessGroupArgs Empty => new GetZeroTrustAccessGroupArgs();
    }

    public sealed class GetZeroTrustAccessGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetZeroTrustAccessGroupFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// UUID
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetZeroTrustAccessGroupInvokeArgs()
        {
        }
        public static new GetZeroTrustAccessGroupInvokeArgs Empty => new GetZeroTrustAccessGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustAccessGroupResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        public readonly string CreatedAt;
        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustAccessGroupExcludeResult> Excludes;
        public readonly Outputs.GetZeroTrustAccessGroupFilterResult? Filter;
        /// <summary>
        /// UUID
        /// </summary>
        public readonly string? GroupId;
        /// <summary>
        /// UUID
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustAccessGroupIncludeResult> Includes;
        /// <summary>
        /// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustAccessGroupIsDefaultResult> IsDefaults;
        /// <summary>
        /// The name of the Access group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustAccessGroupRequireResult> Requires;
        public readonly string UpdatedAt;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetZeroTrustAccessGroupResult(
            string? accountId,

            string createdAt,

            ImmutableArray<Outputs.GetZeroTrustAccessGroupExcludeResult> excludes,

            Outputs.GetZeroTrustAccessGroupFilterResult? filter,

            string? groupId,

            string id,

            ImmutableArray<Outputs.GetZeroTrustAccessGroupIncludeResult> includes,

            ImmutableArray<Outputs.GetZeroTrustAccessGroupIsDefaultResult> isDefaults,

            string name,

            ImmutableArray<Outputs.GetZeroTrustAccessGroupRequireResult> requires,

            string updatedAt,

            string? zoneId)
        {
            AccountId = accountId;
            CreatedAt = createdAt;
            Excludes = excludes;
            Filter = filter;
            GroupId = groupId;
            Id = id;
            Includes = includes;
            IsDefaults = isDefaults;
            Name = name;
            Requires = requires;
            UpdatedAt = updatedAt;
            ZoneId = zoneId;
        }
    }
}
