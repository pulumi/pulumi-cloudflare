// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustAccessServiceToken = new Cloudflare.ZeroTrustAccessServiceToken("example_zero_trust_access_service_token", new()
    ///     {
    ///         Name = "CI/CD token",
    ///         ZoneId = "zone_id",
    ///         Duration = "60m",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken example '&lt;{accounts|zones}/{account_id|zone_id}&gt;/&lt;service_token_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken")]
    public partial class ZeroTrustAccessServiceToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The Client ID for the service token. Access will check for this value in the `CF-Access-Client-ID` request header.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// The Client Secret for the service token. Access will check for this value in the `CF-Access-Client-Secret` request header.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
        /// </summary>
        [Output("duration")]
        public Output<string> Duration { get; private set; } = null!;

        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        [Output("lastSeenAt")]
        public Output<string> LastSeenAt { get; private set; } = null!;

        /// <summary>
        /// The name of the service token.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustAccessServiceToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustAccessServiceToken(string name, ZeroTrustAccessServiceTokenArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken", name, args ?? new ZeroTrustAccessServiceTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustAccessServiceToken(string name, Input<string> id, ZeroTrustAccessServiceTokenState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessServiceToken:AccessServiceToken" },
                },
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustAccessServiceToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustAccessServiceToken Get(string name, Input<string> id, ZeroTrustAccessServiceTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustAccessServiceToken(name, id, state, options);
        }
    }

    public sealed class ZeroTrustAccessServiceTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The name of the service token.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustAccessServiceTokenArgs()
        {
        }
        public static new ZeroTrustAccessServiceTokenArgs Empty => new ZeroTrustAccessServiceTokenArgs();
    }

    public sealed class ZeroTrustAccessServiceTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Client ID for the service token. Access will check for this value in the `CF-Access-Client-ID` request header.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// The Client Secret for the service token. Access will check for this value in the `CF-Access-Client-Secret` request header.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        [Input("lastSeenAt")]
        public Input<string>? LastSeenAt { get; set; }

        /// <summary>
        /// The name of the service token.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustAccessServiceTokenState()
        {
        }
        public static new ZeroTrustAccessServiceTokenState Empty => new ZeroTrustAccessServiceTokenState();
    }
}
