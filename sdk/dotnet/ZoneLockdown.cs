// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZoneLockdown = new Cloudflare.ZoneLockdown("example_zone_lockdown", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Configurations = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZoneLockdownConfigurationArgs
    ///             {
    ///                 Target = "ip",
    ///                 Value = "198.51.100.4",
    ///             },
    ///         },
    ///         Urls = new[]
    ///         {
    ///             "shop.example.com/*",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zoneLockdown:ZoneLockdown example '&lt;zone_id&gt;/&lt;lock_downs_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zoneLockdown:ZoneLockdown")]
    public partial class ZoneLockdown : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
        /// </summary>
        [Output("configurations")]
        public Output<ImmutableArray<Outputs.ZoneLockdownConfiguration>> Configurations { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// An informative summary of the rule.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
        /// </summary>
        [Output("urls")]
        public Output<ImmutableArray<string>> Urls { get; private set; } = null!;

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneLockdown resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneLockdown(string name, ZoneLockdownArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneLockdown:ZoneLockdown", name, args ?? new ZoneLockdownArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZoneLockdown(string name, Input<string> id, ZoneLockdownState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneLockdown:ZoneLockdown", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneLockdown resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneLockdown Get(string name, Input<string> id, ZoneLockdownState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneLockdown(name, id, state, options);
        }
    }

    public sealed class ZoneLockdownArgs : global::Pulumi.ResourceArgs
    {
        [Input("configurations", required: true)]
        private InputList<Inputs.ZoneLockdownConfigurationArgs>? _configurations;

        /// <summary>
        /// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
        /// </summary>
        public InputList<Inputs.ZoneLockdownConfigurationArgs> Configurations
        {
            get => _configurations ?? (_configurations = new InputList<Inputs.ZoneLockdownConfigurationArgs>());
            set => _configurations = value;
        }

        [Input("urls", required: true)]
        private InputList<string>? _urls;

        /// <summary>
        /// The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ZoneLockdownArgs()
        {
        }
        public static new ZoneLockdownArgs Empty => new ZoneLockdownArgs();
    }

    public sealed class ZoneLockdownState : global::Pulumi.ResourceArgs
    {
        [Input("configurations")]
        private InputList<Inputs.ZoneLockdownConfigurationGetArgs>? _configurations;

        /// <summary>
        /// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
        /// </summary>
        public InputList<Inputs.ZoneLockdownConfigurationGetArgs> Configurations
        {
            get => _configurations ?? (_configurations = new InputList<Inputs.ZoneLockdownConfigurationGetArgs>());
            set => _configurations = value;
        }

        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// An informative summary of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("urls")]
        private InputList<string>? _urls;

        /// <summary>
        /// The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZoneLockdownState()
        {
        }
        public static new ZoneLockdownState Empty => new ZoneLockdownState();
    }
}
