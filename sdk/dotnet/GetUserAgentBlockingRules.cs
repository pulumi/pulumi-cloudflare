// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetUserAgentBlockingRules
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUserAgentBlockingRules = Cloudflare.GetUserAgentBlockingRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Description = "abusive",
        ///         Paused = false,
        ///         UserAgent = "Safari",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserAgentBlockingRulesResult> InvokeAsync(GetUserAgentBlockingRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserAgentBlockingRulesResult>("cloudflare:index/getUserAgentBlockingRules:getUserAgentBlockingRules", args ?? new GetUserAgentBlockingRulesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUserAgentBlockingRules = Cloudflare.GetUserAgentBlockingRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Description = "abusive",
        ///         Paused = false,
        ///         UserAgent = "Safari",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserAgentBlockingRulesResult> Invoke(GetUserAgentBlockingRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserAgentBlockingRulesResult>("cloudflare:index/getUserAgentBlockingRules:getUserAgentBlockingRules", args ?? new GetUserAgentBlockingRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleUserAgentBlockingRules = Cloudflare.GetUserAgentBlockingRules.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Description = "abusive",
        ///         Paused = false,
        ///         UserAgent = "Safari",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserAgentBlockingRulesResult> Invoke(GetUserAgentBlockingRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserAgentBlockingRulesResult>("cloudflare:index/getUserAgentBlockingRules:getUserAgentBlockingRules", args ?? new GetUserAgentBlockingRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserAgentBlockingRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        [Input("paused")]
        public bool? Paused { get; set; }

        /// <summary>
        /// A string to search for in the user agent values of existing rules.
        /// </summary>
        [Input("userAgent")]
        public string? UserAgent { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetUserAgentBlockingRulesArgs()
        {
        }
        public static new GetUserAgentBlockingRulesArgs Empty => new GetUserAgentBlockingRulesArgs();
    }

    public sealed class GetUserAgentBlockingRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// A string to search for in the user agent values of existing rules.
        /// </summary>
        [Input("userAgent")]
        public Input<string>? UserAgent { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetUserAgentBlockingRulesInvokeArgs()
        {
        }
        public static new GetUserAgentBlockingRulesInvokeArgs Empty => new GetUserAgentBlockingRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserAgentBlockingRulesResult
    {
        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        public readonly bool? Paused;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserAgentBlockingRulesResultResult> Results;
        /// <summary>
        /// A string to search for in the user agent values of existing rules.
        /// </summary>
        public readonly string? UserAgent;
        /// <summary>
        /// Defines an identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetUserAgentBlockingRulesResult(
            string? description,

            string id,

            int? maxItems,

            bool? paused,

            ImmutableArray<Outputs.GetUserAgentBlockingRulesResultResult> results,

            string? userAgent,

            string zoneId)
        {
            Description = description;
            Id = id;
            MaxItems = maxItems;
            Paused = paused;
            Results = results;
            UserAgent = userAgent;
            ZoneId = zoneId;
        }
    }
}
