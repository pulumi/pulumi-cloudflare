// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetSchemaValidationSchemas
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSchemaValidationSchemas = Cloudflare.GetSchemaValidationSchemas.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SchemaId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         OmitSource = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSchemaValidationSchemasResult> InvokeAsync(GetSchemaValidationSchemasArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaValidationSchemasResult>("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", args ?? new GetSchemaValidationSchemasArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSchemaValidationSchemas = Cloudflare.GetSchemaValidationSchemas.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SchemaId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         OmitSource = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchemaValidationSchemasResult> Invoke(GetSchemaValidationSchemasInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaValidationSchemasResult>("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", args ?? new GetSchemaValidationSchemasInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSchemaValidationSchemas = Cloudflare.GetSchemaValidationSchemas.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SchemaId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         OmitSource = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSchemaValidationSchemasResult> Invoke(GetSchemaValidationSchemasInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaValidationSchemasResult>("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", args ?? new GetSchemaValidationSchemasInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaValidationSchemasArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetSchemaValidationSchemasFilterArgs? Filter { get; set; }

        /// <summary>
        /// Omit the source-files of schemas and only retrieve their meta-data.
        /// </summary>
        [Input("omitSource")]
        public bool? OmitSource { get; set; }

        /// <summary>
        /// UUID.
        /// </summary>
        [Input("schemaId")]
        public string? SchemaId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetSchemaValidationSchemasArgs()
        {
        }
        public static new GetSchemaValidationSchemasArgs Empty => new GetSchemaValidationSchemasArgs();
    }

    public sealed class GetSchemaValidationSchemasInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetSchemaValidationSchemasFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Omit the source-files of schemas and only retrieve their meta-data.
        /// </summary>
        [Input("omitSource")]
        public Input<bool>? OmitSource { get; set; }

        /// <summary>
        /// UUID.
        /// </summary>
        [Input("schemaId")]
        public Input<string>? SchemaId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetSchemaValidationSchemasInvokeArgs()
        {
        }
        public static new GetSchemaValidationSchemasInvokeArgs Empty => new GetSchemaValidationSchemasInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaValidationSchemasResult
    {
        public readonly string CreatedAt;
        public readonly Outputs.GetSchemaValidationSchemasFilterResult? Filter;
        /// <summary>
        /// UUID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of the schema
        /// Available values: "openapi_v3".
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// A human-readable name for the schema
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Omit the source-files of schemas and only retrieve their meta-data.
        /// </summary>
        public readonly bool OmitSource;
        /// <summary>
        /// UUID.
        /// </summary>
        public readonly string SchemaId;
        /// <summary>
        /// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// An indicator if this schema is enabled
        /// </summary>
        public readonly bool ValidationEnabled;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetSchemaValidationSchemasResult(
            string createdAt,

            Outputs.GetSchemaValidationSchemasFilterResult? filter,

            string id,

            string kind,

            string name,

            bool omitSource,

            string schemaId,

            string source,

            bool validationEnabled,

            string zoneId)
        {
            CreatedAt = createdAt;
            Filter = filter;
            Id = id;
            Kind = kind;
            Name = name;
            OmitSource = omitSource;
            SchemaId = schemaId;
            Source = source;
            ValidationEnabled = validationEnabled;
            ZoneId = zoneId;
        }
    }
}
