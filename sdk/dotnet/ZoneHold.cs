// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZoneHold = new Cloudflare.ZoneHold("example_zone_hold", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zoneHold:ZoneHold example '&lt;zone_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zoneHold:ZoneHold")]
    public partial class ZoneHold : global::Pulumi.CustomResource
    {
        [Output("hold")]
        public Output<bool> Hold { get; private set; } = null!;

        /// <summary>
        /// If `HoldAfter` is provided and future-dated, the hold will be temporarily disabled,
        /// then automatically re-enabled by the system at the time specified
        /// in this RFC3339-formatted timestamp. A past-dated `HoldAfter` value will have
        /// no effect on an existing, enabled hold. Providing an empty string will set its value
        /// to the current time.
        /// </summary>
        [Output("holdAfter")]
        public Output<string> HoldAfter { get; private set; } = null!;

        /// <summary>
        /// If `True`, the zone hold will extend to block any subdomain of the given zone, as well
        /// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
        /// 'example.com' and include_subdomains=true will block 'example.com',
        /// 'staging.example.com', 'api.staging.example.com', etc.
        /// </summary>
        [Output("includeSubdomains")]
        public Output<bool> IncludeSubdomains { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneHold resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneHold(string name, ZoneHoldArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneHold:ZoneHold", name, args ?? new ZoneHoldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZoneHold(string name, Input<string> id, ZoneHoldState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneHold:ZoneHold", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneHold resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneHold Get(string name, Input<string> id, ZoneHoldState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneHold(name, id, state, options);
        }
    }

    public sealed class ZoneHoldArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If `HoldAfter` is provided and future-dated, the hold will be temporarily disabled,
        /// then automatically re-enabled by the system at the time specified
        /// in this RFC3339-formatted timestamp. A past-dated `HoldAfter` value will have
        /// no effect on an existing, enabled hold. Providing an empty string will set its value
        /// to the current time.
        /// </summary>
        [Input("holdAfter")]
        public Input<string>? HoldAfter { get; set; }

        /// <summary>
        /// If `True`, the zone hold will extend to block any subdomain of the given zone, as well
        /// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
        /// 'example.com' and include_subdomains=true will block 'example.com',
        /// 'staging.example.com', 'api.staging.example.com', etc.
        /// </summary>
        [Input("includeSubdomains")]
        public Input<bool>? IncludeSubdomains { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ZoneHoldArgs()
        {
        }
        public static new ZoneHoldArgs Empty => new ZoneHoldArgs();
    }

    public sealed class ZoneHoldState : global::Pulumi.ResourceArgs
    {
        [Input("hold")]
        public Input<bool>? Hold { get; set; }

        /// <summary>
        /// If `HoldAfter` is provided and future-dated, the hold will be temporarily disabled,
        /// then automatically re-enabled by the system at the time specified
        /// in this RFC3339-formatted timestamp. A past-dated `HoldAfter` value will have
        /// no effect on an existing, enabled hold. Providing an empty string will set its value
        /// to the current time.
        /// </summary>
        [Input("holdAfter")]
        public Input<string>? HoldAfter { get; set; }

        /// <summary>
        /// If `True`, the zone hold will extend to block any subdomain of the given zone, as well
        /// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
        /// 'example.com' and include_subdomains=true will block 'example.com',
        /// 'staging.example.com', 'api.staging.example.com', etc.
        /// </summary>
        [Input("includeSubdomains")]
        public Input<bool>? IncludeSubdomains { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZoneHoldState()
        {
        }
        public static new ZoneHoldState Empty => new ZoneHoldState();
    }
}
