// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetFilter
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFilter = Cloudflare.GetFilter.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         FilterId = "372e67954025e0ba6aaa6d586b9e0b61",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFilterResult> InvokeAsync(GetFilterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFilterResult>("cloudflare:index/getFilter:getFilter", args ?? new GetFilterArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFilter = Cloudflare.GetFilter.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         FilterId = "372e67954025e0ba6aaa6d586b9e0b61",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFilterResult> Invoke(GetFilterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFilterResult>("cloudflare:index/getFilter:getFilter", args ?? new GetFilterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleFilter = Cloudflare.GetFilter.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         FilterId = "372e67954025e0ba6aaa6d586b9e0b61",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFilterResult> Invoke(GetFilterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFilterResult>("cloudflare:index/getFilter:getFilter", args ?? new GetFilterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFilterArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetFilterFilterArgs? Filter { get; set; }

        /// <summary>
        /// The unique identifier of the filter.
        /// </summary>
        [Input("filterId")]
        public string? FilterId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetFilterArgs()
        {
        }
        public static new GetFilterArgs Empty => new GetFilterArgs();
    }

    public sealed class GetFilterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetFilterFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// The unique identifier of the filter.
        /// </summary>
        [Input("filterId")]
        public Input<string>? FilterId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetFilterInvokeArgs()
        {
        }
        public static new GetFilterInvokeArgs Empty => new GetFilterInvokeArgs();
    }


    [OutputType]
    public sealed class GetFilterResult
    {
        /// <summary>
        /// An informative summary of the filter.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
        /// </summary>
        public readonly string Expression;
        public readonly Outputs.GetFilterFilterResult? Filter;
        /// <summary>
        /// The unique identifier of the filter.
        /// </summary>
        public readonly string? FilterId;
        /// <summary>
        /// The unique identifier of the filter.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When true, indicates that the filter is currently paused.
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// A short reference tag. Allows you to select related filters.
        /// </summary>
        public readonly string Ref;
        /// <summary>
        /// Defines an identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetFilterResult(
            string description,

            string expression,

            Outputs.GetFilterFilterResult? filter,

            string? filterId,

            string id,

            bool paused,

            string @ref,

            string zoneId)
        {
            Description = description;
            Expression = expression;
            Filter = filter;
            FilterId = filterId;
            Id = id;
            Paused = paused;
            Ref = @ref;
            ZoneId = zoneId;
        }
    }
}
