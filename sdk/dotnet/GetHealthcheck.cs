// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetHealthcheck
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHealthcheck = Cloudflare.GetHealthcheck.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HealthcheckId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHealthcheckResult> InvokeAsync(GetHealthcheckArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHealthcheckResult>("cloudflare:index/getHealthcheck:getHealthcheck", args ?? new GetHealthcheckArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHealthcheck = Cloudflare.GetHealthcheck.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HealthcheckId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHealthcheckResult> Invoke(GetHealthcheckInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHealthcheckResult>("cloudflare:index/getHealthcheck:getHealthcheck", args ?? new GetHealthcheckInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHealthcheck = Cloudflare.GetHealthcheck.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HealthcheckId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHealthcheckResult> Invoke(GetHealthcheckInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHealthcheckResult>("cloudflare:index/getHealthcheck:getHealthcheck", args ?? new GetHealthcheckInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHealthcheckArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("healthcheckId")]
        public string? HealthcheckId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetHealthcheckArgs()
        {
        }
        public static new GetHealthcheckArgs Empty => new GetHealthcheckArgs();
    }

    public sealed class GetHealthcheckInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("healthcheckId")]
        public Input<string>? HealthcheckId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetHealthcheckInvokeArgs()
        {
        }
        public static new GetHealthcheckInvokeArgs Empty => new GetHealthcheckInvokeArgs();
    }


    [OutputType]
    public sealed class GetHealthcheckResult
    {
        /// <summary>
        /// The hostname or IP address of the origin server to run health checks on.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
        /// </summary>
        public readonly ImmutableArray<string> CheckRegions;
        /// <summary>
        /// The number of consecutive fails required from a health check before changing the health to unhealthy.
        /// </summary>
        public readonly int ConsecutiveFails;
        /// <summary>
        /// The number of consecutive successes required from a health check before changing the health to healthy.
        /// </summary>
        public readonly int ConsecutiveSuccesses;
        public readonly string CreatedOn;
        /// <summary>
        /// A human-readable description of the health check.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The current failure reason if status is unhealthy.
        /// </summary>
        public readonly string FailureReason;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? HealthcheckId;
        /// <summary>
        /// Parameters specific to an HTTP or HTTPS health check.
        /// </summary>
        public readonly Outputs.GetHealthcheckHttpConfigResult HttpConfig;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
        /// </summary>
        public readonly int Interval;
        public readonly string ModifiedOn;
        /// <summary>
        /// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
        /// </summary>
        public readonly int Retries;
        /// <summary>
        /// The current status of the origin server according to the health check.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// If suspended, no health checks are sent to the origin.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// Parameters specific to TCP health check.
        /// </summary>
        public readonly Outputs.GetHealthcheckTcpConfigResult TcpConfig;
        /// <summary>
        /// The timeout (in seconds) before marking the health check as failed.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetHealthcheckResult(
            string address,

            ImmutableArray<string> checkRegions,

            int consecutiveFails,

            int consecutiveSuccesses,

            string createdOn,

            string description,

            string failureReason,

            string? healthcheckId,

            Outputs.GetHealthcheckHttpConfigResult httpConfig,

            string id,

            int interval,

            string modifiedOn,

            string name,

            int retries,

            string status,

            bool suspended,

            Outputs.GetHealthcheckTcpConfigResult tcpConfig,

            int timeout,

            string type,

            string zoneId)
        {
            Address = address;
            CheckRegions = checkRegions;
            ConsecutiveFails = consecutiveFails;
            ConsecutiveSuccesses = consecutiveSuccesses;
            CreatedOn = createdOn;
            Description = description;
            FailureReason = failureReason;
            HealthcheckId = healthcheckId;
            HttpConfig = httpConfig;
            Id = id;
            Interval = interval;
            ModifiedOn = modifiedOn;
            Name = name;
            Retries = retries;
            Status = status;
            Suspended = suspended;
            TcpConfig = tcpConfig;
            Timeout = timeout;
            Type = type;
            ZoneId = zoneId;
        }
    }
}
