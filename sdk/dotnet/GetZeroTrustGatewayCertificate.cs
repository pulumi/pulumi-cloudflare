// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustGatewayCertificate
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayCertificate = Cloudflare.GetZeroTrustGatewayCertificate.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         CertificateId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustGatewayCertificateResult> InvokeAsync(GetZeroTrustGatewayCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustGatewayCertificateResult>("cloudflare:index/getZeroTrustGatewayCertificate:getZeroTrustGatewayCertificate", args ?? new GetZeroTrustGatewayCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayCertificate = Cloudflare.GetZeroTrustGatewayCertificate.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         CertificateId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustGatewayCertificateResult> Invoke(GetZeroTrustGatewayCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustGatewayCertificateResult>("cloudflare:index/getZeroTrustGatewayCertificate:getZeroTrustGatewayCertificate", args ?? new GetZeroTrustGatewayCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustGatewayCertificate = Cloudflare.GetZeroTrustGatewayCertificate.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         CertificateId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustGatewayCertificateResult> Invoke(GetZeroTrustGatewayCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustGatewayCertificateResult>("cloudflare:index/getZeroTrustGatewayCertificate:getZeroTrustGatewayCertificate", args ?? new GetZeroTrustGatewayCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustGatewayCertificateArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identify the certificate with a UUID.
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        public GetZeroTrustGatewayCertificateArgs()
        {
        }
        public static new GetZeroTrustGatewayCertificateArgs Empty => new GetZeroTrustGatewayCertificateArgs();
    }

    public sealed class GetZeroTrustGatewayCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identify the certificate with a UUID.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        public GetZeroTrustGatewayCertificateInvokeArgs()
        {
        }
        public static new GetZeroTrustGatewayCertificateInvokeArgs Empty => new GetZeroTrustGatewayCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustGatewayCertificateResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Indicate the read-only deployment status of the certificate on Cloudflare's edge. Gateway TLS interception can use certificates in the 'available' (previously called 'active') state.
        /// Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        /// </summary>
        public readonly string BindingStatus;
        /// <summary>
        /// Provide the CA certificate (read-only).
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Identify the certificate with a UUID.
        /// </summary>
        public readonly string? CertificateId;
        public readonly string CreatedAt;
        public readonly string ExpiresOn;
        /// <summary>
        /// Provide the SHA256 fingerprint of the certificate (read-only).
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// Identify the certificate with a UUID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `Certificate` (read-only).
        /// </summary>
        public readonly bool InUse;
        /// <summary>
        /// Indicate the organization that issued the certificate (read-only).
        /// </summary>
        public readonly string IssuerOrg;
        /// <summary>
        /// Provide the entire issuer field of the certificate (read-only).
        /// </summary>
        public readonly string IssuerRaw;
        /// <summary>
        /// Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
        /// Available values: "custom", "GatewayManaged".
        /// </summary>
        public readonly string Type;
        public readonly string UpdatedAt;
        public readonly string UploadedOn;

        [OutputConstructor]
        private GetZeroTrustGatewayCertificateResult(
            string accountId,

            string bindingStatus,

            string certificate,

            string? certificateId,

            string createdAt,

            string expiresOn,

            string fingerprint,

            string id,

            bool inUse,

            string issuerOrg,

            string issuerRaw,

            string type,

            string updatedAt,

            string uploadedOn)
        {
            AccountId = accountId;
            BindingStatus = bindingStatus;
            Certificate = certificate;
            CertificateId = certificateId;
            CreatedAt = createdAt;
            ExpiresOn = expiresOn;
            Fingerprint = fingerprint;
            Id = id;
            InUse = inUse;
            IssuerOrg = issuerOrg;
            IssuerRaw = issuerRaw;
            Type = type;
            UpdatedAt = updatedAt;
            UploadedOn = uploadedOn;
        }
    }
}
