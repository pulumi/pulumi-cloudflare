// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMtlsCertificate
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMtlsCertificate = Cloudflare.GetMtlsCertificate.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         MtlsCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMtlsCertificateResult> InvokeAsync(GetMtlsCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMtlsCertificateResult>("cloudflare:index/getMtlsCertificate:getMtlsCertificate", args ?? new GetMtlsCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMtlsCertificate = Cloudflare.GetMtlsCertificate.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         MtlsCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMtlsCertificateResult> Invoke(GetMtlsCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMtlsCertificateResult>("cloudflare:index/getMtlsCertificate:getMtlsCertificate", args ?? new GetMtlsCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMtlsCertificate = Cloudflare.GetMtlsCertificate.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         MtlsCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMtlsCertificateResult> Invoke(GetMtlsCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMtlsCertificateResult>("cloudflare:index/getMtlsCertificate:getMtlsCertificate", args ?? new GetMtlsCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMtlsCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("mtlsCertificateId")]
        public string? MtlsCertificateId { get; set; }

        public GetMtlsCertificateArgs()
        {
        }
        public static new GetMtlsCertificateArgs Empty => new GetMtlsCertificateArgs();
    }

    public sealed class GetMtlsCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("mtlsCertificateId")]
        public Input<string>? MtlsCertificateId { get; set; }

        public GetMtlsCertificateInvokeArgs()
        {
        }
        public static new GetMtlsCertificateInvokeArgs Empty => new GetMtlsCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetMtlsCertificateResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Indicates whether the certificate is a CA or leaf certificate.
        /// </summary>
        public readonly bool Ca;
        /// <summary>
        /// The uploaded root CA certificate.
        /// </summary>
        public readonly string Certificates;
        /// <summary>
        /// When the certificate expires.
        /// </summary>
        public readonly string ExpiresOn;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string? MtlsCertificateId;
        /// <summary>
        /// Optional unique name for the certificate. Only used for human readability.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The certificate serial number.
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// The type of hash used for the certificate.
        /// </summary>
        public readonly string Signature;
        /// <summary>
        /// This is the time the certificate was uploaded.
        /// </summary>
        public readonly string UploadedOn;

        [OutputConstructor]
        private GetMtlsCertificateResult(
            string accountId,

            bool ca,

            string certificates,

            string expiresOn,

            string id,

            string issuer,

            string? mtlsCertificateId,

            string name,

            string serialNumber,

            string signature,

            string uploadedOn)
        {
            AccountId = accountId;
            Ca = ca;
            Certificates = certificates;
            ExpiresOn = expiresOn;
            Id = id;
            Issuer = issuer;
            MtlsCertificateId = mtlsCertificateId;
            Name = name;
            SerialNumber = serialNumber;
            Signature = signature;
            UploadedOn = uploadedOn;
        }
    }
}
