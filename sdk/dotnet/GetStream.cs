// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetStream
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStream = Cloudflare.GetStream.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamResult> InvokeAsync(GetStreamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamResult>("cloudflare:index/getStream:getStream", args ?? new GetStreamArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStream = Cloudflare.GetStream.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamResult> Invoke(GetStreamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamResult>("cloudflare:index/getStream:getStream", args ?? new GetStreamInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStream = Cloudflare.GetStream.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamResult> Invoke(GetStreamInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamResult>("cloudflare:index/getStream:getStream", args ?? new GetStreamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier", required: true)]
        public string Identifier { get; set; } = null!;

        public GetStreamArgs()
        {
        }
        public static new GetStreamArgs Empty => new GetStreamArgs();
    }

    public sealed class GetStreamInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        public GetStreamInvokeArgs()
        {
        }
        public static new GetStreamInvokeArgs Empty => new GetStreamInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamResult
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
        /// </summary>
        public readonly ImmutableArray<string> AllowedOrigins;
        /// <summary>
        /// The date and time the media item was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        public readonly string Creator;
        /// <summary>
        /// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
        /// </summary>
        public readonly double Duration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        public readonly string Identifier;
        public readonly Outputs.GetStreamInputResult Input;
        /// <summary>
        /// The live input ID used to upload a video with Stream Live.
        /// </summary>
        public readonly string LiveInput;
        /// <summary>
        /// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
        /// </summary>
        public readonly int MaxDurationSeconds;
        /// <summary>
        /// A user modifiable key-value store used to reference other systems of record for managing videos.
        /// </summary>
        public readonly string Meta;
        /// <summary>
        /// The date and time the media item was last modified.
        /// </summary>
        public readonly string Modified;
        public readonly Outputs.GetStreamPlaybackResult Playback;
        /// <summary>
        /// The video's preview page URI. This field is omitted until encoding is complete.
        /// </summary>
        public readonly string Preview;
        /// <summary>
        /// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        public readonly bool ReadyToStream;
        /// <summary>
        /// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
        /// </summary>
        public readonly string ReadyToStreamAt;
        /// <summary>
        /// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
        /// </summary>
        public readonly bool RequireSignedUrls;
        /// <summary>
        /// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
        /// </summary>
        public readonly string ScheduledDeletion;
        /// <summary>
        /// The size of the media item in bytes.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
        /// </summary>
        public readonly Outputs.GetStreamStatusResult Status;
        /// <summary>
        /// The media item's thumbnail URI. This field is omitted until encoding is complete.
        /// </summary>
        public readonly string Thumbnail;
        /// <summary>
        /// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
        /// </summary>
        public readonly double ThumbnailTimestampPct;
        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// The date and time when the video upload URL is no longer valid for direct user uploads.
        /// </summary>
        public readonly string UploadExpiry;
        /// <summary>
        /// The date and time the media item was uploaded.
        /// </summary>
        public readonly string Uploaded;
        public readonly Outputs.GetStreamWatermarkResult Watermark;

        [OutputConstructor]
        private GetStreamResult(
            string accountId,

            ImmutableArray<string> allowedOrigins,

            string created,

            string creator,

            double duration,

            string id,

            string identifier,

            Outputs.GetStreamInputResult input,

            string liveInput,

            int maxDurationSeconds,

            string meta,

            string modified,

            Outputs.GetStreamPlaybackResult playback,

            string preview,

            bool readyToStream,

            string readyToStreamAt,

            bool requireSignedUrls,

            string scheduledDeletion,

            double size,

            Outputs.GetStreamStatusResult status,

            string thumbnail,

            double thumbnailTimestampPct,

            string uid,

            string uploadExpiry,

            string uploaded,

            Outputs.GetStreamWatermarkResult watermark)
        {
            AccountId = accountId;
            AllowedOrigins = allowedOrigins;
            Created = created;
            Creator = creator;
            Duration = duration;
            Id = id;
            Identifier = identifier;
            Input = input;
            LiveInput = liveInput;
            MaxDurationSeconds = maxDurationSeconds;
            Meta = meta;
            Modified = modified;
            Playback = playback;
            Preview = preview;
            ReadyToStream = readyToStream;
            ReadyToStreamAt = readyToStreamAt;
            RequireSignedUrls = requireSignedUrls;
            ScheduledDeletion = scheduledDeletion;
            Size = size;
            Status = status;
            Thumbnail = thumbnail;
            ThumbnailTimestampPct = thumbnailTimestampPct;
            Uid = uid;
            UploadExpiry = uploadExpiry;
            Uploaded = uploaded;
            Watermark = watermark;
        }
    }
}
