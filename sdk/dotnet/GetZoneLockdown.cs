// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZoneLockdown
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdown = Cloudflare.GetZoneLockdown.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LockDownsId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneLockdownResult> InvokeAsync(GetZoneLockdownArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneLockdownResult>("cloudflare:index/getZoneLockdown:getZoneLockdown", args ?? new GetZoneLockdownArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdown = Cloudflare.GetZoneLockdown.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LockDownsId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneLockdownResult> Invoke(GetZoneLockdownInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneLockdownResult>("cloudflare:index/getZoneLockdown:getZoneLockdown", args ?? new GetZoneLockdownInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdown = Cloudflare.GetZoneLockdown.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LockDownsId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneLockdownResult> Invoke(GetZoneLockdownInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneLockdownResult>("cloudflare:index/getZoneLockdown:getZoneLockdown", args ?? new GetZoneLockdownInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneLockdownArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetZoneLockdownFilterArgs? Filter { get; set; }

        /// <summary>
        /// The unique identifier of the Zone Lockdown rule.
        /// </summary>
        [Input("lockDownsId")]
        public string? LockDownsId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneLockdownArgs()
        {
        }
        public static new GetZoneLockdownArgs Empty => new GetZoneLockdownArgs();
    }

    public sealed class GetZoneLockdownInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetZoneLockdownFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// The unique identifier of the Zone Lockdown rule.
        /// </summary>
        [Input("lockDownsId")]
        public Input<string>? LockDownsId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneLockdownInvokeArgs()
        {
        }
        public static new GetZoneLockdownInvokeArgs Empty => new GetZoneLockdownInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneLockdownResult
    {
        /// <summary>
        /// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZoneLockdownConfigurationResult> Configurations;
        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// An informative summary of the rule.
        /// </summary>
        public readonly string Description;
        public readonly Outputs.GetZoneLockdownFilterResult? Filter;
        /// <summary>
        /// The unique identifier of the Zone Lockdown rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The unique identifier of the Zone Lockdown rule.
        /// </summary>
        public readonly string? LockDownsId;
        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// When true, indicates that the rule is currently paused.
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// The URLs to include in the rule definition. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
        /// </summary>
        public readonly ImmutableArray<string> Urls;
        /// <summary>
        /// Defines an identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneLockdownResult(
            ImmutableArray<Outputs.GetZoneLockdownConfigurationResult> configurations,

            string createdOn,

            string description,

            Outputs.GetZoneLockdownFilterResult? filter,

            string id,

            string? lockDownsId,

            string modifiedOn,

            bool paused,

            ImmutableArray<string> urls,

            string zoneId)
        {
            Configurations = configurations;
            CreatedOn = createdOn;
            Description = description;
            Filter = filter;
            Id = id;
            LockDownsId = lockDownsId;
            ModifiedOn = modifiedOn;
            Paused = paused;
            Urls = urls;
            ZoneId = zoneId;
        }
    }
}
