// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource which customizes Cloudflare zone settings.
    /// 
    /// &gt; You **should not** use this resource to manage every zone setting. This
    ///   resource is only intended to override those which you do not want the default.
    ///   Attempting to manage all settings will result in problems with the resource
    ///   applying in a consistent manner.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Cloudflare.ZoneSettingsOverride("test", new()
    ///     {
    ///         ZoneId = d41d8cd98f00b204e9800998ecf8427e,
    ///         Settings = new Cloudflare.Inputs.ZoneSettingsOverrideSettingsArgs
    ///         {
    ///             Brotli = "on",
    ///             ChallengeTtl = 2700,
    ///             SecurityLevel = "high",
    ///             OpportunisticEncryption = "on",
    ///             AutomaticHttpsRewrites = "on",
    ///             Mirage = "on",
    ///             Waf = "on",
    ///             Minify = new Cloudflare.Inputs.ZoneSettingsOverrideSettingsMinifyArgs
    ///             {
    ///                 Css = "on",
    ///                 Js = "off",
    ///                 Html = "off",
    ///             },
    ///             SecurityHeader = new Cloudflare.Inputs.ZoneSettingsOverrideSettingsSecurityHeaderArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride")]
    public partial class ZoneSettingsOverride : global::Pulumi.CustomResource
    {
        [Output("initialSettings")]
        public Output<ImmutableArray<Outputs.ZoneSettingsOverrideInitialSetting>> InitialSettings { get; private set; } = null!;

        [Output("initialSettingsReadAt")]
        public Output<string> InitialSettingsReadAt { get; private set; } = null!;

        [Output("readonlySettings")]
        public Output<ImmutableArray<string>> ReadonlySettings { get; private set; } = null!;

        [Output("settings")]
        public Output<Outputs.ZoneSettingsOverrideSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        [Output("zoneStatus")]
        public Output<string> ZoneStatus { get; private set; } = null!;

        [Output("zoneType")]
        public Output<string> ZoneType { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneSettingsOverride resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneSettingsOverride(string name, ZoneSettingsOverrideArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride", name, args ?? new ZoneSettingsOverrideArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZoneSettingsOverride(string name, Input<string> id, ZoneSettingsOverrideState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneSettingsOverride resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneSettingsOverride Get(string name, Input<string> id, ZoneSettingsOverrideState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneSettingsOverride(name, id, state, options);
        }
    }

    public sealed class ZoneSettingsOverrideArgs : global::Pulumi.ResourceArgs
    {
        [Input("settings")]
        public Input<Inputs.ZoneSettingsOverrideSettingsArgs>? Settings { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ZoneSettingsOverrideArgs()
        {
        }
        public static new ZoneSettingsOverrideArgs Empty => new ZoneSettingsOverrideArgs();
    }

    public sealed class ZoneSettingsOverrideState : global::Pulumi.ResourceArgs
    {
        [Input("initialSettings")]
        private InputList<Inputs.ZoneSettingsOverrideInitialSettingGetArgs>? _initialSettings;
        public InputList<Inputs.ZoneSettingsOverrideInitialSettingGetArgs> InitialSettings
        {
            get => _initialSettings ?? (_initialSettings = new InputList<Inputs.ZoneSettingsOverrideInitialSettingGetArgs>());
            set => _initialSettings = value;
        }

        [Input("initialSettingsReadAt")]
        public Input<string>? InitialSettingsReadAt { get; set; }

        [Input("readonlySettings")]
        private InputList<string>? _readonlySettings;
        public InputList<string> ReadonlySettings
        {
            get => _readonlySettings ?? (_readonlySettings = new InputList<string>());
            set => _readonlySettings = value;
        }

        [Input("settings")]
        public Input<Inputs.ZoneSettingsOverrideSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneStatus")]
        public Input<string>? ZoneStatus { get; set; }

        [Input("zoneType")]
        public Input<string>? ZoneType { get; set; }

        public ZoneSettingsOverrideState()
        {
        }
        public static new ZoneSettingsOverrideState Empty => new ZoneSettingsOverrideState();
    }
}
