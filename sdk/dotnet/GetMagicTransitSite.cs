// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicTransitSite
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSite = Cloudflare.GetMagicTransitSite.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicTransitSiteResult> InvokeAsync(GetMagicTransitSiteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicTransitSiteResult>("cloudflare:index/getMagicTransitSite:getMagicTransitSite", args ?? new GetMagicTransitSiteArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSite = Cloudflare.GetMagicTransitSite.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteResult> Invoke(GetMagicTransitSiteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteResult>("cloudflare:index/getMagicTransitSite:getMagicTransitSite", args ?? new GetMagicTransitSiteInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSite = Cloudflare.GetMagicTransitSite.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteResult> Invoke(GetMagicTransitSiteInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteResult>("cloudflare:index/getMagicTransitSite:getMagicTransitSite", args ?? new GetMagicTransitSiteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicTransitSiteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetMagicTransitSiteFilterArgs? Filter { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId")]
        public string? SiteId { get; set; }

        public GetMagicTransitSiteArgs()
        {
        }
        public static new GetMagicTransitSiteArgs Empty => new GetMagicTransitSiteArgs();
    }

    public sealed class GetMagicTransitSiteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetMagicTransitSiteFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        public GetMagicTransitSiteInvokeArgs()
        {
        }
        public static new GetMagicTransitSiteInvokeArgs Empty => new GetMagicTransitSiteInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicTransitSiteResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Magic Connector identifier tag.
        /// </summary>
        public readonly string ConnectorId;
        public readonly string Description;
        public readonly Outputs.GetMagicTransitSiteFilterResult? Filter;
        /// <summary>
        /// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
        /// </summary>
        public readonly bool HaMode;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Location of site in latitude and longitude.
        /// </summary>
        public readonly Outputs.GetMagicTransitSiteLocationResult Location;
        /// <summary>
        /// The name of the site.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Magic Connector identifier tag. Used when high availability mode is on.
        /// </summary>
        public readonly string SecondaryConnectorId;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? SiteId;

        [OutputConstructor]
        private GetMagicTransitSiteResult(
            string accountId,

            string connectorId,

            string description,

            Outputs.GetMagicTransitSiteFilterResult? filter,

            bool haMode,

            string id,

            Outputs.GetMagicTransitSiteLocationResult location,

            string name,

            string secondaryConnectorId,

            string? siteId)
        {
            AccountId = accountId;
            ConnectorId = connectorId;
            Description = description;
            Filter = filter;
            HaMode = haMode;
            Id = id;
            Location = location;
            Name = name;
            SecondaryConnectorId = secondaryConnectorId;
            SiteId = siteId;
        }
    }
}
