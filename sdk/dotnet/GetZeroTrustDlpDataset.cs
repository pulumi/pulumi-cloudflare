// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustDlpDataset
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpDataset = Cloudflare.GetZeroTrustDlpDataset.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         DatasetId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustDlpDatasetResult> InvokeAsync(GetZeroTrustDlpDatasetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustDlpDatasetResult>("cloudflare:index/getZeroTrustDlpDataset:getZeroTrustDlpDataset", args ?? new GetZeroTrustDlpDatasetArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpDataset = Cloudflare.GetZeroTrustDlpDataset.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         DatasetId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDlpDatasetResult> Invoke(GetZeroTrustDlpDatasetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDlpDatasetResult>("cloudflare:index/getZeroTrustDlpDataset:getZeroTrustDlpDataset", args ?? new GetZeroTrustDlpDatasetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpDataset = Cloudflare.GetZeroTrustDlpDataset.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         DatasetId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDlpDatasetResult> Invoke(GetZeroTrustDlpDatasetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDlpDatasetResult>("cloudflare:index/getZeroTrustDlpDataset:getZeroTrustDlpDataset", args ?? new GetZeroTrustDlpDatasetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustDlpDatasetArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        public GetZeroTrustDlpDatasetArgs()
        {
        }
        public static new GetZeroTrustDlpDatasetArgs Empty => new GetZeroTrustDlpDatasetArgs();
    }

    public sealed class GetZeroTrustDlpDatasetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        public GetZeroTrustDlpDatasetInvokeArgs()
        {
        }
        public static new GetZeroTrustDlpDatasetInvokeArgs Empty => new GetZeroTrustDlpDatasetInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustDlpDatasetResult
    {
        public readonly string AccountId;
        public readonly bool CaseSensitive;
        public readonly ImmutableArray<Outputs.GetZeroTrustDlpDatasetColumnResult> Columns;
        public readonly string CreatedAt;
        public readonly string DatasetId;
        /// <summary>
        /// The description of the dataset.
        /// </summary>
        public readonly string Description;
        public readonly int EncodingVersion;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly int NumCells;
        public readonly bool Secret;
        /// <summary>
        /// Available values: "empty", "uploading", "processing", "failed", "complete".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// When the dataset was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        public readonly ImmutableArray<Outputs.GetZeroTrustDlpDatasetUploadResult> Uploads;

        [OutputConstructor]
        private GetZeroTrustDlpDatasetResult(
            string accountId,

            bool caseSensitive,

            ImmutableArray<Outputs.GetZeroTrustDlpDatasetColumnResult> columns,

            string createdAt,

            string datasetId,

            string description,

            int encodingVersion,

            string id,

            string name,

            int numCells,

            bool secret,

            string status,

            string updatedAt,

            ImmutableArray<Outputs.GetZeroTrustDlpDatasetUploadResult> uploads)
        {
            AccountId = accountId;
            CaseSensitive = caseSensitive;
            Columns = columns;
            CreatedAt = createdAt;
            DatasetId = datasetId;
            Description = description;
            EncodingVersion = encodingVersion;
            Id = id;
            Name = name;
            NumCells = numCells;
            Secret = secret;
            Status = status;
            UpdatedAt = updatedAt;
            Uploads = uploads;
        }
    }
}
