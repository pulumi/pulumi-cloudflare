// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetPermissionGroup
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePermissionGroup = Cloudflare.GetPermissionGroup.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         PermissionGroupId = "6d7f2f5f5b1d4a0e9081fdc98d432fd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPermissionGroupResult> InvokeAsync(GetPermissionGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPermissionGroupResult>("cloudflare:index/getPermissionGroup:getPermissionGroup", args ?? new GetPermissionGroupArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePermissionGroup = Cloudflare.GetPermissionGroup.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         PermissionGroupId = "6d7f2f5f5b1d4a0e9081fdc98d432fd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPermissionGroupResult> Invoke(GetPermissionGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionGroupResult>("cloudflare:index/getPermissionGroup:getPermissionGroup", args ?? new GetPermissionGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePermissionGroup = Cloudflare.GetPermissionGroup.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         PermissionGroupId = "6d7f2f5f5b1d4a0e9081fdc98d432fd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPermissionGroupResult> Invoke(GetPermissionGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionGroupResult>("cloudflare:index/getPermissionGroup:getPermissionGroup", args ?? new GetPermissionGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Permission Group identifier tag.
        /// </summary>
        [Input("permissionGroupId", required: true)]
        public string PermissionGroupId { get; set; } = null!;

        public GetPermissionGroupArgs()
        {
        }
        public static new GetPermissionGroupArgs Empty => new GetPermissionGroupArgs();
    }

    public sealed class GetPermissionGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Permission Group identifier tag.
        /// </summary>
        [Input("permissionGroupId", required: true)]
        public Input<string> PermissionGroupId { get; set; } = null!;

        public GetPermissionGroupInvokeArgs()
        {
        }
        public static new GetPermissionGroupInvokeArgs Empty => new GetPermissionGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetPermissionGroupResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Identifier of the group.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Attributes associated to the permission group.
        /// </summary>
        public readonly Outputs.GetPermissionGroupMetaResult Meta;
        /// <summary>
        /// Name of the group.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Permission Group identifier tag.
        /// </summary>
        public readonly string PermissionGroupId;

        [OutputConstructor]
        private GetPermissionGroupResult(
            string accountId,

            string id,

            Outputs.GetPermissionGroupMetaResult meta,

            string name,

            string permissionGroupId)
        {
            AccountId = accountId;
            Id = id;
            Meta = meta;
            Name = name;
            PermissionGroupId = permissionGroupId;
        }
    }
}
