// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDnsZoneTransfersIncoming = new Cloudflare.DnsZoneTransfersIncoming("example_dns_zone_transfers_incoming", new()
    ///     {
    ///         ZoneId = "269d8f4853475ca241c4e730be286b20",
    ///         AutoRefreshSeconds = 86400,
    ///         Name = "www.example.com.",
    ///         Peers = new[]
    ///         {
    ///             "23ff594956f20c2a721606e94745a8aa",
    ///             "00920f38ce07c2e2f4df50b1f61d4194",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming example '&lt;zone_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming")]
    public partial class DnsZoneTransfersIncoming : global::Pulumi.CustomResource
    {
        /// <summary>
        /// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
        /// Not applicable for primary zones.
        /// </summary>
        [Output("autoRefreshSeconds")]
        public Output<double> AutoRefreshSeconds { get; private set; } = null!;

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Output("checkedTime")]
        public Output<string> CheckedTime { get; private set; } = null!;

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Output("modifiedTime")]
        public Output<string> ModifiedTime { get; private set; } = null!;

        /// <summary>
        /// Zone name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of peer tags.
        /// </summary>
        [Output("peers")]
        public Output<ImmutableArray<string>> Peers { get; private set; } = null!;

        /// <summary>
        /// The serial number of the SOA for the given zone.
        /// </summary>
        [Output("soaSerial")]
        public Output<double> SoaSerial { get; private set; } = null!;

        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a DnsZoneTransfersIncoming resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsZoneTransfersIncoming(string name, DnsZoneTransfersIncomingArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming", name, args ?? new DnsZoneTransfersIncomingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsZoneTransfersIncoming(string name, Input<string> id, DnsZoneTransfersIncomingState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsZoneTransfersIncoming resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsZoneTransfersIncoming Get(string name, Input<string> id, DnsZoneTransfersIncomingState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsZoneTransfersIncoming(name, id, state, options);
        }
    }

    public sealed class DnsZoneTransfersIncomingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
        /// Not applicable for primary zones.
        /// </summary>
        [Input("autoRefreshSeconds", required: true)]
        public Input<double> AutoRefreshSeconds { get; set; } = null!;

        /// <summary>
        /// Zone name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("peers", required: true)]
        private InputList<string>? _peers;

        /// <summary>
        /// A list of peer tags.
        /// </summary>
        public InputList<string> Peers
        {
            get => _peers ?? (_peers = new InputList<string>());
            set => _peers = value;
        }

        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public DnsZoneTransfersIncomingArgs()
        {
        }
        public static new DnsZoneTransfersIncomingArgs Empty => new DnsZoneTransfersIncomingArgs();
    }

    public sealed class DnsZoneTransfersIncomingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
        /// Not applicable for primary zones.
        /// </summary>
        [Input("autoRefreshSeconds")]
        public Input<double>? AutoRefreshSeconds { get; set; }

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Input("checkedTime")]
        public Input<string>? CheckedTime { get; set; }

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// The time for a specific event.
        /// </summary>
        [Input("modifiedTime")]
        public Input<string>? ModifiedTime { get; set; }

        /// <summary>
        /// Zone name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("peers")]
        private InputList<string>? _peers;

        /// <summary>
        /// A list of peer tags.
        /// </summary>
        public InputList<string> Peers
        {
            get => _peers ?? (_peers = new InputList<string>());
            set => _peers = value;
        }

        /// <summary>
        /// The serial number of the SOA for the given zone.
        /// </summary>
        [Input("soaSerial")]
        public Input<double>? SoaSerial { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public DnsZoneTransfersIncomingState()
        {
        }
        public static new DnsZoneTransfersIncomingState Empty => new DnsZoneTransfersIncomingState();
    }
}
