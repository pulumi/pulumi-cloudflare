// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zoneSetting:ZoneSetting example '&lt;zone_id&gt;/&lt;setting_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zoneSetting:ZoneSetting")]
    public partial class ZoneSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
        /// </summary>
        [Output("editable")]
        public Output<bool> Editable { get; private set; } = null!;

        /// <summary>
        /// last time this setting was modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Setting name
        /// </summary>
        [Output("settingId")]
        public Output<string> SettingId { get; private set; } = null!;

        /// <summary>
        /// Value of the zone setting.
        /// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
        /// </summary>
        [Output("timeRemaining")]
        public Output<double> TimeRemaining { get; private set; } = null!;

        /// <summary>
        /// Current value of the zone setting.
        /// </summary>
        [Output("value")]
        public Output<object> Value { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneSetting(string name, ZoneSettingArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSetting:ZoneSetting", name, args ?? new ZoneSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZoneSetting(string name, Input<string> id, ZoneSettingState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneSetting:ZoneSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneSetting Get(string name, Input<string> id, ZoneSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneSetting(name, id, state, options);
        }
    }

    public sealed class ZoneSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Setting name
        /// </summary>
        [Input("settingId", required: true)]
        public Input<string> SettingId { get; set; } = null!;

        /// <summary>
        /// Current value of the zone setting.
        /// </summary>
        [Input("value", required: true)]
        public Input<object> Value { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ZoneSettingArgs()
        {
        }
        public static new ZoneSettingArgs Empty => new ZoneSettingArgs();
    }

    public sealed class ZoneSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
        /// </summary>
        [Input("editable")]
        public Input<bool>? Editable { get; set; }

        /// <summary>
        /// last time this setting was modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// Setting name
        /// </summary>
        [Input("settingId")]
        public Input<string>? SettingId { get; set; }

        /// <summary>
        /// Value of the zone setting.
        /// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
        /// </summary>
        [Input("timeRemaining")]
        public Input<double>? TimeRemaining { get; set; }

        /// <summary>
        /// Current value of the zone setting.
        /// </summary>
        [Input("value")]
        public Input<object>? Value { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZoneSettingState()
        {
        }
        public static new ZoneSettingState Empty => new ZoneSettingState();
    }
}
