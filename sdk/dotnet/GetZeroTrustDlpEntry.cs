// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustDlpEntry
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpEntry = Cloudflare.GetZeroTrustDlpEntry.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         EntryId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustDlpEntryResult> InvokeAsync(GetZeroTrustDlpEntryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustDlpEntryResult>("cloudflare:index/getZeroTrustDlpEntry:getZeroTrustDlpEntry", args ?? new GetZeroTrustDlpEntryArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpEntry = Cloudflare.GetZeroTrustDlpEntry.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         EntryId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDlpEntryResult> Invoke(GetZeroTrustDlpEntryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDlpEntryResult>("cloudflare:index/getZeroTrustDlpEntry:getZeroTrustDlpEntry", args ?? new GetZeroTrustDlpEntryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDlpEntry = Cloudflare.GetZeroTrustDlpEntry.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         EntryId = "182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDlpEntryResult> Invoke(GetZeroTrustDlpEntryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDlpEntryResult>("cloudflare:index/getZeroTrustDlpEntry:getZeroTrustDlpEntry", args ?? new GetZeroTrustDlpEntryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustDlpEntryArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("entryId")]
        public string? EntryId { get; set; }

        public GetZeroTrustDlpEntryArgs()
        {
        }
        public static new GetZeroTrustDlpEntryArgs Empty => new GetZeroTrustDlpEntryArgs();
    }

    public sealed class GetZeroTrustDlpEntryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("entryId")]
        public Input<string>? EntryId { get; set; }

        public GetZeroTrustDlpEntryInvokeArgs()
        {
        }
        public static new GetZeroTrustDlpEntryInvokeArgs Empty => new GetZeroTrustDlpEntryInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustDlpEntryResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Only applies to custom word lists.
        /// Determines if the words should be matched in a case-sensitive manner
        /// Cannot be set to false if secret is true
        /// </summary>
        public readonly bool CaseSensitive;
        public readonly Outputs.GetZeroTrustDlpEntryConfidenceResult Confidence;
        public readonly string CreatedAt;
        public readonly bool Enabled;
        public readonly string? EntryId;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly Outputs.GetZeroTrustDlpEntryPatternResult Pattern;
        public readonly string ProfileId;
        public readonly bool Secret;
        /// <summary>
        /// Available values: "custom", "predefined", "integration", "exact*data", "document*fingerprint", "word_list".
        /// </summary>
        public readonly string Type;
        public readonly string UpdatedAt;
        public readonly Outputs.GetZeroTrustDlpEntryVariantResult Variant;
        public readonly string WordList;

        [OutputConstructor]
        private GetZeroTrustDlpEntryResult(
            string accountId,

            bool caseSensitive,

            Outputs.GetZeroTrustDlpEntryConfidenceResult confidence,

            string createdAt,

            bool enabled,

            string? entryId,

            string id,

            string name,

            Outputs.GetZeroTrustDlpEntryPatternResult pattern,

            string profileId,

            bool secret,

            string type,

            string updatedAt,

            Outputs.GetZeroTrustDlpEntryVariantResult variant,

            string wordList)
        {
            AccountId = accountId;
            CaseSensitive = caseSensitive;
            Confidence = confidence;
            CreatedAt = createdAt;
            Enabled = enabled;
            EntryId = entryId;
            Id = id;
            Name = name;
            Pattern = pattern;
            ProfileId = profileId;
            Secret = secret;
            Type = type;
            UpdatedAt = updatedAt;
            Variant = variant;
            WordList = wordList;
        }
    }
}
