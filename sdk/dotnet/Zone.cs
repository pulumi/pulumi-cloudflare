// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// &gt; If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZone = new Cloudflare.Zone("example_zone", new()
    ///     {
    ///         Account = new Cloudflare.Inputs.ZoneAccountArgs
    ///         {
    ///             Id = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         },
    ///         Name = "example.com",
    ///         Type = "full",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zone:Zone example '&lt;zone_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zone:Zone")]
    public partial class Zone : global::Pulumi.CustomResource
    {
        [Output("account")]
        public Output<Outputs.ZoneAccount> Account { get; private set; } = null!;

        /// <summary>
        /// The last time proof of ownership was detected and the zone was made
        /// active
        /// </summary>
        [Output("activatedOn")]
        public Output<string> ActivatedOn { get; private set; } = null!;

        /// <summary>
        /// Allows the customer to use a custom apex.
        /// *Tenants Only Configuration*.
        /// </summary>
        [Output("cnameSuffix")]
        public Output<string> CnameSuffix { get; private set; } = null!;

        /// <summary>
        /// When the zone was created
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The interval (in seconds) from when development mode expires
        /// (positive integer) or last expired (negative integer) for the
        /// domain. If development mode has never been enabled, this value is 0.
        /// </summary>
        [Output("developmentMode")]
        public Output<double> DevelopmentMode { get; private set; } = null!;

        /// <summary>
        /// Metadata about the zone
        /// </summary>
        [Output("meta")]
        public Output<Outputs.ZoneMeta> Meta { get; private set; } = null!;

        /// <summary>
        /// When the zone was last modified
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The domain name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name servers Cloudflare assigns to a zone
        /// </summary>
        [Output("nameServers")]
        public Output<ImmutableArray<string>> NameServers { get; private set; } = null!;

        /// <summary>
        /// DNS host at the time of switching to Cloudflare
        /// </summary>
        [Output("originalDnshost")]
        public Output<string> OriginalDnshost { get; private set; } = null!;

        /// <summary>
        /// Original name servers before moving to Cloudflare
        /// </summary>
        [Output("originalNameServers")]
        public Output<ImmutableArray<string>> OriginalNameServers { get; private set; } = null!;

        /// <summary>
        /// Registrar for the domain at the time of switching to Cloudflare
        /// </summary>
        [Output("originalRegistrar")]
        public Output<string> OriginalRegistrar { get; private set; } = null!;

        /// <summary>
        /// The owner of the zone
        /// </summary>
        [Output("owner")]
        public Output<Outputs.ZoneOwner> Owner { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the zone is only using Cloudflare DNS services. A
        /// true value means the zone will not receive security or performance
        /// benefits.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// Legacy permissions based on legacy user membership information.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// A Zones subscription information.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.ZonePlan> Plan { get; private set; } = null!;

        /// <summary>
        /// The zone status on Cloudflare.
        /// Available values: "initializing", "pending", "active", "moved".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The root organizational unit that this zone belongs to (such as a tenant or organization).
        /// </summary>
        [Output("tenant")]
        public Output<Outputs.ZoneTenant> Tenant { get; private set; } = null!;

        /// <summary>
        /// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
        /// </summary>
        [Output("tenantUnit")]
        public Output<Outputs.ZoneTenantUnit> TenantUnit { get; private set; } = null!;

        /// <summary>
        /// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        /// typically a partner-hosted zone or a CNAME setup.
        /// Available values: "full", "partial", "secondary", "internal".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// An array of domains used for custom name servers. This is only
        /// available for Business and Enterprise plans.
        /// </summary>
        [Output("vanityNameServers")]
        public Output<ImmutableArray<string>> VanityNameServers { get; private set; } = null!;

        /// <summary>
        /// Verification key for partial zone setup.
        /// </summary>
        [Output("verificationKey")]
        public Output<string> VerificationKey { get; private set; } = null!;


        /// <summary>
        /// Create a Zone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zone(string name, ZoneArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zone:Zone", name, args ?? new ZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Zone(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zone:Zone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zone Get(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new Zone(name, id, state, options);
        }
    }

    public sealed class ZoneArgs : global::Pulumi.ResourceArgs
    {
        [Input("account", required: true)]
        public Input<Inputs.ZoneAccountArgs> Account { get; set; } = null!;

        /// <summary>
        /// The domain name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        /// typically a partner-hosted zone or a CNAME setup.
        /// Available values: "full", "partial", "secondary", "internal".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vanityNameServers")]
        private InputList<string>? _vanityNameServers;

        /// <summary>
        /// An array of domains used for custom name servers. This is only
        /// available for Business and Enterprise plans.
        /// </summary>
        public InputList<string> VanityNameServers
        {
            get => _vanityNameServers ?? (_vanityNameServers = new InputList<string>());
            set => _vanityNameServers = value;
        }

        public ZoneArgs()
        {
        }
        public static new ZoneArgs Empty => new ZoneArgs();
    }

    public sealed class ZoneState : global::Pulumi.ResourceArgs
    {
        [Input("account")]
        public Input<Inputs.ZoneAccountGetArgs>? Account { get; set; }

        /// <summary>
        /// The last time proof of ownership was detected and the zone was made
        /// active
        /// </summary>
        [Input("activatedOn")]
        public Input<string>? ActivatedOn { get; set; }

        /// <summary>
        /// Allows the customer to use a custom apex.
        /// *Tenants Only Configuration*.
        /// </summary>
        [Input("cnameSuffix")]
        public Input<string>? CnameSuffix { get; set; }

        /// <summary>
        /// When the zone was created
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The interval (in seconds) from when development mode expires
        /// (positive integer) or last expired (negative integer) for the
        /// domain. If development mode has never been enabled, this value is 0.
        /// </summary>
        [Input("developmentMode")]
        public Input<double>? DevelopmentMode { get; set; }

        /// <summary>
        /// Metadata about the zone
        /// </summary>
        [Input("meta")]
        public Input<Inputs.ZoneMetaGetArgs>? Meta { get; set; }

        /// <summary>
        /// When the zone was last modified
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The domain name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameServers")]
        private InputList<string>? _nameServers;

        /// <summary>
        /// The name servers Cloudflare assigns to a zone
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        /// <summary>
        /// DNS host at the time of switching to Cloudflare
        /// </summary>
        [Input("originalDnshost")]
        public Input<string>? OriginalDnshost { get; set; }

        [Input("originalNameServers")]
        private InputList<string>? _originalNameServers;

        /// <summary>
        /// Original name servers before moving to Cloudflare
        /// </summary>
        public InputList<string> OriginalNameServers
        {
            get => _originalNameServers ?? (_originalNameServers = new InputList<string>());
            set => _originalNameServers = value;
        }

        /// <summary>
        /// Registrar for the domain at the time of switching to Cloudflare
        /// </summary>
        [Input("originalRegistrar")]
        public Input<string>? OriginalRegistrar { get; set; }

        /// <summary>
        /// The owner of the zone
        /// </summary>
        [Input("owner")]
        public Input<Inputs.ZoneOwnerGetArgs>? Owner { get; set; }

        /// <summary>
        /// Indicates whether the zone is only using Cloudflare DNS services. A
        /// true value means the zone will not receive security or performance
        /// benefits.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// Legacy permissions based on legacy user membership information.
        /// </summary>
        [Obsolete(@"This attribute is deprecated.")]
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// A Zones subscription information.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.ZonePlanGetArgs>? Plan { get; set; }

        /// <summary>
        /// The zone status on Cloudflare.
        /// Available values: "initializing", "pending", "active", "moved".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The root organizational unit that this zone belongs to (such as a tenant or organization).
        /// </summary>
        [Input("tenant")]
        public Input<Inputs.ZoneTenantGetArgs>? Tenant { get; set; }

        /// <summary>
        /// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
        /// </summary>
        [Input("tenantUnit")]
        public Input<Inputs.ZoneTenantUnitGetArgs>? TenantUnit { get; set; }

        /// <summary>
        /// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        /// typically a partner-hosted zone or a CNAME setup.
        /// Available values: "full", "partial", "secondary", "internal".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vanityNameServers")]
        private InputList<string>? _vanityNameServers;

        /// <summary>
        /// An array of domains used for custom name servers. This is only
        /// available for Business and Enterprise plans.
        /// </summary>
        public InputList<string> VanityNameServers
        {
            get => _vanityNameServers ?? (_vanityNameServers = new InputList<string>());
            set => _vanityNameServers = value;
        }

        /// <summary>
        /// Verification key for partial zone setup.
        /// </summary>
        [Input("verificationKey")]
        public Input<string>? VerificationKey { get; set; }

        public ZoneState()
        {
        }
        public static new ZoneState Empty => new ZoneState();
    }
}
