// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicTransitSiteLan
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteLan = Cloudflare.GetMagicTransitSiteLan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicTransitSiteLanResult> InvokeAsync(GetMagicTransitSiteLanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicTransitSiteLanResult>("cloudflare:index/getMagicTransitSiteLan:getMagicTransitSiteLan", args ?? new GetMagicTransitSiteLanArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteLan = Cloudflare.GetMagicTransitSiteLan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteLanResult> Invoke(GetMagicTransitSiteLanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteLanResult>("cloudflare:index/getMagicTransitSiteLan:getMagicTransitSiteLan", args ?? new GetMagicTransitSiteLanInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteLan = Cloudflare.GetMagicTransitSiteLan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         LanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteLanResult> Invoke(GetMagicTransitSiteLanInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteLanResult>("cloudflare:index/getMagicTransitSiteLan:getMagicTransitSiteLan", args ?? new GetMagicTransitSiteLanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicTransitSiteLanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("lanId")]
        public string? LanId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        public GetMagicTransitSiteLanArgs()
        {
        }
        public static new GetMagicTransitSiteLanArgs Empty => new GetMagicTransitSiteLanArgs();
    }

    public sealed class GetMagicTransitSiteLanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("lanId")]
        public Input<string>? LanId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        public GetMagicTransitSiteLanInvokeArgs()
        {
        }
        public static new GetMagicTransitSiteLanInvokeArgs Empty => new GetMagicTransitSiteLanInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicTransitSiteLanResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
        /// </summary>
        public readonly bool HaLink;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? LanId;
        public readonly string Name;
        public readonly Outputs.GetMagicTransitSiteLanNatResult Nat;
        public readonly int Physport;
        public readonly ImmutableArray<Outputs.GetMagicTransitSiteLanRoutedSubnetResult> RoutedSubnets;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string SiteId;
        /// <summary>
        /// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
        /// </summary>
        public readonly Outputs.GetMagicTransitSiteLanStaticAddressingResult StaticAddressing;
        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        public readonly int VlanTag;

        [OutputConstructor]
        private GetMagicTransitSiteLanResult(
            string accountId,

            bool haLink,

            string id,

            string? lanId,

            string name,

            Outputs.GetMagicTransitSiteLanNatResult nat,

            int physport,

            ImmutableArray<Outputs.GetMagicTransitSiteLanRoutedSubnetResult> routedSubnets,

            string siteId,

            Outputs.GetMagicTransitSiteLanStaticAddressingResult staticAddressing,

            int vlanTag)
        {
            AccountId = accountId;
            HaLink = haLink;
            Id = id;
            LanId = lanId;
            Name = name;
            Nat = nat;
            Physport = physport;
            RoutedSubnets = routedSubnets;
            SiteId = siteId;
            StaticAddressing = staticAddressing;
            VlanTag = vlanTag;
        }
    }
}
