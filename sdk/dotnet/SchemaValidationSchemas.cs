// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleSchemaValidationSchemas = new Cloudflare.SchemaValidationSchemas("example_schema_validation_schemas", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Kind = "openapi_v3",
    ///         Name = "petstore schema",
    ///         Source = "&lt;schema file contents&gt;",
    ///         ValidationEnabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas example '&lt;zone_id&gt;/&lt;schema_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas")]
    public partial class SchemaValidationSchemas : global::Pulumi.CustomResource
    {
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The kind of the schema
        /// Available values: "OpenapiV3".
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for the schema
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A unique identifier of this schema
        /// </summary>
        [Output("schemaId")]
        public Output<string> SchemaId { get; private set; } = null!;

        /// <summary>
        /// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// An indicator if this schema is enabled
        /// </summary>
        [Output("validationEnabled")]
        public Output<bool> ValidationEnabled { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaValidationSchemas resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaValidationSchemas(string name, SchemaValidationSchemasArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas", name, args ?? new SchemaValidationSchemasArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaValidationSchemas(string name, Input<string> id, SchemaValidationSchemasState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaValidationSchemas resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaValidationSchemas Get(string name, Input<string> id, SchemaValidationSchemasState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaValidationSchemas(name, id, state, options);
        }
    }

    public sealed class SchemaValidationSchemasArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The kind of the schema
        /// Available values: "OpenapiV3".
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// A human-readable name for the schema
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// An indicator if this schema is enabled
        /// </summary>
        [Input("validationEnabled", required: true)]
        public Input<bool> ValidationEnabled { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public SchemaValidationSchemasArgs()
        {
        }
        public static new SchemaValidationSchemasArgs Empty => new SchemaValidationSchemasArgs();
    }

    public sealed class SchemaValidationSchemasState : global::Pulumi.ResourceArgs
    {
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The kind of the schema
        /// Available values: "OpenapiV3".
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// A human-readable name for the schema
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A unique identifier of this schema
        /// </summary>
        [Input("schemaId")]
        public Input<string>? SchemaId { get; set; }

        /// <summary>
        /// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// An indicator if this schema is enabled
        /// </summary>
        [Input("validationEnabled")]
        public Input<bool>? ValidationEnabled { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public SchemaValidationSchemasState()
        {
        }
        public static new SchemaValidationSchemasState Empty => new SchemaValidationSchemasState();
    }
}
