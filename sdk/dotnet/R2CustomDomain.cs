// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleR2CustomDomain = new Cloudflare.R2CustomDomain("example_r2_custom_domain", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         BucketName = "example-bucket",
    ///         Domain = "domain",
    ///         Enabled = true,
    ///         ZoneId = "zoneId",
    ///         MinTls = "1.0",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/r2CustomDomain:R2CustomDomain")]
    public partial class R2CustomDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// Name of the custom domain to be added.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Output("jurisdiction")]
        public Output<string> Jurisdiction { get; private set; } = null!;

        /// <summary>
        /// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
        /// Available values: "1.0", "1.1", "1.2", "1.3".
        /// </summary>
        [Output("minTls")]
        public Output<string?> MinTls { get; private set; } = null!;

        [Output("status")]
        public Output<Outputs.R2CustomDomainStatus> Status { get; private set; } = null!;

        /// <summary>
        /// Zone ID of the custom domain.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// Zone that the custom domain resides in.
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a R2CustomDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public R2CustomDomain(string name, R2CustomDomainArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2CustomDomain:R2CustomDomain", name, args ?? new R2CustomDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private R2CustomDomain(string name, Input<string> id, R2CustomDomainState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/r2CustomDomain:R2CustomDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing R2CustomDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static R2CustomDomain Get(string name, Input<string> id, R2CustomDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new R2CustomDomain(name, id, state, options);
        }
    }

    public sealed class R2CustomDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Name of the custom domain to be added.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
        /// Available values: "1.0", "1.1", "1.2", "1.3".
        /// </summary>
        [Input("minTls")]
        public Input<string>? MinTls { get; set; }

        /// <summary>
        /// Zone ID of the custom domain.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public R2CustomDomainArgs()
        {
        }
        public static new R2CustomDomainArgs Empty => new R2CustomDomainArgs();
    }

    public sealed class R2CustomDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Name of the custom domain to be added.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Whether to enable public bucket access at the custom domain. If undefined, the domain will be enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Jurisdiction of the bucket
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
        /// Available values: "1.0", "1.1", "1.2", "1.3".
        /// </summary>
        [Input("minTls")]
        public Input<string>? MinTls { get; set; }

        [Input("status")]
        public Input<Inputs.R2CustomDomainStatusGetArgs>? Status { get; set; }

        /// <summary>
        /// Zone ID of the custom domain.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// Zone that the custom domain resides in.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public R2CustomDomainState()
        {
        }
        public static new R2CustomDomainState Empty => new R2CustomDomainState();
    }
}
