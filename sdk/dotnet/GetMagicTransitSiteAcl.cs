// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicTransitSiteAcl
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteAcl = Cloudflare.GetMagicTransitSiteAcl.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AclId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicTransitSiteAclResult> InvokeAsync(GetMagicTransitSiteAclArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicTransitSiteAclResult>("cloudflare:index/getMagicTransitSiteAcl:getMagicTransitSiteAcl", args ?? new GetMagicTransitSiteAclArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteAcl = Cloudflare.GetMagicTransitSiteAcl.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AclId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteAclResult> Invoke(GetMagicTransitSiteAclInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteAclResult>("cloudflare:index/getMagicTransitSiteAcl:getMagicTransitSiteAcl", args ?? new GetMagicTransitSiteAclInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteAcl = Cloudflare.GetMagicTransitSiteAcl.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         AclId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteAclResult> Invoke(GetMagicTransitSiteAclInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteAclResult>("cloudflare:index/getMagicTransitSiteAcl:getMagicTransitSiteAcl", args ?? new GetMagicTransitSiteAclInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicTransitSiteAclArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("aclId")]
        public string? AclId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        public GetMagicTransitSiteAclArgs()
        {
        }
        public static new GetMagicTransitSiteAclArgs Empty => new GetMagicTransitSiteAclArgs();
    }

    public sealed class GetMagicTransitSiteAclInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        public GetMagicTransitSiteAclInvokeArgs()
        {
        }
        public static new GetMagicTransitSiteAclInvokeArgs Empty => new GetMagicTransitSiteAclInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicTransitSiteAclResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? AclId;
        /// <summary>
        /// Description for the ACL.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
        /// </summary>
        public readonly bool ForwardLocally;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetMagicTransitSiteAclLan1Result Lan1;
        public readonly Outputs.GetMagicTransitSiteAclLan2Result Lan2;
        /// <summary>
        /// The name of the ACL.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string SiteId;
        /// <summary>
        /// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
        /// </summary>
        public readonly bool Unidirectional;

        [OutputConstructor]
        private GetMagicTransitSiteAclResult(
            string accountId,

            string? aclId,

            string description,

            bool forwardLocally,

            string id,

            Outputs.GetMagicTransitSiteAclLan1Result lan1,

            Outputs.GetMagicTransitSiteAclLan2Result lan2,

            string name,

            ImmutableArray<string> protocols,

            string siteId,

            bool unidirectional)
        {
            AccountId = accountId;
            AclId = aclId;
            Description = description;
            ForwardLocally = forwardLocally;
            Id = id;
            Lan1 = lan1;
            Lan2 = lan2;
            Name = name;
            Protocols = protocols;
            SiteId = siteId;
            Unidirectional = unidirectional;
        }
    }
}
