// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicWanStaticRoute = new Cloudflare.MagicWanStaticRoute("example_magic_wan_static_route", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute")]
    [CloudflareResourceType("cloudflare:index/staticRoute:StaticRoute")]
    public partial class StaticRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// An optional human provided description of the static route.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("modified")]
        public Output<bool> Modified { get; private set; } = null!;

        [Output("modifiedRoute")]
        public Output<Outputs.StaticRouteModifiedRoute> ModifiedRoute { get; private set; } = null!;

        /// <summary>
        /// The next-hop IP Address for the static route.
        /// </summary>
        [Output("nexthop")]
        public Output<string?> Nexthop { get; private set; } = null!;

        /// <summary>
        /// IP Prefix in Classless Inter-Domain Routing format.
        /// </summary>
        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;

        /// <summary>
        /// Priority of the static route.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        [Output("route")]
        public Output<Outputs.StaticRouteRoute> Route { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("routeId")]
        public Output<string?> RouteId { get; private set; } = null!;

        [Output("routes")]
        public Output<ImmutableArray<Outputs.StaticRouteRoute>> Routes { get; private set; } = null!;

        /// <summary>
        /// Used only for ECMP routes.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.StaticRouteScope> Scope { get; private set; } = null!;

        /// <summary>
        /// Optional weight of the ECMP scope - if provided.
        /// </summary>
        [Output("weight")]
        public Output<int?> Weight { get; private set; } = null!;


        /// <summary>
        /// Create a StaticRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StaticRoute(string name, StaticRouteArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/staticRoute:StaticRoute", name, args ?? new StaticRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StaticRoute(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/staticRoute:StaticRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/staticRoute:StaticRoute" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StaticRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StaticRoute Get(string name, Input<string> id, StaticRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new StaticRoute(name, id, state, options);
        }
    }

    public sealed class StaticRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// An optional human provided description of the static route.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The next-hop IP Address for the static route.
        /// </summary>
        [Input("nexthop")]
        public Input<string>? Nexthop { get; set; }

        /// <summary>
        /// IP Prefix in Classless Inter-Domain Routing format.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Priority of the static route.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("route")]
        public Input<Inputs.StaticRouteRouteArgs>? Route { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        [Input("routes")]
        private InputList<Inputs.StaticRouteRouteArgs>? _routes;
        public InputList<Inputs.StaticRouteRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.StaticRouteRouteArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// Used only for ECMP routes.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.StaticRouteScopeArgs>? Scope { get; set; }

        /// <summary>
        /// Optional weight of the ECMP scope - if provided.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public StaticRouteArgs()
        {
        }
        public static new StaticRouteArgs Empty => new StaticRouteArgs();
    }

    public sealed class StaticRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// An optional human provided description of the static route.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("modified")]
        public Input<bool>? Modified { get; set; }

        [Input("modifiedRoute")]
        public Input<Inputs.StaticRouteModifiedRouteGetArgs>? ModifiedRoute { get; set; }

        /// <summary>
        /// The next-hop IP Address for the static route.
        /// </summary>
        [Input("nexthop")]
        public Input<string>? Nexthop { get; set; }

        /// <summary>
        /// IP Prefix in Classless Inter-Domain Routing format.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Priority of the static route.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("route")]
        public Input<Inputs.StaticRouteRouteGetArgs>? Route { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("routeId")]
        public Input<string>? RouteId { get; set; }

        [Input("routes")]
        private InputList<Inputs.StaticRouteRouteGetArgs>? _routes;
        public InputList<Inputs.StaticRouteRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.StaticRouteRouteGetArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// Used only for ECMP routes.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.StaticRouteScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// Optional weight of the ECMP scope - if provided.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public StaticRouteState()
        {
        }
        public static new StaticRouteState Empty => new StaticRouteState();
    }
}
