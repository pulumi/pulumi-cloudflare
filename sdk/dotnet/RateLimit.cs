// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// &gt; `cloudflare.RateLimit` is in a deprecation phase until June 15th, 2025.
    ///   During this time period, this resource is still
    ///   fully supported but you are strongly advised to move to the
    ///   `cloudflare.Ruleset` resource. Full details can be found in the
    ///   developer documentation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleRateLimit = new Cloudflare.RateLimit("example_rate_limit", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Action = new Cloudflare.Inputs.RateLimitActionArgs
    ///         {
    ///             Mode = "challenge",
    ///             Response = new Cloudflare.Inputs.RateLimitActionResponseArgs
    ///             {
    ///                 Body = "&lt;error&gt;This request has been rate-limited.&lt;/error&gt;",
    ///                 ContentType = "text/xml",
    ///             },
    ///             Timeout = 86400,
    ///         },
    ///         Match = new Cloudflare.Inputs.RateLimitMatchArgs
    ///         {
    ///             Headers = new[]
    ///             {
    ///                 new Cloudflare.Inputs.RateLimitMatchHeaderArgs
    ///                 {
    ///                     Name = "Cf-Cache-Status",
    ///                     Op = "ne",
    ///                     Value = "HIT",
    ///                 },
    ///             },
    ///             Request = new Cloudflare.Inputs.RateLimitMatchRequestArgs
    ///             {
    ///                 Methods = new[]
    ///                 {
    ///                     "GET",
    ///                     "POST",
    ///                 },
    ///                 Schemes = new[]
    ///                 {
    ///                     "HTTP",
    ///                     "HTTPS",
    ///                 },
    ///                 Url = "*.example.org/path*",
    ///             },
    ///             Response = new Cloudflare.Inputs.RateLimitMatchResponseArgs
    ///             {
    ///                 OriginTraffic = true,
    ///             },
    ///         },
    ///         Period = 900,
    ///         Threshold = 60,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/rateLimit:RateLimit example '&lt;zone_id&gt;/&lt;rate_limit_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/rateLimit:RateLimit")]
    public partial class RateLimit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Output("action")]
        public Output<Outputs.RateLimitAction> Action { get; private set; } = null!;

        /// <summary>
        /// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
        /// </summary>
        [Output("bypasses")]
        public Output<ImmutableArray<Outputs.RateLimitBypass>> Bypasses { get; private set; } = null!;

        /// <summary>
        /// An informative summary of the rate limit. This value is sanitized and any tags will be removed.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// When true, indicates that the rate limit is currently disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold.
        /// </summary>
        [Output("match")]
        public Output<Outputs.RateLimitMatch> Match { get; private set; } = null!;

        /// <summary>
        /// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
        /// </summary>
        [Output("period")]
        public Output<double> Period { get; private set; } = null!;

        /// <summary>
        /// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
        /// </summary>
        [Output("threshold")]
        public Output<double> Threshold { get; private set; } = null!;

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a RateLimit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RateLimit(string name, RateLimitArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, args ?? new RateLimitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RateLimit(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RateLimit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RateLimit Get(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
        {
            return new RateLimit(name, id, state, options);
        }
    }

    public sealed class RateLimitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.RateLimitActionArgs> Action { get; set; } = null!;

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold.
        /// </summary>
        [Input("match", required: true)]
        public Input<Inputs.RateLimitMatchArgs> Match { get; set; } = null!;

        /// <summary>
        /// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
        /// </summary>
        [Input("period", required: true)]
        public Input<double> Period { get; set; } = null!;

        /// <summary>
        /// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RateLimitArgs()
        {
        }
        public static new RateLimitArgs Empty => new RateLimitArgs();
    }

    public sealed class RateLimitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Input("action")]
        public Input<Inputs.RateLimitActionGetArgs>? Action { get; set; }

        [Input("bypasses")]
        private InputList<Inputs.RateLimitBypassGetArgs>? _bypasses;

        /// <summary>
        /// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
        /// </summary>
        public InputList<Inputs.RateLimitBypassGetArgs> Bypasses
        {
            get => _bypasses ?? (_bypasses = new InputList<Inputs.RateLimitBypassGetArgs>());
            set => _bypasses = value;
        }

        /// <summary>
        /// An informative summary of the rate limit. This value is sanitized and any tags will be removed.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// When true, indicates that the rate limit is currently disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold.
        /// </summary>
        [Input("match")]
        public Input<Inputs.RateLimitMatchGetArgs>? Match { get; set; }

        /// <summary>
        /// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
        /// </summary>
        [Input("period")]
        public Input<double>? Period { get; set; }

        /// <summary>
        /// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RateLimitState()
        {
        }
        public static new RateLimitState Empty => new RateLimitState();
    }
}
