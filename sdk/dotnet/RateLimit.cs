// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare rate limit resource for a given zone. This can
    /// be used to limit the traffic you receive zone-wide, or matching more
    /// specific types of requests/responses.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/rateLimit:RateLimit example &lt;zone_id&gt;/&lt;rate_limit_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/rateLimit:RateLimit")]
    public partial class RateLimit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Output("action")]
        public Output<Outputs.RateLimitAction> Action { get; private set; } = null!;

        [Output("bypassUrlPatterns")]
        public Output<ImmutableArray<string>> BypassUrlPatterns { get; private set; } = null!;

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Output("correlate")]
        public Output<Outputs.RateLimitCorrelate?> Correlate { get; private set; } = null!;

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether this ratelimit is currently disabled. Defaults to `false`.
        /// </summary>
        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
        /// </summary>
        [Output("match")]
        public Output<Outputs.RateLimitMatch> Match { get; private set; } = null!;

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
        /// </summary>
        [Output("period")]
        public Output<int> Period { get; private set; } = null!;

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period.
        /// </summary>
        [Output("threshold")]
        public Output<int> Threshold { get; private set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a RateLimit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RateLimit(string name, RateLimitArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, args ?? new RateLimitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RateLimit(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/rateLimit:RateLimit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RateLimit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RateLimit Get(string name, Input<string> id, RateLimitState? state = null, CustomResourceOptions? options = null)
        {
            return new RateLimit(name, id, state, options);
        }
    }

    public sealed class RateLimitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.RateLimitActionArgs> Action { get; set; } = null!;

        [Input("bypassUrlPatterns")]
        private InputList<string>? _bypassUrlPatterns;
        public InputList<string> BypassUrlPatterns
        {
            get => _bypassUrlPatterns ?? (_bypassUrlPatterns = new InputList<string>());
            set => _bypassUrlPatterns = value;
        }

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Input("correlate")]
        public Input<Inputs.RateLimitCorrelateArgs>? Correlate { get; set; }

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this ratelimit is currently disabled. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
        /// </summary>
        [Input("match")]
        public Input<Inputs.RateLimitMatchArgs>? Match { get; set; }

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
        /// </summary>
        [Input("period", required: true)]
        public Input<int> Period { get; set; } = null!;

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<int> Threshold { get; set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RateLimitArgs()
        {
        }
        public static new RateLimitArgs Empty => new RateLimitArgs();
    }

    public sealed class RateLimitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        /// </summary>
        [Input("action")]
        public Input<Inputs.RateLimitActionGetArgs>? Action { get; set; }

        [Input("bypassUrlPatterns")]
        private InputList<string>? _bypassUrlPatterns;
        public InputList<string> BypassUrlPatterns
        {
            get => _bypassUrlPatterns ?? (_bypassUrlPatterns = new InputList<string>());
            set => _bypassUrlPatterns = value;
        }

        /// <summary>
        /// Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        /// </summary>
        [Input("correlate")]
        public Input<Inputs.RateLimitCorrelateGetArgs>? Correlate { get; set; }

        /// <summary>
        /// A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether this ratelimit is currently disabled. Defaults to `false`.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
        /// </summary>
        [Input("match")]
        public Input<Inputs.RateLimitMatchGetArgs>? Match { get; set; }

        /// <summary>
        /// The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The threshold that triggers the rate limit mitigations, combine with period.
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RateLimitState()
        {
        }
        public static new RateLimitState Empty => new RateLimitState();
    }
}
