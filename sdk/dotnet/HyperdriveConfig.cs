// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// The [Hyperdrive Config](https://developers.cloudflare.com/hyperdrive/) resource allows you to manage Cloudflare Hyperdrive Configs.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var noDefaults = new Cloudflare.HyperdriveConfig("no_defaults", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Name = "my-hyperdrive-config",
    ///         Origin = new Cloudflare.Inputs.HyperdriveConfigOriginArgs
    ///         {
    ///             Database = "postgres",
    ///             Password = "my-password",
    ///             Host = "my-database.example.com",
    ///             Port = 5432,
    ///             Scheme = "postgres",
    ///             User = "my-user",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/hyperdriveConfig:HyperdriveConfig example &lt;account_id&gt;/&lt;hyperdrive_config_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/hyperdriveConfig:HyperdriveConfig")]
    public partial class HyperdriveConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The caching details for the Hyperdrive configuration.
        /// </summary>
        [Output("caching")]
        public Output<Outputs.HyperdriveConfigCaching> Caching { get; private set; } = null!;

        /// <summary>
        /// The name of the Hyperdrive configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The origin details for the Hyperdrive configuration.
        /// </summary>
        [Output("origin")]
        public Output<Outputs.HyperdriveConfigOrigin> Origin { get; private set; } = null!;


        /// <summary>
        /// Create a HyperdriveConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HyperdriveConfig(string name, HyperdriveConfigArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/hyperdriveConfig:HyperdriveConfig", name, args ?? new HyperdriveConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HyperdriveConfig(string name, Input<string> id, HyperdriveConfigState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/hyperdriveConfig:HyperdriveConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HyperdriveConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HyperdriveConfig Get(string name, Input<string> id, HyperdriveConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new HyperdriveConfig(name, id, state, options);
        }
    }

    public sealed class HyperdriveConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The caching details for the Hyperdrive configuration.
        /// </summary>
        [Input("caching")]
        public Input<Inputs.HyperdriveConfigCachingArgs>? Caching { get; set; }

        /// <summary>
        /// The name of the Hyperdrive configuration.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The origin details for the Hyperdrive configuration.
        /// </summary>
        [Input("origin", required: true)]
        public Input<Inputs.HyperdriveConfigOriginArgs> Origin { get; set; } = null!;

        public HyperdriveConfigArgs()
        {
        }
        public static new HyperdriveConfigArgs Empty => new HyperdriveConfigArgs();
    }

    public sealed class HyperdriveConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The caching details for the Hyperdrive configuration.
        /// </summary>
        [Input("caching")]
        public Input<Inputs.HyperdriveConfigCachingGetArgs>? Caching { get; set; }

        /// <summary>
        /// The name of the Hyperdrive configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The origin details for the Hyperdrive configuration.
        /// </summary>
        [Input("origin")]
        public Input<Inputs.HyperdriveConfigOriginGetArgs>? Origin { get; set; }

        public HyperdriveConfigState()
        {
        }
        public static new HyperdriveConfigState Empty => new HyperdriveConfigState();
    }
}
