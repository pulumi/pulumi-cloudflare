// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetWaitingRoom
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWaitingRoom = Cloudflare.GetWaitingRoom.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WaitingRoomId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWaitingRoomResult> InvokeAsync(GetWaitingRoomArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWaitingRoomResult>("cloudflare:index/getWaitingRoom:getWaitingRoom", args ?? new GetWaitingRoomArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWaitingRoom = Cloudflare.GetWaitingRoom.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WaitingRoomId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWaitingRoomResult> Invoke(GetWaitingRoomInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWaitingRoomResult>("cloudflare:index/getWaitingRoom:getWaitingRoom", args ?? new GetWaitingRoomInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWaitingRoom = Cloudflare.GetWaitingRoom.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WaitingRoomId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWaitingRoomResult> Invoke(GetWaitingRoomInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWaitingRoomResult>("cloudflare:index/getWaitingRoom:getWaitingRoom", args ?? new GetWaitingRoomInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWaitingRoomArgs : global::Pulumi.InvokeArgs
    {
        [Input("waitingRoomId")]
        public string? WaitingRoomId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetWaitingRoomArgs()
        {
        }
        public static new GetWaitingRoomArgs Empty => new GetWaitingRoomArgs();
    }

    public sealed class GetWaitingRoomInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("waitingRoomId")]
        public Input<string>? WaitingRoomId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetWaitingRoomInvokeArgs()
        {
        }
        public static new GetWaitingRoomInvokeArgs Empty => new GetWaitingRoomInvokeArgs();
    }


    [OutputType]
    public sealed class GetWaitingRoomResult
    {
        /// <summary>
        /// Only available for the Waiting Room Advanced subscription. Additional hostname and path combinations to which this waiting room will be applied. There is an implied wildcard at the end of the path. The hostname and path combination must be unique to this and all other waiting rooms.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWaitingRoomAdditionalRouteResult> AdditionalRoutes;
        /// <summary>
        /// Configures cookie attributes for the waiting room cookie. This encrypted cookie stores a user's status in the waiting room, such as queue position.
        /// </summary>
        public readonly Outputs.GetWaitingRoomCookieAttributesResult CookieAttributes;
        /// <summary>
        /// Appends a '_' + a custom suffix to the end of Cloudflare Waiting Room's cookie name(_*cf*waitingroom). If `CookieSuffix` is "abcd", the cookie name will be `__cf_waitingroom_abcd`. This field is required if using `AdditionalRoutes`.
        /// </summary>
        public readonly string CookieSuffix;
        public readonly string CreatedOn;
        /// <summary>
        /// Only available for the Waiting Room Advanced subscription. This is a template html file that will be rendered at the edge. If no custom*page*html is provided, the default waiting room will be used. The template is based on mustache ( https://mustache.github.io/ ). There are several variables that are evaluated by the Cloudflare edge:
        /// </summary>
        public readonly string CustomPageHtml;
        public readonly string DefaultTemplateLanguage;
        public readonly string Description;
        public readonly bool DisableSessionRenewal;
        public readonly ImmutableArray<string> EnabledOriginCommands;
        public readonly string Host;
        public readonly string Id;
        public readonly bool JsonResponseEnabled;
        public readonly string ModifiedOn;
        public readonly string Name;
        public readonly int NewUsersPerMinute;
        public readonly string NextEventPrequeueStartTime;
        public readonly string NextEventStartTime;
        public readonly string Path;
        public readonly bool QueueAll;
        public readonly string QueueingMethod;
        public readonly int QueueingStatusCode;
        public readonly int SessionDuration;
        public readonly bool Suspended;
        public readonly int TotalActiveUsers;
        public readonly string TurnstileAction;
        public readonly string TurnstileMode;
        public readonly string? WaitingRoomId;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetWaitingRoomResult(
            ImmutableArray<Outputs.GetWaitingRoomAdditionalRouteResult> additionalRoutes,

            Outputs.GetWaitingRoomCookieAttributesResult cookieAttributes,

            string cookieSuffix,

            string createdOn,

            string customPageHtml,

            string defaultTemplateLanguage,

            string description,

            bool disableSessionRenewal,

            ImmutableArray<string> enabledOriginCommands,

            string host,

            string id,

            bool jsonResponseEnabled,

            string modifiedOn,

            string name,

            int newUsersPerMinute,

            string nextEventPrequeueStartTime,

            string nextEventStartTime,

            string path,

            bool queueAll,

            string queueingMethod,

            int queueingStatusCode,

            int sessionDuration,

            bool suspended,

            int totalActiveUsers,

            string turnstileAction,

            string turnstileMode,

            string? waitingRoomId,

            string zoneId)
        {
            AdditionalRoutes = additionalRoutes;
            CookieAttributes = cookieAttributes;
            CookieSuffix = cookieSuffix;
            CreatedOn = createdOn;
            CustomPageHtml = customPageHtml;
            DefaultTemplateLanguage = defaultTemplateLanguage;
            Description = description;
            DisableSessionRenewal = disableSessionRenewal;
            EnabledOriginCommands = enabledOriginCommands;
            Host = host;
            Id = id;
            JsonResponseEnabled = jsonResponseEnabled;
            ModifiedOn = modifiedOn;
            Name = name;
            NewUsersPerMinute = newUsersPerMinute;
            NextEventPrequeueStartTime = nextEventPrequeueStartTime;
            NextEventStartTime = nextEventStartTime;
            Path = path;
            QueueAll = queueAll;
            QueueingMethod = queueingMethod;
            QueueingStatusCode = queueingStatusCode;
            SessionDuration = sessionDuration;
            Suspended = suspended;
            TotalActiveUsers = totalActiveUsers;
            TurnstileAction = turnstileAction;
            TurnstileMode = turnstileMode;
            WaitingRoomId = waitingRoomId;
            ZoneId = zoneId;
        }
    }
}
