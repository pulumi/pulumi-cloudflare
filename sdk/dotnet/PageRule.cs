// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/pageRule:PageRule example '&lt;zone_id&gt;/&lt;pagerule_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/pageRule:PageRule")]
    public partial class PageRule : global::Pulumi.CustomResource
    {
        [Output("actions")]
        public Output<Outputs.PageRuleActions> Actions { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the Page Rule was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the Page Rule was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The priority of the rule, used to define which Page Rule is processed
        /// over another. A higher number indicates a higher priority. For example,
        /// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
        /// specific Page Rule to take precedence (rule B: `/images/special/*`),
        /// specify a higher priority for rule B so it overrides rule A.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The status of the Page Rule.
        /// Available values: "active", "disabled".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a PageRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PageRule(string name, PageRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/pageRule:PageRule", name, args ?? new PageRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PageRule(string name, Input<string> id, PageRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/pageRule:PageRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PageRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PageRule Get(string name, Input<string> id, PageRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new PageRule(name, id, state, options);
        }
    }

    public sealed class PageRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        public Input<Inputs.PageRuleActionsArgs> Actions { get; set; } = null!;

        /// <summary>
        /// The priority of the rule, used to define which Page Rule is processed
        /// over another. A higher number indicates a higher priority. For example,
        /// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
        /// specific Page Rule to take precedence (rule B: `/images/special/*`),
        /// specify a higher priority for rule B so it overrides rule A.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The status of the Page Rule.
        /// Available values: "active", "disabled".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public PageRuleArgs()
        {
        }
        public static new PageRuleArgs Empty => new PageRuleArgs();
    }

    public sealed class PageRuleState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        public Input<Inputs.PageRuleActionsGetArgs>? Actions { get; set; }

        /// <summary>
        /// The timestamp of when the Page Rule was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The timestamp of when the Page Rule was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The priority of the rule, used to define which Page Rule is processed
        /// over another. A higher number indicates a higher priority. For example,
        /// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
        /// specific Page Rule to take precedence (rule B: `/images/special/*`),
        /// specify a higher priority for rule B so it overrides rule A.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The status of the Page Rule.
        /// Available values: "active", "disabled".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public PageRuleState()
        {
        }
        public static new PageRuleState Empty => new PageRuleState();
    }
}
