// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetRuleset
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRuleset = Cloudflare.GetRuleset.Invoke(new()
        ///     {
        ///         RulesetId = "2f2feab2026849078ba485f918791bdc",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRulesetResult> InvokeAsync(GetRulesetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRulesetResult>("cloudflare:index/getRuleset:getRuleset", args ?? new GetRulesetArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRuleset = Cloudflare.GetRuleset.Invoke(new()
        ///     {
        ///         RulesetId = "2f2feab2026849078ba485f918791bdc",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulesetResult> Invoke(GetRulesetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulesetResult>("cloudflare:index/getRuleset:getRuleset", args ?? new GetRulesetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRuleset = Cloudflare.GetRuleset.Invoke(new()
        ///     {
        ///         RulesetId = "2f2feab2026849078ba485f918791bdc",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulesetResult> Invoke(GetRulesetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulesetResult>("cloudflare:index/getRuleset:getRuleset", args ?? new GetRulesetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRulesetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        /// <summary>
        /// The unique ID of the ruleset.
        /// </summary>
        [Input("rulesetId")]
        public string? RulesetId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetRulesetArgs()
        {
        }
        public static new GetRulesetArgs Empty => new GetRulesetArgs();
    }

    public sealed class GetRulesetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The unique ID of the ruleset.
        /// </summary>
        [Input("rulesetId")]
        public Input<string>? RulesetId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetRulesetInvokeArgs()
        {
        }
        public static new GetRulesetInvokeArgs Empty => new GetRulesetInvokeArgs();
    }


    [OutputType]
    public sealed class GetRulesetResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// An informative description of the ruleset.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The unique ID of the ruleset.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of the ruleset.
        /// Available values: "managed", "custom", "root", "zone".
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The human-readable name of the ruleset.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The phase of the ruleset.
        /// Available values: "ddos*l4", "ddos*l7", "http*config*settings", "http*custom*errors", "http*log*custom*fields", "http*ratelimit", "http*request*cache*settings", "http*request*dynamic*redirect", "http*request*firewall*custom", "http*request*firewall*managed", "http*request*late*transform", "http*request*origin", "http*request*redirect", "http*request*sanitize", "http*request*sbfm", "http*request*transform", "http*response*compression", "http*response*firewall*managed", "http*response*headers*transform", "magic*transit", "magic*transit*ids*managed", "magic*transit*managed", "magic*transit_ratelimit".
        /// </summary>
        public readonly string Phase;
        /// <summary>
        /// The list of rules in the ruleset.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesetRuleResult> Rules;
        /// <summary>
        /// The unique ID of the ruleset.
        /// </summary>
        public readonly string? RulesetId;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetRulesetResult(
            string? accountId,

            string description,

            string id,

            string kind,

            string name,

            string phase,

            ImmutableArray<Outputs.GetRulesetRuleResult> rules,

            string? rulesetId,

            string? zoneId)
        {
            AccountId = accountId;
            Description = description;
            Id = id;
            Kind = kind;
            Name = name;
            Phase = phase;
            Rules = rules;
            RulesetId = rulesetId;
            ZoneId = zoneId;
        }
    }
}
