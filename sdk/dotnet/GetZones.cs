// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZones
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZones = Cloudflare.GetZones.Invoke(new()
        ///     {
        ///         Account = new Cloudflare.Inputs.GetZonesAccountInputArgs
        ///         {
        ///             Id = "id",
        ///             Name = "name",
        ///         },
        ///         Direction = "desc",
        ///         Name = "name",
        ///         Order = "status",
        ///         Status = "initializing",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZonesResult> InvokeAsync(GetZonesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZonesResult>("cloudflare:index/getZones:getZones", args ?? new GetZonesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZones = Cloudflare.GetZones.Invoke(new()
        ///     {
        ///         Account = new Cloudflare.Inputs.GetZonesAccountInputArgs
        ///         {
        ///             Id = "id",
        ///             Name = "name",
        ///         },
        ///         Direction = "desc",
        ///         Name = "name",
        ///         Order = "status",
        ///         Status = "initializing",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZonesResult> Invoke(GetZonesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZonesResult>("cloudflare:index/getZones:getZones", args ?? new GetZonesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZones = Cloudflare.GetZones.Invoke(new()
        ///     {
        ///         Account = new Cloudflare.Inputs.GetZonesAccountInputArgs
        ///         {
        ///             Id = "id",
        ///             Name = "name",
        ///         },
        ///         Direction = "desc",
        ///         Name = "name",
        ///         Order = "status",
        ///         Status = "initializing",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZonesResult> Invoke(GetZonesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZonesResult>("cloudflare:index/getZones:getZones", args ?? new GetZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZonesArgs : global::Pulumi.InvokeArgs
    {
        [Input("account")]
        public Inputs.GetZonesAccountArgs? Account { get; set; }

        [Input("direction")]
        public string? Direction { get; set; }

        [Input("match")]
        public string? Match { get; set; }

        [Input("maxItems")]
        public int? MaxItems { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("order")]
        public string? Order { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        public GetZonesArgs()
        {
        }
        public static new GetZonesArgs Empty => new GetZonesArgs();
    }

    public sealed class GetZonesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("account")]
        public Input<Inputs.GetZonesAccountInputArgs>? Account { get; set; }

        [Input("direction")]
        public Input<string>? Direction { get; set; }

        [Input("match")]
        public Input<string>? Match { get; set; }

        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("order")]
        public Input<string>? Order { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetZonesInvokeArgs()
        {
        }
        public static new GetZonesInvokeArgs Empty => new GetZonesInvokeArgs();
    }


    [OutputType]
    public sealed class GetZonesResult
    {
        public readonly Outputs.GetZonesAccountResult? Account;
        public readonly string? Direction;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Match;
        public readonly int? MaxItems;
        public readonly string? Name;
        public readonly string? Order;
        public readonly ImmutableArray<Outputs.GetZonesResultResult> Results;
        public readonly string? Status;

        [OutputConstructor]
        private GetZonesResult(
            Outputs.GetZonesAccountResult? account,

            string? direction,

            string id,

            string match,

            int? maxItems,

            string? name,

            string? order,

            ImmutableArray<Outputs.GetZonesResultResult> results,

            string? status)
        {
            Account = account;
            Direction = direction;
            Id = id;
            Match = match;
            MaxItems = maxItems;
            Name = name;
            Order = order;
            Results = results;
            Status = status;
        }
    }
}
