// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZones
    {
        /// <summary>
        /// Use this data source to look up [Zone](https://api.cloudflare.com/#zone-properties) records.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Given you have the following zones in Cloudflare.
        /// 
        /// - example.com
        /// - example.net
        /// - not-example.com
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 Name = "example.com",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 LookupType = "contains",
        ///                 Name = "example",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 LookupType = "contains",
        ///                 Match = "^not-",
        ///                 Name = "example",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 AccountId = "1d5fdc9e88c8a8c4518b068cd94331fe",
        ///                 Status = "active",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZonesResult> InvokeAsync(GetZonesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetZonesResult>("cloudflare:index/getZones:getZones", args ?? new GetZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to look up [Zone](https://api.cloudflare.com/#zone-properties) records.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Given you have the following zones in Cloudflare.
        /// 
        /// - example.com
        /// - example.net
        /// - not-example.com
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 Name = "example.com",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 LookupType = "contains",
        ///                 Name = "example",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 LookupType = "contains",
        ///                 Match = "^not-",
        ///                 Name = "example",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Cloudflare.GetZones.InvokeAsync(new Cloudflare.GetZonesArgs
        ///         {
        ///             Filter = new Cloudflare.Inputs.GetZonesFilterArgs
        ///             {
        ///                 AccountId = "1d5fdc9e88c8a8c4518b068cd94331fe",
        ///                 Status = "active",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZonesResult> Invoke(GetZonesInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetZonesResult>("cloudflare:index/getZones:getZones", args ?? new GetZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZonesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used to look up zone records. If more than one value is given all
        /// values must match in order to be included, see below for full list.
        /// </summary>
        [Input("filter", required: true)]
        public Inputs.GetZonesFilterArgs Filter { get; set; } = null!;

        public GetZonesArgs()
        {
        }
    }

    public sealed class GetZonesInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// One or more values used to look up zone records. If more than one value is given all
        /// values must match in order to be included, see below for full list.
        /// </summary>
        [Input("filter", required: true)]
        public Input<Inputs.GetZonesFilterInputArgs> Filter { get; set; } = null!;

        public GetZonesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetZonesResult
    {
        public readonly Outputs.GetZonesFilterResult Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A list of zone objects. Object format:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZonesZoneResult> Zones;

        [OutputConstructor]
        private GetZonesResult(
            Outputs.GetZonesFilterResult filter,

            string id,

            ImmutableArray<Outputs.GetZonesZoneResult> zones)
        {
            Filter = filter;
            Id = id;
            Zones = zones;
        }
    }
}
