// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// !&gt; This resource is no longer recommended. Please use the `cloudflare.Worker`, `cloudflare.WorkerVersion`, and `cloudflare.WorkersDeployment` resources instead. See how to use them in the [developer documentation](https://developers.cloudflare.com/workers/platform/infrastructure-as-code/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkersScript = new Cloudflare.WorkersScript("example_workers_script", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         ScriptName = "this-is_my_script-01",
    ///         Assets = new Cloudflare.Inputs.WorkersScriptAssetsArgs
    ///         {
    ///             Config = new Cloudflare.Inputs.WorkersScriptAssetsConfigArgs
    ///             {
    ///                 Headers = @"        /dashboard/*
    ///         X-Frame-Options: DENY
    /// 
    ///         /static/*
    ///         Access-Control-Allow-Origin: *
    /// ",
    ///                 Redirects = @"        /foo /bar 301
    ///         /news/* /blog/:splat
    /// ",
    ///                 HtmlHandling = "auto-trailing-slash",
    ///                 NotFoundHandling = "none",
    ///                 RunWorkerFirst = false,
    ///             },
    ///             Jwt = "jwt",
    ///         },
    ///         Bindings = new[]
    ///         {
    ///             new Cloudflare.Inputs.WorkersScriptBindingArgs
    ///             {
    ///                 Name = "MY_ENV_VAR",
    ///                 Text = "my_data",
    ///                 Type = "plain_text",
    ///             },
    ///         },
    ///         CompatibilityDate = "2021-01-01",
    ///         CompatibilityFlags = new[]
    ///         {
    ///             "nodejs_compat",
    ///         },
    ///         ContentFile = "worker.js",
    ///         ContentSha256 = Std.Filesha256.Invoke(new()
    ///         {
    ///             Input = "worker.js",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         KeepAssets = false,
    ///         KeepBindings = new[]
    ///         {
    ///             "kv_namespace",
    ///         },
    ///         Limits = new Cloudflare.Inputs.WorkersScriptLimitsArgs
    ///         {
    ///             Cpu_ms = 50,
    ///         },
    ///         Logpush = false,
    ///         MainModule = "worker.js",
    ///         Migrations = 
    ///         {
    ///             { "deleted_classes", new[]
    ///             {
    ///                 "string",
    ///             } },
    ///             { "new_classes", new[]
    ///             {
    ///                 "string",
    ///             } },
    ///             { "new_sqlite_classes", new[]
    ///             {
    ///                 "string",
    ///             } },
    ///             { "new_tag", "v2" },
    ///             { "old_tag", "v1" },
    ///             { "renamed_classes", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "from", "from" },
    ///                     { "to", "to" },
    ///                 },
    ///             } },
    ///             { "transferred_classes", new[]
    ///             {
    ///                 
    ///                 {
    ///                     { "from", "from" },
    ///                     { "fromScript", "from_script" },
    ///                     { "to", "to" },
    ///                 },
    ///             } },
    ///         },
    ///         Observability = new Cloudflare.Inputs.WorkersScriptObservabilityArgs
    ///         {
    ///             Enabled = true,
    ///             Head_sampling_rate = 0.1,
    ///             Logs = new Cloudflare.Inputs.WorkersScriptObservabilityLogsArgs
    ///             {
    ///                 Enabled = true,
    ///                 InvocationLogs = true,
    ///                 Destinations = new[]
    ///                 {
    ///                     "cloudflare",
    ///                 },
    ///                 HeadSamplingRate = 0.1,
    ///                 Persist = true,
    ///             },
    ///         },
    ///         Placement = new Cloudflare.Inputs.WorkersScriptPlacementArgs
    ///         {
    ///             Mode = "smart",
    ///         },
    ///         TailConsumers = new[]
    ///         {
    ///             new Cloudflare.Inputs.WorkersScriptTailConsumerArgs
    ///             {
    ///                 Service = "my-log-consumer",
    ///                 Environment = "production",
    ///                 Namespace = "my-namespace",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workersScript:WorkersScript example '&lt;account_id&gt;/&lt;script_name&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/workersScript:WorkersScript")]
    public partial class WorkersScript : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Output("assets")]
        public Output<Outputs.WorkersScriptAssets?> Assets { get; private set; } = null!;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        [Output("bindings")]
        public Output<ImmutableArray<Outputs.WorkersScriptBinding>> Bindings { get; private set; } = null!;

        /// <summary>
        /// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `Fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Output("bodyPart")]
        public Output<string?> BodyPart { get; private set; } = null!;

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Output("compatibilityDate")]
        public Output<string> CompatibilityDate { get; private set; } = null!;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `CompatibilityDate`.
        /// </summary>
        [Output("compatibilityFlags")]
        public Output<ImmutableArray<string>> CompatibilityFlags { get; private set; } = null!;

        /// <summary>
        /// Module or Service Worker contents of the Worker. Conflicts with `ContentFile`.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `Content`. Must be paired with `ContentSha256`.
        /// </summary>
        [Output("contentFile")]
        public Output<string?> ContentFile { get; private set; } = null!;

        /// <summary>
        /// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `ContentFile` is specified.
        /// </summary>
        [Output("contentSha256")]
        public Output<string?> ContentSha256 { get; private set; } = null!;

        /// <summary>
        /// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
        /// </summary>
        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Hashed script content, can be used in a If-None-Match header when updating.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// The names of handlers exported as part of the default export.
        /// </summary>
        [Output("handlers")]
        public Output<ImmutableArray<string>> Handlers { get; private set; } = null!;

        /// <summary>
        /// Whether a Worker contains assets.
        /// </summary>
        [Output("hasAssets")]
        public Output<bool> HasAssets { get; private set; } = null!;

        /// <summary>
        /// Whether a Worker contains modules.
        /// </summary>
        [Output("hasModules")]
        public Output<bool> HasModules { get; private set; } = null!;

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Output("keepAssets")]
        public Output<bool?> KeepAssets { get; private set; } = null!;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        [Output("keepBindings")]
        public Output<ImmutableArray<string>> KeepBindings { get; private set; } = null!;

        /// <summary>
        /// The client most recently used to deploy this Worker.
        /// </summary>
        [Output("lastDeployedFrom")]
        public Output<string> LastDeployedFrom { get; private set; } = null!;

        /// <summary>
        /// Limits to apply for this Worker.
        /// </summary>
        [Output("limits")]
        public Output<Outputs.WorkersScriptLimits?> Limits { get; private set; } = null!;

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Output("logpush")]
        public Output<bool> Logpush { get; private set; } = null!;

        /// <summary>
        /// Name of the uploaded file that contains the main module (e.g. the file exporting a `Fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Output("mainModule")]
        public Output<string?> MainModule { get; private set; } = null!;

        /// <summary>
        /// The tag of the Durable Object migration that was most recently applied for this Worker.
        /// </summary>
        [Output("migrationTag")]
        public Output<string> MigrationTag { get; private set; } = null!;

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Named exports, such as Durable Object class implementations and named entrypoints.
        /// </summary>
        [Output("namedHandlers")]
        public Output<ImmutableArray<Outputs.WorkersScriptNamedHandler>> NamedHandlers { get; private set; } = null!;

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Output("observability")]
        public Output<Outputs.WorkersScriptObservability?> Observability { get; private set; } = null!;

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Output("placement")]
        public Output<Outputs.WorkersScriptPlacement> Placement { get; private set; } = null!;

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Output("scriptName")]
        public Output<string> ScriptName { get; private set; } = null!;

        [Output("startupTimeMs")]
        public Output<int> StartupTimeMs { get; private set; } = null!;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        [Output("tailConsumers")]
        public Output<ImmutableArray<Outputs.WorkersScriptTailConsumer>> TailConsumers { get; private set; } = null!;

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Output("usageModel")]
        public Output<string> UsageModel { get; private set; } = null!;


        /// <summary>
        /// Create a WorkersScript resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkersScript(string name, WorkersScriptArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersScript:WorkersScript", name, args ?? new WorkersScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkersScript(string name, Input<string> id, WorkersScriptState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersScript:WorkersScript", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/workerScript:WorkerScript" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkersScript resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkersScript Get(string name, Input<string> id, WorkersScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkersScript(name, id, state, options);
        }
    }

    public sealed class WorkersScriptArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkersScriptAssetsArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkersScriptBindingArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkersScriptBindingArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkersScriptBindingArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `Fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Input("bodyPart")]
        public Input<string>? BodyPart { get; set; }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `CompatibilityDate`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// Module or Service Worker contents of the Worker. Conflicts with `ContentFile`.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `Content`. Must be paired with `ContentSha256`.
        /// </summary>
        [Input("contentFile")]
        public Input<string>? ContentFile { get; set; }

        /// <summary>
        /// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `ContentFile` is specified.
        /// </summary>
        [Input("contentSha256")]
        public Input<string>? ContentSha256 { get; set; }

        /// <summary>
        /// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Input("keepAssets")]
        public Input<bool>? KeepAssets { get; set; }

        [Input("keepBindings")]
        private InputList<string>? _keepBindings;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        public InputList<string> KeepBindings
        {
            get => _keepBindings ?? (_keepBindings = new InputList<string>());
            set => _keepBindings = value;
        }

        /// <summary>
        /// Limits to apply for this Worker.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.WorkersScriptLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the uploaded file that contains the main module (e.g. the file exporting a `Fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkersScriptObservabilityArgs>? Observability { get; set; }

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkersScriptPlacementArgs>? Placement { get; set; }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName", required: true)]
        public Input<string> ScriptName { get; set; } = null!;

        [Input("tailConsumers")]
        private InputList<Inputs.WorkersScriptTailConsumerArgs>? _tailConsumers;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        public InputList<Inputs.WorkersScriptTailConsumerArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkersScriptTailConsumerArgs>());
            set => _tailConsumers = value;
        }

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        public WorkersScriptArgs()
        {
        }
        public static new WorkersScriptArgs Empty => new WorkersScriptArgs();
    }

    public sealed class WorkersScriptState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Configuration for assets within a Worker.
        /// </summary>
        [Input("assets")]
        public Input<Inputs.WorkersScriptAssetsGetArgs>? Assets { get; set; }

        [Input("bindings")]
        private InputList<Inputs.WorkersScriptBindingGetArgs>? _bindings;

        /// <summary>
        /// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
        /// </summary>
        public InputList<Inputs.WorkersScriptBindingGetArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.WorkersScriptBindingGetArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `Fetch` event). Indicates a `service worker syntax` Worker.
        /// </summary>
        [Input("bodyPart")]
        public Input<string>? BodyPart { get; set; }

        /// <summary>
        /// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
        /// </summary>
        [Input("compatibilityDate")]
        public Input<string>? CompatibilityDate { get; set; }

        [Input("compatibilityFlags")]
        private InputList<string>? _compatibilityFlags;

        /// <summary>
        /// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `CompatibilityDate`.
        /// </summary>
        public InputList<string> CompatibilityFlags
        {
            get => _compatibilityFlags ?? (_compatibilityFlags = new InputList<string>());
            set => _compatibilityFlags = value;
        }

        /// <summary>
        /// Module or Service Worker contents of the Worker. Conflicts with `ContentFile`.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `Content`. Must be paired with `ContentSha256`.
        /// </summary>
        [Input("contentFile")]
        public Input<string>? ContentFile { get; set; }

        /// <summary>
        /// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `ContentFile` is specified.
        /// </summary>
        [Input("contentSha256")]
        public Input<string>? ContentSha256 { get; set; }

        /// <summary>
        /// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// When the script was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Hashed script content, can be used in a If-None-Match header when updating.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("handlers")]
        private InputList<string>? _handlers;

        /// <summary>
        /// The names of handlers exported as part of the default export.
        /// </summary>
        public InputList<string> Handlers
        {
            get => _handlers ?? (_handlers = new InputList<string>());
            set => _handlers = value;
        }

        /// <summary>
        /// Whether a Worker contains assets.
        /// </summary>
        [Input("hasAssets")]
        public Input<bool>? HasAssets { get; set; }

        /// <summary>
        /// Whether a Worker contains modules.
        /// </summary>
        [Input("hasModules")]
        public Input<bool>? HasModules { get; set; }

        /// <summary>
        /// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
        /// </summary>
        [Input("keepAssets")]
        public Input<bool>? KeepAssets { get; set; }

        [Input("keepBindings")]
        private InputList<string>? _keepBindings;

        /// <summary>
        /// List of binding types to keep from previous_upload.
        /// </summary>
        public InputList<string> KeepBindings
        {
            get => _keepBindings ?? (_keepBindings = new InputList<string>());
            set => _keepBindings = value;
        }

        /// <summary>
        /// The client most recently used to deploy this Worker.
        /// </summary>
        [Input("lastDeployedFrom")]
        public Input<string>? LastDeployedFrom { get; set; }

        /// <summary>
        /// Limits to apply for this Worker.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.WorkersScriptLimitsGetArgs>? Limits { get; set; }

        /// <summary>
        /// Whether Logpush is turned on for the Worker.
        /// </summary>
        [Input("logpush")]
        public Input<bool>? Logpush { get; set; }

        /// <summary>
        /// Name of the uploaded file that contains the main module (e.g. the file exporting a `Fetch` handler). Indicates a `module syntax` Worker.
        /// </summary>
        [Input("mainModule")]
        public Input<string>? MainModule { get; set; }

        /// <summary>
        /// The tag of the Durable Object migration that was most recently applied for this Worker.
        /// </summary>
        [Input("migrationTag")]
        public Input<string>? MigrationTag { get; set; }

        /// <summary>
        /// When the script was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        [Input("namedHandlers")]
        private InputList<Inputs.WorkersScriptNamedHandlerGetArgs>? _namedHandlers;

        /// <summary>
        /// Named exports, such as Durable Object class implementations and named entrypoints.
        /// </summary>
        public InputList<Inputs.WorkersScriptNamedHandlerGetArgs> NamedHandlers
        {
            get => _namedHandlers ?? (_namedHandlers = new InputList<Inputs.WorkersScriptNamedHandlerGetArgs>());
            set => _namedHandlers = value;
        }

        /// <summary>
        /// Observability settings for the Worker.
        /// </summary>
        [Input("observability")]
        public Input<Inputs.WorkersScriptObservabilityGetArgs>? Observability { get; set; }

        /// <summary>
        /// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
        /// </summary>
        [Input("placement")]
        public Input<Inputs.WorkersScriptPlacementGetArgs>? Placement { get; set; }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        [Input("startupTimeMs")]
        public Input<int>? StartupTimeMs { get; set; }

        [Input("tailConsumers")]
        private InputList<Inputs.WorkersScriptTailConsumerGetArgs>? _tailConsumers;

        /// <summary>
        /// List of Workers that will consume logs from the attached Worker.
        /// </summary>
        public InputList<Inputs.WorkersScriptTailConsumerGetArgs> TailConsumers
        {
            get => _tailConsumers ?? (_tailConsumers = new InputList<Inputs.WorkersScriptTailConsumerGetArgs>());
            set => _tailConsumers = value;
        }

        /// <summary>
        /// Usage model for the Worker invocations.
        /// Available values: "standard", "bundled", "unbound".
        /// </summary>
        [Input("usageModel")]
        public Input<string>? UsageModel { get; set; }

        public WorkersScriptState()
        {
        }
        public static new WorkersScriptState Empty => new WorkersScriptState();
    }
}
