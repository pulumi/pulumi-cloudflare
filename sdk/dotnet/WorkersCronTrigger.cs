// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkersCronTrigger = new Cloudflare.WorkersCronTrigger("example_workers_cron_trigger", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         ScriptName = "this-is_my_script-01",
    ///         Body = new[]
    ///         {
    ///             
    ///             {
    ///                 { "cron", "*/30 * * * *" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/workersCronTrigger:WorkersCronTrigger example '&lt;account_id&gt;/&lt;script_name&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/workersCronTrigger:WorkersCronTrigger")]
    public partial class WorkersCronTrigger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("schedules")]
        public Output<ImmutableArray<Outputs.WorkersCronTriggerSchedule>> Schedules { get; private set; } = null!;

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Output("scriptName")]
        public Output<string> ScriptName { get; private set; } = null!;


        /// <summary>
        /// Create a WorkersCronTrigger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkersCronTrigger(string name, WorkersCronTriggerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, args ?? new WorkersCronTriggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkersCronTrigger(string name, Input<string> id, WorkersCronTriggerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/workerCronTrigger:WorkerCronTrigger" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkersCronTrigger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkersCronTrigger Get(string name, Input<string> id, WorkersCronTriggerState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkersCronTrigger(name, id, state, options);
        }
    }

    public sealed class WorkersCronTriggerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("schedules", required: true)]
        private InputList<Inputs.WorkersCronTriggerScheduleArgs>? _schedules;
        public InputList<Inputs.WorkersCronTriggerScheduleArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.WorkersCronTriggerScheduleArgs>());
            set => _schedules = value;
        }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName", required: true)]
        public Input<string> ScriptName { get; set; } = null!;

        public WorkersCronTriggerArgs()
        {
        }
        public static new WorkersCronTriggerArgs Empty => new WorkersCronTriggerArgs();
    }

    public sealed class WorkersCronTriggerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("schedules")]
        private InputList<Inputs.WorkersCronTriggerScheduleGetArgs>? _schedules;
        public InputList<Inputs.WorkersCronTriggerScheduleGetArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.WorkersCronTriggerScheduleGetArgs>());
            set => _schedules = value;
        }

        /// <summary>
        /// Name of the script, used in URLs and route configuration.
        /// </summary>
        [Input("scriptName")]
        public Input<string>? ScriptName { get; set; }

        public WorkersCronTriggerState()
        {
        }
        public static new WorkersCronTriggerState Empty => new WorkersCronTriggerState();
    }
}
