// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetDnsZoneTransfersOutgoing
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersOutgoing = Cloudflare.GetDnsZoneTransfersOutgoing.Invoke(new()
        ///     {
        ///         ZoneId = "269d8f4853475ca241c4e730be286b20",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsZoneTransfersOutgoingResult> InvokeAsync(GetDnsZoneTransfersOutgoingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsZoneTransfersOutgoingResult>("cloudflare:index/getDnsZoneTransfersOutgoing:getDnsZoneTransfersOutgoing", args ?? new GetDnsZoneTransfersOutgoingArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersOutgoing = Cloudflare.GetDnsZoneTransfersOutgoing.Invoke(new()
        ///     {
        ///         ZoneId = "269d8f4853475ca241c4e730be286b20",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsZoneTransfersOutgoingResult> Invoke(GetDnsZoneTransfersOutgoingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneTransfersOutgoingResult>("cloudflare:index/getDnsZoneTransfersOutgoing:getDnsZoneTransfersOutgoing", args ?? new GetDnsZoneTransfersOutgoingInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersOutgoing = Cloudflare.GetDnsZoneTransfersOutgoing.Invoke(new()
        ///     {
        ///         ZoneId = "269d8f4853475ca241c4e730be286b20",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsZoneTransfersOutgoingResult> Invoke(GetDnsZoneTransfersOutgoingInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneTransfersOutgoingResult>("cloudflare:index/getDnsZoneTransfersOutgoing:getDnsZoneTransfersOutgoing", args ?? new GetDnsZoneTransfersOutgoingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsZoneTransfersOutgoingArgs : global::Pulumi.InvokeArgs
    {
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetDnsZoneTransfersOutgoingArgs()
        {
        }
        public static new GetDnsZoneTransfersOutgoingArgs Empty => new GetDnsZoneTransfersOutgoingArgs();
    }

    public sealed class GetDnsZoneTransfersOutgoingInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetDnsZoneTransfersOutgoingInvokeArgs()
        {
        }
        public static new GetDnsZoneTransfersOutgoingInvokeArgs Empty => new GetDnsZoneTransfersOutgoingInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsZoneTransfersOutgoingResult
    {
        /// <summary>
        /// The time for a specific event.
        /// </summary>
        public readonly string CheckedTime;
        /// <summary>
        /// The time for a specific event.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The time for a specific event.
        /// </summary>
        public readonly string LastTransferredTime;
        /// <summary>
        /// Zone name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of peer tags.
        /// </summary>
        public readonly ImmutableArray<string> Peers;
        /// <summary>
        /// The serial number of the SOA for the given zone.
        /// </summary>
        public readonly double SoaSerial;
        public readonly string ZoneId;

        [OutputConstructor]
        private GetDnsZoneTransfersOutgoingResult(
            string checkedTime,

            string createdTime,

            string id,

            string lastTransferredTime,

            string name,

            ImmutableArray<string> peers,

            double soaSerial,

            string zoneId)
        {
            CheckedTime = checkedTime;
            CreatedTime = createdTime;
            Id = id;
            LastTransferredTime = lastTransferredTime;
            Name = name;
            Peers = peers;
            SoaSerial = soaSerial;
            ZoneId = zoneId;
        }
    }
}
