// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetR2BucketEventNotification
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleR2BucketEventNotification = Cloudflare.GetR2BucketEventNotification.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         BucketName = "example-bucket",
        ///         QueueId = "queue_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetR2BucketEventNotificationResult> InvokeAsync(GetR2BucketEventNotificationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetR2BucketEventNotificationResult>("cloudflare:index/getR2BucketEventNotification:getR2BucketEventNotification", args ?? new GetR2BucketEventNotificationArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleR2BucketEventNotification = Cloudflare.GetR2BucketEventNotification.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         BucketName = "example-bucket",
        ///         QueueId = "queue_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetR2BucketEventNotificationResult> Invoke(GetR2BucketEventNotificationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetR2BucketEventNotificationResult>("cloudflare:index/getR2BucketEventNotification:getR2BucketEventNotification", args ?? new GetR2BucketEventNotificationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleR2BucketEventNotification = Cloudflare.GetR2BucketEventNotification.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         BucketName = "example-bucket",
        ///         QueueId = "queue_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetR2BucketEventNotificationResult> Invoke(GetR2BucketEventNotificationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetR2BucketEventNotificationResult>("cloudflare:index/getR2BucketEventNotification:getR2BucketEventNotification", args ?? new GetR2BucketEventNotificationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetR2BucketEventNotificationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        /// <summary>
        /// Queue ID.
        /// </summary>
        [Input("queueId", required: true)]
        public string QueueId { get; set; } = null!;

        public GetR2BucketEventNotificationArgs()
        {
        }
        public static new GetR2BucketEventNotificationArgs Empty => new GetR2BucketEventNotificationArgs();
    }

    public sealed class GetR2BucketEventNotificationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account ID.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Queue ID.
        /// </summary>
        [Input("queueId", required: true)]
        public Input<string> QueueId { get; set; } = null!;

        public GetR2BucketEventNotificationInvokeArgs()
        {
        }
        public static new GetR2BucketEventNotificationInvokeArgs Empty => new GetR2BucketEventNotificationInvokeArgs();
    }


    [OutputType]
    public sealed class GetR2BucketEventNotificationResult
    {
        /// <summary>
        /// Transition to abort ongoing multipart uploads.
        /// </summary>
        public readonly Outputs.GetR2BucketEventNotificationAbortMultipartUploadsTransitionResult AbortMultipartUploadsTransition;
        /// <summary>
        /// Account ID.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Name of the bucket.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// Conditions that apply to all transitions of this rule.
        /// </summary>
        public readonly Outputs.GetR2BucketEventNotificationConditionsResult Conditions;
        /// <summary>
        /// Transition to delete objects.
        /// </summary>
        public readonly Outputs.GetR2BucketEventNotificationDeleteObjectsTransitionResult DeleteObjectsTransition;
        /// <summary>
        /// Whether or not this rule is in effect.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Unique identifier for this rule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Queue ID.
        /// </summary>
        public readonly string QueueId;
        /// <summary>
        /// Transitions to change the storage class of objects.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetR2BucketEventNotificationStorageClassTransitionResult> StorageClassTransitions;

        [OutputConstructor]
        private GetR2BucketEventNotificationResult(
            Outputs.GetR2BucketEventNotificationAbortMultipartUploadsTransitionResult abortMultipartUploadsTransition,

            string accountId,

            string bucketName,

            Outputs.GetR2BucketEventNotificationConditionsResult conditions,

            Outputs.GetR2BucketEventNotificationDeleteObjectsTransitionResult deleteObjectsTransition,

            bool enabled,

            string id,

            string queueId,

            ImmutableArray<Outputs.GetR2BucketEventNotificationStorageClassTransitionResult> storageClassTransitions)
        {
            AbortMultipartUploadsTransition = abortMultipartUploadsTransition;
            AccountId = accountId;
            BucketName = bucketName;
            Conditions = conditions;
            DeleteObjectsTransition = deleteObjectsTransition;
            Enabled = enabled;
            Id = id;
            QueueId = queueId;
            StorageClassTransitions = storageClassTransitions;
        }
    }
}
