// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetNotificationPolicyWebhooks
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicyWebhooks = Cloudflare.GetNotificationPolicyWebhooks.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WebhookId = "b115d5ec-15c6-41ee-8b76-92c449b5227b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNotificationPolicyWebhooksResult> InvokeAsync(GetNotificationPolicyWebhooksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNotificationPolicyWebhooksResult>("cloudflare:index/getNotificationPolicyWebhooks:getNotificationPolicyWebhooks", args ?? new GetNotificationPolicyWebhooksArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicyWebhooks = Cloudflare.GetNotificationPolicyWebhooks.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WebhookId = "b115d5ec-15c6-41ee-8b76-92c449b5227b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationPolicyWebhooksResult> Invoke(GetNotificationPolicyWebhooksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationPolicyWebhooksResult>("cloudflare:index/getNotificationPolicyWebhooks:getNotificationPolicyWebhooks", args ?? new GetNotificationPolicyWebhooksInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleNotificationPolicyWebhooks = Cloudflare.GetNotificationPolicyWebhooks.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WebhookId = "b115d5ec-15c6-41ee-8b76-92c449b5227b",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNotificationPolicyWebhooksResult> Invoke(GetNotificationPolicyWebhooksInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNotificationPolicyWebhooksResult>("cloudflare:index/getNotificationPolicyWebhooks:getNotificationPolicyWebhooks", args ?? new GetNotificationPolicyWebhooksInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNotificationPolicyWebhooksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account id
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of a webhook
        /// </summary>
        [Input("webhookId")]
        public string? WebhookId { get; set; }

        public GetNotificationPolicyWebhooksArgs()
        {
        }
        public static new GetNotificationPolicyWebhooksArgs Empty => new GetNotificationPolicyWebhooksArgs();
    }

    public sealed class GetNotificationPolicyWebhooksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account id
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of a webhook
        /// </summary>
        [Input("webhookId")]
        public Input<string>? WebhookId { get; set; }

        public GetNotificationPolicyWebhooksInvokeArgs()
        {
        }
        public static new GetNotificationPolicyWebhooksInvokeArgs Empty => new GetNotificationPolicyWebhooksInvokeArgs();
    }


    [OutputType]
    public sealed class GetNotificationPolicyWebhooksResult
    {
        /// <summary>
        /// The account id
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Timestamp of when the webhook destination was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique identifier of a webhook
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Timestamp of the last time an attempt to dispatch a notification to this webhook failed.
        /// </summary>
        public readonly string LastFailure;
        /// <summary>
        /// Timestamp of the last time Cloudflare was able to successfully dispatch a notification using this webhook.
        /// </summary>
        public readonly string LastSuccess;
        /// <summary>
        /// The name of the webhook destination. This will be included in the request body when you receive a webhook notification.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Optional secret that will be passed in the `cf-webhook-auth` header when dispatching generic webhook notifications or formatted for supported destinations. Secrets are not returned in any API response body.
        /// </summary>
        public readonly string Secret;
        /// <summary>
        /// Type of webhook endpoint.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The POST endpoint to call when dispatching a notification.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// The unique identifier of a webhook
        /// </summary>
        public readonly string? WebhookId;

        [OutputConstructor]
        private GetNotificationPolicyWebhooksResult(
            string accountId,

            string createdAt,

            string id,

            string lastFailure,

            string lastSuccess,

            string name,

            string secret,

            string type,

            string url,

            string? webhookId)
        {
            AccountId = accountId;
            CreatedAt = createdAt;
            Id = id;
            LastFailure = lastFailure;
            LastSuccess = lastSuccess;
            Name = name;
            Secret = secret;
            Type = type;
            Url = url;
            WebhookId = webhookId;
        }
    }
}
