// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetKeylessCertificate
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeylessCertificate = Cloudflare.GetKeylessCertificate.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         KeylessCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetKeylessCertificateResult> InvokeAsync(GetKeylessCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeylessCertificateResult>("cloudflare:index/getKeylessCertificate:getKeylessCertificate", args ?? new GetKeylessCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeylessCertificate = Cloudflare.GetKeylessCertificate.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         KeylessCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeylessCertificateResult> Invoke(GetKeylessCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeylessCertificateResult>("cloudflare:index/getKeylessCertificate:getKeylessCertificate", args ?? new GetKeylessCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleKeylessCertificate = Cloudflare.GetKeylessCertificate.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         KeylessCertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeylessCertificateResult> Invoke(GetKeylessCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeylessCertificateResult>("cloudflare:index/getKeylessCertificate:getKeylessCertificate", args ?? new GetKeylessCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeylessCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("keylessCertificateId")]
        public string? KeylessCertificateId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetKeylessCertificateArgs()
        {
        }
        public static new GetKeylessCertificateArgs Empty => new GetKeylessCertificateArgs();
    }

    public sealed class GetKeylessCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("keylessCertificateId")]
        public Input<string>? KeylessCertificateId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetKeylessCertificateInvokeArgs()
        {
        }
        public static new GetKeylessCertificateInvokeArgs Empty => new GetKeylessCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeylessCertificateResult
    {
        /// <summary>
        /// When the Keyless SSL was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Whether or not the Keyless SSL is on or off.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string? KeylessCertificateId;
        /// <summary>
        /// When the Keyless SSL was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Available permissions for the Keyless SSL for the current user requesting the item.
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// The keyless SSL port used to communicate between Cloudflare and the client's Keyless SSL server.
        /// </summary>
        public readonly double Port;
        /// <summary>
        /// Status of the Keyless SSL.
        /// Available values: "active", "deleted".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Configuration for using Keyless SSL through a Cloudflare Tunnel
        /// </summary>
        public readonly Outputs.GetKeylessCertificateTunnelResult Tunnel;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetKeylessCertificateResult(
            string createdOn,

            bool enabled,

            string host,

            string id,

            string? keylessCertificateId,

            string modifiedOn,

            string name,

            ImmutableArray<string> permissions,

            double port,

            string status,

            Outputs.GetKeylessCertificateTunnelResult tunnel,

            string zoneId)
        {
            CreatedOn = createdOn;
            Enabled = enabled;
            Host = host;
            Id = id;
            KeylessCertificateId = keylessCertificateId;
            ModifiedOn = modifiedOn;
            Name = name;
            Permissions = permissions;
            Port = port;
            Status = status;
            Tunnel = tunnel;
            ZoneId = zoneId;
        }
    }
}
