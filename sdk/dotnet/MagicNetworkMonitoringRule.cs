// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicNetworkMonitoringRule = new Cloudflare.MagicNetworkMonitoringRule("example_magic_network_monitoring_rule", new()
    ///     {
    ///         AccountId = "6f91088a406011ed95aed352566e8d4c",
    ///         Duration = "1m",
    ///         Name = "my_rule_1",
    ///         AutomaticAdvertisement = true,
    ///         Bandwidth = 1000,
    ///         PacketThreshold = 10000,
    ///         Prefixes = new[]
    ///         {
    ///             "203.0.113.1/32",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule example '&lt;account_id&gt;/&lt;rule_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule")]
    public partial class MagicNetworkMonitoringRule : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
        /// </summary>
        [Output("automaticAdvertisement")]
        public Output<bool?> AutomaticAdvertisement { get; private set; } = null!;

        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Output("bandwidth")]
        public Output<double?> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Output("bandwidthThreshold")]
        public Output<double> BandwidthThreshold { get; private set; } = null!;

        /// <summary>
        /// The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
        /// Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
        /// </summary>
        [Output("duration")]
        public Output<string> Duration { get; private set; } = null!;

        /// <summary>
        /// The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Output("packetThreshold")]
        public Output<double?> PacketThreshold { get; private set; } = null!;

        /// <summary>
        /// Prefix match type to be applied for a prefix auto advertisement when using an AdvancedDdos rule.
        /// Available values: "exact", "subnet", "supernet".
        /// </summary>
        [Output("prefixMatch")]
        public Output<string> PrefixMatch { get; private set; } = null!;

        [Output("prefixes")]
        public Output<ImmutableArray<string>> Prefixes { get; private set; } = null!;

        /// <summary>
        /// MNM rule type.
        /// Available values: "threshold", "zscore", "AdvancedDdos".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Level of sensitivity set for zscore rules.
        /// Available values: "low", "medium", "high".
        /// </summary>
        [Output("zscoreSensitivity")]
        public Output<string> ZscoreSensitivity { get; private set; } = null!;

        /// <summary>
        /// Target of the zscore rule analysis.
        /// Available values: "bits", "packets".
        /// </summary>
        [Output("zscoreTarget")]
        public Output<string> ZscoreTarget { get; private set; } = null!;


        /// <summary>
        /// Create a MagicNetworkMonitoringRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicNetworkMonitoringRule(string name, MagicNetworkMonitoringRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule", name, args ?? new MagicNetworkMonitoringRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicNetworkMonitoringRule(string name, Input<string> id, MagicNetworkMonitoringRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicNetworkMonitoringRule:MagicNetworkMonitoringRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicNetworkMonitoringRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicNetworkMonitoringRule Get(string name, Input<string> id, MagicNetworkMonitoringRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicNetworkMonitoringRule(name, id, state, options);
        }
    }

    public sealed class MagicNetworkMonitoringRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
        /// </summary>
        [Input("automaticAdvertisement")]
        public Input<bool>? AutomaticAdvertisement { get; set; }

        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Input("bandwidth")]
        public Input<double>? Bandwidth { get; set; }

        /// <summary>
        /// The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
        /// Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Input("packetThreshold")]
        public Input<double>? PacketThreshold { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        public MagicNetworkMonitoringRuleArgs()
        {
        }
        public static new MagicNetworkMonitoringRuleArgs Empty => new MagicNetworkMonitoringRuleArgs();
    }

    public sealed class MagicNetworkMonitoringRuleState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
        /// </summary>
        [Input("automaticAdvertisement")]
        public Input<bool>? AutomaticAdvertisement { get; set; }

        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Input("bandwidth")]
        public Input<double>? Bandwidth { get; set; }

        /// <summary>
        /// The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Input("bandwidthThreshold")]
        public Input<double>? BandwidthThreshold { get; set; }

        /// <summary>
        /// The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values ["1m","5m","10m","15m","20m","30m","45m","60m"].
        /// Available values: "1m", "5m", "10m", "15m", "20m", "30m", "45m", "60m".
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
        /// </summary>
        [Input("packetThreshold")]
        public Input<double>? PacketThreshold { get; set; }

        /// <summary>
        /// Prefix match type to be applied for a prefix auto advertisement when using an AdvancedDdos rule.
        /// Available values: "exact", "subnet", "supernet".
        /// </summary>
        [Input("prefixMatch")]
        public Input<string>? PrefixMatch { get; set; }

        [Input("prefixes")]
        private InputList<string>? _prefixes;
        public InputList<string> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<string>());
            set => _prefixes = value;
        }

        /// <summary>
        /// MNM rule type.
        /// Available values: "threshold", "zscore", "AdvancedDdos".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Level of sensitivity set for zscore rules.
        /// Available values: "low", "medium", "high".
        /// </summary>
        [Input("zscoreSensitivity")]
        public Input<string>? ZscoreSensitivity { get; set; }

        /// <summary>
        /// Target of the zscore rule analysis.
        /// Available values: "bits", "packets".
        /// </summary>
        [Input("zscoreTarget")]
        public Input<string>? ZscoreTarget { get; set; }

        public MagicNetworkMonitoringRuleState()
        {
        }
        public static new MagicNetworkMonitoringRuleState Empty => new MagicNetworkMonitoringRuleState();
    }
}
