// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustDeviceCustomProfile = new Cloudflare.ZeroTrustDeviceCustomProfile("example_zero_trust_device_custom_profile", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Match = "identity.email == \"test@cloudflare.com\"",
    ///         Name = "Allow Developers",
    ///         Precedence = 100,
    ///         AllowModeSwitch = true,
    ///         AllowUpdates = true,
    ///         AllowedToLeave = true,
    ///         AutoConnect = 0,
    ///         CaptivePortal = 180,
    ///         Description = "Policy for test teams.",
    ///         DisableAutoFallback = true,
    ///         Enabled = true,
    ///         Excludes = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustDeviceCustomProfileExcludeArgs
    ///             {
    ///                 Address = "192.0.2.0/24",
    ///                 Description = "Exclude testing domains from the tunnel",
    ///             },
    ///         },
    ///         ExcludeOfficeIps = true,
    ///         Includes = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustDeviceCustomProfileIncludeArgs
    ///             {
    ///                 Address = "192.0.2.0/24",
    ///                 Description = "Include testing domains in the tunnel",
    ///             },
    ///         },
    ///         LanAllowMinutes = 30,
    ///         LanAllowSubnetSize = 24,
    ///         RegisterInterfaceIpWithDns = true,
    ///         SccmVpnBoundarySupport = false,
    ///         ServiceModeV2 = new Cloudflare.Inputs.ZeroTrustDeviceCustomProfileServiceModeV2Args
    ///         {
    ///             Mode = "proxy",
    ///             Port = 3000,
    ///         },
    ///         SupportUrl = "https://1.1.1.1/help",
    ///         SwitchLocked = true,
    ///         TunnelProtocol = "wireguard",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustDeviceCustomProfile:ZeroTrustDeviceCustomProfile example '&lt;account_id&gt;/&lt;policy_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustDeviceCustomProfile:ZeroTrustDeviceCustomProfile")]
    public partial class ZeroTrustDeviceCustomProfile : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether to allow the user to switch WARP between modes.
        /// </summary>
        [Output("allowModeSwitch")]
        public Output<bool> AllowModeSwitch { get; private set; } = null!;

        /// <summary>
        /// Whether to receive update notifications when a new version of the client is available.
        /// </summary>
        [Output("allowUpdates")]
        public Output<bool> AllowUpdates { get; private set; } = null!;

        /// <summary>
        /// Whether to allow devices to leave the organization.
        /// </summary>
        [Output("allowedToLeave")]
        public Output<bool> AllowedToLeave { get; private set; } = null!;

        /// <summary>
        /// The amount of time in seconds to reconnect after having been disabled.
        /// </summary>
        [Output("autoConnect")]
        public Output<double> AutoConnect { get; private set; } = null!;

        /// <summary>
        /// Turn on the captive portal after the specified amount of time.
        /// </summary>
        [Output("captivePortal")]
        public Output<double> CaptivePortal { get; private set; } = null!;

        /// <summary>
        /// Whether the policy is the default policy for an account.
        /// </summary>
        [Output("default")]
        public Output<bool> Default { get; private set; } = null!;

        /// <summary>
        /// A description of the policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        /// </summary>
        [Output("disableAutoFallback")]
        public Output<bool> DisableAutoFallback { get; private set; } = null!;

        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Whether to add Microsoft IPs to Split Tunnel exclusions.
        /// </summary>
        [Output("excludeOfficeIps")]
        public Output<bool> ExcludeOfficeIps { get; private set; } = null!;

        /// <summary>
        /// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<Outputs.ZeroTrustDeviceCustomProfileExclude>> Excludes { get; private set; } = null!;

        [Output("fallbackDomains")]
        public Output<ImmutableArray<Outputs.ZeroTrustDeviceCustomProfileFallbackDomain>> FallbackDomains { get; private set; } = null!;

        [Output("gatewayUniqueId")]
        public Output<string> GatewayUniqueId { get; private set; } = null!;

        /// <summary>
        /// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        [Output("includes")]
        public Output<ImmutableArray<Outputs.ZeroTrustDeviceCustomProfileInclude>> Includes { get; private set; } = null!;

        /// <summary>
        /// The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Output("lanAllowMinutes")]
        public Output<double?> LanAllowMinutes { get; private set; } = null!;

        /// <summary>
        /// The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Output("lanAllowSubnetSize")]
        public Output<double?> LanAllowSubnetSize { get; private set; } = null!;

        /// <summary>
        /// The wirefilter expression to match devices. Available values: "identity.email", "identity.groups.id", "identity.groups.name", "identity.groups.email", "identity.service*token*uuid", "identity.saml_attributes", "network", "os.name", "os.version".
        /// </summary>
        [Output("match")]
        public Output<string> Match { get; private set; } = null!;

        /// <summary>
        /// The name of the device settings profile.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
        /// </summary>
        [Output("precedence")]
        public Output<double> Precedence { get; private set; } = null!;

        /// <summary>
        /// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
        /// </summary>
        [Output("registerInterfaceIpWithDns")]
        public Output<bool> RegisterInterfaceIpWithDns { get; private set; } = null!;

        /// <summary>
        /// Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
        /// </summary>
        [Output("sccmVpnBoundarySupport")]
        public Output<bool> SccmVpnBoundarySupport { get; private set; } = null!;

        [Output("serviceModeV2")]
        public Output<Outputs.ZeroTrustDeviceCustomProfileServiceModeV2?> ServiceModeV2 { get; private set; } = null!;

        /// <summary>
        /// The URL to launch when the Send Feedback button is clicked.
        /// </summary>
        [Output("supportUrl")]
        public Output<string> SupportUrl { get; private set; } = null!;

        /// <summary>
        /// Whether to allow the user to turn off the WARP switch and disconnect the client.
        /// </summary>
        [Output("switchLocked")]
        public Output<bool> SwitchLocked { get; private set; } = null!;

        [Output("targetTests")]
        public Output<ImmutableArray<Outputs.ZeroTrustDeviceCustomProfileTargetTest>> TargetTests { get; private set; } = null!;

        /// <summary>
        /// Determines which tunnel protocol to use.
        /// </summary>
        [Output("tunnelProtocol")]
        public Output<string> TunnelProtocol { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustDeviceCustomProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustDeviceCustomProfile(string name, ZeroTrustDeviceCustomProfileArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDeviceCustomProfile:ZeroTrustDeviceCustomProfile", name, args ?? new ZeroTrustDeviceCustomProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustDeviceCustomProfile(string name, Input<string> id, ZeroTrustDeviceCustomProfileState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustDeviceCustomProfile:ZeroTrustDeviceCustomProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy" },
                    new global::Pulumi.Alias { Type = "cloudflare:index/splitTunnel:SplitTunnel" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustDeviceCustomProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustDeviceCustomProfile Get(string name, Input<string> id, ZeroTrustDeviceCustomProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustDeviceCustomProfile(name, id, state, options);
        }
    }

    public sealed class ZeroTrustDeviceCustomProfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Whether to allow the user to switch WARP between modes.
        /// </summary>
        [Input("allowModeSwitch")]
        public Input<bool>? AllowModeSwitch { get; set; }

        /// <summary>
        /// Whether to receive update notifications when a new version of the client is available.
        /// </summary>
        [Input("allowUpdates")]
        public Input<bool>? AllowUpdates { get; set; }

        /// <summary>
        /// Whether to allow devices to leave the organization.
        /// </summary>
        [Input("allowedToLeave")]
        public Input<bool>? AllowedToLeave { get; set; }

        /// <summary>
        /// The amount of time in seconds to reconnect after having been disabled.
        /// </summary>
        [Input("autoConnect")]
        public Input<double>? AutoConnect { get; set; }

        /// <summary>
        /// Turn on the captive portal after the specified amount of time.
        /// </summary>
        [Input("captivePortal")]
        public Input<double>? CaptivePortal { get; set; }

        /// <summary>
        /// A description of the policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        /// </summary>
        [Input("disableAutoFallback")]
        public Input<bool>? DisableAutoFallback { get; set; }

        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Whether to add Microsoft IPs to Split Tunnel exclusions.
        /// </summary>
        [Input("excludeOfficeIps")]
        public Input<bool>? ExcludeOfficeIps { get; set; }

        [Input("excludes")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeArgs>? _excludes;

        /// <summary>
        /// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        public InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeArgs>());
            set => _excludes = value;
        }

        [Input("includes")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeArgs>? _includes;

        /// <summary>
        /// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        public InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Input("lanAllowMinutes")]
        public Input<double>? LanAllowMinutes { get; set; }

        /// <summary>
        /// The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Input("lanAllowSubnetSize")]
        public Input<double>? LanAllowSubnetSize { get; set; }

        /// <summary>
        /// The wirefilter expression to match devices. Available values: "identity.email", "identity.groups.id", "identity.groups.name", "identity.groups.email", "identity.service*token*uuid", "identity.saml_attributes", "network", "os.name", "os.version".
        /// </summary>
        [Input("match", required: true)]
        public Input<string> Match { get; set; } = null!;

        /// <summary>
        /// The name of the device settings profile.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
        /// </summary>
        [Input("precedence", required: true)]
        public Input<double> Precedence { get; set; } = null!;

        /// <summary>
        /// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
        /// </summary>
        [Input("registerInterfaceIpWithDns")]
        public Input<bool>? RegisterInterfaceIpWithDns { get; set; }

        /// <summary>
        /// Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
        /// </summary>
        [Input("sccmVpnBoundarySupport")]
        public Input<bool>? SccmVpnBoundarySupport { get; set; }

        [Input("serviceModeV2")]
        public Input<Inputs.ZeroTrustDeviceCustomProfileServiceModeV2Args>? ServiceModeV2 { get; set; }

        /// <summary>
        /// The URL to launch when the Send Feedback button is clicked.
        /// </summary>
        [Input("supportUrl")]
        public Input<string>? SupportUrl { get; set; }

        /// <summary>
        /// Whether to allow the user to turn off the WARP switch and disconnect the client.
        /// </summary>
        [Input("switchLocked")]
        public Input<bool>? SwitchLocked { get; set; }

        /// <summary>
        /// Determines which tunnel protocol to use.
        /// </summary>
        [Input("tunnelProtocol")]
        public Input<string>? TunnelProtocol { get; set; }

        public ZeroTrustDeviceCustomProfileArgs()
        {
        }
        public static new ZeroTrustDeviceCustomProfileArgs Empty => new ZeroTrustDeviceCustomProfileArgs();
    }

    public sealed class ZeroTrustDeviceCustomProfileState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether to allow the user to switch WARP between modes.
        /// </summary>
        [Input("allowModeSwitch")]
        public Input<bool>? AllowModeSwitch { get; set; }

        /// <summary>
        /// Whether to receive update notifications when a new version of the client is available.
        /// </summary>
        [Input("allowUpdates")]
        public Input<bool>? AllowUpdates { get; set; }

        /// <summary>
        /// Whether to allow devices to leave the organization.
        /// </summary>
        [Input("allowedToLeave")]
        public Input<bool>? AllowedToLeave { get; set; }

        /// <summary>
        /// The amount of time in seconds to reconnect after having been disabled.
        /// </summary>
        [Input("autoConnect")]
        public Input<double>? AutoConnect { get; set; }

        /// <summary>
        /// Turn on the captive portal after the specified amount of time.
        /// </summary>
        [Input("captivePortal")]
        public Input<double>? CaptivePortal { get; set; }

        /// <summary>
        /// Whether the policy is the default policy for an account.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// A description of the policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        /// </summary>
        [Input("disableAutoFallback")]
        public Input<bool>? DisableAutoFallback { get; set; }

        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Whether to add Microsoft IPs to Split Tunnel exclusions.
        /// </summary>
        [Input("excludeOfficeIps")]
        public Input<bool>? ExcludeOfficeIps { get; set; }

        [Input("excludes")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeGetArgs>? _excludes;

        /// <summary>
        /// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        public InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeGetArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.ZeroTrustDeviceCustomProfileExcludeGetArgs>());
            set => _excludes = value;
        }

        [Input("fallbackDomains")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileFallbackDomainGetArgs>? _fallbackDomains;
        public InputList<Inputs.ZeroTrustDeviceCustomProfileFallbackDomainGetArgs> FallbackDomains
        {
            get => _fallbackDomains ?? (_fallbackDomains = new InputList<Inputs.ZeroTrustDeviceCustomProfileFallbackDomainGetArgs>());
            set => _fallbackDomains = value;
        }

        [Input("gatewayUniqueId")]
        public Input<string>? GatewayUniqueId { get; set; }

        [Input("includes")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeGetArgs>? _includes;

        /// <summary>
        /// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
        /// </summary>
        public InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeGetArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.ZeroTrustDeviceCustomProfileIncludeGetArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Input("lanAllowMinutes")]
        public Input<double>? LanAllowMinutes { get; set; }

        /// <summary>
        /// The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
        /// </summary>
        [Input("lanAllowSubnetSize")]
        public Input<double>? LanAllowSubnetSize { get; set; }

        /// <summary>
        /// The wirefilter expression to match devices. Available values: "identity.email", "identity.groups.id", "identity.groups.name", "identity.groups.email", "identity.service*token*uuid", "identity.saml_attributes", "network", "os.name", "os.version".
        /// </summary>
        [Input("match")]
        public Input<string>? Match { get; set; }

        /// <summary>
        /// The name of the device settings profile.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
        /// </summary>
        [Input("precedence")]
        public Input<double>? Precedence { get; set; }

        /// <summary>
        /// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
        /// </summary>
        [Input("registerInterfaceIpWithDns")]
        public Input<bool>? RegisterInterfaceIpWithDns { get; set; }

        /// <summary>
        /// Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
        /// </summary>
        [Input("sccmVpnBoundarySupport")]
        public Input<bool>? SccmVpnBoundarySupport { get; set; }

        [Input("serviceModeV2")]
        public Input<Inputs.ZeroTrustDeviceCustomProfileServiceModeV2GetArgs>? ServiceModeV2 { get; set; }

        /// <summary>
        /// The URL to launch when the Send Feedback button is clicked.
        /// </summary>
        [Input("supportUrl")]
        public Input<string>? SupportUrl { get; set; }

        /// <summary>
        /// Whether to allow the user to turn off the WARP switch and disconnect the client.
        /// </summary>
        [Input("switchLocked")]
        public Input<bool>? SwitchLocked { get; set; }

        [Input("targetTests")]
        private InputList<Inputs.ZeroTrustDeviceCustomProfileTargetTestGetArgs>? _targetTests;
        public InputList<Inputs.ZeroTrustDeviceCustomProfileTargetTestGetArgs> TargetTests
        {
            get => _targetTests ?? (_targetTests = new InputList<Inputs.ZeroTrustDeviceCustomProfileTargetTestGetArgs>());
            set => _targetTests = value;
        }

        /// <summary>
        /// Determines which tunnel protocol to use.
        /// </summary>
        [Input("tunnelProtocol")]
        public Input<string>? TunnelProtocol { get; set; }

        public ZeroTrustDeviceCustomProfileState()
        {
        }
        public static new ZeroTrustDeviceCustomProfileState Empty => new ZeroTrustDeviceCustomProfileState();
    }
}
