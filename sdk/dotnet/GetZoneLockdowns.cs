// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZoneLockdowns
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdowns = Cloudflare.GetZoneLockdowns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CreatedOn = "2014-01-01T05:20:00.12345Z",
        ///         Description = "endpoints",
        ///         DescriptionSearch = "endpoints",
        ///         Ip = "1.2.3.4",
        ///         IpRangeSearch = "1.2.3.0/16",
        ///         IpSearch = "1.2.3.4",
        ///         ModifiedOn = "2014-01-01T05:20:00.12345Z",
        ///         Priority = 5,
        ///         UriSearch = "/some/path",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneLockdownsResult> InvokeAsync(GetZoneLockdownsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneLockdownsResult>("cloudflare:index/getZoneLockdowns:getZoneLockdowns", args ?? new GetZoneLockdownsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdowns = Cloudflare.GetZoneLockdowns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CreatedOn = "2014-01-01T05:20:00.12345Z",
        ///         Description = "endpoints",
        ///         DescriptionSearch = "endpoints",
        ///         Ip = "1.2.3.4",
        ///         IpRangeSearch = "1.2.3.0/16",
        ///         IpSearch = "1.2.3.4",
        ///         ModifiedOn = "2014-01-01T05:20:00.12345Z",
        ///         Priority = 5,
        ///         UriSearch = "/some/path",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneLockdownsResult> Invoke(GetZoneLockdownsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneLockdownsResult>("cloudflare:index/getZoneLockdowns:getZoneLockdowns", args ?? new GetZoneLockdownsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZoneLockdowns = Cloudflare.GetZoneLockdowns.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         CreatedOn = "2014-01-01T05:20:00.12345Z",
        ///         Description = "endpoints",
        ///         DescriptionSearch = "endpoints",
        ///         Ip = "1.2.3.4",
        ///         IpRangeSearch = "1.2.3.0/16",
        ///         IpSearch = "1.2.3.4",
        ///         ModifiedOn = "2014-01-01T05:20:00.12345Z",
        ///         Priority = 5,
        ///         UriSearch = "/some/path",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneLockdownsResult> Invoke(GetZoneLockdownsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneLockdownsResult>("cloudflare:index/getZoneLockdowns:getZoneLockdowns", args ?? new GetZoneLockdownsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneLockdownsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Input("createdOn")]
        public string? CreatedOn { get; set; }

        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("descriptionSearch")]
        public string? DescriptionSearch { get; set; }

        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        [Input("ip")]
        public string? Ip { get; set; }

        /// <summary>
        /// A single IP address range to search for in existing rules.
        /// </summary>
        [Input("ipRangeSearch")]
        public string? IpRangeSearch { get; set; }

        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        [Input("ipSearch")]
        public string? IpSearch { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public string? ModifiedOn { get; set; }

        /// <summary>
        /// The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
        /// </summary>
        [Input("priority")]
        public double? Priority { get; set; }

        /// <summary>
        /// A single URI to search for in the list of URLs of existing rules.
        /// </summary>
        [Input("uriSearch")]
        public string? UriSearch { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetZoneLockdownsArgs()
        {
        }
        public static new GetZoneLockdownsArgs Empty => new GetZoneLockdownsArgs();
    }

    public sealed class GetZoneLockdownsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        [Input("descriptionSearch")]
        public Input<string>? DescriptionSearch { get; set; }

        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// A single IP address range to search for in existing rules.
        /// </summary>
        [Input("ipRangeSearch")]
        public Input<string>? IpRangeSearch { get; set; }

        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        [Input("ipSearch")]
        public Input<string>? IpSearch { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// A single URI to search for in the list of URLs of existing rules.
        /// </summary>
        [Input("uriSearch")]
        public Input<string>? UriSearch { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetZoneLockdownsInvokeArgs()
        {
        }
        public static new GetZoneLockdownsInvokeArgs Empty => new GetZoneLockdownsInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneLockdownsResult
    {
        /// <summary>
        /// The timestamp of when the rule was created.
        /// </summary>
        public readonly string? CreatedOn;
        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// A string to search for in the description of existing rules.
        /// </summary>
        public readonly string? DescriptionSearch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        public readonly string? Ip;
        /// <summary>
        /// A single IP address range to search for in existing rules.
        /// </summary>
        public readonly string? IpRangeSearch;
        /// <summary>
        /// A single IP address to search for in existing rules.
        /// </summary>
        public readonly string? IpSearch;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        public readonly string? ModifiedOn;
        /// <summary>
        /// The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
        /// </summary>
        public readonly double? Priority;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZoneLockdownsResultResult> Results;
        /// <summary>
        /// A single URI to search for in the list of URLs of existing rules.
        /// </summary>
        public readonly string? UriSearch;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneLockdownsResult(
            string? createdOn,

            string? description,

            string? descriptionSearch,

            string id,

            string? ip,

            string? ipRangeSearch,

            string? ipSearch,

            int? maxItems,

            string? modifiedOn,

            double? priority,

            ImmutableArray<Outputs.GetZoneLockdownsResultResult> results,

            string? uriSearch,

            string zoneId)
        {
            CreatedOn = createdOn;
            Description = description;
            DescriptionSearch = descriptionSearch;
            Id = id;
            Ip = ip;
            IpRangeSearch = ipRangeSearch;
            IpSearch = ipSearch;
            MaxItems = maxItems;
            ModifiedOn = modifiedOn;
            Priority = priority;
            Results = results;
            UriSearch = uriSearch;
            ZoneId = zoneId;
        }
    }
}
