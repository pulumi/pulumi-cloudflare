// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleStreamCaptionLanguage = new Cloudflare.StreamCaptionLanguage("example_stream_caption_language", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Identifier = "ea95132c15732412d22c1476fa83f27a",
    ///         Language = "tr",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage")]
    public partial class StreamCaptionLanguage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The WebVTT file containing the caption or subtitle content.
        /// </summary>
        [Output("file")]
        public Output<string?> File { get; private set; } = null!;

        /// <summary>
        /// Whether the caption was generated via AI.
        /// </summary>
        [Output("generated")]
        public Output<bool> Generated { get; private set; } = null!;

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// The language label displayed in the native language to users.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// The language tag in BCP 47 format.
        /// </summary>
        [Output("language")]
        public Output<string> Language { get; private set; } = null!;

        /// <summary>
        /// The status of a generated caption.
        /// Available values: "ready", "inprogress", "error".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a StreamCaptionLanguage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamCaptionLanguage(string name, StreamCaptionLanguageArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage", name, args ?? new StreamCaptionLanguageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamCaptionLanguage(string name, Input<string> id, StreamCaptionLanguageState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamCaptionLanguage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamCaptionLanguage Get(string name, Input<string> id, StreamCaptionLanguageState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamCaptionLanguage(name, id, state, options);
        }
    }

    public sealed class StreamCaptionLanguageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The WebVTT file containing the caption or subtitle content.
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// The language tag in BCP 47 format.
        /// </summary>
        [Input("language", required: true)]
        public Input<string> Language { get; set; } = null!;

        public StreamCaptionLanguageArgs()
        {
        }
        public static new StreamCaptionLanguageArgs Empty => new StreamCaptionLanguageArgs();
    }

    public sealed class StreamCaptionLanguageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The WebVTT file containing the caption or subtitle content.
        /// </summary>
        [Input("file")]
        public Input<string>? File { get; set; }

        /// <summary>
        /// Whether the caption was generated via AI.
        /// </summary>
        [Input("generated")]
        public Input<bool>? Generated { get; set; }

        /// <summary>
        /// A Cloudflare-generated unique identifier for a media item.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// The language label displayed in the native language to users.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// The language tag in BCP 47 format.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// The status of a generated caption.
        /// Available values: "ready", "inprogress", "error".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public StreamCaptionLanguageState()
        {
        }
        public static new StreamCaptionLanguageState Empty => new StreamCaptionLanguageState();
    }
}
