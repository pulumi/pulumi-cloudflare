// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustOrganization = new Cloudflare.ZeroTrustOrganization("example_zero_trust_organization", new()
    ///     {
    ///         ZoneId = "zone_id",
    ///         AllowAuthenticateViaWarp = true,
    ///         AuthDomain = "test.cloudflareaccess.com",
    ///         AutoRedirectToIdentity = true,
    ///         CustomPages = new Cloudflare.Inputs.ZeroTrustOrganizationCustomPagesArgs
    ///         {
    ///             Forbidden = "699d98642c564d2e855e9661899b7252",
    ///             Identity_denied = "699d98642c564d2e855e9661899b7252",
    ///         },
    ///         IsUiReadOnly = true,
    ///         LoginDesign = new Cloudflare.Inputs.ZeroTrustOrganizationLoginDesignArgs
    ///         {
    ///             Background_color = "#c5ed1b",
    ///             Footer_text = "This is an example description.",
    ///             Header_text = "This is an example description.",
    ///             Logo_path = "https://example.com/logo.png",
    ///             Text_color = "#c5ed1b",
    ///         },
    ///         Name = "Widget Corps Internal Applications",
    ///         SessionDuration = "24h",
    ///         UiReadOnlyToggleReason = "Temporarily turn off the UI read only lock to make a change via the UI",
    ///         UserSeatExpirationInactiveTime = "730h",
    ///         WarpAuthSessionDuration = "24h",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization")]
    [CloudflareResourceType("cloudflare:index/accessOrganization:AccessOrganization")]
    public partial class AccessOrganization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Output("allowAuthenticateViaWarp")]
        public Output<bool> AllowAuthenticateViaWarp { get; private set; } = null!;

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Output("authDomain")]
        public Output<string?> AuthDomain { get; private set; } = null!;

        /// <summary>
        /// When set to `True`, users skip the identity provider selection step during login.
        /// </summary>
        [Output("autoRedirectToIdentity")]
        public Output<bool> AutoRedirectToIdentity { get; private set; } = null!;

        [Output("customPages")]
        public Output<Outputs.AccessOrganizationCustomPages?> CustomPages { get; private set; } = null!;

        [Output("isUiReadOnly")]
        public Output<bool> IsUiReadOnly { get; private set; } = null!;

        [Output("loginDesign")]
        public Output<Outputs.AccessOrganizationLoginDesign?> LoginDesign { get; private set; } = null!;

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Output("sessionDuration")]
        public Output<string?> SessionDuration { get; private set; } = null!;

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Output("uiReadOnlyToggleReason")]
        public Output<string?> UiReadOnlyToggleReason { get; private set; } = null!;

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `Ns`, `Us` (or `µs`), `Ms`, `S`, `M`, `H`.
        /// </summary>
        [Output("userSeatExpirationInactiveTime")]
        public Output<string?> UserSeatExpirationInactiveTime { get; private set; } = null!;

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Output("warpAuthSessionDuration")]
        public Output<string?> WarpAuthSessionDuration { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessOrganization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessOrganization(string name, AccessOrganizationArgs? args = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessOrganization:AccessOrganization", name, args ?? new AccessOrganizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessOrganization(string name, Input<string> id, AccessOrganizationState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessOrganization:AccessOrganization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessOrganization:AccessOrganization" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessOrganization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessOrganization Get(string name, Input<string> id, AccessOrganizationState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessOrganization(name, id, state, options);
        }
    }

    public sealed class AccessOrganizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Input("allowAuthenticateViaWarp")]
        public Input<bool>? AllowAuthenticateViaWarp { get; set; }

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Input("authDomain")]
        public Input<string>? AuthDomain { get; set; }

        /// <summary>
        /// When set to `True`, users skip the identity provider selection step during login.
        /// </summary>
        [Input("autoRedirectToIdentity")]
        public Input<bool>? AutoRedirectToIdentity { get; set; }

        [Input("customPages")]
        public Input<Inputs.AccessOrganizationCustomPagesArgs>? CustomPages { get; set; }

        [Input("isUiReadOnly")]
        public Input<bool>? IsUiReadOnly { get; set; }

        [Input("loginDesign")]
        public Input<Inputs.AccessOrganizationLoginDesignArgs>? LoginDesign { get; set; }

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Input("uiReadOnlyToggleReason")]
        public Input<string>? UiReadOnlyToggleReason { get; set; }

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `Ns`, `Us` (or `µs`), `Ms`, `S`, `M`, `H`.
        /// </summary>
        [Input("userSeatExpirationInactiveTime")]
        public Input<string>? UserSeatExpirationInactiveTime { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Input("warpAuthSessionDuration")]
        public Input<string>? WarpAuthSessionDuration { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessOrganizationArgs()
        {
        }
        public static new AccessOrganizationArgs Empty => new AccessOrganizationArgs();
    }

    public sealed class AccessOrganizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        /// </summary>
        [Input("allowAuthenticateViaWarp")]
        public Input<bool>? AllowAuthenticateViaWarp { get; set; }

        /// <summary>
        /// The unique subdomain assigned to your Zero Trust organization.
        /// </summary>
        [Input("authDomain")]
        public Input<string>? AuthDomain { get; set; }

        /// <summary>
        /// When set to `True`, users skip the identity provider selection step during login.
        /// </summary>
        [Input("autoRedirectToIdentity")]
        public Input<bool>? AutoRedirectToIdentity { get; set; }

        [Input("customPages")]
        public Input<Inputs.AccessOrganizationCustomPagesGetArgs>? CustomPages { get; set; }

        [Input("isUiReadOnly")]
        public Input<bool>? IsUiReadOnly { get; set; }

        [Input("loginDesign")]
        public Input<Inputs.AccessOrganizationLoginDesignGetArgs>? LoginDesign { get; set; }

        /// <summary>
        /// The name of your Zero Trust organization.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        /// <summary>
        /// A description of the reason why the UI read only field is being toggled.
        /// </summary>
        [Input("uiReadOnlyToggleReason")]
        public Input<string>? UiReadOnlyToggleReason { get; set; }

        /// <summary>
        /// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `Ns`, `Us` (or `µs`), `Ms`, `S`, `M`, `H`.
        /// </summary>
        [Input("userSeatExpirationInactiveTime")]
        public Input<string>? UserSeatExpirationInactiveTime { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        /// </summary>
        [Input("warpAuthSessionDuration")]
        public Input<string>? WarpAuthSessionDuration { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessOrganizationState()
        {
        }
        public static new AccessOrganizationState Empty => new AccessOrganizationState();
    }
}
