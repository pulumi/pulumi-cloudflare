// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetDnsZoneTransfersAcl
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersAcl = Cloudflare.GetDnsZoneTransfersAcl.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         AclId = "23ff594956f20c2a721606e94745a8aa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsZoneTransfersAclResult> InvokeAsync(GetDnsZoneTransfersAclArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsZoneTransfersAclResult>("cloudflare:index/getDnsZoneTransfersAcl:getDnsZoneTransfersAcl", args ?? new GetDnsZoneTransfersAclArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersAcl = Cloudflare.GetDnsZoneTransfersAcl.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         AclId = "23ff594956f20c2a721606e94745a8aa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsZoneTransfersAclResult> Invoke(GetDnsZoneTransfersAclInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneTransfersAclResult>("cloudflare:index/getDnsZoneTransfersAcl:getDnsZoneTransfersAcl", args ?? new GetDnsZoneTransfersAclInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDnsZoneTransfersAcl = Cloudflare.GetDnsZoneTransfersAcl.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         AclId = "23ff594956f20c2a721606e94745a8aa",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsZoneTransfersAclResult> Invoke(GetDnsZoneTransfersAclInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsZoneTransfersAclResult>("cloudflare:index/getDnsZoneTransfersAcl:getDnsZoneTransfersAcl", args ?? new GetDnsZoneTransfersAclInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsZoneTransfersAclArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("aclId")]
        public string? AclId { get; set; }

        public GetDnsZoneTransfersAclArgs()
        {
        }
        public static new GetDnsZoneTransfersAclArgs Empty => new GetDnsZoneTransfersAclArgs();
    }

    public sealed class GetDnsZoneTransfersAclInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        public GetDnsZoneTransfersAclInvokeArgs()
        {
        }
        public static new GetDnsZoneTransfersAclInvokeArgs Empty => new GetDnsZoneTransfersAclInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsZoneTransfersAclResult
    {
        public readonly string AccountId;
        public readonly string? AclId;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
        /// </summary>
        public readonly string IpRange;
        /// <summary>
        /// The name of the acl.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetDnsZoneTransfersAclResult(
            string accountId,

            string? aclId,

            string id,

            string ipRange,

            string name)
        {
            AccountId = accountId;
            AclId = aclId;
            Id = id;
            IpRange = ipRange;
            Name = name;
        }
    }
}
