// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetStreams
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreams = Cloudflare.GetStreams.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Creator = "creator-id_abcde12345",
        ///         End = "2014-01-02T02:20:00Z",
        ///         Search = "puppy.mp4",
        ///         Start = "2014-01-02T02:20:00Z",
        ///         Status = "inprogress",
        ///         Type = "live",
        ///         VideoName = "puppy.mp4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamsResult> InvokeAsync(GetStreamsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamsResult>("cloudflare:index/getStreams:getStreams", args ?? new GetStreamsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreams = Cloudflare.GetStreams.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Creator = "creator-id_abcde12345",
        ///         End = "2014-01-02T02:20:00Z",
        ///         Search = "puppy.mp4",
        ///         Start = "2014-01-02T02:20:00Z",
        ///         Status = "inprogress",
        ///         Type = "live",
        ///         VideoName = "puppy.mp4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamsResult> Invoke(GetStreamsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamsResult>("cloudflare:index/getStreams:getStreams", args ?? new GetStreamsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleStreams = Cloudflare.GetStreams.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Creator = "creator-id_abcde12345",
        ///         End = "2014-01-02T02:20:00Z",
        ///         Search = "puppy.mp4",
        ///         Start = "2014-01-02T02:20:00Z",
        ///         Status = "inprogress",
        ///         Type = "live",
        ///         VideoName = "puppy.mp4",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamsResult> Invoke(GetStreamsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamsResult>("cloudflare:index/getStreams:getStreams", args ?? new GetStreamsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Lists videos in ascending order of creation.
        /// </summary>
        [Input("asc")]
        public bool? Asc { get; set; }

        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        [Input("creator")]
        public string? Creator { get; set; }

        /// <summary>
        /// Lists videos created before the specified date.
        /// </summary>
        [Input("end")]
        public string? End { get; set; }

        /// <summary>
        /// Includes the total number of videos associated with the submitted query parameters.
        /// </summary>
        [Input("includeCounts")]
        public bool? IncludeCounts { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Provides a partial word match of the `Name` key in the `Meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
        /// </summary>
        [Input("search")]
        public string? Search { get; set; }

        /// <summary>
        /// Lists videos created after the specified date.
        /// </summary>
        [Input("start")]
        public string? Start { get; set; }

        /// <summary>
        /// Specifies the processing status for all quality levels for a video.
        /// Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// Specifies whether the video is `Vod` or `Live`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Provides a fast, exact string match on the `Name` key in the `Meta` field.
        /// </summary>
        [Input("videoName")]
        public string? VideoName { get; set; }

        public GetStreamsArgs()
        {
        }
        public static new GetStreamsArgs Empty => new GetStreamsArgs();
    }

    public sealed class GetStreamsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Lists videos in ascending order of creation.
        /// </summary>
        [Input("asc")]
        public Input<bool>? Asc { get; set; }

        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        [Input("creator")]
        public Input<string>? Creator { get; set; }

        /// <summary>
        /// Lists videos created before the specified date.
        /// </summary>
        [Input("end")]
        public Input<string>? End { get; set; }

        /// <summary>
        /// Includes the total number of videos associated with the submitted query parameters.
        /// </summary>
        [Input("includeCounts")]
        public Input<bool>? IncludeCounts { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Provides a partial word match of the `Name` key in the `Meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
        /// </summary>
        [Input("search")]
        public Input<string>? Search { get; set; }

        /// <summary>
        /// Lists videos created after the specified date.
        /// </summary>
        [Input("start")]
        public Input<string>? Start { get; set; }

        /// <summary>
        /// Specifies the processing status for all quality levels for a video.
        /// Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Specifies whether the video is `Vod` or `Live`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Provides a fast, exact string match on the `Name` key in the `Meta` field.
        /// </summary>
        [Input("videoName")]
        public Input<string>? VideoName { get; set; }

        public GetStreamsInvokeArgs()
        {
        }
        public static new GetStreamsInvokeArgs Empty => new GetStreamsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamsResult
    {
        /// <summary>
        /// The account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Lists videos in ascending order of creation.
        /// </summary>
        public readonly bool Asc;
        /// <summary>
        /// A user-defined identifier for the media creator.
        /// </summary>
        public readonly string? Creator;
        /// <summary>
        /// Lists videos created before the specified date.
        /// </summary>
        public readonly string? End;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Includes the total number of videos associated with the submitted query parameters.
        /// </summary>
        public readonly bool IncludeCounts;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamsResultResult> Results;
        /// <summary>
        /// Provides a partial word match of the `Name` key in the `Meta` field. Slow for medium to large video libraries. May be unavailable for very large libraries.
        /// </summary>
        public readonly string? Search;
        /// <summary>
        /// Lists videos created after the specified date.
        /// </summary>
        public readonly string? Start;
        /// <summary>
        /// Specifies the processing status for all quality levels for a video.
        /// Available values: "pendingupload", "downloading", "queued", "inprogress", "ready", "error", "live-inprogress".
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Specifies whether the video is `Vod` or `Live`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Provides a fast, exact string match on the `Name` key in the `Meta` field.
        /// </summary>
        public readonly string? VideoName;

        [OutputConstructor]
        private GetStreamsResult(
            string accountId,

            bool asc,

            string? creator,

            string? end,

            string id,

            bool includeCounts,

            int? maxItems,

            ImmutableArray<Outputs.GetStreamsResultResult> results,

            string? search,

            string? start,

            string? status,

            string? type,

            string? videoName)
        {
            AccountId = accountId;
            Asc = asc;
            Creator = creator;
            End = end;
            Id = id;
            IncludeCounts = includeCounts;
            MaxItems = maxItems;
            Results = results;
            Search = search;
            Start = start;
            Status = status;
            Type = type;
            VideoName = videoName;
        }
    }
}
