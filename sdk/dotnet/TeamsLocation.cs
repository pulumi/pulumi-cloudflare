// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustDnsLocation = new Cloudflare.ZeroTrustDnsLocation("example_zero_trust_dns_location", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Name = "Austin Office Location",
    ///         ClientDefault = false,
    ///         DnsDestinationIpsId = "0e4a32c6-6fb8-4858-9296-98f51631e8e6",
    ///         EcsSupport = false,
    ///         Endpoints = new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsArgs
    ///         {
    ///             Doh = new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsDohArgs
    ///             {
    ///                 Enabled = true,
    ///                 Networks = new[]
    ///                 {
    ///                     new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsDohNetworkArgs
    ///                     {
    ///                         Network = "2001:85a3::/64",
    ///                     },
    ///                 },
    ///                 RequireToken = true,
    ///             },
    ///             Dot = new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsDotArgs
    ///             {
    ///                 Enabled = true,
    ///                 Networks = new[]
    ///                 {
    ///                     new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsDotNetworkArgs
    ///                     {
    ///                         Network = "2001:85a3::/64",
    ///                     },
    ///                 },
    ///             },
    ///             Ipv4 = new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsIpv4Args
    ///             {
    ///                 Enabled = true,
    ///             },
    ///             Ipv6 = new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsIpv6Args
    ///             {
    ///                 Enabled = true,
    ///                 Networks = new[]
    ///                 {
    ///                     new Cloudflare.Inputs.ZeroTrustDnsLocationEndpointsIpv6NetworkArgs
    ///                     {
    ///                         Network = "2001:85a3::/64",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Networks = new[]
    ///         {
    ///             new Cloudflare.Inputs.ZeroTrustDnsLocationNetworkArgs
    ///             {
    ///                 Network = "192.0.2.1/32",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/teamsLocation:TeamsLocation example '&lt;account_id&gt;/&lt;location_id&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/teamslocation.TeamsLocation has been deprecated in favor of cloudflare.index/zerotrustdnslocation.ZeroTrustDnsLocation")]
    [CloudflareResourceType("cloudflare:index/teamsLocation:TeamsLocation")]
    public partial class TeamsLocation : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// True if the location is the default location.
        /// </summary>
        [Output("clientDefault")]
        public Output<bool> ClientDefault { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
        /// </summary>
        [Output("dnsDestinationIpsId")]
        public Output<string?> DnsDestinationIpsId { get; private set; } = null!;

        /// <summary>
        /// The uuid identifier of the IPv6 block brought to the gateway, so that this location's IPv6 address is allocated from the Bring Your Own Ipv6(BYOIPv6) block and not from the standard CloudFlare IPv6 block.
        /// </summary>
        [Output("dnsDestinationIpv6BlockId")]
        public Output<string> DnsDestinationIpv6BlockId { get; private set; } = null!;

        /// <summary>
        /// The DNS over HTTPS domain to send DNS requests to. This field is auto-generated by Gateway.
        /// </summary>
        [Output("dohSubdomain")]
        public Output<string> DohSubdomain { get; private set; } = null!;

        /// <summary>
        /// True if the location needs to resolve EDNS queries.
        /// </summary>
        [Output("ecsSupport")]
        public Output<bool> EcsSupport { get; private set; } = null!;

        /// <summary>
        /// The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged.
        /// </summary>
        [Output("endpoints")]
        public Output<Outputs.TeamsLocationEndpoints?> Endpoints { get; private set; } = null!;

        /// <summary>
        /// IPV6 destination ip assigned to this location. DNS requests sent to this IP will counted as the request under this location. This field is auto-generated by Gateway.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// The primary destination IPv4 address from the pair identified by the dns*destination*ips_id. This field is read-only.
        /// </summary>
        [Output("ipv4Destination")]
        public Output<string> Ipv4Destination { get; private set; } = null!;

        /// <summary>
        /// The backup destination IPv4 address from the pair identified by the dns*destination*ips_id. This field is read-only.
        /// </summary>
        [Output("ipv4DestinationBackup")]
        public Output<string> Ipv4DestinationBackup { get; private set; } = null!;

        /// <summary>
        /// The name of the location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of network ranges that requests from this location would originate from. A non-empty list is only effective if the ipv4 endpoint is enabled for this location.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.TeamsLocationNetwork>> Networks { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TeamsLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TeamsLocation(string name, TeamsLocationArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsLocation:TeamsLocation", name, args ?? new TeamsLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TeamsLocation(string name, Input<string> id, TeamsLocationState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/teamsLocation:TeamsLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/teamsLocation:TeamsLocation" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TeamsLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TeamsLocation Get(string name, Input<string> id, TeamsLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new TeamsLocation(name, id, state, options);
        }
    }

    public sealed class TeamsLocationArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// True if the location is the default location.
        /// </summary>
        [Input("clientDefault")]
        public Input<bool>? ClientDefault { get; set; }

        /// <summary>
        /// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
        /// </summary>
        [Input("dnsDestinationIpsId")]
        public Input<string>? DnsDestinationIpsId { get; set; }

        /// <summary>
        /// True if the location needs to resolve EDNS queries.
        /// </summary>
        [Input("ecsSupport")]
        public Input<bool>? EcsSupport { get; set; }

        /// <summary>
        /// The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged.
        /// </summary>
        [Input("endpoints")]
        public Input<Inputs.TeamsLocationEndpointsArgs>? Endpoints { get; set; }

        /// <summary>
        /// The name of the location.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networks")]
        private InputList<Inputs.TeamsLocationNetworkArgs>? _networks;

        /// <summary>
        /// A list of network ranges that requests from this location would originate from. A non-empty list is only effective if the ipv4 endpoint is enabled for this location.
        /// </summary>
        public InputList<Inputs.TeamsLocationNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.TeamsLocationNetworkArgs>());
            set => _networks = value;
        }

        public TeamsLocationArgs()
        {
        }
        public static new TeamsLocationArgs Empty => new TeamsLocationArgs();
    }

    public sealed class TeamsLocationState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// True if the location is the default location.
        /// </summary>
        [Input("clientDefault")]
        public Input<bool>? ClientDefault { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The identifier of the pair of IPv4 addresses assigned to this location. When creating a location, if this field is absent or set with null, the pair of shared IPv4 addresses (0e4a32c6-6fb8-4858-9296-98f51631e8e6) is auto-assigned. When updating a location, if the field is absent or set with null, the pre-assigned pair remains unchanged.
        /// </summary>
        [Input("dnsDestinationIpsId")]
        public Input<string>? DnsDestinationIpsId { get; set; }

        /// <summary>
        /// The uuid identifier of the IPv6 block brought to the gateway, so that this location's IPv6 address is allocated from the Bring Your Own Ipv6(BYOIPv6) block and not from the standard CloudFlare IPv6 block.
        /// </summary>
        [Input("dnsDestinationIpv6BlockId")]
        public Input<string>? DnsDestinationIpv6BlockId { get; set; }

        /// <summary>
        /// The DNS over HTTPS domain to send DNS requests to. This field is auto-generated by Gateway.
        /// </summary>
        [Input("dohSubdomain")]
        public Input<string>? DohSubdomain { get; set; }

        /// <summary>
        /// True if the location needs to resolve EDNS queries.
        /// </summary>
        [Input("ecsSupport")]
        public Input<bool>? EcsSupport { get; set; }

        /// <summary>
        /// The destination endpoints configured for this location. When updating a location, if this field is absent or set with null, the endpoints configuration remains unchanged.
        /// </summary>
        [Input("endpoints")]
        public Input<Inputs.TeamsLocationEndpointsGetArgs>? Endpoints { get; set; }

        /// <summary>
        /// IPV6 destination ip assigned to this location. DNS requests sent to this IP will counted as the request under this location. This field is auto-generated by Gateway.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// The primary destination IPv4 address from the pair identified by the dns*destination*ips_id. This field is read-only.
        /// </summary>
        [Input("ipv4Destination")]
        public Input<string>? Ipv4Destination { get; set; }

        /// <summary>
        /// The backup destination IPv4 address from the pair identified by the dns*destination*ips_id. This field is read-only.
        /// </summary>
        [Input("ipv4DestinationBackup")]
        public Input<string>? Ipv4DestinationBackup { get; set; }

        /// <summary>
        /// The name of the location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.TeamsLocationNetworkGetArgs>? _networks;

        /// <summary>
        /// A list of network ranges that requests from this location would originate from. A non-empty list is only effective if the ipv4 endpoint is enabled for this location.
        /// </summary>
        public InputList<Inputs.TeamsLocationNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.TeamsLocationNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TeamsLocationState()
        {
        }
        public static new TeamsLocationState Empty => new TeamsLocationState();
    }
}
