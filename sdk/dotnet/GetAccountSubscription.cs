// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountSubscription
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountSubscription = Cloudflare.GetAccountSubscription.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountSubscriptionResult> InvokeAsync(GetAccountSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountSubscriptionResult>("cloudflare:index/getAccountSubscription:getAccountSubscription", args ?? new GetAccountSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountSubscription = Cloudflare.GetAccountSubscription.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountSubscriptionResult> Invoke(GetAccountSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountSubscriptionResult>("cloudflare:index/getAccountSubscription:getAccountSubscription", args ?? new GetAccountSubscriptionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountSubscription = Cloudflare.GetAccountSubscription.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountSubscriptionResult> Invoke(GetAccountSubscriptionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountSubscriptionResult>("cloudflare:index/getAccountSubscription:getAccountSubscription", args ?? new GetAccountSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        public GetAccountSubscriptionArgs()
        {
        }
        public static new GetAccountSubscriptionArgs Empty => new GetAccountSubscriptionArgs();
    }

    public sealed class GetAccountSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        public GetAccountSubscriptionInvokeArgs()
        {
        }
        public static new GetAccountSubscriptionInvokeArgs Empty => new GetAccountSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountSubscriptionResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The monetary unit in which pricing information is displayed.
        /// </summary>
        public readonly string Currency;
        /// <summary>
        /// The end of the current period and also when the next billing is due.
        /// </summary>
        public readonly string CurrentPeriodEnd;
        /// <summary>
        /// When the current billing period started. May match initial*period*start if this is the first period.
        /// </summary>
        public readonly string CurrentPeriodStart;
        /// <summary>
        /// How often the subscription is renewed automatically.
        /// Available values: "weekly", "monthly", "quarterly", "yearly".
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// Subscription identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The price of the subscription that will be billed, in US dollars.
        /// </summary>
        public readonly double Price;
        /// <summary>
        /// The rate plan applied to the subscription.
        /// </summary>
        public readonly Outputs.GetAccountSubscriptionRatePlanResult RatePlan;
        /// <summary>
        /// The state that the subscription is in.
        /// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetAccountSubscriptionResult(
            string accountId,

            string currency,

            string currentPeriodEnd,

            string currentPeriodStart,

            string frequency,

            string id,

            double price,

            Outputs.GetAccountSubscriptionRatePlanResult ratePlan,

            string state)
        {
            AccountId = accountId;
            Currency = currency;
            CurrentPeriodEnd = currentPeriodEnd;
            CurrentPeriodStart = currentPeriodStart;
            Frequency = frequency;
            Id = id;
            Price = price;
            RatePlan = ratePlan;
            State = state;
        }
    }
}
