// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
<<<<<<< HEAD
    /// &gt; `cloudflare.FirewallRule` is in a deprecation phase until January 15th, 2025.
=======
    /// &gt; `cloudflare.FirewallRule` is in a deprecation phase until June 15th, 2025.
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    ///   During this time period, this resource is still
    ///   fully supported but you are strongly advised  to move to the
    ///   `cloudflare.Ruleset` resource. Full details can be found in the
    ///   developer documentation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleFirewallRule = new Cloudflare.FirewallRule("example_firewall_rule", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Action = new Cloudflare.Inputs.FirewallRuleActionArgs
    ///         {
    ///             Mode = "simulate",
    ///             Response = new Cloudflare.Inputs.FirewallRuleActionResponseArgs
    ///             {
    ///                 Body = "&lt;error&gt;This request has been rate-limited.&lt;/error&gt;",
    ///                 ContentType = "text/xml",
    ///             },
    ///             Timeout = 86400,
    ///         },
    ///         Filter = new Cloudflare.Inputs.FirewallRuleFilterArgs
    ///         {
    ///             Description = "Restrict access from these browsers on this address range.",
    ///             Expression = "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.addr ne 172.16.22.155",
    ///             Paused = false,
    ///             Ref = "FIL-100",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
<<<<<<< HEAD
=======
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/firewallRule:FirewallRule example '&lt;zone_id&gt;/&lt;rule_id&gt;'
    /// ```
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    /// </summary>
    [CloudflareResourceType("cloudflare:index/firewallRule:FirewallRule")]
    public partial class FirewallRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Output("action")]
        public Output<Outputs.FirewallRuleAction> Action { get; private set; } = null!;

        /// <summary>
        /// An informative summary of the firewall rule.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("filter")]
        public Output<Outputs.FirewallRuleFilter> Filter { get; private set; } = null!;

        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
        /// </summary>
        [Output("priority")]
        public Output<double> Priority { get; private set; } = null!;

        [Output("products")]
        public Output<ImmutableArray<string>> Products { get; private set; } = null!;

        /// <summary>
        /// A short reference tag. Allows you to select related firewall rules.
        /// </summary>
        [Output("ref")]
        public Output<string> Ref { get; private set; } = null!;

        /// <summary>
<<<<<<< HEAD
        /// The unique identifier of the firewall rule.
        /// </summary>
        [Output("ruleId")]
        public Output<string?> RuleId { get; private set; } = null!;

        /// <summary>
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallRule(string name, FirewallRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/firewallRule:FirewallRule", name, args ?? new FirewallRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallRule(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/firewallRule:FirewallRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallRule Get(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallRule(name, id, state, options);
        }
    }

    public sealed class FirewallRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Input("action", required: true)]
        public Input<Inputs.FirewallRuleActionArgs> Action { get; set; } = null!;

        [Input("filter", required: true)]
        public Input<Inputs.FirewallRuleFilterArgs> Filter { get; set; } = null!;

        /// <summary>
<<<<<<< HEAD
        /// The unique identifier of the firewall rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public FirewallRuleArgs()
        {
        }
        public static new FirewallRuleArgs Empty => new FirewallRuleArgs();
    }

    public sealed class FirewallRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        [Input("action")]
        public Input<Inputs.FirewallRuleActionGetArgs>? Action { get; set; }

        /// <summary>
        /// An informative summary of the firewall rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("filter")]
        public Input<Inputs.FirewallRuleFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// When true, indicates that the firewall rule is currently paused.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        [Input("products")]
        private InputList<string>? _products;
        public InputList<string> Products
        {
            get => _products ?? (_products = new InputList<string>());
            set => _products = value;
        }

        /// <summary>
        /// A short reference tag. Allows you to select related firewall rules.
        /// </summary>
        [Input("ref")]
        public Input<string>? Ref { get; set; }

        /// <summary>
<<<<<<< HEAD
        /// The unique identifier of the firewall rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public FirewallRuleState()
        {
        }
        public static new FirewallRuleState Empty => new FirewallRuleState();
    }
}
