// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetD1Database
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleD1Database = Cloudflare.GetD1Database.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DatabaseId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetD1DatabaseResult> InvokeAsync(GetD1DatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetD1DatabaseResult>("cloudflare:index/getD1Database:getD1Database", args ?? new GetD1DatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleD1Database = Cloudflare.GetD1Database.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DatabaseId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetD1DatabaseResult> Invoke(GetD1DatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetD1DatabaseResult>("cloudflare:index/getD1Database:getD1Database", args ?? new GetD1DatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleD1Database = Cloudflare.GetD1Database.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DatabaseId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetD1DatabaseResult> Invoke(GetD1DatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetD1DatabaseResult>("cloudflare:index/getD1Database:getD1Database", args ?? new GetD1DatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetD1DatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

<<<<<<< HEAD
=======
        /// <summary>
        /// D1 database identifier (UUID).
        /// </summary>
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        [Input("databaseId")]
        public string? DatabaseId { get; set; }

        [Input("filter")]
        public Inputs.GetD1DatabaseFilterArgs? Filter { get; set; }

        public GetD1DatabaseArgs()
        {
        }
        public static new GetD1DatabaseArgs Empty => new GetD1DatabaseArgs();
    }

    public sealed class GetD1DatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

<<<<<<< HEAD
=======
        /// <summary>
        /// D1 database identifier (UUID).
        /// </summary>
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetD1DatabaseFilterInputArgs>? Filter { get; set; }

        public GetD1DatabaseInvokeArgs()
        {
        }
        public static new GetD1DatabaseInvokeArgs Empty => new GetD1DatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetD1DatabaseResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Specifies the timestamp the resource was created as an ISO8601 string.
        /// </summary>
        public readonly string CreatedAt;
<<<<<<< HEAD
=======
        /// <summary>
        /// D1 database identifier (UUID).
        /// </summary>
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        public readonly string? DatabaseId;
        /// <summary>
        /// The D1 database's size, in bytes.
        /// </summary>
        public readonly double FileSize;
        public readonly Outputs.GetD1DatabaseFilterResult? Filter;
        /// <summary>
<<<<<<< HEAD
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly double NumTables;
=======
        /// D1 database identifier (UUID).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// D1 database name.
        /// </summary>
        public readonly string Name;
        public readonly double NumTables;
        /// <summary>
        /// D1 database identifier (UUID).
        /// </summary>
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        public readonly string Uuid;
        public readonly string Version;

        [OutputConstructor]
        private GetD1DatabaseResult(
            string accountId,

            string createdAt,

            string? databaseId,

            double fileSize,

            Outputs.GetD1DatabaseFilterResult? filter,

            string id,

            string name,

            double numTables,

            string uuid,

            string version)
        {
            AccountId = accountId;
            CreatedAt = createdAt;
            DatabaseId = databaseId;
            FileSize = fileSize;
            Filter = filter;
            Id = id;
            Name = name;
            NumTables = numTables;
            Uuid = uuid;
            Version = version;
        }
    }
}
