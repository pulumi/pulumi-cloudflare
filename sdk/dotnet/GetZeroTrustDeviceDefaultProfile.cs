// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustDeviceDefaultProfile
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceDefaultProfile = Cloudflare.GetZeroTrustDeviceDefaultProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustDeviceDefaultProfileResult> InvokeAsync(GetZeroTrustDeviceDefaultProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustDeviceDefaultProfileResult>("cloudflare:index/getZeroTrustDeviceDefaultProfile:getZeroTrustDeviceDefaultProfile", args ?? new GetZeroTrustDeviceDefaultProfileArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceDefaultProfile = Cloudflare.GetZeroTrustDeviceDefaultProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDeviceDefaultProfileResult> Invoke(GetZeroTrustDeviceDefaultProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDeviceDefaultProfileResult>("cloudflare:index/getZeroTrustDeviceDefaultProfile:getZeroTrustDeviceDefaultProfile", args ?? new GetZeroTrustDeviceDefaultProfileInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDeviceDefaultProfile = Cloudflare.GetZeroTrustDeviceDefaultProfile.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDeviceDefaultProfileResult> Invoke(GetZeroTrustDeviceDefaultProfileInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDeviceDefaultProfileResult>("cloudflare:index/getZeroTrustDeviceDefaultProfile:getZeroTrustDeviceDefaultProfile", args ?? new GetZeroTrustDeviceDefaultProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustDeviceDefaultProfileArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        public GetZeroTrustDeviceDefaultProfileArgs()
        {
        }
        public static new GetZeroTrustDeviceDefaultProfileArgs Empty => new GetZeroTrustDeviceDefaultProfileArgs();
    }

    public sealed class GetZeroTrustDeviceDefaultProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        public GetZeroTrustDeviceDefaultProfileInvokeArgs()
        {
        }
        public static new GetZeroTrustDeviceDefaultProfileInvokeArgs Empty => new GetZeroTrustDeviceDefaultProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustDeviceDefaultProfileResult
    {
        public readonly string AccountId;
        /// <summary>
        /// Whether to allow the user to switch WARP between modes.
        /// </summary>
        public readonly bool AllowModeSwitch;
        /// <summary>
        /// Whether to receive update notifications when a new version of the client is available.
        /// </summary>
        public readonly bool AllowUpdates;
        /// <summary>
        /// Whether to allow devices to leave the organization.
        /// </summary>
        public readonly bool AllowedToLeave;
        /// <summary>
        /// The amount of time in seconds to reconnect after having been disabled.
        /// </summary>
        public readonly double AutoConnect;
        /// <summary>
        /// Turn on the captive portal after the specified amount of time.
        /// </summary>
        public readonly double CaptivePortal;
        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        /// </summary>
        public readonly bool DisableAutoFallback;
        /// <summary>
        /// Whether the policy will be applied to matching devices.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// Whether to add Microsoft IPs to Split Tunnel exclusions.
        /// </summary>
        public readonly bool ExcludeOfficeIps;
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileExcludeResult> Excludes;
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileFallbackDomainResult> FallbackDomains;
        public readonly string GatewayUniqueId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileIncludeResult> Includes;
        public readonly Outputs.GetZeroTrustDeviceDefaultProfileServiceModeV2Result ServiceModeV2;
        /// <summary>
        /// The URL to launch when the Send Feedback button is clicked.
        /// </summary>
        public readonly string SupportUrl;
        /// <summary>
        /// Whether to allow the user to turn off the WARP switch and disconnect the client.
        /// </summary>
        public readonly bool SwitchLocked;
        /// <summary>
        /// Determines which tunnel protocol to use.
        /// </summary>
        public readonly string TunnelProtocol;

        [OutputConstructor]
        private GetZeroTrustDeviceDefaultProfileResult(
            string accountId,

            bool allowModeSwitch,

            bool allowUpdates,

            bool allowedToLeave,

            double autoConnect,

            double captivePortal,

            bool @default,

            bool disableAutoFallback,

            bool enabled,

            bool excludeOfficeIps,

            ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileExcludeResult> excludes,

            ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileFallbackDomainResult> fallbackDomains,

            string gatewayUniqueId,

            string id,

            ImmutableArray<Outputs.GetZeroTrustDeviceDefaultProfileIncludeResult> includes,

            Outputs.GetZeroTrustDeviceDefaultProfileServiceModeV2Result serviceModeV2,

            string supportUrl,

            bool switchLocked,

            string tunnelProtocol)
        {
            AccountId = accountId;
            AllowModeSwitch = allowModeSwitch;
            AllowUpdates = allowUpdates;
            AllowedToLeave = allowedToLeave;
            AutoConnect = autoConnect;
            CaptivePortal = captivePortal;
            Default = @default;
            DisableAutoFallback = disableAutoFallback;
            Enabled = enabled;
            ExcludeOfficeIps = excludeOfficeIps;
            Excludes = excludes;
            FallbackDomains = fallbackDomains;
            GatewayUniqueId = gatewayUniqueId;
            Id = id;
            Includes = includes;
            ServiceModeV2 = serviceModeV2;
            SupportUrl = supportUrl;
            SwitchLocked = switchLocked;
            TunnelProtocol = tunnelProtocol;
        }
    }
}
