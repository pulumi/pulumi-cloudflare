// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustTunnelCloudflaredRoute = new Cloudflare.ZeroTrustTunnelCloudflaredRoute("example_zero_trust_tunnel_cloudflared_route", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         Network = "172.16.0.0/16",
    ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
    ///         Comment = "Example comment for this route.",
    ///         VirtualNetworkId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute example '&lt;account_id&gt;/&lt;route_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute")]
    public partial class ZeroTrustTunnelCloudflaredRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Optional remark describing the route.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the resource was deleted. If `Null`, the resource has not been deleted.
        /// </summary>
        [Output("deletedAt")]
        public Output<string> DeletedAt { get; private set; } = null!;

        /// <summary>
        /// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
        /// </summary>
        [Output("network")]
        public Output<string> Network { get; private set; } = null!;

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Output("tunnelId")]
        public Output<string> TunnelId { get; private set; } = null!;

        /// <summary>
        /// UUID of the virtual network.
        /// </summary>
        [Output("virtualNetworkId")]
        public Output<string> VirtualNetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustTunnelCloudflaredRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustTunnelCloudflaredRoute(string name, ZeroTrustTunnelCloudflaredRouteArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute", name, args ?? new ZeroTrustTunnelCloudflaredRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustTunnelCloudflaredRoute(string name, Input<string> id, ZeroTrustTunnelCloudflaredRouteState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustTunnelCloudflaredRoute:ZeroTrustTunnelCloudflaredRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/tunnelRoute:TunnelRoute" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustTunnelCloudflaredRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustTunnelCloudflaredRoute Get(string name, Input<string> id, ZeroTrustTunnelCloudflaredRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustTunnelCloudflaredRoute(name, id, state, options);
        }
    }

    public sealed class ZeroTrustTunnelCloudflaredRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Optional remark describing the route.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
        /// </summary>
        [Input("network", required: true)]
        public Input<string> Network { get; set; } = null!;

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("tunnelId", required: true)]
        public Input<string> TunnelId { get; set; } = null!;

        /// <summary>
        /// UUID of the virtual network.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<string>? VirtualNetworkId { get; set; }

        public ZeroTrustTunnelCloudflaredRouteArgs()
        {
        }
        public static new ZeroTrustTunnelCloudflaredRouteArgs Empty => new ZeroTrustTunnelCloudflaredRouteArgs();
    }

    public sealed class ZeroTrustTunnelCloudflaredRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Optional remark describing the route.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Timestamp of when the resource was deleted. If `Null`, the resource has not been deleted.
        /// </summary>
        [Input("deletedAt")]
        public Input<string>? DeletedAt { get; set; }

        /// <summary>
        /// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
        /// </summary>
        [Input("network")]
        public Input<string>? Network { get; set; }

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("tunnelId")]
        public Input<string>? TunnelId { get; set; }

        /// <summary>
        /// UUID of the virtual network.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<string>? VirtualNetworkId { get; set; }

        public ZeroTrustTunnelCloudflaredRouteState()
        {
        }
        public static new ZeroTrustTunnelCloudflaredRouteState Empty => new ZeroTrustTunnelCloudflaredRouteState();
    }
}
