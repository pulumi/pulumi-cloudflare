// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/keylessCertificate:KeylessCertificate example '&lt;zone_id&gt;/&lt;keyless_certificate_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/keylessCertificate:KeylessCertificate")]
    public partial class KeylessCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
        /// </summary>
        [Output("bundleMethod")]
        public Output<string> BundleMethod { get; private set; } = null!;

        /// <summary>
        /// The zone's SSL certificate or SSL certificate and intermediate(s).
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// When the Keyless SSL was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Whether or not the Keyless SSL is on or off.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// When the Keyless SSL was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Available permissions for the Keyless SSL for the current user requesting the item.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The keyless SSL port used to communicate between Cloudflare and the client's Keyless SSL server.
        /// </summary>
        [Output("port")]
        public Output<double> Port { get; private set; } = null!;

        /// <summary>
        /// Status of the Keyless SSL.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Configuration for using Keyless SSL through a Cloudflare Tunnel
        /// </summary>
        [Output("tunnel")]
        public Output<Outputs.KeylessCertificateTunnel> Tunnel { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a KeylessCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeylessCertificate(string name, KeylessCertificateArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/keylessCertificate:KeylessCertificate", name, args ?? new KeylessCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeylessCertificate(string name, Input<string> id, KeylessCertificateState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/keylessCertificate:KeylessCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeylessCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeylessCertificate Get(string name, Input<string> id, KeylessCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new KeylessCertificate(name, id, state, options);
        }
    }

    public sealed class KeylessCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
        /// </summary>
        [Input("bundleMethod")]
        public Input<string>? BundleMethod { get; set; }

        /// <summary>
        /// The zone's SSL certificate or SSL certificate and intermediate(s).
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// Whether or not the Keyless SSL is on or off.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The keyless SSL port used to communicate between Cloudflare and the client's Keyless SSL server.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Configuration for using Keyless SSL through a Cloudflare Tunnel
        /// </summary>
        [Input("tunnel")]
        public Input<Inputs.KeylessCertificateTunnelArgs>? Tunnel { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public KeylessCertificateArgs()
        {
        }
        public static new KeylessCertificateArgs Empty => new KeylessCertificateArgs();
    }

    public sealed class KeylessCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
        /// </summary>
        [Input("bundleMethod")]
        public Input<string>? BundleMethod { get; set; }

        /// <summary>
        /// The zone's SSL certificate or SSL certificate and intermediate(s).
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// When the Keyless SSL was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Whether or not the Keyless SSL is on or off.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// When the Keyless SSL was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The keyless SSL name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// Available permissions for the Keyless SSL for the current user requesting the item.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// The keyless SSL port used to communicate between Cloudflare and the client's Keyless SSL server.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// Status of the Keyless SSL.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Configuration for using Keyless SSL through a Cloudflare Tunnel
        /// </summary>
        [Input("tunnel")]
        public Input<Inputs.KeylessCertificateTunnelGetArgs>? Tunnel { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public KeylessCertificateState()
        {
        }
        public static new KeylessCertificateState Empty => new KeylessCertificateState();
    }
}
