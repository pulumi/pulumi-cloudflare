// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccountRole
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountRole = Cloudflare.GetAccountRole.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         RoleId = "3536bcfad5faccb999b47003c79917fb",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccountRoleResult> InvokeAsync(GetAccountRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccountRoleResult>("cloudflare:index/getAccountRole:getAccountRole", args ?? new GetAccountRoleArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountRole = Cloudflare.GetAccountRole.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         RoleId = "3536bcfad5faccb999b47003c79917fb",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountRoleResult> Invoke(GetAccountRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountRoleResult>("cloudflare:index/getAccountRole:getAccountRole", args ?? new GetAccountRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccountRole = Cloudflare.GetAccountRole.Invoke(new()
        ///     {
        ///         AccountId = "eb78d65290b24279ba6f44721b3ea3c4",
        ///         RoleId = "3536bcfad5faccb999b47003c79917fb",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccountRoleResult> Invoke(GetAccountRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccountRoleResult>("cloudflare:index/getAccountRole:getAccountRole", args ?? new GetAccountRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccountRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Role identifier tag.
        /// </summary>
        [Input("roleId", required: true)]
        public string RoleId { get; set; } = null!;

        public GetAccountRoleArgs()
        {
        }
        public static new GetAccountRoleArgs Empty => new GetAccountRoleArgs();
    }

    public sealed class GetAccountRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Role identifier tag.
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        public GetAccountRoleInvokeArgs()
        {
        }
        public static new GetAccountRoleInvokeArgs Empty => new GetAccountRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccountRoleResult
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Description of role's permissions.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Role identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Role name.
        /// </summary>
        public readonly string Name;
        public readonly Outputs.GetAccountRolePermissionsResult Permissions;
        /// <summary>
        /// Role identifier tag.
        /// </summary>
        public readonly string RoleId;

        [OutputConstructor]
        private GetAccountRoleResult(
            string accountId,

            string description,

            string id,

            string name,

            Outputs.GetAccountRolePermissionsResult permissions,

            string roleId)
        {
            AccountId = accountId;
            Description = description;
            Id = id;
            Name = name;
            Permissions = permissions;
            RoleId = roleId;
        }
    }
}
