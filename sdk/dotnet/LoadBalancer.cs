// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Load Balancer resource. This sits in front of
    /// a number of defined pools of origins and provides various options
    /// for geographically-aware load balancing. Note that the load balancing
    /// feature must be enabled in your Cloudflare account before you can use
    /// this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleLoadBalancerPool = new Cloudflare.LoadBalancerPool("example", new()
    ///     {
    ///         Name = "example-lb-pool",
    ///         Origins = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerPoolOriginArgs
    ///             {
    ///                 Name = "example-1",
    ///                 Address = "192.0.2.1",
    ///                 Enabled = false,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Define a load balancer which always points to a pool we define below.
    ///     // In normal usage, would have different pools set for different pops
    ///     // (cloudflare points-of-presence) and/or for different regions.
    ///     // Within each pop or region we can define multiple pools in failover order.
    ///     var example = new Cloudflare.LoadBalancer("example", new()
    ///     {
    ///         ZoneId = "0da42c8d2132a9ddaf714f9e7c920711",
    ///         Name = "example-load-balancer.example.com",
    ///         FallbackPoolId = exampleLoadBalancerPool.Id,
    ///         DefaultPoolIds = new[]
    ///         {
    ///             exampleLoadBalancerPool.Id,
    ///         },
    ///         Description = "example load balancer using geo-balancing",
    ///         Proxied = true,
    ///         SteeringPolicy = "geo",
    ///         PopPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerPopPoolArgs
    ///             {
    ///                 Pop = "LAX",
    ///                 PoolIds = new[]
    ///                 {
    ///                     exampleLoadBalancerPool.Id,
    ///                 },
    ///             },
    ///         },
    ///         CountryPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerCountryPoolArgs
    ///             {
    ///                 Country = "US",
    ///                 PoolIds = new[]
    ///                 {
    ///                     exampleLoadBalancerPool.Id,
    ///                 },
    ///             },
    ///         },
    ///         RegionPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerRegionPoolArgs
    ///             {
    ///                 Region = "WNAM",
    ///                 PoolIds = new[]
    ///                 {
    ///                     exampleLoadBalancerPool.Id,
    ///                 },
    ///             },
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerRuleArgs
    ///             {
    ///                 Name = "example rule",
    ///                 Condition = "http.request.uri.path contains \"testing\"",
    ///                 FixedResponse = new Cloudflare.Inputs.LoadBalancerRuleFixedResponseArgs
    ///                 {
    ///                     MessageBody = "hello",
    ///                     StatusCode = 200,
    ///                     ContentType = "html",
    ///                     Location = "www.example.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example &lt;zone_id&gt;/&lt;load_balancer_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
        /// </summary>
        [Output("adaptiveRoutings")]
        public Output<ImmutableArray<Outputs.LoadBalancerAdaptiveRouting>> AdaptiveRoutings { get; private set; } = null!;

        /// <summary>
        /// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
        /// </summary>
        [Output("countryPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerCountryPool>> CountryPools { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever `pop_pools`/`country_pools`/`region_pools` are not defined.
        /// </summary>
        [Output("defaultPoolIds")]
        public Output<ImmutableArray<string>> DefaultPoolIds { get; private set; } = null!;

        /// <summary>
        /// Free text description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Output("fallbackPoolId")]
        public Output<string> FallbackPoolId { get; private set; } = null!;

        /// <summary>
        /// Controls location-based steering for non-proxied requests.
        /// </summary>
        [Output("locationStrategies")]
        public Output<ImmutableArray<Outputs.LoadBalancerLocationStrategy>> LocationStrategies { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The DNS hostname to associate with your load balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the load balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
        /// </summary>
        [Output("popPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerPopPool>> PopPools { get; private set; } = null!;

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
        /// </summary>
        [Output("proxied")]
        public Output<bool?> Proxied { get; private set; } = null!;

        /// <summary>
        /// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="least_outstanding_requests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="least_connections"`, pool weights are used to scale each pool's open connections.
        /// </summary>
        [Output("randomSteerings")]
        public Output<ImmutableArray<Outputs.LoadBalancerRandomSteering>> RandomSteerings { get; private set; } = null!;

        /// <summary>
        /// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
        /// </summary>
        [Output("regionPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerRegionPool>> RegionPools { get; private set; } = null!;

        /// <summary>
        /// A list of rules for this load balancer to execute.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.LoadBalancerRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `none` or `""` (default). With value `cookie`, on the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy then a new origin server is calculated and used. Value `ip_cookie` behaves the same as `cookie` except the initial origin selection is stable and based on the client's IP address. Available values: `""`, `none`, `cookie`, `ip_cookie`, `header`. Defaults to `none`.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string?> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// Configure attributes for session affinity.
        /// </summary>
        [Output("sessionAffinityAttributes")]
        public Output<ImmutableArray<Outputs.LoadBalancerSessionAffinityAttribute>> SessionAffinityAttributes { get; private set; } = null!;

        /// <summary>
        /// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `session_affinity_ttl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
        /// </summary>
        [Output("sessionAffinityTtl")]
        public Output<int?> SessionAffinityTtl { get; private set; } = null!;

        /// <summary>
        /// The method the load balancer uses to determine the route to your origin. Value `off` uses `default_pool_ids`. Value `geo` uses `pop_pools`/`country_pools`/`region_pools`. For non-proxied requests, the `country` for `country_pools` is determined by `location_strategy`. Value `random` selects a pool randomly. Value `dynamic_latency` uses round trip time to select the closest pool in `default_pool_ids` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests. Value `least_outstanding_requests` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `least_connections` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `pop_pools`/`country_pools`/`region_pools` otherwise `off`. Available values: `off`, `geo`, `dynamic_latency`, `random`, `proximity`, `least_outstanding_requests`, `least_connections`, `""` Defaults to `""`.
        /// </summary>
        [Output("steeringPolicy")]
        public Output<string> SteeringPolicy { get; private set; } = null!;

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`. Conflicts with `proxied`.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        [Input("adaptiveRoutings")]
        private InputList<Inputs.LoadBalancerAdaptiveRoutingArgs>? _adaptiveRoutings;

        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
        /// </summary>
        public InputList<Inputs.LoadBalancerAdaptiveRoutingArgs> AdaptiveRoutings
        {
            get => _adaptiveRoutings ?? (_adaptiveRoutings = new InputList<Inputs.LoadBalancerAdaptiveRoutingArgs>());
            set => _adaptiveRoutings = value;
        }

        [Input("countryPools")]
        private InputList<Inputs.LoadBalancerCountryPoolArgs>? _countryPools;

        /// <summary>
        /// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
        /// </summary>
        public InputList<Inputs.LoadBalancerCountryPoolArgs> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputList<Inputs.LoadBalancerCountryPoolArgs>());
            set => _countryPools = value;
        }

        [Input("defaultPoolIds", required: true)]
        private InputList<string>? _defaultPoolIds;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever `pop_pools`/`country_pools`/`region_pools` are not defined.
        /// </summary>
        public InputList<string> DefaultPoolIds
        {
            get => _defaultPoolIds ?? (_defaultPoolIds = new InputList<string>());
            set => _defaultPoolIds = value;
        }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPoolId", required: true)]
        public Input<string> FallbackPoolId { get; set; } = null!;

        [Input("locationStrategies")]
        private InputList<Inputs.LoadBalancerLocationStrategyArgs>? _locationStrategies;

        /// <summary>
        /// Controls location-based steering for non-proxied requests.
        /// </summary>
        public InputList<Inputs.LoadBalancerLocationStrategyArgs> LocationStrategies
        {
            get => _locationStrategies ?? (_locationStrategies = new InputList<Inputs.LoadBalancerLocationStrategyArgs>());
            set => _locationStrategies = value;
        }

        /// <summary>
        /// The DNS hostname to associate with your load balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the load balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("popPools")]
        private InputList<Inputs.LoadBalancerPopPoolArgs>? _popPools;

        /// <summary>
        /// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
        /// </summary>
        public InputList<Inputs.LoadBalancerPopPoolArgs> PopPools
        {
            get => _popPools ?? (_popPools = new InputList<Inputs.LoadBalancerPopPoolArgs>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        [Input("randomSteerings")]
        private InputList<Inputs.LoadBalancerRandomSteeringArgs>? _randomSteerings;

        /// <summary>
        /// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="least_outstanding_requests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="least_connections"`, pool weights are used to scale each pool's open connections.
        /// </summary>
        public InputList<Inputs.LoadBalancerRandomSteeringArgs> RandomSteerings
        {
            get => _randomSteerings ?? (_randomSteerings = new InputList<Inputs.LoadBalancerRandomSteeringArgs>());
            set => _randomSteerings = value;
        }

        [Input("regionPools")]
        private InputList<Inputs.LoadBalancerRegionPoolArgs>? _regionPools;

        /// <summary>
        /// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
        /// </summary>
        public InputList<Inputs.LoadBalancerRegionPoolArgs> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputList<Inputs.LoadBalancerRegionPoolArgs>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleArgs>? _rules;

        /// <summary>
        /// A list of rules for this load balancer to execute.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `none` or `""` (default). With value `cookie`, on the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy then a new origin server is calculated and used. Value `ip_cookie` behaves the same as `cookie` except the initial origin selection is stable and based on the client's IP address. Available values: `""`, `none`, `cookie`, `ip_cookie`, `header`. Defaults to `none`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        [Input("sessionAffinityAttributes")]
        private InputList<Inputs.LoadBalancerSessionAffinityAttributeArgs>? _sessionAffinityAttributes;

        /// <summary>
        /// Configure attributes for session affinity.
        /// </summary>
        public InputList<Inputs.LoadBalancerSessionAffinityAttributeArgs> SessionAffinityAttributes
        {
            get => _sessionAffinityAttributes ?? (_sessionAffinityAttributes = new InputList<Inputs.LoadBalancerSessionAffinityAttributeArgs>());
            set => _sessionAffinityAttributes = value;
        }

        /// <summary>
        /// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `session_affinity_ttl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<int>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// The method the load balancer uses to determine the route to your origin. Value `off` uses `default_pool_ids`. Value `geo` uses `pop_pools`/`country_pools`/`region_pools`. For non-proxied requests, the `country` for `country_pools` is determined by `location_strategy`. Value `random` selects a pool randomly. Value `dynamic_latency` uses round trip time to select the closest pool in `default_pool_ids` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests. Value `least_outstanding_requests` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `least_connections` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `pop_pools`/`country_pools`/`region_pools` otherwise `off`. Available values: `off`, `geo`, `dynamic_latency`, `random`, `proximity`, `least_outstanding_requests`, `least_connections`, `""` Defaults to `""`.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`. Conflicts with `proxied`.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public LoadBalancerArgs()
        {
        }
        public static new LoadBalancerArgs Empty => new LoadBalancerArgs();
    }

    public sealed class LoadBalancerState : global::Pulumi.ResourceArgs
    {
        [Input("adaptiveRoutings")]
        private InputList<Inputs.LoadBalancerAdaptiveRoutingGetArgs>? _adaptiveRoutings;

        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
        /// </summary>
        public InputList<Inputs.LoadBalancerAdaptiveRoutingGetArgs> AdaptiveRoutings
        {
            get => _adaptiveRoutings ?? (_adaptiveRoutings = new InputList<Inputs.LoadBalancerAdaptiveRoutingGetArgs>());
            set => _adaptiveRoutings = value;
        }

        [Input("countryPools")]
        private InputList<Inputs.LoadBalancerCountryPoolGetArgs>? _countryPools;

        /// <summary>
        /// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
        /// </summary>
        public InputList<Inputs.LoadBalancerCountryPoolGetArgs> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputList<Inputs.LoadBalancerCountryPoolGetArgs>());
            set => _countryPools = value;
        }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("defaultPoolIds")]
        private InputList<string>? _defaultPoolIds;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever `pop_pools`/`country_pools`/`region_pools` are not defined.
        /// </summary>
        public InputList<string> DefaultPoolIds
        {
            get => _defaultPoolIds ?? (_defaultPoolIds = new InputList<string>());
            set => _defaultPoolIds = value;
        }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPoolId")]
        public Input<string>? FallbackPoolId { get; set; }

        [Input("locationStrategies")]
        private InputList<Inputs.LoadBalancerLocationStrategyGetArgs>? _locationStrategies;

        /// <summary>
        /// Controls location-based steering for non-proxied requests.
        /// </summary>
        public InputList<Inputs.LoadBalancerLocationStrategyGetArgs> LocationStrategies
        {
            get => _locationStrategies ?? (_locationStrategies = new InputList<Inputs.LoadBalancerLocationStrategyGetArgs>());
            set => _locationStrategies = value;
        }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The DNS hostname to associate with your load balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the load balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("popPools")]
        private InputList<Inputs.LoadBalancerPopPoolGetArgs>? _popPools;

        /// <summary>
        /// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
        /// </summary>
        public InputList<Inputs.LoadBalancerPopPoolGetArgs> PopPools
        {
            get => _popPools ?? (_popPools = new InputList<Inputs.LoadBalancerPopPoolGetArgs>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        [Input("randomSteerings")]
        private InputList<Inputs.LoadBalancerRandomSteeringGetArgs>? _randomSteerings;

        /// <summary>
        /// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="least_outstanding_requests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="least_connections"`, pool weights are used to scale each pool's open connections.
        /// </summary>
        public InputList<Inputs.LoadBalancerRandomSteeringGetArgs> RandomSteerings
        {
            get => _randomSteerings ?? (_randomSteerings = new InputList<Inputs.LoadBalancerRandomSteeringGetArgs>());
            set => _randomSteerings = value;
        }

        [Input("regionPools")]
        private InputList<Inputs.LoadBalancerRegionPoolGetArgs>? _regionPools;

        /// <summary>
        /// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
        /// </summary>
        public InputList<Inputs.LoadBalancerRegionPoolGetArgs> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputList<Inputs.LoadBalancerRegionPoolGetArgs>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleGetArgs>? _rules;

        /// <summary>
        /// A list of rules for this load balancer to execute.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `none` or `""` (default). With value `cookie`, on the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy then a new origin server is calculated and used. Value `ip_cookie` behaves the same as `cookie` except the initial origin selection is stable and based on the client's IP address. Available values: `""`, `none`, `cookie`, `ip_cookie`, `header`. Defaults to `none`.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        [Input("sessionAffinityAttributes")]
        private InputList<Inputs.LoadBalancerSessionAffinityAttributeGetArgs>? _sessionAffinityAttributes;

        /// <summary>
        /// Configure attributes for session affinity.
        /// </summary>
        public InputList<Inputs.LoadBalancerSessionAffinityAttributeGetArgs> SessionAffinityAttributes
        {
            get => _sessionAffinityAttributes ?? (_sessionAffinityAttributes = new InputList<Inputs.LoadBalancerSessionAffinityAttributeGetArgs>());
            set => _sessionAffinityAttributes = value;
        }

        /// <summary>
        /// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `session_affinity_ttl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<int>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// The method the load balancer uses to determine the route to your origin. Value `off` uses `default_pool_ids`. Value `geo` uses `pop_pools`/`country_pools`/`region_pools`. For non-proxied requests, the `country` for `country_pools` is determined by `location_strategy`. Value `random` selects a pool randomly. Value `dynamic_latency` uses round trip time to select the closest pool in `default_pool_ids` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `location_strategy` for non-proxied requests. Value `least_outstanding_requests` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `least_connections` selects a pool by taking into consideration `random_steering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `pop_pools`/`country_pools`/`region_pools` otherwise `off`. Available values: `off`, `geo`, `dynamic_latency`, `random`, `proximity`, `least_outstanding_requests`, `least_connections`, `""` Defaults to `""`.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`. Conflicts with `proxied`.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public LoadBalancerState()
        {
        }
        public static new LoadBalancerState Empty => new LoadBalancerState();
    }
}
