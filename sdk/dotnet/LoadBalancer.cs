// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleLoadBalancer = new Cloudflare.LoadBalancer("example_load_balancer", new()
    ///     {
    ///         ZoneId = "699d98642c564d2e855e9661899b7252",
    ///         DefaultPools = new[]
    ///         {
    ///             "17b5962d775c646f3f9725cbc7a53df4",
    ///             "9290f38c5d07c2e2f4df57b1f61d4196",
    ///             "00920f38ce07c2e2f4df50b1f61d4194",
    ///         },
    ///         FallbackPool = "fallback_pool",
    ///         Name = "www.example.com",
    ///         AdaptiveRouting = new Cloudflare.Inputs.LoadBalancerAdaptiveRoutingArgs
    ///         {
    ///             Failover_across_pools = true,
    ///         },
    ///         CountryPools = 
    ///         {
    ///             { "GB", new[]
    ///             {
    ///                 "abd90f38ced07c2e2f4df50b1f61d4194",
    ///             } },
    ///             { "US", new[]
    ///             {
    ///                 "de90f38ced07c2e2f4df50b1f61d4194",
    ///                 "00920f38ce07c2e2f4df50b1f61d4194",
    ///             } },
    ///         },
    ///         Description = "Load Balancer for www.example.com",
    ///         LocationStrategy = new Cloudflare.Inputs.LoadBalancerLocationStrategyArgs
    ///         {
    ///             Mode = "resolver_ip",
    ///             Prefer_ecs = "always",
    ///         },
    ///         Networks = new[]
    ///         {
    ///             "string",
    ///         },
    ///         PopPools = 
    ///         {
    ///             { "LAX", new[]
    ///             {
    ///                 "de90f38ced07c2e2f4df50b1f61d4194",
    ///                 "9290f38c5d07c2e2f4df57b1f61d4196",
    ///             } },
    ///             { "LHR", new[]
    ///             {
    ///                 "abd90f38ced07c2e2f4df50b1f61d4194",
    ///                 "f9138c5d07c2e2f4df57b1f61d4196",
    ///             } },
    ///             { "SJC", new[]
    ///             {
    ///                 "00920f38ce07c2e2f4df50b1f61d4194",
    ///             } },
    ///         },
    ///         Proxied = true,
    ///         RandomSteering = new Cloudflare.Inputs.LoadBalancerRandomSteeringArgs
    ///         {
    ///             Default_weight = 0.2,
    ///             Pool_weights = 
    ///             {
    ///                 { "9290f38c5d07c2e2f4df57b1f61d4196", 0.5 },
    ///                 { "de90f38ced07c2e2f4df50b1f61d4194", 0.3 },
    ///             },
    ///         },
    ///         RegionPools = 
    ///         {
    ///             { "ENAM", new[]
    ///             {
    ///                 "00920f38ce07c2e2f4df50b1f61d4194",
    ///             } },
    ///             { "WNAM", new[]
    ///             {
    ///                 "de90f38ced07c2e2f4df50b1f61d4194",
    ///                 "9290f38c5d07c2e2f4df57b1f61d4196",
    ///             } },
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerRuleArgs
    ///             {
    ///                 Condition = "http.request.uri.path contains \"/testing\"",
    ///                 Disabled = true,
    ///                 Fixed_response = 
    ///                 {
    ///                     { "contentType", "application/json" },
    ///                     { "location", "www.example.com" },
    ///                     { "messageBody", "Testing Hello" },
    ///                     { "statusCode", 0 },
    ///                 },
    ///                 Name = "route the path /testing to testing datacenter.",
    ///                 Overrides = new Cloudflare.Inputs.LoadBalancerRuleOverridesArgs
    ///                 {
    ///                     AdaptiveRouting = new Cloudflare.Inputs.LoadBalancerRuleOverridesAdaptiveRoutingArgs
    ///                     {
    ///                         FailoverAcrossPools = true,
    ///                     },
    ///                     CountryPools = 
    ///                     {
    ///                         { "GB", new[]
    ///                         {
    ///                             "abd90f38ced07c2e2f4df50b1f61d4194",
    ///                         } },
    ///                         { "US", new[]
    ///                         {
    ///                             "de90f38ced07c2e2f4df50b1f61d4194",
    ///                             "00920f38ce07c2e2f4df50b1f61d4194",
    ///                         } },
    ///                     },
    ///                     DefaultPools = new[]
    ///                     {
    ///                         "17b5962d775c646f3f9725cbc7a53df4",
    ///                         "9290f38c5d07c2e2f4df57b1f61d4196",
    ///                         "00920f38ce07c2e2f4df50b1f61d4194",
    ///                     },
    ///                     FallbackPool = "fallback_pool",
    ///                     LocationStrategy = new Cloudflare.Inputs.LoadBalancerRuleOverridesLocationStrategyArgs
    ///                     {
    ///                         Mode = "resolver_ip",
    ///                         PreferEcs = "always",
    ///                     },
    ///                     PopPools = 
    ///                     {
    ///                         { "LAX", new[]
    ///                         {
    ///                             "de90f38ced07c2e2f4df50b1f61d4194",
    ///                             "9290f38c5d07c2e2f4df57b1f61d4196",
    ///                         } },
    ///                         { "LHR", new[]
    ///                         {
    ///                             "abd90f38ced07c2e2f4df50b1f61d4194",
    ///                             "f9138c5d07c2e2f4df57b1f61d4196",
    ///                         } },
    ///                         { "SJC", new[]
    ///                         {
    ///                             "00920f38ce07c2e2f4df50b1f61d4194",
    ///                         } },
    ///                     },
    ///                     RandomSteering = new Cloudflare.Inputs.LoadBalancerRuleOverridesRandomSteeringArgs
    ///                     {
    ///                         DefaultWeight = 0.2,
    ///                         PoolWeights = 
    ///                         {
    ///                             { "9290f38c5d07c2e2f4df57b1f61d4196", 0.5 },
    ///                             { "de90f38ced07c2e2f4df50b1f61d4194", 0.3 },
    ///                         },
    ///                     },
    ///                     RegionPools = 
    ///                     {
    ///                         { "ENAM", new[]
    ///                         {
    ///                             "00920f38ce07c2e2f4df50b1f61d4194",
    ///                         } },
    ///                         { "WNAM", new[]
    ///                         {
    ///                             "de90f38ced07c2e2f4df50b1f61d4194",
    ///                             "9290f38c5d07c2e2f4df57b1f61d4196",
    ///                         } },
    ///                     },
    ///                     SessionAffinity = "cookie",
    ///                     SessionAffinityAttributes = new Cloudflare.Inputs.LoadBalancerRuleOverridesSessionAffinityAttributesArgs
    ///                     {
    ///                         DrainDuration = 100,
    ///                         Headers = new[]
    ///                         {
    ///                             "x",
    ///                         },
    ///                         RequireAllHeaders = true,
    ///                         Samesite = "Auto",
    ///                         Secure = "Auto",
    ///                         ZeroDowntimeFailover = "sticky",
    ///                     },
    ///                     SessionAffinityTtl = 1800,
    ///                     SteeringPolicy = "dynamic_latency",
    ///                     Ttl = 30,
    ///                 },
    ///                 Priority = 0,
    ///                 Terminates = true,
    ///             },
    ///         },
    ///         SessionAffinity = "cookie",
    ///         SessionAffinityAttributes = new Cloudflare.Inputs.LoadBalancerSessionAffinityAttributesArgs
    ///         {
    ///             Drain_duration = 100,
    ///             Headers = new[]
    ///             {
    ///                 "x",
    ///             },
    ///             Require_all_headers = true,
    ///             Samesite = "Auto",
    ///             Secure = "Auto",
    ///             Zero_downtime_failover = "sticky",
    ///         },
    ///         SessionAffinityTtl = 1800,
    ///         SteeringPolicy = "dynamic_latency",
    ///         Ttl = 30,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example '&lt;zone_id&gt;/&lt;load_balancer_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
        /// </summary>
        [Output("adaptiveRouting")]
        public Output<Outputs.LoadBalancerAdaptiveRouting> AdaptiveRouting { get; private set; } = null!;

        /// <summary>
        /// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
        /// </summary>
        [Output("countryPools")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>> CountryPools { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when RegionPools are not configured for a given region.
        /// </summary>
        [Output("defaultPools")]
        public Output<ImmutableArray<string>> DefaultPools { get; private set; } = null!;

        /// <summary>
        /// Object description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to enable (the default) this load balancer.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Output("fallbackPool")]
        public Output<string> FallbackPool { get; private set; } = null!;

        /// <summary>
        /// Controls location-based steering for non-proxied requests. See `SteeringPolicy` to learn how steering is affected.
        /// </summary>
        [Output("locationStrategy")]
        public Output<Outputs.LoadBalancerLocationStrategy> LocationStrategy { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<string>> Networks { get; private set; } = null!;

        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        [Output("popPools")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>> PopPools { get; private set; } = null!;

        /// <summary>
        /// Whether the hostname should be gray clouded (false) or orange clouded (true).
        /// </summary>
        [Output("proxied")]
        public Output<bool> Proxied { get; private set; } = null!;

        /// <summary>
        /// Configures pool weights.
        /// </summary>
        [Output("randomSteering")]
        public Output<Outputs.LoadBalancerRandomSteering> RandomSteering { get; private set; } = null!;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        [Output("regionPools")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>> RegionPools { get; private set; } = null!;

        /// <summary>
        /// BETA Field Not General Access: A list of rules for this load balancer to execute.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.LoadBalancerRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"IpCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `SessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `Headers` in `SessionAffinityAttributes` for additional required configuration.
        /// Available values: "none", "cookie", "IpCookie", "header".
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// Configures attributes for session affinity.
        /// </summary>
        [Output("sessionAffinityAttributes")]
        public Output<Outputs.LoadBalancerSessionAffinityAttributes> SessionAffinityAttributes { get; private set; } = null!;

        /// <summary>
        /// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `SessionAffinity` policy are: - `"cookie"` / `"IpCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
        /// </summary>
        [Output("sessionAffinityTtl")]
        public Output<double> SessionAffinityTtl { get; private set; } = null!;

        /// <summary>
        /// Steering Policy for this load balancer.
        /// </summary>
        [Output("steeringPolicy")]
        public Output<string> SteeringPolicy { get; private set; } = null!;

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
        /// </summary>
        [Output("ttl")]
        public Output<double> Ttl { get; private set; } = null!;

        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
        /// </summary>
        [Input("adaptiveRouting")]
        public Input<Inputs.LoadBalancerAdaptiveRoutingArgs>? AdaptiveRouting { get; set; }

        [Input("countryPools")]
        private InputMap<ImmutableArray<string>>? _countryPools;

        /// <summary>
        /// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputMap<ImmutableArray<string>>());
            set => _countryPools = value;
        }

        [Input("defaultPools", required: true)]
        private InputList<string>? _defaultPools;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when RegionPools are not configured for a given region.
        /// </summary>
        public InputList<string> DefaultPools
        {
            get => _defaultPools ?? (_defaultPools = new InputList<string>());
            set => _defaultPools = value;
        }

        /// <summary>
        /// Object description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable (the default) this load balancer.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPool", required: true)]
        public Input<string> FallbackPool { get; set; } = null!;

        /// <summary>
        /// Controls location-based steering for non-proxied requests. See `SteeringPolicy` to learn how steering is affected.
        /// </summary>
        [Input("locationStrategy")]
        public Input<Inputs.LoadBalancerLocationStrategyArgs>? LocationStrategy { get; set; }

        /// <summary>
        /// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("popPools")]
        private InputMap<ImmutableArray<string>>? _popPools;

        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> PopPools
        {
            get => _popPools ?? (_popPools = new InputMap<ImmutableArray<string>>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname should be gray clouded (false) or orange clouded (true).
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        /// <summary>
        /// Configures pool weights.
        /// </summary>
        [Input("randomSteering")]
        public Input<Inputs.LoadBalancerRandomSteeringArgs>? RandomSteering { get; set; }

        [Input("regionPools")]
        private InputMap<ImmutableArray<string>>? _regionPools;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputMap<ImmutableArray<string>>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleArgs>? _rules;

        /// <summary>
        /// BETA Field Not General Access: A list of rules for this load balancer to execute.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"IpCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `SessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `Headers` in `SessionAffinityAttributes` for additional required configuration.
        /// Available values: "none", "cookie", "IpCookie", "header".
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// Configures attributes for session affinity.
        /// </summary>
        [Input("sessionAffinityAttributes")]
        public Input<Inputs.LoadBalancerSessionAffinityAttributesArgs>? SessionAffinityAttributes { get; set; }

        /// <summary>
        /// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `SessionAffinity` policy are: - `"cookie"` / `"IpCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<double>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// Steering Policy for this load balancer.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public LoadBalancerArgs()
        {
        }
        public static new LoadBalancerArgs Empty => new LoadBalancerArgs();
    }

    public sealed class LoadBalancerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
        /// </summary>
        [Input("adaptiveRouting")]
        public Input<Inputs.LoadBalancerAdaptiveRoutingGetArgs>? AdaptiveRouting { get; set; }

        [Input("countryPools")]
        private InputMap<ImmutableArray<string>>? _countryPools;

        /// <summary>
        /// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputMap<ImmutableArray<string>>());
            set => _countryPools = value;
        }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("defaultPools")]
        private InputList<string>? _defaultPools;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when RegionPools are not configured for a given region.
        /// </summary>
        public InputList<string> DefaultPools
        {
            get => _defaultPools ?? (_defaultPools = new InputList<string>());
            set => _defaultPools = value;
        }

        /// <summary>
        /// Object description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable (the default) this load balancer.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPool")]
        public Input<string>? FallbackPool { get; set; }

        /// <summary>
        /// Controls location-based steering for non-proxied requests. See `SteeringPolicy` to learn how steering is affected.
        /// </summary>
        [Input("locationStrategy")]
        public Input<Inputs.LoadBalancerLocationStrategyGetArgs>? LocationStrategy { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<string>? _networks;

        /// <summary>
        /// List of networks where Load Balancer or Pool is enabled.
        /// </summary>
        public InputList<string> Networks
        {
            get => _networks ?? (_networks = new InputList<string>());
            set => _networks = value;
        }

        [Input("popPools")]
        private InputMap<ImmutableArray<string>>? _popPools;

        /// <summary>
        /// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> PopPools
        {
            get => _popPools ?? (_popPools = new InputMap<ImmutableArray<string>>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname should be gray clouded (false) or orange clouded (true).
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        /// <summary>
        /// Configures pool weights.
        /// </summary>
        [Input("randomSteering")]
        public Input<Inputs.LoadBalancerRandomSteeringGetArgs>? RandomSteering { get; set; }

        [Input("regionPools")]
        private InputMap<ImmutableArray<string>>? _regionPools;

        /// <summary>
        /// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
        /// </summary>
        public InputMap<ImmutableArray<string>> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputMap<ImmutableArray<string>>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleGetArgs>? _rules;

        /// <summary>
        /// BETA Field Not General Access: A list of rules for this load balancer to execute.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"IpCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `SessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `Headers` in `SessionAffinityAttributes` for additional required configuration.
        /// Available values: "none", "cookie", "IpCookie", "header".
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        /// <summary>
        /// Configures attributes for session affinity.
        /// </summary>
        [Input("sessionAffinityAttributes")]
        public Input<Inputs.LoadBalancerSessionAffinityAttributesGetArgs>? SessionAffinityAttributes { get; set; }

        /// <summary>
        /// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `SessionAffinity` policy are: - `"cookie"` / `"IpCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<double>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// Steering Policy for this load balancer.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public LoadBalancerState()
        {
        }
        public static new LoadBalancerState Empty => new LoadBalancerState();
    }
}
