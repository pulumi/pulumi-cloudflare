// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Load Balancer resource. This sits in front of a number of defined pools of origins and provides various options for geographically-aware load balancing. Note that the load balancing feature must be enabled in your Cloudflare account before you can use this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Cloudflare.LoadBalancerPool("foo", new()
    ///     {
    ///         Name = "example-lb-pool",
    ///         Origins = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerPoolOriginArgs
    ///             {
    ///                 Name = "example-1",
    ///                 Address = "192.0.2.1",
    ///                 Enabled = false,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Define a load balancer which always points to a pool we define below
    ///     // In normal usage, would have different pools set for different pops (cloudflare points-of-presence) and/or for different regions
    ///     // Within each pop or region we can define multiple pools in failover order
    ///     var bar = new Cloudflare.LoadBalancer("bar", new()
    ///     {
    ///         ZoneId = "d41d8cd98f00b204e9800998ecf8427e",
    ///         Name = "example-load-balancer.example.com",
    ///         FallbackPoolId = foo.Id,
    ///         DefaultPoolIds = new[]
    ///         {
    ///             foo.Id,
    ///         },
    ///         Description = "example load balancer using geo-balancing",
    ///         Proxied = true,
    ///         SteeringPolicy = "geo",
    ///         PopPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerPopPoolArgs
    ///             {
    ///                 Pop = "LAX",
    ///                 PoolIds = new[]
    ///                 {
    ///                     foo.Id,
    ///                 },
    ///             },
    ///         },
    ///         CountryPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerCountryPoolArgs
    ///             {
    ///                 Country = "US",
    ///                 PoolIds = new[]
    ///                 {
    ///                     foo.Id,
    ///                 },
    ///             },
    ///         },
    ///         RegionPools = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerRegionPoolArgs
    ///             {
    ///                 Region = "WNAM",
    ///                 PoolIds = new[]
    ///                 {
    ///                     foo.Id,
    ///                 },
    ///             },
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Cloudflare.Inputs.LoadBalancerRuleArgs
    ///             {
    ///                 Name = "example rule",
    ///                 Condition = "http.request.uri.path contains \"testing\"",
    ///                 FixedResponse = new Cloudflare.Inputs.LoadBalancerRuleFixedResponseArgs
    ///                 {
    ///                     MessageBody = "hello",
    ///                     StatusCode = 200,
    ///                     ContentType = "html",
    ///                     Location = "www.example.com",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/loadBalancer:LoadBalancer")]
    public partial class LoadBalancer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// See country_pools above.
        /// </summary>
        [Output("countryPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerCountryPool>> CountryPools { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
        /// </summary>
        [Output("defaultPoolIds")]
        public Output<ImmutableArray<string>> DefaultPoolIds { get; private set; } = null!;

        /// <summary>
        /// Free text description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true` (enabled).
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Output("fallbackPoolId")]
        public Output<string> FallbackPoolId { get; private set; } = null!;

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Human readable name for this rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// See pop_pools above.
        /// </summary>
        [Output("popPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerPopPool>> PopPools { get; private set; } = null!;

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
        /// </summary>
        [Output("proxied")]
        public Output<bool?> Proxied { get; private set; } = null!;

        /// <summary>
        /// See region_pools above.
        /// </summary>
        [Output("regionPools")]
        public Output<ImmutableArray<Outputs.LoadBalancerRegionPool>> RegionPools { get; private set; } = null!;

        /// <summary>
        /// A list of conditions and overrides for each load balancer operation. See the field documentation below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.LoadBalancerRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// See field above.
        /// </summary>
        [Output("sessionAffinity")]
        public Output<string?> SessionAffinity { get; private set; } = null!;

        /// <summary>
        /// See field above.
        /// </summary>
        [Output("sessionAffinityAttributes")]
        public Output<ImmutableDictionary<string, string>?> SessionAffinityAttributes { get; private set; } = null!;

        /// <summary>
        /// See field above.
        /// </summary>
        [Output("sessionAffinityTtl")]
        public Output<int?> SessionAffinityTtl { get; private set; } = null!;

        /// <summary>
        /// See field above.
        /// </summary>
        [Output("steeringPolicy")]
        public Output<string> SteeringPolicy { get; private set; } = null!;

        /// <summary>
        /// See field above.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The zone ID to add the load balancer to.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancer(string name, LoadBalancerArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, args ?? new LoadBalancerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancer(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/loadBalancer:LoadBalancer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancer Get(string name, Input<string> id, LoadBalancerState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancer(name, id, state, options);
        }
    }

    public sealed class LoadBalancerArgs : global::Pulumi.ResourceArgs
    {
        [Input("countryPools")]
        private InputList<Inputs.LoadBalancerCountryPoolArgs>? _countryPools;

        /// <summary>
        /// See country_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerCountryPoolArgs> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputList<Inputs.LoadBalancerCountryPoolArgs>());
            set => _countryPools = value;
        }

        [Input("defaultPoolIds", required: true)]
        private InputList<string>? _defaultPoolIds;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
        /// </summary>
        public InputList<string> DefaultPoolIds
        {
            get => _defaultPoolIds ?? (_defaultPoolIds = new InputList<string>());
            set => _defaultPoolIds = value;
        }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true` (enabled).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPoolId", required: true)]
        public Input<string> FallbackPoolId { get; set; } = null!;

        /// <summary>
        /// Human readable name for this rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("popPools")]
        private InputList<Inputs.LoadBalancerPopPoolArgs>? _popPools;

        /// <summary>
        /// See pop_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerPopPoolArgs> PopPools
        {
            get => _popPools ?? (_popPools = new InputList<Inputs.LoadBalancerPopPoolArgs>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        [Input("regionPools")]
        private InputList<Inputs.LoadBalancerRegionPoolArgs>? _regionPools;

        /// <summary>
        /// See region_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerRegionPoolArgs> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputList<Inputs.LoadBalancerRegionPoolArgs>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleArgs>? _rules;

        /// <summary>
        /// A list of conditions and overrides for each load balancer operation. See the field documentation below.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        [Input("sessionAffinityAttributes")]
        private InputMap<string>? _sessionAffinityAttributes;

        /// <summary>
        /// See field above.
        /// </summary>
        public InputMap<string> SessionAffinityAttributes
        {
            get => _sessionAffinityAttributes ?? (_sessionAffinityAttributes = new InputMap<string>());
            set => _sessionAffinityAttributes = value;
        }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<int>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The zone ID to add the load balancer to.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public LoadBalancerArgs()
        {
        }
        public static new LoadBalancerArgs Empty => new LoadBalancerArgs();
    }

    public sealed class LoadBalancerState : global::Pulumi.ResourceArgs
    {
        [Input("countryPools")]
        private InputList<Inputs.LoadBalancerCountryPoolGetArgs>? _countryPools;

        /// <summary>
        /// See country_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerCountryPoolGetArgs> CountryPools
        {
            get => _countryPools ?? (_countryPools = new InputList<Inputs.LoadBalancerCountryPoolGetArgs>());
            set => _countryPools = value;
        }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("defaultPoolIds")]
        private InputList<string>? _defaultPoolIds;

        /// <summary>
        /// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
        /// </summary>
        public InputList<string> DefaultPoolIds
        {
            get => _defaultPoolIds ?? (_defaultPoolIds = new InputList<string>());
            set => _defaultPoolIds = value;
        }

        /// <summary>
        /// Free text description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable the load balancer. Defaults to `true` (enabled).
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The pool ID to use when all other pools are detected as unhealthy.
        /// </summary>
        [Input("fallbackPoolId")]
        public Input<string>? FallbackPoolId { get; set; }

        /// <summary>
        /// The RFC3339 timestamp of when the load balancer was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// Human readable name for this rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("popPools")]
        private InputList<Inputs.LoadBalancerPopPoolGetArgs>? _popPools;

        /// <summary>
        /// See pop_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerPopPoolGetArgs> PopPools
        {
            get => _popPools ?? (_popPools = new InputList<Inputs.LoadBalancerPopPoolGetArgs>());
            set => _popPools = value;
        }

        /// <summary>
        /// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        [Input("regionPools")]
        private InputList<Inputs.LoadBalancerRegionPoolGetArgs>? _regionPools;

        /// <summary>
        /// See region_pools above.
        /// </summary>
        public InputList<Inputs.LoadBalancerRegionPoolGetArgs> RegionPools
        {
            get => _regionPools ?? (_regionPools = new InputList<Inputs.LoadBalancerRegionPoolGetArgs>());
            set => _regionPools = value;
        }

        [Input("rules")]
        private InputList<Inputs.LoadBalancerRuleGetArgs>? _rules;

        /// <summary>
        /// A list of conditions and overrides for each load balancer operation. See the field documentation below.
        /// </summary>
        public InputList<Inputs.LoadBalancerRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.LoadBalancerRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("sessionAffinity")]
        public Input<string>? SessionAffinity { get; set; }

        [Input("sessionAffinityAttributes")]
        private InputMap<string>? _sessionAffinityAttributes;

        /// <summary>
        /// See field above.
        /// </summary>
        public InputMap<string> SessionAffinityAttributes
        {
            get => _sessionAffinityAttributes ?? (_sessionAffinityAttributes = new InputMap<string>());
            set => _sessionAffinityAttributes = value;
        }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("sessionAffinityTtl")]
        public Input<int>? SessionAffinityTtl { get; set; }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("steeringPolicy")]
        public Input<string>? SteeringPolicy { get; set; }

        /// <summary>
        /// See field above.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The zone ID to add the load balancer to.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public LoadBalancerState()
        {
        }
        public static new LoadBalancerState Empty => new LoadBalancerState();
    }
}
