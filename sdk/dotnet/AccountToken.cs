// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/accountToken:AccountToken example '&lt;account_id&gt;/&lt;token_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/accountToken:AccountToken")]
    public partial class AccountToken : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("condition")]
        public Output<Outputs.AccountTokenCondition> Condition { get; private set; } = null!;

        /// <summary>
        /// The expiration time on or after which the JWT MUST NOT be accepted for processing.
        /// </summary>
        [Output("expiresOn")]
        public Output<string?> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// The time on which the token was created.
        /// </summary>
        [Output("issuedOn")]
        public Output<string> IssuedOn { get; private set; } = null!;

        /// <summary>
        /// Last time the token was used.
        /// </summary>
        [Output("lastUsedOn")]
        public Output<string> LastUsedOn { get; private set; } = null!;

        /// <summary>
        /// Last time the token was modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Token name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The time before which the token MUST NOT be accepted for processing.
        /// </summary>
        [Output("notBefore")]
        public Output<string?> NotBefore { get; private set; } = null!;

        /// <summary>
        /// List of access policies assigned to the token.
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.AccountTokenPolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// Status of the token.
        /// Available values: "active", "disabled", "expired".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The token value.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a AccountToken resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountToken(string name, AccountTokenArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accountToken:AccountToken", name, args ?? new AccountTokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountToken(string name, Input<string> id, AccountTokenState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accountToken:AccountToken", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountToken resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountToken Get(string name, Input<string> id, AccountTokenState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountToken(name, id, state, options);
        }
    }

    public sealed class AccountTokenArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("condition")]
        public Input<Inputs.AccountTokenConditionArgs>? Condition { get; set; }

        /// <summary>
        /// The expiration time on or after which the JWT MUST NOT be accepted for processing.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// Token name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The time before which the token MUST NOT be accepted for processing.
        /// </summary>
        [Input("notBefore")]
        public Input<string>? NotBefore { get; set; }

        [Input("policies", required: true)]
        private InputList<Inputs.AccountTokenPolicyArgs>? _policies;

        /// <summary>
        /// List of access policies assigned to the token.
        /// </summary>
        public InputList<Inputs.AccountTokenPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.AccountTokenPolicyArgs>());
            set => _policies = value;
        }

        public AccountTokenArgs()
        {
        }
        public static new AccountTokenArgs Empty => new AccountTokenArgs();
    }

    public sealed class AccountTokenState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier tag.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("condition")]
        public Input<Inputs.AccountTokenConditionGetArgs>? Condition { get; set; }

        /// <summary>
        /// The expiration time on or after which the JWT MUST NOT be accepted for processing.
        /// </summary>
        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The time on which the token was created.
        /// </summary>
        [Input("issuedOn")]
        public Input<string>? IssuedOn { get; set; }

        /// <summary>
        /// Last time the token was used.
        /// </summary>
        [Input("lastUsedOn")]
        public Input<string>? LastUsedOn { get; set; }

        /// <summary>
        /// Last time the token was modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// Token name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The time before which the token MUST NOT be accepted for processing.
        /// </summary>
        [Input("notBefore")]
        public Input<string>? NotBefore { get; set; }

        [Input("policies")]
        private InputList<Inputs.AccountTokenPolicyGetArgs>? _policies;

        /// <summary>
        /// List of access policies assigned to the token.
        /// </summary>
        public InputList<Inputs.AccountTokenPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.AccountTokenPolicyGetArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// Status of the token.
        /// Available values: "active", "disabled", "expired".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The token value.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public AccountTokenState()
        {
        }
        public static new AccountTokenState Empty => new AccountTokenState();
    }
}
