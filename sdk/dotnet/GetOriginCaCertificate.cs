// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetOriginCaCertificate
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOriginCaCertificate = Cloudflare.GetOriginCaCertificate.Invoke(new()
        ///     {
        ///         CertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetOriginCaCertificateResult> InvokeAsync(GetOriginCaCertificateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOriginCaCertificateResult>("cloudflare:index/getOriginCaCertificate:getOriginCaCertificate", args ?? new GetOriginCaCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOriginCaCertificate = Cloudflare.GetOriginCaCertificate.Invoke(new()
        ///     {
        ///         CertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOriginCaCertificateResult> Invoke(GetOriginCaCertificateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOriginCaCertificateResult>("cloudflare:index/getOriginCaCertificate:getOriginCaCertificate", args ?? new GetOriginCaCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleOriginCaCertificate = Cloudflare.GetOriginCaCertificate.Invoke(new()
        ///     {
        ///         CertificateId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetOriginCaCertificateResult> Invoke(GetOriginCaCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOriginCaCertificateResult>("cloudflare:index/getOriginCaCertificate:getOriginCaCertificate", args ?? new GetOriginCaCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOriginCaCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        [Input("filter")]
        public Inputs.GetOriginCaCertificateFilterArgs? Filter { get; set; }

        public GetOriginCaCertificateArgs()
        {
        }
        public static new GetOriginCaCertificateArgs Empty => new GetOriginCaCertificateArgs();
    }

    public sealed class GetOriginCaCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetOriginCaCertificateFilterInputArgs>? Filter { get; set; }

        public GetOriginCaCertificateInvokeArgs()
        {
        }
        public static new GetOriginCaCertificateInvokeArgs Empty => new GetOriginCaCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetOriginCaCertificateResult
    {
        /// <summary>
        /// The Origin CA certificate. Will be newline-encoded.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// The Certificate Signing Request (CSR). Must be newline-encoded.
        /// </summary>
        public readonly string Csr;
        /// <summary>
        /// When the certificate will expire.
        /// </summary>
        public readonly string ExpiresOn;
        public readonly Outputs.GetOriginCaCertificateFilterResult? Filter;
        /// <summary>
        /// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
        /// </summary>
        public readonly ImmutableArray<string> Hostnames;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
        /// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
        /// </summary>
        public readonly string RequestType;
        /// <summary>
        /// The number of days for which the certificate should be valid.
        /// Available values: 7, 30, 90, 365, 730, 1095, 5475.
        /// </summary>
        public readonly double RequestedValidity;

        [OutputConstructor]
        private GetOriginCaCertificateResult(
            string certificate,

            string? certificateId,

            string csr,

            string expiresOn,

            Outputs.GetOriginCaCertificateFilterResult? filter,

            ImmutableArray<string> hostnames,

            string id,

            string requestType,

            double requestedValidity)
        {
            Certificate = certificate;
            CertificateId = certificateId;
            Csr = csr;
            ExpiresOn = expiresOn;
            Filter = filter;
            Hostnames = hostnames;
            Id = id;
            RequestType = requestType;
            RequestedValidity = requestedValidity;
        }
    }
}
