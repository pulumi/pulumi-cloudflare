// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetRateLimit
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRateLimit = Cloudflare.GetRateLimit.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         RateLimitId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRateLimitResult> InvokeAsync(GetRateLimitArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRateLimitResult>("cloudflare:index/getRateLimit:getRateLimit", args ?? new GetRateLimitArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRateLimit = Cloudflare.GetRateLimit.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         RateLimitId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRateLimitResult> Invoke(GetRateLimitInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRateLimitResult>("cloudflare:index/getRateLimit:getRateLimit", args ?? new GetRateLimitInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRateLimit = Cloudflare.GetRateLimit.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         RateLimitId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRateLimitResult> Invoke(GetRateLimitInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRateLimitResult>("cloudflare:index/getRateLimit:getRateLimit", args ?? new GetRateLimitInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRateLimitArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Defines the unique identifier of the rate limit.
        /// </summary>
        [Input("rateLimitId")]
        public string? RateLimitId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetRateLimitArgs()
        {
        }
        public static new GetRateLimitArgs Empty => new GetRateLimitArgs();
    }

    public sealed class GetRateLimitInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Defines the unique identifier of the rate limit.
        /// </summary>
        [Input("rateLimitId")]
        public Input<string>? RateLimitId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetRateLimitInvokeArgs()
        {
        }
        public static new GetRateLimitInvokeArgs Empty => new GetRateLimitInvokeArgs();
    }


    [OutputType]
    public sealed class GetRateLimitResult
    {
        /// <summary>
        /// The action to perform when the threshold of matched traffic within the configured period is exceeded.
        /// </summary>
        public readonly Outputs.GetRateLimitActionResult Action;
        /// <summary>
        /// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRateLimitBypassResult> Bypasses;
        /// <summary>
        /// An informative summary of the rule. This value is sanitized and any tags will be removed.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// When true, indicates that the rate limit is currently disabled.
        /// </summary>
        public readonly bool Disabled;
        /// <summary>
        /// Defines the unique identifier of the rate limit.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Determines which traffic the rate limit counts towards the threshold.
        /// </summary>
        public readonly Outputs.GetRateLimitMatchResult Match;
        /// <summary>
        /// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
        /// </summary>
        public readonly double Period;
        /// <summary>
        /// Defines the unique identifier of the rate limit.
        /// </summary>
        public readonly string? RateLimitId;
        /// <summary>
        /// The threshold that will trigger the configured mitigation action. Configure this value along with the `Period` property to establish a threshold per period.
        /// </summary>
        public readonly double Threshold;
        /// <summary>
        /// Defines an identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetRateLimitResult(
            Outputs.GetRateLimitActionResult action,

            ImmutableArray<Outputs.GetRateLimitBypassResult> bypasses,

            string description,

            bool disabled,

            string id,

            Outputs.GetRateLimitMatchResult match,

            double period,

            string? rateLimitId,

            double threshold,

            string zoneId)
        {
            Action = action;
            Bypasses = bypasses;
            Description = description;
            Disabled = disabled;
            Id = id;
            Match = match;
            Period = period;
            RateLimitId = rateLimitId;
            Threshold = threshold;
            ZoneId = zoneId;
        }
    }
}
