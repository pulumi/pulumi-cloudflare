// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetWorkerVersions
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersions = Cloudflare.GetWorkerVersions.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "worker_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkerVersionsResult> InvokeAsync(GetWorkerVersionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkerVersionsResult>("cloudflare:index/getWorkerVersions:getWorkerVersions", args ?? new GetWorkerVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersions = Cloudflare.GetWorkerVersions.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "worker_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerVersionsResult> Invoke(GetWorkerVersionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerVersionsResult>("cloudflare:index/getWorkerVersions:getWorkerVersions", args ?? new GetWorkerVersionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleWorkerVersions = Cloudflare.GetWorkerVersions.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WorkerId = "worker_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkerVersionsResult> Invoke(GetWorkerVersionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkerVersionsResult>("cloudflare:index/getWorkerVersions:getWorkerVersions", args ?? new GetWorkerVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkerVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        [Input("workerId", required: true)]
        public string WorkerId { get; set; } = null!;

        public GetWorkerVersionsArgs()
        {
        }
        public static new GetWorkerVersionsArgs Empty => new GetWorkerVersionsArgs();
    }

    public sealed class GetWorkerVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        [Input("workerId", required: true)]
        public Input<string> WorkerId { get; set; } = null!;

        public GetWorkerVersionsInvokeArgs()
        {
        }
        public static new GetWorkerVersionsInvokeArgs Empty => new GetWorkerVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkerVersionsResult
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkerVersionsResultResult> Results;
        /// <summary>
        /// Identifier for the Worker, which can be ID or name.
        /// </summary>
        public readonly string WorkerId;

        [OutputConstructor]
        private GetWorkerVersionsResult(
            string accountId,

            string id,

            int? maxItems,

            ImmutableArray<Outputs.GetWorkerVersionsResultResult> results,

            string workerId)
        {
            AccountId = accountId;
            Id = id;
            MaxItems = maxItems;
            Results = results;
            WorkerId = workerId;
        }
    }
}
