// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicTransitConnector = new Cloudflare.MagicTransitConnector("example_magic_transit_connector", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Device = new Cloudflare.Inputs.MagicTransitConnectorDeviceArgs
    ///         {
    ///             Id = "id",
    ///             Serial_number = "serial_number",
    ///         },
    ///         Activated = true,
    ///         InterruptWindowDurationHours = 0,
    ///         InterruptWindowHourOfDay = 0,
    ///         Notes = "notes",
    ///         Timezone = "timezone",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicTransitConnector:MagicTransitConnector example '&lt;account_id&gt;/&lt;connector_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicTransitConnector:MagicTransitConnector")]
    public partial class MagicTransitConnector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Account identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("activated")]
        public Output<bool> Activated { get; private set; } = null!;

        [Output("device")]
        public Output<Outputs.MagicTransitConnectorDevice> Device { get; private set; } = null!;

        [Output("interruptWindowDurationHours")]
        public Output<double> InterruptWindowDurationHours { get; private set; } = null!;

        [Output("interruptWindowHourOfDay")]
        public Output<double> InterruptWindowHourOfDay { get; private set; } = null!;

        [Output("notes")]
        public Output<string> Notes { get; private set; } = null!;

        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a MagicTransitConnector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicTransitConnector(string name, MagicTransitConnectorArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitConnector:MagicTransitConnector", name, args ?? new MagicTransitConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicTransitConnector(string name, Input<string> id, MagicTransitConnectorState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitConnector:MagicTransitConnector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicTransitConnector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicTransitConnector Get(string name, Input<string> id, MagicTransitConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicTransitConnector(name, id, state, options);
        }
    }

    public sealed class MagicTransitConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("device", required: true)]
        public Input<Inputs.MagicTransitConnectorDeviceArgs> Device { get; set; } = null!;

        [Input("interruptWindowDurationHours")]
        public Input<double>? InterruptWindowDurationHours { get; set; }

        [Input("interruptWindowHourOfDay")]
        public Input<double>? InterruptWindowHourOfDay { get; set; }

        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public MagicTransitConnectorArgs()
        {
        }
        public static new MagicTransitConnectorArgs Empty => new MagicTransitConnectorArgs();
    }

    public sealed class MagicTransitConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Account identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("device")]
        public Input<Inputs.MagicTransitConnectorDeviceGetArgs>? Device { get; set; }

        [Input("interruptWindowDurationHours")]
        public Input<double>? InterruptWindowDurationHours { get; set; }

        [Input("interruptWindowHourOfDay")]
        public Input<double>? InterruptWindowHourOfDay { get; set; }

        [Input("notes")]
        public Input<string>? Notes { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public MagicTransitConnectorState()
        {
        }
        public static new MagicTransitConnectorState Empty => new MagicTransitConnectorState();
    }
}
