// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zoneDnsSettings:ZoneDnsSettings")]
    public partial class ZoneDnsSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
        /// </summary>
        [Output("flattenAllCnames")]
        public Output<bool?> FlattenAllCnames { get; private set; } = null!;

        /// <summary>
        /// Whether to enable Foundation DNS Advanced Nameservers on the zone.
        /// </summary>
        [Output("foundationDns")]
        public Output<bool?> FoundationDns { get; private set; } = null!;

        /// <summary>
        /// Settings for this internal zone.
        /// </summary>
        [Output("internalDns")]
        public Output<Outputs.ZoneDnsSettingsInternalDns?> InternalDns { get; private set; } = null!;

        /// <summary>
        /// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
        /// </summary>
        [Output("multiProvider")]
        public Output<bool?> MultiProvider { get; private set; } = null!;

        /// <summary>
        /// Settings determining the nameservers through which the zone should be available.
        /// </summary>
        [Output("nameservers")]
        public Output<Outputs.ZoneDnsSettingsNameservers?> Nameservers { get; private set; } = null!;

        /// <summary>
        /// The time to live (TTL) of the zone's nameserver (NS) records.
        /// </summary>
        [Output("nsTtl")]
        public Output<double?> NsTtl { get; private set; } = null!;

        /// <summary>
        /// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
        /// </summary>
        [Output("secondaryOverrides")]
        public Output<bool?> SecondaryOverrides { get; private set; } = null!;

        /// <summary>
        /// Components of the zone's SOA record.
        /// </summary>
        [Output("soa")]
        public Output<Outputs.ZoneDnsSettingsSoa?> Soa { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// Whether the zone mode is a regular or CDN/DNS only zone.
        /// Available values: "standard", "cdn*only", "dns*only".
        /// </summary>
        [Output("zoneMode")]
        public Output<string?> ZoneMode { get; private set; } = null!;


        /// <summary>
        /// Create a ZoneDnsSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZoneDnsSettings(string name, ZoneDnsSettingsArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneDnsSettings:ZoneDnsSettings", name, args ?? new ZoneDnsSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZoneDnsSettings(string name, Input<string> id, ZoneDnsSettingsState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zoneDnsSettings:ZoneDnsSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZoneDnsSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZoneDnsSettings Get(string name, Input<string> id, ZoneDnsSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new ZoneDnsSettings(name, id, state, options);
        }
    }

    public sealed class ZoneDnsSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
        /// </summary>
        [Input("flattenAllCnames")]
        public Input<bool>? FlattenAllCnames { get; set; }

        /// <summary>
        /// Whether to enable Foundation DNS Advanced Nameservers on the zone.
        /// </summary>
        [Input("foundationDns")]
        public Input<bool>? FoundationDns { get; set; }

        /// <summary>
        /// Settings for this internal zone.
        /// </summary>
        [Input("internalDns")]
        public Input<Inputs.ZoneDnsSettingsInternalDnsArgs>? InternalDns { get; set; }

        /// <summary>
        /// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
        /// </summary>
        [Input("multiProvider")]
        public Input<bool>? MultiProvider { get; set; }

        /// <summary>
        /// Settings determining the nameservers through which the zone should be available.
        /// </summary>
        [Input("nameservers")]
        public Input<Inputs.ZoneDnsSettingsNameserversArgs>? Nameservers { get; set; }

        /// <summary>
        /// The time to live (TTL) of the zone's nameserver (NS) records.
        /// </summary>
        [Input("nsTtl")]
        public Input<double>? NsTtl { get; set; }

        /// <summary>
        /// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
        /// </summary>
        [Input("secondaryOverrides")]
        public Input<bool>? SecondaryOverrides { get; set; }

        /// <summary>
        /// Components of the zone's SOA record.
        /// </summary>
        [Input("soa")]
        public Input<Inputs.ZoneDnsSettingsSoaArgs>? Soa { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        /// <summary>
        /// Whether the zone mode is a regular or CDN/DNS only zone.
        /// Available values: "standard", "cdn*only", "dns*only".
        /// </summary>
        [Input("zoneMode")]
        public Input<string>? ZoneMode { get; set; }

        public ZoneDnsSettingsArgs()
        {
        }
        public static new ZoneDnsSettingsArgs Empty => new ZoneDnsSettingsArgs();
    }

    public sealed class ZoneDnsSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
        /// </summary>
        [Input("flattenAllCnames")]
        public Input<bool>? FlattenAllCnames { get; set; }

        /// <summary>
        /// Whether to enable Foundation DNS Advanced Nameservers on the zone.
        /// </summary>
        [Input("foundationDns")]
        public Input<bool>? FoundationDns { get; set; }

        /// <summary>
        /// Settings for this internal zone.
        /// </summary>
        [Input("internalDns")]
        public Input<Inputs.ZoneDnsSettingsInternalDnsGetArgs>? InternalDns { get; set; }

        /// <summary>
        /// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
        /// </summary>
        [Input("multiProvider")]
        public Input<bool>? MultiProvider { get; set; }

        /// <summary>
        /// Settings determining the nameservers through which the zone should be available.
        /// </summary>
        [Input("nameservers")]
        public Input<Inputs.ZoneDnsSettingsNameserversGetArgs>? Nameservers { get; set; }

        /// <summary>
        /// The time to live (TTL) of the zone's nameserver (NS) records.
        /// </summary>
        [Input("nsTtl")]
        public Input<double>? NsTtl { get; set; }

        /// <summary>
        /// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
        /// </summary>
        [Input("secondaryOverrides")]
        public Input<bool>? SecondaryOverrides { get; set; }

        /// <summary>
        /// Components of the zone's SOA record.
        /// </summary>
        [Input("soa")]
        public Input<Inputs.ZoneDnsSettingsSoaGetArgs>? Soa { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// Whether the zone mode is a regular or CDN/DNS only zone.
        /// Available values: "standard", "cdn*only", "dns*only".
        /// </summary>
        [Input("zoneMode")]
        public Input<string>? ZoneMode { get; set; }

        public ZoneDnsSettingsState()
        {
        }
        public static new ZoneDnsSettingsState Empty => new ZoneDnsSettingsState();
    }
}
