// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleSchemaValidationSettings = new Cloudflare.SchemaValidationSettings("example_schema_validation_settings", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         ValidationDefaultMitigationAction = "block",
    ///         ValidationOverrideMitigationAction = "none",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/schemaValidationSettings:SchemaValidationSettings")]
    public partial class SchemaValidationSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default mitigation action used
        /// Mitigation actions are as follows:
        /// 
        ///   - `"log"` - log request when request does not conform to schema
        ///   - `"block"` - deny access to the site when request does not conform to schema
        ///   - `"none"` - skip running schema validation
        /// Available values: "none", "log", "block".
        /// </summary>
        [Output("validationDefaultMitigationAction")]
        public Output<string> ValidationDefaultMitigationAction { get; private set; } = null!;

        /// <summary>
        /// When set, this overrides both zone level and operation level mitigation actions.
        /// 
        ///   - `"none"` - skip running schema validation entirely for the request
        ///   - `null` - clears any existing override
        /// Available values: "none".
        /// </summary>
        [Output("validationOverrideMitigationAction")]
        public Output<string?> ValidationOverrideMitigationAction { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaValidationSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaValidationSettings(string name, SchemaValidationSettingsArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/schemaValidationSettings:SchemaValidationSettings", name, args ?? new SchemaValidationSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaValidationSettings(string name, Input<string> id, SchemaValidationSettingsState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/schemaValidationSettings:SchemaValidationSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaValidationSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaValidationSettings Get(string name, Input<string> id, SchemaValidationSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaValidationSettings(name, id, state, options);
        }
    }

    public sealed class SchemaValidationSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default mitigation action used
        /// Mitigation actions are as follows:
        /// 
        ///   - `"log"` - log request when request does not conform to schema
        ///   - `"block"` - deny access to the site when request does not conform to schema
        ///   - `"none"` - skip running schema validation
        /// Available values: "none", "log", "block".
        /// </summary>
        [Input("validationDefaultMitigationAction", required: true)]
        public Input<string> ValidationDefaultMitigationAction { get; set; } = null!;

        /// <summary>
        /// When set, this overrides both zone level and operation level mitigation actions.
        /// 
        ///   - `"none"` - skip running schema validation entirely for the request
        ///   - `null` - clears any existing override
        /// Available values: "none".
        /// </summary>
        [Input("validationOverrideMitigationAction")]
        public Input<string>? ValidationOverrideMitigationAction { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public SchemaValidationSettingsArgs()
        {
        }
        public static new SchemaValidationSettingsArgs Empty => new SchemaValidationSettingsArgs();
    }

    public sealed class SchemaValidationSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default mitigation action used
        /// Mitigation actions are as follows:
        /// 
        ///   - `"log"` - log request when request does not conform to schema
        ///   - `"block"` - deny access to the site when request does not conform to schema
        ///   - `"none"` - skip running schema validation
        /// Available values: "none", "log", "block".
        /// </summary>
        [Input("validationDefaultMitigationAction")]
        public Input<string>? ValidationDefaultMitigationAction { get; set; }

        /// <summary>
        /// When set, this overrides both zone level and operation level mitigation actions.
        /// 
        ///   - `"none"` - skip running schema validation entirely for the request
        ///   - `null` - clears any existing override
        /// Available values: "none".
        /// </summary>
        [Input("validationOverrideMitigationAction")]
        public Input<string>? ValidationOverrideMitigationAction { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public SchemaValidationSettingsState()
        {
        }
        public static new SchemaValidationSettingsState Empty => new SchemaValidationSettingsState();
    }
}
