// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustAccessMtlsCertificate = new Cloudflare.ZeroTrustAccessMtlsCertificate("example_zero_trust_access_mtls_certificate", new()
    ///     {
    ///         Certificate = @"  -----BEGIN CERTIFICATE-----
    ///   MIIGAjCCA+qgAwIBAgIJAI7kymlF7CWT...N4RI7KKB7nikiuUf8vhULKy5IX10
    ///   DrUtmu/B
    ///   -----END CERTIFICATE-----
    /// ",
    ///         Name = "Allow devs",
    ///         ZoneId = "zone_id",
    ///         AssociatedHostnames = new[]
    ///         {
    ///             "admin.example.com",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate example '&lt;{accounts|zones}/{account_id|zone_id}&gt;/&lt;certificate_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate")]
    public partial class ZeroTrustAccessMtlsCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The hostnames of the applications that will use this certificate.
        /// </summary>
        [Output("associatedHostnames")]
        public Output<ImmutableArray<string>> AssociatedHostnames { get; private set; } = null!;

        /// <summary>
        /// The certificate content.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("expiresOn")]
        public Output<string> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// The MD5 fingerprint of the certificate.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string?> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustAccessMtlsCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustAccessMtlsCertificate(string name, ZeroTrustAccessMtlsCertificateArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate", name, args ?? new ZeroTrustAccessMtlsCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustAccessMtlsCertificate(string name, Input<string> id, ZeroTrustAccessMtlsCertificateState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustAccessMtlsCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustAccessMtlsCertificate Get(string name, Input<string> id, ZeroTrustAccessMtlsCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustAccessMtlsCertificate(name, id, state, options);
        }
    }

    public sealed class ZeroTrustAccessMtlsCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("associatedHostnames")]
        private InputList<string>? _associatedHostnames;

        /// <summary>
        /// The hostnames of the applications that will use this certificate.
        /// </summary>
        public InputList<string> AssociatedHostnames
        {
            get => _associatedHostnames ?? (_associatedHostnames = new InputList<string>());
            set => _associatedHostnames = value;
        }

        /// <summary>
        /// The certificate content.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustAccessMtlsCertificateArgs()
        {
        }
        public static new ZeroTrustAccessMtlsCertificateArgs Empty => new ZeroTrustAccessMtlsCertificateArgs();
    }

    public sealed class ZeroTrustAccessMtlsCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("associatedHostnames")]
        private InputList<string>? _associatedHostnames;

        /// <summary>
        /// The hostnames of the applications that will use this certificate.
        /// </summary>
        public InputList<string> AssociatedHostnames
        {
            get => _associatedHostnames ?? (_associatedHostnames = new InputList<string>());
            set => _associatedHostnames = value;
        }

        /// <summary>
        /// The certificate content.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// The MD5 fingerprint of the certificate.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// The name of the certificate.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ZeroTrustAccessMtlsCertificateState()
        {
        }
        public static new ZeroTrustAccessMtlsCertificateState Empty => new ZeroTrustAccessMtlsCertificateState();
    }
}
