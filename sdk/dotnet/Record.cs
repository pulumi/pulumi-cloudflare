// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/record:Record example '&lt;zone_id&gt;/&lt;dns_record_id&gt;'
    /// ```
    /// </summary>
    [Obsolete(@"cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord")]
    [CloudflareResourceType("cloudflare:index/record:Record")]
    public partial class Record : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Comments or notes about the DNS record. This field has no effect on DNS responses.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// When the record comment was last modified. Omitted if there is no comment.
        /// </summary>
        [Output("commentModifiedOn")]
        public Output<string> CommentModifiedOn { get; private set; } = null!;

        /// <summary>
        /// A valid IPv4 address.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// When the record was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Components of a CAA record.
        /// </summary>
        [Output("data")]
        public Output<Outputs.RecordData> Data { get; private set; } = null!;

        /// <summary>
        /// Extra Cloudflare-specific information about the record.
        /// </summary>
        [Output("meta")]
        public Output<string> Meta { get; private set; } = null!;

        /// <summary>
        /// When the record was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// DNS record name (or @ for the zone apex) in Punycode.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
        /// </summary>
        [Output("priority")]
        public Output<double?> Priority { get; private set; } = null!;

        /// <summary>
        /// Whether the record can be proxied by Cloudflare or not.
        /// </summary>
        [Output("proxiable")]
        public Output<bool> Proxiable { get; private set; } = null!;

        /// <summary>
        /// Whether the record is receiving the performance and security benefits of Cloudflare.
        /// </summary>
        [Output("proxied")]
        public Output<bool> Proxied { get; private set; } = null!;

        /// <summary>
        /// Settings for the DNS record.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.RecordSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// Custom tags for the DNS record. This field has no effect on DNS responses.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// When the record tags were last modified. Omitted if there are no tags.
        /// </summary>
        [Output("tagsModifiedOn")]
        public Output<string> TagsModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
        /// </summary>
        [Output("ttl")]
        public Output<double> Ttl { get; private set; } = null!;

        /// <summary>
        /// Record type.
        /// Available values: "A".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Record resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Record(string name, RecordArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/record:Record", name, args ?? new RecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Record(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/record:Record", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/record:Record" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Record resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Record Get(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
        {
            return new Record(name, id, state, options);
        }
    }

    public sealed class RecordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comments or notes about the DNS record. This field has no effect on DNS responses.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// A valid IPv4 address.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Components of a CAA record.
        /// </summary>
        [Input("data")]
        public Input<Inputs.RecordDataArgs>? Data { get; set; }

        /// <summary>
        /// DNS record name (or @ for the zone apex) in Punycode.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// Whether the record is receiving the performance and security benefits of Cloudflare.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        /// <summary>
        /// Settings for the DNS record.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.RecordSettingsArgs>? Settings { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Custom tags for the DNS record. This field has no effect on DNS responses.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
        /// </summary>
        [Input("ttl", required: true)]
        public Input<double> Ttl { get; set; } = null!;

        /// <summary>
        /// Record type.
        /// Available values: "A".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RecordArgs()
        {
        }
        public static new RecordArgs Empty => new RecordArgs();
    }

    public sealed class RecordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Comments or notes about the DNS record. This field has no effect on DNS responses.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// When the record comment was last modified. Omitted if there is no comment.
        /// </summary>
        [Input("commentModifiedOn")]
        public Input<string>? CommentModifiedOn { get; set; }

        /// <summary>
        /// A valid IPv4 address.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// When the record was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Components of a CAA record.
        /// </summary>
        [Input("data")]
        public Input<Inputs.RecordDataGetArgs>? Data { get; set; }

        /// <summary>
        /// Extra Cloudflare-specific information about the record.
        /// </summary>
        [Input("meta")]
        public Input<string>? Meta { get; set; }

        /// <summary>
        /// When the record was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// DNS record name (or @ for the zone apex) in Punycode.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// Whether the record can be proxied by Cloudflare or not.
        /// </summary>
        [Input("proxiable")]
        public Input<bool>? Proxiable { get; set; }

        /// <summary>
        /// Whether the record is receiving the performance and security benefits of Cloudflare.
        /// </summary>
        [Input("proxied")]
        public Input<bool>? Proxied { get; set; }

        /// <summary>
        /// Settings for the DNS record.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.RecordSettingsGetArgs>? Settings { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Custom tags for the DNS record. This field has no effect on DNS responses.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// When the record tags were last modified. Omitted if there are no tags.
        /// </summary>
        [Input("tagsModifiedOn")]
        public Input<string>? TagsModifiedOn { get; set; }

        /// <summary>
        /// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
        /// </summary>
        [Input("ttl")]
        public Input<double>? Ttl { get; set; }

        /// <summary>
        /// Record type.
        /// Available values: "A".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RecordState()
        {
        }
        public static new RecordState Empty => new RecordState();
    }
}
