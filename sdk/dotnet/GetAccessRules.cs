// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetAccessRules
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRules = Cloudflare.GetAccessRules.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///         Configuration = new Cloudflare.Inputs.GetAccessRulesConfigurationInputArgs
        ///         {
        ///             Target = "ip",
        ///             Value = "198.51.100.4",
        ///         },
        ///         Direction = "asc",
        ///         Mode = "block",
        ///         Notes = "my note",
        ///         Order = "configuration.target",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAccessRulesResult> InvokeAsync(GetAccessRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAccessRulesResult>("cloudflare:index/getAccessRules:getAccessRules", args ?? new GetAccessRulesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRules = Cloudflare.GetAccessRules.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///         Configuration = new Cloudflare.Inputs.GetAccessRulesConfigurationInputArgs
        ///         {
        ///             Target = "ip",
        ///             Value = "198.51.100.4",
        ///         },
        ///         Direction = "asc",
        ///         Mode = "block",
        ///         Notes = "my note",
        ///         Order = "configuration.target",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessRulesResult> Invoke(GetAccessRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessRulesResult>("cloudflare:index/getAccessRules:getAccessRules", args ?? new GetAccessRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAccessRules = Cloudflare.GetAccessRules.Invoke(new()
        ///     {
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///         Configuration = new Cloudflare.Inputs.GetAccessRulesConfigurationInputArgs
        ///         {
        ///             Target = "ip",
        ///             Value = "198.51.100.4",
        ///         },
        ///         Direction = "asc",
        ///         Mode = "block",
        ///         Notes = "my note",
        ///         Order = "configuration.target",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAccessRulesResult> Invoke(GetAccessRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAccessRulesResult>("cloudflare:index/getAccessRules:getAccessRules", args ?? new GetAccessRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAccessRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        [Input("configuration")]
        public Inputs.GetAccessRulesConfigurationArgs? Configuration { get; set; }

        /// <summary>
        /// The direction used to sort returned rules.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
        /// Available values: "any", "all".
        /// </summary>
        [Input("match")]
        public string? Match { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode")]
        public string? Mode { get; set; }

        /// <summary>
        /// The string to search for in the notes of existing IP Access rules.
        /// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
        /// </summary>
        [Input("notes")]
        public string? Notes { get; set; }

        /// <summary>
        /// The field used to sort returned rules.
        /// Available values: "configuration.target", "configuration.value", "mode".
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetAccessRulesArgs()
        {
        }
        public static new GetAccessRulesArgs Empty => new GetAccessRulesArgs();
    }

    public sealed class GetAccessRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("configuration")]
        public Input<Inputs.GetAccessRulesConfigurationInputArgs>? Configuration { get; set; }

        /// <summary>
        /// The direction used to sort returned rules.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
        /// Available values: "any", "all".
        /// </summary>
        [Input("match")]
        public Input<string>? Match { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The string to search for in the notes of existing IP Access rules.
        /// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
        /// </summary>
        [Input("notes")]
        public Input<string>? Notes { get; set; }

        /// <summary>
        /// The field used to sort returned rules.
        /// Available values: "configuration.target", "configuration.value", "mode".
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetAccessRulesInvokeArgs()
        {
        }
        public static new GetAccessRulesInvokeArgs Empty => new GetAccessRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAccessRulesResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        public readonly Outputs.GetAccessRulesConfigurationResult? Configuration;
        /// <summary>
        /// The direction used to sort returned rules.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
        /// Available values: "any", "all".
        /// </summary>
        public readonly string Match;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        public readonly string? Mode;
        /// <summary>
        /// The string to search for in the notes of existing IP Access rules.
        /// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
        /// </summary>
        public readonly string? Notes;
        /// <summary>
        /// The field used to sort returned rules.
        /// Available values: "configuration.target", "configuration.value", "mode".
        /// </summary>
        public readonly string? Order;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAccessRulesResultResult> Results;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetAccessRulesResult(
            string? accountId,

            Outputs.GetAccessRulesConfigurationResult? configuration,

            string? direction,

            string id,

            string match,

            int? maxItems,

            string? mode,

            string? notes,

            string? order,

            ImmutableArray<Outputs.GetAccessRulesResultResult> results,

            string? zoneId)
        {
            AccountId = accountId;
            Configuration = configuration;
            Direction = direction;
            Id = id;
            Match = match;
            MaxItems = maxItems;
            Mode = mode;
            Notes = notes;
            Order = order;
            Results = results;
            ZoneId = zoneId;
        }
    }
}
