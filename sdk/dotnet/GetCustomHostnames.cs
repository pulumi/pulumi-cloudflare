// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetCustomHostnames
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostnames = Cloudflare.GetCustomHostnames.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "0d89c70d-ad9f-4843-b99f-6cc0252067e9",
        ///         Direction = "asc",
        ///         Hostname = "app.example.com",
        ///         Ssl = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCustomHostnamesResult> InvokeAsync(GetCustomHostnamesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomHostnamesResult>("cloudflare:index/getCustomHostnames:getCustomHostnames", args ?? new GetCustomHostnamesArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostnames = Cloudflare.GetCustomHostnames.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "0d89c70d-ad9f-4843-b99f-6cc0252067e9",
        ///         Direction = "asc",
        ///         Hostname = "app.example.com",
        ///         Ssl = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCustomHostnamesResult> Invoke(GetCustomHostnamesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomHostnamesResult>("cloudflare:index/getCustomHostnames:getCustomHostnames", args ?? new GetCustomHostnamesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleCustomHostnames = Cloudflare.GetCustomHostnames.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Id = "0d89c70d-ad9f-4843-b99f-6cc0252067e9",
        ///         Direction = "asc",
        ///         Hostname = "app.example.com",
        ///         Ssl = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCustomHostnamesResult> Invoke(GetCustomHostnamesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomHostnamesResult>("cloudflare:index/getCustomHostnames:getCustomHostnames", args ?? new GetCustomHostnamesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomHostnamesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Direction to order hostnames.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
        /// </summary>
        [Input("hostname")]
        public string? Hostname { get; set; }

        /// <summary>
        /// Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the 'hostname' parameter.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// Field to order hostnames by.
        /// Available values: "ssl", "ssl_status".
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// Whether to filter hostnames based on if they have SSL enabled.
        /// Available values: 0, 1.
        /// </summary>
        [Input("ssl")]
        public double? Ssl { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetCustomHostnamesArgs()
        {
        }
        public static new GetCustomHostnamesArgs Empty => new GetCustomHostnamesArgs();
    }

    public sealed class GetCustomHostnamesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Direction to order hostnames.
        /// Available values: "asc", "desc".
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the 'hostname' parameter.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// Field to order hostnames by.
        /// Available values: "ssl", "ssl_status".
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// Whether to filter hostnames based on if they have SSL enabled.
        /// Available values: 0, 1.
        /// </summary>
        [Input("ssl")]
        public Input<double>? Ssl { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetCustomHostnamesInvokeArgs()
        {
        }
        public static new GetCustomHostnamesInvokeArgs Empty => new GetCustomHostnamesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomHostnamesResult
    {
        /// <summary>
        /// Direction to order hostnames.
        /// Available values: "asc", "desc".
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
        /// </summary>
        public readonly string? Hostname;
        /// <summary>
        /// Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the 'hostname' parameter.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// Field to order hostnames by.
        /// Available values: "ssl", "ssl_status".
        /// </summary>
        public readonly string Order;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCustomHostnamesResultResult> Results;
        /// <summary>
        /// Whether to filter hostnames based on if they have SSL enabled.
        /// Available values: 0, 1.
        /// </summary>
        public readonly double? Ssl;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetCustomHostnamesResult(
            string? direction,

            string? hostname,

            string? id,

            int? maxItems,

            string order,

            ImmutableArray<Outputs.GetCustomHostnamesResultResult> results,

            double? ssl,

            string zoneId)
        {
            Direction = direction;
            Hostname = hostname;
            Id = id;
            MaxItems = maxItems;
            Order = order;
            Results = results;
            Ssl = ssl;
            ZoneId = zoneId;
        }
    }
}
