// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleZeroTrustGatewayCertificate = new Cloudflare.ZeroTrustGatewayCertificate("example_zero_trust_gateway_certificate", new()
    ///     {
    ///         AccountId = "699d98642c564d2e855e9661899b7252",
    ///         ValidityPeriodDays = 1826,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate example '&lt;account_id&gt;/&lt;certificate_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate")]
    public partial class ZeroTrustGatewayCertificate : global::Pulumi.CustomResource
    {
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// Indicate the read-only deployment status of the certificate on Cloudflare's edge. Gateway TLS interception can use certificates in the 'available' (previously called 'active') state.
        /// Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        /// </summary>
        [Output("bindingStatus")]
        public Output<string> BindingStatus { get; private set; } = null!;

        /// <summary>
        /// Provide the CA certificate (read-only).
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("expiresOn")]
        public Output<string> ExpiresOn { get; private set; } = null!;

        /// <summary>
        /// Provide the SHA256 fingerprint of the certificate (read-only).
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `Certificate` (read-only).
        /// </summary>
        [Output("inUse")]
        public Output<bool> InUse { get; private set; } = null!;

        /// <summary>
        /// Indicate the organization that issued the certificate (read-only).
        /// </summary>
        [Output("issuerOrg")]
        public Output<string> IssuerOrg { get; private set; } = null!;

        /// <summary>
        /// Provide the entire issuer field of the certificate (read-only).
        /// </summary>
        [Output("issuerRaw")]
        public Output<string> IssuerRaw { get; private set; } = null!;

        /// <summary>
        /// Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
        /// Available values: "custom", "GatewayManaged".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        [Output("uploadedOn")]
        public Output<string> UploadedOn { get; private set; } = null!;

        /// <summary>
        /// Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
        /// </summary>
        [Output("validityPeriodDays")]
        public Output<int?> ValidityPeriodDays { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustGatewayCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustGatewayCertificate(string name, ZeroTrustGatewayCertificateArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate", name, args ?? new ZeroTrustGatewayCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustGatewayCertificate(string name, Input<string> id, ZeroTrustGatewayCertificateState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustGatewayCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustGatewayCertificate Get(string name, Input<string> id, ZeroTrustGatewayCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustGatewayCertificate(name, id, state, options);
        }
    }

    public sealed class ZeroTrustGatewayCertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
        /// </summary>
        [Input("validityPeriodDays")]
        public Input<int>? ValidityPeriodDays { get; set; }

        public ZeroTrustGatewayCertificateArgs()
        {
        }
        public static new ZeroTrustGatewayCertificateArgs Empty => new ZeroTrustGatewayCertificateArgs();
    }

    public sealed class ZeroTrustGatewayCertificateState : global::Pulumi.ResourceArgs
    {
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// Indicate the read-only deployment status of the certificate on Cloudflare's edge. Gateway TLS interception can use certificates in the 'available' (previously called 'active') state.
        /// Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        /// </summary>
        [Input("bindingStatus")]
        public Input<string>? BindingStatus { get; set; }

        /// <summary>
        /// Provide the CA certificate (read-only).
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("expiresOn")]
        public Input<string>? ExpiresOn { get; set; }

        /// <summary>
        /// Provide the SHA256 fingerprint of the certificate (read-only).
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `Certificate` (read-only).
        /// </summary>
        [Input("inUse")]
        public Input<bool>? InUse { get; set; }

        /// <summary>
        /// Indicate the organization that issued the certificate (read-only).
        /// </summary>
        [Input("issuerOrg")]
        public Input<string>? IssuerOrg { get; set; }

        /// <summary>
        /// Provide the entire issuer field of the certificate (read-only).
        /// </summary>
        [Input("issuerRaw")]
        public Input<string>? IssuerRaw { get; set; }

        /// <summary>
        /// Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
        /// Available values: "custom", "GatewayManaged".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("uploadedOn")]
        public Input<string>? UploadedOn { get; set; }

        /// <summary>
        /// Sets the certificate validity period in days (range: 1-10,950 days / ~30 years). Defaults to 1,825 days (5 years). **Important**: This field is only settable during the certificate creation.  Certificates becomes immutable after creation - use the `/activate` and `/deactivate` endpoints to manage certificate lifecycle.
        /// </summary>
        [Input("validityPeriodDays")]
        public Input<int>? ValidityPeriodDays { get; set; }

        public ZeroTrustGatewayCertificateState()
        {
        }
        public static new ZeroTrustGatewayCertificateState Empty => new ZeroTrustGatewayCertificateState();
    }
}
