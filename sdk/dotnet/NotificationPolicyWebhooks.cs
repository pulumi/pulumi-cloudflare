// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource, that manages a webhook destination. These destinations can be tied to the notification policies created for Cloudflare's products.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Cloudflare.NotificationPolicyWebhooks("example", new Cloudflare.NotificationPolicyWebhooksArgs
    ///         {
    ///             AccountId = "c4a7362d577a6c3019a474fd6f485821",
    ///             Name = "Webhooks destination",
    ///             Secret = "my-secret",
    ///             Url = "https://example.com",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing notification policy can be imported using the account ID and the webhook ID
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks example 72c379d136459405d964d27aa0f18605/c4a7362d577a6c3019a474fd6f485821
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks")]
    public partial class NotificationPolicyWebhooks : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account for which the webhook destination has to be connected.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("lastFailure")]
        public Output<string> LastFailure { get; private set; } = null!;

        [Output("lastSuccess")]
        public Output<string> LastSuccess { get; private set; } = null!;

        /// <summary>
        /// The name of the webhook destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An optional secret can be provided that will be passed in the `cf-webhook-auth` header when dispatching a webhook notification.
        /// Secrets are not returned in any API response body.
        /// Refer to the documentation for more details - https://api.cloudflare.com/#notification-webhooks-create-webhook.
        /// </summary>
        [Output("secret")]
        public Output<string?> Secret { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The URL of the webhook destinations.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationPolicyWebhooks resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationPolicyWebhooks(string name, NotificationPolicyWebhooksArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks", name, args ?? new NotificationPolicyWebhooksArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationPolicyWebhooks(string name, Input<string> id, NotificationPolicyWebhooksState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationPolicyWebhooks resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationPolicyWebhooks Get(string name, Input<string> id, NotificationPolicyWebhooksState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationPolicyWebhooks(name, id, state, options);
        }
    }

    public sealed class NotificationPolicyWebhooksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account for which the webhook destination has to be connected.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The name of the webhook destination.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// An optional secret can be provided that will be passed in the `cf-webhook-auth` header when dispatching a webhook notification.
        /// Secrets are not returned in any API response body.
        /// Refer to the documentation for more details - https://api.cloudflare.com/#notification-webhooks-create-webhook.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        /// <summary>
        /// The URL of the webhook destinations.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public NotificationPolicyWebhooksArgs()
        {
        }
    }

    public sealed class NotificationPolicyWebhooksState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account for which the webhook destination has to be connected.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("lastFailure")]
        public Input<string>? LastFailure { get; set; }

        [Input("lastSuccess")]
        public Input<string>? LastSuccess { get; set; }

        /// <summary>
        /// The name of the webhook destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// An optional secret can be provided that will be passed in the `cf-webhook-auth` header when dispatching a webhook notification.
        /// Secrets are not returned in any API response body.
        /// Refer to the documentation for more details - https://api.cloudflare.com/#notification-webhooks-create-webhook.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The URL of the webhook destinations.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public NotificationPolicyWebhooksState()
        {
        }
    }
}
