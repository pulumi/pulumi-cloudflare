// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleQueue = new Cloudflare.Queue("example_queue", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         QueueName = "example-queue",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/queue:Queue example '&lt;account_id&gt;/&lt;queue_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/queue:Queue")]
    public partial class Queue : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("consumers")]
        public Output<ImmutableArray<Outputs.QueueConsumer>> Consumers { get; private set; } = null!;

        [Output("consumersTotalCount")]
        public Output<double> ConsumersTotalCount { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        [Output("producers")]
        public Output<ImmutableArray<Outputs.QueueProducer>> Producers { get; private set; } = null!;

        [Output("producersTotalCount")]
        public Output<double> ProducersTotalCount { get; private set; } = null!;

        [Output("queueId")]
        public Output<string> QueueId { get; private set; } = null!;

        [Output("queueName")]
        public Output<string> QueueName { get; private set; } = null!;

        [Output("settings")]
        public Output<Outputs.QueueSettings> Settings { get; private set; } = null!;


        /// <summary>
        /// Create a Queue resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Queue(string name, QueueArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/queue:Queue", name, args ?? new QueueArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Queue(string name, Input<string> id, QueueState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/queue:Queue", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Queue resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Queue Get(string name, Input<string> id, QueueState? state = null, CustomResourceOptions? options = null)
        {
            return new Queue(name, id, state, options);
        }
    }

    public sealed class QueueArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("queueName", required: true)]
        public Input<string> QueueName { get; set; } = null!;

        [Input("settings")]
        public Input<Inputs.QueueSettingsArgs>? Settings { get; set; }

        public QueueArgs()
        {
        }
        public static new QueueArgs Empty => new QueueArgs();
    }

    public sealed class QueueState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Resource identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("consumers")]
        private InputList<Inputs.QueueConsumerGetArgs>? _consumers;
        public InputList<Inputs.QueueConsumerGetArgs> Consumers
        {
            get => _consumers ?? (_consumers = new InputList<Inputs.QueueConsumerGetArgs>());
            set => _consumers = value;
        }

        [Input("consumersTotalCount")]
        public Input<double>? ConsumersTotalCount { get; set; }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        [Input("producers")]
        private InputList<Inputs.QueueProducerGetArgs>? _producers;
        public InputList<Inputs.QueueProducerGetArgs> Producers
        {
            get => _producers ?? (_producers = new InputList<Inputs.QueueProducerGetArgs>());
            set => _producers = value;
        }

        [Input("producersTotalCount")]
        public Input<double>? ProducersTotalCount { get; set; }

        [Input("queueId")]
        public Input<string>? QueueId { get; set; }

        [Input("queueName")]
        public Input<string>? QueueName { get; set; }

        [Input("settings")]
        public Input<Inputs.QueueSettingsGetArgs>? Settings { get; set; }

        public QueueState()
        {
        }
        public static new QueueState Empty => new QueueState();
    }
}
