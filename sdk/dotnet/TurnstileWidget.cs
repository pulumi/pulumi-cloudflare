// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// The [Turnstile Widget](https://developers.cloudflare.com/turnstile/) resource allows you to manage Cloudflare Turnstile Widgets.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Cloudflare.TurnstileWidget("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         BotFightMode = false,
    ///         Domains = new[]
    ///         {
    ///             "example.com",
    ///         },
    ///         Mode = "invisible",
    ///         Name = "example widget",
    ///         Region = "world",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/turnstileWidget:TurnstileWidget example &lt;account_id&gt;/&lt;site_key&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/turnstileWidget:TurnstileWidget")]
    public partial class TurnstileWidget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// If bot*fight*mode is set to true, Cloudflare issues computationally expensive challenges in response to malicious bots (Enterprise only).
        /// </summary>
        [Output("botFightMode")]
        public Output<bool> BotFightMode { get; private set; } = null!;

        /// <summary>
        /// Domains where the widget is deployed
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Widget Mode. Available values: `non-interactive`, `invisible`, `managed`
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Human readable widget name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Do not show any Cloudflare branding on the widget (Enterprise only).
        /// </summary>
        [Output("offlabel")]
        public Output<bool> Offlabel { get; private set; } = null!;

        /// <summary>
        /// Region where this widget can be used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Secret key for this widget.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;


        /// <summary>
        /// Create a TurnstileWidget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TurnstileWidget(string name, TurnstileWidgetArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/turnstileWidget:TurnstileWidget", name, args ?? new TurnstileWidgetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TurnstileWidget(string name, Input<string> id, TurnstileWidgetState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/turnstileWidget:TurnstileWidget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TurnstileWidget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TurnstileWidget Get(string name, Input<string> id, TurnstileWidgetState? state = null, CustomResourceOptions? options = null)
        {
            return new TurnstileWidget(name, id, state, options);
        }
    }

    public sealed class TurnstileWidgetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// If bot*fight*mode is set to true, Cloudflare issues computationally expensive challenges in response to malicious bots (Enterprise only).
        /// </summary>
        [Input("botFightMode")]
        public Input<bool>? BotFightMode { get; set; }

        [Input("domains", required: true)]
        private InputList<string>? _domains;

        /// <summary>
        /// Domains where the widget is deployed
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Widget Mode. Available values: `non-interactive`, `invisible`, `managed`
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// Human readable widget name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Do not show any Cloudflare branding on the widget (Enterprise only).
        /// </summary>
        [Input("offlabel")]
        public Input<bool>? Offlabel { get; set; }

        /// <summary>
        /// Region where this widget can be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public TurnstileWidgetArgs()
        {
        }
        public static new TurnstileWidgetArgs Empty => new TurnstileWidgetArgs();
    }

    public sealed class TurnstileWidgetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// If bot*fight*mode is set to true, Cloudflare issues computationally expensive challenges in response to malicious bots (Enterprise only).
        /// </summary>
        [Input("botFightMode")]
        public Input<bool>? BotFightMode { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// Domains where the widget is deployed
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Widget Mode. Available values: `non-interactive`, `invisible`, `managed`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Human readable widget name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Do not show any Cloudflare branding on the widget (Enterprise only).
        /// </summary>
        [Input("offlabel")]
        public Input<bool>? Offlabel { get; set; }

        /// <summary>
        /// Region where this widget can be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Secret key for this widget.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public TurnstileWidgetState()
        {
        }
        public static new TurnstileWidgetState Empty => new TurnstileWidgetState();
    }
}
