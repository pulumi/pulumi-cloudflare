// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustAccessServiceToken
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessServiceToken = Cloudflare.GetZeroTrustAccessServiceToken.Invoke(new()
        ///     {
        ///         ServiceTokenId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustAccessServiceTokenResult> InvokeAsync(GetZeroTrustAccessServiceTokenArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustAccessServiceTokenResult>("cloudflare:index/getZeroTrustAccessServiceToken:getZeroTrustAccessServiceToken", args ?? new GetZeroTrustAccessServiceTokenArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessServiceToken = Cloudflare.GetZeroTrustAccessServiceToken.Invoke(new()
        ///     {
        ///         ServiceTokenId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustAccessServiceTokenResult> Invoke(GetZeroTrustAccessServiceTokenInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustAccessServiceTokenResult>("cloudflare:index/getZeroTrustAccessServiceToken:getZeroTrustAccessServiceToken", args ?? new GetZeroTrustAccessServiceTokenInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustAccessServiceToken = Cloudflare.GetZeroTrustAccessServiceToken.Invoke(new()
        ///     {
        ///         ServiceTokenId = "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
        ///         AccountId = "account_id",
        ///         ZoneId = "zone_id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustAccessServiceTokenResult> Invoke(GetZeroTrustAccessServiceTokenInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustAccessServiceTokenResult>("cloudflare:index/getZeroTrustAccessServiceToken:getZeroTrustAccessServiceToken", args ?? new GetZeroTrustAccessServiceTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustAccessServiceTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public string? AccountId { get; set; }

        [Input("filter")]
        public Inputs.GetZeroTrustAccessServiceTokenFilterArgs? Filter { get; set; }

        /// <summary>
        /// UUID.
        /// </summary>
        [Input("serviceTokenId")]
        public string? ServiceTokenId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetZeroTrustAccessServiceTokenArgs()
        {
        }
        public static new GetZeroTrustAccessServiceTokenArgs Empty => new GetZeroTrustAccessServiceTokenArgs();
    }

    public sealed class GetZeroTrustAccessServiceTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("filter")]
        public Input<Inputs.GetZeroTrustAccessServiceTokenFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// UUID.
        /// </summary>
        [Input("serviceTokenId")]
        public Input<string>? ServiceTokenId { get; set; }

        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetZeroTrustAccessServiceTokenInvokeArgs()
        {
        }
        public static new GetZeroTrustAccessServiceTokenInvokeArgs Empty => new GetZeroTrustAccessServiceTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustAccessServiceTokenResult
    {
        /// <summary>
        /// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        /// </summary>
        public readonly string? AccountId;
        /// <summary>
        /// The Client ID for the service token. Access will check for this value in the `CF-Access-Client-ID` request header.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h. The default is 1 year in hours (8760h).
        /// </summary>
        public readonly string Duration;
        public readonly string ExpiresAt;
        public readonly Outputs.GetZeroTrustAccessServiceTokenFilterResult? Filter;
        /// <summary>
        /// UUID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the service token.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// UUID.
        /// </summary>
        public readonly string? ServiceTokenId;
        /// <summary>
        /// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetZeroTrustAccessServiceTokenResult(
            string? accountId,

            string clientId,

            string duration,

            string expiresAt,

            Outputs.GetZeroTrustAccessServiceTokenFilterResult? filter,

            string id,

            string name,

            string? serviceTokenId,

            string? zoneId)
        {
            AccountId = accountId;
            ClientId = clientId;
            Duration = duration;
            ExpiresAt = expiresAt;
            Filter = filter;
            Id = id;
            Name = name;
            ServiceTokenId = serviceTokenId;
            ZoneId = zoneId;
        }
    }
}
