// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a Cloudflare Waiting Room Event resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Cloudflare.WaitingRoomEvent("example", new Cloudflare.WaitingRoomEventArgs
    ///         {
    ///             EventEndTime = "2006-01-02T20:04:05Z",
    ///             EventStartTime = "2006-01-02T15:04:05Z",
    ///             Name = "foo",
    ///             WaitingRoomId = "d41d8cd98f00b204e9800998ecf8427e",
    ///             ZoneId = "ae36f999674d196762efcc5abb06b345",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Waiting room events can be imported using a composite ID formed of zone ID, waiting room ID, and waiting room event ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/waitingRoomEvent:WaitingRoomEvent default ae36f999674d196762efcc5abb06b345/d41d8cd98f00b204e9800998ecf8427e/25756b2dfe6e378a06b033b670413757
    /// ```
    /// 
    ///  where* `ae36f999674d196762efcc5abb06b345` - the zone ID * `d41d8cd98f00b204e9800998ecf8427e` - waiting room ID as returned by [API](https://api.cloudflare.com/#waiting-room-list-waiting-rooms) * `25756b2dfe6e378a06b033b670413757` - waiting room event ID as returned by [API](https://api.cloudflare.com/#waiting-room-list-events)
    /// </summary>
    [CloudflareResourceType("cloudflare:index/waitingRoomEvent:WaitingRoomEvent")]
    public partial class WaitingRoomEvent : Pulumi.CustomResource
    {
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// This a templated html file that will be rendered at the edge.
        /// </summary>
        [Output("customPageHtml")]
        public Output<string?> CustomPageHtml { get; private set; } = null!;

        /// <summary>
        /// A description to let users add more details about the waiting room event.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Disables automatic renewal of session cookies. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Output("disableSessionRenewal")]
        public Output<bool?> DisableSessionRenewal { get; private set; } = null!;

        /// <summary>
        /// ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Output("eventEndTime")]
        public Output<string> EventEndTime { get; private set; } = null!;

        /// <summary>
        /// ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. Must occur at least 1 minute before event_end_time.
        /// </summary>
        [Output("eventStartTime")]
        public Output<string> EventStartTime { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of new users that will be let into the route every minute.
        /// </summary>
        [Output("newUsersPerMinute")]
        public Output<int?> NewUsersPerMinute { get; private set; } = null!;

        /// <summary>
        /// ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before event_start_time.
        /// </summary>
        [Output("prequeueStartTime")]
        public Output<string?> PrequeueStartTime { get; private set; } = null!;

        /// <summary>
        /// The queueing method to be used by the waiting room during the event. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Output("queueingMethod")]
        public Output<string?> QueueingMethod { get; private set; } = null!;

        /// <summary>
        /// Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the route. Default: 5
        /// </summary>
        [Output("sessionDuration")]
        public Output<int?> SessionDuration { get; private set; } = null!;

        /// <summary>
        /// Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Default: false.
        /// </summary>
        [Output("shuffleAtEventStart")]
        public Output<bool?> ShuffleAtEventStart { get; private set; } = null!;

        /// <summary>
        /// If suspended, the traffic doesn't go to the waiting room. Default: false.
        /// </summary>
        [Output("suspended")]
        public Output<bool?> Suspended { get; private set; } = null!;

        /// <summary>
        /// The total number of active user sessions on the route at a point in time.
        /// </summary>
        [Output("totalActiveUsers")]
        public Output<int?> TotalActiveUsers { get; private set; } = null!;

        /// <summary>
        /// The Waiting Room ID the event should apply to.
        /// </summary>
        [Output("waitingRoomId")]
        public Output<string> WaitingRoomId { get; private set; } = null!;

        /// <summary>
        /// The zone ID to apply to.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a WaitingRoomEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WaitingRoomEvent(string name, WaitingRoomEventArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/waitingRoomEvent:WaitingRoomEvent", name, args ?? new WaitingRoomEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WaitingRoomEvent(string name, Input<string> id, WaitingRoomEventState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/waitingRoomEvent:WaitingRoomEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WaitingRoomEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WaitingRoomEvent Get(string name, Input<string> id, WaitingRoomEventState? state = null, CustomResourceOptions? options = null)
        {
            return new WaitingRoomEvent(name, id, state, options);
        }
    }

    public sealed class WaitingRoomEventArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This a templated html file that will be rendered at the edge.
        /// </summary>
        [Input("customPageHtml")]
        public Input<string>? CustomPageHtml { get; set; }

        /// <summary>
        /// A description to let users add more details about the waiting room event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disables automatic renewal of session cookies. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Input("disableSessionRenewal")]
        public Input<bool>? DisableSessionRenewal { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Input("eventEndTime", required: true)]
        public Input<string> EventEndTime { get; set; } = null!;

        /// <summary>
        /// ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. Must occur at least 1 minute before event_end_time.
        /// </summary>
        [Input("eventStartTime", required: true)]
        public Input<string> EventStartTime { get; set; } = null!;

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of new users that will be let into the route every minute.
        /// </summary>
        [Input("newUsersPerMinute")]
        public Input<int>? NewUsersPerMinute { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before event_start_time.
        /// </summary>
        [Input("prequeueStartTime")]
        public Input<string>? PrequeueStartTime { get; set; }

        /// <summary>
        /// The queueing method to be used by the waiting room during the event. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Input("queueingMethod")]
        public Input<string>? QueueingMethod { get; set; }

        /// <summary>
        /// Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the route. Default: 5
        /// </summary>
        [Input("sessionDuration")]
        public Input<int>? SessionDuration { get; set; }

        /// <summary>
        /// Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Default: false.
        /// </summary>
        [Input("shuffleAtEventStart")]
        public Input<bool>? ShuffleAtEventStart { get; set; }

        /// <summary>
        /// If suspended, the traffic doesn't go to the waiting room. Default: false.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// The total number of active user sessions on the route at a point in time.
        /// </summary>
        [Input("totalActiveUsers")]
        public Input<int>? TotalActiveUsers { get; set; }

        /// <summary>
        /// The Waiting Room ID the event should apply to.
        /// </summary>
        [Input("waitingRoomId", required: true)]
        public Input<string> WaitingRoomId { get; set; } = null!;

        /// <summary>
        /// The zone ID to apply to.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public WaitingRoomEventArgs()
        {
        }
    }

    public sealed class WaitingRoomEventState : Pulumi.ResourceArgs
    {
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// This a templated html file that will be rendered at the edge.
        /// </summary>
        [Input("customPageHtml")]
        public Input<string>? CustomPageHtml { get; set; }

        /// <summary>
        /// A description to let users add more details about the waiting room event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Disables automatic renewal of session cookies. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Input("disableSessionRenewal")]
        public Input<bool>? DisableSessionRenewal { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Input("eventEndTime")]
        public Input<string>? EventEndTime { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. Must occur at least 1 minute before event_end_time.
        /// </summary>
        [Input("eventStartTime")]
        public Input<string>? EventStartTime { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of new users that will be let into the route every minute.
        /// </summary>
        [Input("newUsersPerMinute")]
        public Input<int>? NewUsersPerMinute { get; set; }

        /// <summary>
        /// ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before event_start_time.
        /// </summary>
        [Input("prequeueStartTime")]
        public Input<string>? PrequeueStartTime { get; set; }

        /// <summary>
        /// The queueing method to be used by the waiting room during the event. If not specified, the event will inherit it from the waiting room.
        /// </summary>
        [Input("queueingMethod")]
        public Input<string>? QueueingMethod { get; set; }

        /// <summary>
        /// Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the route. Default: 5
        /// </summary>
        [Input("sessionDuration")]
        public Input<int>? SessionDuration { get; set; }

        /// <summary>
        /// Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Default: false.
        /// </summary>
        [Input("shuffleAtEventStart")]
        public Input<bool>? ShuffleAtEventStart { get; set; }

        /// <summary>
        /// If suspended, the traffic doesn't go to the waiting room. Default: false.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// The total number of active user sessions on the route at a point in time.
        /// </summary>
        [Input("totalActiveUsers")]
        public Input<int>? TotalActiveUsers { get; set; }

        /// <summary>
        /// The Waiting Room ID the event should apply to.
        /// </summary>
        [Input("waitingRoomId")]
        public Input<string>? WaitingRoomId { get; set; }

        /// <summary>
        /// The zone ID to apply to.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public WaitingRoomEventState()
        {
        }
    }
}
