// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWaitingRoomEvent = new Cloudflare.WaitingRoomEvent("example_waiting_room_event", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         WaitingRoomId = "699d98642c564d2e855e9661899b7252",
    ///         EventEndTime = "2021-09-28T17:00:00.000Z",
    ///         EventStartTime = "2021-09-28T15:30:00.000Z",
    ///         Name = "production_webinar_event",
    ///         CustomPageHtml = "{{#waitTimeKnown}} {{waitTime}} mins {{/waitTimeKnown}} {{^waitTimeKnown}} Event is prequeueing / Queue all enabled {{/waitTimeKnown}}",
    ///         Description = "Production event - DO NOT MODIFY",
    ///         DisableSessionRenewal = true,
    ///         NewUsersPerMinute = 200,
    ///         PrequeueStartTime = "2021-09-28T15:00:00.000Z",
    ///         QueueingMethod = "random",
    ///         SessionDuration = 1,
    ///         ShuffleAtEventStart = true,
    ///         Suspended = true,
    ///         TotalActiveUsers = 200,
    ///         TurnstileAction = "log",
    ///         TurnstileMode = "off",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/waitingRoomEvent:WaitingRoomEvent example '&lt;zone_id&gt;/&lt;waiting_room_id&gt;/&lt;event_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/waitingRoomEvent:WaitingRoomEvent")]
    public partial class WaitingRoomEvent : global::Pulumi.CustomResource
    {
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `CustomPageHtml` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Output("customPageHtml")]
        public Output<string?> CustomPageHtml { get; private set; } = null!;

        /// <summary>
        /// A note that you can use to add more details about the event.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `DisableSessionRenewal` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Output("disableSessionRenewal")]
        public Output<bool?> DisableSessionRenewal { get; private set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Output("eventEndTime")]
        public Output<string> EventEndTime { get; private set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. The start time must be at least one minute before `EventEndTime`.
        /// </summary>
        [Output("eventStartTime")]
        public Output<string> EventStartTime { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `NewUsersPerMinute` property while it is active. If null, the event will inherit it. This can only be set if the event's `TotalActiveUsers` property is also set.
        /// </summary>
        [Output("newUsersPerMinute")]
        public Output<int?> NewUsersPerMinute { get; private set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp that marks when to begin queueing all users before the event starts. The prequeue must start at least five minutes before `EventStartTime`.
        /// </summary>
        [Output("prequeueStartTime")]
        public Output<string?> PrequeueStartTime { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `QueueingMethod` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Output("queueingMethod")]
        public Output<string?> QueueingMethod { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `SessionDuration` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Output("sessionDuration")]
        public Output<int?> SessionDuration { get; private set; } = null!;

        /// <summary>
        /// If enabled, users in the prequeue will be shuffled randomly at the `EventStartTime`. Requires that `PrequeueStartTime` is not null. This is useful for situations when many users will join the event prequeue at the same time and you want to shuffle them to ensure fairness. Naturally, it makes the most sense to enable this feature when the `QueueingMethod` during the event respects ordering such as **fifo**, or else the shuffling may be unnecessary.
        /// </summary>
        [Output("shuffleAtEventStart")]
        public Output<bool> ShuffleAtEventStart { get; private set; } = null!;

        /// <summary>
        /// Suspends or allows an event. If set to `True`, the event is ignored and traffic will be handled based on the waiting room configuration.
        /// </summary>
        [Output("suspended")]
        public Output<bool> Suspended { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `TotalActiveUsers` property while it is active. If null, the event will inherit it. This can only be set if the event's `NewUsersPerMinute` property is also set.
        /// </summary>
        [Output("totalActiveUsers")]
        public Output<int?> TotalActiveUsers { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileAction` property while it is active. If null, the event will inherit it.
        /// Available values: "log", "InfiniteQueue".
        /// </summary>
        [Output("turnstileAction")]
        public Output<string?> TurnstileAction { get; private set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileMode` property while it is active. If null, the event will inherit it.
        /// Available values: "off", "invisible", "visible*non*interactive", "VisibleManaged".
        /// </summary>
        [Output("turnstileMode")]
        public Output<string?> TurnstileMode { get; private set; } = null!;

        [Output("waitingRoomId")]
        public Output<string> WaitingRoomId { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a WaitingRoomEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WaitingRoomEvent(string name, WaitingRoomEventArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/waitingRoomEvent:WaitingRoomEvent", name, args ?? new WaitingRoomEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WaitingRoomEvent(string name, Input<string> id, WaitingRoomEventState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/waitingRoomEvent:WaitingRoomEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WaitingRoomEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WaitingRoomEvent Get(string name, Input<string> id, WaitingRoomEventState? state = null, CustomResourceOptions? options = null)
        {
            return new WaitingRoomEvent(name, id, state, options);
        }
    }

    public sealed class WaitingRoomEventArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set, the event will override the waiting room's `CustomPageHtml` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("customPageHtml")]
        public Input<string>? CustomPageHtml { get; set; }

        /// <summary>
        /// A note that you can use to add more details about the event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `DisableSessionRenewal` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("disableSessionRenewal")]
        public Input<bool>? DisableSessionRenewal { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Input("eventEndTime", required: true)]
        public Input<string> EventEndTime { get; set; } = null!;

        /// <summary>
        /// An ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. The start time must be at least one minute before `EventEndTime`.
        /// </summary>
        [Input("eventStartTime", required: true)]
        public Input<string> EventStartTime { get; set; } = null!;

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// If set, the event will override the waiting room's `NewUsersPerMinute` property while it is active. If null, the event will inherit it. This can only be set if the event's `TotalActiveUsers` property is also set.
        /// </summary>
        [Input("newUsersPerMinute")]
        public Input<int>? NewUsersPerMinute { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp that marks when to begin queueing all users before the event starts. The prequeue must start at least five minutes before `EventStartTime`.
        /// </summary>
        [Input("prequeueStartTime")]
        public Input<string>? PrequeueStartTime { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `QueueingMethod` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("queueingMethod")]
        public Input<string>? QueueingMethod { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `SessionDuration` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("sessionDuration")]
        public Input<int>? SessionDuration { get; set; }

        /// <summary>
        /// If enabled, users in the prequeue will be shuffled randomly at the `EventStartTime`. Requires that `PrequeueStartTime` is not null. This is useful for situations when many users will join the event prequeue at the same time and you want to shuffle them to ensure fairness. Naturally, it makes the most sense to enable this feature when the `QueueingMethod` during the event respects ordering such as **fifo**, or else the shuffling may be unnecessary.
        /// </summary>
        [Input("shuffleAtEventStart")]
        public Input<bool>? ShuffleAtEventStart { get; set; }

        /// <summary>
        /// Suspends or allows an event. If set to `True`, the event is ignored and traffic will be handled based on the waiting room configuration.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TotalActiveUsers` property while it is active. If null, the event will inherit it. This can only be set if the event's `NewUsersPerMinute` property is also set.
        /// </summary>
        [Input("totalActiveUsers")]
        public Input<int>? TotalActiveUsers { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileAction` property while it is active. If null, the event will inherit it.
        /// Available values: "log", "InfiniteQueue".
        /// </summary>
        [Input("turnstileAction")]
        public Input<string>? TurnstileAction { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileMode` property while it is active. If null, the event will inherit it.
        /// Available values: "off", "invisible", "visible*non*interactive", "VisibleManaged".
        /// </summary>
        [Input("turnstileMode")]
        public Input<string>? TurnstileMode { get; set; }

        [Input("waitingRoomId", required: true)]
        public Input<string> WaitingRoomId { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public WaitingRoomEventArgs()
        {
        }
        public static new WaitingRoomEventArgs Empty => new WaitingRoomEventArgs();
    }

    public sealed class WaitingRoomEventState : global::Pulumi.ResourceArgs
    {
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `CustomPageHtml` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("customPageHtml")]
        public Input<string>? CustomPageHtml { get; set; }

        /// <summary>
        /// A note that you can use to add more details about the event.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `DisableSessionRenewal` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("disableSessionRenewal")]
        public Input<bool>? DisableSessionRenewal { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp that marks the end of the event.
        /// </summary>
        [Input("eventEndTime")]
        public Input<string>? EventEndTime { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp that marks the start of the event. At this time, queued users will be processed with the event's configuration. The start time must be at least one minute before `EventEndTime`.
        /// </summary>
        [Input("eventStartTime")]
        public Input<string>? EventStartTime { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// A unique name to identify the event. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `NewUsersPerMinute` property while it is active. If null, the event will inherit it. This can only be set if the event's `TotalActiveUsers` property is also set.
        /// </summary>
        [Input("newUsersPerMinute")]
        public Input<int>? NewUsersPerMinute { get; set; }

        /// <summary>
        /// An ISO 8601 timestamp that marks when to begin queueing all users before the event starts. The prequeue must start at least five minutes before `EventStartTime`.
        /// </summary>
        [Input("prequeueStartTime")]
        public Input<string>? PrequeueStartTime { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `QueueingMethod` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("queueingMethod")]
        public Input<string>? QueueingMethod { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `SessionDuration` property while it is active. If null, the event will inherit it.
        /// </summary>
        [Input("sessionDuration")]
        public Input<int>? SessionDuration { get; set; }

        /// <summary>
        /// If enabled, users in the prequeue will be shuffled randomly at the `EventStartTime`. Requires that `PrequeueStartTime` is not null. This is useful for situations when many users will join the event prequeue at the same time and you want to shuffle them to ensure fairness. Naturally, it makes the most sense to enable this feature when the `QueueingMethod` during the event respects ordering such as **fifo**, or else the shuffling may be unnecessary.
        /// </summary>
        [Input("shuffleAtEventStart")]
        public Input<bool>? ShuffleAtEventStart { get; set; }

        /// <summary>
        /// Suspends or allows an event. If set to `True`, the event is ignored and traffic will be handled based on the waiting room configuration.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TotalActiveUsers` property while it is active. If null, the event will inherit it. This can only be set if the event's `NewUsersPerMinute` property is also set.
        /// </summary>
        [Input("totalActiveUsers")]
        public Input<int>? TotalActiveUsers { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileAction` property while it is active. If null, the event will inherit it.
        /// Available values: "log", "InfiniteQueue".
        /// </summary>
        [Input("turnstileAction")]
        public Input<string>? TurnstileAction { get; set; }

        /// <summary>
        /// If set, the event will override the waiting room's `TurnstileMode` property while it is active. If null, the event will inherit it.
        /// Available values: "off", "invisible", "visible*non*interactive", "VisibleManaged".
        /// </summary>
        [Input("turnstileMode")]
        public Input<string>? TurnstileMode { get; set; }

        [Input("waitingRoomId")]
        public Input<string>? WaitingRoomId { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public WaitingRoomEventState()
        {
        }
        public static new WaitingRoomEventState Empty => new WaitingRoomEventState();
    }
}
