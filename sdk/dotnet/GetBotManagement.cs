// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetBotManagement
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleBotManagement = Cloudflare.GetBotManagement.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBotManagementResult> InvokeAsync(GetBotManagementArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBotManagementResult>("cloudflare:index/getBotManagement:getBotManagement", args ?? new GetBotManagementArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleBotManagement = Cloudflare.GetBotManagement.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBotManagementResult> Invoke(GetBotManagementInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBotManagementResult>("cloudflare:index/getBotManagement:getBotManagement", args ?? new GetBotManagementInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleBotManagement = Cloudflare.GetBotManagement.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBotManagementResult> Invoke(GetBotManagementInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBotManagementResult>("cloudflare:index/getBotManagement:getBotManagement", args ?? new GetBotManagementInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBotManagementArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetBotManagementArgs()
        {
        }
        public static new GetBotManagementArgs Empty => new GetBotManagementArgs();
    }

    public sealed class GetBotManagementInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetBotManagementInvokeArgs()
        {
        }
        public static new GetBotManagementInvokeArgs Empty => new GetBotManagementInvokeArgs();
    }


    [OutputType]
    public sealed class GetBotManagementResult
    {
        /// <summary>
        /// Enable rule to block AI Scrapers and Crawlers. Please note the value `OnlyOnAdPages` is currently not available for Enterprise customers.
        /// Available values: "block", "disabled", "only*on*ad_pages".
        /// </summary>
        public readonly string AiBotsProtection;
        /// <summary>
        /// Automatically update to the newest bot detection models created by Cloudflare as they are released. [Learn more.](https://developers.cloudflare.com/bots/reference/machine-learning-models#model-versions-and-release-notes)
        /// </summary>
        public readonly bool AutoUpdateModel;
        /// <summary>
        /// Indicates that the bot management cookie can be placed on end user devices accessing the site. Defaults to true
        /// </summary>
        public readonly bool BmCookieEnabled;
        /// <summary>
        /// Specifies the Robots Access Control License variant to use.
        /// Available values: "off", "PolicyOnly".
        /// </summary>
        public readonly string CfRobotsVariant;
        /// <summary>
        /// Enable rule to punish AI Scrapers and Crawlers via a link maze.
        /// Available values: "enabled", "disabled".
        /// </summary>
        public readonly string CrawlerProtection;
        /// <summary>
        /// Use lightweight, invisible JavaScript detections to improve Bot Management. [Learn more about JavaScript Detections](https://developers.cloudflare.com/bots/reference/javascript-detections/).
        /// </summary>
        public readonly bool EnableJs;
        /// <summary>
        /// Whether to enable Bot Fight Mode.
        /// </summary>
        public readonly bool FightMode;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable cloudflare managed robots.txt. If an existing robots.txt is detected, then managed robots.txt will be prepended to the existing robots.txt.
        /// </summary>
        public readonly bool IsRobotsTxtManaged;
        /// <summary>
        /// Whether to optimize Super Bot Fight Mode protections for Wordpress.
        /// </summary>
        public readonly bool OptimizeWordpress;
        /// <summary>
        /// Super Bot Fight Mode (SBFM) action to take on definitely automated requests.
        /// Available values: "allow", "block", "ManagedChallenge".
        /// </summary>
        public readonly string SbfmDefinitelyAutomated;
        /// <summary>
        /// Super Bot Fight Mode (SBFM) action to take on likely automated requests.
        /// Available values: "allow", "block", "ManagedChallenge".
        /// </summary>
        public readonly string SbfmLikelyAutomated;
        /// <summary>
        /// Super Bot Fight Mode (SBFM) to enable static resource protection.
        /// Enable if static resources on your application need bot protection.
        /// Note: Static resource protection can also result in legitimate traffic being blocked.
        /// </summary>
        public readonly bool SbfmStaticResourceProtection;
        /// <summary>
        /// Super Bot Fight Mode (SBFM) action to take on verified bots requests.
        /// Available values: "allow", "block".
        /// </summary>
        public readonly string SbfmVerifiedBots;
        /// <summary>
        /// A read-only field that shows which unauthorized settings are currently active on the zone. These settings typically result from upgrades or downgrades.
        /// </summary>
        public readonly Outputs.GetBotManagementStaleZoneConfigurationResult StaleZoneConfiguration;
        /// <summary>
        /// Whether to disable tracking the highest bot score for a session in the Bot Management cookie.
        /// </summary>
        public readonly bool SuppressSessionScore;
        /// <summary>
        /// A read-only field that indicates whether the zone currently is running the latest ML model.
        /// </summary>
        public readonly bool UsingLatestModel;
        /// <summary>
        /// Identifier.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetBotManagementResult(
            string aiBotsProtection,

            bool autoUpdateModel,

            bool bmCookieEnabled,

            string cfRobotsVariant,

            string crawlerProtection,

            bool enableJs,

            bool fightMode,

            string id,

            bool isRobotsTxtManaged,

            bool optimizeWordpress,

            string sbfmDefinitelyAutomated,

            string sbfmLikelyAutomated,

            bool sbfmStaticResourceProtection,

            string sbfmVerifiedBots,

            Outputs.GetBotManagementStaleZoneConfigurationResult staleZoneConfiguration,

            bool suppressSessionScore,

            bool usingLatestModel,

            string zoneId)
        {
            AiBotsProtection = aiBotsProtection;
            AutoUpdateModel = autoUpdateModel;
            BmCookieEnabled = bmCookieEnabled;
            CfRobotsVariant = cfRobotsVariant;
            CrawlerProtection = crawlerProtection;
            EnableJs = enableJs;
            FightMode = fightMode;
            Id = id;
            IsRobotsTxtManaged = isRobotsTxtManaged;
            OptimizeWordpress = optimizeWordpress;
            SbfmDefinitelyAutomated = sbfmDefinitelyAutomated;
            SbfmLikelyAutomated = sbfmLikelyAutomated;
            SbfmStaticResourceProtection = sbfmStaticResourceProtection;
            SbfmVerifiedBots = sbfmVerifiedBots;
            StaleZoneConfiguration = staleZoneConfiguration;
            SuppressSessionScore = suppressSessionScore;
            UsingLatestModel = usingLatestModel;
            ZoneId = zoneId;
        }
    }
}
