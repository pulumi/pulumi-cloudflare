// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetRegistrarDomain
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegistrarDomain = Cloudflare.GetRegistrarDomain.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DomainName = "cloudflare.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegistrarDomainResult> InvokeAsync(GetRegistrarDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistrarDomainResult>("cloudflare:index/getRegistrarDomain:getRegistrarDomain", args ?? new GetRegistrarDomainArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegistrarDomain = Cloudflare.GetRegistrarDomain.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DomainName = "cloudflare.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegistrarDomainResult> Invoke(GetRegistrarDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistrarDomainResult>("cloudflare:index/getRegistrarDomain:getRegistrarDomain", args ?? new GetRegistrarDomainInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleRegistrarDomain = Cloudflare.GetRegistrarDomain.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         DomainName = "cloudflare.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegistrarDomainResult> Invoke(GetRegistrarDomainInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistrarDomainResult>("cloudflare:index/getRegistrarDomain:getRegistrarDomain", args ?? new GetRegistrarDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistrarDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Domain name.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        public GetRegistrarDomainArgs()
        {
        }
        public static new GetRegistrarDomainArgs Empty => new GetRegistrarDomainArgs();
    }

    public sealed class GetRegistrarDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Domain name.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        public GetRegistrarDomainInvokeArgs()
        {
        }
        public static new GetRegistrarDomainInvokeArgs Empty => new GetRegistrarDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistrarDomainResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Domain name.
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetRegistrarDomainResult(
            string accountId,

            string domainName,

            string id)
        {
            AccountId = accountId;
            DomainName = domainName;
            Id = id;
        }
    }
}
