// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleHealthcheck = new Cloudflare.Healthcheck("example_healthcheck", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Address = "www.example.com",
    ///         Name = "server-1",
    ///         CheckRegions = new[]
    ///         {
    ///             "WEU",
    ///             "ENAM",
    ///         },
    ///         ConsecutiveFails = 0,
    ///         ConsecutiveSuccesses = 0,
    ///         Description = "Health check for www.example.com",
    ///         HttpConfig = new Cloudflare.Inputs.HealthcheckHttpConfigArgs
    ///         {
    ///             Allow_insecure = true,
    ///             Expected_body = "success",
    ///             Expected_codes = new[]
    ///             {
    ///                 "2xx",
    ///                 "302",
    ///             },
    ///             Follow_redirects = true,
    ///             Header = 
    ///             {
    ///                 { "host", new[]
    ///                 {
    ///                     "example.com",
    ///                 } },
    ///                 { "x-App-ID", new[]
    ///                 {
    ///                     "abc123",
    ///                 } },
    ///             },
    ///             Method = "GET",
    ///             Path = "/health",
    ///             Port = 0,
    ///         },
    ///         Interval = 0,
    ///         Retries = 0,
    ///         Suspended = true,
    ///         TcpConfig = new Cloudflare.Inputs.HealthcheckTcpConfigArgs
    ///         {
    ///             Method = "connection_established",
    ///             Port = 0,
    ///         },
    ///         Timeout = 0,
    ///         Type = "HTTPS",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/healthcheck:Healthcheck example '&lt;zone_id&gt;/&lt;healthcheck_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/healthcheck:Healthcheck")]
    public partial class Healthcheck : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The hostname or IP address of the origin server to run health checks on.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
        /// </summary>
        [Output("checkRegions")]
        public Output<ImmutableArray<string>> CheckRegions { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive fails required from a health check before changing the health to unhealthy.
        /// </summary>
        [Output("consecutiveFails")]
        public Output<int> ConsecutiveFails { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive successes required from a health check before changing the health to healthy.
        /// </summary>
        [Output("consecutiveSuccesses")]
        public Output<int> ConsecutiveSuccesses { get; private set; } = null!;

        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// A human-readable description of the health check.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The current failure reason if status is unhealthy.
        /// </summary>
        [Output("failureReason")]
        public Output<string> FailureReason { get; private set; } = null!;

        /// <summary>
        /// Parameters specific to an HTTP or HTTPS health check.
        /// </summary>
        [Output("httpConfig")]
        public Output<Outputs.HealthcheckHttpConfig> HttpConfig { get; private set; } = null!;

        /// <summary>
        /// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
        /// </summary>
        [Output("interval")]
        public Output<int> Interval { get; private set; } = null!;

        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
        /// </summary>
        [Output("retries")]
        public Output<int> Retries { get; private set; } = null!;

        /// <summary>
        /// The current status of the origin server according to the health check.
        /// Available values: "unknown", "healthy", "unhealthy", "suspended".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// If suspended, no health checks are sent to the origin.
        /// </summary>
        [Output("suspended")]
        public Output<bool> Suspended { get; private set; } = null!;

        /// <summary>
        /// Parameters specific to TCP health check.
        /// </summary>
        [Output("tcpConfig")]
        public Output<Outputs.HealthcheckTcpConfig> TcpConfig { get; private set; } = null!;

        /// <summary>
        /// The timeout (in seconds) before marking the health check as failed.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        /// <summary>
        /// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Healthcheck resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Healthcheck(string name, HealthcheckArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/healthcheck:Healthcheck", name, args ?? new HealthcheckArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Healthcheck(string name, Input<string> id, HealthcheckState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/healthcheck:Healthcheck", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Healthcheck resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Healthcheck Get(string name, Input<string> id, HealthcheckState? state = null, CustomResourceOptions? options = null)
        {
            return new Healthcheck(name, id, state, options);
        }
    }

    public sealed class HealthcheckArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hostname or IP address of the origin server to run health checks on.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        /// <summary>
        /// The number of consecutive fails required from a health check before changing the health to unhealthy.
        /// </summary>
        [Input("consecutiveFails")]
        public Input<int>? ConsecutiveFails { get; set; }

        /// <summary>
        /// The number of consecutive successes required from a health check before changing the health to healthy.
        /// </summary>
        [Input("consecutiveSuccesses")]
        public Input<int>? ConsecutiveSuccesses { get; set; }

        /// <summary>
        /// A human-readable description of the health check.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Parameters specific to an HTTP or HTTPS health check.
        /// </summary>
        [Input("httpConfig")]
        public Input<Inputs.HealthcheckHttpConfigArgs>? HttpConfig { get; set; }

        /// <summary>
        /// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// If suspended, no health checks are sent to the origin.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Parameters specific to TCP health check.
        /// </summary>
        [Input("tcpConfig")]
        public Input<Inputs.HealthcheckTcpConfigArgs>? TcpConfig { get; set; }

        /// <summary>
        /// The timeout (in seconds) before marking the health check as failed.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public HealthcheckArgs()
        {
        }
        public static new HealthcheckArgs Empty => new HealthcheckArgs();
    }

    public sealed class HealthcheckState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hostname or IP address of the origin server to run health checks on.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        [Input("checkRegions")]
        private InputList<string>? _checkRegions;

        /// <summary>
        /// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
        /// </summary>
        public InputList<string> CheckRegions
        {
            get => _checkRegions ?? (_checkRegions = new InputList<string>());
            set => _checkRegions = value;
        }

        /// <summary>
        /// The number of consecutive fails required from a health check before changing the health to unhealthy.
        /// </summary>
        [Input("consecutiveFails")]
        public Input<int>? ConsecutiveFails { get; set; }

        /// <summary>
        /// The number of consecutive successes required from a health check before changing the health to healthy.
        /// </summary>
        [Input("consecutiveSuccesses")]
        public Input<int>? ConsecutiveSuccesses { get; set; }

        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// A human-readable description of the health check.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The current failure reason if status is unhealthy.
        /// </summary>
        [Input("failureReason")]
        public Input<string>? FailureReason { get; set; }

        /// <summary>
        /// Parameters specific to an HTTP or HTTPS health check.
        /// </summary>
        [Input("httpConfig")]
        public Input<Inputs.HealthcheckHttpConfigGetArgs>? HttpConfig { get; set; }

        /// <summary>
        /// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// The current status of the origin server according to the health check.
        /// Available values: "unknown", "healthy", "unhealthy", "suspended".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// If suspended, no health checks are sent to the origin.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Parameters specific to TCP health check.
        /// </summary>
        [Input("tcpConfig")]
        public Input<Inputs.HealthcheckTcpConfigGetArgs>? TcpConfig { get; set; }

        /// <summary>
        /// The timeout (in seconds) before marking the health check as failed.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public HealthcheckState()
        {
        }
        public static new HealthcheckState Empty => new HealthcheckState();
    }
}
