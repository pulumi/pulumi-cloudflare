// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetHyperdriveConfig
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHyperdriveConfig = Cloudflare.GetHyperdriveConfig.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HyperdriveId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHyperdriveConfigResult> InvokeAsync(GetHyperdriveConfigArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHyperdriveConfigResult>("cloudflare:index/getHyperdriveConfig:getHyperdriveConfig", args ?? new GetHyperdriveConfigArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHyperdriveConfig = Cloudflare.GetHyperdriveConfig.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HyperdriveId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHyperdriveConfigResult> Invoke(GetHyperdriveConfigInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHyperdriveConfigResult>("cloudflare:index/getHyperdriveConfig:getHyperdriveConfig", args ?? new GetHyperdriveConfigInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleHyperdriveConfig = Cloudflare.GetHyperdriveConfig.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         HyperdriveId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHyperdriveConfigResult> Invoke(GetHyperdriveConfigInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetHyperdriveConfigResult>("cloudflare:index/getHyperdriveConfig:getHyperdriveConfig", args ?? new GetHyperdriveConfigInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHyperdriveConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        [Input("hyperdriveId")]
        public string? HyperdriveId { get; set; }

        public GetHyperdriveConfigArgs()
        {
        }
        public static new GetHyperdriveConfigArgs Empty => new GetHyperdriveConfigArgs();
    }

    public sealed class GetHyperdriveConfigInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        [Input("hyperdriveId")]
        public Input<string>? HyperdriveId { get; set; }

        public GetHyperdriveConfigInvokeArgs()
        {
        }
        public static new GetHyperdriveConfigInvokeArgs Empty => new GetHyperdriveConfigInvokeArgs();
    }


    [OutputType]
    public sealed class GetHyperdriveConfigResult
    {
        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        public readonly string AccountId;
        public readonly Outputs.GetHyperdriveConfigCachingResult Caching;
        /// <summary>
        /// Defines the creation time of the Hyperdrive configuration.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        public readonly string? HyperdriveId;
        /// <summary>
        /// Define configurations using a unique string identifier.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Defines the last modified time of the Hyperdrive configuration.
        /// </summary>
        public readonly string ModifiedOn;
        public readonly Outputs.GetHyperdriveConfigMtlsResult Mtls;
        public readonly string Name;
        public readonly Outputs.GetHyperdriveConfigOriginResult Origin;
        /// <summary>
        /// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
        /// </summary>
        public readonly int OriginConnectionLimit;

        [OutputConstructor]
        private GetHyperdriveConfigResult(
            string accountId,

            Outputs.GetHyperdriveConfigCachingResult caching,

            string createdOn,

            string? hyperdriveId,

            string id,

            string modifiedOn,

            Outputs.GetHyperdriveConfigMtlsResult mtls,

            string name,

            Outputs.GetHyperdriveConfigOriginResult origin,

            int originConnectionLimit)
        {
            AccountId = accountId;
            Caching = caching;
            CreatedOn = createdOn;
            HyperdriveId = hyperdriveId;
            Id = id;
            ModifiedOn = modifiedOn;
            Mtls = mtls;
            Name = name;
            Origin = origin;
            OriginConnectionLimit = originConnectionLimit;
        }
    }
}
