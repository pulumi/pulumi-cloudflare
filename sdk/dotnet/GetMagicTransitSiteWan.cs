// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetMagicTransitSiteWan
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteWan = Cloudflare.GetMagicTransitSiteWan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMagicTransitSiteWanResult> InvokeAsync(GetMagicTransitSiteWanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMagicTransitSiteWanResult>("cloudflare:index/getMagicTransitSiteWan:getMagicTransitSiteWan", args ?? new GetMagicTransitSiteWanArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteWan = Cloudflare.GetMagicTransitSiteWan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteWanResult> Invoke(GetMagicTransitSiteWanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteWanResult>("cloudflare:index/getMagicTransitSiteWan:getMagicTransitSiteWan", args ?? new GetMagicTransitSiteWanInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMagicTransitSiteWan = Cloudflare.GetMagicTransitSiteWan.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         WanId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMagicTransitSiteWanResult> Invoke(GetMagicTransitSiteWanInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMagicTransitSiteWanResult>("cloudflare:index/getMagicTransitSiteWan:getMagicTransitSiteWan", args ?? new GetMagicTransitSiteWanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMagicTransitSiteWanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("wanId")]
        public string? WanId { get; set; }

        public GetMagicTransitSiteWanArgs()
        {
        }
        public static new GetMagicTransitSiteWanArgs Empty => new GetMagicTransitSiteWanArgs();
    }

    public sealed class GetMagicTransitSiteWanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("wanId")]
        public Input<string>? WanId { get; set; }

        public GetMagicTransitSiteWanInvokeArgs()
        {
        }
        public static new GetMagicTransitSiteWanInvokeArgs Empty => new GetMagicTransitSiteWanInvokeArgs();
    }


    [OutputType]
    public sealed class GetMagicTransitSiteWanResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Magic WAN health check rate for tunnels created on this link. The default value is `mid`.
        /// Available values: "low", "mid", "high".
        /// </summary>
        public readonly string HealthCheckRate;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly int Physport;
        /// <summary>
        /// Priority of WAN for traffic loadbalancing.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string SiteId;
        /// <summary>
        /// (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
        /// </summary>
        public readonly Outputs.GetMagicTransitSiteWanStaticAddressingResult StaticAddressing;
        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        public readonly int VlanTag;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string? WanId;

        [OutputConstructor]
        private GetMagicTransitSiteWanResult(
            string accountId,

            string healthCheckRate,

            string id,

            string name,

            int physport,

            int priority,

            string siteId,

            Outputs.GetMagicTransitSiteWanStaticAddressingResult staticAddressing,

            int vlanTag,

            string? wanId)
        {
            AccountId = accountId;
            HealthCheckRate = healthCheckRate;
            Id = id;
            Name = name;
            Physport = physport;
            Priority = priority;
            SiteId = siteId;
            StaticAddressing = staticAddressing;
            VlanTag = vlanTag;
            WanId = wanId;
        }
    }
}
