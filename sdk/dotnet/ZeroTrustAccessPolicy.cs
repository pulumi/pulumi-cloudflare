// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// &gt; If 'application_id' is omitted, the policy created can be reused by multiple access applications.
    ///    Any `cloudflare.ZeroTrustAccessApplication` resource can reference reusable policies through its `policies` argument.
    ///    To destroy a reusable policy and remove it from all applications' policies lists on the same apply, preemptively set the
    ///    lifecycle option `create_before_destroy` to true on the 'cloudflare_zero_trust_access_policy' resource.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy example '&lt;account_id&gt;/&lt;policy_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy")]
    public partial class ZeroTrustAccessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Number of access applications currently using this policy.
        /// </summary>
        [Output("appCount")]
        public Output<int> AppCount { get; private set; } = null!;

        /// <summary>
        /// Administrators who can approve a temporary authentication request.
        /// </summary>
        [Output("approvalGroups")]
        public Output<ImmutableArray<Outputs.ZeroTrustAccessPolicyApprovalGroup>> ApprovalGroups { get; private set; } = null!;

        /// <summary>
        /// Requires the user to request access from an administrator at the start of each session.
        /// </summary>
        [Output("approvalRequired")]
        public Output<bool?> ApprovalRequired { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
        /// Available values: "allow", "deny", "non_identity", "bypass".
        /// </summary>
        [Output("decision")]
        public Output<string> Decision { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<Outputs.ZeroTrustAccessPolicyExclude>> Excludes { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        [Output("includes")]
        public Output<ImmutableArray<Outputs.ZeroTrustAccessPolicyInclude>> Includes { get; private set; } = null!;

        /// <summary>
        /// Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
        /// </summary>
        [Output("isolationRequired")]
        public Output<bool?> IsolationRequired { get; private set; } = null!;

        /// <summary>
        /// The name of the Access policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A custom message that will appear on the purpose justification screen.
        /// </summary>
        [Output("purposeJustificationPrompt")]
        public Output<string?> PurposeJustificationPrompt { get; private set; } = null!;

        /// <summary>
        /// Require users to enter a justification when they log in to the application.
        /// </summary>
        [Output("purposeJustificationRequired")]
        public Output<bool?> PurposeJustificationRequired { get; private set; } = null!;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
        /// </summary>
        [Output("requires")]
        public Output<ImmutableArray<Outputs.ZeroTrustAccessPolicyRequire>> Requires { get; private set; } = null!;

        [Output("reusable")]
        public Output<bool> Reusable { get; private set; } = null!;

        /// <summary>
        /// The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
        /// </summary>
        [Output("sessionDuration")]
        public Output<string> SessionDuration { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a ZeroTrustAccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZeroTrustAccessPolicy(string name, ZeroTrustAccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy", name, args ?? new ZeroTrustAccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZeroTrustAccessPolicy(string name, Input<string> id, ZeroTrustAccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/accessPolicy:AccessPolicy" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZeroTrustAccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZeroTrustAccessPolicy Get(string name, Input<string> id, ZeroTrustAccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ZeroTrustAccessPolicy(name, id, state, options);
        }
    }

    public sealed class ZeroTrustAccessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("approvalGroups")]
        private InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupArgs>? _approvalGroups;

        /// <summary>
        /// Administrators who can approve a temporary authentication request.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupArgs> ApprovalGroups
        {
            get => _approvalGroups ?? (_approvalGroups = new InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupArgs>());
            set => _approvalGroups = value;
        }

        /// <summary>
        /// Requires the user to request access from an administrator at the start of each session.
        /// </summary>
        [Input("approvalRequired")]
        public Input<bool>? ApprovalRequired { get; set; }

        /// <summary>
        /// The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
        /// Available values: "allow", "deny", "non_identity", "bypass".
        /// </summary>
        [Input("decision", required: true)]
        public Input<string> Decision { get; set; } = null!;

        [Input("excludes")]
        private InputList<Inputs.ZeroTrustAccessPolicyExcludeArgs>? _excludes;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyExcludeArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.ZeroTrustAccessPolicyExcludeArgs>());
            set => _excludes = value;
        }

        [Input("includes", required: true)]
        private InputList<Inputs.ZeroTrustAccessPolicyIncludeArgs>? _includes;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyIncludeArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.ZeroTrustAccessPolicyIncludeArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
        /// </summary>
        [Input("isolationRequired")]
        public Input<bool>? IsolationRequired { get; set; }

        /// <summary>
        /// The name of the Access policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// A custom message that will appear on the purpose justification screen.
        /// </summary>
        [Input("purposeJustificationPrompt")]
        public Input<string>? PurposeJustificationPrompt { get; set; }

        /// <summary>
        /// Require users to enter a justification when they log in to the application.
        /// </summary>
        [Input("purposeJustificationRequired")]
        public Input<bool>? PurposeJustificationRequired { get; set; }

        [Input("requires")]
        private InputList<Inputs.ZeroTrustAccessPolicyRequireArgs>? _requires;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyRequireArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.ZeroTrustAccessPolicyRequireArgs>());
            set => _requires = value;
        }

        /// <summary>
        /// The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        public ZeroTrustAccessPolicyArgs()
        {
        }
        public static new ZeroTrustAccessPolicyArgs Empty => new ZeroTrustAccessPolicyArgs();
    }

    public sealed class ZeroTrustAccessPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Number of access applications currently using this policy.
        /// </summary>
        [Input("appCount")]
        public Input<int>? AppCount { get; set; }

        [Input("approvalGroups")]
        private InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupGetArgs>? _approvalGroups;

        /// <summary>
        /// Administrators who can approve a temporary authentication request.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupGetArgs> ApprovalGroups
        {
            get => _approvalGroups ?? (_approvalGroups = new InputList<Inputs.ZeroTrustAccessPolicyApprovalGroupGetArgs>());
            set => _approvalGroups = value;
        }

        /// <summary>
        /// Requires the user to request access from an administrator at the start of each session.
        /// </summary>
        [Input("approvalRequired")]
        public Input<bool>? ApprovalRequired { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
        /// Available values: "allow", "deny", "non_identity", "bypass".
        /// </summary>
        [Input("decision")]
        public Input<string>? Decision { get; set; }

        [Input("excludes")]
        private InputList<Inputs.ZeroTrustAccessPolicyExcludeGetArgs>? _excludes;

        /// <summary>
        /// Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyExcludeGetArgs> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<Inputs.ZeroTrustAccessPolicyExcludeGetArgs>());
            set => _excludes = value;
        }

        [Input("includes")]
        private InputList<Inputs.ZeroTrustAccessPolicyIncludeGetArgs>? _includes;

        /// <summary>
        /// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyIncludeGetArgs> Includes
        {
            get => _includes ?? (_includes = new InputList<Inputs.ZeroTrustAccessPolicyIncludeGetArgs>());
            set => _includes = value;
        }

        /// <summary>
        /// Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
        /// </summary>
        [Input("isolationRequired")]
        public Input<bool>? IsolationRequired { get; set; }

        /// <summary>
        /// The name of the Access policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A custom message that will appear on the purpose justification screen.
        /// </summary>
        [Input("purposeJustificationPrompt")]
        public Input<string>? PurposeJustificationPrompt { get; set; }

        /// <summary>
        /// Require users to enter a justification when they log in to the application.
        /// </summary>
        [Input("purposeJustificationRequired")]
        public Input<bool>? PurposeJustificationRequired { get; set; }

        [Input("requires")]
        private InputList<Inputs.ZeroTrustAccessPolicyRequireGetArgs>? _requires;

        /// <summary>
        /// Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
        /// </summary>
        public InputList<Inputs.ZeroTrustAccessPolicyRequireGetArgs> Requires
        {
            get => _requires ?? (_requires = new InputList<Inputs.ZeroTrustAccessPolicyRequireGetArgs>());
            set => _requires = value;
        }

        [Input("reusable")]
        public Input<bool>? Reusable { get; set; }

        /// <summary>
        /// The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
        /// </summary>
        [Input("sessionDuration")]
        public Input<string>? SessionDuration { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ZeroTrustAccessPolicyState()
        {
        }
        public static new ZeroTrustAccessPolicyState Empty => new ZeroTrustAccessPolicyState();
    }
}
