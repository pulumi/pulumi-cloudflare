// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCertificatePack = new Cloudflare.CertificatePack("example_certificate_pack", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         CertificateAuthority = "lets_encrypt",
    ///         Hosts = new[]
    ///         {
    ///             "example.com",
    ///             "*.example.com",
    ///             "www.example.com",
    ///         },
    ///         Type = "advanced",
    ///         ValidationMethod = "txt",
    ///         ValidityDays = 14,
    ///         CloudflareBranding = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/certificatePack:CertificatePack example '&lt;zone_id&gt;/&lt;certificate_pack_id&gt;'
    /// ```
    /// 
    /// While supported, importing isn't recommended and it is advised to replace the
    /// 
    /// certificate entirely instead.
    /// </summary>
    [CloudflareResourceType("cloudflare:index/certificatePack:CertificatePack")]
    public partial class CertificatePack : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
        /// Available values: "google", "lets*encrypt", "ssl*com".
        /// </summary>
        [Output("certificateAuthority")]
        public Output<string> CertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
        /// </summary>
        [Output("cloudflareBranding")]
        public Output<bool?> CloudflareBranding { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        /// <summary>
        /// Status of certificate pack.
        /// Available values: "initializing", "pending*validation", "deleted", "pending*issuance", "pending*deployment", "pending*deletion", "pending*expiration", "expired", "active", "initializing*timed*out", "validation*timed*out", "issuance*timed*out", "deployment*timed*out", "deletion*timed*out", "pending*cleanup", "staging*deployment", "staging*active", "deactivating", "inactive", "backup*issued", "holding*deployment".
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Type of certificate pack.
        /// Available values: "advanced".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Validation Method selected for the order.
        /// Available values: "txt", "http", "email".
        /// </summary>
        [Output("validationMethod")]
        public Output<string> ValidationMethod { get; private set; } = null!;

        /// <summary>
        /// Validity Days selected for the order.
        /// Available values: 14, 30, 90, 365.
        /// </summary>
        [Output("validityDays")]
        public Output<int> ValidityDays { get; private set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a CertificatePack resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CertificatePack(string name, CertificatePackArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/certificatePack:CertificatePack", name, args ?? new CertificatePackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CertificatePack(string name, Input<string> id, CertificatePackState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/certificatePack:CertificatePack", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CertificatePack resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CertificatePack Get(string name, Input<string> id, CertificatePackState? state = null, CustomResourceOptions? options = null)
        {
            return new CertificatePack(name, id, state, options);
        }
    }

    public sealed class CertificatePackArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
        /// Available values: "google", "lets*encrypt", "ssl*com".
        /// </summary>
        [Input("certificateAuthority", required: true)]
        public Input<string> CertificateAuthority { get; set; } = null!;

        /// <summary>
        /// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
        /// </summary>
        [Input("cloudflareBranding")]
        public Input<bool>? CloudflareBranding { get; set; }

        [Input("hosts", required: true)]
        private InputList<string>? _hosts;

        /// <summary>
        /// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Type of certificate pack.
        /// Available values: "advanced".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Validation Method selected for the order.
        /// Available values: "txt", "http", "email".
        /// </summary>
        [Input("validationMethod", required: true)]
        public Input<string> ValidationMethod { get; set; } = null!;

        /// <summary>
        /// Validity Days selected for the order.
        /// Available values: 14, 30, 90, 365.
        /// </summary>
        [Input("validityDays", required: true)]
        public Input<int> ValidityDays { get; set; } = null!;

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public CertificatePackArgs()
        {
        }
        public static new CertificatePackArgs Empty => new CertificatePackArgs();
    }

    public sealed class CertificatePackState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
        /// Available values: "google", "lets*encrypt", "ssl*com".
        /// </summary>
        [Input("certificateAuthority")]
        public Input<string>? CertificateAuthority { get; set; }

        /// <summary>
        /// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
        /// </summary>
        [Input("cloudflareBranding")]
        public Input<bool>? CloudflareBranding { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// Status of certificate pack.
        /// Available values: "initializing", "pending*validation", "deleted", "pending*issuance", "pending*deployment", "pending*deletion", "pending*expiration", "expired", "active", "initializing*timed*out", "validation*timed*out", "issuance*timed*out", "deployment*timed*out", "deletion*timed*out", "pending*cleanup", "staging*deployment", "staging*active", "deactivating", "inactive", "backup*issued", "holding*deployment".
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Type of certificate pack.
        /// Available values: "advanced".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Validation Method selected for the order.
        /// Available values: "txt", "http", "email".
        /// </summary>
        [Input("validationMethod")]
        public Input<string>? ValidationMethod { get; set; }

        /// <summary>
        /// Validity Days selected for the order.
        /// Available values: 14, 30, 90, 365.
        /// </summary>
        [Input("validityDays")]
        public Input<int>? ValidityDays { get; set; }

        /// <summary>
        /// Identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public CertificatePackState()
        {
        }
        public static new CertificatePackState Empty => new CertificatePackState();
    }
}
