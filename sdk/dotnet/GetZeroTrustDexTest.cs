// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustDexTest
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDexTest = Cloudflare.GetZeroTrustDexTest.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         DexTestId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustDexTestResult> InvokeAsync(GetZeroTrustDexTestArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustDexTestResult>("cloudflare:index/getZeroTrustDexTest:getZeroTrustDexTest", args ?? new GetZeroTrustDexTestArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDexTest = Cloudflare.GetZeroTrustDexTest.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         DexTestId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDexTestResult> Invoke(GetZeroTrustDexTestInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDexTestResult>("cloudflare:index/getZeroTrustDexTest:getZeroTrustDexTest", args ?? new GetZeroTrustDexTestInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustDexTest = Cloudflare.GetZeroTrustDexTest.Invoke(new()
        ///     {
        ///         AccountId = "01a7362d577a6c3019a474fd6f485823",
        ///         DexTestId = "372e67954025e0ba6aaa6d586b9e0b59",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustDexTestResult> Invoke(GetZeroTrustDexTestInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustDexTestResult>("cloudflare:index/getZeroTrustDexTest:getZeroTrustDexTest", args ?? new GetZeroTrustDexTestInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustDexTestArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        [Input("dexTestId")]
        public string? DexTestId { get; set; }

        public GetZeroTrustDexTestArgs()
        {
        }
        public static new GetZeroTrustDexTestArgs Empty => new GetZeroTrustDexTestArgs();
    }

    public sealed class GetZeroTrustDexTestInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        [Input("dexTestId")]
        public Input<string>? DexTestId { get; set; }

        public GetZeroTrustDexTestInvokeArgs()
        {
        }
        public static new GetZeroTrustDexTestInvokeArgs Empty => new GetZeroTrustDexTestInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustDexTestResult
    {
        public readonly string AccountId;
        /// <summary>
        /// The configuration object which contains the details for the WARP client to conduct the test.
        /// </summary>
        public readonly Outputs.GetZeroTrustDexTestDataResult Data;
        /// <summary>
        /// Additional details about the test.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        public readonly string? DexTestId;
        /// <summary>
        /// Determines whether or not the test is active.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// How often the test will run.
        /// </summary>
        public readonly string Interval;
        /// <summary>
        /// The name of the DEX test. Must be unique.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// DEX rules targeted by this test
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustDexTestTargetPolicyResult> TargetPolicies;
        public readonly bool Targeted;
        /// <summary>
        /// The unique identifier for the test.
        /// </summary>
        public readonly string TestId;

        [OutputConstructor]
        private GetZeroTrustDexTestResult(
            string accountId,

            Outputs.GetZeroTrustDexTestDataResult data,

            string description,

            string? dexTestId,

            bool enabled,

            string id,

            string interval,

            string name,

            ImmutableArray<Outputs.GetZeroTrustDexTestTargetPolicyResult> targetPolicies,

            bool targeted,

            string testId)
        {
            AccountId = accountId;
            Data = data;
            Description = description;
            DexTestId = dexTestId;
            Enabled = enabled;
            Id = id;
            Interval = interval;
            Name = name;
            TargetPolicies = targetPolicies;
            Targeted = targeted;
            TestId = testId;
        }
    }
}
