// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource which manages Cloudflare Pages projects.
    /// 
    /// &gt; If you are using a `source` block configuration, you must first have a
    /// connected GitHub or GitLab account connected to Cloudflare. See the
    /// [Getting Started with Pages] documentation on how to link your accounts.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Basic project
    ///     var basicProject = new Cloudflare.PagesProject("basicProject", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Name = "this-is-my-project-01",
    ///         ProductionBranch = "main",
    ///     });
    /// 
    ///     // Manage build config
    ///     var buildConfig = new Cloudflare.PagesProject("buildConfig", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         BuildConfig = new Cloudflare.Inputs.PagesProjectBuildConfigArgs
    ///         {
    ///             BuildCommand = "npm run build",
    ///             DestinationDir = "build",
    ///             RootDir = "/",
    ///             WebAnalyticsTag = "cee1c73f6e4743d0b5e6bb1a0bcaabcc",
    ///             WebAnalyticsToken = "021e1057c18547eca7b79f2516f06o7x",
    ///         },
    ///         Name = "this-is-my-project-01",
    ///         ProductionBranch = "main",
    ///     });
    /// 
    ///     // Manage project source
    ///     var sourceConfig = new Cloudflare.PagesProject("sourceConfig", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         Name = "this-is-my-project-01",
    ///         ProductionBranch = "main",
    ///         Source = new Cloudflare.Inputs.PagesProjectSourceArgs
    ///         {
    ///             Config = new Cloudflare.Inputs.PagesProjectSourceConfigArgs
    ///             {
    ///                 DeploymentsEnabled = true,
    ///                 Owner = "cloudflare",
    ///                 PrCommentsEnabled = true,
    ///                 PreviewBranchExcludes = new[]
    ///                 {
    ///                     "main",
    ///                     "prod",
    ///                 },
    ///                 PreviewBranchIncludes = new[]
    ///                 {
    ///                     "dev",
    ///                     "preview",
    ///                 },
    ///                 PreviewDeploymentSetting = "custom",
    ///                 ProductionBranch = "main",
    ///                 ProductionDeploymentEnabled = true,
    ///                 RepoName = "ninjakittens",
    ///             },
    ///             Type = "github",
    ///         },
    ///     });
    /// 
    ///     // Manage deployment configs
    ///     var deploymentConfigs = new Cloudflare.PagesProject("deploymentConfigs", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         DeploymentConfigs = new Cloudflare.Inputs.PagesProjectDeploymentConfigsArgs
    ///         {
    ///             Preview = new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewArgs
    ///             {
    ///                 CompatibilityDate = "2022-08-15",
    ///                 CompatibilityFlags = new[]
    ///                 {
    ///                     "preview_flag",
    ///                 },
    ///                 D1Databases = 
    ///                 {
    ///                     { "D1BINDING", "445e2955-951a-4358-a35b-a4d0c813f63" },
    ///                 },
    ///                 DurableObjectNamespaces = 
    ///                 {
    ///                     { "DOBINDING", "5eb63bbbe01eeed093cb22bb8f5acdc3" },
    ///                 },
    ///                 EnvironmentVariables = 
    ///                 {
    ///                     { "ENVIRONMENT", "preview" },
    ///                 },
    ///                 KvNamespaces = 
    ///                 {
    ///                     { "KVBINDING", "5eb63bbbe01eeed093cb22bb8f5acdc3" },
    ///                 },
    ///                 R2Buckets = 
    ///                 {
    ///                     { "R2BINDING", "some-bucket" },
    ///                 },
    ///             },
    ///             Production = new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionArgs
    ///             {
    ///                 CompatibilityDate = "2022-08-16",
    ///                 CompatibilityFlags = new[]
    ///                 {
    ///                     "production_flag",
    ///                     "second flag",
    ///                 },
    ///                 D1Databases = 
    ///                 {
    ///                     { "D1BINDING1", "445e2955-951a-4358-a35b-a4d0c813f63" },
    ///                     { "D1BINDING2", "a399414b-c697-409a-a688-377db6433cd9" },
    ///                 },
    ///                 DurableObjectNamespaces = 
    ///                 {
    ///                     { "DOBINDING1", "5eb63bbbe01eeed093cb22bb8f5acdc3" },
    ///                     { "DOBINDING2", "3cdca5f8bb22bc390deee10ebbb36be5" },
    ///                 },
    ///                 EnvironmentVariables = 
    ///                 {
    ///                     { "ENVIRONMENT", "production" },
    ///                     { "OTHERVALUE", "other value" },
    ///                 },
    ///                 KvNamespaces = 
    ///                 {
    ///                     { "KVBINDING1", "5eb63bbbe01eeed093cb22bb8f5acdc3" },
    ///                     { "KVBINDING2", "3cdca5f8bb22bc390deee10ebbb36be5" },
    ///                 },
    ///                 R2Buckets = 
    ///                 {
    ///                     { "R2BINDING1", "some-bucket" },
    ///                     { "R2BINDING2", "other-bucket" },
    ///                 },
    ///             },
    ///         },
    ///         Name = "this-is-my-project-01",
    ///         ProductionBranch = "main",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/pagesProject:PagesProject example &lt;account_id&gt;/&lt;project_name&gt;
    /// ```
    /// 
    ///  [Getting Started with Pages]https://developers.cloudflare.com/pages/get-started/#connect-your-git-provider-to-pages
    /// </summary>
    [CloudflareResourceType("cloudflare:index/pagesProject:PagesProject")]
    public partial class PagesProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Configuration for the project build process.
        /// </summary>
        [Output("buildConfig")]
        public Output<Outputs.PagesProjectBuildConfig?> BuildConfig { get; private set; } = null!;

        /// <summary>
        /// When the project was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Configuration for deployments in a project.
        /// </summary>
        [Output("deploymentConfigs")]
        public Output<Outputs.PagesProjectDeploymentConfigs?> DeploymentConfigs { get; private set; } = null!;

        /// <summary>
        /// A list of associated custom domains for the project.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Name of the project. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the branch that is used for the production environment.
        /// </summary>
        [Output("productionBranch")]
        public Output<string> ProductionBranch { get; private set; } = null!;

        /// <summary>
        /// Configuration for the project source.
        /// </summary>
        [Output("source")]
        public Output<Outputs.PagesProjectSource?> Source { get; private set; } = null!;

        /// <summary>
        /// The Cloudflare subdomain associated with the project.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;


        /// <summary>
        /// Create a PagesProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PagesProject(string name, PagesProjectArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/pagesProject:PagesProject", name, args ?? new PagesProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PagesProject(string name, Input<string> id, PagesProjectState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/pagesProject:PagesProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PagesProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PagesProject Get(string name, Input<string> id, PagesProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new PagesProject(name, id, state, options);
        }
    }

    public sealed class PagesProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Configuration for the project build process.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.PagesProjectBuildConfigArgs>? BuildConfig { get; set; }

        /// <summary>
        /// Configuration for deployments in a project.
        /// </summary>
        [Input("deploymentConfigs")]
        public Input<Inputs.PagesProjectDeploymentConfigsArgs>? DeploymentConfigs { get; set; }

        /// <summary>
        /// Name of the project. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the branch that is used for the production environment.
        /// </summary>
        [Input("productionBranch", required: true)]
        public Input<string> ProductionBranch { get; set; } = null!;

        /// <summary>
        /// Configuration for the project source.
        /// </summary>
        [Input("source")]
        public Input<Inputs.PagesProjectSourceArgs>? Source { get; set; }

        public PagesProjectArgs()
        {
        }
        public static new PagesProjectArgs Empty => new PagesProjectArgs();
    }

    public sealed class PagesProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Configuration for the project build process.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.PagesProjectBuildConfigGetArgs>? BuildConfig { get; set; }

        /// <summary>
        /// When the project was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Configuration for deployments in a project.
        /// </summary>
        [Input("deploymentConfigs")]
        public Input<Inputs.PagesProjectDeploymentConfigsGetArgs>? DeploymentConfigs { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// A list of associated custom domains for the project.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Name of the project. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the branch that is used for the production environment.
        /// </summary>
        [Input("productionBranch")]
        public Input<string>? ProductionBranch { get; set; }

        /// <summary>
        /// Configuration for the project source.
        /// </summary>
        [Input("source")]
        public Input<Inputs.PagesProjectSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// The Cloudflare subdomain associated with the project.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public PagesProjectState()
        {
        }
        public static new PagesProjectState Empty => new PagesProjectState();
    }
}
