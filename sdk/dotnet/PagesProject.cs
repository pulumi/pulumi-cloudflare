// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// &gt; If you are using a `Source` block configuration, you must first have a
    ///    connected GitHub or GitLab account connected to Cloudflare. See the
    ///    [Getting Started with Pages] documentation on how to link your accounts.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePagesProject = new Cloudflare.PagesProject("example_pages_project", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         BuildConfig = new Cloudflare.Inputs.PagesProjectBuildConfigArgs
    ///         {
    ///             Build_caching = true,
    ///             Build_command = "npm run build",
    ///             Destination_dir = "build",
    ///             Root_dir = "/",
    ///             Web_analytics_tag = "cee1c73f6e4743d0b5e6bb1a0bcaabcc",
    ///             Web_analytics_token = "021e1057c18547eca7b79f2516f06o7x",
    ///         },
    ///         DeploymentConfigs = new Cloudflare.Inputs.PagesProjectDeploymentConfigsArgs
    ///         {
    ///             Preview = new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewArgs
    ///             {
    ///                 AiBindings = 
    ///                 {
    ///                     { "AI_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewAiBindingsArgs
    ///                     {
    ///                         ProjectId = "some-project-id",
    ///                     } },
    ///                 },
    ///                 AnalyticsEngineDatasets = 
    ///                 {
    ///                     { "ANALYTICS_ENGINE_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasetsArgs
    ///                     {
    ///                         Dataset = "api_analytics",
    ///                     } },
    ///                 },
    ///                 Browsers = 
    ///                 {
    ///                     { "BROWSER", null },
    ///                 },
    ///                 CompatibilityDate = "2022-01-01",
    ///                 CompatibilityFlags = new[]
    ///                 {
    ///                     "url_standard",
    ///                 },
    ///                 D1Databases = 
    ///                 {
    ///                     { "D1_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewD1DatabasesArgs
    ///                     {
    ///                         Id = "445e2955-951a-43f8-a35b-a4d0c8138f63",
    ///                     } },
    ///                 },
    ///                 DurableObjectNamespaces = 
    ///                 {
    ///                     { "DO_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewDurableObjectNamespacesArgs
    ///                     {
    ///                         NamespaceId = "5eb63bbbe01eeed093cb22bb8f5acdc3",
    ///                     } },
    ///                 },
    ///                 EnvVars = 
    ///                 {
    ///                     { "foo", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewEnvVarsArgs
    ///                     {
    ///                         Type = "plain_text",
    ///                         Value = "hello world",
    ///                     } },
    ///                 },
    ///                 HyperdriveBindings = 
    ///                 {
    ///                     { "HYPERDRIVE", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewHyperdriveBindingsArgs
    ///                     {
    ///                         Id = "a76a99bc342644deb02c38d66082262a",
    ///                     } },
    ///                 },
    ///                 KvNamespaces = 
    ///                 {
    ///                     { "KV_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewKvNamespacesArgs
    ///                     {
    ///                         NamespaceId = "5eb63bbbe01eeed093cb22bb8f5acdc3",
    ///                     } },
    ///                 },
    ///                 MtlsCertificates = 
    ///                 {
    ///                     { "MTLS", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewMtlsCertificatesArgs
    ///                     {
    ///                         CertificateId = "d7cdd17c-916f-4cb7-aabe-585eb382ec4e",
    ///                     } },
    ///                 },
    ///                 Placement = new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewPlacementArgs
    ///                 {
    ///                     Mode = "smart",
    ///                 },
    ///                 QueueProducers = 
    ///                 {
    ///                     { "QUEUE_PRODUCER_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewQueueProducersArgs
    ///                     {
    ///                         Name = "some-queue",
    ///                     } },
    ///                 },
    ///                 R2Buckets = 
    ///                 {
    ///                     { "R2_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewR2BucketsArgs
    ///                     {
    ///                         Jurisdiction = "eu",
    ///                         Name = "some-bucket",
    ///                     } },
    ///                 },
    ///                 Services = 
    ///                 {
    ///                     { "SERVICE_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewServicesArgs
    ///                     {
    ///                         Entrypoint = "MyHandler",
    ///                         Environment = "production",
    ///                         Service = "example-worker",
    ///                     } },
    ///                 },
    ///                 VectorizeBindings = 
    ///                 {
    ///                     { "VECTORIZE", new Cloudflare.Inputs.PagesProjectDeploymentConfigsPreviewVectorizeBindingsArgs
    ///                     {
    ///                         IndexName = "my_index",
    ///                     } },
    ///                 },
    ///             },
    ///             Production = new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionArgs
    ///             {
    ///                 AiBindings = 
    ///                 {
    ///                     { "AI_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionAiBindingsArgs
    ///                     {
    ///                         ProjectId = "some-project-id",
    ///                     } },
    ///                 },
    ///                 AnalyticsEngineDatasets = 
    ///                 {
    ///                     { "ANALYTICS_ENGINE_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionAnalyticsEngineDatasetsArgs
    ///                     {
    ///                         Dataset = "api_analytics",
    ///                     } },
    ///                 },
    ///                 Browsers = 
    ///                 {
    ///                     { "BROWSER", null },
    ///                 },
    ///                 CompatibilityDate = "2022-01-01",
    ///                 CompatibilityFlags = new[]
    ///                 {
    ///                     "url_standard",
    ///                 },
    ///                 D1Databases = 
    ///                 {
    ///                     { "D1_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionD1DatabasesArgs
    ///                     {
    ///                         Id = "445e2955-951a-43f8-a35b-a4d0c8138f63",
    ///                     } },
    ///                 },
    ///                 DurableObjectNamespaces = 
    ///                 {
    ///                     { "DO_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionDurableObjectNamespacesArgs
    ///                     {
    ///                         NamespaceId = "5eb63bbbe01eeed093cb22bb8f5acdc3",
    ///                     } },
    ///                 },
    ///                 EnvVars = 
    ///                 {
    ///                     { "foo", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionEnvVarsArgs
    ///                     {
    ///                         Type = "plain_text",
    ///                         Value = "hello world",
    ///                     } },
    ///                 },
    ///                 HyperdriveBindings = 
    ///                 {
    ///                     { "HYPERDRIVE", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionHyperdriveBindingsArgs
    ///                     {
    ///                         Id = "a76a99bc342644deb02c38d66082262a",
    ///                     } },
    ///                 },
    ///                 KvNamespaces = 
    ///                 {
    ///                     { "KV_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionKvNamespacesArgs
    ///                     {
    ///                         NamespaceId = "5eb63bbbe01eeed093cb22bb8f5acdc3",
    ///                     } },
    ///                 },
    ///                 MtlsCertificates = 
    ///                 {
    ///                     { "MTLS", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionMtlsCertificatesArgs
    ///                     {
    ///                         CertificateId = "d7cdd17c-916f-4cb7-aabe-585eb382ec4e",
    ///                     } },
    ///                 },
    ///                 Placement = new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionPlacementArgs
    ///                 {
    ///                     Mode = "smart",
    ///                 },
    ///                 QueueProducers = 
    ///                 {
    ///                     { "QUEUE_PRODUCER_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionQueueProducersArgs
    ///                     {
    ///                         Name = "some-queue",
    ///                     } },
    ///                 },
    ///                 R2Buckets = 
    ///                 {
    ///                     { "R2_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionR2BucketsArgs
    ///                     {
    ///                         Jurisdiction = "eu",
    ///                         Name = "some-bucket",
    ///                     } },
    ///                 },
    ///                 Services = 
    ///                 {
    ///                     { "SERVICE_BINDING", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionServicesArgs
    ///                     {
    ///                         Entrypoint = "MyHandler",
    ///                         Environment = "production",
    ///                         Service = "example-worker",
    ///                     } },
    ///                 },
    ///                 VectorizeBindings = 
    ///                 {
    ///                     { "VECTORIZE", new Cloudflare.Inputs.PagesProjectDeploymentConfigsProductionVectorizeBindingsArgs
    ///                     {
    ///                         IndexName = "my_index",
    ///                     } },
    ///                 },
    ///             },
    ///         },
    ///         Name = "NextJS Blog",
    ///         ProductionBranch = "main",
    ///         Source = new Cloudflare.Inputs.PagesProjectSourceArgs
    ///         {
    ///             Config = new Cloudflare.Inputs.PagesProjectSourceConfigArgs
    ///             {
    ///                 DeploymentsEnabled = true,
    ///                 Owner = "owner",
    ///                 PathExcludes = new[]
    ///                 {
    ///                     "string",
    ///                 },
    ///                 PathIncludes = new[]
    ///                 {
    ///                     "string",
    ///                 },
    ///                 PrCommentsEnabled = true,
    ///                 PreviewBranchExcludes = new[]
    ///                 {
    ///                     "string",
    ///                 },
    ///                 PreviewBranchIncludes = new[]
    ///                 {
    ///                     "string",
    ///                 },
    ///                 PreviewDeploymentSetting = "all",
    ///                 ProductionBranch = "production_branch",
    ///                 ProductionDeploymentsEnabled = true,
    ///                 RepoName = "repo_name",
    ///             },
    ///             Type = "type",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// !&gt; It is not possible to import a pages project with secret environment variables. If you have a secret environment variable, you must remove it from your project before importing it.
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/pagesProject:PagesProject example '&lt;account_id&gt;/&lt;project_name&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/pagesProject:PagesProject")]
    public partial class PagesProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Configs for the project build process.
        /// </summary>
        [Output("buildConfig")]
        public Output<Outputs.PagesProjectBuildConfig?> BuildConfig { get; private set; } = null!;

        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        [Output("canonicalDeployment")]
        public Output<Outputs.PagesProjectCanonicalDeployment> CanonicalDeployment { get; private set; } = null!;

        /// <summary>
        /// When the project was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Configs for deployments in a project.
        /// </summary>
        [Output("deploymentConfigs")]
        public Output<Outputs.PagesProjectDeploymentConfigs?> DeploymentConfigs { get; private set; } = null!;

        /// <summary>
        /// A list of associated custom domains for the project.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        [Output("latestDeployment")]
        public Output<Outputs.PagesProjectLatestDeployment> LatestDeployment { get; private set; } = null!;

        /// <summary>
        /// Name of the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Production branch of the project. Used to identify production deployments.
        /// </summary>
        [Output("productionBranch")]
        public Output<string?> ProductionBranch { get; private set; } = null!;

        [Output("source")]
        public Output<Outputs.PagesProjectSource?> Source { get; private set; } = null!;

        /// <summary>
        /// The Cloudflare subdomain associated with the project.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;


        /// <summary>
        /// Create a PagesProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PagesProject(string name, PagesProjectArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/pagesProject:PagesProject", name, args ?? new PagesProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PagesProject(string name, Input<string> id, PagesProjectState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/pagesProject:PagesProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PagesProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PagesProject Get(string name, Input<string> id, PagesProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new PagesProject(name, id, state, options);
        }
    }

    public sealed class PagesProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// Configs for the project build process.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.PagesProjectBuildConfigArgs>? BuildConfig { get; set; }

        /// <summary>
        /// Configs for deployments in a project.
        /// </summary>
        [Input("deploymentConfigs")]
        public Input<Inputs.PagesProjectDeploymentConfigsArgs>? DeploymentConfigs { get; set; }

        /// <summary>
        /// Name of the project.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Production branch of the project. Used to identify production deployments.
        /// </summary>
        [Input("productionBranch")]
        public Input<string>? ProductionBranch { get; set; }

        [Input("source")]
        public Input<Inputs.PagesProjectSourceArgs>? Source { get; set; }

        public PagesProjectArgs()
        {
        }
        public static new PagesProjectArgs Empty => new PagesProjectArgs();
    }

    public sealed class PagesProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Configs for the project build process.
        /// </summary>
        [Input("buildConfig")]
        public Input<Inputs.PagesProjectBuildConfigGetArgs>? BuildConfig { get; set; }

        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        [Input("canonicalDeployment")]
        public Input<Inputs.PagesProjectCanonicalDeploymentGetArgs>? CanonicalDeployment { get; set; }

        /// <summary>
        /// When the project was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Configs for deployments in a project.
        /// </summary>
        [Input("deploymentConfigs")]
        public Input<Inputs.PagesProjectDeploymentConfigsGetArgs>? DeploymentConfigs { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// A list of associated custom domains for the project.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Most recent deployment to the repo.
        /// </summary>
        [Input("latestDeployment")]
        public Input<Inputs.PagesProjectLatestDeploymentGetArgs>? LatestDeployment { get; set; }

        /// <summary>
        /// Name of the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Production branch of the project. Used to identify production deployments.
        /// </summary>
        [Input("productionBranch")]
        public Input<string>? ProductionBranch { get; set; }

        [Input("source")]
        public Input<Inputs.PagesProjectSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// The Cloudflare subdomain associated with the project.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public PagesProjectState()
        {
        }
        public static new PagesProjectState Empty => new PagesProjectState();
    }
}
