// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetPageRule
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageRule = Cloudflare.GetPageRule.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PageruleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPageRuleResult> InvokeAsync(GetPageRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPageRuleResult>("cloudflare:index/getPageRule:getPageRule", args ?? new GetPageRuleArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageRule = Cloudflare.GetPageRule.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PageruleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPageRuleResult> Invoke(GetPageRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPageRuleResult>("cloudflare:index/getPageRule:getPageRule", args ?? new GetPageRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePageRule = Cloudflare.GetPageRule.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         PageruleId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPageRuleResult> Invoke(GetPageRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPageRuleResult>("cloudflare:index/getPageRule:getPageRule", args ?? new GetPageRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPageRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("pageruleId", required: true)]
        public string PageruleId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetPageRuleArgs()
        {
        }
        public static new GetPageRuleArgs Empty => new GetPageRuleArgs();
    }

    public sealed class GetPageRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("pageruleId", required: true)]
        public Input<string> PageruleId { get; set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetPageRuleInvokeArgs()
        {
        }
        public static new GetPageRuleInvokeArgs Empty => new GetPageRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetPageRuleResult
    {
        /// <summary>
        /// The timestamp of when the Page Rule was created.
        /// </summary>
        public readonly string CreatedOn;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The timestamp of when the Page Rule was last modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string PageruleId;
        /// <summary>
        /// The priority of the rule, used to define which Page Rule is processed
        /// over another. A higher number indicates a higher priority. For example,
        /// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
        /// specific Page Rule to take precedence (rule B: `/images/special/*`),
        /// specify a higher priority for rule B so it overrides rule A.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The status of the Page Rule.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetPageRuleResult(
            string createdOn,

            string id,

            string modifiedOn,

            string pageruleId,

            int priority,

            string status,

            string zoneId)
        {
            CreatedOn = createdOn;
            Id = id;
            ModifiedOn = modifiedOn;
            PageruleId = pageruleId;
            Priority = priority;
            Status = status;
            ZoneId = zoneId;
        }
    }
}
