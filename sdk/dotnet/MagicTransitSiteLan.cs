// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan example '&lt;account_id&gt;/&lt;site_id&gt;/&lt;lan_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan")]
    public partial class MagicTransitSiteLan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
        /// </summary>
        [Output("haLink")]
        public Output<bool?> HaLink { get; private set; } = null!;

        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("nat")]
        public Output<Outputs.MagicTransitSiteLanNat?> Nat { get; private set; } = null!;

        [Output("physport")]
        public Output<int> Physport { get; private set; } = null!;

        [Output("routedSubnets")]
        public Output<ImmutableArray<Outputs.MagicTransitSiteLanRoutedSubnet>> RoutedSubnets { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
        /// </summary>
        [Output("staticAddressing")]
        public Output<Outputs.MagicTransitSiteLanStaticAddressing?> StaticAddressing { get; private set; } = null!;

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Output("vlanTag")]
        public Output<int?> VlanTag { get; private set; } = null!;


        /// <summary>
        /// Create a MagicTransitSiteLan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicTransitSiteLan(string name, MagicTransitSiteLanArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan", name, args ?? new MagicTransitSiteLanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicTransitSiteLan(string name, Input<string> id, MagicTransitSiteLanState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicTransitSiteLan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicTransitSiteLan Get(string name, Input<string> id, MagicTransitSiteLanState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicTransitSiteLan(name, id, state, options);
        }
    }

    public sealed class MagicTransitSiteLanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
        /// </summary>
        [Input("haLink")]
        public Input<bool>? HaLink { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat")]
        public Input<Inputs.MagicTransitSiteLanNatArgs>? Nat { get; set; }

        [Input("physport", required: true)]
        public Input<int> Physport { get; set; } = null!;

        [Input("routedSubnets")]
        private InputList<Inputs.MagicTransitSiteLanRoutedSubnetArgs>? _routedSubnets;
        public InputList<Inputs.MagicTransitSiteLanRoutedSubnetArgs> RoutedSubnets
        {
            get => _routedSubnets ?? (_routedSubnets = new InputList<Inputs.MagicTransitSiteLanRoutedSubnetArgs>());
            set => _routedSubnets = value;
        }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
        /// </summary>
        [Input("staticAddressing")]
        public Input<Inputs.MagicTransitSiteLanStaticAddressingArgs>? StaticAddressing { get; set; }

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Input("vlanTag")]
        public Input<int>? VlanTag { get; set; }

        public MagicTransitSiteLanArgs()
        {
        }
        public static new MagicTransitSiteLanArgs Empty => new MagicTransitSiteLanArgs();
    }

    public sealed class MagicTransitSiteLanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
        /// </summary>
        [Input("haLink")]
        public Input<bool>? HaLink { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat")]
        public Input<Inputs.MagicTransitSiteLanNatGetArgs>? Nat { get; set; }

        [Input("physport")]
        public Input<int>? Physport { get; set; }

        [Input("routedSubnets")]
        private InputList<Inputs.MagicTransitSiteLanRoutedSubnetGetArgs>? _routedSubnets;
        public InputList<Inputs.MagicTransitSiteLanRoutedSubnetGetArgs> RoutedSubnets
        {
            get => _routedSubnets ?? (_routedSubnets = new InputList<Inputs.MagicTransitSiteLanRoutedSubnetGetArgs>());
            set => _routedSubnets = value;
        }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
        /// </summary>
        [Input("staticAddressing")]
        public Input<Inputs.MagicTransitSiteLanStaticAddressingGetArgs>? StaticAddressing { get; set; }

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Input("vlanTag")]
        public Input<int>? VlanTag { get; set; }

        public MagicTransitSiteLanState()
        {
        }
        public static new MagicTransitSiteLanState Empty => new MagicTransitSiteLanState();
    }
}
