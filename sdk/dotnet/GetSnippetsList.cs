// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetSnippetsList
    {
        public static Task<GetSnippetsListResult> InvokeAsync(GetSnippetsListArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnippetsListResult>("cloudflare:index/getSnippetsList:getSnippetsList", args ?? new GetSnippetsListArgs(), options.WithDefaults());

        public static Output<GetSnippetsListResult> Invoke(GetSnippetsListInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnippetsListResult>("cloudflare:index/getSnippetsList:getSnippetsList", args ?? new GetSnippetsListInvokeArgs(), options.WithDefaults());

        public static Output<GetSnippetsListResult> Invoke(GetSnippetsListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnippetsListResult>("cloudflare:index/getSnippetsList:getSnippetsList", args ?? new GetSnippetsListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnippetsListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public int? MaxItems { get; set; }

        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetSnippetsListArgs()
        {
        }
        public static new GetSnippetsListArgs Empty => new GetSnippetsListArgs();
    }

    public sealed class GetSnippetsListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        [Input("maxItems")]
        public Input<int>? MaxItems { get; set; }

        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetSnippetsListInvokeArgs()
        {
        }
        public static new GetSnippetsListInvokeArgs Empty => new GetSnippetsListInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnippetsListResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Max items to fetch, default: 1000
        /// </summary>
        public readonly int? MaxItems;
        /// <summary>
        /// The items returned by the data source
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnippetsListResultResult> Results;
        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetSnippetsListResult(
            string id,

            int? maxItems,

            ImmutableArray<Outputs.GetSnippetsListResultResult> results,

            string zoneId)
        {
            Id = id;
            MaxItems = maxItems;
            Results = results;
            ZoneId = zoneId;
        }
    }
}
