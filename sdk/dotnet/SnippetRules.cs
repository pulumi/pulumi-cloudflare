// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [CloudflareResourceType("cloudflare:index/snippetRules:SnippetRules")]
    public partial class SnippetRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An informative description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the rule should be executed.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The expression defining which traffic will match the rule.
        /// </summary>
        [Output("expression")]
        public Output<string> Expression { get; private set; } = null!;

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Output("lastUpdated")]
        public Output<string> LastUpdated { get; private set; } = null!;

        /// <summary>
        /// A list of snippet rules.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.SnippetRulesRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// The identifying name of the snippet.
        /// </summary>
        [Output("snippetName")]
        public Output<string> SnippetName { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a SnippetRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnippetRules(string name, SnippetRulesArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/snippetRules:SnippetRules", name, args ?? new SnippetRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnippetRules(string name, Input<string> id, SnippetRulesState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/snippetRules:SnippetRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnippetRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnippetRules Get(string name, Input<string> id, SnippetRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new SnippetRules(name, id, state, options);
        }
    }

    public sealed class SnippetRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules", required: true)]
        private InputList<Inputs.SnippetRulesRuleArgs>? _rules;

        /// <summary>
        /// A list of snippet rules.
        /// </summary>
        public InputList<Inputs.SnippetRulesRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SnippetRulesRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public SnippetRulesArgs()
        {
        }
        public static new SnippetRulesArgs Empty => new SnippetRulesArgs();
    }

    public sealed class SnippetRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An informative description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule should be executed.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The expression defining which traffic will match the rule.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// The timestamp of when the rule was last modified.
        /// </summary>
        [Input("lastUpdated")]
        public Input<string>? LastUpdated { get; set; }

        [Input("rules")]
        private InputList<Inputs.SnippetRulesRuleGetArgs>? _rules;

        /// <summary>
        /// A list of snippet rules.
        /// </summary>
        public InputList<Inputs.SnippetRulesRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SnippetRulesRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// The identifying name of the snippet.
        /// </summary>
        [Input("snippetName")]
        public Input<string>? SnippetName { get; set; }

        /// <summary>
        /// The unique ID of the zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public SnippetRulesState()
        {
        }
        public static new SnippetRulesState Empty => new SnippetRulesState();
    }
}
