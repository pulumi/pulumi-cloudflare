// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetTotalTls
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTotalTls = Cloudflare.GetTotalTls.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTotalTlsResult> InvokeAsync(GetTotalTlsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTotalTlsResult>("cloudflare:index/getTotalTls:getTotalTls", args ?? new GetTotalTlsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTotalTls = Cloudflare.GetTotalTls.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTotalTlsResult> Invoke(GetTotalTlsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTotalTlsResult>("cloudflare:index/getTotalTls:getTotalTls", args ?? new GetTotalTlsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTotalTls = Cloudflare.GetTotalTls.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTotalTlsResult> Invoke(GetTotalTlsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTotalTlsResult>("cloudflare:index/getTotalTls:getTotalTls", args ?? new GetTotalTlsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTotalTlsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public string ZoneId { get; set; } = null!;

        public GetTotalTlsArgs()
        {
        }
        public static new GetTotalTlsArgs Empty => new GetTotalTlsArgs();
    }

    public sealed class GetTotalTlsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public GetTotalTlsInvokeArgs()
        {
        }
        public static new GetTotalTlsInvokeArgs Empty => new GetTotalTlsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTotalTlsResult
    {
        /// <summary>
        /// The Certificate Authority that Total TLS certificates will be issued through.
        /// </summary>
        public readonly string CertificateAuthority;
        /// <summary>
        /// If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The validity period in days for the certificates ordered via Total TLS.
        /// </summary>
        public readonly int ValidityPeriod;
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetTotalTlsResult(
            string certificateAuthority,

            bool enabled,

            string id,

            int validityPeriod,

            string zoneId)
        {
            CertificateAuthority = certificateAuthority;
            Enabled = enabled;
            Id = id;
            ValidityPeriod = validityPeriod;
            ZoneId = zoneId;
        }
    }
}
