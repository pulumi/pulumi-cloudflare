// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Cloudflare Access can replace traditional SSH key models with
    /// short-lived certificates issued to your users based on the token
    /// generated by their Access login.
    /// 
    /// &gt; It's required that an `account_id` or `zone_id` is provided and in
    ///    most cases using either is fine. However, if you're using a scoped
    ///    access token, you must provide the argument that matches the token's
    ///    scope. For example, an access token that is scoped to the "example.com"
    ///    zone needs to use the `zone_id` argument.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // account level
    ///     var example = new Cloudflare.AccessCaCertificate("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         ApplicationId = "6cd6cea3-3ef2-4542-9aea-85a0bbcd5414",
    ///     });
    /// 
    ///     // zone level
    ///     var anotherExample = new Cloudflare.AccessCaCertificate("another_example", new()
    ///     {
    ///         ZoneId = "0da42c8d2132a9ddaf714f9e7c920711",
    ///         ApplicationId = "fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Account level CA certificate import.
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/&lt;account_id&gt;/&lt;application_id&gt;
    /// ```
    /// 
    /// Zone level CA certificate import.
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/&lt;zone_id&gt;/&lt;application_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/accessCaCertificate:AccessCaCertificate")]
    public partial class AccessCaCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource. Conflicts with `zone_id`.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The Access Application ID to associate with the CA certificate.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// Application Audience (AUD) Tag of the CA certificate.
        /// </summary>
        [Output("aud")]
        public Output<string> Aud { get; private set; } = null!;

        /// <summary>
        /// Cryptographic public key of the generated CA certificate.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource. Conflicts with `account_id`.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a AccessCaCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccessCaCertificate(string name, AccessCaCertificateArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessCaCertificate:AccessCaCertificate", name, args ?? new AccessCaCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccessCaCertificate(string name, Input<string> id, AccessCaCertificateState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/accessCaCertificate:AccessCaCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccessCaCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccessCaCertificate Get(string name, Input<string> id, AccessCaCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new AccessCaCertificate(name, id, state, options);
        }
    }

    public sealed class AccessCaCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. Conflicts with `zone_id`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Access Application ID to associate with the CA certificate.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// The zone identifier to target for the resource. Conflicts with `account_id`.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessCaCertificateArgs()
        {
        }
        public static new AccessCaCertificateArgs Empty => new AccessCaCertificateArgs();
    }

    public sealed class AccessCaCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. Conflicts with `zone_id`.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Access Application ID to associate with the CA certificate.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// Application Audience (AUD) Tag of the CA certificate.
        /// </summary>
        [Input("aud")]
        public Input<string>? Aud { get; set; }

        /// <summary>
        /// Cryptographic public key of the generated CA certificate.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The zone identifier to target for the resource. Conflicts with `account_id`.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AccessCaCertificateState()
        {
        }
        public static new AccessCaCertificateState Empty => new AccessCaCertificateState();
    }
}
