// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZeroTrustTunnelWarpConnector
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelWarpConnector = Cloudflare.GetZeroTrustTunnelWarpConnector.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZeroTrustTunnelWarpConnectorResult> InvokeAsync(GetZeroTrustTunnelWarpConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZeroTrustTunnelWarpConnectorResult>("cloudflare:index/getZeroTrustTunnelWarpConnector:getZeroTrustTunnelWarpConnector", args ?? new GetZeroTrustTunnelWarpConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelWarpConnector = Cloudflare.GetZeroTrustTunnelWarpConnector.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustTunnelWarpConnectorResult> Invoke(GetZeroTrustTunnelWarpConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustTunnelWarpConnectorResult>("cloudflare:index/getZeroTrustTunnelWarpConnector:getZeroTrustTunnelWarpConnector", args ?? new GetZeroTrustTunnelWarpConnectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZeroTrustTunnelWarpConnector = Cloudflare.GetZeroTrustTunnelWarpConnector.Invoke(new()
        ///     {
        ///         AccountId = "699d98642c564d2e855e9661899b7252",
        ///         TunnelId = "f70ff985-a4ef-4643-bbbc-4a0ed4fc8415",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZeroTrustTunnelWarpConnectorResult> Invoke(GetZeroTrustTunnelWarpConnectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZeroTrustTunnelWarpConnectorResult>("cloudflare:index/getZeroTrustTunnelWarpConnector:getZeroTrustTunnelWarpConnector", args ?? new GetZeroTrustTunnelWarpConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZeroTrustTunnelWarpConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetZeroTrustTunnelWarpConnectorFilterArgs? Filter { get; set; }

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("tunnelId")]
        public string? TunnelId { get; set; }

        public GetZeroTrustTunnelWarpConnectorArgs()
        {
        }
        public static new GetZeroTrustTunnelWarpConnectorArgs Empty => new GetZeroTrustTunnelWarpConnectorArgs();
    }

    public sealed class GetZeroTrustTunnelWarpConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetZeroTrustTunnelWarpConnectorFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        [Input("tunnelId")]
        public Input<string>? TunnelId { get; set; }

        public GetZeroTrustTunnelWarpConnectorInvokeArgs()
        {
        }
        public static new GetZeroTrustTunnelWarpConnectorInvokeArgs Empty => new GetZeroTrustTunnelWarpConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetZeroTrustTunnelWarpConnectorResult
    {
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Cloudflare account ID
        /// </summary>
        public readonly string AccountTag;
        /// <summary>
        /// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZeroTrustTunnelWarpConnectorConnectionResult> Connections;
        /// <summary>
        /// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
        /// </summary>
        public readonly string ConnsActiveAt;
        /// <summary>
        /// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
        /// </summary>
        public readonly string ConnsInactiveAt;
        /// <summary>
        /// Timestamp of when the resource was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
        /// </summary>
        public readonly string DeletedAt;
        public readonly Outputs.GetZeroTrustTunnelWarpConnectorFilterResult? Filter;
        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Metadata associated with the tunnel.
        /// </summary>
        public readonly string Metadata;
        /// <summary>
        /// A user-friendly name for a tunnel.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
        /// </summary>
        public readonly bool RemoteConfig;
        /// <summary>
        /// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
        /// Available values: "inactive", "degraded", "healthy", "down".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The type of tunnel.
        /// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ip_sec", "gre", "cni".
        /// </summary>
        public readonly string TunType;
        /// <summary>
        /// UUID of the tunnel.
        /// </summary>
        public readonly string? TunnelId;

        [OutputConstructor]
        private GetZeroTrustTunnelWarpConnectorResult(
            string accountId,

            string accountTag,

            ImmutableArray<Outputs.GetZeroTrustTunnelWarpConnectorConnectionResult> connections,

            string connsActiveAt,

            string connsInactiveAt,

            string createdAt,

            string deletedAt,

            Outputs.GetZeroTrustTunnelWarpConnectorFilterResult? filter,

            string id,

            string metadata,

            string name,

            bool remoteConfig,

            string status,

            string tunType,

            string? tunnelId)
        {
            AccountId = accountId;
            AccountTag = accountTag;
            Connections = connections;
            ConnsActiveAt = connsActiveAt;
            ConnsInactiveAt = connsInactiveAt;
            CreatedAt = createdAt;
            DeletedAt = deletedAt;
            Filter = filter;
            Id = id;
            Metadata = metadata;
            Name = name;
            RemoteConfig = remoteConfig;
            Status = status;
            TunType = tunType;
            TunnelId = tunnelId;
        }
    }
}
