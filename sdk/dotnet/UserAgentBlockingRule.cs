// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleUserAgentBlockingRule = new Cloudflare.UserAgentBlockingRule("example_user_agent_blocking_rule", new()
    ///     {
    ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Configuration = new Cloudflare.Inputs.UserAgentBlockingRuleConfigurationArgs
    ///         {
    ///             Target = "ua",
    ///             Value = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)",
    ///         },
    ///         Mode = "challenge",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule")]
    public partial class UserAgentBlockingRule : global::Pulumi.CustomResource
    {
        [Output("configuration")]
        public Output<Outputs.UserAgentBlockingRuleConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the User Agent Blocking rule.
        /// </summary>
        [Output("uaRuleId")]
        public Output<string?> UaRuleId { get; private set; } = null!;

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a UserAgentBlockingRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserAgentBlockingRule(string name, UserAgentBlockingRuleArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, args ?? new UserAgentBlockingRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserAgentBlockingRule(string name, Input<string> id, UserAgentBlockingRuleState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserAgentBlockingRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserAgentBlockingRule Get(string name, Input<string> id, UserAgentBlockingRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new UserAgentBlockingRule(name, id, state, options);
        }
    }

    public sealed class UserAgentBlockingRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("configuration", required: true)]
        public Input<Inputs.UserAgentBlockingRuleConfigurationArgs> Configuration { get; set; } = null!;

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the User Agent Blocking rule.
        /// </summary>
        [Input("uaRuleId")]
        public Input<string>? UaRuleId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public UserAgentBlockingRuleArgs()
        {
        }
        public static new UserAgentBlockingRuleArgs Empty => new UserAgentBlockingRuleArgs();
    }

    public sealed class UserAgentBlockingRuleState : global::Pulumi.ResourceArgs
    {
        [Input("configuration")]
        public Input<Inputs.UserAgentBlockingRuleConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The action to apply to a matched request.
        /// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The unique identifier of the User Agent Blocking rule.
        /// </summary>
        [Input("uaRuleId")]
        public Input<string>? UaRuleId { get; set; }

        /// <summary>
        /// Defines an identifier.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public UserAgentBlockingRuleState()
        {
        }
        public static new UserAgentBlockingRuleState Empty => new UserAgentBlockingRuleState();
    }
}
