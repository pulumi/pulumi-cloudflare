// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicTransitSiteWan = new Cloudflare.MagicTransitSiteWan("example_magic_transit_site_wan", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         SiteId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         Physport = 1,
    ///         Name = "name",
    ///         Priority = 0,
    ///         StaticAddressing = new Cloudflare.Inputs.MagicTransitSiteWanStaticAddressingArgs
    ///         {
    ///             Address = "192.0.2.0/24",
    ///             Gateway_address = "192.0.2.1",
    ///             Secondary_address = "192.0.2.0/24",
    ///         },
    ///         VlanTag = 42,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicTransitSiteWan:MagicTransitSiteWan example '&lt;account_id&gt;/&lt;site_id&gt;/&lt;wan_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicTransitSiteWan:MagicTransitSiteWan")]
    public partial class MagicTransitSiteWan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Magic WAN health check rate for tunnels created on this link. The default value is `Mid`.
        /// Available values: "low", "mid", "high".
        /// </summary>
        [Output("healthCheckRate")]
        public Output<string> HealthCheckRate { get; private set; } = null!;

        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        [Output("physport")]
        public Output<int> Physport { get; private set; } = null!;

        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Identifier
        /// </summary>
        [Output("siteId")]
        public Output<string> SiteId { get; private set; } = null!;

        /// <summary>
        /// (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
        /// </summary>
        [Output("staticAddressing")]
        public Output<Outputs.MagicTransitSiteWanStaticAddressing?> StaticAddressing { get; private set; } = null!;

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Output("vlanTag")]
        public Output<int?> VlanTag { get; private set; } = null!;


        /// <summary>
        /// Create a MagicTransitSiteWan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicTransitSiteWan(string name, MagicTransitSiteWanArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteWan:MagicTransitSiteWan", name, args ?? new MagicTransitSiteWanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicTransitSiteWan(string name, Input<string> id, MagicTransitSiteWanState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicTransitSiteWan:MagicTransitSiteWan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicTransitSiteWan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicTransitSiteWan Get(string name, Input<string> id, MagicTransitSiteWanState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicTransitSiteWan(name, id, state, options);
        }
    }

    public sealed class MagicTransitSiteWanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physport", required: true)]
        public Input<int> Physport { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        /// <summary>
        /// (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
        /// </summary>
        [Input("staticAddressing")]
        public Input<Inputs.MagicTransitSiteWanStaticAddressingArgs>? StaticAddressing { get; set; }

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Input("vlanTag")]
        public Input<int>? VlanTag { get; set; }

        public MagicTransitSiteWanArgs()
        {
        }
        public static new MagicTransitSiteWanArgs Empty => new MagicTransitSiteWanArgs();
    }

    public sealed class MagicTransitSiteWanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Magic WAN health check rate for tunnels created on this link. The default value is `Mid`.
        /// Available values: "low", "mid", "high".
        /// </summary>
        [Input("healthCheckRate")]
        public Input<string>? HealthCheckRate { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physport")]
        public Input<int>? Physport { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Identifier
        /// </summary>
        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        /// <summary>
        /// (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
        /// </summary>
        [Input("staticAddressing")]
        public Input<Inputs.MagicTransitSiteWanStaticAddressingGetArgs>? StaticAddressing { get; set; }

        /// <summary>
        /// VLAN ID. Use zero for untagged.
        /// </summary>
        [Input("vlanTag")]
        public Input<int>? VlanTag { get; set; }

        public MagicTransitSiteWanState()
        {
        }
        public static new MagicTransitSiteWanState Empty => new MagicTransitSiteWanState();
    }
}
