// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetTurnstileWidget
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTurnstileWidget = Cloudflare.GetTurnstileWidget.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Sitekey = "0x4AAF00AAAABn0R22HWm-YUc",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTurnstileWidgetResult> InvokeAsync(GetTurnstileWidgetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTurnstileWidgetResult>("cloudflare:index/getTurnstileWidget:getTurnstileWidget", args ?? new GetTurnstileWidgetArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTurnstileWidget = Cloudflare.GetTurnstileWidget.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Sitekey = "0x4AAF00AAAABn0R22HWm-YUc",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTurnstileWidgetResult> Invoke(GetTurnstileWidgetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTurnstileWidgetResult>("cloudflare:index/getTurnstileWidget:getTurnstileWidget", args ?? new GetTurnstileWidgetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTurnstileWidget = Cloudflare.GetTurnstileWidget.Invoke(new()
        ///     {
        ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///         Sitekey = "0x4AAF00AAAABn0R22HWm-YUc",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTurnstileWidgetResult> Invoke(GetTurnstileWidgetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTurnstileWidgetResult>("cloudflare:index/getTurnstileWidget:getTurnstileWidget", args ?? new GetTurnstileWidgetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTurnstileWidgetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("filter")]
        public Inputs.GetTurnstileWidgetFilterArgs? Filter { get; set; }

        /// <summary>
        /// Widget item identifier tag.
        /// </summary>
        [Input("sitekey")]
        public string? Sitekey { get; set; }

        public GetTurnstileWidgetArgs()
        {
        }
        public static new GetTurnstileWidgetArgs Empty => new GetTurnstileWidgetArgs();
    }

    public sealed class GetTurnstileWidgetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("filter")]
        public Input<Inputs.GetTurnstileWidgetFilterInputArgs>? Filter { get; set; }

        /// <summary>
        /// Widget item identifier tag.
        /// </summary>
        [Input("sitekey")]
        public Input<string>? Sitekey { get; set; }

        public GetTurnstileWidgetInvokeArgs()
        {
        }
        public static new GetTurnstileWidgetInvokeArgs Empty => new GetTurnstileWidgetInvokeArgs();
    }


    [OutputType]
    public sealed class GetTurnstileWidgetResult
    {
        /// <summary>
        /// Identifier
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// If bot*fight*mode is set to `true`, Cloudflare issues computationally
        /// expensive challenges in response to malicious bots (ENT only).
        /// </summary>
        public readonly bool BotFightMode;
        /// <summary>
        /// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
        /// this setting can determine the clearance level to be set
        /// </summary>
        public readonly string ClearanceLevel;
        /// <summary>
        /// When the widget was created.
        /// </summary>
        public readonly string CreatedOn;
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// Return the Ephemeral ID in /siteverify (ENT only).
        /// </summary>
        public readonly bool EphemeralId;
        public readonly Outputs.GetTurnstileWidgetFilterResult? Filter;
        /// <summary>
        /// Widget item identifier tag.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Widget Mode
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// When the widget was modified.
        /// </summary>
        public readonly string ModifiedOn;
        /// <summary>
        /// Human readable widget name. Not unique. Cloudflare suggests that you
        /// set this to a meaningful string to make it easier to identify your
        /// widget, and where it is used.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Do not show any Cloudflare branding on the widget (ENT only).
        /// </summary>
        public readonly bool Offlabel;
        /// <summary>
        /// Region where this widget can be used.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Secret key for this widget.
        /// </summary>
        public readonly string Secret;
        /// <summary>
        /// Widget item identifier tag.
        /// </summary>
        public readonly string Sitekey;

        [OutputConstructor]
        private GetTurnstileWidgetResult(
            string accountId,

            bool botFightMode,

            string clearanceLevel,

            string createdOn,

            ImmutableArray<string> domains,

            bool ephemeralId,

            Outputs.GetTurnstileWidgetFilterResult? filter,

            string id,

            string mode,

            string modifiedOn,

            string name,

            bool offlabel,

            string region,

            string secret,

            string sitekey)
        {
            AccountId = accountId;
            BotFightMode = botFightMode;
            ClearanceLevel = clearanceLevel;
            CreatedOn = createdOn;
            Domains = domains;
            EphemeralId = ephemeralId;
            Filter = filter;
            Id = id;
            Mode = mode;
            ModifiedOn = modifiedOn;
            Name = name;
            Offlabel = offlabel;
            Region = region;
            Secret = secret;
            Sitekey = sitekey;
        }
    }
}
