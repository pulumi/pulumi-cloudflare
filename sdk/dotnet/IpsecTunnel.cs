// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource, that manages IPsec tunnels for Magic Transit.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Cloudflare.IpsecTunnel("example", new()
    ///     {
    ///         AccountId = "f037e56e89293a057740de681ac9abbe",
    ///         AllowNullCipher = false,
    ///         CloudflareEndpoint = "203.0.113.1",
    ///         CustomerEndpoint = "203.0.113.1",
    ///         Description = "Tunnel for ISP X",
    ///         HealthCheckEnabled = true,
    ///         HealthCheckTarget = "203.0.113.1",
    ///         HealthCheckType = "reply",
    ///         InterfaceAddress = "192.0.2.0/31",
    ///         Name = "IPsec_1",
    ///         Psk = "asdf12341234",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example &lt;account_id&gt;/&lt;tunnel_id&gt;
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/ipsecTunnel:IpsecTunnel")]
    public partial class IpsecTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
        /// </summary>
        [Output("allowNullCipher")]
        public Output<bool?> AllowNullCipher { get; private set; } = null!;

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Output("cloudflareEndpoint")]
        public Output<string> CloudflareEndpoint { get; private set; } = null!;

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Output("customerEndpoint")]
        public Output<string> CustomerEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
        /// </summary>
        [Output("fqdnId")]
        public Output<string> FqdnId { get; private set; } = null!;

        /// <summary>
        /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
        /// </summary>
        [Output("healthCheckEnabled")]
        public Output<bool> HealthCheckEnabled { get; private set; } = null!;

        /// <summary>
        /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `&lt;customer_gre_endpoint&gt;`.
        /// </summary>
        [Output("healthCheckTarget")]
        public Output<string> HealthCheckTarget { get; private set; } = null!;

        /// <summary>
        /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
        /// </summary>
        [Output("healthCheckType")]
        public Output<string> HealthCheckType { get; private set; } = null!;

        /// <summary>
        /// `remote_id` as a hex string. This value is generated by cloudflare.
        /// </summary>
        [Output("hexId")]
        public Output<string> HexId { get; private set; } = null!;

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Output("interfaceAddress")]
        public Output<string> InterfaceAddress { get; private set; } = null!;

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
        /// </summary>
        [Output("psk")]
        public Output<string> Psk { get; private set; } = null!;

        /// <summary>
        /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
        /// </summary>
        [Output("remoteId")]
        public Output<string> RemoteId { get; private set; } = null!;

        /// <summary>
        /// `remote_id` in the form of an email address. This value is generated by cloudflare.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a IpsecTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsecTunnel(string name, IpsecTunnelArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipsecTunnel:IpsecTunnel", name, args ?? new IpsecTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsecTunnel(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipsecTunnel:IpsecTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "psk",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsecTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsecTunnel Get(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsecTunnel(name, id, state, options);
        }
    }

    public sealed class IpsecTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
        /// </summary>
        [Input("allowNullCipher")]
        public Input<bool>? AllowNullCipher { get; set; }

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint", required: true)]
        public Input<string> CloudflareEndpoint { get; set; } = null!;

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Input("customerEndpoint", required: true)]
        public Input<string> CustomerEndpoint { get; set; } = null!;

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
        /// </summary>
        [Input("fqdnId")]
        public Input<string>? FqdnId { get; set; }

        /// <summary>
        /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
        /// </summary>
        [Input("healthCheckEnabled")]
        public Input<bool>? HealthCheckEnabled { get; set; }

        /// <summary>
        /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `&lt;customer_gre_endpoint&gt;`.
        /// </summary>
        [Input("healthCheckTarget")]
        public Input<string>? HealthCheckTarget { get; set; }

        /// <summary>
        /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// `remote_id` as a hex string. This value is generated by cloudflare.
        /// </summary>
        [Input("hexId")]
        public Input<string>? HexId { get; set; }

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Input("interfaceAddress", required: true)]
        public Input<string> InterfaceAddress { get; set; } = null!;

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("psk")]
        private Input<string>? _psk;

        /// <summary>
        /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
        /// </summary>
        public Input<string>? Psk
        {
            get => _psk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
        /// </summary>
        [Input("remoteId")]
        public Input<string>? RemoteId { get; set; }

        /// <summary>
        /// `remote_id` in the form of an email address. This value is generated by cloudflare.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public IpsecTunnelArgs()
        {
        }
        public static new IpsecTunnelArgs Empty => new IpsecTunnelArgs();
    }

    public sealed class IpsecTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
        /// </summary>
        [Input("allowNullCipher")]
        public Input<bool>? AllowNullCipher { get; set; }

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint")]
        public Input<string>? CloudflareEndpoint { get; set; }

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// `remote_id` in the form of a fqdn. This value is generated by cloudflare.
        /// </summary>
        [Input("fqdnId")]
        public Input<string>? FqdnId { get; set; }

        /// <summary>
        /// Specifies if ICMP tunnel health checks are enabled. Default: `true`.
        /// </summary>
        [Input("healthCheckEnabled")]
        public Input<bool>? HealthCheckEnabled { get; set; }

        /// <summary>
        /// The IP address of the customer endpoint that will receive tunnel health checks. Default: `&lt;customer_gre_endpoint&gt;`.
        /// </summary>
        [Input("healthCheckTarget")]
        public Input<string>? HealthCheckTarget { get; set; }

        /// <summary>
        /// Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
        /// </summary>
        [Input("healthCheckType")]
        public Input<string>? HealthCheckType { get; set; }

        /// <summary>
        /// `remote_id` as a hex string. This value is generated by cloudflare.
        /// </summary>
        [Input("hexId")]
        public Input<string>? HexId { get; set; }

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Input("interfaceAddress")]
        public Input<string>? InterfaceAddress { get; set; }

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("psk")]
        private Input<string>? _psk;

        /// <summary>
        /// Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
        /// </summary>
        public Input<string>? Psk
        {
            get => _psk;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _psk = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
        /// </summary>
        [Input("remoteId")]
        public Input<string>? RemoteId { get; set; }

        /// <summary>
        /// `remote_id` in the form of an email address. This value is generated by cloudflare.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public IpsecTunnelState()
        {
        }
        public static new IpsecTunnelState Empty => new IpsecTunnelState();
    }
}
