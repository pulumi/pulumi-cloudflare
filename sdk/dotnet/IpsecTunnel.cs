// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// Provides a resource, that manages IPsec tunnels for Magic Transit.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Cloudflare.IpsecTunnel("example", new Cloudflare.IpsecTunnelArgs
    ///         {
    ///             AccountId = "c4a7362d577a6c3019a474fd6f485821",
    ///             CloudflareEndpoint = "203.0.113.1",
    ///             CustomerEndpoint = "203.0.113.1",
    ///             Description = "Tunnel for ISP X",
    ///             InterfaceAddress = "192.0.2.0/31",
    ///             Name = "IPsec_1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// An existing IPsec tunnel can be imported using the account ID and tunnel ID
    /// 
    /// ```sh
    ///  $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/ipsecTunnel:IpsecTunnel")]
    public partial class IpsecTunnel : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the account where the tunnel is being created.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Output("cloudflareEndpoint")]
        public Output<string> CloudflareEndpoint { get; private set; } = null!;

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Output("customerEndpoint")]
        public Output<string> CustomerEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Output("interfaceAddress")]
        public Output<string> InterfaceAddress { get; private set; } = null!;

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a IpsecTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpsecTunnel(string name, IpsecTunnelArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipsecTunnel:IpsecTunnel", name, args ?? new IpsecTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpsecTunnel(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/ipsecTunnel:IpsecTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpsecTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpsecTunnel Get(string name, Input<string> id, IpsecTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new IpsecTunnel(name, id, state, options);
        }
    }

    public sealed class IpsecTunnelArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account where the tunnel is being created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint", required: true)]
        public Input<string> CloudflareEndpoint { get; set; } = null!;

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Input("customerEndpoint", required: true)]
        public Input<string> CustomerEndpoint { get; set; } = null!;

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Input("interfaceAddress", required: true)]
        public Input<string> InterfaceAddress { get; set; } = null!;

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public IpsecTunnelArgs()
        {
        }
    }

    public sealed class IpsecTunnelState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the account where the tunnel is being created.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// IP address assigned to the Cloudflare side of the IPsec tunnel.
        /// </summary>
        [Input("cloudflareEndpoint")]
        public Input<string>? CloudflareEndpoint { get; set; }

        /// <summary>
        /// IP address assigned to the customer side of the IPsec tunnel.
        /// </summary>
        [Input("customerEndpoint")]
        public Input<string>? CustomerEndpoint { get; set; }

        /// <summary>
        /// An optional description of the IPsec tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        /// </summary>
        [Input("interfaceAddress")]
        public Input<string>? InterfaceAddress { get; set; }

        /// <summary>
        /// Name of the IPsec tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public IpsecTunnelState()
        {
        }
    }
}
