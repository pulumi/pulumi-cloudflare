// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    public static class GetZone
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZone = Cloudflare.GetZone.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZoneResult> InvokeAsync(GetZoneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneResult>("cloudflare:index/getZone:getZone", args ?? new GetZoneArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZone = Cloudflare.GetZone.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneResult> Invoke(GetZoneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneResult>("cloudflare:index/getZone:getZone", args ?? new GetZoneInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cloudflare = Pulumi.Cloudflare;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleZone = Cloudflare.GetZone.Invoke(new()
        ///     {
        ///         ZoneId = "023e105f4ecef8ad9ca31a8372d0c353",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZoneResult> Invoke(GetZoneInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneResult>("cloudflare:index/getZone:getZone", args ?? new GetZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Inputs.GetZoneFilterArgs? Filter { get; set; }

        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetZoneArgs()
        {
        }
        public static new GetZoneArgs Empty => new GetZoneArgs();
    }

    public sealed class GetZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filter")]
        public Input<Inputs.GetZoneFilterInputArgs>? Filter { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetZoneInvokeArgs()
        {
        }
        public static new GetZoneInvokeArgs Empty => new GetZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneResult
    {
        public readonly Outputs.GetZoneAccountResult Account;
        public readonly string ActivatedOn;
        public readonly string CreatedOn;
        public readonly double DevelopmentMode;
        public readonly Outputs.GetZoneFilterResult? Filter;
        public readonly string Id;
        public readonly Outputs.GetZoneMetaResult Meta;
        public readonly string ModifiedOn;
        public readonly string Name;
        public readonly ImmutableArray<string> NameServers;
        public readonly string OriginalDnshost;
        public readonly ImmutableArray<string> OriginalNameServers;
        public readonly string OriginalRegistrar;
        public readonly Outputs.GetZoneOwnerResult Owner;
        public readonly bool Paused;
        public readonly string Status;
        public readonly string Type;
        public readonly ImmutableArray<string> VanityNameServers;
        public readonly string VerificationKey;
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetZoneResult(
            Outputs.GetZoneAccountResult account,

            string activatedOn,

            string createdOn,

            double developmentMode,

            Outputs.GetZoneFilterResult? filter,

            string id,

            Outputs.GetZoneMetaResult meta,

            string modifiedOn,

            string name,

            ImmutableArray<string> nameServers,

            string originalDnshost,

            ImmutableArray<string> originalNameServers,

            string originalRegistrar,

            Outputs.GetZoneOwnerResult owner,

            bool paused,

            string status,

            string type,

            ImmutableArray<string> vanityNameServers,

            string verificationKey,

            string? zoneId)
        {
            Account = account;
            ActivatedOn = activatedOn;
            CreatedOn = createdOn;
            DevelopmentMode = developmentMode;
            Filter = filter;
            Id = id;
            Meta = meta;
            ModifiedOn = modifiedOn;
            Name = name;
            NameServers = nameServers;
            OriginalDnshost = originalDnshost;
            OriginalNameServers = originalNameServers;
            OriginalRegistrar = originalRegistrar;
            Owner = owner;
            Paused = paused;
            Status = status;
            Type = type;
            VanityNameServers = vanityNameServers;
            VerificationKey = verificationKey;
            ZoneId = zoneId;
        }
    }
}
