// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Cloudflare
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cloudflare = Pulumi.Cloudflare;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleMagicWanGreTunnel = new Cloudflare.MagicWanGreTunnel("example_magic_wan_gre_tunnel", new()
    ///     {
    ///         AccountId = "023e105f4ecef8ad9ca31a8372d0c353",
    ///         CloudflareGreEndpoint = "203.0.113.1",
    ///         CustomerGreEndpoint = "203.0.113.1",
    ///         InterfaceAddress = "192.0.2.0/31",
    ///         Name = "GRE_1",
    ///         Description = "Tunnel for ISP X",
    ///         HealthCheck = new Cloudflare.Inputs.MagicWanGreTunnelHealthCheckArgs
    ///         {
    ///             Direction = "bidirectional",
    ///             Enabled = true,
    ///             Rate = "low",
    ///             Target = new Cloudflare.Inputs.MagicWanGreTunnelHealthCheckTargetArgs
    ///             {
    ///                 Saved = "203.0.113.1",
    ///             },
    ///             Type = "request",
    ///         },
    ///         Mtu = 0,
    ///         Ttl = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example '&lt;account_id&gt;/&lt;gre_tunnel_id&gt;'
    /// ```
    /// </summary>
    [CloudflareResourceType("cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel")]
    public partial class MagicWanGreTunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the GRE tunnel.
        /// </summary>
        [Output("cloudflareGreEndpoint")]
        public Output<string> CloudflareGreEndpoint { get; private set; } = null!;

        /// <summary>
        /// The date and time the tunnel was created.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the GRE tunnel.
        /// </summary>
        [Output("customerGreEndpoint")]
        public Output<string> CustomerGreEndpoint { get; private set; } = null!;

        /// <summary>
        /// An optional description of the GRE tunnel.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("greTunnel")]
        public Output<Outputs.MagicWanGreTunnelGreTunnel> GreTunnel { get; private set; } = null!;

        [Output("healthCheck")]
        public Output<Outputs.MagicWanGreTunnelHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Output("interfaceAddress")]
        public Output<string> InterfaceAddress { get; private set; } = null!;

        [Output("modified")]
        public Output<bool> Modified { get; private set; } = null!;

        [Output("modifiedGreTunnel")]
        public Output<Outputs.MagicWanGreTunnelModifiedGreTunnel> ModifiedGreTunnel { get; private set; } = null!;

        /// <summary>
        /// The date and time the tunnel was last modified.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
        /// </summary>
        [Output("mtu")]
        public Output<int> Mtu { get; private set; } = null!;

        /// <summary>
        /// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Time To Live (TTL) in number of hops of the GRE tunnel.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;


        /// <summary>
        /// Create a MagicWanGreTunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MagicWanGreTunnel(string name, MagicWanGreTunnelArgs args, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel", name, args ?? new MagicWanGreTunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MagicWanGreTunnel(string name, Input<string> id, MagicWanGreTunnelState? state = null, CustomResourceOptions? options = null)
            : base("cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "cloudflare:index/greTunnel:GreTunnel" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MagicWanGreTunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MagicWanGreTunnel Get(string name, Input<string> id, MagicWanGreTunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new MagicWanGreTunnel(name, id, state, options);
        }
    }

    public sealed class MagicWanGreTunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the GRE tunnel.
        /// </summary>
        [Input("cloudflareGreEndpoint", required: true)]
        public Input<string> CloudflareGreEndpoint { get; set; } = null!;

        /// <summary>
        /// The IP address assigned to the customer side of the GRE tunnel.
        /// </summary>
        [Input("customerGreEndpoint", required: true)]
        public Input<string> CustomerGreEndpoint { get; set; } = null!;

        /// <summary>
        /// An optional description of the GRE tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanGreTunnelHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress", required: true)]
        public Input<string> InterfaceAddress { get; set; } = null!;

        /// <summary>
        /// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Time To Live (TTL) in number of hops of the GRE tunnel.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public MagicWanGreTunnelArgs()
        {
        }
        public static new MagicWanGreTunnelArgs Empty => new MagicWanGreTunnelArgs();
    }

    public sealed class MagicWanGreTunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The IP address assigned to the Cloudflare side of the GRE tunnel.
        /// </summary>
        [Input("cloudflareGreEndpoint")]
        public Input<string>? CloudflareGreEndpoint { get; set; }

        /// <summary>
        /// The date and time the tunnel was created.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// The IP address assigned to the customer side of the GRE tunnel.
        /// </summary>
        [Input("customerGreEndpoint")]
        public Input<string>? CustomerGreEndpoint { get; set; }

        /// <summary>
        /// An optional description of the GRE tunnel.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("greTunnel")]
        public Input<Inputs.MagicWanGreTunnelGreTunnelGetArgs>? GreTunnel { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.MagicWanGreTunnelHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
        /// </summary>
        [Input("interfaceAddress")]
        public Input<string>? InterfaceAddress { get; set; }

        [Input("modified")]
        public Input<bool>? Modified { get; set; }

        [Input("modifiedGreTunnel")]
        public Input<Inputs.MagicWanGreTunnelModifiedGreTunnelGetArgs>? ModifiedGreTunnel { get; set; }

        /// <summary>
        /// The date and time the tunnel was last modified.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        /// <summary>
        /// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Time To Live (TTL) in number of hops of the GRE tunnel.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public MagicWanGreTunnelState()
        {
        }
        public static new MagicWanGreTunnelState Empty => new MagicWanGreTunnelState();
    }
}
