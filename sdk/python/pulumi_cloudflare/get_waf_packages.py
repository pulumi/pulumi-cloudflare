# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetWafPackagesResult',
    'AwaitableGetWafPackagesResult',
    'get_waf_packages',
    'get_waf_packages_output',
]

@pulumi.output_type
class GetWafPackagesResult:
    """
    A collection of values returned by getWafPackages.
    """
    def __init__(__self__, filter=None, id=None, packages=None, zone_id=None):
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if packages and not isinstance(packages, list):
            raise TypeError("Expected argument 'packages' to be a list")
        pulumi.set(__self__, "packages", packages)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetWafPackagesFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.GetWafPackagesPackageResult']:
        return pulumi.get(self, "packages")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


class AwaitableGetWafPackagesResult(GetWafPackagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWafPackagesResult(
            filter=self.filter,
            id=self.id,
            packages=self.packages,
            zone_id=self.zone_id)


def get_waf_packages(filter: Optional[pulumi.InputType['GetWafPackagesFilterArgs']] = None,
                     zone_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWafPackagesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['zoneId'] = zone_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWafPackages:getWafPackages', __args__, opts=opts, typ=GetWafPackagesResult).value

    return AwaitableGetWafPackagesResult(
        filter=__ret__.filter,
        id=__ret__.id,
        packages=__ret__.packages,
        zone_id=__ret__.zone_id)


@_utilities.lift_output_func(get_waf_packages)
def get_waf_packages_output(filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetWafPackagesFilterArgs']]]] = None,
                            zone_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWafPackagesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
