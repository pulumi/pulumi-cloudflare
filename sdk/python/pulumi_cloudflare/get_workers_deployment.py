# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetWorkersDeploymentResult',
    'AwaitableGetWorkersDeploymentResult',
    'get_workers_deployment',
    'get_workers_deployment_output',
]

@pulumi.output_type
class GetWorkersDeploymentResult:
    """
    A collection of values returned by getWorkersDeployment.
    """
    def __init__(__self__, account_id=None, annotations=None, author_email=None, created_on=None, deployment_id=None, id=None, script_name=None, source=None, strategy=None, versions=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if annotations and not isinstance(annotations, dict):
            raise TypeError("Expected argument 'annotations' to be a dict")
        pulumi.set(__self__, "annotations", annotations)
        if author_email and not isinstance(author_email, str):
            raise TypeError("Expected argument 'author_email' to be a str")
        pulumi.set(__self__, "author_email", author_email)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if deployment_id and not isinstance(deployment_id, str):
            raise TypeError("Expected argument 'deployment_id' to be a str")
        pulumi.set(__self__, "deployment_id", deployment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if script_name and not isinstance(script_name, str):
            raise TypeError("Expected argument 'script_name' to be a str")
        pulumi.set(__self__, "script_name", script_name)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if strategy and not isinstance(strategy, str):
            raise TypeError("Expected argument 'strategy' to be a str")
        pulumi.set(__self__, "strategy", strategy)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Identifier.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> 'outputs.GetWorkersDeploymentAnnotationsResult':
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="authorEmail")
    def author_email(self) -> _builtins.str:
        return pulumi.get(self, "author_email")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> _builtins.str:
        return pulumi.get(self, "deployment_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> _builtins.str:
        """
        Name of the script, used in URLs and route configuration.
        """
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> _builtins.str:
        """
        Available values: "percentage".
        """
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence['outputs.GetWorkersDeploymentVersionResult']:
        return pulumi.get(self, "versions")


class AwaitableGetWorkersDeploymentResult(GetWorkersDeploymentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkersDeploymentResult(
            account_id=self.account_id,
            annotations=self.annotations,
            author_email=self.author_email,
            created_on=self.created_on,
            deployment_id=self.deployment_id,
            id=self.id,
            script_name=self.script_name,
            source=self.source,
            strategy=self.strategy,
            versions=self.versions)


def get_workers_deployment(account_id: Optional[_builtins.str] = None,
                           deployment_id: Optional[_builtins.str] = None,
                           script_name: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkersDeploymentResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workers_deployment = cloudflare.get_workers_deployment(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        script_name="this-is_my_script-01",
        deployment_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
    ```


    :param _builtins.str account_id: Identifier.
    :param _builtins.str script_name: Name of the script, used in URLs and route configuration.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['deploymentId'] = deployment_id
    __args__['scriptName'] = script_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWorkersDeployment:getWorkersDeployment', __args__, opts=opts, typ=GetWorkersDeploymentResult).value

    return AwaitableGetWorkersDeploymentResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        annotations=pulumi.get(__ret__, 'annotations'),
        author_email=pulumi.get(__ret__, 'author_email'),
        created_on=pulumi.get(__ret__, 'created_on'),
        deployment_id=pulumi.get(__ret__, 'deployment_id'),
        id=pulumi.get(__ret__, 'id'),
        script_name=pulumi.get(__ret__, 'script_name'),
        source=pulumi.get(__ret__, 'source'),
        strategy=pulumi.get(__ret__, 'strategy'),
        versions=pulumi.get(__ret__, 'versions'))
def get_workers_deployment_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  deployment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                  script_name: Optional[pulumi.Input[_builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkersDeploymentResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workers_deployment = cloudflare.get_workers_deployment(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        script_name="this-is_my_script-01",
        deployment_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
    ```


    :param _builtins.str account_id: Identifier.
    :param _builtins.str script_name: Name of the script, used in URLs and route configuration.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['deploymentId'] = deployment_id
    __args__['scriptName'] = script_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getWorkersDeployment:getWorkersDeployment', __args__, opts=opts, typ=GetWorkersDeploymentResult)
    return __ret__.apply(lambda __response__: GetWorkersDeploymentResult(
        account_id=pulumi.get(__response__, 'account_id'),
        annotations=pulumi.get(__response__, 'annotations'),
        author_email=pulumi.get(__response__, 'author_email'),
        created_on=pulumi.get(__response__, 'created_on'),
        deployment_id=pulumi.get(__response__, 'deployment_id'),
        id=pulumi.get(__response__, 'id'),
        script_name=pulumi.get(__response__, 'script_name'),
        source=pulumi.get(__response__, 'source'),
        strategy=pulumi.get(__response__, 'strategy'),
        versions=pulumi.get(__response__, 'versions')))
