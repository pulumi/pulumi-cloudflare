# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EmailRoutingSettingsArgs', 'EmailRoutingSettings']

@pulumi.input_type
class EmailRoutingSettingsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 zone_id: pulumi.Input[str],
                 skip_wizard: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a EmailRoutingSettings resource.
        :param pulumi.Input[bool] enabled: State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] skip_wizard: Flag to check if the user skipped the configuration wizard.
        """
        EmailRoutingSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            zone_id=zone_id,
            skip_wizard=skip_wizard,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             zone_id: pulumi.Input[str],
             skip_wizard: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("zone_id", zone_id)
        if skip_wizard is not None:
            _setter("skip_wizard", skip_wizard)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="skipWizard")
    def skip_wizard(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to check if the user skipped the configuration wizard.
        """
        return pulumi.get(self, "skip_wizard")

    @skip_wizard.setter
    def skip_wizard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_wizard", value)


@pulumi.input_type
class _EmailRoutingSettingsState:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_wizard: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EmailRoutingSettings resources.
        :param pulumi.Input[str] created: The date and time the settings have been created.
        :param pulumi.Input[bool] enabled: State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] modified: The date and time the settings have been modified.
        :param pulumi.Input[str] name: Domain of your zone.
        :param pulumi.Input[bool] skip_wizard: Flag to check if the user skipped the configuration wizard.
        :param pulumi.Input[str] status: Show the state of your account, and the type or configuration error.
        :param pulumi.Input[str] tag: Email Routing settings identifier.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        _EmailRoutingSettingsState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created=created,
            enabled=enabled,
            modified=modified,
            name=name,
            skip_wizard=skip_wizard,
            status=status,
            tag=tag,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             modified: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             skip_wizard: Optional[pulumi.Input[bool]] = None,
             status: Optional[pulumi.Input[str]] = None,
             tag: Optional[pulumi.Input[str]] = None,
             zone_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if created is not None:
            _setter("created", created)
        if enabled is not None:
            _setter("enabled", enabled)
        if modified is not None:
            _setter("modified", modified)
        if name is not None:
            _setter("name", name)
        if skip_wizard is not None:
            _setter("skip_wizard", skip_wizard)
        if status is not None:
            _setter("status", status)
        if tag is not None:
            _setter("tag", tag)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the settings have been created.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def modified(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the settings have been modified.
        """
        return pulumi.get(self, "modified")

    @modified.setter
    def modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain of your zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipWizard")
    def skip_wizard(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to check if the user skipped the configuration wizard.
        """
        return pulumi.get(self, "skip_wizard")

    @skip_wizard.setter
    def skip_wizard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_wizard", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Show the state of your account, and the type or configuration error.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Email Routing settings identifier.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class EmailRoutingSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 skip_wizard: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource for managing Email Routing settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        my_zone = cloudflare.EmailRoutingSettings("myZone",
            enabled=True,
            zone_id="0da42c8d2132a9ddaf714f9e7c920711")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] skip_wizard: Flag to check if the user skipped the configuration wizard.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EmailRoutingSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource for managing Email Routing settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        my_zone = cloudflare.EmailRoutingSettings("myZone",
            enabled=True,
            zone_id="0da42c8d2132a9ddaf714f9e7c920711")
        ```

        :param str resource_name: The name of the resource.
        :param EmailRoutingSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EmailRoutingSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            EmailRoutingSettingsArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 skip_wizard: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EmailRoutingSettingsArgs.__new__(EmailRoutingSettingsArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["skip_wizard"] = skip_wizard
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created"] = None
            __props__.__dict__["modified"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tag"] = None
        super(EmailRoutingSettings, __self__).__init__(
            'cloudflare:index/emailRoutingSettings:EmailRoutingSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            skip_wizard: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tag: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'EmailRoutingSettings':
        """
        Get an existing EmailRoutingSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created: The date and time the settings have been created.
        :param pulumi.Input[bool] enabled: State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] modified: The date and time the settings have been modified.
        :param pulumi.Input[str] name: Domain of your zone.
        :param pulumi.Input[bool] skip_wizard: Flag to check if the user skipped the configuration wizard.
        :param pulumi.Input[str] status: Show the state of your account, and the type or configuration error.
        :param pulumi.Input[str] tag: Email Routing settings identifier.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EmailRoutingSettingsState.__new__(_EmailRoutingSettingsState)

        __props__.__dict__["created"] = created
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["modified"] = modified
        __props__.__dict__["name"] = name
        __props__.__dict__["skip_wizard"] = skip_wizard
        __props__.__dict__["status"] = status
        __props__.__dict__["tag"] = tag
        __props__.__dict__["zone_id"] = zone_id
        return EmailRoutingSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        The date and time the settings have been created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        State of the zone settings for Email Routing. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def modified(self) -> pulumi.Output[str]:
        """
        The date and time the settings have been modified.
        """
        return pulumi.get(self, "modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Domain of your zone.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="skipWizard")
    def skip_wizard(self) -> pulumi.Output[bool]:
        """
        Flag to check if the user skipped the configuration wizard.
        """
        return pulumi.get(self, "skip_wizard")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Show the state of your account, and the type or configuration error.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[str]:
        """
        Email Routing settings identifier.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "zone_id")

