# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IpsecTunnelArgs', 'IpsecTunnel']

@pulumi.input_type
class IpsecTunnelArgs:
    def __init__(__self__, *,
                 cloudflare_endpoint: pulumi.Input[str],
                 customer_endpoint: pulumi.Input[str],
                 interface_address: pulumi.Input[str],
                 name: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IpsecTunnel resource.
        :param pulumi.Input[str] cloudflare_endpoint: IP address assigned to the Cloudflare side of the IPsec tunnel.
        :param pulumi.Input[str] customer_endpoint: IP address assigned to the customer side of the IPsec tunnel.
        :param pulumi.Input[str] interface_address: 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        :param pulumi.Input[str] name: Name of the IPsec tunnel.
        :param pulumi.Input[str] account_id: The ID of the account where the tunnel is being created.
        :param pulumi.Input[str] description: An optional description of the IPsec tunnel.
        """
        pulumi.set(__self__, "cloudflare_endpoint", cloudflare_endpoint)
        pulumi.set(__self__, "customer_endpoint", customer_endpoint)
        pulumi.set(__self__, "interface_address", interface_address)
        pulumi.set(__self__, "name", name)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cloudflareEndpoint")
    def cloudflare_endpoint(self) -> pulumi.Input[str]:
        """
        IP address assigned to the Cloudflare side of the IPsec tunnel.
        """
        return pulumi.get(self, "cloudflare_endpoint")

    @cloudflare_endpoint.setter
    def cloudflare_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloudflare_endpoint", value)

    @property
    @pulumi.getter(name="customerEndpoint")
    def customer_endpoint(self) -> pulumi.Input[str]:
        """
        IP address assigned to the customer side of the IPsec tunnel.
        """
        return pulumi.get(self, "customer_endpoint")

    @customer_endpoint.setter
    def customer_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_endpoint", value)

    @property
    @pulumi.getter(name="interfaceAddress")
    def interface_address(self) -> pulumi.Input[str]:
        """
        31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        """
        return pulumi.get(self, "interface_address")

    @interface_address.setter
    def interface_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_address", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the IPsec tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the account where the tunnel is being created.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the IPsec tunnel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _IpsecTunnelState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloudflare_endpoint: Optional[pulumi.Input[str]] = None,
                 customer_endpoint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 interface_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpsecTunnel resources.
        :param pulumi.Input[str] account_id: The ID of the account where the tunnel is being created.
        :param pulumi.Input[str] cloudflare_endpoint: IP address assigned to the Cloudflare side of the IPsec tunnel.
        :param pulumi.Input[str] customer_endpoint: IP address assigned to the customer side of the IPsec tunnel.
        :param pulumi.Input[str] description: An optional description of the IPsec tunnel.
        :param pulumi.Input[str] interface_address: 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        :param pulumi.Input[str] name: Name of the IPsec tunnel.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if cloudflare_endpoint is not None:
            pulumi.set(__self__, "cloudflare_endpoint", cloudflare_endpoint)
        if customer_endpoint is not None:
            pulumi.set(__self__, "customer_endpoint", customer_endpoint)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if interface_address is not None:
            pulumi.set(__self__, "interface_address", interface_address)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the account where the tunnel is being created.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="cloudflareEndpoint")
    def cloudflare_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        IP address assigned to the Cloudflare side of the IPsec tunnel.
        """
        return pulumi.get(self, "cloudflare_endpoint")

    @cloudflare_endpoint.setter
    def cloudflare_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloudflare_endpoint", value)

    @property
    @pulumi.getter(name="customerEndpoint")
    def customer_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        IP address assigned to the customer side of the IPsec tunnel.
        """
        return pulumi.get(self, "customer_endpoint")

    @customer_endpoint.setter
    def customer_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_endpoint", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the IPsec tunnel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="interfaceAddress")
    def interface_address(self) -> Optional[pulumi.Input[str]]:
        """
        31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        """
        return pulumi.get(self, "interface_address")

    @interface_address.setter
    def interface_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the IPsec tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class IpsecTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloudflare_endpoint: Optional[pulumi.Input[str]] = None,
                 customer_endpoint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 interface_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource, that manages IPsec tunnels for Magic Transit.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example = cloudflare.IpsecTunnel("example",
            account_id="c4a7362d577a6c3019a474fd6f485821",
            cloudflare_endpoint="203.0.113.1",
            customer_endpoint="203.0.113.1",
            description="Tunnel for ISP X",
            interface_address="192.0.2.0/31",
            name="IPsec_1")
        ```

        ## Import

        An existing IPsec tunnel can be imported using the account ID and tunnel ID

        ```sh
         $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the account where the tunnel is being created.
        :param pulumi.Input[str] cloudflare_endpoint: IP address assigned to the Cloudflare side of the IPsec tunnel.
        :param pulumi.Input[str] customer_endpoint: IP address assigned to the customer side of the IPsec tunnel.
        :param pulumi.Input[str] description: An optional description of the IPsec tunnel.
        :param pulumi.Input[str] interface_address: 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        :param pulumi.Input[str] name: Name of the IPsec tunnel.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpsecTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource, that manages IPsec tunnels for Magic Transit.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example = cloudflare.IpsecTunnel("example",
            account_id="c4a7362d577a6c3019a474fd6f485821",
            cloudflare_endpoint="203.0.113.1",
            customer_endpoint="203.0.113.1",
            description="Tunnel for ISP X",
            interface_address="192.0.2.0/31",
            name="IPsec_1")
        ```

        ## Import

        An existing IPsec tunnel can be imported using the account ID and tunnel ID

        ```sh
         $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
        ```

        :param str resource_name: The name of the resource.
        :param IpsecTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpsecTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 cloudflare_endpoint: Optional[pulumi.Input[str]] = None,
                 customer_endpoint: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 interface_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpsecTunnelArgs.__new__(IpsecTunnelArgs)

            __props__.__dict__["account_id"] = account_id
            if cloudflare_endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'cloudflare_endpoint'")
            __props__.__dict__["cloudflare_endpoint"] = cloudflare_endpoint
            if customer_endpoint is None and not opts.urn:
                raise TypeError("Missing required property 'customer_endpoint'")
            __props__.__dict__["customer_endpoint"] = customer_endpoint
            __props__.__dict__["description"] = description
            if interface_address is None and not opts.urn:
                raise TypeError("Missing required property 'interface_address'")
            __props__.__dict__["interface_address"] = interface_address
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
        super(IpsecTunnel, __self__).__init__(
            'cloudflare:index/ipsecTunnel:IpsecTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            cloudflare_endpoint: Optional[pulumi.Input[str]] = None,
            customer_endpoint: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            interface_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'IpsecTunnel':
        """
        Get an existing IpsecTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the account where the tunnel is being created.
        :param pulumi.Input[str] cloudflare_endpoint: IP address assigned to the Cloudflare side of the IPsec tunnel.
        :param pulumi.Input[str] customer_endpoint: IP address assigned to the customer side of the IPsec tunnel.
        :param pulumi.Input[str] description: An optional description of the IPsec tunnel.
        :param pulumi.Input[str] interface_address: 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        :param pulumi.Input[str] name: Name of the IPsec tunnel.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpsecTunnelState.__new__(_IpsecTunnelState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["cloudflare_endpoint"] = cloudflare_endpoint
        __props__.__dict__["customer_endpoint"] = customer_endpoint
        __props__.__dict__["description"] = description
        __props__.__dict__["interface_address"] = interface_address
        __props__.__dict__["name"] = name
        return IpsecTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the account where the tunnel is being created.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="cloudflareEndpoint")
    def cloudflare_endpoint(self) -> pulumi.Output[str]:
        """
        IP address assigned to the Cloudflare side of the IPsec tunnel.
        """
        return pulumi.get(self, "cloudflare_endpoint")

    @property
    @pulumi.getter(name="customerEndpoint")
    def customer_endpoint(self) -> pulumi.Output[str]:
        """
        IP address assigned to the customer side of the IPsec tunnel.
        """
        return pulumi.get(self, "customer_endpoint")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the IPsec tunnel.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="interfaceAddress")
    def interface_address(self) -> pulumi.Output[str]:
        """
        31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
        """
        return pulumi.get(self, "interface_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the IPsec tunnel.
        """
        return pulumi.get(self, "name")

