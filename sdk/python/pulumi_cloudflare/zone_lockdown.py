# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class ZoneLockdown(pulumi.CustomResource):
    configurations: pulumi.Output[list]
    """
    A list of IP addresses or IP ranges to match the request against specified in target, value pairs.  It's a complex value. See description below.   The order of the configuration entries is unimportant.
    """
    description: pulumi.Output[str]
    """
    A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
    """
    paused: pulumi.Output[bool]
    """
    Boolean of whether this zone lockdown is currently paused. Default: false.
    """
    urls: pulumi.Output[list]
    """
    A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
    """
    zone: pulumi.Output[str]
    """
    The DNS zone to which the lockdown will be added. Will be resolved to `zone_id` upon creation.
    """
    zone_id: pulumi.Output[str]
    """
    The DNS zone to which the access rule should be added.
    """
    def __init__(__self__, resource_name, opts=None, configurations=None, description=None, paused=None, urls=None, zone=None, zone_id=None, __name__=None, __opts__=None):
        """
        Provides a Cloudflare Zone Lockdown resource. Zone Lockdown allows you to define one or more URLs (with wildcard matching on the domain or path) that will only permit access if the request originates from an IP address that matches a safelist of one or more IP addresses and/or IP ranges.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] configurations: A list of IP addresses or IP ranges to match the request against specified in target, value pairs.  It's a complex value. See description below.   The order of the configuration entries is unimportant.
        :param pulumi.Input[str] description: A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
        :param pulumi.Input[bool] paused: Boolean of whether this zone lockdown is currently paused. Default: false.
        :param pulumi.Input[list] urls: A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
        :param pulumi.Input[str] zone: The DNS zone to which the lockdown will be added. Will be resolved to `zone_id` upon creation.
        :param pulumi.Input[str] zone_id: The DNS zone to which the access rule should be added.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if configurations is None:
            raise TypeError("Missing required property 'configurations'")
        __props__['configurations'] = configurations

        __props__['description'] = description

        __props__['paused'] = paused

        if urls is None:
            raise TypeError("Missing required property 'urls'")
        __props__['urls'] = urls

        __props__['zone'] = zone

        __props__['zone_id'] = zone_id

        super(ZoneLockdown, __self__).__init__(
            'cloudflare:index/zoneLockdown:ZoneLockdown',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

