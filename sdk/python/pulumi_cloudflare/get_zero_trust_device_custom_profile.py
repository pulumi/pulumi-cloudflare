# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZeroTrustDeviceCustomProfileResult',
    'AwaitableGetZeroTrustDeviceCustomProfileResult',
    'get_zero_trust_device_custom_profile',
    'get_zero_trust_device_custom_profile_output',
]

@pulumi.output_type
class GetZeroTrustDeviceCustomProfileResult:
    """
    A collection of values returned by getZeroTrustDeviceCustomProfile.
    """
    def __init__(__self__, account_id=None, allow_mode_switch=None, allow_updates=None, allowed_to_leave=None, auto_connect=None, captive_portal=None, default=None, description=None, disable_auto_fallback=None, enabled=None, exclude_office_ips=None, excludes=None, fallback_domains=None, gateway_unique_id=None, id=None, includes=None, lan_allow_minutes=None, lan_allow_subnet_size=None, match=None, name=None, policy_id=None, precedence=None, register_interface_ip_with_dns=None, service_mode_v2=None, support_url=None, switch_locked=None, target_tests=None, tunnel_protocol=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if allow_mode_switch and not isinstance(allow_mode_switch, bool):
            raise TypeError("Expected argument 'allow_mode_switch' to be a bool")
        pulumi.set(__self__, "allow_mode_switch", allow_mode_switch)
        if allow_updates and not isinstance(allow_updates, bool):
            raise TypeError("Expected argument 'allow_updates' to be a bool")
        pulumi.set(__self__, "allow_updates", allow_updates)
        if allowed_to_leave and not isinstance(allowed_to_leave, bool):
            raise TypeError("Expected argument 'allowed_to_leave' to be a bool")
        pulumi.set(__self__, "allowed_to_leave", allowed_to_leave)
        if auto_connect and not isinstance(auto_connect, float):
            raise TypeError("Expected argument 'auto_connect' to be a float")
        pulumi.set(__self__, "auto_connect", auto_connect)
        if captive_portal and not isinstance(captive_portal, float):
            raise TypeError("Expected argument 'captive_portal' to be a float")
        pulumi.set(__self__, "captive_portal", captive_portal)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disable_auto_fallback and not isinstance(disable_auto_fallback, bool):
            raise TypeError("Expected argument 'disable_auto_fallback' to be a bool")
        pulumi.set(__self__, "disable_auto_fallback", disable_auto_fallback)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if exclude_office_ips and not isinstance(exclude_office_ips, bool):
            raise TypeError("Expected argument 'exclude_office_ips' to be a bool")
        pulumi.set(__self__, "exclude_office_ips", exclude_office_ips)
        if excludes and not isinstance(excludes, list):
            raise TypeError("Expected argument 'excludes' to be a list")
        pulumi.set(__self__, "excludes", excludes)
        if fallback_domains and not isinstance(fallback_domains, list):
            raise TypeError("Expected argument 'fallback_domains' to be a list")
        pulumi.set(__self__, "fallback_domains", fallback_domains)
        if gateway_unique_id and not isinstance(gateway_unique_id, str):
            raise TypeError("Expected argument 'gateway_unique_id' to be a str")
        pulumi.set(__self__, "gateway_unique_id", gateway_unique_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, list):
            raise TypeError("Expected argument 'includes' to be a list")
        pulumi.set(__self__, "includes", includes)
        if lan_allow_minutes and not isinstance(lan_allow_minutes, float):
            raise TypeError("Expected argument 'lan_allow_minutes' to be a float")
        pulumi.set(__self__, "lan_allow_minutes", lan_allow_minutes)
        if lan_allow_subnet_size and not isinstance(lan_allow_subnet_size, float):
            raise TypeError("Expected argument 'lan_allow_subnet_size' to be a float")
        pulumi.set(__self__, "lan_allow_subnet_size", lan_allow_subnet_size)
        if match and not isinstance(match, str):
            raise TypeError("Expected argument 'match' to be a str")
        pulumi.set(__self__, "match", match)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if precedence and not isinstance(precedence, float):
            raise TypeError("Expected argument 'precedence' to be a float")
        pulumi.set(__self__, "precedence", precedence)
        if register_interface_ip_with_dns and not isinstance(register_interface_ip_with_dns, bool):
            raise TypeError("Expected argument 'register_interface_ip_with_dns' to be a bool")
        pulumi.set(__self__, "register_interface_ip_with_dns", register_interface_ip_with_dns)
        if service_mode_v2 and not isinstance(service_mode_v2, dict):
            raise TypeError("Expected argument 'service_mode_v2' to be a dict")
        pulumi.set(__self__, "service_mode_v2", service_mode_v2)
        if support_url and not isinstance(support_url, str):
            raise TypeError("Expected argument 'support_url' to be a str")
        pulumi.set(__self__, "support_url", support_url)
        if switch_locked and not isinstance(switch_locked, bool):
            raise TypeError("Expected argument 'switch_locked' to be a bool")
        pulumi.set(__self__, "switch_locked", switch_locked)
        if target_tests and not isinstance(target_tests, list):
            raise TypeError("Expected argument 'target_tests' to be a list")
        pulumi.set(__self__, "target_tests", target_tests)
        if tunnel_protocol and not isinstance(tunnel_protocol, str):
            raise TypeError("Expected argument 'tunnel_protocol' to be a str")
        pulumi.set(__self__, "tunnel_protocol", tunnel_protocol)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="allowModeSwitch")
    def allow_mode_switch(self) -> builtins.bool:
        """
        Whether to allow the user to switch WARP between modes.
        """
        return pulumi.get(self, "allow_mode_switch")

    @property
    @pulumi.getter(name="allowUpdates")
    def allow_updates(self) -> builtins.bool:
        """
        Whether to receive update notifications when a new version of the client is available.
        """
        return pulumi.get(self, "allow_updates")

    @property
    @pulumi.getter(name="allowedToLeave")
    def allowed_to_leave(self) -> builtins.bool:
        """
        Whether to allow devices to leave the organization.
        """
        return pulumi.get(self, "allowed_to_leave")

    @property
    @pulumi.getter(name="autoConnect")
    def auto_connect(self) -> builtins.float:
        """
        The amount of time in seconds to reconnect after having been disabled.
        """
        return pulumi.get(self, "auto_connect")

    @property
    @pulumi.getter(name="captivePortal")
    def captive_portal(self) -> builtins.float:
        """
        Turn on the captive portal after the specified amount of time.
        """
        return pulumi.get(self, "captive_portal")

    @property
    @pulumi.getter
    def default(self) -> builtins.bool:
        """
        Whether the policy is the default policy for an account.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A description of the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableAutoFallback")
    def disable_auto_fallback(self) -> builtins.bool:
        """
        If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
        """
        return pulumi.get(self, "disable_auto_fallback")

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        """
        Whether the policy will be applied to matching devices.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="excludeOfficeIps")
    def exclude_office_ips(self) -> builtins.bool:
        """
        Whether to add Microsoft IPs to Split Tunnel exclusions.
        """
        return pulumi.get(self, "exclude_office_ips")

    @property
    @pulumi.getter
    def excludes(self) -> Sequence['outputs.GetZeroTrustDeviceCustomProfileExcludeResult']:
        """
        List of routes excluded in the WARP client's tunnel.
        """
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter(name="fallbackDomains")
    def fallback_domains(self) -> Sequence['outputs.GetZeroTrustDeviceCustomProfileFallbackDomainResult']:
        return pulumi.get(self, "fallback_domains")

    @property
    @pulumi.getter(name="gatewayUniqueId")
    def gateway_unique_id(self) -> builtins.str:
        return pulumi.get(self, "gateway_unique_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def includes(self) -> Sequence['outputs.GetZeroTrustDeviceCustomProfileIncludeResult']:
        """
        List of routes included in the WARP client's tunnel.
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="lanAllowMinutes")
    def lan_allow_minutes(self) -> builtins.float:
        """
        The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
        """
        return pulumi.get(self, "lan_allow_minutes")

    @property
    @pulumi.getter(name="lanAllowSubnetSize")
    def lan_allow_subnet_size(self) -> builtins.float:
        """
        The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
        """
        return pulumi.get(self, "lan_allow_subnet_size")

    @property
    @pulumi.getter
    def match(self) -> builtins.str:
        """
        The wirefilter expression to match devices.
        """
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the device settings profile.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> builtins.str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def precedence(self) -> builtins.float:
        """
        The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
        """
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter(name="registerInterfaceIpWithDns")
    def register_interface_ip_with_dns(self) -> builtins.bool:
        """
        Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
        """
        return pulumi.get(self, "register_interface_ip_with_dns")

    @property
    @pulumi.getter(name="serviceModeV2")
    def service_mode_v2(self) -> 'outputs.GetZeroTrustDeviceCustomProfileServiceModeV2Result':
        return pulumi.get(self, "service_mode_v2")

    @property
    @pulumi.getter(name="supportUrl")
    def support_url(self) -> builtins.str:
        """
        The URL to launch when the Send Feedback button is clicked.
        """
        return pulumi.get(self, "support_url")

    @property
    @pulumi.getter(name="switchLocked")
    def switch_locked(self) -> builtins.bool:
        """
        Whether to allow the user to turn off the WARP switch and disconnect the client.
        """
        return pulumi.get(self, "switch_locked")

    @property
    @pulumi.getter(name="targetTests")
    def target_tests(self) -> Sequence['outputs.GetZeroTrustDeviceCustomProfileTargetTestResult']:
        return pulumi.get(self, "target_tests")

    @property
    @pulumi.getter(name="tunnelProtocol")
    def tunnel_protocol(self) -> builtins.str:
        """
        Determines which tunnel protocol to use.
        """
        return pulumi.get(self, "tunnel_protocol")


class AwaitableGetZeroTrustDeviceCustomProfileResult(GetZeroTrustDeviceCustomProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustDeviceCustomProfileResult(
            account_id=self.account_id,
            allow_mode_switch=self.allow_mode_switch,
            allow_updates=self.allow_updates,
            allowed_to_leave=self.allowed_to_leave,
            auto_connect=self.auto_connect,
            captive_portal=self.captive_portal,
            default=self.default,
            description=self.description,
            disable_auto_fallback=self.disable_auto_fallback,
            enabled=self.enabled,
            exclude_office_ips=self.exclude_office_ips,
            excludes=self.excludes,
            fallback_domains=self.fallback_domains,
            gateway_unique_id=self.gateway_unique_id,
            id=self.id,
            includes=self.includes,
            lan_allow_minutes=self.lan_allow_minutes,
            lan_allow_subnet_size=self.lan_allow_subnet_size,
            match=self.match,
            name=self.name,
            policy_id=self.policy_id,
            precedence=self.precedence,
            register_interface_ip_with_dns=self.register_interface_ip_with_dns,
            service_mode_v2=self.service_mode_v2,
            support_url=self.support_url,
            switch_locked=self.switch_locked,
            target_tests=self.target_tests,
            tunnel_protocol=self.tunnel_protocol)


def get_zero_trust_device_custom_profile(account_id: Optional[builtins.str] = None,
                                         policy_id: Optional[builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustDeviceCustomProfileResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_device_custom_profile = cloudflare.get_zero_trust_device_custom_profile(account_id="699d98642c564d2e855e9661899b7252",
        policy_id="f174e90a-fafe-4643-bbbc-4a0ed4fc8415")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustDeviceCustomProfile:getZeroTrustDeviceCustomProfile', __args__, opts=opts, typ=GetZeroTrustDeviceCustomProfileResult).value

    return AwaitableGetZeroTrustDeviceCustomProfileResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        allow_mode_switch=pulumi.get(__ret__, 'allow_mode_switch'),
        allow_updates=pulumi.get(__ret__, 'allow_updates'),
        allowed_to_leave=pulumi.get(__ret__, 'allowed_to_leave'),
        auto_connect=pulumi.get(__ret__, 'auto_connect'),
        captive_portal=pulumi.get(__ret__, 'captive_portal'),
        default=pulumi.get(__ret__, 'default'),
        description=pulumi.get(__ret__, 'description'),
        disable_auto_fallback=pulumi.get(__ret__, 'disable_auto_fallback'),
        enabled=pulumi.get(__ret__, 'enabled'),
        exclude_office_ips=pulumi.get(__ret__, 'exclude_office_ips'),
        excludes=pulumi.get(__ret__, 'excludes'),
        fallback_domains=pulumi.get(__ret__, 'fallback_domains'),
        gateway_unique_id=pulumi.get(__ret__, 'gateway_unique_id'),
        id=pulumi.get(__ret__, 'id'),
        includes=pulumi.get(__ret__, 'includes'),
        lan_allow_minutes=pulumi.get(__ret__, 'lan_allow_minutes'),
        lan_allow_subnet_size=pulumi.get(__ret__, 'lan_allow_subnet_size'),
        match=pulumi.get(__ret__, 'match'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        precedence=pulumi.get(__ret__, 'precedence'),
        register_interface_ip_with_dns=pulumi.get(__ret__, 'register_interface_ip_with_dns'),
        service_mode_v2=pulumi.get(__ret__, 'service_mode_v2'),
        support_url=pulumi.get(__ret__, 'support_url'),
        switch_locked=pulumi.get(__ret__, 'switch_locked'),
        target_tests=pulumi.get(__ret__, 'target_tests'),
        tunnel_protocol=pulumi.get(__ret__, 'tunnel_protocol'))
def get_zero_trust_device_custom_profile_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                                policy_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustDeviceCustomProfileResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_device_custom_profile = cloudflare.get_zero_trust_device_custom_profile(account_id="699d98642c564d2e855e9661899b7252",
        policy_id="f174e90a-fafe-4643-bbbc-4a0ed4fc8415")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['policyId'] = policy_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustDeviceCustomProfile:getZeroTrustDeviceCustomProfile', __args__, opts=opts, typ=GetZeroTrustDeviceCustomProfileResult)
    return __ret__.apply(lambda __response__: GetZeroTrustDeviceCustomProfileResult(
        account_id=pulumi.get(__response__, 'account_id'),
        allow_mode_switch=pulumi.get(__response__, 'allow_mode_switch'),
        allow_updates=pulumi.get(__response__, 'allow_updates'),
        allowed_to_leave=pulumi.get(__response__, 'allowed_to_leave'),
        auto_connect=pulumi.get(__response__, 'auto_connect'),
        captive_portal=pulumi.get(__response__, 'captive_portal'),
        default=pulumi.get(__response__, 'default'),
        description=pulumi.get(__response__, 'description'),
        disable_auto_fallback=pulumi.get(__response__, 'disable_auto_fallback'),
        enabled=pulumi.get(__response__, 'enabled'),
        exclude_office_ips=pulumi.get(__response__, 'exclude_office_ips'),
        excludes=pulumi.get(__response__, 'excludes'),
        fallback_domains=pulumi.get(__response__, 'fallback_domains'),
        gateway_unique_id=pulumi.get(__response__, 'gateway_unique_id'),
        id=pulumi.get(__response__, 'id'),
        includes=pulumi.get(__response__, 'includes'),
        lan_allow_minutes=pulumi.get(__response__, 'lan_allow_minutes'),
        lan_allow_subnet_size=pulumi.get(__response__, 'lan_allow_subnet_size'),
        match=pulumi.get(__response__, 'match'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        precedence=pulumi.get(__response__, 'precedence'),
        register_interface_ip_with_dns=pulumi.get(__response__, 'register_interface_ip_with_dns'),
        service_mode_v2=pulumi.get(__response__, 'service_mode_v2'),
        support_url=pulumi.get(__response__, 'support_url'),
        switch_locked=pulumi.get(__response__, 'switch_locked'),
        target_tests=pulumi.get(__response__, 'target_tests'),
        tunnel_protocol=pulumi.get(__response__, 'tunnel_protocol')))
