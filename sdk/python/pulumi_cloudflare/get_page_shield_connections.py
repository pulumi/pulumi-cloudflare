# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPageShieldConnectionsResult',
    'AwaitableGetPageShieldConnectionsResult',
    'get_page_shield_connections',
    'get_page_shield_connections_output',
]

@pulumi.output_type
class GetPageShieldConnectionsResult:
    """
    A collection of values returned by getPageShieldConnections.
    """
    def __init__(__self__, added_at=None, connection_id=None, domain_reported_malicious=None, first_page_url=None, first_seen_at=None, host=None, id=None, last_seen_at=None, malicious_domain_categories=None, malicious_url_categories=None, page_urls=None, url=None, url_contains_cdn_cgi_path=None, url_reported_malicious=None, zone_id=None):
        if added_at and not isinstance(added_at, str):
            raise TypeError("Expected argument 'added_at' to be a str")
        pulumi.set(__self__, "added_at", added_at)
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        pulumi.set(__self__, "connection_id", connection_id)
        if domain_reported_malicious and not isinstance(domain_reported_malicious, bool):
            raise TypeError("Expected argument 'domain_reported_malicious' to be a bool")
        pulumi.set(__self__, "domain_reported_malicious", domain_reported_malicious)
        if first_page_url and not isinstance(first_page_url, str):
            raise TypeError("Expected argument 'first_page_url' to be a str")
        pulumi.set(__self__, "first_page_url", first_page_url)
        if first_seen_at and not isinstance(first_seen_at, str):
            raise TypeError("Expected argument 'first_seen_at' to be a str")
        pulumi.set(__self__, "first_seen_at", first_seen_at)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_seen_at and not isinstance(last_seen_at, str):
            raise TypeError("Expected argument 'last_seen_at' to be a str")
        pulumi.set(__self__, "last_seen_at", last_seen_at)
        if malicious_domain_categories and not isinstance(malicious_domain_categories, list):
            raise TypeError("Expected argument 'malicious_domain_categories' to be a list")
        pulumi.set(__self__, "malicious_domain_categories", malicious_domain_categories)
        if malicious_url_categories and not isinstance(malicious_url_categories, list):
            raise TypeError("Expected argument 'malicious_url_categories' to be a list")
        pulumi.set(__self__, "malicious_url_categories", malicious_url_categories)
        if page_urls and not isinstance(page_urls, list):
            raise TypeError("Expected argument 'page_urls' to be a list")
        pulumi.set(__self__, "page_urls", page_urls)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if url_contains_cdn_cgi_path and not isinstance(url_contains_cdn_cgi_path, bool):
            raise TypeError("Expected argument 'url_contains_cdn_cgi_path' to be a bool")
        pulumi.set(__self__, "url_contains_cdn_cgi_path", url_contains_cdn_cgi_path)
        if url_reported_malicious and not isinstance(url_reported_malicious, bool):
            raise TypeError("Expected argument 'url_reported_malicious' to be a bool")
        pulumi.set(__self__, "url_reported_malicious", url_reported_malicious)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="addedAt")
    def added_at(self) -> builtins.str:
        return pulumi.get(self, "added_at")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="domainReportedMalicious")
    def domain_reported_malicious(self) -> builtins.bool:
        return pulumi.get(self, "domain_reported_malicious")

    @property
    @pulumi.getter(name="firstPageUrl")
    def first_page_url(self) -> builtins.str:
        return pulumi.get(self, "first_page_url")

    @property
    @pulumi.getter(name="firstSeenAt")
    def first_seen_at(self) -> builtins.str:
        return pulumi.get(self, "first_seen_at")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastSeenAt")
    def last_seen_at(self) -> builtins.str:
        return pulumi.get(self, "last_seen_at")

    @property
    @pulumi.getter(name="maliciousDomainCategories")
    def malicious_domain_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "malicious_domain_categories")

    @property
    @pulumi.getter(name="maliciousUrlCategories")
    def malicious_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "malicious_url_categories")

    @property
    @pulumi.getter(name="pageUrls")
    def page_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "page_urls")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="urlContainsCdnCgiPath")
    def url_contains_cdn_cgi_path(self) -> builtins.bool:
        return pulumi.get(self, "url_contains_cdn_cgi_path")

    @property
    @pulumi.getter(name="urlReportedMalicious")
    def url_reported_malicious(self) -> builtins.bool:
        return pulumi.get(self, "url_reported_malicious")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")


class AwaitableGetPageShieldConnectionsResult(GetPageShieldConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPageShieldConnectionsResult(
            added_at=self.added_at,
            connection_id=self.connection_id,
            domain_reported_malicious=self.domain_reported_malicious,
            first_page_url=self.first_page_url,
            first_seen_at=self.first_seen_at,
            host=self.host,
            id=self.id,
            last_seen_at=self.last_seen_at,
            malicious_domain_categories=self.malicious_domain_categories,
            malicious_url_categories=self.malicious_url_categories,
            page_urls=self.page_urls,
            url=self.url,
            url_contains_cdn_cgi_path=self.url_contains_cdn_cgi_path,
            url_reported_malicious=self.url_reported_malicious,
            zone_id=self.zone_id)


def get_page_shield_connections(connection_id: Optional[builtins.str] = None,
                                zone_id: Optional[builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPageShieldConnectionsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_page_shield_connections = cloudflare.get_page_shield_connections(zone_id="023e105f4ecef8ad9ca31a8372d0c353",
        connection_id="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param builtins.str connection_id: Identifier
    :param builtins.str zone_id: Identifier
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getPageShieldConnections:getPageShieldConnections', __args__, opts=opts, typ=GetPageShieldConnectionsResult).value

    return AwaitableGetPageShieldConnectionsResult(
        added_at=pulumi.get(__ret__, 'added_at'),
        connection_id=pulumi.get(__ret__, 'connection_id'),
        domain_reported_malicious=pulumi.get(__ret__, 'domain_reported_malicious'),
        first_page_url=pulumi.get(__ret__, 'first_page_url'),
        first_seen_at=pulumi.get(__ret__, 'first_seen_at'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        last_seen_at=pulumi.get(__ret__, 'last_seen_at'),
        malicious_domain_categories=pulumi.get(__ret__, 'malicious_domain_categories'),
        malicious_url_categories=pulumi.get(__ret__, 'malicious_url_categories'),
        page_urls=pulumi.get(__ret__, 'page_urls'),
        url=pulumi.get(__ret__, 'url'),
        url_contains_cdn_cgi_path=pulumi.get(__ret__, 'url_contains_cdn_cgi_path'),
        url_reported_malicious=pulumi.get(__ret__, 'url_reported_malicious'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_page_shield_connections_output(connection_id: Optional[pulumi.Input[builtins.str]] = None,
                                       zone_id: Optional[pulumi.Input[builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPageShieldConnectionsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_page_shield_connections = cloudflare.get_page_shield_connections(zone_id="023e105f4ecef8ad9ca31a8372d0c353",
        connection_id="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param builtins.str connection_id: Identifier
    :param builtins.str zone_id: Identifier
    """
    __args__ = dict()
    __args__['connectionId'] = connection_id
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getPageShieldConnections:getPageShieldConnections', __args__, opts=opts, typ=GetPageShieldConnectionsResult)
    return __ret__.apply(lambda __response__: GetPageShieldConnectionsResult(
        added_at=pulumi.get(__response__, 'added_at'),
        connection_id=pulumi.get(__response__, 'connection_id'),
        domain_reported_malicious=pulumi.get(__response__, 'domain_reported_malicious'),
        first_page_url=pulumi.get(__response__, 'first_page_url'),
        first_seen_at=pulumi.get(__response__, 'first_seen_at'),
        host=pulumi.get(__response__, 'host'),
        id=pulumi.get(__response__, 'id'),
        last_seen_at=pulumi.get(__response__, 'last_seen_at'),
        malicious_domain_categories=pulumi.get(__response__, 'malicious_domain_categories'),
        malicious_url_categories=pulumi.get(__response__, 'malicious_url_categories'),
        page_urls=pulumi.get(__response__, 'page_urls'),
        url=pulumi.get(__response__, 'url'),
        url_contains_cdn_cgi_path=pulumi.get(__response__, 'url_contains_cdn_cgi_path'),
        url_reported_malicious=pulumi.get(__response__, 'url_reported_malicious'),
        zone_id=pulumi.get(__response__, 'zone_id')))
