# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetMagicTransitSitesResult',
    'AwaitableGetMagicTransitSitesResult',
    'get_magic_transit_sites',
    'get_magic_transit_sites_output',
]

@pulumi.output_type
class GetMagicTransitSitesResult:
    """
    A collection of values returned by getMagicTransitSites.
    """
    def __init__(__self__, account_id=None, connector_identifier=None, id=None, max_items=None, results=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if connector_identifier and not isinstance(connector_identifier, str):
            raise TypeError("Expected argument 'connector_identifier' to be a str")
        pulumi.set(__self__, "connector_identifier", connector_identifier)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_items and not isinstance(max_items, int):
            raise TypeError("Expected argument 'max_items' to be a int")
        pulumi.set(__self__, "max_items", max_items)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="connectorIdentifier")
    def connector_identifier(self) -> Optional[str]:
        """
        Identifier
        """
        return pulumi.get(self, "connector_identifier")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        """
        Max items to fetch, default: 1000
        """
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetMagicTransitSitesResultResult']:
        """
        The items returned by the data source
        """
        return pulumi.get(self, "results")


class AwaitableGetMagicTransitSitesResult(GetMagicTransitSitesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMagicTransitSitesResult(
            account_id=self.account_id,
            connector_identifier=self.connector_identifier,
            id=self.id,
            max_items=self.max_items,
            results=self.results)


def get_magic_transit_sites(account_id: Optional[str] = None,
                            connector_identifier: Optional[str] = None,
                            max_items: Optional[int] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMagicTransitSitesResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_magic_transit_sites = cloudflare.get_magic_transit_sites(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        connector_identifier="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param str account_id: Identifier
    :param str connector_identifier: Identifier
    :param int max_items: Max items to fetch, default: 1000
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['connectorIdentifier'] = connector_identifier
    __args__['maxItems'] = max_items
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getMagicTransitSites:getMagicTransitSites', __args__, opts=opts, typ=GetMagicTransitSitesResult).value

    return AwaitableGetMagicTransitSitesResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        connector_identifier=pulumi.get(__ret__, 'connector_identifier'),
        id=pulumi.get(__ret__, 'id'),
        max_items=pulumi.get(__ret__, 'max_items'),
        results=pulumi.get(__ret__, 'results'))
def get_magic_transit_sites_output(account_id: Optional[pulumi.Input[str]] = None,
                                   connector_identifier: Optional[pulumi.Input[Optional[str]]] = None,
                                   max_items: Optional[pulumi.Input[Optional[int]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMagicTransitSitesResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_magic_transit_sites = cloudflare.get_magic_transit_sites(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        connector_identifier="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param str account_id: Identifier
    :param str connector_identifier: Identifier
    :param int max_items: Max items to fetch, default: 1000
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['connectorIdentifier'] = connector_identifier
    __args__['maxItems'] = max_items
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getMagicTransitSites:getMagicTransitSites', __args__, opts=opts, typ=GetMagicTransitSitesResult)
    return __ret__.apply(lambda __response__: GetMagicTransitSitesResult(
        account_id=pulumi.get(__response__, 'account_id'),
        connector_identifier=pulumi.get(__response__, 'connector_identifier'),
        id=pulumi.get(__response__, 'id'),
        max_items=pulumi.get(__response__, 'max_items'),
        results=pulumi.get(__response__, 'results')))
