# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class AccessIdentityProvider(pulumi.CustomResource):
    account_id: pulumi.Output[str]
    configs: pulumi.Output[list]
    """
    Provider configuration from the [developer documentation][access_identity_provider_guide].

      * `appsDomain` (`str`)
      * `attributes` (`list`)
      * `authUrl` (`str`)
      * `centrifyAccount` (`str`)
      * `centrifyAppId` (`str`)
      * `certsUrl` (`str`)
      * `client_id` (`str`)
      * `client_secret` (`str`)
      * `directoryId` (`str`)
      * `emailAttributeName` (`str`)
      * `idpPublicCert` (`str`)
      * `issuerUrl` (`str`)
      * `oktaAccount` (`str`)
      * `oneloginAccount` (`str`)
      * `redirectUrl` (`str`)
      * `signRequest` (`bool`)
      * `ssoTargetUrl` (`str`)
      * `supportGroups` (`bool`)
      * `tokenUrl` (`str`)
    """
    name: pulumi.Output[str]
    """
    Friendly name of the Access Identity Provider configuration.
    """
    type: pulumi.Output[str]
    """
    The provider type to use. Must be one of: `"centrify"`,
    `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
    `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.
    """
    def __init__(__self__, resource_name, opts=None, account_id=None, configs=None, name=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Cloudflare Access Identity Provider resource. Identity Providers are
        used as an authentication or authorisation source within Access.

        ## Example Usage



        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        # one time pin
        pin_login = cloudflare.AccessIdentityProvider("pinLogin",
            account_id="1d5fdc9e88c8a8c4518b068cd94331fe",
            name="PIN login",
            type="onetimepin")
        # oauth
        github_oauth = cloudflare.AccessIdentityProvider("githubOauth",
            account_id="1d5fdc9e88c8a8c4518b068cd94331fe",
            configs=[{
                "client_id": "example",
                "client_secret": "secret_key",
            }],
            name="GitHub OAuth",
            type="github")
        # saml
        jumpcloud_saml = cloudflare.AccessIdentityProvider("jumpcloudSaml",
            account_id="1d5fdc9e88c8a8c4518b068cd94331fe",
            configs=[{
                "attributes": [
                    "email",
                    "username",
                ],
                "idpPublicCert": \"\"\"MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg
        uTnQyuOqPuHbnN83d/2l1NSYKCbHt24o
        \"\"\",
                "issuerUrl": "jumpcloud",
                "signRequest": False,
                "ssoTargetUrl": "https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess",
            }],
            name="JumpCloud SAML",
            type="saml")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] configs: Provider configuration from the [developer documentation][access_identity_provider_guide].
        :param pulumi.Input[str] name: Friendly name of the Access Identity Provider configuration.
        :param pulumi.Input[str] type: The provider type to use. Must be one of: `"centrify"`,
               `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
               `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.

        The **configs** object supports the following:

          * `appsDomain` (`pulumi.Input[str]`)
          * `attributes` (`pulumi.Input[list]`)
          * `authUrl` (`pulumi.Input[str]`)
          * `centrifyAccount` (`pulumi.Input[str]`)
          * `centrifyAppId` (`pulumi.Input[str]`)
          * `certsUrl` (`pulumi.Input[str]`)
          * `client_id` (`pulumi.Input[str]`)
          * `client_secret` (`pulumi.Input[str]`)
          * `directoryId` (`pulumi.Input[str]`)
          * `emailAttributeName` (`pulumi.Input[str]`)
          * `idpPublicCert` (`pulumi.Input[str]`)
          * `issuerUrl` (`pulumi.Input[str]`)
          * `oktaAccount` (`pulumi.Input[str]`)
          * `oneloginAccount` (`pulumi.Input[str]`)
          * `redirectUrl` (`pulumi.Input[str]`)
          * `signRequest` (`pulumi.Input[bool]`)
          * `ssoTargetUrl` (`pulumi.Input[str]`)
          * `supportGroups` (`pulumi.Input[bool]`)
          * `tokenUrl` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                raise TypeError("Missing required property 'account_id'")
            __props__['account_id'] = account_id
            __props__['configs'] = configs
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(AccessIdentityProvider, __self__).__init__(
            'cloudflare:index/accessIdentityProvider:AccessIdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, configs=None, name=None, type=None):
        """
        Get an existing AccessIdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] configs: Provider configuration from the [developer documentation][access_identity_provider_guide].
        :param pulumi.Input[str] name: Friendly name of the Access Identity Provider configuration.
        :param pulumi.Input[str] type: The provider type to use. Must be one of: `"centrify"`,
               `"facebook"`, `"google-apps"`, `"oidc"`, `"github"`, `"google"`, `"saml"`,
               `"linkedin"`, `"azureAD"`, `"okta"`, `"onetimepin"`, `"onelogin"`, `"yandex"`.

        The **configs** object supports the following:

          * `appsDomain` (`pulumi.Input[str]`)
          * `attributes` (`pulumi.Input[list]`)
          * `authUrl` (`pulumi.Input[str]`)
          * `centrifyAccount` (`pulumi.Input[str]`)
          * `centrifyAppId` (`pulumi.Input[str]`)
          * `certsUrl` (`pulumi.Input[str]`)
          * `client_id` (`pulumi.Input[str]`)
          * `client_secret` (`pulumi.Input[str]`)
          * `directoryId` (`pulumi.Input[str]`)
          * `emailAttributeName` (`pulumi.Input[str]`)
          * `idpPublicCert` (`pulumi.Input[str]`)
          * `issuerUrl` (`pulumi.Input[str]`)
          * `oktaAccount` (`pulumi.Input[str]`)
          * `oneloginAccount` (`pulumi.Input[str]`)
          * `redirectUrl` (`pulumi.Input[str]`)
          * `signRequest` (`pulumi.Input[bool]`)
          * `ssoTargetUrl` (`pulumi.Input[str]`)
          * `supportGroups` (`pulumi.Input[bool]`)
          * `tokenUrl` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["configs"] = configs
        __props__["name"] = name
        __props__["type"] = type
        return AccessIdentityProvider(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

