# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Healthcheck(pulumi.CustomResource):
    address: pulumi.Output[str]
    """
    The hostname or IP address of the origin server to run health checks on.
    """
    allow_insecure: pulumi.Output[bool]
    """
    Do not validate the certificate when the health check uses HTTPS. Valid values: `true` or `false` (Default: `false`).
    """
    check_regions: pulumi.Output[list]
    """
    A list of regions from which to run health checks. If not set Cloudflare will pick a default region. Valid values: `WNAM`, `ENAM`, `WEU`, `EEU`, `NSAM`, `SSAM`, `OC`, `ME`, `NAF`, `SAF`, `IN`, `SEAS`, `NEAS`, `ALL_REGIONS`.
    """
    consecutive_fails: pulumi.Output[float]
    """
    The number of consecutive fails required from a health check before changing the health to unhealthy. (Default: `1`)
    """
    consecutive_successes: pulumi.Output[float]
    """
    The number of consecutive successes required from a health check before changing the health to healthy. (Default: `1`)
    """
    created_on: pulumi.Output[str]
    description: pulumi.Output[str]
    """
    A human-readable description of the health check.
    """
    expected_body: pulumi.Output[str]
    """
    A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
    """
    expected_codes: pulumi.Output[list]
    """
    The expected HTTP response codes (e.g. "200") or code ranges (e.g. "2xx" for all codes starting with 2) of the health check. (Default: `["200"]`)
    """
    follow_redirects: pulumi.Output[bool]
    """
    Follow redirects if the origin returns a 3xx status code. Valid values: `true` or `false` (Default: `false`).
    """
    headers: pulumi.Output[list]
    """
    The header name.

      * `header` (`str`) - The header name.
      * `values` (`list`) - A list of string values for the header.
    """
    interval: pulumi.Output[float]
    """
    The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations. (Default: `60`)
    """
    method: pulumi.Output[str]
    """
    The TCP connection method to use for the health check. Valid values: `connection_established` (Default: `connection_established`).
    """
    modified_on: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
    """
    notification_email_addresses: pulumi.Output[list]
    """
    A list of email addresses we want to send the notifications to.
    """
    notification_suspended: pulumi.Output[bool]
    """
    Whether the notifications are suspended or not. Useful for maintenance periods. Valid values: `true` or `false` (Default: `false`).
    """
    path: pulumi.Output[str]
    """
    The endpoint path to health check against. (Default: `/`)
    """
    port: pulumi.Output[float]
    """
    Port number to connect to for the health check.  Valid values are in the rage `0-65535` (Default: `80`).
    """
    retries: pulumi.Output[float]
    """
    The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. (Default: `2`)
    """
    suspended: pulumi.Output[bool]
    """
    If suspended, no health checks are sent to the origin. Valid values: `true` or `false` (Default: `false`).
    """
    timeout: pulumi.Output[float]
    """
    The timeout (in seconds) before marking the health check as failed. (Default: `5`)
    """
    type: pulumi.Output[str]
    """
    The protocol to use for the health check. Valid values: `HTTP`, `HTTPS`, `TCP`.
    """
    zone_id: pulumi.Output[str]
    """
    The DNS zone ID to which apply settings.
    """
    def __init__(__self__, resource_name, opts=None, address=None, allow_insecure=None, check_regions=None, consecutive_fails=None, consecutive_successes=None, description=None, expected_body=None, expected_codes=None, follow_redirects=None, headers=None, interval=None, method=None, name=None, notification_email_addresses=None, notification_suspended=None, path=None, port=None, retries=None, suspended=None, timeout=None, type=None, zone_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Standalone Health Checks provide a way to monitor origin servers without needing a Cloudflare Load Balancer.

        ## Example Usage

        The resource supports HTTP, HTTPS and TCP type health checks.
        ### HTTPS Health Check

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        http_health_check = cloudflare.Healthcheck("httpHealthCheck",
            zone_id=var["cloudflare_zone_id"],
            name="http-health-check",
            description="example http health check",
            address="example.com",
            suspended=False,
            check_regions=[
                "WEU",
                "EEU",
            ],
            notification_suspended=False,
            notification_email_addresses=["hostmaster@example.com"],
            type="HTTPS",
            port="443",
            method="GET",
            path="/health",
            expected_body="alive",
            expected_codes=[
                "2xx",
                "301",
            ],
            follow_redirects=True,
            allow_insecure=False,
            headers=[{
                "header": "Host",
                "values": ["example.com"],
            }],
            timeout=10,
            retries=2,
            interval=60,
            consecutive_fails=3,
            consecutive_successes=2)
        ```
        ### TCP Monitor

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        tcp_health_check = cloudflare.Healthcheck("tcpHealthCheck",
            zone_id=var["cloudflare_zone_id"],
            name="tcp-health-check",
            description="example tcp health check",
            address="example.com",
            suspended=False,
            check_regions=[
                "WEU",
                "EEU",
            ],
            notification_suspended=False,
            notification_email_addresses=["hostmaster@example.com"],
            type="TCP",
            port="22",
            method="connection_established",
            timeout=10,
            retries=2,
            interval=60,
            consecutive_fails=3,
            consecutive_successes=2)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The hostname or IP address of the origin server to run health checks on.
        :param pulumi.Input[bool] allow_insecure: Do not validate the certificate when the health check uses HTTPS. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[list] check_regions: A list of regions from which to run health checks. If not set Cloudflare will pick a default region. Valid values: `WNAM`, `ENAM`, `WEU`, `EEU`, `NSAM`, `SSAM`, `OC`, `ME`, `NAF`, `SAF`, `IN`, `SEAS`, `NEAS`, `ALL_REGIONS`.
        :param pulumi.Input[float] consecutive_fails: The number of consecutive fails required from a health check before changing the health to unhealthy. (Default: `1`)
        :param pulumi.Input[float] consecutive_successes: The number of consecutive successes required from a health check before changing the health to healthy. (Default: `1`)
        :param pulumi.Input[str] description: A human-readable description of the health check.
        :param pulumi.Input[str] expected_body: A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
        :param pulumi.Input[list] expected_codes: The expected HTTP response codes (e.g. "200") or code ranges (e.g. "2xx" for all codes starting with 2) of the health check. (Default: `["200"]`)
        :param pulumi.Input[bool] follow_redirects: Follow redirects if the origin returns a 3xx status code. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[list] headers: The header name.
        :param pulumi.Input[float] interval: The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations. (Default: `60`)
        :param pulumi.Input[str] method: The TCP connection method to use for the health check. Valid values: `connection_established` (Default: `connection_established`).
        :param pulumi.Input[str] name: A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        :param pulumi.Input[list] notification_email_addresses: A list of email addresses we want to send the notifications to.
        :param pulumi.Input[bool] notification_suspended: Whether the notifications are suspended or not. Useful for maintenance periods. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[str] path: The endpoint path to health check against. (Default: `/`)
        :param pulumi.Input[float] port: Port number to connect to for the health check.  Valid values are in the rage `0-65535` (Default: `80`).
        :param pulumi.Input[float] retries: The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. (Default: `2`)
        :param pulumi.Input[bool] suspended: If suspended, no health checks are sent to the origin. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[float] timeout: The timeout (in seconds) before marking the health check as failed. (Default: `5`)
        :param pulumi.Input[str] type: The protocol to use for the health check. Valid values: `HTTP`, `HTTPS`, `TCP`.
        :param pulumi.Input[str] zone_id: The DNS zone ID to which apply settings.

        The **headers** object supports the following:

          * `header` (`pulumi.Input[str]`) - The header name.
          * `values` (`pulumi.Input[list]`) - A list of string values for the header.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if address is None:
                raise TypeError("Missing required property 'address'")
            __props__['address'] = address
            __props__['allow_insecure'] = allow_insecure
            __props__['check_regions'] = check_regions
            __props__['consecutive_fails'] = consecutive_fails
            __props__['consecutive_successes'] = consecutive_successes
            __props__['description'] = description
            __props__['expected_body'] = expected_body
            __props__['expected_codes'] = expected_codes
            __props__['follow_redirects'] = follow_redirects
            __props__['headers'] = headers
            __props__['interval'] = interval
            __props__['method'] = method
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['notification_email_addresses'] = notification_email_addresses
            __props__['notification_suspended'] = notification_suspended
            __props__['path'] = path
            __props__['port'] = port
            __props__['retries'] = retries
            __props__['suspended'] = suspended
            __props__['timeout'] = timeout
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            if zone_id is None:
                raise TypeError("Missing required property 'zone_id'")
            __props__['zone_id'] = zone_id
            __props__['created_on'] = None
            __props__['modified_on'] = None
        super(Healthcheck, __self__).__init__(
            'cloudflare:index/healthcheck:Healthcheck',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, address=None, allow_insecure=None, check_regions=None, consecutive_fails=None, consecutive_successes=None, created_on=None, description=None, expected_body=None, expected_codes=None, follow_redirects=None, headers=None, interval=None, method=None, modified_on=None, name=None, notification_email_addresses=None, notification_suspended=None, path=None, port=None, retries=None, suspended=None, timeout=None, type=None, zone_id=None):
        """
        Get an existing Healthcheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The hostname or IP address of the origin server to run health checks on.
        :param pulumi.Input[bool] allow_insecure: Do not validate the certificate when the health check uses HTTPS. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[list] check_regions: A list of regions from which to run health checks. If not set Cloudflare will pick a default region. Valid values: `WNAM`, `ENAM`, `WEU`, `EEU`, `NSAM`, `SSAM`, `OC`, `ME`, `NAF`, `SAF`, `IN`, `SEAS`, `NEAS`, `ALL_REGIONS`.
        :param pulumi.Input[float] consecutive_fails: The number of consecutive fails required from a health check before changing the health to unhealthy. (Default: `1`)
        :param pulumi.Input[float] consecutive_successes: The number of consecutive successes required from a health check before changing the health to healthy. (Default: `1`)
        :param pulumi.Input[str] description: A human-readable description of the health check.
        :param pulumi.Input[str] expected_body: A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
        :param pulumi.Input[list] expected_codes: The expected HTTP response codes (e.g. "200") or code ranges (e.g. "2xx" for all codes starting with 2) of the health check. (Default: `["200"]`)
        :param pulumi.Input[bool] follow_redirects: Follow redirects if the origin returns a 3xx status code. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[list] headers: The header name.
        :param pulumi.Input[float] interval: The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations. (Default: `60`)
        :param pulumi.Input[str] method: The TCP connection method to use for the health check. Valid values: `connection_established` (Default: `connection_established`).
        :param pulumi.Input[str] name: A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
        :param pulumi.Input[list] notification_email_addresses: A list of email addresses we want to send the notifications to.
        :param pulumi.Input[bool] notification_suspended: Whether the notifications are suspended or not. Useful for maintenance periods. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[str] path: The endpoint path to health check against. (Default: `/`)
        :param pulumi.Input[float] port: Port number to connect to for the health check.  Valid values are in the rage `0-65535` (Default: `80`).
        :param pulumi.Input[float] retries: The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. (Default: `2`)
        :param pulumi.Input[bool] suspended: If suspended, no health checks are sent to the origin. Valid values: `true` or `false` (Default: `false`).
        :param pulumi.Input[float] timeout: The timeout (in seconds) before marking the health check as failed. (Default: `5`)
        :param pulumi.Input[str] type: The protocol to use for the health check. Valid values: `HTTP`, `HTTPS`, `TCP`.
        :param pulumi.Input[str] zone_id: The DNS zone ID to which apply settings.

        The **headers** object supports the following:

          * `header` (`pulumi.Input[str]`) - The header name.
          * `values` (`pulumi.Input[list]`) - A list of string values for the header.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["address"] = address
        __props__["allow_insecure"] = allow_insecure
        __props__["check_regions"] = check_regions
        __props__["consecutive_fails"] = consecutive_fails
        __props__["consecutive_successes"] = consecutive_successes
        __props__["created_on"] = created_on
        __props__["description"] = description
        __props__["expected_body"] = expected_body
        __props__["expected_codes"] = expected_codes
        __props__["follow_redirects"] = follow_redirects
        __props__["headers"] = headers
        __props__["interval"] = interval
        __props__["method"] = method
        __props__["modified_on"] = modified_on
        __props__["name"] = name
        __props__["notification_email_addresses"] = notification_email_addresses
        __props__["notification_suspended"] = notification_suspended
        __props__["path"] = path
        __props__["port"] = port
        __props__["retries"] = retries
        __props__["suspended"] = suspended
        __props__["timeout"] = timeout
        __props__["type"] = type
        __props__["zone_id"] = zone_id
        return Healthcheck(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
