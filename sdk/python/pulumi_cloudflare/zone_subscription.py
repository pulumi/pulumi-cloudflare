# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneSubscriptionArgs', 'ZoneSubscription']

@pulumi.input_type
class ZoneSubscriptionArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[builtins.str],
                 frequency: Optional[pulumi.Input[builtins.str]] = None,
                 rate_plan: Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']] = None):
        """
        The set of arguments for constructing a ZoneSubscription resource.
        :param pulumi.Input[builtins.str] identifier: Subscription identifier tag.
        :param pulumi.Input[builtins.str] frequency: How often the subscription is renewed automatically.
               Available values: "weekly", "monthly", "quarterly", "yearly".
        :param pulumi.Input['ZoneSubscriptionRatePlanArgs'] rate_plan: The rate plan applied to the subscription.
        """
        pulumi.set(__self__, "identifier", identifier)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if rate_plan is not None:
            pulumi.set(__self__, "rate_plan", rate_plan)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[builtins.str]:
        """
        Subscription identifier tag.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        How often the subscription is renewed automatically.
        Available values: "weekly", "monthly", "quarterly", "yearly".
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="ratePlan")
    def rate_plan(self) -> Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']]:
        """
        The rate plan applied to the subscription.
        """
        return pulumi.get(self, "rate_plan")

    @rate_plan.setter
    def rate_plan(self, value: Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']]):
        pulumi.set(self, "rate_plan", value)


@pulumi.input_type
class _ZoneSubscriptionState:
    def __init__(__self__, *,
                 frequency: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 rate_plan: Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']] = None):
        """
        Input properties used for looking up and filtering ZoneSubscription resources.
        :param pulumi.Input[builtins.str] frequency: How often the subscription is renewed automatically.
               Available values: "weekly", "monthly", "quarterly", "yearly".
        :param pulumi.Input[builtins.str] identifier: Subscription identifier tag.
        :param pulumi.Input['ZoneSubscriptionRatePlanArgs'] rate_plan: The rate plan applied to the subscription.
        """
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if rate_plan is not None:
            pulumi.set(__self__, "rate_plan", rate_plan)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        How often the subscription is renewed automatically.
        Available values: "weekly", "monthly", "quarterly", "yearly".
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Subscription identifier tag.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="ratePlan")
    def rate_plan(self) -> Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']]:
        """
        The rate plan applied to the subscription.
        """
        return pulumi.get(self, "rate_plan")

    @rate_plan.setter
    def rate_plan(self, value: Optional[pulumi.Input['ZoneSubscriptionRatePlanArgs']]):
        pulumi.set(self, "rate_plan", value)


class ZoneSubscription(pulumi.CustomResource):

    pulumi_type = "cloudflare:index/zoneSubscription:ZoneSubscription"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 rate_plan: Optional[pulumi.Input[Union['ZoneSubscriptionRatePlanArgs', 'ZoneSubscriptionRatePlanArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] frequency: How often the subscription is renewed automatically.
               Available values: "weekly", "monthly", "quarterly", "yearly".
        :param pulumi.Input[builtins.str] identifier: Subscription identifier tag.
        :param pulumi.Input[Union['ZoneSubscriptionRatePlanArgs', 'ZoneSubscriptionRatePlanArgsDict']] rate_plan: The rate plan applied to the subscription.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ZoneSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 frequency: Optional[pulumi.Input[builtins.str]] = None,
                 identifier: Optional[pulumi.Input[builtins.str]] = None,
                 rate_plan: Optional[pulumi.Input[Union['ZoneSubscriptionRatePlanArgs', 'ZoneSubscriptionRatePlanArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneSubscriptionArgs.__new__(ZoneSubscriptionArgs)

            __props__.__dict__["frequency"] = frequency
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["rate_plan"] = rate_plan
        super(ZoneSubscription, __self__).__init__(
            'cloudflare:index/zoneSubscription:ZoneSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            frequency: Optional[pulumi.Input[builtins.str]] = None,
            identifier: Optional[pulumi.Input[builtins.str]] = None,
            rate_plan: Optional[pulumi.Input[Union['ZoneSubscriptionRatePlanArgs', 'ZoneSubscriptionRatePlanArgsDict']]] = None) -> 'ZoneSubscription':
        """
        Get an existing ZoneSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] frequency: How often the subscription is renewed automatically.
               Available values: "weekly", "monthly", "quarterly", "yearly".
        :param pulumi.Input[builtins.str] identifier: Subscription identifier tag.
        :param pulumi.Input[Union['ZoneSubscriptionRatePlanArgs', 'ZoneSubscriptionRatePlanArgsDict']] rate_plan: The rate plan applied to the subscription.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneSubscriptionState.__new__(_ZoneSubscriptionState)

        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["rate_plan"] = rate_plan
        return ZoneSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        How often the subscription is renewed automatically.
        Available values: "weekly", "monthly", "quarterly", "yearly".
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[builtins.str]:
        """
        Subscription identifier tag.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="ratePlan")
    def rate_plan(self) -> pulumi.Output['outputs.ZoneSubscriptionRatePlan']:
        """
        The rate plan applied to the subscription.
        """
        return pulumi.get(self, "rate_plan")

