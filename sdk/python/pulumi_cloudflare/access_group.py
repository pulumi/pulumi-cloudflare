# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class AccessGroup(pulumi.CustomResource):
    account_id: pulumi.Output[str]
    """
    The ID of the account the group is
    associated with.
    """
    excludes: pulumi.Output[list]
    """
    A series of access conditions, see below for
    full list.

      * `anyValidServiceToken` (`bool`)
      * `azures` (`list`)
        * `id` (`str`)
        * `identityProviderId` (`str`)

      * `certificate` (`bool`)
      * `commonName` (`str`)
      * `emailDomains` (`list`)
      * `emails` (`list`)
      * `everyone` (`bool`)
      * `githubs` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `groups` (`list`)
      * `gsuites` (`list`)
        * `email` (`str`)
        * `identityProviderId` (`str`)

      * `ips` (`list`)
      * `oktas` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `samls` (`list`)
        * `attributeName` (`str`)
        * `attributeValue` (`str`)
        * `identityProviderId` (`str`)

      * `serviceTokens` (`list`)
    """
    includes: pulumi.Output[list]
    """
    A series of access conditions, see below for
    full list.

      * `anyValidServiceToken` (`bool`)
      * `azures` (`list`)
        * `id` (`str`)
        * `identityProviderId` (`str`)

      * `certificate` (`bool`)
      * `commonName` (`str`)
      * `emailDomains` (`list`)
      * `emails` (`list`)
      * `everyone` (`bool`)
      * `githubs` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `groups` (`list`)
      * `gsuites` (`list`)
        * `email` (`str`)
        * `identityProviderId` (`str`)

      * `ips` (`list`)
      * `oktas` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `samls` (`list`)
        * `attributeName` (`str`)
        * `attributeValue` (`str`)
        * `identityProviderId` (`str`)

      * `serviceTokens` (`list`)
    """
    name: pulumi.Output[str]
    """
    Friendly name of the Access Group.
    """
    requires: pulumi.Output[list]
    """
    A series of access conditions, see below for
    full list.

      * `anyValidServiceToken` (`bool`)
      * `azures` (`list`)
        * `id` (`str`)
        * `identityProviderId` (`str`)

      * `certificate` (`bool`)
      * `commonName` (`str`)
      * `emailDomains` (`list`)
      * `emails` (`list`)
      * `everyone` (`bool`)
      * `githubs` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `groups` (`list`)
      * `gsuites` (`list`)
        * `email` (`str`)
        * `identityProviderId` (`str`)

      * `ips` (`list`)
      * `oktas` (`list`)
        * `identityProviderId` (`str`)
        * `name` (`str`) - Friendly name of the Access Group.

      * `samls` (`list`)
        * `attributeName` (`str`)
        * `attributeValue` (`str`)
        * `identityProviderId` (`str`)

      * `serviceTokens` (`list`)
    """
    def __init__(__self__, resource_name, opts=None, account_id=None, excludes=None, includes=None, name=None, requires=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a Cloudflare Access Group resource. Access Groups are used
        in conjunction with Access Policies to restrict access to a
        particular resource based on group membership.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        # Allowing access to `test@example.com` email address only
        test_group_access_group = cloudflare.AccessGroup("testGroupAccessGroup",
            account_id="975ecf5a45e3bcb680dba0722a420ad9",
            name="staging group",
            includes=[{
                "emails": ["test@example.com"],
            }])
        # Allowing `test@example.com` to access but only when coming from a
        # specific IP.
        test_group_index_access_group_access_group = cloudflare.AccessGroup("testGroupIndex/accessGroupAccessGroup",
            account_id="975ecf5a45e3bcb680dba0722a420ad9",
            name="staging group",
            includes=[{
                "emails": ["test@example.com"],
            }],
            requires={
                "ips": [var["office_ip"]],
            })
        ```
        ## Conditions

        `require`, `exclude` and `include` arguments share the available
        conditions which can be applied. The conditions are:

        * `ip` - (Optional) A list of IP addresses or ranges. Example:
        `ip = ["1.2.3.4", "10.0.0.0/2"]`
        * `email` - (Optional) A list of email addresses. Example:
        `email = ["test@example.com"]`
        * `email_domain` - (Optional) A list of email domains. Example:
        `email_domain = ["example.com"]`
        * `service_token` - (Optional) A list of service token ids. Example:
        `service_token = [cloudflare_access_service_token.demo.id]`
        * `any_valid_service_token` - (Optional) Boolean indicating if allow
        all tokens to be granted. Example: `any_valid_service_token = true`
        * `group` - (Optional) A list of access group ids. Example:
        `group = [cloudflare_access_group.demo.id]`
        * `everyone` - (Optional) Boolean indicating permitting access for all
        requests. Example: `everyone = true`
        * `certificate` - (Optional) Whether to use mTLS certificate authentication.
        * `common_name` - (Optional) Use a certificate common name to authenticate with.
        * `gsuite` - (Optional) Use GSuite as the authentication mechanism. Example:
        * `github` - (Optional) Use a GitHub team as the `include` condition. Example:
        * `azure` - (Optional) Use Azure AD as the `include` condition. Example:
        * `okta` - (Optional) Use Okta as the `include` condition. Example:
        * `saml` - (Optional) Use an external SAML setup as the `include` condition.
        Example:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the account the group is
               associated with.
        :param pulumi.Input[list] excludes: A series of access conditions, see below for
               full list.
        :param pulumi.Input[list] includes: A series of access conditions, see below for
               full list.
        :param pulumi.Input[str] name: Friendly name of the Access Group.
        :param pulumi.Input[list] requires: A series of access conditions, see below for
               full list.

        The **excludes** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)

        The **includes** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)

        The **requires** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_id is None:
                raise TypeError("Missing required property 'account_id'")
            __props__['account_id'] = account_id
            __props__['excludes'] = excludes
            if includes is None:
                raise TypeError("Missing required property 'includes'")
            __props__['includes'] = includes
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['requires'] = requires
        super(AccessGroup, __self__).__init__(
            'cloudflare:index/accessGroup:AccessGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, account_id=None, excludes=None, includes=None, name=None, requires=None):
        """
        Get an existing AccessGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: The ID of the account the group is
               associated with.
        :param pulumi.Input[list] excludes: A series of access conditions, see below for
               full list.
        :param pulumi.Input[list] includes: A series of access conditions, see below for
               full list.
        :param pulumi.Input[str] name: Friendly name of the Access Group.
        :param pulumi.Input[list] requires: A series of access conditions, see below for
               full list.

        The **excludes** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)

        The **includes** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)

        The **requires** object supports the following:

          * `anyValidServiceToken` (`pulumi.Input[bool]`)
          * `azures` (`pulumi.Input[list]`)
            * `id` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `certificate` (`pulumi.Input[bool]`)
          * `commonName` (`pulumi.Input[str]`)
          * `emailDomains` (`pulumi.Input[list]`)
          * `emails` (`pulumi.Input[list]`)
          * `everyone` (`pulumi.Input[bool]`)
          * `githubs` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `groups` (`pulumi.Input[list]`)
          * `gsuites` (`pulumi.Input[list]`)
            * `email` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `ips` (`pulumi.Input[list]`)
          * `oktas` (`pulumi.Input[list]`)
            * `identityProviderId` (`pulumi.Input[str]`)
            * `name` (`pulumi.Input[str]`) - Friendly name of the Access Group.

          * `samls` (`pulumi.Input[list]`)
            * `attributeName` (`pulumi.Input[str]`)
            * `attributeValue` (`pulumi.Input[str]`)
            * `identityProviderId` (`pulumi.Input[str]`)

          * `serviceTokens` (`pulumi.Input[list]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_id"] = account_id
        __props__["excludes"] = excludes
        __props__["includes"] = includes
        __props__["name"] = name
        __props__["requires"] = requires
        return AccessGroup(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
