# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZeroTrustTunnelCloudflaredConfigResult',
    'AwaitableGetZeroTrustTunnelCloudflaredConfigResult',
    'get_zero_trust_tunnel_cloudflared_config',
    'get_zero_trust_tunnel_cloudflared_config_output',
]

@pulumi.output_type
class GetZeroTrustTunnelCloudflaredConfigResult:
    """
    A collection of values returned by getZeroTrustTunnelCloudflaredConfig.
    """
    def __init__(__self__, account_id=None, config=None, created_at=None, id=None, source=None, tunnel_id=None, version=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if source and not isinstance(source, str):
            raise TypeError("Expected argument 'source' to be a str")
        pulumi.set(__self__, "source", source)
        if tunnel_id and not isinstance(tunnel_id, str):
            raise TypeError("Expected argument 'tunnel_id' to be a str")
        pulumi.set(__self__, "tunnel_id", tunnel_id)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def config(self) -> 'outputs.GetZeroTrustTunnelCloudflaredConfigConfigResult':
        """
        The tunnel configuration and ingress rules.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def source(self) -> builtins.str:
        """
        Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
        Available values: "local", "cloudflare".
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> builtins.str:
        """
        UUID of the tunnel.
        """
        return pulumi.get(self, "tunnel_id")

    @property
    @pulumi.getter
    def version(self) -> builtins.int:
        """
        The version of the Tunnel Configuration.
        """
        return pulumi.get(self, "version")


class AwaitableGetZeroTrustTunnelCloudflaredConfigResult(GetZeroTrustTunnelCloudflaredConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustTunnelCloudflaredConfigResult(
            account_id=self.account_id,
            config=self.config,
            created_at=self.created_at,
            id=self.id,
            source=self.source,
            tunnel_id=self.tunnel_id,
            version=self.version)


def get_zero_trust_tunnel_cloudflared_config(account_id: Optional[builtins.str] = None,
                                             tunnel_id: Optional[builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustTunnelCloudflaredConfigResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_tunnel_cloudflared_config = cloudflare.get_zero_trust_tunnel_cloudflared_config(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        tunnel_id="f70ff985-a4ef-4643-bbbc-4a0ed4fc8415")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str tunnel_id: UUID of the tunnel.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['tunnelId'] = tunnel_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustTunnelCloudflaredConfig:getZeroTrustTunnelCloudflaredConfig', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredConfigResult).value

    return AwaitableGetZeroTrustTunnelCloudflaredConfigResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        config=pulumi.get(__ret__, 'config'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        source=pulumi.get(__ret__, 'source'),
        tunnel_id=pulumi.get(__ret__, 'tunnel_id'),
        version=pulumi.get(__ret__, 'version'))
def get_zero_trust_tunnel_cloudflared_config_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                                    tunnel_id: Optional[pulumi.Input[builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustTunnelCloudflaredConfigResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_tunnel_cloudflared_config = cloudflare.get_zero_trust_tunnel_cloudflared_config(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        tunnel_id="f70ff985-a4ef-4643-bbbc-4a0ed4fc8415")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str tunnel_id: UUID of the tunnel.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['tunnelId'] = tunnel_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustTunnelCloudflaredConfig:getZeroTrustTunnelCloudflaredConfig', __args__, opts=opts, typ=GetZeroTrustTunnelCloudflaredConfigResult)
    return __ret__.apply(lambda __response__: GetZeroTrustTunnelCloudflaredConfigResult(
        account_id=pulumi.get(__response__, 'account_id'),
        config=pulumi.get(__response__, 'config'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        source=pulumi.get(__response__, 'source'),
        tunnel_id=pulumi.get(__response__, 'tunnel_id'),
        version=pulumi.get(__response__, 'version')))
