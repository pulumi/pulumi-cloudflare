# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWorkersSecretResult',
    'AwaitableGetWorkersSecretResult',
    'get_workers_secret',
    'get_workers_secret_output',
]

@pulumi.output_type
class GetWorkersSecretResult:
    """
    A collection of values returned by getWorkersSecret.
    """
    def __init__(__self__, account_id=None, dispatch_namespace=None, id=None, name=None, script_name=None, secret_name=None, type=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if dispatch_namespace and not isinstance(dispatch_namespace, str):
            raise TypeError("Expected argument 'dispatch_namespace' to be a str")
        pulumi.set(__self__, "dispatch_namespace", dispatch_namespace)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if script_name and not isinstance(script_name, str):
            raise TypeError("Expected argument 'script_name' to be a str")
        pulumi.set(__self__, "script_name", script_name)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="dispatchNamespace")
    def dispatch_namespace(self) -> builtins.str:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "dispatch_namespace")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A JavaScript variable name for the secret binding.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of this secret, this is what will be used to access it inside the Worker.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> builtins.str:
        """
        Name of the script, used in URLs and route configuration.
        """
        return pulumi.get(self, "script_name")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[builtins.str]:
        """
        A JavaScript variable name for the secret binding.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of secret.
        Available values: "secret_text".
        """
        return pulumi.get(self, "type")


class AwaitableGetWorkersSecretResult(GetWorkersSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkersSecretResult(
            account_id=self.account_id,
            dispatch_namespace=self.dispatch_namespace,
            id=self.id,
            name=self.name,
            script_name=self.script_name,
            secret_name=self.secret_name,
            type=self.type)


def get_workers_secret(account_id: Optional[builtins.str] = None,
                       dispatch_namespace: Optional[builtins.str] = None,
                       script_name: Optional[builtins.str] = None,
                       secret_name: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkersSecretResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workers_secret = cloudflare.get_workers_secret(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        dispatch_namespace="my-dispatch-namespace",
        script_name="this-is_my_script-01",
        secret_name="mySecret")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
    :param builtins.str script_name: Name of the script, used in URLs and route configuration.
    :param builtins.str secret_name: A JavaScript variable name for the secret binding.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['dispatchNamespace'] = dispatch_namespace
    __args__['scriptName'] = script_name
    __args__['secretName'] = secret_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWorkersSecret:getWorkersSecret', __args__, opts=opts, typ=GetWorkersSecretResult).value

    return AwaitableGetWorkersSecretResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        dispatch_namespace=pulumi.get(__ret__, 'dispatch_namespace'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        script_name=pulumi.get(__ret__, 'script_name'),
        secret_name=pulumi.get(__ret__, 'secret_name'),
        type=pulumi.get(__ret__, 'type'))
def get_workers_secret_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                              dispatch_namespace: Optional[pulumi.Input[builtins.str]] = None,
                              script_name: Optional[pulumi.Input[builtins.str]] = None,
                              secret_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkersSecretResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workers_secret = cloudflare.get_workers_secret(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        dispatch_namespace="my-dispatch-namespace",
        script_name="this-is_my_script-01",
        secret_name="mySecret")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
    :param builtins.str script_name: Name of the script, used in URLs and route configuration.
    :param builtins.str secret_name: A JavaScript variable name for the secret binding.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['dispatchNamespace'] = dispatch_namespace
    __args__['scriptName'] = script_name
    __args__['secretName'] = secret_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getWorkersSecret:getWorkersSecret', __args__, opts=opts, typ=GetWorkersSecretResult)
    return __ret__.apply(lambda __response__: GetWorkersSecretResult(
        account_id=pulumi.get(__response__, 'account_id'),
        dispatch_namespace=pulumi.get(__response__, 'dispatch_namespace'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        script_name=pulumi.get(__response__, 'script_name'),
        secret_name=pulumi.get(__response__, 'secret_name'),
        type=pulumi.get(__response__, 'type')))
