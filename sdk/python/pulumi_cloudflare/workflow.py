# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowArgs', 'Workflow']

@pulumi.input_type
class WorkflowArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 class_name: pulumi.Input[_builtins.str],
                 script_name: pulumi.Input[_builtins.str],
                 workflow_name: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a Workflow resource.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "script_name", script_name)
        pulumi.set(__self__, "workflow_name", workflow_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "class_name", value)

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "script_name", value)

    @_builtins.property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "workflow_name", value)


@pulumi.input_type
class _WorkflowState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 created_on: Optional[pulumi.Input[_builtins.str]] = None,
                 instances: Optional[pulumi.Input['WorkflowInstancesArgs']] = None,
                 is_deleted: Optional[pulumi.Input[_builtins.float]] = None,
                 modified_on: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 terminator_running: Optional[pulumi.Input[_builtins.float]] = None,
                 triggered_on: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Workflow resources.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if class_name is not None:
            pulumi.set(__self__, "class_name", class_name)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if instances is not None:
            pulumi.set(__self__, "instances", instances)
        if is_deleted is not None:
            pulumi.set(__self__, "is_deleted", is_deleted)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if terminator_running is not None:
            pulumi.set(__self__, "terminator_running", terminator_running)
        if triggered_on is not None:
            pulumi.set(__self__, "triggered_on", triggered_on)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="className")
    def class_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "class_name", value)

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_on", value)

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Optional[pulumi.Input['WorkflowInstancesArgs']]:
        return pulumi.get(self, "instances")

    @instances.setter
    def instances(self, value: Optional[pulumi.Input['WorkflowInstancesArgs']]):
        pulumi.set(self, "instances", value)

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "is_deleted")

    @is_deleted.setter
    def is_deleted(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "is_deleted", value)

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "script_name", value)

    @_builtins.property
    @pulumi.getter(name="terminatorRunning")
    def terminator_running(self) -> Optional[pulumi.Input[_builtins.float]]:
        return pulumi.get(self, "terminator_running")

    @terminator_running.setter
    def terminator_running(self, value: Optional[pulumi.Input[_builtins.float]]):
        pulumi.set(self, "terminator_running", value)

    @_builtins.property
    @pulumi.getter(name="triggeredOn")
    def triggered_on(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "triggered_on")

    @triggered_on.setter
    def triggered_on(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "triggered_on", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)

    @_builtins.property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "workflow_name", value)


@pulumi.type_token("cloudflare:index/workflow:Workflow")
class Workflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workflow = cloudflare.Workflow("example_workflow",
            account_id="account_id",
            workflow_name="x",
            class_name="x",
            script_name="x")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workflow:Workflow example '<account_id>/<workflow_name>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workflow = cloudflare.Workflow("example_workflow",
            account_id="account_id",
            workflow_name="x",
            class_name="x",
            script_name="x")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workflow:Workflow example '<account_id>/<workflow_name>'
        ```

        :param str resource_name: The name of the resource.
        :param WorkflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 class_name: Optional[pulumi.Input[_builtins.str]] = None,
                 script_name: Optional[pulumi.Input[_builtins.str]] = None,
                 workflow_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowArgs.__new__(WorkflowArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if class_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_name'")
            __props__.__dict__["class_name"] = class_name
            if script_name is None and not opts.urn:
                raise TypeError("Missing required property 'script_name'")
            __props__.__dict__["script_name"] = script_name
            if workflow_name is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_name'")
            __props__.__dict__["workflow_name"] = workflow_name
            __props__.__dict__["created_on"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["is_deleted"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["terminator_running"] = None
            __props__.__dict__["triggered_on"] = None
            __props__.__dict__["version_id"] = None
        super(Workflow, __self__).__init__(
            'cloudflare:index/workflow:Workflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            class_name: Optional[pulumi.Input[_builtins.str]] = None,
            created_on: Optional[pulumi.Input[_builtins.str]] = None,
            instances: Optional[pulumi.Input[Union['WorkflowInstancesArgs', 'WorkflowInstancesArgsDict']]] = None,
            is_deleted: Optional[pulumi.Input[_builtins.float]] = None,
            modified_on: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            script_name: Optional[pulumi.Input[_builtins.str]] = None,
            terminator_running: Optional[pulumi.Input[_builtins.float]] = None,
            triggered_on: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None,
            workflow_name: Optional[pulumi.Input[_builtins.str]] = None) -> 'Workflow':
        """
        Get an existing Workflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowState.__new__(_WorkflowState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["class_name"] = class_name
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["instances"] = instances
        __props__.__dict__["is_deleted"] = is_deleted
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["script_name"] = script_name
        __props__.__dict__["terminator_running"] = terminator_running
        __props__.__dict__["triggered_on"] = triggered_on
        __props__.__dict__["version_id"] = version_id
        __props__.__dict__["workflow_name"] = workflow_name
        return Workflow(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "class_name")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> pulumi.Output['outputs.WorkflowInstances']:
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="isDeleted")
    def is_deleted(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "is_deleted")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter(name="terminatorRunning")
    def terminator_running(self) -> pulumi.Output[_builtins.float]:
        return pulumi.get(self, "terminator_running")

    @_builtins.property
    @pulumi.getter(name="triggeredOn")
    def triggered_on(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "triggered_on")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "version_id")

    @_builtins.property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "workflow_name")

