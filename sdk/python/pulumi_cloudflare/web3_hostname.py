# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['Web3HostnameArgs', 'Web3Hostname']

@pulumi.input_type
class Web3HostnameArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 target: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dnslink: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Web3Hostname resource.
        :param pulumi.Input[str] name: The hostname that will point to the target gateway via CNAME.
        :param pulumi.Input[str] target: Target gateway of the hostname.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource.
        :param pulumi.Input[str] description: An optional description of the hostname.
        :param pulumi.Input[str] dnslink: DNSLink value used if the target is ipfs.
        """
        Web3HostnameArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            target=target,
            zone_id=zone_id,
            description=description,
            dnslink=dnslink,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             target: pulumi.Input[str],
             zone_id: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             dnslink: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("target", target)
        _setter("zone_id", zone_id)
        if description is not None:
            _setter("description", description)
        if dnslink is not None:
            _setter("dnslink", dnslink)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The hostname that will point to the target gateway via CNAME.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Target gateway of the hostname.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The zone identifier to target for the resource.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the hostname.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dnslink(self) -> Optional[pulumi.Input[str]]:
        """
        DNSLink value used if the target is ipfs.
        """
        return pulumi.get(self, "dnslink")

    @dnslink.setter
    def dnslink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnslink", value)


@pulumi.input_type
class _Web3HostnameState:
    def __init__(__self__, *,
                 created_on: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dnslink: Optional[pulumi.Input[str]] = None,
                 modified_on: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Web3Hostname resources.
        :param pulumi.Input[str] created_on: Creation time.
        :param pulumi.Input[str] description: An optional description of the hostname.
        :param pulumi.Input[str] dnslink: DNSLink value used if the target is ipfs.
        :param pulumi.Input[str] modified_on: Last modification time.
        :param pulumi.Input[str] name: The hostname that will point to the target gateway via CNAME.
        :param pulumi.Input[str] status: Status of the hostname's activation.
        :param pulumi.Input[str] target: Target gateway of the hostname.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource.
        """
        _Web3HostnameState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            created_on=created_on,
            description=description,
            dnslink=dnslink,
            modified_on=modified_on,
            name=name,
            status=status,
            target=target,
            zone_id=zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             created_on: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             dnslink: Optional[pulumi.Input[str]] = None,
             modified_on: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[str]] = None,
             zone_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if created_on is not None:
            _setter("created_on", created_on)
        if description is not None:
            _setter("description", description)
        if dnslink is not None:
            _setter("dnslink", dnslink)
        if modified_on is not None:
            _setter("modified_on", modified_on)
        if name is not None:
            _setter("name", name)
        if status is not None:
            _setter("status", status)
        if target is not None:
            _setter("target", target)
        if zone_id is not None:
            _setter("zone_id", zone_id)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An optional description of the hostname.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def dnslink(self) -> Optional[pulumi.Input[str]]:
        """
        DNSLink value used if the target is ipfs.
        """
        return pulumi.get(self, "dnslink")

    @dnslink.setter
    def dnslink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnslink", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[str]]:
        """
        Last modification time.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname that will point to the target gateway via CNAME.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the hostname's activation.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target gateway of the hostname.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The zone identifier to target for the resource.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class Web3Hostname(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dnslink: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages Web3 hostnames for IPFS and Ethereum gateways.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: An optional description of the hostname.
        :param pulumi.Input[str] dnslink: DNSLink value used if the target is ipfs.
        :param pulumi.Input[str] name: The hostname that will point to the target gateway via CNAME.
        :param pulumi.Input[str] target: Target gateway of the hostname.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Web3HostnameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Web3 hostnames for IPFS and Ethereum gateways.

        :param str resource_name: The name of the resource.
        :param Web3HostnameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Web3HostnameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            Web3HostnameArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dnslink: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Web3HostnameArgs.__new__(Web3HostnameArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["dnslink"] = dnslink
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["status"] = None
        super(Web3Hostname, __self__).__init__(
            'cloudflare:index/web3Hostname:Web3Hostname',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_on: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dnslink: Optional[pulumi.Input[str]] = None,
            modified_on: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            target: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'Web3Hostname':
        """
        Get an existing Web3Hostname resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_on: Creation time.
        :param pulumi.Input[str] description: An optional description of the hostname.
        :param pulumi.Input[str] dnslink: DNSLink value used if the target is ipfs.
        :param pulumi.Input[str] modified_on: Last modification time.
        :param pulumi.Input[str] name: The hostname that will point to the target gateway via CNAME.
        :param pulumi.Input[str] status: Status of the hostname's activation.
        :param pulumi.Input[str] target: Target gateway of the hostname.
        :param pulumi.Input[str] zone_id: The zone identifier to target for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Web3HostnameState.__new__(_Web3HostnameState)

        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["description"] = description
        __props__.__dict__["dnslink"] = dnslink
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["target"] = target
        __props__.__dict__["zone_id"] = zone_id
        return Web3Hostname(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[str]:
        """
        Creation time.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the hostname.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def dnslink(self) -> pulumi.Output[Optional[str]]:
        """
        DNSLink value used if the target is ipfs.
        """
        return pulumi.get(self, "dnslink")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[str]:
        """
        Last modification time.
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The hostname that will point to the target gateway via CNAME.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the hostname's activation.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output[str]:
        """
        Target gateway of the hostname.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The zone identifier to target for the resource.
        """
        return pulumi.get(self, "zone_id")

