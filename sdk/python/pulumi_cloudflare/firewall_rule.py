# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class FirewallRule(pulumi.CustomResource):
    action: pulumi.Output[str]
    """
    The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge", "bypass". Enterprise plan also allows "log".
    """
    description: pulumi.Output[str]
    """
    A description of the rule to help identify it.
    """
    filter_id: pulumi.Output[str]
    paused: pulumi.Output[bool]
    """
    Whether this filter based firewall rule is currently paused. Boolean value.
    """
    priority: pulumi.Output[float]
    """
    The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
    """
    products: pulumi.Output[list]
    """
    List of products to bypass for a request when the bypass action is used. Allowed values: "zoneLockdown", "uaBlock", "bic", "hot", "securityLevel", "rateLimit", "waf".
    """
    zone_id: pulumi.Output[str]
    """
    The DNS zone to which the Filter should be added.
    """
    def __init__(__self__, resource_name, opts=None, action=None, description=None, filter_id=None, paused=None, priority=None, products=None, zone_id=None, __props__=None, __name__=None, __opts__=None):
        """
        Define Firewall rules using filter expressions for more control over how traffic is matched to the rule.
        A filter expression permits selecting traffic by multiple criteria allowing greater freedom in rule creation.

        Filter expressions needs to be created first before using Firewall Rule. See Filter.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        wordpress_filter = cloudflare.Filter("wordpressFilter",
            zone_id="d41d8cd98f00b204e9800998ecf8427e",
            description="Wordpress break-in attempts that are outside of the office",
            expression="(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1")
        wordpress_firewall_rule = cloudflare.FirewallRule("wordpressFirewallRule",
            zone_id="d41d8cd98f00b204e9800998ecf8427e",
            description="Block wordpress break-in attempts",
            filter_id=wordpress_filter.id,
            action="block")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge", "bypass". Enterprise plan also allows "log".
        :param pulumi.Input[str] description: A description of the rule to help identify it.
        :param pulumi.Input[bool] paused: Whether this filter based firewall rule is currently paused. Boolean value.
        :param pulumi.Input[float] priority: The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
        :param pulumi.Input[list] products: List of products to bypass for a request when the bypass action is used. Allowed values: "zoneLockdown", "uaBlock", "bic", "hot", "securityLevel", "rateLimit", "waf".
        :param pulumi.Input[str] zone_id: The DNS zone to which the Filter should be added.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if action is None:
                raise TypeError("Missing required property 'action'")
            __props__['action'] = action
            __props__['description'] = description
            if filter_id is None:
                raise TypeError("Missing required property 'filter_id'")
            __props__['filter_id'] = filter_id
            __props__['paused'] = paused
            __props__['priority'] = priority
            __props__['products'] = products
            if zone_id is None:
                raise TypeError("Missing required property 'zone_id'")
            __props__['zone_id'] = zone_id
        super(FirewallRule, __self__).__init__(
            'cloudflare:index/firewallRule:FirewallRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, action=None, description=None, filter_id=None, paused=None, priority=None, products=None, zone_id=None):
        """
        Get an existing FirewallRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action to apply to a matched request. Allowed values: "block", "challenge", "allow", "js_challenge", "bypass". Enterprise plan also allows "log".
        :param pulumi.Input[str] description: A description of the rule to help identify it.
        :param pulumi.Input[bool] paused: Whether this filter based firewall rule is currently paused. Boolean value.
        :param pulumi.Input[float] priority: The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
        :param pulumi.Input[list] products: List of products to bypass for a request when the bypass action is used. Allowed values: "zoneLockdown", "uaBlock", "bic", "hot", "securityLevel", "rateLimit", "waf".
        :param pulumi.Input[str] zone_id: The DNS zone to which the Filter should be added.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action"] = action
        __props__["description"] = description
        __props__["filter_id"] = filter_id
        __props__["paused"] = paused
        __props__["priority"] = priority
        __props__["products"] = products
        __props__["zone_id"] = zone_id
        return FirewallRule(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
