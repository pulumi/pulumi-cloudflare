# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetWafGroupsResult:
    """
    A collection of values returned by getWafGroups.
    """
    def __init__(__self__, filter=None, groups=None, id=None, package_id=None, zone_id=None):
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        __self__.filter = filter
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        __self__.groups = groups
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if package_id and not isinstance(package_id, str):
            raise TypeError("Expected argument 'package_id' to be a str")
        __self__.package_id = package_id
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        __self__.zone_id = zone_id
class AwaitableGetWafGroupsResult(GetWafGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWafGroupsResult(
            filter=self.filter,
            groups=self.groups,
            id=self.id,
            package_id=self.package_id,
            zone_id=self.zone_id)

def get_waf_groups(filter=None,package_id=None,zone_id=None,opts=None):
    """
    Use this data source to look up [WAF Rule Groups](https://api.cloudflare.com/#waf-rule-groups-properties).



    The **filter** object supports the following:

      * `mode` (`str`)
      * `name` (`str`)
    """
    __args__ = dict()


    __args__['filter'] = filter
    __args__['packageId'] = package_id
    __args__['zoneId'] = zone_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWafGroups:getWafGroups', __args__, opts=opts).value

    return AwaitableGetWafGroupsResult(
        filter=__ret__.get('filter'),
        groups=__ret__.get('groups'),
        id=__ret__.get('id'),
        package_id=__ret__.get('packageId'),
        zone_id=__ret__.get('zoneId'))
