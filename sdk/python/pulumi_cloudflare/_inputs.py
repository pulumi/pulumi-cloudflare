# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AccessApplicationCorsHeaderArgs',
    'AccessGroupExcludeArgs',
    'AccessGroupExcludeAzureArgs',
    'AccessGroupExcludeGithubArgs',
    'AccessGroupExcludeGsuiteArgs',
    'AccessGroupExcludeOktaArgs',
    'AccessGroupExcludeSamlArgs',
    'AccessGroupIncludeArgs',
    'AccessGroupIncludeAzureArgs',
    'AccessGroupIncludeGithubArgs',
    'AccessGroupIncludeGsuiteArgs',
    'AccessGroupIncludeOktaArgs',
    'AccessGroupIncludeSamlArgs',
    'AccessGroupRequireArgs',
    'AccessGroupRequireAzureArgs',
    'AccessGroupRequireGithubArgs',
    'AccessGroupRequireGsuiteArgs',
    'AccessGroupRequireOktaArgs',
    'AccessGroupRequireSamlArgs',
    'AccessIdentityProviderConfigArgs',
    'AccessPolicyApprovalGroupArgs',
    'AccessPolicyExcludeArgs',
    'AccessPolicyExcludeAzureArgs',
    'AccessPolicyExcludeGithubArgs',
    'AccessPolicyExcludeGsuiteArgs',
    'AccessPolicyExcludeOktaArgs',
    'AccessPolicyExcludeSamlArgs',
    'AccessPolicyIncludeArgs',
    'AccessPolicyIncludeAzureArgs',
    'AccessPolicyIncludeGithubArgs',
    'AccessPolicyIncludeGsuiteArgs',
    'AccessPolicyIncludeOktaArgs',
    'AccessPolicyIncludeSamlArgs',
    'AccessPolicyRequireArgs',
    'AccessPolicyRequireAzureArgs',
    'AccessPolicyRequireGithubArgs',
    'AccessPolicyRequireGsuiteArgs',
    'AccessPolicyRequireOktaArgs',
    'AccessPolicyRequireSamlArgs',
    'AccessRuleConfigurationArgs',
    'ApiTokenConditionArgs',
    'ApiTokenConditionRequestIpArgs',
    'ApiTokenPolicyArgs',
    'CertificatePackValidationErrorArgs',
    'CertificatePackValidationRecordArgs',
    'CustomHostnameSslArgs',
    'CustomHostnameSslSettingArgs',
    'CustomHostnameSslValidationErrorArgs',
    'CustomHostnameSslValidationRecordArgs',
    'CustomSslCustomSslOptionsArgs',
    'CustomSslCustomSslPriorityArgs',
    'DevicePostureIntegrationConfigArgs',
    'DevicePostureRuleInputArgs',
    'DevicePostureRuleMatchArgs',
    'FallbackDomainDomainArgs',
    'HealthcheckHeaderArgs',
    'IpListItemArgs',
    'LoadBalancerMonitorHeaderArgs',
    'LoadBalancerPoolLoadSheddingArgs',
    'LoadBalancerPoolOriginArgs',
    'LoadBalancerPoolOriginHeaderArgs',
    'LoadBalancerPoolOriginSteeringArgs',
    'LoadBalancerPopPoolArgs',
    'LoadBalancerRegionPoolArgs',
    'LoadBalancerRuleArgs',
    'LoadBalancerRuleFixedResponseArgs',
    'LoadBalancerRuleOverrideArgs',
    'LoadBalancerRuleOverridePopPoolArgs',
    'LoadBalancerRuleOverrideRegionPoolArgs',
    'NotificationPolicyEmailIntegrationArgs',
    'NotificationPolicyPagerdutyIntegrationArgs',
    'NotificationPolicyWebhooksIntegrationArgs',
    'PageRuleActionsArgs',
    'PageRuleActionsCacheKeyFieldsArgs',
    'PageRuleActionsCacheKeyFieldsCookieArgs',
    'PageRuleActionsCacheKeyFieldsHeaderArgs',
    'PageRuleActionsCacheKeyFieldsHostArgs',
    'PageRuleActionsCacheKeyFieldsQueryStringArgs',
    'PageRuleActionsCacheKeyFieldsUserArgs',
    'PageRuleActionsCacheTtlByStatusArgs',
    'PageRuleActionsForwardingUrlArgs',
    'PageRuleActionsMinifyArgs',
    'RateLimitActionArgs',
    'RateLimitActionResponseArgs',
    'RateLimitCorrelateArgs',
    'RateLimitMatchArgs',
    'RateLimitMatchRequestArgs',
    'RateLimitMatchResponseArgs',
    'RecordDataArgs',
    'RulesetRuleArgs',
    'RulesetRuleActionParametersArgs',
    'RulesetRuleActionParametersHeaderArgs',
    'RulesetRuleActionParametersMatchedDataArgs',
    'RulesetRuleActionParametersOverridesArgs',
    'RulesetRuleActionParametersOverridesCategoryArgs',
    'RulesetRuleActionParametersOverridesRuleArgs',
    'RulesetRuleActionParametersUriArgs',
    'RulesetRuleActionParametersUriPathArgs',
    'RulesetRuleActionParametersUriQueryArgs',
    'RulesetRuleExposedCredentialCheckArgs',
    'RulesetRuleRatelimitArgs',
    'SpectrumApplicationDnsArgs',
    'SpectrumApplicationOriginDnsArgs',
    'SpectrumApplicationOriginPortRangeArgs',
    'SplitTunnelTunnelArgs',
    'TeamsAccountAntivirusArgs',
    'TeamsAccountBlockPageArgs',
    'TeamsAccountFipsArgs',
    'TeamsAccountLoggingArgs',
    'TeamsAccountLoggingSettingsByRuleTypeArgs',
    'TeamsAccountLoggingSettingsByRuleTypeDnsArgs',
    'TeamsAccountLoggingSettingsByRuleTypeHttpArgs',
    'TeamsAccountLoggingSettingsByRuleTypeL4Args',
    'TeamsAccountProxyArgs',
    'TeamsLocationNetworkArgs',
    'TeamsRuleRuleSettingsArgs',
    'TeamsRuleRuleSettingsBisoAdminControlsArgs',
    'TeamsRuleRuleSettingsCheckSessionArgs',
    'TeamsRuleRuleSettingsL4overrideArgs',
    'WorkerScriptKvNamespaceBindingArgs',
    'WorkerScriptPlainTextBindingArgs',
    'WorkerScriptSecretTextBindingArgs',
    'WorkerScriptWebassemblyBindingArgs',
    'ZoneLockdownConfigurationArgs',
    'ZoneSettingsOverrideInitialSettingArgs',
    'ZoneSettingsOverrideInitialSettingMinifyArgs',
    'ZoneSettingsOverrideInitialSettingMobileRedirectArgs',
    'ZoneSettingsOverrideInitialSettingSecurityHeaderArgs',
    'ZoneSettingsOverrideSettingsArgs',
    'ZoneSettingsOverrideSettingsMinifyArgs',
    'ZoneSettingsOverrideSettingsMobileRedirectArgs',
    'ZoneSettingsOverrideSettingsSecurityHeaderArgs',
    'GetWafGroupsFilterArgs',
    'GetWafPackagesFilterArgs',
    'GetWafRulesFilterArgs',
    'GetZonesFilterArgs',
]

@pulumi.input_type
class AccessApplicationCorsHeaderArgs:
    def __init__(__self__, *,
                 allow_all_headers: Optional[pulumi.Input[bool]] = None,
                 allow_all_methods: Optional[pulumi.Input[bool]] = None,
                 allow_all_origins: Optional[pulumi.Input[bool]] = None,
                 allow_credentials: Optional[pulumi.Input[bool]] = None,
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] allow_all_headers: Boolean value to determine whether all
               HTTP headers are exposed.
        :param pulumi.Input[bool] allow_all_methods: Boolean value to determine whether all
               methods are exposed.
        :param pulumi.Input[bool] allow_all_origins: Boolean value to determine whether all
               origins are permitted to make CORS requests.
        :param pulumi.Input[bool] allow_credentials: Boolean value to determine if credentials
               (cookies, authorization headers, or TLS client certificates) are included with
               requests.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_headers: List of HTTP headers to expose via CORS.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_methods: List of methods to expose via CORS.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_origins: List of origins permitted to make CORS requests.
        :param pulumi.Input[int] max_age: Integer representing the maximum time a preflight
               request will be cached.
        """
        if allow_all_headers is not None:
            pulumi.set(__self__, "allow_all_headers", allow_all_headers)
        if allow_all_methods is not None:
            pulumi.set(__self__, "allow_all_methods", allow_all_methods)
        if allow_all_origins is not None:
            pulumi.set(__self__, "allow_all_origins", allow_all_origins)
        if allow_credentials is not None:
            pulumi.set(__self__, "allow_credentials", allow_credentials)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if allowed_origins is not None:
            pulumi.set(__self__, "allowed_origins", allowed_origins)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)

    @property
    @pulumi.getter(name="allowAllHeaders")
    def allow_all_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to determine whether all
        HTTP headers are exposed.
        """
        return pulumi.get(self, "allow_all_headers")

    @allow_all_headers.setter
    def allow_all_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_headers", value)

    @property
    @pulumi.getter(name="allowAllMethods")
    def allow_all_methods(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to determine whether all
        methods are exposed.
        """
        return pulumi.get(self, "allow_all_methods")

    @allow_all_methods.setter
    def allow_all_methods(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_methods", value)

    @property
    @pulumi.getter(name="allowAllOrigins")
    def allow_all_origins(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to determine whether all
        origins are permitted to make CORS requests.
        """
        return pulumi.get(self, "allow_all_origins")

    @allow_all_origins.setter
    def allow_all_origins(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_origins", value)

    @property
    @pulumi.getter(name="allowCredentials")
    def allow_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to determine if credentials
        (cookies, authorization headers, or TLS client certificates) are included with
        requests.
        """
        return pulumi.get(self, "allow_credentials")

    @allow_credentials.setter
    def allow_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_credentials", value)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of HTTP headers to expose via CORS.
        """
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of methods to expose via CORS.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of origins permitted to make CORS requests.
        """
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Integer representing the maximum time a preflight
        request will be cached.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)


@pulumi.input_type
class AccessGroupExcludeArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupExcludeSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessGroupExcludeAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessGroupExcludeGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessGroupExcludeGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessGroupExcludeOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessGroupExcludeSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessGroupIncludeArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupIncludeSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessGroupIncludeAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessGroupIncludeGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessGroupIncludeGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessGroupIncludeOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessGroupIncludeSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessGroupRequireArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessGroupRequireSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessGroupRequireAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessGroupRequireGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessGroupRequireGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessGroupRequireOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Group.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Group.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessGroupRequireSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessIdentityProviderConfigArgs:
    def __init__(__self__, *,
                 api_token: Optional[pulumi.Input[str]] = None,
                 apps_domain: Optional[pulumi.Input[str]] = None,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 centrify_account: Optional[pulumi.Input[str]] = None,
                 centrify_app_id: Optional[pulumi.Input[str]] = None,
                 certs_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 directory_id: Optional[pulumi.Input[str]] = None,
                 email_attribute_name: Optional[pulumi.Input[str]] = None,
                 idp_public_cert: Optional[pulumi.Input[str]] = None,
                 issuer_url: Optional[pulumi.Input[str]] = None,
                 okta_account: Optional[pulumi.Input[str]] = None,
                 onelogin_account: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 sign_request: Optional[pulumi.Input[bool]] = None,
                 sso_target_url: Optional[pulumi.Input[str]] = None,
                 support_groups: Optional[pulumi.Input[bool]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if apps_domain is not None:
            pulumi.set(__self__, "apps_domain", apps_domain)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if centrify_account is not None:
            pulumi.set(__self__, "centrify_account", centrify_account)
        if centrify_app_id is not None:
            pulumi.set(__self__, "centrify_app_id", centrify_app_id)
        if certs_url is not None:
            pulumi.set(__self__, "certs_url", certs_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if directory_id is not None:
            pulumi.set(__self__, "directory_id", directory_id)
        if email_attribute_name is not None:
            pulumi.set(__self__, "email_attribute_name", email_attribute_name)
        if idp_public_cert is not None:
            pulumi.set(__self__, "idp_public_cert", idp_public_cert)
        if issuer_url is not None:
            pulumi.set(__self__, "issuer_url", issuer_url)
        if okta_account is not None:
            pulumi.set(__self__, "okta_account", okta_account)
        if onelogin_account is not None:
            pulumi.set(__self__, "onelogin_account", onelogin_account)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if sign_request is not None:
            pulumi.set(__self__, "sign_request", sign_request)
        if sso_target_url is not None:
            pulumi.set(__self__, "sso_target_url", sso_target_url)
        if support_groups is not None:
            pulumi.set(__self__, "support_groups", support_groups)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="appsDomain")
    def apps_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apps_domain")

    @apps_domain.setter
    def apps_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apps_domain", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="centrifyAccount")
    def centrify_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "centrify_account")

    @centrify_account.setter
    def centrify_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "centrify_account", value)

    @property
    @pulumi.getter(name="centrifyAppId")
    def centrify_app_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "centrify_app_id")

    @centrify_app_id.setter
    def centrify_app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "centrify_app_id", value)

    @property
    @pulumi.getter(name="certsUrl")
    def certs_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certs_url")

    @certs_url.setter
    def certs_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certs_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory_id")

    @directory_id.setter
    def directory_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_id", value)

    @property
    @pulumi.getter(name="emailAttributeName")
    def email_attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_attribute_name")

    @email_attribute_name.setter
    def email_attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_attribute_name", value)

    @property
    @pulumi.getter(name="idpPublicCert")
    def idp_public_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "idp_public_cert")

    @idp_public_cert.setter
    def idp_public_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_public_cert", value)

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_url")

    @issuer_url.setter
    def issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_url", value)

    @property
    @pulumi.getter(name="oktaAccount")
    def okta_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "okta_account")

    @okta_account.setter
    def okta_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "okta_account", value)

    @property
    @pulumi.getter(name="oneloginAccount")
    def onelogin_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "onelogin_account")

    @onelogin_account.setter
    def onelogin_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onelogin_account", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="signRequest")
    def sign_request(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sign_request")

    @sign_request.setter
    def sign_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sign_request", value)

    @property
    @pulumi.getter(name="ssoTargetUrl")
    def sso_target_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sso_target_url")

    @sso_target_url.setter
    def sso_target_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_target_url", value)

    @property
    @pulumi.getter(name="supportGroups")
    def support_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "support_groups")

    @support_groups.setter
    def support_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_groups", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class AccessPolicyApprovalGroupArgs:
    def __init__(__self__, *,
                 approvals_needed: pulumi.Input[int],
                 email_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_list_uuid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] approvals_needed: Number of approvals needed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_addresses: List of emails to request approval from.
        """
        pulumi.set(__self__, "approvals_needed", approvals_needed)
        if email_addresses is not None:
            pulumi.set(__self__, "email_addresses", email_addresses)
        if email_list_uuid is not None:
            pulumi.set(__self__, "email_list_uuid", email_list_uuid)

    @property
    @pulumi.getter(name="approvalsNeeded")
    def approvals_needed(self) -> pulumi.Input[int]:
        """
        Number of approvals needed.
        """
        return pulumi.get(self, "approvals_needed")

    @approvals_needed.setter
    def approvals_needed(self, value: pulumi.Input[int]):
        pulumi.set(self, "approvals_needed", value)

    @property
    @pulumi.getter(name="emailAddresses")
    def email_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of emails to request approval from.
        """
        return pulumi.get(self, "email_addresses")

    @email_addresses.setter
    def email_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_addresses", value)

    @property
    @pulumi.getter(name="emailListUuid")
    def email_list_uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_list_uuid")

    @email_list_uuid.setter
    def email_list_uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_list_uuid", value)


@pulumi.input_type
class AccessPolicyExcludeArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyExcludeSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessPolicyExcludeAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessPolicyExcludeGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessPolicyExcludeGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessPolicyExcludeOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessPolicyExcludeSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessPolicyIncludeArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyIncludeSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessPolicyIncludeAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessPolicyIncludeGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessPolicyIncludeGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessPolicyIncludeOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessPolicyIncludeSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessPolicyRequireArgs:
    def __init__(__self__, *,
                 any_valid_service_token: Optional[pulumi.Input[bool]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 azures: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireAzureArgs']]]] = None,
                 certificate: Optional[pulumi.Input[bool]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 device_postures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 everyone: Optional[pulumi.Input[bool]] = None,
                 geos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 githubs: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGithubArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gsuites: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGsuiteArgs']]]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oktas: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireOktaArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireSamlArgs']]]] = None,
                 service_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if any_valid_service_token is not None:
            pulumi.set(__self__, "any_valid_service_token", any_valid_service_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if azures is not None:
            pulumi.set(__self__, "azures", azures)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if device_postures is not None:
            pulumi.set(__self__, "device_postures", device_postures)
        if email_domains is not None:
            pulumi.set(__self__, "email_domains", email_domains)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if everyone is not None:
            pulumi.set(__self__, "everyone", everyone)
        if geos is not None:
            pulumi.set(__self__, "geos", geos)
        if githubs is not None:
            pulumi.set(__self__, "githubs", githubs)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if gsuites is not None:
            pulumi.set(__self__, "gsuites", gsuites)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if oktas is not None:
            pulumi.set(__self__, "oktas", oktas)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)
        if service_tokens is not None:
            pulumi.set(__self__, "service_tokens", service_tokens)

    @property
    @pulumi.getter(name="anyValidServiceToken")
    def any_valid_service_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "any_valid_service_token")

    @any_valid_service_token.setter
    def any_valid_service_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_valid_service_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def azures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireAzureArgs']]]]:
        return pulumi.get(self, "azures")

    @azures.setter
    def azures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireAzureArgs']]]]):
        pulumi.set(self, "azures", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="devicePostures")
    def device_postures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "device_postures")

    @device_postures.setter
    def device_postures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "device_postures", value)

    @property
    @pulumi.getter(name="emailDomains")
    def email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "email_domains")

    @email_domains.setter
    def email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_domains", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def everyone(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "everyone")

    @everyone.setter
    def everyone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "everyone", value)

    @property
    @pulumi.getter
    def geos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "geos")

    @geos.setter
    def geos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "geos", value)

    @property
    @pulumi.getter
    def githubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGithubArgs']]]]:
        return pulumi.get(self, "githubs")

    @githubs.setter
    def githubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGithubArgs']]]]):
        pulumi.set(self, "githubs", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def gsuites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGsuiteArgs']]]]:
        return pulumi.get(self, "gsuites")

    @gsuites.setter
    def gsuites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireGsuiteArgs']]]]):
        pulumi.set(self, "gsuites", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter
    def oktas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireOktaArgs']]]]:
        return pulumi.get(self, "oktas")

    @oktas.setter
    def oktas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireOktaArgs']]]]):
        pulumi.set(self, "oktas", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRequireSamlArgs']]]]):
        pulumi.set(self, "samls", value)

    @property
    @pulumi.getter(name="serviceTokens")
    def service_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_tokens")

    @service_tokens.setter
    def service_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_tokens", value)


@pulumi.input_type
class AccessPolicyRequireAzureArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AccessPolicyRequireGithubArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)


@pulumi.input_type
class AccessPolicyRequireGsuiteArgs:
    def __init__(__self__, *,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessPolicyRequireOktaArgs:
    def __init__(__self__, *,
                 identity_provider_id: Optional[pulumi.Input[str]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] names: Friendly name of the Access Application.
        """
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)
        if names is not None:
            pulumi.set(__self__, "names", names)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Friendly name of the Access Application.
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "names", value)


@pulumi.input_type
class AccessPolicyRequireSamlArgs:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 identity_provider_id: Optional[pulumi.Input[str]] = None):
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if identity_provider_id is not None:
            pulumi.set(__self__, "identity_provider_id", identity_provider_id)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="identityProviderId")
    def identity_provider_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_provider_id")

    @identity_provider_id.setter
    def identity_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider_id", value)


@pulumi.input_type
class AccessRuleConfigurationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target: The request property to target. Allowed values: "ip", "ip6", "ip_range", "asn", "country"
        :param pulumi.Input[str] value: The value to target. Depends on target's type.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The request property to target. Allowed values: "ip", "ip6", "ip_range", "asn", "country"
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value to target. Depends on target's type.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApiTokenConditionArgs:
    def __init__(__self__, *,
                 request_ip: Optional[pulumi.Input['ApiTokenConditionRequestIpArgs']] = None):
        """
        :param pulumi.Input['ApiTokenConditionRequestIpArgs'] request_ip: Request IP related conditions. See the definition below.
        """
        if request_ip is not None:
            pulumi.set(__self__, "request_ip", request_ip)

    @property
    @pulumi.getter(name="requestIp")
    def request_ip(self) -> Optional[pulumi.Input['ApiTokenConditionRequestIpArgs']]:
        """
        Request IP related conditions. See the definition below.
        """
        return pulumi.get(self, "request_ip")

    @request_ip.setter
    def request_ip(self, value: Optional[pulumi.Input['ApiTokenConditionRequestIpArgs']]):
        pulumi.set(self, "request_ip", value)


@pulumi.input_type
class ApiTokenConditionRequestIpArgs:
    def __init__(__self__, *,
                 ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 not_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ins: List of IPv4/IPv6 CIDR addresses where
               the Token can be used from.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] not_ins: List of IPv4/IPv6 CIDR addresses where
               the Token cannot be used from.
        """
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if not_ins is not None:
            pulumi.set(__self__, "not_ins", not_ins)

    @property
    @pulumi.getter
    def ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPv4/IPv6 CIDR addresses where
        the Token can be used from.
        """
        return pulumi.get(self, "ins")

    @ins.setter
    def ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ins", value)

    @property
    @pulumi.getter(name="notIns")
    def not_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPv4/IPv6 CIDR addresses where
        the Token cannot be used from.
        """
        return pulumi.get(self, "not_ins")

    @not_ins.setter
    def not_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "not_ins", value)


@pulumi.input_type
class ApiTokenPolicyArgs:
    def __init__(__self__, *,
                 permission_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resources: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 effect: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permission_groups: List of permissions groups
               ids ([see official docs](https://developers.cloudflare.com/api/tokens/create/permissions)).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] resources: Map describes what operations against which resources
               are allowed or denied.
        :param pulumi.Input[str] effect: Policy effect. Valid values are `allow` or `deny`. `allow`
               is set as default.
        """
        pulumi.set(__self__, "permission_groups", permission_groups)
        pulumi.set(__self__, "resources", resources)
        if effect is not None:
            pulumi.set(__self__, "effect", effect)

    @property
    @pulumi.getter(name="permissionGroups")
    def permission_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of permissions groups
        ids ([see official docs](https://developers.cloudflare.com/api/tokens/create/permissions)).
        """
        return pulumi.get(self, "permission_groups")

    @permission_groups.setter
    def permission_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "permission_groups", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map describes what operations against which resources
        are allowed or denied.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Policy effect. Valid values are `allow` or `deny`. `allow`
        is set as default.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)


@pulumi.input_type
class CertificatePackValidationErrorArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class CertificatePackValidationRecordArgs:
    def __init__(__self__, *,
                 cname_name: Optional[pulumi.Input[str]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_url: Optional[pulumi.Input[str]] = None,
                 txt_name: Optional[pulumi.Input[str]] = None,
                 txt_value: Optional[pulumi.Input[str]] = None):
        if cname_name is not None:
            pulumi.set(__self__, "cname_name", cname_name)
        if cname_target is not None:
            pulumi.set(__self__, "cname_target", cname_target)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if http_body is not None:
            pulumi.set(__self__, "http_body", http_body)
        if http_url is not None:
            pulumi.set(__self__, "http_url", http_url)
        if txt_name is not None:
            pulumi.set(__self__, "txt_name", txt_name)
        if txt_value is not None:
            pulumi.set(__self__, "txt_value", txt_value)

    @property
    @pulumi.getter(name="cnameName")
    def cname_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname_name")

    @cname_name.setter
    def cname_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_name", value)

    @property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname_target")

    @cname_target.setter
    def cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_target", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_body")

    @http_body.setter
    def http_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_body", value)

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_url")

    @http_url.setter
    def http_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_url", value)

    @property
    @pulumi.getter(name="txtName")
    def txt_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "txt_name")

    @txt_name.setter
    def txt_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "txt_name", value)

    @property
    @pulumi.getter(name="txtValue")
    def txt_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "txt_value")

    @txt_value.setter
    def txt_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "txt_value", value)


@pulumi.input_type
class CustomHostnameSslArgs:
    def __init__(__self__, *,
                 certificate_authority: Optional[pulumi.Input[str]] = None,
                 custom_certificate: Optional[pulumi.Input[str]] = None,
                 custom_key: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslSettingArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 validation_errors: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationErrorArgs']]]] = None,
                 validation_records: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationRecordArgs']]]] = None,
                 wildcard: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] custom_certificate: If a custom uploaded certificate is used.
        :param pulumi.Input[str] custom_key: The key for a custom uploaded certificate.
        :param pulumi.Input[str] method: Domain control validation (DCV) method used for this
               hostname. Valid values are `"txt"`, `"http"` and `"email"`.
        :param pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslSettingArgs']]] settings: SSL/TLS settings for the certificate. See further notes below.
        :param pulumi.Input[str] type: Level of validation to be used for this hostname. Domain validation ("dv") must be used.
        :param pulumi.Input[bool] wildcard: Indicates whether the certificate covers a wildcard.
        """
        if certificate_authority is not None:
            pulumi.set(__self__, "certificate_authority", certificate_authority)
        if custom_certificate is not None:
            pulumi.set(__self__, "custom_certificate", custom_certificate)
        if custom_key is not None:
            pulumi.set(__self__, "custom_key", custom_key)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_errors is not None:
            pulumi.set(__self__, "validation_errors", validation_errors)
        if validation_records is not None:
            pulumi.set(__self__, "validation_records", validation_records)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter(name="certificateAuthority")
    def certificate_authority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_authority")

    @certificate_authority.setter
    def certificate_authority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_authority", value)

    @property
    @pulumi.getter(name="customCertificate")
    def custom_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        If a custom uploaded certificate is used.
        """
        return pulumi.get(self, "custom_certificate")

    @custom_certificate.setter
    def custom_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_certificate", value)

    @property
    @pulumi.getter(name="customKey")
    def custom_key(self) -> Optional[pulumi.Input[str]]:
        """
        The key for a custom uploaded certificate.
        """
        return pulumi.get(self, "custom_key")

    @custom_key.setter
    def custom_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_key", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Domain control validation (DCV) method used for this
        hostname. Valid values are `"txt"`, `"http"` and `"email"`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslSettingArgs']]]]:
        """
        SSL/TLS settings for the certificate. See further notes below.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslSettingArgs']]]]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Level of validation to be used for this hostname. Domain validation ("dv") must be used.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="validationErrors")
    def validation_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationErrorArgs']]]]:
        return pulumi.get(self, "validation_errors")

    @validation_errors.setter
    def validation_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationErrorArgs']]]]):
        pulumi.set(self, "validation_errors", value)

    @property
    @pulumi.getter(name="validationRecords")
    def validation_records(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationRecordArgs']]]]:
        return pulumi.get(self, "validation_records")

    @validation_records.setter
    def validation_records(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomHostnameSslValidationRecordArgs']]]]):
        pulumi.set(self, "validation_records", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the certificate covers a wildcard.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class CustomHostnameSslSettingArgs:
    def __init__(__self__, *,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 early_hints: Optional[pulumi.Input[str]] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 tls13: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ciphers: List of SSL/TLS ciphers to associate with this certificate.
        :param pulumi.Input[str] early_hints: Whether or not early hints should be supported. Valid values are `"on"` or `"off"`.
        :param pulumi.Input[str] http2: Whether or not HTTP2 should be supported. Valid values are `"on"` or `"off"`.
        :param pulumi.Input[str] min_tls_version: Lowest version of TLS this certificate should
               support. Valid values are `"1.0"`, `"1.1"`, `"1.2"` and `"1.3"`.
        :param pulumi.Input[str] tls13: Whether or not TLSv1.3 should be supported. Valid values are `"on"` or `"off"`.
        """
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if early_hints is not None:
            pulumi.set(__self__, "early_hints", early_hints)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if tls13 is not None:
            pulumi.set(__self__, "tls13", tls13)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SSL/TLS ciphers to associate with this certificate.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter(name="earlyHints")
    def early_hints(self) -> Optional[pulumi.Input[str]]:
        """
        Whether or not early hints should be supported. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "early_hints")

    @early_hints.setter
    def early_hints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "early_hints", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        """
        Whether or not HTTP2 should be supported. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest version of TLS this certificate should
        support. Valid values are `"1.0"`, `"1.1"`, `"1.2"` and `"1.3"`.
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter
    def tls13(self) -> Optional[pulumi.Input[str]]:
        """
        Whether or not TLSv1.3 should be supported. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "tls13")

    @tls13.setter
    def tls13(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls13", value)


@pulumi.input_type
class CustomHostnameSslValidationErrorArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class CustomHostnameSslValidationRecordArgs:
    def __init__(__self__, *,
                 cname_name: Optional[pulumi.Input[str]] = None,
                 cname_target: Optional[pulumi.Input[str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 http_body: Optional[pulumi.Input[str]] = None,
                 http_url: Optional[pulumi.Input[str]] = None,
                 txt_name: Optional[pulumi.Input[str]] = None,
                 txt_value: Optional[pulumi.Input[str]] = None):
        if cname_name is not None:
            pulumi.set(__self__, "cname_name", cname_name)
        if cname_target is not None:
            pulumi.set(__self__, "cname_target", cname_target)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if http_body is not None:
            pulumi.set(__self__, "http_body", http_body)
        if http_url is not None:
            pulumi.set(__self__, "http_url", http_url)
        if txt_name is not None:
            pulumi.set(__self__, "txt_name", txt_name)
        if txt_value is not None:
            pulumi.set(__self__, "txt_value", txt_value)

    @property
    @pulumi.getter(name="cnameName")
    def cname_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname_name")

    @cname_name.setter
    def cname_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_name", value)

    @property
    @pulumi.getter(name="cnameTarget")
    def cname_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cname_target")

    @cname_target.setter
    def cname_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_target", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="httpBody")
    def http_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_body")

    @http_body.setter
    def http_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_body", value)

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_url")

    @http_url.setter
    def http_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_url", value)

    @property
    @pulumi.getter(name="txtName")
    def txt_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "txt_name")

    @txt_name.setter
    def txt_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "txt_name", value)

    @property
    @pulumi.getter(name="txtValue")
    def txt_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "txt_value")

    @txt_value.setter
    def txt_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "txt_value", value)


@pulumi.input_type
class CustomSslCustomSslOptionsArgs:
    def __init__(__self__, *,
                 bundle_method: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 geo_restrictions: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bundle_method: Method of building intermediate certificate chain. A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Valid values are `ubiquitous` (default), `optimal`, `force`.
        :param pulumi.Input[str] certificate: Certificate certificate and the intermediate(s)
        :param pulumi.Input[str] geo_restrictions: Specifies the region where your private key can be held locally. Valid values are `us`, `eu`, `highest_security`.
        :param pulumi.Input[str] private_key: Certificate's private key
        :param pulumi.Input[str] type: Whether to enable support for legacy clients which do not include SNI in the TLS handshake. Valid values are `legacy_custom` (default), `sni_custom`.
        """
        if bundle_method is not None:
            pulumi.set(__self__, "bundle_method", bundle_method)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if geo_restrictions is not None:
            pulumi.set(__self__, "geo_restrictions", geo_restrictions)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bundleMethod")
    def bundle_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method of building intermediate certificate chain. A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Valid values are `ubiquitous` (default), `optimal`, `force`.
        """
        return pulumi.get(self, "bundle_method")

    @bundle_method.setter
    def bundle_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bundle_method", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate certificate and the intermediate(s)
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="geoRestrictions")
    def geo_restrictions(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the region where your private key can be held locally. Valid values are `us`, `eu`, `highest_security`.
        """
        return pulumi.get(self, "geo_restrictions")

    @geo_restrictions.setter
    def geo_restrictions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_restrictions", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate's private key
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable support for legacy clients which do not include SNI in the TLS handshake. Valid values are `legacy_custom` (default), `sni_custom`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CustomSslCustomSslPriorityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class DevicePostureIntegrationConfigArgs:
    def __init__(__self__, *,
                 api_url: Optional[pulumi.Input[str]] = None,
                 auth_url: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_url: The third-party API's URL.
        :param pulumi.Input[str] auth_url: The third-party authorization API URL.
        :param pulumi.Input[str] client_id: The client identifier for authenticating API calls.
        :param pulumi.Input[str] client_secret: The client secret for authenticating API calls.
        """
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if auth_url is not None:
            pulumi.set(__self__, "auth_url", auth_url)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        The third-party API's URL.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="authUrl")
    def auth_url(self) -> Optional[pulumi.Input[str]]:
        """
        The third-party authorization API URL.
        """
        return pulumi.get(self, "auth_url")

    @auth_url.setter
    def auth_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client identifier for authenticating API calls.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client secret for authenticating API calls.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class DevicePostureRuleInputArgs:
    def __init__(__self__, *,
                 compliance_status: Optional[pulumi.Input[str]] = None,
                 connection_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exists: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 require_all: Optional[pulumi.Input[bool]] = None,
                 running: Optional[pulumi.Input[bool]] = None,
                 sha256: Optional[pulumi.Input[str]] = None,
                 thumbprint: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: = (Required) The domain that the client must join.
        :param pulumi.Input[bool] enabled: = (Required) True if the firewall must be enabled.
        :param pulumi.Input[bool] exists: Checks if the file should exist.
        :param pulumi.Input[str] id: The Teams List id.
        :param pulumi.Input[str] operator: = (Required) The version comparison operator in (>,>=,<,<=,==)
        :param pulumi.Input[str] path: The path to the application.
        :param pulumi.Input[bool] require_all: = (Required) True if all drives must be encrypted.
        :param pulumi.Input[bool] running: Checks if the application should be running.
        :param pulumi.Input[str] sha256: The sha256 hash of the file.
        :param pulumi.Input[str] thumbprint: The thumbprint of the application certificate.
        :param pulumi.Input[str] version: = (Required) The operating system semantic version.
        """
        if compliance_status is not None:
            pulumi.set(__self__, "compliance_status", compliance_status)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exists is not None:
            pulumi.set(__self__, "exists", exists)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if require_all is not None:
            pulumi.set(__self__, "require_all", require_all)
        if running is not None:
            pulumi.set(__self__, "running", running)
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)
        if thumbprint is not None:
            pulumi.set(__self__, "thumbprint", thumbprint)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compliance_status")

    @compliance_status.setter
    def compliance_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_status", value)

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_id")

    @connection_id.setter
    def connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        = (Required) The domain that the client must join.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        = (Required) True if the firewall must be enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def exists(self) -> Optional[pulumi.Input[bool]]:
        """
        Checks if the file should exist.
        """
        return pulumi.get(self, "exists")

    @exists.setter
    def exists(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The Teams List id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        = (Required) The version comparison operator in (>,>=,<,<=,==)
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the application.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="requireAll")
    def require_all(self) -> Optional[pulumi.Input[bool]]:
        """
        = (Required) True if all drives must be encrypted.
        """
        return pulumi.get(self, "require_all")

    @require_all.setter
    def require_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_all", value)

    @property
    @pulumi.getter
    def running(self) -> Optional[pulumi.Input[bool]]:
        """
        Checks if the application should be running.
        """
        return pulumi.get(self, "running")

    @running.setter
    def running(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "running", value)

    @property
    @pulumi.getter
    def sha256(self) -> Optional[pulumi.Input[str]]:
        """
        The sha256 hash of the file.
        """
        return pulumi.get(self, "sha256")

    @sha256.setter
    def sha256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256", value)

    @property
    @pulumi.getter
    def thumbprint(self) -> Optional[pulumi.Input[str]]:
        """
        The thumbprint of the application certificate.
        """
        return pulumi.get(self, "thumbprint")

    @thumbprint.setter
    def thumbprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbprint", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        = (Required) The operating system semantic version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DevicePostureRuleMatchArgs:
    def __init__(__self__, *,
                 platform: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] platform: The platform of the device. Valid values are `windows`, `mac`, `linux`, `android`, and `ios`.
        """
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        """
        The platform of the device. Valid values are `windows`, `mac`, `linux`, `android`, and `ios`.
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)


@pulumi.input_type
class FallbackDomainDomainArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The description of the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_servers: The DNS servers to receive the redirected request.
        :param pulumi.Input[str] suffix: The domain to ignore DNS requests.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the domain.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The DNS servers to receive the redirected request.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The domain to ignore DNS requests.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class HealthcheckHeaderArgs:
    def __init__(__self__, *,
                 header: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] header: The header name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of string values for the header.
        """
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input[str]:
        """
        The header name.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input[str]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of string values for the header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class IpListItemArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: The IPv4 address, IPv4 CIDR or IPv6 CIDR. IPv6 CIDRs are limited to a maximum of /64.
        :param pulumi.Input[str] comment: A note that can be used to annotate the item.
        """
        pulumi.set(__self__, "value", value)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The IPv4 address, IPv4 CIDR or IPv6 CIDR. IPv6 CIDRs are limited to a maximum of /64.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        A note that can be used to annotate the item.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)


@pulumi.input_type
class LoadBalancerMonitorHeaderArgs:
    def __init__(__self__, *,
                 header: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] header: The header name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of string values for the header.
        """
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input[str]:
        """
        The header name.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input[str]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of string values for the header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LoadBalancerPoolLoadSheddingArgs:
    def __init__(__self__, *,
                 default_percent: Optional[pulumi.Input[float]] = None,
                 default_policy: Optional[pulumi.Input[str]] = None,
                 session_percent: Optional[pulumi.Input[float]] = None,
                 session_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] default_percent: Percent of traffic to shed 0 - 100.
        :param pulumi.Input[str] default_policy: Method of shedding traffic "", "hash" or "random".
        :param pulumi.Input[float] session_percent: Percent of session traffic to shed 0 - 100.
        :param pulumi.Input[str] session_policy: Method of shedding session traffic "" or "hash".
        """
        if default_percent is not None:
            pulumi.set(__self__, "default_percent", default_percent)
        if default_policy is not None:
            pulumi.set(__self__, "default_policy", default_policy)
        if session_percent is not None:
            pulumi.set(__self__, "session_percent", session_percent)
        if session_policy is not None:
            pulumi.set(__self__, "session_policy", session_policy)

    @property
    @pulumi.getter(name="defaultPercent")
    def default_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Percent of traffic to shed 0 - 100.
        """
        return pulumi.get(self, "default_percent")

    @default_percent.setter
    def default_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_percent", value)

    @property
    @pulumi.getter(name="defaultPolicy")
    def default_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Method of shedding traffic "", "hash" or "random".
        """
        return pulumi.get(self, "default_policy")

    @default_policy.setter
    def default_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_policy", value)

    @property
    @pulumi.getter(name="sessionPercent")
    def session_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Percent of session traffic to shed 0 - 100.
        """
        return pulumi.get(self, "session_percent")

    @session_percent.setter
    def session_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_percent", value)

    @property
    @pulumi.getter(name="sessionPolicy")
    def session_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Method of shedding session traffic "" or "hash".
        """
        return pulumi.get(self, "session_policy")

    @session_policy.setter
    def session_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_policy", value)


@pulumi.input_type
class LoadBalancerPoolOriginArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 name: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPoolOriginHeaderArgs']]]] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] address: The IP address (IPv4 or IPv6) of the origin, or the publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare.
        :param pulumi.Input[str] name: A human-identifiable name for the origin.
        :param pulumi.Input[bool] enabled: Whether to enable (the default) this origin within the Pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerPoolOriginHeaderArgs']]] headers: The header name.
        :param pulumi.Input[float] weight: The weight (0.01 - 1.00) of this origin, relative to other origins in the pool. Equal values mean equal weighting. A weight of 0 means traffic will not be sent to this origin, but health is still checked. Default: 1.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "name", name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The IP address (IPv4 or IPv6) of the origin, or the publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A human-identifiable name for the origin.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable (the default) this origin within the Pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPoolOriginHeaderArgs']]]]:
        """
        The header name.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerPoolOriginHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        The weight (0.01 - 1.00) of this origin, relative to other origins in the pool. Equal values mean equal weighting. A weight of 0 means traffic will not be sent to this origin, but health is still checked. Default: 1.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class LoadBalancerPoolOriginHeaderArgs:
    def __init__(__self__, *,
                 header: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] header: The header name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: A list of string values for the header.
        """
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input[str]:
        """
        The header name.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input[str]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of string values for the header.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LoadBalancerPoolOriginSteeringArgs:
    def __init__(__self__, *,
                 policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] policy: Either "random" (default) or "hash".
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Either "random" (default) or "hash".
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class LoadBalancerPopPoolArgs:
    def __init__(__self__, *,
                 pool_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 pop: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pool_ids: A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        :param pulumi.Input[str] pop: A 3-letter code for the Point-of-Presence. Allowed values can be found in the list of datacenters on the [status page](https://www.cloudflarestatus.com/). Multiple entries should not be specified with the same PoP.
        """
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "pop", pop)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        """
        return pulumi.get(self, "pool_ids")

    @pool_ids.setter
    def pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "pool_ids", value)

    @property
    @pulumi.getter
    def pop(self) -> pulumi.Input[str]:
        """
        A 3-letter code for the Point-of-Presence. Allowed values can be found in the list of datacenters on the [status page](https://www.cloudflarestatus.com/). Multiple entries should not be specified with the same PoP.
        """
        return pulumi.get(self, "pop")

    @pop.setter
    def pop(self, value: pulumi.Input[str]):
        pulumi.set(self, "pop", value)


@pulumi.input_type
class LoadBalancerRegionPoolArgs:
    def __init__(__self__, *,
                 pool_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pool_ids: A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        :param pulumi.Input[str] region: A region code which must be in the list defined [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions). Multiple entries should not be specified with the same region.
        """
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        """
        return pulumi.get(self, "pool_ids")

    @pool_ids.setter
    def pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "pool_ids", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        A region code which must be in the list defined [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions). Multiple entries should not be specified with the same region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class LoadBalancerRuleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 fixed_response: Optional[pulumi.Input['LoadBalancerRuleFixedResponseArgs']] = None,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideArgs']]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 terminates: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Human readable name for this rule.
        :param pulumi.Input[str] condition: The statement to evaluate to determine if this rules effects should be applied. An empty condition is always true. See [load balancing rules](https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules).
        :param pulumi.Input[bool] disabled: A disabled rule will be be executed.
        :param pulumi.Input['LoadBalancerRuleFixedResponseArgs'] fixed_response: Settings for a HTTP response to return directly to the eyeball if the condition is true. Note: overrides or fixed_response must be set. See the field documentation below.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideArgs']]] overrides: The Load Balancer settings to alter if this rules condition is true. Note: overrides or fixed_response must be set. See the field documentation below.
        :param pulumi.Input[int] priority: Priority used when determining the order of rule execution. Lower values are executed first. If not provided list order will be used.
        :param pulumi.Input[bool] terminates: Terminates indicates that if this rule is true no further rules should be executed. Note: setting a fixed_response forces this field to true.
        """
        pulumi.set(__self__, "name", name)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if fixed_response is not None:
            pulumi.set(__self__, "fixed_response", fixed_response)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if terminates is not None:
            pulumi.set(__self__, "terminates", terminates)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Human readable name for this rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The statement to evaluate to determine if this rules effects should be applied. An empty condition is always true. See [load balancing rules](https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules).
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A disabled rule will be be executed.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional[pulumi.Input['LoadBalancerRuleFixedResponseArgs']]:
        """
        Settings for a HTTP response to return directly to the eyeball if the condition is true. Note: overrides or fixed_response must be set. See the field documentation below.
        """
        return pulumi.get(self, "fixed_response")

    @fixed_response.setter
    def fixed_response(self, value: Optional[pulumi.Input['LoadBalancerRuleFixedResponseArgs']]):
        pulumi.set(self, "fixed_response", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideArgs']]]]:
        """
        The Load Balancer settings to alter if this rules condition is true. Note: overrides or fixed_response must be set. See the field documentation below.
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideArgs']]]]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority used when determining the order of rule execution. Lower values are executed first. If not provided list order will be used.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def terminates(self) -> Optional[pulumi.Input[bool]]:
        """
        Terminates indicates that if this rule is true no further rules should be executed. Note: setting a fixed_response forces this field to true.
        """
        return pulumi.get(self, "terminates")

    @terminates.setter
    def terminates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "terminates", value)


@pulumi.input_type
class LoadBalancerRuleFixedResponseArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 message_body: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content_type: The value of the HTTP context-type header for this fixed response.
        :param pulumi.Input[str] location: The value of the HTTP location header for this fixed response.
        :param pulumi.Input[str] message_body: The text used as the html body for this fixed response.
        :param pulumi.Input[int] status_code: The HTTP status code used for this fixed response.
        """
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the HTTP context-type header for this fixed response.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the HTTP location header for this fixed response.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[pulumi.Input[str]]:
        """
        The text used as the html body for this fixed response.
        """
        return pulumi.get(self, "message_body")

    @message_body.setter
    def message_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_body", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        The HTTP status code used for this fixed response.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)


@pulumi.input_type
class LoadBalancerRuleOverrideArgs:
    def __init__(__self__, *,
                 default_pools: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fallback_pool: Optional[pulumi.Input[str]] = None,
                 pop_pools: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverridePopPoolArgs']]]] = None,
                 region_pools: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideRegionPoolArgs']]]] = None,
                 session_affinity: Optional[pulumi.Input[str]] = None,
                 session_affinity_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 session_affinity_ttl: Optional[pulumi.Input[int]] = None,
                 steering_policy: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_pools: See default_pool_ids above.
        :param pulumi.Input[str] fallback_pool: See fallback_pool_id above.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverridePopPoolArgs']]] pop_pools: See pop_pools above.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideRegionPoolArgs']]] region_pools: See region_pools above.
        :param pulumi.Input[str] session_affinity: See field above.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] session_affinity_attributes: See field above.
        :param pulumi.Input[int] session_affinity_ttl: See field above.
        :param pulumi.Input[str] steering_policy: See field above.
        :param pulumi.Input[int] ttl: See field above.
        """
        if default_pools is not None:
            pulumi.set(__self__, "default_pools", default_pools)
        if fallback_pool is not None:
            pulumi.set(__self__, "fallback_pool", fallback_pool)
        if pop_pools is not None:
            pulumi.set(__self__, "pop_pools", pop_pools)
        if region_pools is not None:
            pulumi.set(__self__, "region_pools", region_pools)
        if session_affinity is not None:
            pulumi.set(__self__, "session_affinity", session_affinity)
        if session_affinity_attributes is not None:
            pulumi.set(__self__, "session_affinity_attributes", session_affinity_attributes)
        if session_affinity_ttl is not None:
            pulumi.set(__self__, "session_affinity_ttl", session_affinity_ttl)
        if steering_policy is not None:
            pulumi.set(__self__, "steering_policy", steering_policy)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="defaultPools")
    def default_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        See default_pool_ids above.
        """
        return pulumi.get(self, "default_pools")

    @default_pools.setter
    def default_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_pools", value)

    @property
    @pulumi.getter(name="fallbackPool")
    def fallback_pool(self) -> Optional[pulumi.Input[str]]:
        """
        See fallback_pool_id above.
        """
        return pulumi.get(self, "fallback_pool")

    @fallback_pool.setter
    def fallback_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fallback_pool", value)

    @property
    @pulumi.getter(name="popPools")
    def pop_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverridePopPoolArgs']]]]:
        """
        See pop_pools above.
        """
        return pulumi.get(self, "pop_pools")

    @pop_pools.setter
    def pop_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverridePopPoolArgs']]]]):
        pulumi.set(self, "pop_pools", value)

    @property
    @pulumi.getter(name="regionPools")
    def region_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideRegionPoolArgs']]]]:
        """
        See region_pools above.
        """
        return pulumi.get(self, "region_pools")

    @region_pools.setter
    def region_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRuleOverrideRegionPoolArgs']]]]):
        pulumi.set(self, "region_pools", value)

    @property
    @pulumi.getter(name="sessionAffinity")
    def session_affinity(self) -> Optional[pulumi.Input[str]]:
        """
        See field above.
        """
        return pulumi.get(self, "session_affinity")

    @session_affinity.setter
    def session_affinity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityAttributes")
    def session_affinity_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        See field above.
        """
        return pulumi.get(self, "session_affinity_attributes")

    @session_affinity_attributes.setter
    def session_affinity_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "session_affinity_attributes", value)

    @property
    @pulumi.getter(name="sessionAffinityTtl")
    def session_affinity_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        See field above.
        """
        return pulumi.get(self, "session_affinity_ttl")

    @session_affinity_ttl.setter
    def session_affinity_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_affinity_ttl", value)

    @property
    @pulumi.getter(name="steeringPolicy")
    def steering_policy(self) -> Optional[pulumi.Input[str]]:
        """
        See field above.
        """
        return pulumi.get(self, "steering_policy")

    @steering_policy.setter
    def steering_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "steering_policy", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        See field above.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class LoadBalancerRuleOverridePopPoolArgs:
    def __init__(__self__, *,
                 pool_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 pop: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pool_ids: A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        :param pulumi.Input[str] pop: A 3-letter code for the Point-of-Presence. Allowed values can be found in the list of datacenters on the [status page](https://www.cloudflarestatus.com/). Multiple entries should not be specified with the same PoP.
        """
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "pop", pop)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        """
        return pulumi.get(self, "pool_ids")

    @pool_ids.setter
    def pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "pool_ids", value)

    @property
    @pulumi.getter
    def pop(self) -> pulumi.Input[str]:
        """
        A 3-letter code for the Point-of-Presence. Allowed values can be found in the list of datacenters on the [status page](https://www.cloudflarestatus.com/). Multiple entries should not be specified with the same PoP.
        """
        return pulumi.get(self, "pop")

    @pop.setter
    def pop(self, value: pulumi.Input[str]):
        pulumi.set(self, "pop", value)


@pulumi.input_type
class LoadBalancerRuleOverrideRegionPoolArgs:
    def __init__(__self__, *,
                 pool_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] pool_ids: A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        :param pulumi.Input[str] region: A region code which must be in the list defined [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions). Multiple entries should not be specified with the same region.
        """
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of pool IDs in failover priority to use for traffic reaching the given PoP.
        """
        return pulumi.get(self, "pool_ids")

    @pool_ids.setter
    def pool_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "pool_ids", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        A region code which must be in the list defined [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions). Multiple entries should not be specified with the same region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class NotificationPolicyEmailIntegrationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the notification policy.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the notification policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NotificationPolicyPagerdutyIntegrationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the notification policy.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the notification policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NotificationPolicyWebhooksIntegrationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the notification policy.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the notification policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PageRuleActionsArgs:
    def __init__(__self__, *,
                 always_online: Optional[pulumi.Input[str]] = None,
                 always_use_https: Optional[pulumi.Input[bool]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[str]] = None,
                 browser_cache_ttl: Optional[pulumi.Input[str]] = None,
                 browser_check: Optional[pulumi.Input[str]] = None,
                 bypass_cache_on_cookie: Optional[pulumi.Input[str]] = None,
                 cache_by_device_type: Optional[pulumi.Input[str]] = None,
                 cache_deception_armor: Optional[pulumi.Input[str]] = None,
                 cache_key_fields: Optional[pulumi.Input['PageRuleActionsCacheKeyFieldsArgs']] = None,
                 cache_level: Optional[pulumi.Input[str]] = None,
                 cache_on_cookie: Optional[pulumi.Input[str]] = None,
                 cache_ttl_by_statuses: Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsCacheTtlByStatusArgs']]]] = None,
                 disable_apps: Optional[pulumi.Input[bool]] = None,
                 disable_performance: Optional[pulumi.Input[bool]] = None,
                 disable_railgun: Optional[pulumi.Input[bool]] = None,
                 disable_security: Optional[pulumi.Input[bool]] = None,
                 edge_cache_ttl: Optional[pulumi.Input[int]] = None,
                 email_obfuscation: Optional[pulumi.Input[str]] = None,
                 explicit_cache_control: Optional[pulumi.Input[str]] = None,
                 forwarding_url: Optional[pulumi.Input['PageRuleActionsForwardingUrlArgs']] = None,
                 host_header_override: Optional[pulumi.Input[str]] = None,
                 ip_geolocation: Optional[pulumi.Input[str]] = None,
                 minifies: Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsMinifyArgs']]]] = None,
                 mirage: Optional[pulumi.Input[str]] = None,
                 opportunistic_encryption: Optional[pulumi.Input[str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[str]] = None,
                 polish: Optional[pulumi.Input[str]] = None,
                 resolve_override: Optional[pulumi.Input[str]] = None,
                 respect_strong_etag: Optional[pulumi.Input[str]] = None,
                 response_buffering: Optional[pulumi.Input[str]] = None,
                 rocket_loader: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 server_side_exclude: Optional[pulumi.Input[str]] = None,
                 sort_query_string_for_cache: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] always_online: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[bool] always_use_https: Boolean of whether this action is enabled. Default: false.
        :param pulumi.Input[str] automatic_https_rewrites: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] browser_cache_ttl: The Time To Live for the browser cache. `0` means 'Respect Existing Headers'
        :param pulumi.Input[str] browser_check: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] bypass_cache_on_cookie: String value of cookie name to conditionally bypass cache the page.
        :param pulumi.Input[str] cache_by_device_type: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] cache_deception_armor: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsArgs'] cache_key_fields: Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
        :param pulumi.Input[str] cache_level: Whether to set the cache level to `"bypass"`, `"basic"`, `"simplified"`, `"aggressive"`, or `"cache_everything"`.
        :param pulumi.Input[str] cache_on_cookie: String value of cookie name to conditionally cache the page.
        :param pulumi.Input[Sequence[pulumi.Input['PageRuleActionsCacheTtlByStatusArgs']]] cache_ttl_by_statuses: Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
        :param pulumi.Input[bool] disable_apps: Boolean of whether this action is enabled. Default: false.
        :param pulumi.Input[bool] disable_performance: Boolean of whether this action is enabled. Default: false.
        :param pulumi.Input[bool] disable_railgun: Boolean of whether this action is enabled. Default: false.
        :param pulumi.Input[bool] disable_security: Boolean of whether this action is enabled. Default: false.
        :param pulumi.Input[int] edge_cache_ttl: The Time To Live for the edge cache.
        :param pulumi.Input[str] email_obfuscation: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] explicit_cache_control: Whether origin Cache-Control action is `"on"` or `"off"`.
        :param pulumi.Input['PageRuleActionsForwardingUrlArgs'] forwarding_url: The URL to forward to, and with what status. See below.
        :param pulumi.Input[str] host_header_override: Value of the Host header to send.
        :param pulumi.Input[str] ip_geolocation: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[Sequence[pulumi.Input['PageRuleActionsMinifyArgs']]] minifies: The configuration for HTML, CSS and JS minification. See below for full list of options.
        :param pulumi.Input[str] mirage: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] opportunistic_encryption: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] origin_error_page_pass_thru: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] polish: Whether this action is `"off"`, `"lossless"` or `"lossy"`.
        :param pulumi.Input[str] resolve_override: Overridden origin server name.
        :param pulumi.Input[str] respect_strong_etag: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] response_buffering: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] rocket_loader: Whether to set the rocket loader to `"on"`, `"off"`.
        :param pulumi.Input[str] security_level: Whether to set the security level to `"off"`, `"essentially_off"`, `"low"`, `"medium"`, `"high"`, or `"under_attack"`.
        :param pulumi.Input[str] server_side_exclude: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] sort_query_string_for_cache: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] ssl: Whether to set the SSL mode to `"off"`, `"flexible"`, `"full"`, `"strict"`, or `"origin_pull"`.
        :param pulumi.Input[str] true_client_ip_header: Whether this action is `"on"` or `"off"`.
        :param pulumi.Input[str] waf: Whether this action is `"on"` or `"off"`.
        """
        if always_online is not None:
            pulumi.set(__self__, "always_online", always_online)
        if always_use_https is not None:
            pulumi.set(__self__, "always_use_https", always_use_https)
        if automatic_https_rewrites is not None:
            pulumi.set(__self__, "automatic_https_rewrites", automatic_https_rewrites)
        if browser_cache_ttl is not None:
            pulumi.set(__self__, "browser_cache_ttl", browser_cache_ttl)
        if browser_check is not None:
            pulumi.set(__self__, "browser_check", browser_check)
        if bypass_cache_on_cookie is not None:
            pulumi.set(__self__, "bypass_cache_on_cookie", bypass_cache_on_cookie)
        if cache_by_device_type is not None:
            pulumi.set(__self__, "cache_by_device_type", cache_by_device_type)
        if cache_deception_armor is not None:
            pulumi.set(__self__, "cache_deception_armor", cache_deception_armor)
        if cache_key_fields is not None:
            pulumi.set(__self__, "cache_key_fields", cache_key_fields)
        if cache_level is not None:
            pulumi.set(__self__, "cache_level", cache_level)
        if cache_on_cookie is not None:
            pulumi.set(__self__, "cache_on_cookie", cache_on_cookie)
        if cache_ttl_by_statuses is not None:
            pulumi.set(__self__, "cache_ttl_by_statuses", cache_ttl_by_statuses)
        if disable_apps is not None:
            pulumi.set(__self__, "disable_apps", disable_apps)
        if disable_performance is not None:
            pulumi.set(__self__, "disable_performance", disable_performance)
        if disable_railgun is not None:
            pulumi.set(__self__, "disable_railgun", disable_railgun)
        if disable_security is not None:
            pulumi.set(__self__, "disable_security", disable_security)
        if edge_cache_ttl is not None:
            pulumi.set(__self__, "edge_cache_ttl", edge_cache_ttl)
        if email_obfuscation is not None:
            pulumi.set(__self__, "email_obfuscation", email_obfuscation)
        if explicit_cache_control is not None:
            pulumi.set(__self__, "explicit_cache_control", explicit_cache_control)
        if forwarding_url is not None:
            pulumi.set(__self__, "forwarding_url", forwarding_url)
        if host_header_override is not None:
            pulumi.set(__self__, "host_header_override", host_header_override)
        if ip_geolocation is not None:
            pulumi.set(__self__, "ip_geolocation", ip_geolocation)
        if minifies is not None:
            pulumi.set(__self__, "minifies", minifies)
        if mirage is not None:
            pulumi.set(__self__, "mirage", mirage)
        if opportunistic_encryption is not None:
            pulumi.set(__self__, "opportunistic_encryption", opportunistic_encryption)
        if origin_error_page_pass_thru is not None:
            pulumi.set(__self__, "origin_error_page_pass_thru", origin_error_page_pass_thru)
        if polish is not None:
            pulumi.set(__self__, "polish", polish)
        if resolve_override is not None:
            pulumi.set(__self__, "resolve_override", resolve_override)
        if respect_strong_etag is not None:
            pulumi.set(__self__, "respect_strong_etag", respect_strong_etag)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if rocket_loader is not None:
            pulumi.set(__self__, "rocket_loader", rocket_loader)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if server_side_exclude is not None:
            pulumi.set(__self__, "server_side_exclude", server_side_exclude)
        if sort_query_string_for_cache is not None:
            pulumi.set(__self__, "sort_query_string_for_cache", sort_query_string_for_cache)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)

    @property
    @pulumi.getter(name="alwaysOnline")
    def always_online(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "always_online")

    @always_online.setter
    def always_online(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_online", value)

    @property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean of whether this action is enabled. Default: false.
        """
        return pulumi.get(self, "always_use_https")

    @always_use_https.setter
    def always_use_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_use_https", value)

    @property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "automatic_https_rewrites")

    @automatic_https_rewrites.setter
    def automatic_https_rewrites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automatic_https_rewrites", value)

    @property
    @pulumi.getter(name="browserCacheTtl")
    def browser_cache_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        The Time To Live for the browser cache. `0` means 'Respect Existing Headers'
        """
        return pulumi.get(self, "browser_cache_ttl")

    @browser_cache_ttl.setter
    def browser_cache_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_cache_ttl", value)

    @property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "browser_check")

    @browser_check.setter
    def browser_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_check", value)

    @property
    @pulumi.getter(name="bypassCacheOnCookie")
    def bypass_cache_on_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        String value of cookie name to conditionally bypass cache the page.
        """
        return pulumi.get(self, "bypass_cache_on_cookie")

    @bypass_cache_on_cookie.setter
    def bypass_cache_on_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass_cache_on_cookie", value)

    @property
    @pulumi.getter(name="cacheByDeviceType")
    def cache_by_device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "cache_by_device_type")

    @cache_by_device_type.setter
    def cache_by_device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_by_device_type", value)

    @property
    @pulumi.getter(name="cacheDeceptionArmor")
    def cache_deception_armor(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "cache_deception_armor")

    @cache_deception_armor.setter
    def cache_deception_armor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_deception_armor", value)

    @property
    @pulumi.getter(name="cacheKeyFields")
    def cache_key_fields(self) -> Optional[pulumi.Input['PageRuleActionsCacheKeyFieldsArgs']]:
        """
        Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
        """
        return pulumi.get(self, "cache_key_fields")

    @cache_key_fields.setter
    def cache_key_fields(self, value: Optional[pulumi.Input['PageRuleActionsCacheKeyFieldsArgs']]):
        pulumi.set(self, "cache_key_fields", value)

    @property
    @pulumi.getter(name="cacheLevel")
    def cache_level(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to set the cache level to `"bypass"`, `"basic"`, `"simplified"`, `"aggressive"`, or `"cache_everything"`.
        """
        return pulumi.get(self, "cache_level")

    @cache_level.setter
    def cache_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_level", value)

    @property
    @pulumi.getter(name="cacheOnCookie")
    def cache_on_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        String value of cookie name to conditionally cache the page.
        """
        return pulumi.get(self, "cache_on_cookie")

    @cache_on_cookie.setter
    def cache_on_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_on_cookie", value)

    @property
    @pulumi.getter(name="cacheTtlByStatuses")
    def cache_ttl_by_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsCacheTtlByStatusArgs']]]]:
        """
        Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
        """
        return pulumi.get(self, "cache_ttl_by_statuses")

    @cache_ttl_by_statuses.setter
    def cache_ttl_by_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsCacheTtlByStatusArgs']]]]):
        pulumi.set(self, "cache_ttl_by_statuses", value)

    @property
    @pulumi.getter(name="disableApps")
    def disable_apps(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean of whether this action is enabled. Default: false.
        """
        return pulumi.get(self, "disable_apps")

    @disable_apps.setter
    def disable_apps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_apps", value)

    @property
    @pulumi.getter(name="disablePerformance")
    def disable_performance(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean of whether this action is enabled. Default: false.
        """
        return pulumi.get(self, "disable_performance")

    @disable_performance.setter
    def disable_performance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_performance", value)

    @property
    @pulumi.getter(name="disableRailgun")
    def disable_railgun(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean of whether this action is enabled. Default: false.
        """
        return pulumi.get(self, "disable_railgun")

    @disable_railgun.setter
    def disable_railgun(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_railgun", value)

    @property
    @pulumi.getter(name="disableSecurity")
    def disable_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean of whether this action is enabled. Default: false.
        """
        return pulumi.get(self, "disable_security")

    @disable_security.setter
    def disable_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_security", value)

    @property
    @pulumi.getter(name="edgeCacheTtl")
    def edge_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The Time To Live for the edge cache.
        """
        return pulumi.get(self, "edge_cache_ttl")

    @edge_cache_ttl.setter
    def edge_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "edge_cache_ttl", value)

    @property
    @pulumi.getter(name="emailObfuscation")
    def email_obfuscation(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "email_obfuscation")

    @email_obfuscation.setter
    def email_obfuscation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_obfuscation", value)

    @property
    @pulumi.getter(name="explicitCacheControl")
    def explicit_cache_control(self) -> Optional[pulumi.Input[str]]:
        """
        Whether origin Cache-Control action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "explicit_cache_control")

    @explicit_cache_control.setter
    def explicit_cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "explicit_cache_control", value)

    @property
    @pulumi.getter(name="forwardingUrl")
    def forwarding_url(self) -> Optional[pulumi.Input['PageRuleActionsForwardingUrlArgs']]:
        """
        The URL to forward to, and with what status. See below.
        """
        return pulumi.get(self, "forwarding_url")

    @forwarding_url.setter
    def forwarding_url(self, value: Optional[pulumi.Input['PageRuleActionsForwardingUrlArgs']]):
        pulumi.set(self, "forwarding_url", value)

    @property
    @pulumi.getter(name="hostHeaderOverride")
    def host_header_override(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the Host header to send.
        """
        return pulumi.get(self, "host_header_override")

    @host_header_override.setter
    def host_header_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_header_override", value)

    @property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "ip_geolocation")

    @ip_geolocation.setter
    def ip_geolocation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_geolocation", value)

    @property
    @pulumi.getter
    def minifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsMinifyArgs']]]]:
        """
        The configuration for HTML, CSS and JS minification. See below for full list of options.
        """
        return pulumi.get(self, "minifies")

    @minifies.setter
    def minifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PageRuleActionsMinifyArgs']]]]):
        pulumi.set(self, "minifies", value)

    @property
    @pulumi.getter
    def mirage(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "mirage")

    @mirage.setter
    def mirage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirage", value)

    @property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "opportunistic_encryption")

    @opportunistic_encryption.setter
    def opportunistic_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opportunistic_encryption", value)

    @property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "origin_error_page_pass_thru")

    @origin_error_page_pass_thru.setter
    def origin_error_page_pass_thru(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_error_page_pass_thru", value)

    @property
    @pulumi.getter
    def polish(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"off"`, `"lossless"` or `"lossy"`.
        """
        return pulumi.get(self, "polish")

    @polish.setter
    def polish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polish", value)

    @property
    @pulumi.getter(name="resolveOverride")
    def resolve_override(self) -> Optional[pulumi.Input[str]]:
        """
        Overridden origin server name.
        """
        return pulumi.get(self, "resolve_override")

    @resolve_override.setter
    def resolve_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolve_override", value)

    @property
    @pulumi.getter(name="respectStrongEtag")
    def respect_strong_etag(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "respect_strong_etag")

    @respect_strong_etag.setter
    def respect_strong_etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "respect_strong_etag", value)

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_buffering", value)

    @property
    @pulumi.getter(name="rocketLoader")
    def rocket_loader(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to set the rocket loader to `"on"`, `"off"`.
        """
        return pulumi.get(self, "rocket_loader")

    @rocket_loader.setter
    def rocket_loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rocket_loader", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to set the security level to `"off"`, `"essentially_off"`, `"low"`, `"medium"`, `"high"`, or `"under_attack"`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "server_side_exclude")

    @server_side_exclude.setter
    def server_side_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_exclude", value)

    @property
    @pulumi.getter(name="sortQueryStringForCache")
    def sort_query_string_for_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "sort_query_string_for_cache")

    @sort_query_string_for_cache.setter
    def sort_query_string_for_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_query_string_for_cache", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to set the SSL mode to `"off"`, `"flexible"`, `"full"`, `"strict"`, or `"origin_pull"`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "true_client_ip_header", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        """
        Whether this action is `"on"` or `"off"`.
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsArgs:
    def __init__(__self__, *,
                 cookie: pulumi.Input['PageRuleActionsCacheKeyFieldsCookieArgs'],
                 header: pulumi.Input['PageRuleActionsCacheKeyFieldsHeaderArgs'],
                 host: pulumi.Input['PageRuleActionsCacheKeyFieldsHostArgs'],
                 query_string: pulumi.Input['PageRuleActionsCacheKeyFieldsQueryStringArgs'],
                 user: pulumi.Input['PageRuleActionsCacheKeyFieldsUserArgs']):
        """
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsCookieArgs'] cookie: Controls what cookies go into Cache Key:
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsHeaderArgs'] header: Controls what HTTP headers go into Cache Key:
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsHostArgs'] host: Controls which Host header goes into Cache Key:
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsQueryStringArgs'] query_string: Controls which URL query string parameters go into the Cache Key.
        :param pulumi.Input['PageRuleActionsCacheKeyFieldsUserArgs'] user: Controls which end user-related features go into the Cache Key.
        """
        pulumi.set(__self__, "cookie", cookie)
        pulumi.set(__self__, "header", header)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "query_string", query_string)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def cookie(self) -> pulumi.Input['PageRuleActionsCacheKeyFieldsCookieArgs']:
        """
        Controls what cookies go into Cache Key:
        """
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: pulumi.Input['PageRuleActionsCacheKeyFieldsCookieArgs']):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input['PageRuleActionsCacheKeyFieldsHeaderArgs']:
        """
        Controls what HTTP headers go into Cache Key:
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input['PageRuleActionsCacheKeyFieldsHeaderArgs']):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input['PageRuleActionsCacheKeyFieldsHostArgs']:
        """
        Controls which Host header goes into Cache Key:
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input['PageRuleActionsCacheKeyFieldsHostArgs']):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input['PageRuleActionsCacheKeyFieldsQueryStringArgs']:
        """
        Controls which URL query string parameters go into the Cache Key.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input['PageRuleActionsCacheKeyFieldsQueryStringArgs']):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input['PageRuleActionsCacheKeyFieldsUserArgs']:
        """
        Controls which end user-related features go into the Cache Key.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input['PageRuleActionsCacheKeyFieldsUserArgs']):
        pulumi.set(self, "user", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsCookieArgs:
    def __init__(__self__, *,
                 check_presences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] check_presences: Check for presence of specified HTTP headers, without including their actual values.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: Only use values of specified query string parameters in Cache Key.
        """
        if check_presences is not None:
            pulumi.set(__self__, "check_presences", check_presences)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter(name="checkPresences")
    def check_presences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Check for presence of specified HTTP headers, without including their actual values.
        """
        return pulumi.get(self, "check_presences")

    @check_presences.setter
    def check_presences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "check_presences", value)

    @property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only use values of specified query string parameters in Cache Key.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includes", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsHeaderArgs:
    def __init__(__self__, *,
                 check_presences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excludes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] check_presences: Check for presence of specified HTTP headers, without including their actual values.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludes: Exclude these query string parameters from Cache Key.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: Only use values of specified query string parameters in Cache Key.
        """
        if check_presences is not None:
            pulumi.set(__self__, "check_presences", check_presences)
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter(name="checkPresences")
    def check_presences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Check for presence of specified HTTP headers, without including their actual values.
        """
        return pulumi.get(self, "check_presences")

    @check_presences.setter
    def check_presences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "check_presences", value)

    @property
    @pulumi.getter
    def excludes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Exclude these query string parameters from Cache Key.
        """
        return pulumi.get(self, "excludes")

    @excludes.setter
    def excludes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excludes", value)

    @property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only use values of specified query string parameters in Cache Key.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includes", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsHostArgs:
    def __init__(__self__, *,
                 resolved: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] resolved: `false` (default) - includes the Host header in the HTTP request sent to the origin; `true` - includes the Host header that was resolved to get the origin IP for the request (e.g. changed with Resolve Override Page Rule).
        """
        if resolved is not None:
            pulumi.set(__self__, "resolved", resolved)

    @property
    @pulumi.getter
    def resolved(self) -> Optional[pulumi.Input[bool]]:
        """
        `false` (default) - includes the Host header in the HTTP request sent to the origin; `true` - includes the Host header that was resolved to get the origin IP for the request (e.g. changed with Resolve Override Page Rule).
        """
        return pulumi.get(self, "resolved")

    @resolved.setter
    def resolved(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolved", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsQueryStringArgs:
    def __init__(__self__, *,
                 excludes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore: Optional[pulumi.Input[bool]] = None,
                 includes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excludes: Exclude these query string parameters from Cache Key.
        :param pulumi.Input[bool] ignore: `false` (default) - all query string parameters are used for Cache Key, unless explicitly excluded; `true` - all query string parameters are ignored; value is ignored if any of `exclude` or `include` is non-empty.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] includes: Only use values of specified query string parameters in Cache Key.
        """
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if ignore is not None:
            pulumi.set(__self__, "ignore", ignore)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)

    @property
    @pulumi.getter
    def excludes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Exclude these query string parameters from Cache Key.
        """
        return pulumi.get(self, "excludes")

    @excludes.setter
    def excludes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excludes", value)

    @property
    @pulumi.getter
    def ignore(self) -> Optional[pulumi.Input[bool]]:
        """
        `false` (default) - all query string parameters are used for Cache Key, unless explicitly excluded; `true` - all query string parameters are ignored; value is ignored if any of `exclude` or `include` is non-empty.
        """
        return pulumi.get(self, "ignore")

    @ignore.setter
    def ignore(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore", value)

    @property
    @pulumi.getter
    def includes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only use values of specified query string parameters in Cache Key.
        """
        return pulumi.get(self, "includes")

    @includes.setter
    def includes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "includes", value)


@pulumi.input_type
class PageRuleActionsCacheKeyFieldsUserArgs:
    def __init__(__self__, *,
                 device_type: Optional[pulumi.Input[bool]] = None,
                 geo: Optional[pulumi.Input[bool]] = None,
                 lang: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] device_type: `true` - classifies a request as “mobile”, “desktop”, or “tablet” based on the User Agent; defaults to `false`.
        :param pulumi.Input[bool] geo: `true` - includes the client’s country, derived from the IP address; defaults to `false`.
        :param pulumi.Input[bool] lang: `true` - includes the first language code contained in the `Accept-Language` header sent by the client; defaults to `false`.
        """
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if geo is not None:
            pulumi.set(__self__, "geo", geo)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` - classifies a request as “mobile”, “desktop”, or “tablet” based on the User Agent; defaults to `false`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter
    def geo(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` - includes the client’s country, derived from the IP address; defaults to `false`.
        """
        return pulumi.get(self, "geo")

    @geo.setter
    def geo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "geo", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[bool]]:
        """
        `true` - includes the first language code contained in the `Accept-Language` header sent by the client; defaults to `false`.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lang", value)


@pulumi.input_type
class PageRuleActionsCacheTtlByStatusArgs:
    def __init__(__self__, *,
                 codes: pulumi.Input[str],
                 ttl: pulumi.Input[int]):
        """
        :param pulumi.Input[str] codes: A HTTP code (e.g. `404`) or range of codes (e.g. `400-499`)
        :param pulumi.Input[int] ttl: Duration a resource lives in the Cloudflare cache.
               * positive number - cache for specified duration in seconds
        """
        pulumi.set(__self__, "codes", codes)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def codes(self) -> pulumi.Input[str]:
        """
        A HTTP code (e.g. `404`) or range of codes (e.g. `400-499`)
        """
        return pulumi.get(self, "codes")

    @codes.setter
    def codes(self, value: pulumi.Input[str]):
        pulumi.set(self, "codes", value)

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Input[int]:
        """
        Duration a resource lives in the Cloudflare cache.
        * positive number - cache for specified duration in seconds
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: pulumi.Input[int]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class PageRuleActionsForwardingUrlArgs:
    def __init__(__self__, *,
                 status_code: pulumi.Input[int],
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[int] status_code: The status code to use for the redirection.
        :param pulumi.Input[str] url: The URL to which the page rule should forward.
        """
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        """
        The status code to use for the redirection.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to which the page rule should forward.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class PageRuleActionsMinifyArgs:
    def __init__(__self__, *,
                 css: pulumi.Input[str],
                 html: pulumi.Input[str],
                 js: pulumi.Input[str]):
        """
        :param pulumi.Input[str] css: Whether CSS should be minified. Valid values are `"on"` or `"off"`.
        :param pulumi.Input[str] html: Whether HTML should be minified. Valid values are `"on"` or `"off"`.
        :param pulumi.Input[str] js: Whether Javascript should be minified. Valid values are `"on"` or `"off"`.
        """
        pulumi.set(__self__, "css", css)
        pulumi.set(__self__, "html", html)
        pulumi.set(__self__, "js", js)

    @property
    @pulumi.getter
    def css(self) -> pulumi.Input[str]:
        """
        Whether CSS should be minified. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "css")

    @css.setter
    def css(self, value: pulumi.Input[str]):
        pulumi.set(self, "css", value)

    @property
    @pulumi.getter
    def html(self) -> pulumi.Input[str]:
        """
        Whether HTML should be minified. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: pulumi.Input[str]):
        pulumi.set(self, "html", value)

    @property
    @pulumi.getter
    def js(self) -> pulumi.Input[str]:
        """
        Whether Javascript should be minified. Valid values are `"on"` or `"off"`.
        """
        return pulumi.get(self, "js")

    @js.setter
    def js(self, value: pulumi.Input[str]):
        pulumi.set(self, "js", value)


@pulumi.input_type
class RateLimitActionArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 response: Optional[pulumi.Input['RateLimitActionResponseArgs']] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] mode: The type of action to perform. Allowable values are 'simulate', 'ban', 'challenge', 'js_challenge' and 'managed_challenge'.
        :param pulumi.Input['RateLimitActionResponseArgs'] response: Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        :param pulumi.Input[int] timeout: The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period (min: 1, max: 86400).
        """
        pulumi.set(__self__, "mode", mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        The type of action to perform. Allowable values are 'simulate', 'ban', 'challenge', 'js_challenge' and 'managed_challenge'.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['RateLimitActionResponseArgs']]:
        """
        Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['RateLimitActionResponseArgs']]):
        pulumi.set(self, "response", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period (min: 1, max: 86400).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class RateLimitActionResponseArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 content_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] body: The body to return, the content here should conform to the content_type.
        :param pulumi.Input[str] content_type: The content-type of the body, must be one of: 'text/plain', 'text/xml', 'application/json'.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "content_type", content_type)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The body to return, the content here should conform to the content_type.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        """
        The content-type of the body, must be one of: 'text/plain', 'text/xml', 'application/json'.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)


@pulumi.input_type
class RateLimitCorrelateArgs:
    def __init__(__self__, *,
                 by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] by: If set to 'nat', NAT support will be enabled for rate limiting.
        """
        if by is not None:
            pulumi.set(__self__, "by", by)

    @property
    @pulumi.getter
    def by(self) -> Optional[pulumi.Input[str]]:
        """
        If set to 'nat', NAT support will be enabled for rate limiting.
        """
        return pulumi.get(self, "by")

    @by.setter
    def by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "by", value)


@pulumi.input_type
class RateLimitMatchArgs:
    def __init__(__self__, *,
                 request: Optional[pulumi.Input['RateLimitMatchRequestArgs']] = None,
                 response: Optional[pulumi.Input['RateLimitMatchResponseArgs']] = None):
        """
        :param pulumi.Input['RateLimitMatchRequestArgs'] request: Matches HTTP requests (from the client to Cloudflare). See definition below.
        :param pulumi.Input['RateLimitMatchResponseArgs'] response: Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        """
        if request is not None:
            pulumi.set(__self__, "request", request)
        if response is not None:
            pulumi.set(__self__, "response", response)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['RateLimitMatchRequestArgs']]:
        """
        Matches HTTP requests (from the client to Cloudflare). See definition below.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['RateLimitMatchRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input['RateLimitMatchResponseArgs']]:
        """
        Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page. Definition below.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input['RateLimitMatchResponseArgs']]):
        pulumi.set(self, "response", value)


@pulumi.input_type
class RateLimitMatchRequestArgs:
    def __init__(__self__, *,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 schemes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url_pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: HTTP Methods, can be a subset ['POST','PUT'] or all ['\_ALL\_']. Default: ['\_ALL\_'].
        :param pulumi.Input[Sequence[pulumi.Input[str]]] schemes: HTTP Schemes, can be one ['HTTPS'], both ['HTTP','HTTPS'] or all ['\_ALL\_'].  Default: ['\_ALL\_'].
        :param pulumi.Input[str] url_pattern: The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use * for all traffic to your zone. Default: '*'.
        """
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if schemes is not None:
            pulumi.set(__self__, "schemes", schemes)
        if url_pattern is not None:
            pulumi.set(__self__, "url_pattern", url_pattern)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        HTTP Methods, can be a subset ['POST','PUT'] or all ['\_ALL\_']. Default: ['\_ALL\_'].
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def schemes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        HTTP Schemes, can be one ['HTTPS'], both ['HTTP','HTTPS'] or all ['\_ALL\_'].  Default: ['\_ALL\_'].
        """
        return pulumi.get(self, "schemes")

    @schemes.setter
    def schemes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemes", value)

    @property
    @pulumi.getter(name="urlPattern")
    def url_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The URL pattern to match comprised of the host and path, i.e. example.org/path. Wildcard are expanded to match applicable traffic, query strings are not matched. Use * for all traffic to your zone. Default: '*'.
        """
        return pulumi.get(self, "url_pattern")

    @url_pattern.setter
    def url_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_pattern", value)


@pulumi.input_type
class RateLimitMatchResponseArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 origin_traffic: Optional[pulumi.Input[bool]] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] headers: block is a list of maps with the following attributes:
        :param pulumi.Input[bool] origin_traffic: Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: `true`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] statuses: HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if origin_traffic is not None:
            pulumi.set(__self__, "origin_traffic", origin_traffic)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        block is a list of maps with the following attributes:
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="originTraffic")
    def origin_traffic(self) -> Optional[pulumi.Input[bool]]:
        """
        Only count traffic that has come from your origin servers. If true, cached items that Cloudflare serve will not count towards rate limiting. Default: `true`.
        """
        return pulumi.get(self, "origin_traffic")

    @origin_traffic.setter
    def origin_traffic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "origin_traffic", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        HTTP Status codes, can be one [403], many [401,403] or indicate all by not providing this value.
        """
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
class RecordDataArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[int]] = None,
                 altitude: Optional[pulumi.Input[float]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 digest_type: Optional[pulumi.Input[int]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[str]] = None,
                 key_tag: Optional[pulumi.Input[int]] = None,
                 lat_degrees: Optional[pulumi.Input[int]] = None,
                 lat_direction: Optional[pulumi.Input[str]] = None,
                 lat_minutes: Optional[pulumi.Input[int]] = None,
                 lat_seconds: Optional[pulumi.Input[float]] = None,
                 long_degrees: Optional[pulumi.Input[int]] = None,
                 long_direction: Optional[pulumi.Input[str]] = None,
                 long_minutes: Optional[pulumi.Input[int]] = None,
                 long_seconds: Optional[pulumi.Input[float]] = None,
                 matching_type: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 precision_horz: Optional[pulumi.Input[float]] = None,
                 precision_vert: Optional[pulumi.Input[float]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 replacement: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input[int]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 usage: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The name of the record
        :param pulumi.Input[int] priority: The priority of the record
        :param pulumi.Input[int] type: The type of the record
        :param pulumi.Input[str] value: The (string) value of the record. Either this or `data` must be specified
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if altitude is not None:
            pulumi.set(__self__, "altitude", altitude)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if lat_degrees is not None:
            pulumi.set(__self__, "lat_degrees", lat_degrees)
        if lat_direction is not None:
            pulumi.set(__self__, "lat_direction", lat_direction)
        if lat_minutes is not None:
            pulumi.set(__self__, "lat_minutes", lat_minutes)
        if lat_seconds is not None:
            pulumi.set(__self__, "lat_seconds", lat_seconds)
        if long_degrees is not None:
            pulumi.set(__self__, "long_degrees", long_degrees)
        if long_direction is not None:
            pulumi.set(__self__, "long_direction", long_direction)
        if long_minutes is not None:
            pulumi.set(__self__, "long_minutes", long_minutes)
        if long_seconds is not None:
            pulumi.set(__self__, "long_seconds", long_seconds)
        if matching_type is not None:
            pulumi.set(__self__, "matching_type", matching_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if precision_horz is not None:
            pulumi.set(__self__, "precision_horz", precision_horz)
        if precision_vert is not None:
            pulumi.set(__self__, "precision_vert", precision_vert)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def altitude(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "altitude")

    @altitude.setter
    def altitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "altitude", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "digest_type")

    @digest_type.setter
    def digest_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "digest_type", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key_tag")

    @key_tag.setter
    def key_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_tag", value)

    @property
    @pulumi.getter(name="latDegrees")
    def lat_degrees(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lat_degrees")

    @lat_degrees.setter
    def lat_degrees(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lat_degrees", value)

    @property
    @pulumi.getter(name="latDirection")
    def lat_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lat_direction")

    @lat_direction.setter
    def lat_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lat_direction", value)

    @property
    @pulumi.getter(name="latMinutes")
    def lat_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lat_minutes")

    @lat_minutes.setter
    def lat_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lat_minutes", value)

    @property
    @pulumi.getter(name="latSeconds")
    def lat_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lat_seconds")

    @lat_seconds.setter
    def lat_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lat_seconds", value)

    @property
    @pulumi.getter(name="longDegrees")
    def long_degrees(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "long_degrees")

    @long_degrees.setter
    def long_degrees(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_degrees", value)

    @property
    @pulumi.getter(name="longDirection")
    def long_direction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_direction")

    @long_direction.setter
    def long_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_direction", value)

    @property
    @pulumi.getter(name="longMinutes")
    def long_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "long_minutes")

    @long_minutes.setter
    def long_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_minutes", value)

    @property
    @pulumi.getter(name="longSeconds")
    def long_seconds(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "long_seconds")

    @long_seconds.setter
    def long_seconds(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "long_seconds", value)

    @property
    @pulumi.getter(name="matchingType")
    def matching_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "matching_type")

    @matching_type.setter
    def matching_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "matching_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the record
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="precisionHorz")
    def precision_horz(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "precision_horz")

    @precision_horz.setter
    def precision_horz(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "precision_horz", value)

    @property
    @pulumi.getter(name="precisionVert")
    def precision_vert(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "precision_vert")

    @precision_vert.setter
    def precision_vert(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "precision_vert", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the record
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def replacement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement")

    @replacement.setter
    def replacement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        The type of the record
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The (string) value of the record. Either this or `data` must be specified
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class RulesetRuleArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 action_parameters: Optional[pulumi.Input['RulesetRuleActionParametersArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 exposed_credential_check: Optional[pulumi.Input['RulesetRuleExposedCredentialCheckArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ratelimit: Optional[pulumi.Input['RulesetRuleRatelimitArgs']] = None,
                 ref: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Brief summary of the ruleset rule and its intended use.
        :param pulumi.Input[str] expression: Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        :param pulumi.Input[str] action: Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        :param pulumi.Input['RulesetRuleActionParametersArgs'] action_parameters: List of parameters that configure the behavior of the ruleset rule action (refer to the nested schema).
        :param pulumi.Input[bool] enabled: Defines if the current rule-level override enables or disables the rule.
        :param pulumi.Input['RulesetRuleExposedCredentialCheckArgs'] exposed_credential_check: List of parameters that configure exposed credential checks (refer to the nested schema).
        :param pulumi.Input[str] id: Rule ID to apply the override to.
        :param pulumi.Input['RulesetRuleRatelimitArgs'] ratelimit: List of parameters that configure HTTP rate limiting behaviour (refer to the nested schema).
        :param pulumi.Input[str] ref: Rule reference.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if action_parameters is not None:
            pulumi.set(__self__, "action_parameters", action_parameters)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if exposed_credential_check is not None:
            pulumi.set(__self__, "exposed_credential_check", exposed_credential_check)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ratelimit is not None:
            pulumi.set(__self__, "ratelimit", ratelimit)
        if ref is not None:
            pulumi.set(__self__, "ref", ref)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Brief summary of the ruleset rule and its intended use.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="actionParameters")
    def action_parameters(self) -> Optional[pulumi.Input['RulesetRuleActionParametersArgs']]:
        """
        List of parameters that configure the behavior of the ruleset rule action (refer to the nested schema).
        """
        return pulumi.get(self, "action_parameters")

    @action_parameters.setter
    def action_parameters(self, value: Optional[pulumi.Input['RulesetRuleActionParametersArgs']]):
        pulumi.set(self, "action_parameters", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the current rule-level override enables or disables the rule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exposedCredentialCheck")
    def exposed_credential_check(self) -> Optional[pulumi.Input['RulesetRuleExposedCredentialCheckArgs']]:
        """
        List of parameters that configure exposed credential checks (refer to the nested schema).
        """
        return pulumi.get(self, "exposed_credential_check")

    @exposed_credential_check.setter
    def exposed_credential_check(self, value: Optional[pulumi.Input['RulesetRuleExposedCredentialCheckArgs']]):
        pulumi.set(self, "exposed_credential_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID to apply the override to.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ratelimit(self) -> Optional[pulumi.Input['RulesetRuleRatelimitArgs']]:
        """
        List of parameters that configure HTTP rate limiting behaviour (refer to the nested schema).
        """
        return pulumi.get(self, "ratelimit")

    @ratelimit.setter
    def ratelimit(self, value: Optional[pulumi.Input['RulesetRuleRatelimitArgs']]):
        pulumi.set(self, "ratelimit", value)

    @property
    @pulumi.getter
    def ref(self) -> Optional[pulumi.Input[str]]:
        """
        Rule reference.
        """
        return pulumi.get(self, "ref")

    @ref.setter
    def ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RulesetRuleActionParametersArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersHeaderArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 increment: Optional[pulumi.Input[int]] = None,
                 matched_data: Optional[pulumi.Input['RulesetRuleActionParametersMatchedDataArgs']] = None,
                 overrides: Optional[pulumi.Input['RulesetRuleActionParametersOverridesArgs']] = None,
                 phases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 products: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rules: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ruleset: Optional[pulumi.Input[str]] = None,
                 rulesets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uri: Optional[pulumi.Input['RulesetRuleActionParametersUriArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersHeaderArgs']]] headers: List of HTTP header modifications to perform in the ruleset rule (refer to the nested schema).
        :param pulumi.Input[str] id: Rule ID to apply the override to.
        :param pulumi.Input['RulesetRuleActionParametersMatchedDataArgs'] matched_data: List of properties to configure WAF payload logging (refer to the nested schema).
        :param pulumi.Input['RulesetRuleActionParametersOverridesArgs'] overrides: List of override configurations to apply to the ruleset (refer to the nested schema).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] products: Products to target with the actions. Valid values are `"bic"`, `"hot"`, `"ratelimit"`, `"securityLevel"`, `"uablock"`, `"waf"` or `"zonelockdown"`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] rules: List of rule-based overrides (refer to the nested schema).
        :param pulumi.Input[str] ruleset: Which ruleset ID to target.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] rulesets: List of managed WAF rule IDs to target. Only valid when the "action" is set to skip.
        :param pulumi.Input['RulesetRuleActionParametersUriArgs'] uri: List of URI properties to configure for the ruleset rule when performing URL rewrite transformations (refer to the nested schema).
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if matched_data is not None:
            pulumi.set(__self__, "matched_data", matched_data)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)
        if products is not None:
            pulumi.set(__self__, "products", products)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if ruleset is not None:
            pulumi.set(__self__, "ruleset", ruleset)
        if rulesets is not None:
            pulumi.set(__self__, "rulesets", rulesets)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersHeaderArgs']]]]:
        """
        List of HTTP header modifications to perform in the ruleset rule (refer to the nested schema).
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID to apply the override to.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="matchedData")
    def matched_data(self) -> Optional[pulumi.Input['RulesetRuleActionParametersMatchedDataArgs']]:
        """
        List of properties to configure WAF payload logging (refer to the nested schema).
        """
        return pulumi.get(self, "matched_data")

    @matched_data.setter
    def matched_data(self, value: Optional[pulumi.Input['RulesetRuleActionParametersMatchedDataArgs']]):
        pulumi.set(self, "matched_data", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input['RulesetRuleActionParametersOverridesArgs']]:
        """
        List of override configurations to apply to the ruleset (refer to the nested schema).
        """
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input['RulesetRuleActionParametersOverridesArgs']]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter
    def phases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "phases")

    @phases.setter
    def phases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "phases", value)

    @property
    @pulumi.getter
    def products(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Products to target with the actions. Valid values are `"bic"`, `"hot"`, `"ratelimit"`, `"securityLevel"`, `"uablock"`, `"waf"` or `"zonelockdown"`.
        """
        return pulumi.get(self, "products")

    @products.setter
    def products(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "products", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        List of rule-based overrides (refer to the nested schema).
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def ruleset(self) -> Optional[pulumi.Input[str]]:
        """
        Which ruleset ID to target.
        """
        return pulumi.get(self, "ruleset")

    @ruleset.setter
    def ruleset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ruleset", value)

    @property
    @pulumi.getter
    def rulesets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of managed WAF rule IDs to target. Only valid when the "action" is set to skip.
        """
        return pulumi.get(self, "rulesets")

    @rulesets.setter
    def rulesets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rulesets", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input['RulesetRuleActionParametersUriArgs']]:
        """
        List of URI properties to configure for the ruleset rule when performing URL rewrite transformations (refer to the nested schema).
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input['RulesetRuleActionParametersUriArgs']]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RulesetRuleActionParametersHeaderArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        :param pulumi.Input[str] name: Name of the HTTP request header to target.
        :param pulumi.Input[str] operation: Action to perform on the HTTP request header. Valid values are `"set"` or `"remove"`.
        :param pulumi.Input[str] value: Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the HTTP request header to target.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform on the HTTP request header. Valid values are `"set"` or `"remove"`.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RulesetRuleActionParametersMatchedDataArgs:
    def __init__(__self__, *,
                 public_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] public_key: Public key to use within WAF Ruleset payload logging to view the HTTP request parameters. You can generate a public key [using the `matched-data-cli` command-line tool](https://developers.cloudflare.com/waf/managed-rulesets/payload-logging/command-line/generate-key-pair) or [in the Cloudflare dashboard](https://developers.cloudflare.com/waf/managed-rulesets/payload-logging/configure).
        """
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public key to use within WAF Ruleset payload logging to view the HTTP request parameters. You can generate a public key [using the `matched-data-cli` command-line tool](https://developers.cloudflare.com/waf/managed-rulesets/payload-logging/command-line/generate-key-pair) or [in the Cloudflare dashboard](https://developers.cloudflare.com/waf/managed-rulesets/payload-logging/configure).
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class RulesetRuleActionParametersOverridesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesCategoryArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesRuleArgs']]]] = None):
        """
        :param pulumi.Input[str] action: Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        :param pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesCategoryArgs']]] categories: List of tag-based overrides (refer to the nested schema).
        :param pulumi.Input[bool] enabled: Defines if the current rule-level override enables or disables the rule.
        :param pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesRuleArgs']]] rules: List of rule-based overrides (refer to the nested schema).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesCategoryArgs']]]]:
        """
        List of tag-based overrides (refer to the nested schema).
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the current rule-level override enables or disables the rule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesRuleArgs']]]]:
        """
        List of rule-based overrides (refer to the nested schema).
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetRuleActionParametersOverridesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class RulesetRuleActionParametersOverridesCategoryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] action: Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        :param pulumi.Input[str] category: Tag name to apply the ruleset rule override to.
        :param pulumi.Input[bool] enabled: Defines if the current rule-level override enables or disables the rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name to apply the ruleset rule override to.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the current rule-level override enables or disables the rule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class RulesetRuleActionParametersOverridesRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 score_threshold: Optional[pulumi.Input[int]] = None,
                 sensitivity_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        :param pulumi.Input[bool] enabled: Defines if the current rule-level override enables or disables the rule.
        :param pulumi.Input[str] id: Rule ID to apply the override to.
        :param pulumi.Input[int] score_threshold: Anomaly score threshold to apply in the ruleset rule override. Only applicable to modsecurity-based rulesets.
        :param pulumi.Input[str] sensitivity_level: Sensitivity level for a ruleset rule override.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if score_threshold is not None:
            pulumi.set(__self__, "score_threshold", score_threshold)
        if sensitivity_level is not None:
            pulumi.set(__self__, "sensitivity_level", sensitivity_level)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to perform in the rule-level override. Valid values are `"block"`, `"challenge"`, `"ddos_dynamic"`, `"execute"`, `"force_connection_close"`, `"js_challenge"`, `"managed_challenge"`, `"log"`, `"rewrite"`, `"score"`, or  `"skip"`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines if the current rule-level override enables or disables the rule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID to apply the override to.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="scoreThreshold")
    def score_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly score threshold to apply in the ruleset rule override. Only applicable to modsecurity-based rulesets.
        """
        return pulumi.get(self, "score_threshold")

    @score_threshold.setter
    def score_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score_threshold", value)

    @property
    @pulumi.getter(name="sensitivityLevel")
    def sensitivity_level(self) -> Optional[pulumi.Input[str]]:
        """
        Sensitivity level for a ruleset rule override.
        """
        return pulumi.get(self, "sensitivity_level")

    @sensitivity_level.setter
    def sensitivity_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitivity_level", value)


@pulumi.input_type
class RulesetRuleActionParametersUriArgs:
    def __init__(__self__, *,
                 origin: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input['RulesetRuleActionParametersUriPathArgs']] = None,
                 query: Optional[pulumi.Input['RulesetRuleActionParametersUriQueryArgs']] = None):
        """
        :param pulumi.Input['RulesetRuleActionParametersUriPathArgs'] path: URI path configuration when performing a URL rewrite (refer to the nested schema).
        :param pulumi.Input['RulesetRuleActionParametersUriQueryArgs'] query: Query string configuration when performing a URL rewrite (refer to the nested schema).
        """
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input['RulesetRuleActionParametersUriPathArgs']]:
        """
        URI path configuration when performing a URL rewrite (refer to the nested schema).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input['RulesetRuleActionParametersUriPathArgs']]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input['RulesetRuleActionParametersUriQueryArgs']]:
        """
        Query string configuration when performing a URL rewrite (refer to the nested schema).
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input['RulesetRuleActionParametersUriQueryArgs']]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class RulesetRuleActionParametersUriPathArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        :param pulumi.Input[str] value: Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RulesetRuleActionParametersUriQueryArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        :param pulumi.Input[str] value: Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Expression that defines the updated (dynamic) value of the URI path or query string component. Conflicts with `value`.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Static string value of the updated URI path or query string component. Conflicts with `expression`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RulesetRuleExposedCredentialCheckArgs:
    def __init__(__self__, *,
                 password_expression: Optional[pulumi.Input[str]] = None,
                 username_expression: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password_expression: Firewall Rules expression language based on Wireshark display filters for where to check for the "password" value. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language).
        :param pulumi.Input[str] username_expression: Firewall Rules expression language based on Wireshark display filters for where to check for the "username" value. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language).
        """
        if password_expression is not None:
            pulumi.set(__self__, "password_expression", password_expression)
        if username_expression is not None:
            pulumi.set(__self__, "username_expression", username_expression)

    @property
    @pulumi.getter(name="passwordExpression")
    def password_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall Rules expression language based on Wireshark display filters for where to check for the "password" value. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language).
        """
        return pulumi.get(self, "password_expression")

    @password_expression.setter
    def password_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_expression", value)

    @property
    @pulumi.getter(name="usernameExpression")
    def username_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall Rules expression language based on Wireshark display filters for where to check for the "username" value. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language).
        """
        return pulumi.get(self, "username_expression")

    @username_expression.setter
    def username_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_expression", value)


@pulumi.input_type
class RulesetRuleRatelimitArgs:
    def __init__(__self__, *,
                 characteristics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mitigation_expression: Optional[pulumi.Input[str]] = None,
                 mitigation_timeout: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 requests_per_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] characteristics: List of parameters that define how Cloudflare tracks the request rate for this rule.
        :param pulumi.Input[str] mitigation_expression: Scope of the mitigation action. Allows you to specify an action scope different from the rule scope. Refer to the [rate limiting parameters documentation](https://developers.cloudflare.com/firewall/cf-rulesets/custom-rules/rate-limiting/parameters) for full details.
        :param pulumi.Input[int] mitigation_timeout: Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
        :param pulumi.Input[int] period: The period of time to consider (in seconds) when evaluating the request rate.
        :param pulumi.Input[int] requests_per_period: The number of requests over the period of time that will trigger the Rate Limiting rule.
        """
        if characteristics is not None:
            pulumi.set(__self__, "characteristics", characteristics)
        if mitigation_expression is not None:
            pulumi.set(__self__, "mitigation_expression", mitigation_expression)
        if mitigation_timeout is not None:
            pulumi.set(__self__, "mitigation_timeout", mitigation_timeout)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if requests_per_period is not None:
            pulumi.set(__self__, "requests_per_period", requests_per_period)

    @property
    @pulumi.getter
    def characteristics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of parameters that define how Cloudflare tracks the request rate for this rule.
        """
        return pulumi.get(self, "characteristics")

    @characteristics.setter
    def characteristics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "characteristics", value)

    @property
    @pulumi.getter(name="mitigationExpression")
    def mitigation_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Scope of the mitigation action. Allows you to specify an action scope different from the rule scope. Refer to the [rate limiting parameters documentation](https://developers.cloudflare.com/firewall/cf-rulesets/custom-rules/rate-limiting/parameters) for full details.
        """
        return pulumi.get(self, "mitigation_expression")

    @mitigation_expression.setter
    def mitigation_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mitigation_expression", value)

    @property
    @pulumi.getter(name="mitigationTimeout")
    def mitigation_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
        """
        return pulumi.get(self, "mitigation_timeout")

    @mitigation_timeout.setter
    def mitigation_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mitigation_timeout", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The period of time to consider (in seconds) when evaluating the request rate.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="requestsPerPeriod")
    def requests_per_period(self) -> Optional[pulumi.Input[int]]:
        """
        The number of requests over the period of time that will trigger the Rate Limiting rule.
        """
        return pulumi.get(self, "requests_per_period")

    @requests_per_period.setter
    def requests_per_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requests_per_period", value)


@pulumi.input_type
class SpectrumApplicationDnsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Fully qualified domain name of the origin e.g. origin-ssh.example.com.
        :param pulumi.Input[str] type: The type of DNS record associated with the application. Valid values: `CNAME`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Fully qualified domain name of the origin e.g. origin-ssh.example.com.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of DNS record associated with the application. Valid values: `CNAME`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SpectrumApplicationOriginDnsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Fully qualified domain name of the origin e.g. origin-ssh.example.com.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Fully qualified domain name of the origin e.g. origin-ssh.example.com.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SpectrumApplicationOriginPortRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        """
        :param pulumi.Input[int] end: Upper bound of the origin port range, e.g. `2000`
        :param pulumi.Input[int] start: Lower bound of the origin port range, e.g. `1000`
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        """
        Upper bound of the origin port range, e.g. `2000`
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        """
        Lower bound of the origin port range, e.g. `1000`
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class SplitTunnelTunnelArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: The address in CIDR format to include in the tunnel configuration. Conflicts with `"host"`.
        :param pulumi.Input[str] description: The description of the tunnel.
        :param pulumi.Input[str] host: The domain name to include in the tunnel configuration. Conflicts with `"address"`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The address in CIDR format to include in the tunnel configuration. Conflicts with `"host"`.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the tunnel.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name to include in the tunnel configuration. Conflicts with `"address"`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class TeamsAccountAntivirusArgs:
    def __init__(__self__, *,
                 enabled_download_phase: pulumi.Input[bool],
                 enabled_upload_phase: pulumi.Input[bool],
                 fail_closed: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled_download_phase: Scan on file download.
        :param pulumi.Input[bool] enabled_upload_phase: Scan on file upload.
        :param pulumi.Input[bool] fail_closed: Block requests for files that cannot be scanned.
        """
        pulumi.set(__self__, "enabled_download_phase", enabled_download_phase)
        pulumi.set(__self__, "enabled_upload_phase", enabled_upload_phase)
        pulumi.set(__self__, "fail_closed", fail_closed)

    @property
    @pulumi.getter(name="enabledDownloadPhase")
    def enabled_download_phase(self) -> pulumi.Input[bool]:
        """
        Scan on file download.
        """
        return pulumi.get(self, "enabled_download_phase")

    @enabled_download_phase.setter
    def enabled_download_phase(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled_download_phase", value)

    @property
    @pulumi.getter(name="enabledUploadPhase")
    def enabled_upload_phase(self) -> pulumi.Input[bool]:
        """
        Scan on file upload.
        """
        return pulumi.get(self, "enabled_upload_phase")

    @enabled_upload_phase.setter
    def enabled_upload_phase(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled_upload_phase", value)

    @property
    @pulumi.getter(name="failClosed")
    def fail_closed(self) -> pulumi.Input[bool]:
        """
        Block requests for files that cannot be scanned.
        """
        return pulumi.get(self, "fail_closed")

    @fail_closed.setter
    def fail_closed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fail_closed", value)


@pulumi.input_type
class TeamsAccountBlockPageArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 footer_text: Optional[pulumi.Input[str]] = None,
                 header_text: Optional[pulumi.Input[str]] = None,
                 logo_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] background_color: Hex code of block page background color.
        :param pulumi.Input[bool] enabled: Indicator of enablement.
        :param pulumi.Input[str] footer_text: Block page header text.
        :param pulumi.Input[str] header_text: Block page footer text.
        :param pulumi.Input[str] logo_path: URL of block page logo.
        :param pulumi.Input[str] name: Name of block page configuration.
        """
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if footer_text is not None:
            pulumi.set(__self__, "footer_text", footer_text)
        if header_text is not None:
            pulumi.set(__self__, "header_text", header_text)
        if logo_path is not None:
            pulumi.set(__self__, "logo_path", logo_path)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        """
        Hex code of block page background color.
        """
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicator of enablement.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="footerText")
    def footer_text(self) -> Optional[pulumi.Input[str]]:
        """
        Block page header text.
        """
        return pulumi.get(self, "footer_text")

    @footer_text.setter
    def footer_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_text", value)

    @property
    @pulumi.getter(name="headerText")
    def header_text(self) -> Optional[pulumi.Input[str]]:
        """
        Block page footer text.
        """
        return pulumi.get(self, "header_text")

    @header_text.setter
    def header_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_text", value)

    @property
    @pulumi.getter(name="logoPath")
    def logo_path(self) -> Optional[pulumi.Input[str]]:
        """
        URL of block page logo.
        """
        return pulumi.get(self, "logo_path")

    @logo_path.setter
    def logo_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of block page configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TeamsAccountFipsArgs:
    def __init__(__self__, *,
                 tls: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] tls: Only allow FIPS-compliant TLS configuration.
        """
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Only allow FIPS-compliant TLS configuration.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls", value)


@pulumi.input_type
class TeamsAccountLoggingArgs:
    def __init__(__self__, *,
                 redact_pii: pulumi.Input[bool],
                 settings_by_rule_type: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeArgs']):
        """
        :param pulumi.Input[bool] redact_pii: Redact personally identifiable information from activity logging (PII fields are: source IP,
               user email, user ID, device ID, URL, referrer, user agent).
        :param pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeArgs'] settings_by_rule_type: Represents whether all requests are logged or only the blocked requests are
               logged in DNS, HTTP and L4 filters.
        """
        pulumi.set(__self__, "redact_pii", redact_pii)
        pulumi.set(__self__, "settings_by_rule_type", settings_by_rule_type)

    @property
    @pulumi.getter(name="redactPii")
    def redact_pii(self) -> pulumi.Input[bool]:
        """
        Redact personally identifiable information from activity logging (PII fields are: source IP,
        user email, user ID, device ID, URL, referrer, user agent).
        """
        return pulumi.get(self, "redact_pii")

    @redact_pii.setter
    def redact_pii(self, value: pulumi.Input[bool]):
        pulumi.set(self, "redact_pii", value)

    @property
    @pulumi.getter(name="settingsByRuleType")
    def settings_by_rule_type(self) -> pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeArgs']:
        """
        Represents whether all requests are logged or only the blocked requests are
        logged in DNS, HTTP and L4 filters.
        """
        return pulumi.get(self, "settings_by_rule_type")

    @settings_by_rule_type.setter
    def settings_by_rule_type(self, value: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeArgs']):
        pulumi.set(self, "settings_by_rule_type", value)


@pulumi.input_type
class TeamsAccountLoggingSettingsByRuleTypeArgs:
    def __init__(__self__, *,
                 dns: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeDnsArgs'],
                 http: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeHttpArgs'],
                 l4: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeL4Args']):
        pulumi.set(__self__, "dns", dns)
        pulumi.set(__self__, "http", http)
        pulumi.set(__self__, "l4", l4)

    @property
    @pulumi.getter
    def dns(self) -> pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeDnsArgs']:
        return pulumi.get(self, "dns")

    @dns.setter
    def dns(self, value: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeDnsArgs']):
        pulumi.set(self, "dns", value)

    @property
    @pulumi.getter
    def http(self) -> pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeHttpArgs']:
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeHttpArgs']):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def l4(self) -> pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeL4Args']:
        return pulumi.get(self, "l4")

    @l4.setter
    def l4(self, value: pulumi.Input['TeamsAccountLoggingSettingsByRuleTypeL4Args']):
        pulumi.set(self, "l4", value)


@pulumi.input_type
class TeamsAccountLoggingSettingsByRuleTypeDnsArgs:
    def __init__(__self__, *,
                 log_all: pulumi.Input[bool],
                 log_blocks: pulumi.Input[bool]):
        pulumi.set(__self__, "log_all", log_all)
        pulumi.set(__self__, "log_blocks", log_blocks)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="logBlocks")
    def log_blocks(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_blocks")

    @log_blocks.setter
    def log_blocks(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_blocks", value)


@pulumi.input_type
class TeamsAccountLoggingSettingsByRuleTypeHttpArgs:
    def __init__(__self__, *,
                 log_all: pulumi.Input[bool],
                 log_blocks: pulumi.Input[bool]):
        pulumi.set(__self__, "log_all", log_all)
        pulumi.set(__self__, "log_blocks", log_blocks)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="logBlocks")
    def log_blocks(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_blocks")

    @log_blocks.setter
    def log_blocks(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_blocks", value)


@pulumi.input_type
class TeamsAccountLoggingSettingsByRuleTypeL4Args:
    def __init__(__self__, *,
                 log_all: pulumi.Input[bool],
                 log_blocks: pulumi.Input[bool]):
        pulumi.set(__self__, "log_all", log_all)
        pulumi.set(__self__, "log_blocks", log_blocks)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="logBlocks")
    def log_blocks(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "log_blocks")

    @log_blocks.setter
    def log_blocks(self, value: pulumi.Input[bool]):
        pulumi.set(self, "log_blocks", value)


@pulumi.input_type
class TeamsAccountProxyArgs:
    def __init__(__self__, *,
                 tcp: pulumi.Input[bool],
                 udp: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] tcp: Whether gateway proxy is enabled on gateway devices for tcp traffic.
        :param pulumi.Input[bool] udp: Whether gateway proxy is enabled on gateway devices for udp traffic.
        """
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def tcp(self) -> pulumi.Input[bool]:
        """
        Whether gateway proxy is enabled on gateway devices for tcp traffic.
        """
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter
    def udp(self) -> pulumi.Input[bool]:
        """
        Whether gateway proxy is enabled on gateway devices for udp traffic.
        """
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class TeamsLocationNetworkArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the teams location.
        """
        pulumi.set(__self__, "network", network)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the teams location.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TeamsRuleRuleSettingsArgs:
    def __init__(__self__, *,
                 add_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 biso_admin_controls: Optional[pulumi.Input['TeamsRuleRuleSettingsBisoAdminControlsArgs']] = None,
                 block_page_enabled: Optional[pulumi.Input[bool]] = None,
                 block_page_reason: Optional[pulumi.Input[str]] = None,
                 check_session: Optional[pulumi.Input['TeamsRuleRuleSettingsCheckSessionArgs']] = None,
                 l4override: Optional[pulumi.Input['TeamsRuleRuleSettingsL4overrideArgs']] = None,
                 override_host: Optional[pulumi.Input[str]] = None,
                 override_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] add_headers: Add custom headers to allowed requests in the form of key-value pairs.
        :param pulumi.Input['TeamsRuleRuleSettingsBisoAdminControlsArgs'] biso_admin_controls: Configure how browser isolation behaves (refer to the nested schema).
        :param pulumi.Input[bool] block_page_enabled: Indicator of block page enablement.
        :param pulumi.Input[str] block_page_reason: The displayed reason for a user being blocked.
        :param pulumi.Input['TeamsRuleRuleSettingsCheckSessionArgs'] check_session: Configure how session check behaves (refer to the nested schema).
        :param pulumi.Input['TeamsRuleRuleSettingsL4overrideArgs'] l4override: Settings to forward layer 4 traffic (refer to the nested schema).
        :param pulumi.Input[str] override_host: The host to override matching DNS queries with.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] override_ips: The IPs to override matching DNS queries with.
        """
        if add_headers is not None:
            pulumi.set(__self__, "add_headers", add_headers)
        if biso_admin_controls is not None:
            pulumi.set(__self__, "biso_admin_controls", biso_admin_controls)
        if block_page_enabled is not None:
            pulumi.set(__self__, "block_page_enabled", block_page_enabled)
        if block_page_reason is not None:
            pulumi.set(__self__, "block_page_reason", block_page_reason)
        if check_session is not None:
            pulumi.set(__self__, "check_session", check_session)
        if l4override is not None:
            pulumi.set(__self__, "l4override", l4override)
        if override_host is not None:
            pulumi.set(__self__, "override_host", override_host)
        if override_ips is not None:
            pulumi.set(__self__, "override_ips", override_ips)

    @property
    @pulumi.getter(name="addHeaders")
    def add_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Add custom headers to allowed requests in the form of key-value pairs.
        """
        return pulumi.get(self, "add_headers")

    @add_headers.setter
    def add_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "add_headers", value)

    @property
    @pulumi.getter(name="bisoAdminControls")
    def biso_admin_controls(self) -> Optional[pulumi.Input['TeamsRuleRuleSettingsBisoAdminControlsArgs']]:
        """
        Configure how browser isolation behaves (refer to the nested schema).
        """
        return pulumi.get(self, "biso_admin_controls")

    @biso_admin_controls.setter
    def biso_admin_controls(self, value: Optional[pulumi.Input['TeamsRuleRuleSettingsBisoAdminControlsArgs']]):
        pulumi.set(self, "biso_admin_controls", value)

    @property
    @pulumi.getter(name="blockPageEnabled")
    def block_page_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicator of block page enablement.
        """
        return pulumi.get(self, "block_page_enabled")

    @block_page_enabled.setter
    def block_page_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "block_page_enabled", value)

    @property
    @pulumi.getter(name="blockPageReason")
    def block_page_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The displayed reason for a user being blocked.
        """
        return pulumi.get(self, "block_page_reason")

    @block_page_reason.setter
    def block_page_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_page_reason", value)

    @property
    @pulumi.getter(name="checkSession")
    def check_session(self) -> Optional[pulumi.Input['TeamsRuleRuleSettingsCheckSessionArgs']]:
        """
        Configure how session check behaves (refer to the nested schema).
        """
        return pulumi.get(self, "check_session")

    @check_session.setter
    def check_session(self, value: Optional[pulumi.Input['TeamsRuleRuleSettingsCheckSessionArgs']]):
        pulumi.set(self, "check_session", value)

    @property
    @pulumi.getter
    def l4override(self) -> Optional[pulumi.Input['TeamsRuleRuleSettingsL4overrideArgs']]:
        """
        Settings to forward layer 4 traffic (refer to the nested schema).
        """
        return pulumi.get(self, "l4override")

    @l4override.setter
    def l4override(self, value: Optional[pulumi.Input['TeamsRuleRuleSettingsL4overrideArgs']]):
        pulumi.set(self, "l4override", value)

    @property
    @pulumi.getter(name="overrideHost")
    def override_host(self) -> Optional[pulumi.Input[str]]:
        """
        The host to override matching DNS queries with.
        """
        return pulumi.get(self, "override_host")

    @override_host.setter
    def override_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_host", value)

    @property
    @pulumi.getter(name="overrideIps")
    def override_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IPs to override matching DNS queries with.
        """
        return pulumi.get(self, "override_ips")

    @override_ips.setter
    def override_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "override_ips", value)


@pulumi.input_type
class TeamsRuleRuleSettingsBisoAdminControlsArgs:
    def __init__(__self__, *,
                 disable_copy_paste: Optional[pulumi.Input[bool]] = None,
                 disable_download: Optional[pulumi.Input[bool]] = None,
                 disable_keyboard: Optional[pulumi.Input[bool]] = None,
                 disable_printing: Optional[pulumi.Input[bool]] = None,
                 disable_upload: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] disable_copy_paste: Disable copy-paste.
        :param pulumi.Input[bool] disable_download: Disable download.
        :param pulumi.Input[bool] disable_keyboard: Disable keyboard usage.
        :param pulumi.Input[bool] disable_printing: Disable printing.
        :param pulumi.Input[bool] disable_upload: Disable upload.
        """
        if disable_copy_paste is not None:
            pulumi.set(__self__, "disable_copy_paste", disable_copy_paste)
        if disable_download is not None:
            pulumi.set(__self__, "disable_download", disable_download)
        if disable_keyboard is not None:
            pulumi.set(__self__, "disable_keyboard", disable_keyboard)
        if disable_printing is not None:
            pulumi.set(__self__, "disable_printing", disable_printing)
        if disable_upload is not None:
            pulumi.set(__self__, "disable_upload", disable_upload)

    @property
    @pulumi.getter(name="disableCopyPaste")
    def disable_copy_paste(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable copy-paste.
        """
        return pulumi.get(self, "disable_copy_paste")

    @disable_copy_paste.setter
    def disable_copy_paste(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_copy_paste", value)

    @property
    @pulumi.getter(name="disableDownload")
    def disable_download(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable download.
        """
        return pulumi.get(self, "disable_download")

    @disable_download.setter
    def disable_download(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_download", value)

    @property
    @pulumi.getter(name="disableKeyboard")
    def disable_keyboard(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable keyboard usage.
        """
        return pulumi.get(self, "disable_keyboard")

    @disable_keyboard.setter
    def disable_keyboard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_keyboard", value)

    @property
    @pulumi.getter(name="disablePrinting")
    def disable_printing(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable printing.
        """
        return pulumi.get(self, "disable_printing")

    @disable_printing.setter
    def disable_printing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_printing", value)

    @property
    @pulumi.getter(name="disableUpload")
    def disable_upload(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable upload.
        """
        return pulumi.get(self, "disable_upload")

    @disable_upload.setter
    def disable_upload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_upload", value)


@pulumi.input_type
class TeamsRuleRuleSettingsCheckSessionArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 enforce: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] duration: Configure how fresh the session needs to be to be considered valid.
        :param pulumi.Input[bool] enforce: Enable session enforcement for this rule.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "enforce", enforce)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Configure how fresh the session needs to be to be considered valid.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Input[bool]:
        """
        Enable session enforcement for this rule.
        """
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enforce", value)


@pulumi.input_type
class TeamsRuleRuleSettingsL4overrideArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] ip: Override IP to forward traffic to.
        :param pulumi.Input[int] port: Override Port to forward traffic to.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        Override IP to forward traffic to.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Override Port to forward traffic to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkerScriptKvNamespaceBindingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 namespace_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The global variable for the binding in your Worker code.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The global variable for the binding in your Worker code.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)


@pulumi.input_type
class WorkerScriptPlainTextBindingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The global variable for the binding in your Worker code.
        :param pulumi.Input[str] text: The secret text you want to store.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The global variable for the binding in your Worker code.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The secret text you want to store.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class WorkerScriptSecretTextBindingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 text: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The global variable for the binding in your Worker code.
        :param pulumi.Input[str] text: The secret text you want to store.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The global variable for the binding in your Worker code.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The secret text you want to store.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class WorkerScriptWebassemblyBindingArgs:
    def __init__(__self__, *,
                 module: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] module: The base64 encoded wasm module you want to store.
        :param pulumi.Input[str] name: The global variable for the binding in your Worker code.
        """
        pulumi.set(__self__, "module", module)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def module(self) -> pulumi.Input[str]:
        """
        The base64 encoded wasm module you want to store.
        """
        return pulumi.get(self, "module")

    @module.setter
    def module(self, value: pulumi.Input[str]):
        pulumi.set(self, "module", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The global variable for the binding in your Worker code.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ZoneLockdownConfigurationArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] target: The request property to target. Allowed values: "ip", "ip_range"
        :param pulumi.Input[str] value: The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. `198.51.100.4` or `2001:db8::/32` and IP ranges in CIDR format i.e. `198.51.0.0/16`.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The request property to target. Allowed values: "ip", "ip_range"
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value to target. Depends on target's type. IP addresses should just be standard IPv4/IPv6 notation i.e. `198.51.100.4` or `2001:db8::/32` and IP ranges in CIDR format i.e. `198.51.0.0/16`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ZoneSettingsOverrideInitialSettingArgs:
    def __init__(__self__, *,
                 always_online: Optional[pulumi.Input[str]] = None,
                 always_use_https: Optional[pulumi.Input[str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[str]] = None,
                 binary_ast: Optional[pulumi.Input[str]] = None,
                 brotli: Optional[pulumi.Input[str]] = None,
                 browser_cache_ttl: Optional[pulumi.Input[int]] = None,
                 browser_check: Optional[pulumi.Input[str]] = None,
                 cache_level: Optional[pulumi.Input[str]] = None,
                 challenge_ttl: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cname_flattening: Optional[pulumi.Input[str]] = None,
                 development_mode: Optional[pulumi.Input[str]] = None,
                 early_hints: Optional[pulumi.Input[str]] = None,
                 email_obfuscation: Optional[pulumi.Input[str]] = None,
                 filter_logs_to_cloudflare: Optional[pulumi.Input[str]] = None,
                 h2_prioritization: Optional[pulumi.Input[str]] = None,
                 hotlink_protection: Optional[pulumi.Input[str]] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 http3: Optional[pulumi.Input[str]] = None,
                 image_resizing: Optional[pulumi.Input[str]] = None,
                 ip_geolocation: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 log_to_cloudflare: Optional[pulumi.Input[str]] = None,
                 max_upload: Optional[pulumi.Input[int]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 minify: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMinifyArgs']] = None,
                 mirage: Optional[pulumi.Input[str]] = None,
                 mobile_redirect: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMobileRedirectArgs']] = None,
                 opportunistic_encryption: Optional[pulumi.Input[str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[str]] = None,
                 orange_to_orange: Optional[pulumi.Input[str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[str]] = None,
                 polish: Optional[pulumi.Input[str]] = None,
                 prefetch_preload: Optional[pulumi.Input[str]] = None,
                 privacy_pass: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[str]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[str]] = None,
                 response_buffering: Optional[pulumi.Input[str]] = None,
                 rocket_loader: Optional[pulumi.Input[str]] = None,
                 security_header: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingSecurityHeaderArgs']] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 server_side_exclude: Optional[pulumi.Input[str]] = None,
                 sort_query_string_for_cache: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 tls12_only: Optional[pulumi.Input[str]] = None,
                 tls13: Optional[pulumi.Input[str]] = None,
                 tls_client_auth: Optional[pulumi.Input[str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[str]] = None,
                 universal_ssl: Optional[pulumi.Input[str]] = None,
                 visitor_ip: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 webp: Optional[pulumi.Input[str]] = None,
                 websockets: Optional[pulumi.Input[str]] = None,
                 zero_rtt: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cache_level: Allowed values: "aggressive" (default) - delivers a different resource each time the query string changes, "basic" - delivers resources from cache when there is no query string, "simplified" - delivers the same resource to everyone independent of the query string.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ciphers: An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
        :param pulumi.Input[str] cname_flattening: Allowed values: "flatten_at_root" (default), "flatten_all", "flatten_none".
        :param pulumi.Input[str] h2_prioritization: Allowed values: "on", "off" (default), "custom".
        :param pulumi.Input[str] image_resizing: Allowed values: "on", "off" (default), "open".
        :param pulumi.Input[str] min_tls_version: Allowed values: "1.0" (default), "1.1", "1.2", "1.3".
        :param pulumi.Input[str] polish: Allowed values: "off" (default), "lossless", "lossy".
        :param pulumi.Input[str] pseudo_ipv4: Allowed values: "off" (default), "add_header", "overwrite_header".
        :param pulumi.Input[str] security_level: Allowed values: "off" (Enterprise only), "essentially_off", "low", "medium" (default), "high", "under_attack".
        :param pulumi.Input[str] ssl: Allowed values: "off" (default), "flexible", "full", "strict", "origin_pull".
        :param pulumi.Input[str] tls13: Allowed values: "off" (default), "on", "zrt".
        :param pulumi.Input[str] webp: . Note that the value specified will be ignored unless `polish` is turned on (i.e. is "lossless" or "lossy")
        """
        if always_online is not None:
            pulumi.set(__self__, "always_online", always_online)
        if always_use_https is not None:
            pulumi.set(__self__, "always_use_https", always_use_https)
        if automatic_https_rewrites is not None:
            pulumi.set(__self__, "automatic_https_rewrites", automatic_https_rewrites)
        if binary_ast is not None:
            pulumi.set(__self__, "binary_ast", binary_ast)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if browser_cache_ttl is not None:
            pulumi.set(__self__, "browser_cache_ttl", browser_cache_ttl)
        if browser_check is not None:
            pulumi.set(__self__, "browser_check", browser_check)
        if cache_level is not None:
            pulumi.set(__self__, "cache_level", cache_level)
        if challenge_ttl is not None:
            pulumi.set(__self__, "challenge_ttl", challenge_ttl)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cname_flattening is not None:
            pulumi.set(__self__, "cname_flattening", cname_flattening)
        if development_mode is not None:
            pulumi.set(__self__, "development_mode", development_mode)
        if early_hints is not None:
            pulumi.set(__self__, "early_hints", early_hints)
        if email_obfuscation is not None:
            pulumi.set(__self__, "email_obfuscation", email_obfuscation)
        if filter_logs_to_cloudflare is not None:
            pulumi.set(__self__, "filter_logs_to_cloudflare", filter_logs_to_cloudflare)
        if h2_prioritization is not None:
            pulumi.set(__self__, "h2_prioritization", h2_prioritization)
        if hotlink_protection is not None:
            pulumi.set(__self__, "hotlink_protection", hotlink_protection)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if image_resizing is not None:
            pulumi.set(__self__, "image_resizing", image_resizing)
        if ip_geolocation is not None:
            pulumi.set(__self__, "ip_geolocation", ip_geolocation)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if log_to_cloudflare is not None:
            pulumi.set(__self__, "log_to_cloudflare", log_to_cloudflare)
        if max_upload is not None:
            pulumi.set(__self__, "max_upload", max_upload)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if minify is not None:
            pulumi.set(__self__, "minify", minify)
        if mirage is not None:
            pulumi.set(__self__, "mirage", mirage)
        if mobile_redirect is not None:
            pulumi.set(__self__, "mobile_redirect", mobile_redirect)
        if opportunistic_encryption is not None:
            pulumi.set(__self__, "opportunistic_encryption", opportunistic_encryption)
        if opportunistic_onion is not None:
            pulumi.set(__self__, "opportunistic_onion", opportunistic_onion)
        if orange_to_orange is not None:
            pulumi.set(__self__, "orange_to_orange", orange_to_orange)
        if origin_error_page_pass_thru is not None:
            pulumi.set(__self__, "origin_error_page_pass_thru", origin_error_page_pass_thru)
        if polish is not None:
            pulumi.set(__self__, "polish", polish)
        if prefetch_preload is not None:
            pulumi.set(__self__, "prefetch_preload", prefetch_preload)
        if privacy_pass is not None:
            pulumi.set(__self__, "privacy_pass", privacy_pass)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if pseudo_ipv4 is not None:
            pulumi.set(__self__, "pseudo_ipv4", pseudo_ipv4)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if rocket_loader is not None:
            pulumi.set(__self__, "rocket_loader", rocket_loader)
        if security_header is not None:
            pulumi.set(__self__, "security_header", security_header)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if server_side_exclude is not None:
            pulumi.set(__self__, "server_side_exclude", server_side_exclude)
        if sort_query_string_for_cache is not None:
            pulumi.set(__self__, "sort_query_string_for_cache", sort_query_string_for_cache)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if tls12_only is not None:
            warnings.warn("""tls_1_2_only has been deprecated in favour of using `min_tls_version = \"1.2\"` instead.""", DeprecationWarning)
            pulumi.log.warn("""tls12_only is deprecated: tls_1_2_only has been deprecated in favour of using `min_tls_version = \"1.2\"` instead.""")
        if tls12_only is not None:
            pulumi.set(__self__, "tls12_only", tls12_only)
        if tls13 is not None:
            pulumi.set(__self__, "tls13", tls13)
        if tls_client_auth is not None:
            pulumi.set(__self__, "tls_client_auth", tls_client_auth)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if universal_ssl is not None:
            pulumi.set(__self__, "universal_ssl", universal_ssl)
        if visitor_ip is not None:
            pulumi.set(__self__, "visitor_ip", visitor_ip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webp is not None:
            pulumi.set(__self__, "webp", webp)
        if websockets is not None:
            pulumi.set(__self__, "websockets", websockets)
        if zero_rtt is not None:
            pulumi.set(__self__, "zero_rtt", zero_rtt)

    @property
    @pulumi.getter(name="alwaysOnline")
    def always_online(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_online")

    @always_online.setter
    def always_online(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_online", value)

    @property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_use_https")

    @always_use_https.setter
    def always_use_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_use_https", value)

    @property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "automatic_https_rewrites")

    @automatic_https_rewrites.setter
    def automatic_https_rewrites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automatic_https_rewrites", value)

    @property
    @pulumi.getter(name="binaryAst")
    def binary_ast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binary_ast")

    @binary_ast.setter
    def binary_ast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_ast", value)

    @property
    @pulumi.getter
    def brotli(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brotli", value)

    @property
    @pulumi.getter(name="browserCacheTtl")
    def browser_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "browser_cache_ttl")

    @browser_cache_ttl.setter
    def browser_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "browser_cache_ttl", value)

    @property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "browser_check")

    @browser_check.setter
    def browser_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_check", value)

    @property
    @pulumi.getter(name="cacheLevel")
    def cache_level(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "aggressive" (default) - delivers a different resource each time the query string changes, "basic" - delivers resources from cache when there is no query string, "simplified" - delivers the same resource to everyone independent of the query string.
        """
        return pulumi.get(self, "cache_level")

    @cache_level.setter
    def cache_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_level", value)

    @property
    @pulumi.getter(name="challengeTtl")
    def challenge_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "challenge_ttl")

    @challenge_ttl.setter
    def challenge_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "challenge_ttl", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter(name="cnameFlattening")
    def cname_flattening(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "flatten_at_root" (default), "flatten_all", "flatten_none".
        """
        return pulumi.get(self, "cname_flattening")

    @cname_flattening.setter
    def cname_flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_flattening", value)

    @property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "development_mode")

    @development_mode.setter
    def development_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "development_mode", value)

    @property
    @pulumi.getter(name="earlyHints")
    def early_hints(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "early_hints")

    @early_hints.setter
    def early_hints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "early_hints", value)

    @property
    @pulumi.getter(name="emailObfuscation")
    def email_obfuscation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_obfuscation")

    @email_obfuscation.setter
    def email_obfuscation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_obfuscation", value)

    @property
    @pulumi.getter(name="filterLogsToCloudflare")
    def filter_logs_to_cloudflare(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_logs_to_cloudflare")

    @filter_logs_to_cloudflare.setter
    def filter_logs_to_cloudflare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_logs_to_cloudflare", value)

    @property
    @pulumi.getter(name="h2Prioritization")
    def h2_prioritization(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "on", "off" (default), "custom".
        """
        return pulumi.get(self, "h2_prioritization")

    @h2_prioritization.setter
    def h2_prioritization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_prioritization", value)

    @property
    @pulumi.getter(name="hotlinkProtection")
    def hotlink_protection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hotlink_protection")

    @hotlink_protection.setter
    def hotlink_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hotlink_protection", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter(name="imageResizing")
    def image_resizing(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "on", "off" (default), "open".
        """
        return pulumi.get(self, "image_resizing")

    @image_resizing.setter
    def image_resizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_resizing", value)

    @property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_geolocation")

    @ip_geolocation.setter
    def ip_geolocation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_geolocation", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="logToCloudflare")
    def log_to_cloudflare(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_to_cloudflare")

    @log_to_cloudflare.setter
    def log_to_cloudflare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_to_cloudflare", value)

    @property
    @pulumi.getter(name="maxUpload")
    def max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_upload")

    @max_upload.setter
    def max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_upload", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "1.0" (default), "1.1", "1.2", "1.3".
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter
    def minify(self) -> Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMinifyArgs']]:
        return pulumi.get(self, "minify")

    @minify.setter
    def minify(self, value: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMinifyArgs']]):
        pulumi.set(self, "minify", value)

    @property
    @pulumi.getter
    def mirage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mirage")

    @mirage.setter
    def mirage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirage", value)

    @property
    @pulumi.getter(name="mobileRedirect")
    def mobile_redirect(self) -> Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMobileRedirectArgs']]:
        return pulumi.get(self, "mobile_redirect")

    @mobile_redirect.setter
    def mobile_redirect(self, value: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingMobileRedirectArgs']]):
        pulumi.set(self, "mobile_redirect", value)

    @property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opportunistic_encryption")

    @opportunistic_encryption.setter
    def opportunistic_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opportunistic_encryption", value)

    @property
    @pulumi.getter(name="opportunisticOnion")
    def opportunistic_onion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opportunistic_onion")

    @opportunistic_onion.setter
    def opportunistic_onion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opportunistic_onion", value)

    @property
    @pulumi.getter(name="orangeToOrange")
    def orange_to_orange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orange_to_orange")

    @orange_to_orange.setter
    def orange_to_orange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orange_to_orange", value)

    @property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_error_page_pass_thru")

    @origin_error_page_pass_thru.setter
    def origin_error_page_pass_thru(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_error_page_pass_thru", value)

    @property
    @pulumi.getter
    def polish(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "lossless", "lossy".
        """
        return pulumi.get(self, "polish")

    @polish.setter
    def polish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polish", value)

    @property
    @pulumi.getter(name="prefetchPreload")
    def prefetch_preload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefetch_preload")

    @prefetch_preload.setter
    def prefetch_preload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefetch_preload", value)

    @property
    @pulumi.getter(name="privacyPass")
    def privacy_pass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "privacy_pass")

    @privacy_pass.setter
    def privacy_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_pass", value)

    @property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @property
    @pulumi.getter(name="pseudoIpv4")
    def pseudo_ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "add_header", "overwrite_header".
        """
        return pulumi.get(self, "pseudo_ipv4")

    @pseudo_ipv4.setter
    def pseudo_ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pseudo_ipv4", value)

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_buffering", value)

    @property
    @pulumi.getter(name="rocketLoader")
    def rocket_loader(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rocket_loader")

    @rocket_loader.setter
    def rocket_loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rocket_loader", value)

    @property
    @pulumi.getter(name="securityHeader")
    def security_header(self) -> Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingSecurityHeaderArgs']]:
        return pulumi.get(self, "security_header")

    @security_header.setter
    def security_header(self, value: Optional[pulumi.Input['ZoneSettingsOverrideInitialSettingSecurityHeaderArgs']]):
        pulumi.set(self, "security_header", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (Enterprise only), "essentially_off", "low", "medium" (default), "high", "under_attack".
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_exclude")

    @server_side_exclude.setter
    def server_side_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_exclude", value)

    @property
    @pulumi.getter(name="sortQueryStringForCache")
    def sort_query_string_for_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_query_string_for_cache")

    @sort_query_string_for_cache.setter
    def sort_query_string_for_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_query_string_for_cache", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "flexible", "full", "strict", "origin_pull".
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="tls12Only")
    def tls12_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls12_only")

    @tls12_only.setter
    def tls12_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls12_only", value)

    @property
    @pulumi.getter
    def tls13(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "on", "zrt".
        """
        return pulumi.get(self, "tls13")

    @tls13.setter
    def tls13(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls13", value)

    @property
    @pulumi.getter(name="tlsClientAuth")
    def tls_client_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_auth")

    @tls_client_auth.setter
    def tls_client_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_auth", value)

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "true_client_ip_header", value)

    @property
    @pulumi.getter(name="universalSsl")
    def universal_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "universal_ssl")

    @universal_ssl.setter
    def universal_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "universal_ssl", value)

    @property
    @pulumi.getter(name="visitorIp")
    def visitor_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visitor_ip")

    @visitor_ip.setter
    def visitor_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visitor_ip", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def webp(self) -> Optional[pulumi.Input[str]]:
        """
        . Note that the value specified will be ignored unless `polish` is turned on (i.e. is "lossless" or "lossy")
        """
        return pulumi.get(self, "webp")

    @webp.setter
    def webp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webp", value)

    @property
    @pulumi.getter
    def websockets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "websockets")

    @websockets.setter
    def websockets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websockets", value)

    @property
    @pulumi.getter(name="zeroRtt")
    def zero_rtt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_rtt")

    @zero_rtt.setter
    def zero_rtt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_rtt", value)


@pulumi.input_type
class ZoneSettingsOverrideInitialSettingMinifyArgs:
    def __init__(__self__, *,
                 css: pulumi.Input[str],
                 html: pulumi.Input[str],
                 js: pulumi.Input[str]):
        """
        :param pulumi.Input[str] css: "on"/"off"
        :param pulumi.Input[str] html: "on"/"off"
        :param pulumi.Input[str] js: "on"/"off"
        """
        pulumi.set(__self__, "css", css)
        pulumi.set(__self__, "html", html)
        pulumi.set(__self__, "js", js)

    @property
    @pulumi.getter
    def css(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "css")

    @css.setter
    def css(self, value: pulumi.Input[str]):
        pulumi.set(self, "css", value)

    @property
    @pulumi.getter
    def html(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: pulumi.Input[str]):
        pulumi.set(self, "html", value)

    @property
    @pulumi.getter
    def js(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "js")

    @js.setter
    def js(self, value: pulumi.Input[str]):
        pulumi.set(self, "js", value)


@pulumi.input_type
class ZoneSettingsOverrideInitialSettingMobileRedirectArgs:
    def __init__(__self__, *,
                 mobile_subdomain: pulumi.Input[str],
                 status: pulumi.Input[str],
                 strip_uri: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] mobile_subdomain: String value
        :param pulumi.Input[str] status: "on"/"off"
        :param pulumi.Input[bool] strip_uri: true/false
        """
        pulumi.set(__self__, "mobile_subdomain", mobile_subdomain)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "strip_uri", strip_uri)

    @property
    @pulumi.getter(name="mobileSubdomain")
    def mobile_subdomain(self) -> pulumi.Input[str]:
        """
        String value
        """
        return pulumi.get(self, "mobile_subdomain")

    @mobile_subdomain.setter
    def mobile_subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "mobile_subdomain", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stripUri")
    def strip_uri(self) -> pulumi.Input[bool]:
        """
        true/false
        """
        return pulumi.get(self, "strip_uri")

    @strip_uri.setter
    def strip_uri(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strip_uri", value)


@pulumi.input_type
class ZoneSettingsOverrideInitialSettingSecurityHeaderArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_subdomains: Optional[pulumi.Input[bool]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 nosniff: Optional[pulumi.Input[bool]] = None,
                 preload: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: true/false
        :param pulumi.Input[bool] include_subdomains: true/false
        :param pulumi.Input[int] max_age: Integer
        :param pulumi.Input[bool] nosniff: true/false
        :param pulumi.Input[bool] preload: true/false
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if include_subdomains is not None:
            pulumi.set(__self__, "include_subdomains", include_subdomains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if nosniff is not None:
            pulumi.set(__self__, "nosniff", nosniff)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="includeSubdomains")
    def include_subdomains(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "include_subdomains")

    @include_subdomains.setter
    def include_subdomains(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_subdomains", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Integer
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def nosniff(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "nosniff")

    @nosniff.setter
    def nosniff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nosniff", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preload", value)


@pulumi.input_type
class ZoneSettingsOverrideSettingsArgs:
    def __init__(__self__, *,
                 always_online: Optional[pulumi.Input[str]] = None,
                 always_use_https: Optional[pulumi.Input[str]] = None,
                 automatic_https_rewrites: Optional[pulumi.Input[str]] = None,
                 binary_ast: Optional[pulumi.Input[str]] = None,
                 brotli: Optional[pulumi.Input[str]] = None,
                 browser_cache_ttl: Optional[pulumi.Input[int]] = None,
                 browser_check: Optional[pulumi.Input[str]] = None,
                 cache_level: Optional[pulumi.Input[str]] = None,
                 challenge_ttl: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cname_flattening: Optional[pulumi.Input[str]] = None,
                 development_mode: Optional[pulumi.Input[str]] = None,
                 early_hints: Optional[pulumi.Input[str]] = None,
                 email_obfuscation: Optional[pulumi.Input[str]] = None,
                 filter_logs_to_cloudflare: Optional[pulumi.Input[str]] = None,
                 h2_prioritization: Optional[pulumi.Input[str]] = None,
                 hotlink_protection: Optional[pulumi.Input[str]] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 http3: Optional[pulumi.Input[str]] = None,
                 image_resizing: Optional[pulumi.Input[str]] = None,
                 ip_geolocation: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 log_to_cloudflare: Optional[pulumi.Input[str]] = None,
                 max_upload: Optional[pulumi.Input[int]] = None,
                 min_tls_version: Optional[pulumi.Input[str]] = None,
                 minify: Optional[pulumi.Input['ZoneSettingsOverrideSettingsMinifyArgs']] = None,
                 mirage: Optional[pulumi.Input[str]] = None,
                 mobile_redirect: Optional[pulumi.Input['ZoneSettingsOverrideSettingsMobileRedirectArgs']] = None,
                 opportunistic_encryption: Optional[pulumi.Input[str]] = None,
                 opportunistic_onion: Optional[pulumi.Input[str]] = None,
                 orange_to_orange: Optional[pulumi.Input[str]] = None,
                 origin_error_page_pass_thru: Optional[pulumi.Input[str]] = None,
                 polish: Optional[pulumi.Input[str]] = None,
                 prefetch_preload: Optional[pulumi.Input[str]] = None,
                 privacy_pass: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[str]] = None,
                 pseudo_ipv4: Optional[pulumi.Input[str]] = None,
                 response_buffering: Optional[pulumi.Input[str]] = None,
                 rocket_loader: Optional[pulumi.Input[str]] = None,
                 security_header: Optional[pulumi.Input['ZoneSettingsOverrideSettingsSecurityHeaderArgs']] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 server_side_exclude: Optional[pulumi.Input[str]] = None,
                 sort_query_string_for_cache: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 tls12_only: Optional[pulumi.Input[str]] = None,
                 tls13: Optional[pulumi.Input[str]] = None,
                 tls_client_auth: Optional[pulumi.Input[str]] = None,
                 true_client_ip_header: Optional[pulumi.Input[str]] = None,
                 universal_ssl: Optional[pulumi.Input[str]] = None,
                 visitor_ip: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 webp: Optional[pulumi.Input[str]] = None,
                 websockets: Optional[pulumi.Input[str]] = None,
                 zero_rtt: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cache_level: Allowed values: "aggressive" (default) - delivers a different resource each time the query string changes, "basic" - delivers resources from cache when there is no query string, "simplified" - delivers the same resource to everyone independent of the query string.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ciphers: An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
        :param pulumi.Input[str] cname_flattening: Allowed values: "flatten_at_root" (default), "flatten_all", "flatten_none".
        :param pulumi.Input[str] h2_prioritization: Allowed values: "on", "off" (default), "custom".
        :param pulumi.Input[str] image_resizing: Allowed values: "on", "off" (default), "open".
        :param pulumi.Input[str] min_tls_version: Allowed values: "1.0" (default), "1.1", "1.2", "1.3".
        :param pulumi.Input[str] polish: Allowed values: "off" (default), "lossless", "lossy".
        :param pulumi.Input[str] pseudo_ipv4: Allowed values: "off" (default), "add_header", "overwrite_header".
        :param pulumi.Input[str] security_level: Allowed values: "off" (Enterprise only), "essentially_off", "low", "medium" (default), "high", "under_attack".
        :param pulumi.Input[str] ssl: Allowed values: "off" (default), "flexible", "full", "strict", "origin_pull".
        :param pulumi.Input[str] tls13: Allowed values: "off" (default), "on", "zrt".
        :param pulumi.Input[str] webp: . Note that the value specified will be ignored unless `polish` is turned on (i.e. is "lossless" or "lossy")
        """
        if always_online is not None:
            pulumi.set(__self__, "always_online", always_online)
        if always_use_https is not None:
            pulumi.set(__self__, "always_use_https", always_use_https)
        if automatic_https_rewrites is not None:
            pulumi.set(__self__, "automatic_https_rewrites", automatic_https_rewrites)
        if binary_ast is not None:
            pulumi.set(__self__, "binary_ast", binary_ast)
        if brotli is not None:
            pulumi.set(__self__, "brotli", brotli)
        if browser_cache_ttl is not None:
            pulumi.set(__self__, "browser_cache_ttl", browser_cache_ttl)
        if browser_check is not None:
            pulumi.set(__self__, "browser_check", browser_check)
        if cache_level is not None:
            pulumi.set(__self__, "cache_level", cache_level)
        if challenge_ttl is not None:
            pulumi.set(__self__, "challenge_ttl", challenge_ttl)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cname_flattening is not None:
            pulumi.set(__self__, "cname_flattening", cname_flattening)
        if development_mode is not None:
            pulumi.set(__self__, "development_mode", development_mode)
        if early_hints is not None:
            pulumi.set(__self__, "early_hints", early_hints)
        if email_obfuscation is not None:
            pulumi.set(__self__, "email_obfuscation", email_obfuscation)
        if filter_logs_to_cloudflare is not None:
            pulumi.set(__self__, "filter_logs_to_cloudflare", filter_logs_to_cloudflare)
        if h2_prioritization is not None:
            pulumi.set(__self__, "h2_prioritization", h2_prioritization)
        if hotlink_protection is not None:
            pulumi.set(__self__, "hotlink_protection", hotlink_protection)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if http3 is not None:
            pulumi.set(__self__, "http3", http3)
        if image_resizing is not None:
            pulumi.set(__self__, "image_resizing", image_resizing)
        if ip_geolocation is not None:
            pulumi.set(__self__, "ip_geolocation", ip_geolocation)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if log_to_cloudflare is not None:
            pulumi.set(__self__, "log_to_cloudflare", log_to_cloudflare)
        if max_upload is not None:
            pulumi.set(__self__, "max_upload", max_upload)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if minify is not None:
            pulumi.set(__self__, "minify", minify)
        if mirage is not None:
            pulumi.set(__self__, "mirage", mirage)
        if mobile_redirect is not None:
            pulumi.set(__self__, "mobile_redirect", mobile_redirect)
        if opportunistic_encryption is not None:
            pulumi.set(__self__, "opportunistic_encryption", opportunistic_encryption)
        if opportunistic_onion is not None:
            pulumi.set(__self__, "opportunistic_onion", opportunistic_onion)
        if orange_to_orange is not None:
            pulumi.set(__self__, "orange_to_orange", orange_to_orange)
        if origin_error_page_pass_thru is not None:
            pulumi.set(__self__, "origin_error_page_pass_thru", origin_error_page_pass_thru)
        if polish is not None:
            pulumi.set(__self__, "polish", polish)
        if prefetch_preload is not None:
            pulumi.set(__self__, "prefetch_preload", prefetch_preload)
        if privacy_pass is not None:
            pulumi.set(__self__, "privacy_pass", privacy_pass)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if pseudo_ipv4 is not None:
            pulumi.set(__self__, "pseudo_ipv4", pseudo_ipv4)
        if response_buffering is not None:
            pulumi.set(__self__, "response_buffering", response_buffering)
        if rocket_loader is not None:
            pulumi.set(__self__, "rocket_loader", rocket_loader)
        if security_header is not None:
            pulumi.set(__self__, "security_header", security_header)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if server_side_exclude is not None:
            pulumi.set(__self__, "server_side_exclude", server_side_exclude)
        if sort_query_string_for_cache is not None:
            pulumi.set(__self__, "sort_query_string_for_cache", sort_query_string_for_cache)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if tls12_only is not None:
            warnings.warn("""tls_1_2_only has been deprecated in favour of using `min_tls_version = \"1.2\"` instead.""", DeprecationWarning)
            pulumi.log.warn("""tls12_only is deprecated: tls_1_2_only has been deprecated in favour of using `min_tls_version = \"1.2\"` instead.""")
        if tls12_only is not None:
            pulumi.set(__self__, "tls12_only", tls12_only)
        if tls13 is not None:
            pulumi.set(__self__, "tls13", tls13)
        if tls_client_auth is not None:
            pulumi.set(__self__, "tls_client_auth", tls_client_auth)
        if true_client_ip_header is not None:
            pulumi.set(__self__, "true_client_ip_header", true_client_ip_header)
        if universal_ssl is not None:
            pulumi.set(__self__, "universal_ssl", universal_ssl)
        if visitor_ip is not None:
            pulumi.set(__self__, "visitor_ip", visitor_ip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webp is not None:
            pulumi.set(__self__, "webp", webp)
        if websockets is not None:
            pulumi.set(__self__, "websockets", websockets)
        if zero_rtt is not None:
            pulumi.set(__self__, "zero_rtt", zero_rtt)

    @property
    @pulumi.getter(name="alwaysOnline")
    def always_online(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_online")

    @always_online.setter
    def always_online(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_online", value)

    @property
    @pulumi.getter(name="alwaysUseHttps")
    def always_use_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "always_use_https")

    @always_use_https.setter
    def always_use_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "always_use_https", value)

    @property
    @pulumi.getter(name="automaticHttpsRewrites")
    def automatic_https_rewrites(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "automatic_https_rewrites")

    @automatic_https_rewrites.setter
    def automatic_https_rewrites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automatic_https_rewrites", value)

    @property
    @pulumi.getter(name="binaryAst")
    def binary_ast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binary_ast")

    @binary_ast.setter
    def binary_ast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_ast", value)

    @property
    @pulumi.getter
    def brotli(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "brotli")

    @brotli.setter
    def brotli(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "brotli", value)

    @property
    @pulumi.getter(name="browserCacheTtl")
    def browser_cache_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "browser_cache_ttl")

    @browser_cache_ttl.setter
    def browser_cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "browser_cache_ttl", value)

    @property
    @pulumi.getter(name="browserCheck")
    def browser_check(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "browser_check")

    @browser_check.setter
    def browser_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_check", value)

    @property
    @pulumi.getter(name="cacheLevel")
    def cache_level(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "aggressive" (default) - delivers a different resource each time the query string changes, "basic" - delivers resources from cache when there is no query string, "simplified" - delivers the same resource to everyone independent of the query string.
        """
        return pulumi.get(self, "cache_level")

    @cache_level.setter
    def cache_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_level", value)

    @property
    @pulumi.getter(name="challengeTtl")
    def challenge_ttl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "challenge_ttl")

    @challenge_ttl.setter
    def challenge_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "challenge_ttl", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter(name="cnameFlattening")
    def cname_flattening(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "flatten_at_root" (default), "flatten_all", "flatten_none".
        """
        return pulumi.get(self, "cname_flattening")

    @cname_flattening.setter
    def cname_flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_flattening", value)

    @property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "development_mode")

    @development_mode.setter
    def development_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "development_mode", value)

    @property
    @pulumi.getter(name="earlyHints")
    def early_hints(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "early_hints")

    @early_hints.setter
    def early_hints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "early_hints", value)

    @property
    @pulumi.getter(name="emailObfuscation")
    def email_obfuscation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email_obfuscation")

    @email_obfuscation.setter
    def email_obfuscation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_obfuscation", value)

    @property
    @pulumi.getter(name="filterLogsToCloudflare")
    def filter_logs_to_cloudflare(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_logs_to_cloudflare")

    @filter_logs_to_cloudflare.setter
    def filter_logs_to_cloudflare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_logs_to_cloudflare", value)

    @property
    @pulumi.getter(name="h2Prioritization")
    def h2_prioritization(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "on", "off" (default), "custom".
        """
        return pulumi.get(self, "h2_prioritization")

    @h2_prioritization.setter
    def h2_prioritization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "h2_prioritization", value)

    @property
    @pulumi.getter(name="hotlinkProtection")
    def hotlink_protection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hotlink_protection")

    @hotlink_protection.setter
    def hotlink_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hotlink_protection", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter(name="imageResizing")
    def image_resizing(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "on", "off" (default), "open".
        """
        return pulumi.get(self, "image_resizing")

    @image_resizing.setter
    def image_resizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_resizing", value)

    @property
    @pulumi.getter(name="ipGeolocation")
    def ip_geolocation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_geolocation")

    @ip_geolocation.setter
    def ip_geolocation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_geolocation", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="logToCloudflare")
    def log_to_cloudflare(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_to_cloudflare")

    @log_to_cloudflare.setter
    def log_to_cloudflare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_to_cloudflare", value)

    @property
    @pulumi.getter(name="maxUpload")
    def max_upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_upload")

    @max_upload.setter
    def max_upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_upload", value)

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "1.0" (default), "1.1", "1.2", "1.3".
        """
        return pulumi.get(self, "min_tls_version")

    @min_tls_version.setter
    def min_tls_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tls_version", value)

    @property
    @pulumi.getter
    def minify(self) -> Optional[pulumi.Input['ZoneSettingsOverrideSettingsMinifyArgs']]:
        return pulumi.get(self, "minify")

    @minify.setter
    def minify(self, value: Optional[pulumi.Input['ZoneSettingsOverrideSettingsMinifyArgs']]):
        pulumi.set(self, "minify", value)

    @property
    @pulumi.getter
    def mirage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mirage")

    @mirage.setter
    def mirage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mirage", value)

    @property
    @pulumi.getter(name="mobileRedirect")
    def mobile_redirect(self) -> Optional[pulumi.Input['ZoneSettingsOverrideSettingsMobileRedirectArgs']]:
        return pulumi.get(self, "mobile_redirect")

    @mobile_redirect.setter
    def mobile_redirect(self, value: Optional[pulumi.Input['ZoneSettingsOverrideSettingsMobileRedirectArgs']]):
        pulumi.set(self, "mobile_redirect", value)

    @property
    @pulumi.getter(name="opportunisticEncryption")
    def opportunistic_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opportunistic_encryption")

    @opportunistic_encryption.setter
    def opportunistic_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opportunistic_encryption", value)

    @property
    @pulumi.getter(name="opportunisticOnion")
    def opportunistic_onion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "opportunistic_onion")

    @opportunistic_onion.setter
    def opportunistic_onion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "opportunistic_onion", value)

    @property
    @pulumi.getter(name="orangeToOrange")
    def orange_to_orange(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orange_to_orange")

    @orange_to_orange.setter
    def orange_to_orange(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orange_to_orange", value)

    @property
    @pulumi.getter(name="originErrorPagePassThru")
    def origin_error_page_pass_thru(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_error_page_pass_thru")

    @origin_error_page_pass_thru.setter
    def origin_error_page_pass_thru(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_error_page_pass_thru", value)

    @property
    @pulumi.getter
    def polish(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "lossless", "lossy".
        """
        return pulumi.get(self, "polish")

    @polish.setter
    def polish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "polish", value)

    @property
    @pulumi.getter(name="prefetchPreload")
    def prefetch_preload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefetch_preload")

    @prefetch_preload.setter
    def prefetch_preload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefetch_preload", value)

    @property
    @pulumi.getter(name="privacyPass")
    def privacy_pass(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "privacy_pass")

    @privacy_pass.setter
    def privacy_pass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privacy_pass", value)

    @property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @property
    @pulumi.getter(name="pseudoIpv4")
    def pseudo_ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "add_header", "overwrite_header".
        """
        return pulumi.get(self, "pseudo_ipv4")

    @pseudo_ipv4.setter
    def pseudo_ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pseudo_ipv4", value)

    @property
    @pulumi.getter(name="responseBuffering")
    def response_buffering(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_buffering")

    @response_buffering.setter
    def response_buffering(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_buffering", value)

    @property
    @pulumi.getter(name="rocketLoader")
    def rocket_loader(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rocket_loader")

    @rocket_loader.setter
    def rocket_loader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rocket_loader", value)

    @property
    @pulumi.getter(name="securityHeader")
    def security_header(self) -> Optional[pulumi.Input['ZoneSettingsOverrideSettingsSecurityHeaderArgs']]:
        return pulumi.get(self, "security_header")

    @security_header.setter
    def security_header(self, value: Optional[pulumi.Input['ZoneSettingsOverrideSettingsSecurityHeaderArgs']]):
        pulumi.set(self, "security_header", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (Enterprise only), "essentially_off", "low", "medium" (default), "high", "under_attack".
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="serverSideExclude")
    def server_side_exclude(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_exclude")

    @server_side_exclude.setter
    def server_side_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_exclude", value)

    @property
    @pulumi.getter(name="sortQueryStringForCache")
    def sort_query_string_for_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort_query_string_for_cache")

    @sort_query_string_for_cache.setter
    def sort_query_string_for_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_query_string_for_cache", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "flexible", "full", "strict", "origin_pull".
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="tls12Only")
    def tls12_only(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls12_only")

    @tls12_only.setter
    def tls12_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls12_only", value)

    @property
    @pulumi.getter
    def tls13(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed values: "off" (default), "on", "zrt".
        """
        return pulumi.get(self, "tls13")

    @tls13.setter
    def tls13(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls13", value)

    @property
    @pulumi.getter(name="tlsClientAuth")
    def tls_client_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_auth")

    @tls_client_auth.setter
    def tls_client_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_auth", value)

    @property
    @pulumi.getter(name="trueClientIpHeader")
    def true_client_ip_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "true_client_ip_header")

    @true_client_ip_header.setter
    def true_client_ip_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "true_client_ip_header", value)

    @property
    @pulumi.getter(name="universalSsl")
    def universal_ssl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "universal_ssl")

    @universal_ssl.setter
    def universal_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "universal_ssl", value)

    @property
    @pulumi.getter(name="visitorIp")
    def visitor_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visitor_ip")

    @visitor_ip.setter
    def visitor_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visitor_ip", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def webp(self) -> Optional[pulumi.Input[str]]:
        """
        . Note that the value specified will be ignored unless `polish` is turned on (i.e. is "lossless" or "lossy")
        """
        return pulumi.get(self, "webp")

    @webp.setter
    def webp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webp", value)

    @property
    @pulumi.getter
    def websockets(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "websockets")

    @websockets.setter
    def websockets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "websockets", value)

    @property
    @pulumi.getter(name="zeroRtt")
    def zero_rtt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zero_rtt")

    @zero_rtt.setter
    def zero_rtt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_rtt", value)


@pulumi.input_type
class ZoneSettingsOverrideSettingsMinifyArgs:
    def __init__(__self__, *,
                 css: pulumi.Input[str],
                 html: pulumi.Input[str],
                 js: pulumi.Input[str]):
        """
        :param pulumi.Input[str] css: "on"/"off"
        :param pulumi.Input[str] html: "on"/"off"
        :param pulumi.Input[str] js: "on"/"off"
        """
        pulumi.set(__self__, "css", css)
        pulumi.set(__self__, "html", html)
        pulumi.set(__self__, "js", js)

    @property
    @pulumi.getter
    def css(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "css")

    @css.setter
    def css(self, value: pulumi.Input[str]):
        pulumi.set(self, "css", value)

    @property
    @pulumi.getter
    def html(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "html")

    @html.setter
    def html(self, value: pulumi.Input[str]):
        pulumi.set(self, "html", value)

    @property
    @pulumi.getter
    def js(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "js")

    @js.setter
    def js(self, value: pulumi.Input[str]):
        pulumi.set(self, "js", value)


@pulumi.input_type
class ZoneSettingsOverrideSettingsMobileRedirectArgs:
    def __init__(__self__, *,
                 mobile_subdomain: pulumi.Input[str],
                 status: pulumi.Input[str],
                 strip_uri: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] mobile_subdomain: String value
        :param pulumi.Input[str] status: "on"/"off"
        :param pulumi.Input[bool] strip_uri: true/false
        """
        pulumi.set(__self__, "mobile_subdomain", mobile_subdomain)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "strip_uri", strip_uri)

    @property
    @pulumi.getter(name="mobileSubdomain")
    def mobile_subdomain(self) -> pulumi.Input[str]:
        """
        String value
        """
        return pulumi.get(self, "mobile_subdomain")

    @mobile_subdomain.setter
    def mobile_subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "mobile_subdomain", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        "on"/"off"
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stripUri")
    def strip_uri(self) -> pulumi.Input[bool]:
        """
        true/false
        """
        return pulumi.get(self, "strip_uri")

    @strip_uri.setter
    def strip_uri(self, value: pulumi.Input[bool]):
        pulumi.set(self, "strip_uri", value)


@pulumi.input_type
class ZoneSettingsOverrideSettingsSecurityHeaderArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 include_subdomains: Optional[pulumi.Input[bool]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 nosniff: Optional[pulumi.Input[bool]] = None,
                 preload: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: true/false
        :param pulumi.Input[bool] include_subdomains: true/false
        :param pulumi.Input[int] max_age: Integer
        :param pulumi.Input[bool] nosniff: true/false
        :param pulumi.Input[bool] preload: true/false
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if include_subdomains is not None:
            pulumi.set(__self__, "include_subdomains", include_subdomains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if nosniff is not None:
            pulumi.set(__self__, "nosniff", nosniff)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="includeSubdomains")
    def include_subdomains(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "include_subdomains")

    @include_subdomains.setter
    def include_subdomains(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_subdomains", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Integer
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def nosniff(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "nosniff")

    @nosniff.setter
    def nosniff(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nosniff", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[pulumi.Input[bool]]:
        """
        true/false
        """
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preload", value)


@pulumi.input_type
class GetWafGroupsFilterArgs:
    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str mode: Mode of the WAF Rule Groups to lookup. Valid values: on and off.
        :param str name: A regular expression matching the name of the WAF Rule Groups to lookup.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode of the WAF Rule Groups to lookup. Valid values: on and off.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A regular expression matching the name of the WAF Rule Groups to lookup.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetWafPackagesFilterArgs:
    def __init__(__self__, *,
                 action_mode: Optional[str] = None,
                 detection_mode: Optional[str] = None,
                 name: Optional[str] = None,
                 sensitivity: Optional[str] = None):
        """
        :param str action_mode: Action mode of the WAF Rule Packages to lookup. Valid values: simulate, block and challenge.
        :param str detection_mode: Detection mode of the WAF Rule Packages to lookup.
        :param str name: A regular expression matching the name of the WAF Rule Packages to lookup.
        :param str sensitivity: Sensitivity of the WAF Rule Packages to lookup. Valid values: high, medium, low and off.
        """
        if action_mode is not None:
            pulumi.set(__self__, "action_mode", action_mode)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sensitivity is not None:
            pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="actionMode")
    def action_mode(self) -> Optional[str]:
        """
        Action mode of the WAF Rule Packages to lookup. Valid values: simulate, block and challenge.
        """
        return pulumi.get(self, "action_mode")

    @action_mode.setter
    def action_mode(self, value: Optional[str]):
        pulumi.set(self, "action_mode", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[str]:
        """
        Detection mode of the WAF Rule Packages to lookup.
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[str]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A regular expression matching the name of the WAF Rule Packages to lookup.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> Optional[str]:
        """
        Sensitivity of the WAF Rule Packages to lookup. Valid values: high, medium, low and off.
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: Optional[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class GetWafRulesFilterArgs:
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 group_id: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str description: A regular expression matching the description of the WAF Rules to lookup.
        :param str group_id: The ID of the WAF Rule Group in which the WAF Rules to lookup have to be.
        :param str mode: Mode of the WAF Rules to lookup. Valid values: one of ["block", "challenge", "default", "disable", "simulate"] or ["on", "off"] depending on the WAF Rule type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A regular expression matching the description of the WAF Rules to lookup.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        The ID of the WAF Rule Group in which the WAF Rules to lookup have to be.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode of the WAF Rules to lookup. Valid values: one of ["block", "challenge", "default", "disable", "simulate"] or ["on", "off"] depending on the WAF Rule type.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class GetZonesFilterArgs:
    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 lookup_type: Optional[str] = None,
                 match: Optional[str] = None,
                 name: Optional[str] = None,
                 paused: Optional[bool] = None,
                 status: Optional[str] = None):
        """
        :param str account_id: Only search for zones in this account.
        :param str lookup_type: The type of search to perform for the `name` value
               when querying the zone API. Valid values: `"exact"` and `"contains"`. Defaults
               to `"exact"`.
        :param str match: A RE2 compatible regular expression to filter the
               results. This is performed client side whereas the `name` and `lookup_type`
               are performed on the Cloudflare server side.
        :param str name: A string value to search for.
        :param bool paused: Paused status of the zone to lookup. Valid values are
               `true` or `false`.
        :param str status: Status of the zone to lookup. Valid values: `"active"`,
               `"pending"`, `"initializing"`, `"moved"`, `"deleted"`, `"deactivated"` and
               `"read only"`.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if lookup_type is not None:
            pulumi.set(__self__, "lookup_type", lookup_type)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        Only search for zones in this account.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="lookupType")
    def lookup_type(self) -> Optional[str]:
        """
        The type of search to perform for the `name` value
        when querying the zone API. Valid values: `"exact"` and `"contains"`. Defaults
        to `"exact"`.
        """
        return pulumi.get(self, "lookup_type")

    @lookup_type.setter
    def lookup_type(self, value: Optional[str]):
        pulumi.set(self, "lookup_type", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[str]:
        """
        A RE2 compatible regular expression to filter the
        results. This is performed client side whereas the `name` and `lookup_type`
        are performed on the Cloudflare server side.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A string value to search for.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[bool]:
        """
        Paused status of the zone to lookup. Valid values are
        `true` or `false`.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[bool]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status of the zone to lookup. Valid values: `"active"`,
        `"pending"`, `"initializing"`, `"moved"`, `"deleted"`, `"deactivated"` and
        `"read only"`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[str]):
        pulumi.set(self, "status", value)


