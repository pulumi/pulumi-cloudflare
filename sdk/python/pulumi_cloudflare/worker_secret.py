# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WorkerSecretArgs', 'WorkerSecret']

@pulumi.input_type
class WorkerSecretArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 dispatch_namespace: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 script_name: pulumi.Input[builtins.str],
                 text: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a WorkerSecret resource.
        :param pulumi.Input[builtins.str] account_id: Identifier
        :param pulumi.Input[builtins.str] dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.str] name: The name of this secret, this is what will be used to access it inside the Worker.
        :param pulumi.Input[builtins.str] script_name: Name of the script, used in URLs and route configuration.
        :param pulumi.Input[builtins.str] text: The value of the secret.
        :param pulumi.Input[builtins.str] type: The type of secret to put.
               Available values: "secret_text".
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "dispatch_namespace", dispatch_namespace)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "script_name", script_name)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="dispatchNamespace")
    def dispatch_namespace(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "dispatch_namespace")

    @dispatch_namespace.setter
    def dispatch_namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "dispatch_namespace", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The name of this secret, this is what will be used to access it inside the Worker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> pulumi.Input[builtins.str]:
        """
        Name of the script, used in URLs and route configuration.
        """
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "script_name", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of secret to put.
        Available values: "secret_text".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _WorkerSecretState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 dispatch_namespace: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 script_name: Optional[pulumi.Input[builtins.str]] = None,
                 text: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering WorkerSecret resources.
        :param pulumi.Input[builtins.str] account_id: Identifier
        :param pulumi.Input[builtins.str] dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.str] name: The name of this secret, this is what will be used to access it inside the Worker.
        :param pulumi.Input[builtins.str] script_name: Name of the script, used in URLs and route configuration.
        :param pulumi.Input[builtins.str] text: The value of the secret.
        :param pulumi.Input[builtins.str] type: The type of secret to put.
               Available values: "secret_text".
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if dispatch_namespace is not None:
            pulumi.set(__self__, "dispatch_namespace", dispatch_namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if script_name is not None:
            pulumi.set(__self__, "script_name", script_name)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="dispatchNamespace")
    def dispatch_namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "dispatch_namespace")

    @dispatch_namespace.setter
    def dispatch_namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dispatch_namespace", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of this secret, this is what will be used to access it inside the Worker.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the script, used in URLs and route configuration.
        """
        return pulumi.get(self, "script_name")

    @script_name.setter
    def script_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "script_name", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of secret to put.
        Available values: "secret_text".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


warnings.warn("""cloudflare.index/workersecret.WorkerSecret has been deprecated in favor of cloudflare.index/workerssecret.WorkersSecret""", DeprecationWarning)


class WorkerSecret(pulumi.CustomResource):
    warnings.warn("""cloudflare.index/workersecret.WorkerSecret has been deprecated in favor of cloudflare.index/workerssecret.WorkersSecret""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 dispatch_namespace: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 script_name: Optional[pulumi.Input[builtins.str]] = None,
                 text: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workers_secret = cloudflare.WorkersSecret("example_workers_secret",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            dispatch_namespace="my-dispatch-namespace",
            script_name="this-is_my_script-01",
            name="MY_SECRET",
            text="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
            type="secret_text")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workerSecret:WorkerSecret example '<account_id>/<dispatch_namespace>/<script_name>/<secret_name>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: Identifier
        :param pulumi.Input[builtins.str] dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.str] name: The name of this secret, this is what will be used to access it inside the Worker.
        :param pulumi.Input[builtins.str] script_name: Name of the script, used in URLs and route configuration.
        :param pulumi.Input[builtins.str] text: The value of the secret.
        :param pulumi.Input[builtins.str] type: The type of secret to put.
               Available values: "secret_text".
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkerSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workers_secret = cloudflare.WorkersSecret("example_workers_secret",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            dispatch_namespace="my-dispatch-namespace",
            script_name="this-is_my_script-01",
            name="MY_SECRET",
            text="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
            type="secret_text")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workerSecret:WorkerSecret example '<account_id>/<dispatch_namespace>/<script_name>/<secret_name>'
        ```

        :param str resource_name: The name of the resource.
        :param WorkerSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkerSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 dispatch_namespace: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 script_name: Optional[pulumi.Input[builtins.str]] = None,
                 text: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        pulumi.log.warn("""WorkerSecret is deprecated: cloudflare.index/workersecret.WorkerSecret has been deprecated in favor of cloudflare.index/workerssecret.WorkersSecret""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkerSecretArgs.__new__(WorkerSecretArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if dispatch_namespace is None and not opts.urn:
                raise TypeError("Missing required property 'dispatch_namespace'")
            __props__.__dict__["dispatch_namespace"] = dispatch_namespace
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if script_name is None and not opts.urn:
                raise TypeError("Missing required property 'script_name'")
            __props__.__dict__["script_name"] = script_name
            __props__.__dict__["text"] = None if text is None else pulumi.Output.secret(text)
            __props__.__dict__["type"] = type
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="cloudflare:index/workerSecret:WorkerSecret")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["text"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(WorkerSecret, __self__).__init__(
            'cloudflare:index/workerSecret:WorkerSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            dispatch_namespace: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            script_name: Optional[pulumi.Input[builtins.str]] = None,
            text: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'WorkerSecret':
        """
        Get an existing WorkerSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: Identifier
        :param pulumi.Input[builtins.str] dispatch_namespace: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.str] name: The name of this secret, this is what will be used to access it inside the Worker.
        :param pulumi.Input[builtins.str] script_name: Name of the script, used in URLs and route configuration.
        :param pulumi.Input[builtins.str] text: The value of the secret.
        :param pulumi.Input[builtins.str] type: The type of secret to put.
               Available values: "secret_text".
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkerSecretState.__new__(_WorkerSecretState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["dispatch_namespace"] = dispatch_namespace
        __props__.__dict__["name"] = name
        __props__.__dict__["script_name"] = script_name
        __props__.__dict__["text"] = text
        __props__.__dict__["type"] = type
        return WorkerSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="dispatchNamespace")
    def dispatch_namespace(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "dispatch_namespace")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of this secret, this is what will be used to access it inside the Worker.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the script, used in URLs and route configuration.
        """
        return pulumi.get(self, "script_name")

    @property
    @pulumi.getter
    def text(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The value of the secret.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The type of secret to put.
        Available values: "secret_text".
        """
        return pulumi.get(self, "type")

