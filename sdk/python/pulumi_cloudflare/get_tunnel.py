# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTunnelResult',
    'AwaitableGetTunnelResult',
    'get_tunnel',
    'get_tunnel_output',
]

@pulumi.output_type
class GetTunnelResult:
    """
    A collection of values returned by getTunnel.
    """
    def __init__(__self__, account_id=None, id=None, name=None, remote_config=None, status=None, tunnel_type=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if remote_config and not isinstance(remote_config, bool):
            raise TypeError("Expected argument 'remote_config' to be a bool")
        pulumi.set(__self__, "remote_config", remote_config)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tunnel_type and not isinstance(tunnel_type, str):
            raise TypeError("Expected argument 'tunnel_type' to be a str")
        pulumi.set(__self__, "tunnel_type", tunnel_type)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the tunnel.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="remoteConfig")
    def remote_config(self) -> bool:
        """
        Whether the tunnel can be configured remotely from the Zero Trust dashboard.
        """
        return pulumi.get(self, "remote_config")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the tunnel. Available values: `inactive`, `degraded`, `healthy`, `down`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tunnelType")
    def tunnel_type(self) -> str:
        """
        The type of the tunnel. Available values: `cfd_tunnel`, `warp_connector`.
        """
        return pulumi.get(self, "tunnel_type")


class AwaitableGetTunnelResult(GetTunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTunnelResult(
            account_id=self.account_id,
            id=self.id,
            name=self.name,
            remote_config=self.remote_config,
            status=self.status,
            tunnel_type=self.tunnel_type)


def get_tunnel(account_id: Optional[str] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTunnelResult:
    """
    Use this datasource to lookup a tunnel in an account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example = cloudflare.get_tunnel(account_id="f037e56e89293a057740de681ac9abbe",
        name="my-tunnel")
    ```


    :param str account_id: The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
    :param str name: Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getTunnel:getTunnel', __args__, opts=opts, typ=GetTunnelResult).value

    return AwaitableGetTunnelResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        remote_config=pulumi.get(__ret__, 'remote_config'),
        status=pulumi.get(__ret__, 'status'),
        tunnel_type=pulumi.get(__ret__, 'tunnel_type'))


@_utilities.lift_output_func(get_tunnel)
def get_tunnel_output(account_id: Optional[pulumi.Input[str]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTunnelResult]:
    """
    Use this datasource to lookup a tunnel in an account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example = cloudflare.get_tunnel(account_id="f037e56e89293a057740de681ac9abbe",
        name="my-tunnel")
    ```


    :param str account_id: The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
    :param str name: Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
    """
    ...
