# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['StreamWebhookArgs', 'StreamWebhook']

@pulumi.input_type
class StreamWebhookArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 notification_url: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a StreamWebhook resource.
        :param pulumi.Input[builtins.str] account_id: The account identifier tag.
        :param pulumi.Input[builtins.str] notification_url: The URL where webhooks will be sent.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "notification_url", notification_url)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        """
        The account identifier tag.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> pulumi.Input[builtins.str]:
        """
        The URL where webhooks will be sent.
        """
        return pulumi.get(self, "notification_url")

    @notification_url.setter
    def notification_url(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "notification_url", value)


@pulumi.input_type
class _StreamWebhookState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 notification_url: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering StreamWebhook resources.
        :param pulumi.Input[builtins.str] account_id: The account identifier tag.
        :param pulumi.Input[builtins.str] notification_url: The URL where webhooks will be sent.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if notification_url is not None:
            pulumi.set(__self__, "notification_url", notification_url)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The account identifier tag.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URL where webhooks will be sent.
        """
        return pulumi.get(self, "notification_url")

    @notification_url.setter
    def notification_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "notification_url", value)


class StreamWebhook(pulumi.CustomResource):

    pulumi_type = "cloudflare:index/streamWebhook:StreamWebhook"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 notification_url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_stream_webhook = cloudflare.StreamWebhook("example_stream_webhook",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            notification_url="https://example.com")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The account identifier tag.
        :param pulumi.Input[builtins.str] notification_url: The URL where webhooks will be sent.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamWebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_stream_webhook = cloudflare.StreamWebhook("example_stream_webhook",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            notification_url="https://example.com")
        ```

        :param str resource_name: The name of the resource.
        :param StreamWebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamWebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 notification_url: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamWebhookArgs.__new__(StreamWebhookArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if notification_url is None and not opts.urn:
                raise TypeError("Missing required property 'notification_url'")
            __props__.__dict__["notification_url"] = notification_url
        super(StreamWebhook, __self__).__init__(
            'cloudflare:index/streamWebhook:StreamWebhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            notification_url: Optional[pulumi.Input[builtins.str]] = None) -> 'StreamWebhook':
        """
        Get an existing StreamWebhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The account identifier tag.
        :param pulumi.Input[builtins.str] notification_url: The URL where webhooks will be sent.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamWebhookState.__new__(_StreamWebhookState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["notification_url"] = notification_url
        return StreamWebhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        The account identifier tag.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> pulumi.Output[builtins.str]:
        """
        The URL where webhooks will be sent.
        """
        return pulumi.get(self, "notification_url")

