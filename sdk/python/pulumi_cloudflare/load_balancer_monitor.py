# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class LoadBalancerMonitor(pulumi.CustomResource):
    allow_insecure: pulumi.Output[bool]
    """
    Do not validate the certificate when monitor use HTTPS.
    """
    created_on: pulumi.Output[str]
    """
    The RFC3339 timestamp of when the load balancer monitor was created.
    """
    description: pulumi.Output[str]
    """
    Free text description.
    """
    expected_body: pulumi.Output[str]
    """
    A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
    """
    expected_codes: pulumi.Output[str]
    """
    The expected HTTP response code or code range of the health check. Eg `2xx`
    """
    follow_redirects: pulumi.Output[bool]
    """
    Follow redirects if returned by the origin.
    """
    headers: pulumi.Output[list]
    """
    The header name.
    """
    interval: pulumi.Output[float]
    """
    The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Default: 60.
    """
    method: pulumi.Output[str]
    """
    The HTTP method to use for the health check. Default: "GET".
    """
    modified_on: pulumi.Output[str]
    """
    The RFC3339 timestamp of when the load balancer monitor was last modified.
    """
    path: pulumi.Output[str]
    """
    The endpoint path to health check against. Default: "/".
    """
    port: pulumi.Output[float]
    retries: pulumi.Output[float]
    """
    The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Default: 2.
    """
    timeout: pulumi.Output[float]
    """
    The timeout (in seconds) before marking the health check as failed. Default: 5.
    """
    type: pulumi.Output[str]
    """
    The protocol to use for the healthcheck. Currently supported protocols are 'HTTP' and 'HTTPS'. Default: "http".
    """
    def __init__(__self__, resource_name, opts=None, allow_insecure=None, description=None, expected_body=None, expected_codes=None, follow_redirects=None, headers=None, interval=None, method=None, path=None, port=None, retries=None, timeout=None, type=None, __name__=None, __opts__=None):
        """
        If you're using Cloudflare's Load Balancing to load-balance across multiple origin servers or data centers, you configure one of these Monitors to actively check the availability of those servers over HTTP(S).
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_insecure: Do not validate the certificate when monitor use HTTPS.
        :param pulumi.Input[str] description: Free text description.
        :param pulumi.Input[str] expected_body: A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
        :param pulumi.Input[str] expected_codes: The expected HTTP response code or code range of the health check. Eg `2xx`
        :param pulumi.Input[bool] follow_redirects: Follow redirects if returned by the origin.
        :param pulumi.Input[list] headers: The header name.
        :param pulumi.Input[float] interval: The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations. Default: 60.
        :param pulumi.Input[str] method: The HTTP method to use for the health check. Default: "GET".
        :param pulumi.Input[str] path: The endpoint path to health check against. Default: "/".
        :param pulumi.Input[float] retries: The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately. Default: 2.
        :param pulumi.Input[float] timeout: The timeout (in seconds) before marking the health check as failed. Default: 5.
        :param pulumi.Input[str] type: The protocol to use for the healthcheck. Currently supported protocols are 'HTTP' and 'HTTPS'. Default: "http".
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allow_insecure'] = allow_insecure

        __props__['description'] = description

        if expected_body is None:
            raise TypeError("Missing required property 'expected_body'")
        __props__['expected_body'] = expected_body

        if expected_codes is None:
            raise TypeError("Missing required property 'expected_codes'")
        __props__['expected_codes'] = expected_codes

        __props__['follow_redirects'] = follow_redirects

        __props__['headers'] = headers

        __props__['interval'] = interval

        __props__['method'] = method

        __props__['path'] = path

        __props__['port'] = port

        __props__['retries'] = retries

        __props__['timeout'] = timeout

        __props__['type'] = type

        __props__['created_on'] = None
        __props__['modified_on'] = None

        super(LoadBalancerMonitor, __self__).__init__(
            'cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

