# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetIpRangesResult:
    """
    A collection of values returned by getIpRanges.
    """
    def __init__(__self__, cidr_blocks=None, id=None, ipv4_cidr_blocks=None, ipv6_cidr_blocks=None):
        if cidr_blocks and not isinstance(cidr_blocks, list):
            raise TypeError("Expected argument 'cidr_blocks' to be a list")
        __self__.cidr_blocks = cidr_blocks
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if ipv4_cidr_blocks and not isinstance(ipv4_cidr_blocks, list):
            raise TypeError("Expected argument 'ipv4_cidr_blocks' to be a list")
        __self__.ipv4_cidr_blocks = ipv4_cidr_blocks
        if ipv6_cidr_blocks and not isinstance(ipv6_cidr_blocks, list):
            raise TypeError("Expected argument 'ipv6_cidr_blocks' to be a list")
        __self__.ipv6_cidr_blocks = ipv6_cidr_blocks
class AwaitableGetIpRangesResult(GetIpRangesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIpRangesResult(
            cidr_blocks=self.cidr_blocks,
            id=self.id,
            ipv4_cidr_blocks=self.ipv4_cidr_blocks,
            ipv6_cidr_blocks=self.ipv6_cidr_blocks)

def get_ip_ranges(opts=None):
    """
    Use this data source to get the [IP ranges](https://www.cloudflare.com/ips/) of Cloudflare edge nodes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare
    import pulumi_gcp as gcp

    cloudflare = cloudflare.get_ip_ranges()
    allow_cloudflare_ingress = gcp.compute.Firewall("allowCloudflareIngress",
        network="default",
        source_ranges=cloudflare.ipv4_cidr_blocks,
        allows=[{
            "ports": "443",
            "protocol": "tcp",
        }])
    ```
    """
    __args__ = dict()


    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getIpRanges:getIpRanges', __args__, opts=opts).value

    return AwaitableGetIpRangesResult(
        cidr_blocks=__ret__.get('cidrBlocks'),
        id=__ret__.get('id'),
        ipv4_cidr_blocks=__ret__.get('ipv4CidrBlocks'),
        ipv6_cidr_blocks=__ret__.get('ipv6CidrBlocks'))
