# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ZeroTrustGatewayCertificateArgs', 'ZeroTrustGatewayCertificate']

@pulumi.input_type
class ZeroTrustGatewayCertificateArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 validity_period_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a ZeroTrustGatewayCertificate resource.
        :param pulumi.Input[builtins.int] validity_period_days: Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        pulumi.set(__self__, "account_id", account_id)
        if validity_period_days is not None:
            pulumi.set(__self__, "validity_period_days", validity_period_days)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="validityPeriodDays")
    def validity_period_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        return pulumi.get(self, "validity_period_days")

    @validity_period_days.setter
    def validity_period_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "validity_period_days", value)


@pulumi.input_type
class _ZeroTrustGatewayCertificateState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 binding_status: Optional[pulumi.Input[builtins.str]] = None,
                 certificate: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 expires_on: Optional[pulumi.Input[builtins.str]] = None,
                 fingerprint: Optional[pulumi.Input[builtins.str]] = None,
                 in_use: Optional[pulumi.Input[builtins.bool]] = None,
                 issuer_org: Optional[pulumi.Input[builtins.str]] = None,
                 issuer_raw: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None,
                 uploaded_on: Optional[pulumi.Input[builtins.str]] = None,
                 validity_period_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering ZeroTrustGatewayCertificate resources.
        :param pulumi.Input[builtins.str] binding_status: The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
               Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        :param pulumi.Input[builtins.str] certificate: The CA certificate
        :param pulumi.Input[builtins.str] fingerprint: The SHA256 fingerprint of the certificate.
        :param pulumi.Input[builtins.bool] in_use: Use this certificate for Gateway TLS interception
        :param pulumi.Input[builtins.str] issuer_org: The organization that issued the certificate.
        :param pulumi.Input[builtins.str] issuer_raw: The entire issuer field of the certificate.
        :param pulumi.Input[builtins.str] type: The type of certificate, either BYO-PKI (custom) or Gateway-managed.
               Available values: "custom", "gateway_managed".
        :param pulumi.Input[builtins.int] validity_period_days: Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if binding_status is not None:
            pulumi.set(__self__, "binding_status", binding_status)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expires_on is not None:
            pulumi.set(__self__, "expires_on", expires_on)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)
        if in_use is not None:
            pulumi.set(__self__, "in_use", in_use)
        if issuer_org is not None:
            pulumi.set(__self__, "issuer_org", issuer_org)
        if issuer_raw is not None:
            pulumi.set(__self__, "issuer_raw", issuer_raw)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if uploaded_on is not None:
            pulumi.set(__self__, "uploaded_on", uploaded_on)
        if validity_period_days is not None:
            pulumi.set(__self__, "validity_period_days", validity_period_days)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="bindingStatus")
    def binding_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
        Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        """
        return pulumi.get(self, "binding_status")

    @binding_status.setter
    def binding_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "binding_status", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The CA certificate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "expires_on")

    @expires_on.setter
    def expires_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expires_on", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The SHA256 fingerprint of the certificate.
        """
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fingerprint", value)

    @property
    @pulumi.getter(name="inUse")
    def in_use(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Use this certificate for Gateway TLS interception
        """
        return pulumi.get(self, "in_use")

    @in_use.setter
    def in_use(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "in_use", value)

    @property
    @pulumi.getter(name="issuerOrg")
    def issuer_org(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The organization that issued the certificate.
        """
        return pulumi.get(self, "issuer_org")

    @issuer_org.setter
    def issuer_org(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "issuer_org", value)

    @property
    @pulumi.getter(name="issuerRaw")
    def issuer_raw(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The entire issuer field of the certificate.
        """
        return pulumi.get(self, "issuer_raw")

    @issuer_raw.setter
    def issuer_raw(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "issuer_raw", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of certificate, either BYO-PKI (custom) or Gateway-managed.
        Available values: "custom", "gateway_managed".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "uploaded_on")

    @uploaded_on.setter
    def uploaded_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uploaded_on", value)

    @property
    @pulumi.getter(name="validityPeriodDays")
    def validity_period_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        return pulumi.get(self, "validity_period_days")

    @validity_period_days.setter
    def validity_period_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "validity_period_days", value)


class ZeroTrustGatewayCertificate(pulumi.CustomResource):

    pulumi_type = "cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 validity_period_days: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zero_trust_gateway_certificate = cloudflare.ZeroTrustGatewayCertificate("example_zero_trust_gateway_certificate",
            account_id="699d98642c564d2e855e9661899b7252",
            validity_period_days=1826)
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate example '<account_id>/<certificate_id>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] validity_period_days: Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZeroTrustGatewayCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zero_trust_gateway_certificate = cloudflare.ZeroTrustGatewayCertificate("example_zero_trust_gateway_certificate",
            account_id="699d98642c564d2e855e9661899b7252",
            validity_period_days=1826)
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate example '<account_id>/<certificate_id>'
        ```

        :param str resource_name: The name of the resource.
        :param ZeroTrustGatewayCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZeroTrustGatewayCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 validity_period_days: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZeroTrustGatewayCertificateArgs.__new__(ZeroTrustGatewayCertificateArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["validity_period_days"] = validity_period_days
            __props__.__dict__["binding_status"] = None
            __props__.__dict__["certificate"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["expires_on"] = None
            __props__.__dict__["fingerprint"] = None
            __props__.__dict__["in_use"] = None
            __props__.__dict__["issuer_org"] = None
            __props__.__dict__["issuer_raw"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["uploaded_on"] = None
        super(ZeroTrustGatewayCertificate, __self__).__init__(
            'cloudflare:index/zeroTrustGatewayCertificate:ZeroTrustGatewayCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            binding_status: Optional[pulumi.Input[builtins.str]] = None,
            certificate: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            expires_on: Optional[pulumi.Input[builtins.str]] = None,
            fingerprint: Optional[pulumi.Input[builtins.str]] = None,
            in_use: Optional[pulumi.Input[builtins.bool]] = None,
            issuer_org: Optional[pulumi.Input[builtins.str]] = None,
            issuer_raw: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None,
            uploaded_on: Optional[pulumi.Input[builtins.str]] = None,
            validity_period_days: Optional[pulumi.Input[builtins.int]] = None) -> 'ZeroTrustGatewayCertificate':
        """
        Get an existing ZeroTrustGatewayCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] binding_status: The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
               Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        :param pulumi.Input[builtins.str] certificate: The CA certificate
        :param pulumi.Input[builtins.str] fingerprint: The SHA256 fingerprint of the certificate.
        :param pulumi.Input[builtins.bool] in_use: Use this certificate for Gateway TLS interception
        :param pulumi.Input[builtins.str] issuer_org: The organization that issued the certificate.
        :param pulumi.Input[builtins.str] issuer_raw: The entire issuer field of the certificate.
        :param pulumi.Input[builtins.str] type: The type of certificate, either BYO-PKI (custom) or Gateway-managed.
               Available values: "custom", "gateway_managed".
        :param pulumi.Input[builtins.int] validity_period_days: Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZeroTrustGatewayCertificateState.__new__(_ZeroTrustGatewayCertificateState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["binding_status"] = binding_status
        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["expires_on"] = expires_on
        __props__.__dict__["fingerprint"] = fingerprint
        __props__.__dict__["in_use"] = in_use
        __props__.__dict__["issuer_org"] = issuer_org
        __props__.__dict__["issuer_raw"] = issuer_raw
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["uploaded_on"] = uploaded_on
        __props__.__dict__["validity_period_days"] = validity_period_days
        return ZeroTrustGatewayCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="bindingStatus")
    def binding_status(self) -> pulumi.Output[builtins.str]:
        """
        The deployment status of the certificate on Cloudflare's edge. Certificates in the 'available' (previously called 'active') state may be used for Gateway TLS interception.
        Available values: "pending*deployment", "available", "pending*deletion", "inactive".
        """
        return pulumi.get(self, "binding_status")

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[builtins.str]:
        """
        The CA certificate
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def fingerprint(self) -> pulumi.Output[builtins.str]:
        """
        The SHA256 fingerprint of the certificate.
        """
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter(name="inUse")
    def in_use(self) -> pulumi.Output[builtins.bool]:
        """
        Use this certificate for Gateway TLS interception
        """
        return pulumi.get(self, "in_use")

    @property
    @pulumi.getter(name="issuerOrg")
    def issuer_org(self) -> pulumi.Output[builtins.str]:
        """
        The organization that issued the certificate.
        """
        return pulumi.get(self, "issuer_org")

    @property
    @pulumi.getter(name="issuerRaw")
    def issuer_raw(self) -> pulumi.Output[builtins.str]:
        """
        The entire issuer field of the certificate.
        """
        return pulumi.get(self, "issuer_raw")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The type of certificate, either BYO-PKI (custom) or Gateway-managed.
        Available values: "custom", "gateway_managed".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "uploaded_on")

    @property
    @pulumi.getter(name="validityPeriodDays")
    def validity_period_days(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Number of days the generated certificate will be valid, minimum 1 day and maximum 30 years. Defaults to 5 years.
        """
        return pulumi.get(self, "validity_period_days")

