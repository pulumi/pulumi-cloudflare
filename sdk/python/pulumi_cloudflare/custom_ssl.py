# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CustomSsl']


class CustomSsl(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_ssl_options: Optional[pulumi.Input[pulumi.InputType['CustomSslCustomSslOptionsArgs']]] = None,
                 custom_ssl_priorities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomSslCustomSslPriorityArgs']]]]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Cloudflare custom ssl resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        config = pulumi.Config()
        cloudflare_zone_id = config.get("cloudflareZoneId")
        if cloudflare_zone_id is None:
            cloudflare_zone_id = "1d5fdc9e88c8a8c4518b068cd94331fe"
        # Add a custom ssl certificate to the domain
        foossl = cloudflare.CustomSsl("foossl",
            custom_ssl_options=cloudflare.CustomSslCustomSslOptionsArgs(
                bundle_method="ubiquitous",
                certificate="-----INSERT CERTIFICATE-----",
                geo_restrictions="us",
                private_key="-----INSERT PRIVATE KEY-----",
                type="legacy_custom",
            ),
            zone_id=cloudflare_zone_id)
        ```

        ## Import

        Custom SSL Certs can be imported using a composite ID formed of the zone ID and [certificate ID](https://api.cloudflare.com/#custom-ssl-for-a-zone-properties), separated by a "/" e.g.

        ```sh
         $ pulumi import cloudflare:index/customSsl:CustomSsl default 1d5fdc9e88c8a8c4518b068cd94331fe/0123f0ab-9cde-45b2-80bd-4da3010f1337
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomSslCustomSslOptionsArgs']] custom_ssl_options: The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
        :param pulumi.Input[str] zone_id: The DNS zone id to the custom ssl cert should be added.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['custom_ssl_options'] = custom_ssl_options
            __props__['custom_ssl_priorities'] = custom_ssl_priorities
            if zone_id is None:
                raise TypeError("Missing required property 'zone_id'")
            __props__['zone_id'] = zone_id
            __props__['expires_on'] = None
            __props__['hosts'] = None
            __props__['issuer'] = None
            __props__['modified_on'] = None
            __props__['priority'] = None
            __props__['signature'] = None
            __props__['status'] = None
            __props__['uploaded_on'] = None
        super(CustomSsl, __self__).__init__(
            'cloudflare:index/customSsl:CustomSsl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_ssl_options: Optional[pulumi.Input[pulumi.InputType['CustomSslCustomSslOptionsArgs']]] = None,
            custom_ssl_priorities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomSslCustomSslPriorityArgs']]]]] = None,
            expires_on: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            modified_on: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            signature: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            uploaded_on: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CustomSsl':
        """
        Get an existing CustomSsl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CustomSslCustomSslOptionsArgs']] custom_ssl_options: The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
        :param pulumi.Input[str] zone_id: The DNS zone id to the custom ssl cert should be added.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["custom_ssl_options"] = custom_ssl_options
        __props__["custom_ssl_priorities"] = custom_ssl_priorities
        __props__["expires_on"] = expires_on
        __props__["hosts"] = hosts
        __props__["issuer"] = issuer
        __props__["modified_on"] = modified_on
        __props__["priority"] = priority
        __props__["signature"] = signature
        __props__["status"] = status
        __props__["uploaded_on"] = uploaded_on
        __props__["zone_id"] = zone_id
        return CustomSsl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customSslOptions")
    def custom_ssl_options(self) -> pulumi.Output[Optional['outputs.CustomSslCustomSslOptions']]:
        """
        The certificate, private key and associated optional parameters, such as bundle_method, geo_restrictions, and type.
        """
        return pulumi.get(self, "custom_ssl_options")

    @property
    @pulumi.getter(name="customSslPriorities")
    def custom_ssl_priorities(self) -> pulumi.Output[Optional[Sequence['outputs.CustomSslCustomSslPriority']]]:
        return pulumi.get(self, "custom_ssl_priorities")

    @property
    @pulumi.getter(name="expiresOn")
    def expires_on(self) -> pulumi.Output[str]:
        return pulumi.get(self, "expires_on")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[str]:
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def signature(self) -> pulumi.Output[str]:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uploadedOn")
    def uploaded_on(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uploaded_on")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The DNS zone id to the custom ssl cert should be added.
        """
        return pulumi.get(self, "zone_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

