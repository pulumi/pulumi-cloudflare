# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDnsZoneTransfersOutgoingResult',
    'AwaitableGetDnsZoneTransfersOutgoingResult',
    'get_dns_zone_transfers_outgoing',
    'get_dns_zone_transfers_outgoing_output',
]

@pulumi.output_type
class GetDnsZoneTransfersOutgoingResult:
    """
    A collection of values returned by getDnsZoneTransfersOutgoing.
    """
    def __init__(__self__, checked_time=None, created_time=None, id=None, last_transferred_time=None, name=None, peers=None, soa_serial=None, zone_id=None):
        if checked_time and not isinstance(checked_time, str):
            raise TypeError("Expected argument 'checked_time' to be a str")
        pulumi.set(__self__, "checked_time", checked_time)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_transferred_time and not isinstance(last_transferred_time, str):
            raise TypeError("Expected argument 'last_transferred_time' to be a str")
        pulumi.set(__self__, "last_transferred_time", last_transferred_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if peers and not isinstance(peers, list):
            raise TypeError("Expected argument 'peers' to be a list")
        pulumi.set(__self__, "peers", peers)
        if soa_serial and not isinstance(soa_serial, float):
            raise TypeError("Expected argument 'soa_serial' to be a float")
        pulumi.set(__self__, "soa_serial", soa_serial)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="checkedTime")
    def checked_time(self) -> builtins.str:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "checked_time")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastTransferredTime")
    def last_transferred_time(self) -> builtins.str:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "last_transferred_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> Sequence[builtins.str]:
        """
        A list of peer tags.
        """
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter(name="soaSerial")
    def soa_serial(self) -> builtins.float:
        """
        The serial number of the SOA for the given zone.
        """
        return pulumi.get(self, "soa_serial")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        return pulumi.get(self, "zone_id")


class AwaitableGetDnsZoneTransfersOutgoingResult(GetDnsZoneTransfersOutgoingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDnsZoneTransfersOutgoingResult(
            checked_time=self.checked_time,
            created_time=self.created_time,
            id=self.id,
            last_transferred_time=self.last_transferred_time,
            name=self.name,
            peers=self.peers,
            soa_serial=self.soa_serial,
            zone_id=self.zone_id)


def get_dns_zone_transfers_outgoing(zone_id: Optional[builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDnsZoneTransfersOutgoingResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_dns_zone_transfers_outgoing = cloudflare.get_dns_zone_transfers_outgoing(zone_id="269d8f4853475ca241c4e730be286b20")
    ```
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getDnsZoneTransfersOutgoing:getDnsZoneTransfersOutgoing', __args__, opts=opts, typ=GetDnsZoneTransfersOutgoingResult).value

    return AwaitableGetDnsZoneTransfersOutgoingResult(
        checked_time=pulumi.get(__ret__, 'checked_time'),
        created_time=pulumi.get(__ret__, 'created_time'),
        id=pulumi.get(__ret__, 'id'),
        last_transferred_time=pulumi.get(__ret__, 'last_transferred_time'),
        name=pulumi.get(__ret__, 'name'),
        peers=pulumi.get(__ret__, 'peers'),
        soa_serial=pulumi.get(__ret__, 'soa_serial'),
        zone_id=pulumi.get(__ret__, 'zone_id'))
def get_dns_zone_transfers_outgoing_output(zone_id: Optional[pulumi.Input[builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDnsZoneTransfersOutgoingResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_dns_zone_transfers_outgoing = cloudflare.get_dns_zone_transfers_outgoing(zone_id="269d8f4853475ca241c4e730be286b20")
    ```
    """
    __args__ = dict()
    __args__['zoneId'] = zone_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getDnsZoneTransfersOutgoing:getDnsZoneTransfersOutgoing', __args__, opts=opts, typ=GetDnsZoneTransfersOutgoingResult)
    return __ret__.apply(lambda __response__: GetDnsZoneTransfersOutgoingResult(
        checked_time=pulumi.get(__response__, 'checked_time'),
        created_time=pulumi.get(__response__, 'created_time'),
        id=pulumi.get(__response__, 'id'),
        last_transferred_time=pulumi.get(__response__, 'last_transferred_time'),
        name=pulumi.get(__response__, 'name'),
        peers=pulumi.get(__response__, 'peers'),
        soa_serial=pulumi.get(__response__, 'soa_serial'),
        zone_id=pulumi.get(__response__, 'zone_id')))
