# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CustomHostname']


class CustomHostname(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_origin_server: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ssls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomHostnameSslArgs']]]]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Cloudflare custom hostname (also known as SSL for SaaS) resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_hostname = cloudflare.CustomHostname("exampleHostname",
            hostname="hostname.example.com",
            ssls=[cloudflare.CustomHostnameSslArgs(
                method="txt",
            )],
            zone_id="d41d8cd98f00b204e9800998ecf8427e")
        ```

        ## Import

        Custom hostname certificates can be imported using a composite ID formed of the zone ID and [hostname ID](https://api.cloudflare.com/#custom-hostname-for-a-zone-properties), separated by a "/" e.g.

        ```sh
         $ pulumi import cloudflare:index/customHostname:CustomHostname example d41d8cd98f00b204e9800998ecf8427e/0d89c70d-ad9f-4843-b99f-6cc0252067e9
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_origin_server: The custom origin server used for certificates.
        :param pulumi.Input[str] hostname: Hostname you intend to request a certificate for.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomHostnameSslArgs']]]] ssls: SSL configuration of the certificate. See further notes below.
        :param pulumi.Input[str] zone_id: The DNS zone ID where the custom hostname should be assigned.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['custom_origin_server'] = custom_origin_server
            if hostname is None:
                raise TypeError("Missing required property 'hostname'")
            __props__['hostname'] = hostname
            if ssls is None:
                raise TypeError("Missing required property 'ssls'")
            __props__['ssls'] = ssls
            if zone_id is None:
                raise TypeError("Missing required property 'zone_id'")
            __props__['zone_id'] = zone_id
            __props__['ownership_verification'] = None
            __props__['ownership_verification_http'] = None
            __props__['status'] = None
        super(CustomHostname, __self__).__init__(
            'cloudflare:index/customHostname:CustomHostname',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_origin_server: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            ownership_verification: Optional[pulumi.Input[pulumi.InputType['CustomHostnameOwnershipVerificationArgs']]] = None,
            ownership_verification_http: Optional[pulumi.Input[pulumi.InputType['CustomHostnameOwnershipVerificationHttpArgs']]] = None,
            ssls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomHostnameSslArgs']]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'CustomHostname':
        """
        Get an existing CustomHostname resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] custom_origin_server: The custom origin server used for certificates.
        :param pulumi.Input[str] hostname: Hostname you intend to request a certificate for.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomHostnameSslArgs']]]] ssls: SSL configuration of the certificate. See further notes below.
        :param pulumi.Input[str] zone_id: The DNS zone ID where the custom hostname should be assigned.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["custom_origin_server"] = custom_origin_server
        __props__["hostname"] = hostname
        __props__["ownership_verification"] = ownership_verification
        __props__["ownership_verification_http"] = ownership_verification_http
        __props__["ssls"] = ssls
        __props__["status"] = status
        __props__["zone_id"] = zone_id
        return CustomHostname(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customOriginServer")
    def custom_origin_server(self) -> pulumi.Output[Optional[str]]:
        """
        The custom origin server used for certificates.
        """
        return pulumi.get(self, "custom_origin_server")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        Hostname you intend to request a certificate for.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ownershipVerification")
    def ownership_verification(self) -> pulumi.Output['outputs.CustomHostnameOwnershipVerification']:
        return pulumi.get(self, "ownership_verification")

    @property
    @pulumi.getter(name="ownershipVerificationHttp")
    def ownership_verification_http(self) -> pulumi.Output['outputs.CustomHostnameOwnershipVerificationHttp']:
        return pulumi.get(self, "ownership_verification_http")

    @property
    @pulumi.getter
    def ssls(self) -> pulumi.Output[Sequence['outputs.CustomHostnameSsl']]:
        """
        SSL configuration of the certificate. See further notes below.
        """
        return pulumi.get(self, "ssls")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The DNS zone ID where the custom hostname should be assigned.
        """
        return pulumi.get(self, "zone_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

