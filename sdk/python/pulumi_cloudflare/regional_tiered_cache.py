# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['RegionalTieredCacheArgs', 'RegionalTieredCache']

@pulumi.input_type
class RegionalTieredCacheArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[builtins.str],
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a RegionalTieredCache resource.
        :param pulumi.Input[builtins.str] zone_id: Identifier
        :param pulumi.Input[builtins.str] value: Value of the Regional Tiered Cache zone setting.
               Available values: "on", "off".
        """
        pulumi.set(__self__, "zone_id", zone_id)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value of the Regional Tiered Cache zone setting.
        Available values: "on", "off".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class _RegionalTieredCacheState:
    def __init__(__self__, *,
                 editable: Optional[pulumi.Input[builtins.bool]] = None,
                 modified_on: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering RegionalTieredCache resources.
        :param pulumi.Input[builtins.bool] editable: Whether the setting is editable
        :param pulumi.Input[builtins.str] modified_on: Last time this setting was modified.
        :param pulumi.Input[builtins.str] value: Value of the Regional Tiered Cache zone setting.
               Available values: "on", "off".
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        if editable is not None:
            pulumi.set(__self__, "editable", editable)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def editable(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether the setting is editable
        """
        return pulumi.get(self, "editable")

    @editable.setter
    def editable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "editable", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Last time this setting was modified.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value of the Regional Tiered Cache zone setting.
        Available values: "on", "off".
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("cloudflare:index/regionalTieredCache:RegionalTieredCache")
class RegionalTieredCache(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_regional_tiered_cache = cloudflare.RegionalTieredCache("example_regional_tiered_cache",
            zone_id="023e105f4ecef8ad9ca31a8372d0c353",
            value="on")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/regionalTieredCache:RegionalTieredCache example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] value: Value of the Regional Tiered Cache zone setting.
               Available values: "on", "off".
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegionalTieredCacheArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_regional_tiered_cache = cloudflare.RegionalTieredCache("example_regional_tiered_cache",
            zone_id="023e105f4ecef8ad9ca31a8372d0c353",
            value="on")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/regionalTieredCache:RegionalTieredCache example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param RegionalTieredCacheArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegionalTieredCacheArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegionalTieredCacheArgs.__new__(RegionalTieredCacheArgs)

            __props__.__dict__["value"] = value
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["editable"] = None
            __props__.__dict__["modified_on"] = None
        super(RegionalTieredCache, __self__).__init__(
            'cloudflare:index/regionalTieredCache:RegionalTieredCache',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            editable: Optional[pulumi.Input[builtins.bool]] = None,
            modified_on: Optional[pulumi.Input[builtins.str]] = None,
            value: Optional[pulumi.Input[builtins.str]] = None,
            zone_id: Optional[pulumi.Input[builtins.str]] = None) -> 'RegionalTieredCache':
        """
        Get an existing RegionalTieredCache resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] editable: Whether the setting is editable
        :param pulumi.Input[builtins.str] modified_on: Last time this setting was modified.
        :param pulumi.Input[builtins.str] value: Value of the Regional Tiered Cache zone setting.
               Available values: "on", "off".
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegionalTieredCacheState.__new__(_RegionalTieredCacheState)

        __props__.__dict__["editable"] = editable
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["value"] = value
        __props__.__dict__["zone_id"] = zone_id
        return RegionalTieredCache(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def editable(self) -> pulumi.Output[builtins.bool]:
        """
        Whether the setting is editable
        """
        return pulumi.get(self, "editable")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[builtins.str]:
        """
        Last time this setting was modified.
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[builtins.str]:
        """
        Value of the Regional Tiered Cache zone setting.
        Available values: "on", "off".
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

