# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetWorkflowResult',
    'AwaitableGetWorkflowResult',
    'get_workflow',
    'get_workflow_output',
]

@pulumi.output_type
class GetWorkflowResult:
    """
    A collection of values returned by getWorkflow.
    """
    def __init__(__self__, account_id=None, class_name=None, created_on=None, filter=None, id=None, instances=None, modified_on=None, name=None, script_name=None, triggered_on=None, workflow_name=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if class_name and not isinstance(class_name, str):
            raise TypeError("Expected argument 'class_name' to be a str")
        pulumi.set(__self__, "class_name", class_name)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances and not isinstance(instances, dict):
            raise TypeError("Expected argument 'instances' to be a dict")
        pulumi.set(__self__, "instances", instances)
        if modified_on and not isinstance(modified_on, str):
            raise TypeError("Expected argument 'modified_on' to be a str")
        pulumi.set(__self__, "modified_on", modified_on)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if script_name and not isinstance(script_name, str):
            raise TypeError("Expected argument 'script_name' to be a str")
        pulumi.set(__self__, "script_name", script_name)
        if triggered_on and not isinstance(triggered_on, str):
            raise TypeError("Expected argument 'triggered_on' to be a str")
        pulumi.set(__self__, "triggered_on", triggered_on)
        if workflow_name and not isinstance(workflow_name, str):
            raise TypeError("Expected argument 'workflow_name' to be a str")
        pulumi.set(__self__, "workflow_name", workflow_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="className")
    def class_name(self) -> _builtins.str:
        return pulumi.get(self, "class_name")

    @_builtins.property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> _builtins.str:
        return pulumi.get(self, "created_on")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetWorkflowFilterResult']:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> 'outputs.GetWorkflowInstancesResult':
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> _builtins.str:
        return pulumi.get(self, "modified_on")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> _builtins.str:
        return pulumi.get(self, "script_name")

    @_builtins.property
    @pulumi.getter(name="triggeredOn")
    def triggered_on(self) -> _builtins.str:
        return pulumi.get(self, "triggered_on")

    @_builtins.property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "workflow_name")


class AwaitableGetWorkflowResult(GetWorkflowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowResult(
            account_id=self.account_id,
            class_name=self.class_name,
            created_on=self.created_on,
            filter=self.filter,
            id=self.id,
            instances=self.instances,
            modified_on=self.modified_on,
            name=self.name,
            script_name=self.script_name,
            triggered_on=self.triggered_on,
            workflow_name=self.workflow_name)


def get_workflow(account_id: Optional[_builtins.str] = None,
                 filter: Optional[Union['GetWorkflowFilterArgs', 'GetWorkflowFilterArgsDict']] = None,
                 workflow_name: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workflow = cloudflare.get_workflow(account_id="account_id",
        workflow_name="x")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['filter'] = filter
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getWorkflow:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult).value

    return AwaitableGetWorkflowResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        class_name=pulumi.get(__ret__, 'class_name'),
        created_on=pulumi.get(__ret__, 'created_on'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        instances=pulumi.get(__ret__, 'instances'),
        modified_on=pulumi.get(__ret__, 'modified_on'),
        name=pulumi.get(__ret__, 'name'),
        script_name=pulumi.get(__ret__, 'script_name'),
        triggered_on=pulumi.get(__ret__, 'triggered_on'),
        workflow_name=pulumi.get(__ret__, 'workflow_name'))
def get_workflow_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                        filter: Optional[pulumi.Input[Optional[Union['GetWorkflowFilterArgs', 'GetWorkflowFilterArgsDict']]]] = None,
                        workflow_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkflowResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_workflow = cloudflare.get_workflow(account_id="account_id",
        workflow_name="x")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['filter'] = filter
    __args__['workflowName'] = workflow_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getWorkflow:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult)
    return __ret__.apply(lambda __response__: GetWorkflowResult(
        account_id=pulumi.get(__response__, 'account_id'),
        class_name=pulumi.get(__response__, 'class_name'),
        created_on=pulumi.get(__response__, 'created_on'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        instances=pulumi.get(__response__, 'instances'),
        modified_on=pulumi.get(__response__, 'modified_on'),
        name=pulumi.get(__response__, 'name'),
        script_name=pulumi.get(__response__, 'script_name'),
        triggered_on=pulumi.get(__response__, 'triggered_on'),
        workflow_name=pulumi.get(__response__, 'workflow_name')))
