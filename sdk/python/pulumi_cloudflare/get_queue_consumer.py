# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
<<<<<<< HEAD
=======
from . import outputs
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580

__all__ = [
    'GetQueueConsumerResult',
    'AwaitableGetQueueConsumerResult',
    'get_queue_consumer',
    'get_queue_consumer_output',
]

@pulumi.output_type
class GetQueueConsumerResult:
    """
    A collection of values returned by getQueueConsumer.
    """
<<<<<<< HEAD
    def __init__(__self__, account_id=None, id=None, queue_id=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
=======
    def __init__(__self__, account_id=None, consumer_id=None, created_on=None, id=None, queue_id=None, script=None, script_name=None, settings=None, type=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if consumer_id and not isinstance(consumer_id, str):
            raise TypeError("Expected argument 'consumer_id' to be a str")
        pulumi.set(__self__, "consumer_id", consumer_id)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if queue_id and not isinstance(queue_id, str):
            raise TypeError("Expected argument 'queue_id' to be a str")
        pulumi.set(__self__, "queue_id", queue_id)
<<<<<<< HEAD
=======
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        pulumi.set(__self__, "script", script)
        if script_name and not isinstance(script_name, str):
            raise TypeError("Expected argument 'script_name' to be a str")
        pulumi.set(__self__, "script_name", script_name)
        if settings and not isinstance(settings, dict):
            raise TypeError("Expected argument 'settings' to be a dict")
        pulumi.set(__self__, "settings", settings)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        A Resource identifier.
        """
        return pulumi.get(self, "account_id")

    @property
<<<<<<< HEAD
=======
    @pulumi.getter(name="consumerId")
    def consumer_id(self) -> str:
        """
        A Resource identifier.
        """
        return pulumi.get(self, "consumer_id")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        A Resource identifier.
        """
        return pulumi.get(self, "queue_id")

<<<<<<< HEAD
=======
    @property
    @pulumi.getter
    def script(self) -> str:
        """
        Name of a Worker
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="scriptName")
    def script_name(self) -> str:
        """
        Name of a Worker
        """
        return pulumi.get(self, "script_name")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.GetQueueConsumerSettingsResult':
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580

class AwaitableGetQueueConsumerResult(GetQueueConsumerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQueueConsumerResult(
            account_id=self.account_id,
<<<<<<< HEAD
            id=self.id,
            queue_id=self.queue_id)


def get_queue_consumer(account_id: Optional[str] = None,
                       queue_id: Optional[str] = None,
=======
            consumer_id=self.consumer_id,
            created_on=self.created_on,
            id=self.id,
            queue_id=self.queue_id,
            script=self.script,
            script_name=self.script_name,
            settings=self.settings,
            type=self.type)


def get_queue_consumer(account_id: Optional[str] = None,
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQueueConsumerResult:
    """
    ## Example Usage

<<<<<<< HEAD
    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_queue_consumer = cloudflare.get_queue_consumer(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        queue_id="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param str account_id: A Resource identifier.
    :param str queue_id: A Resource identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['queueId'] = queue_id
=======

    :param str account_id: A Resource identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getQueueConsumer:getQueueConsumer', __args__, opts=opts, typ=GetQueueConsumerResult).value

    return AwaitableGetQueueConsumerResult(
        account_id=pulumi.get(__ret__, 'account_id'),
<<<<<<< HEAD
        id=pulumi.get(__ret__, 'id'),
        queue_id=pulumi.get(__ret__, 'queue_id'))
def get_queue_consumer_output(account_id: Optional[pulumi.Input[str]] = None,
                              queue_id: Optional[pulumi.Input[str]] = None,
=======
        consumer_id=pulumi.get(__ret__, 'consumer_id'),
        created_on=pulumi.get(__ret__, 'created_on'),
        id=pulumi.get(__ret__, 'id'),
        queue_id=pulumi.get(__ret__, 'queue_id'),
        script=pulumi.get(__ret__, 'script'),
        script_name=pulumi.get(__ret__, 'script_name'),
        settings=pulumi.get(__ret__, 'settings'),
        type=pulumi.get(__ret__, 'type'))
def get_queue_consumer_output(account_id: Optional[pulumi.Input[str]] = None,
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQueueConsumerResult]:
    """
    ## Example Usage

<<<<<<< HEAD
    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_queue_consumer = cloudflare.get_queue_consumer(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        queue_id="023e105f4ecef8ad9ca31a8372d0c353")
    ```


    :param str account_id: A Resource identifier.
    :param str queue_id: A Resource identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['queueId'] = queue_id
=======

    :param str account_id: A Resource identifier.
    """
    __args__ = dict()
    __args__['accountId'] = account_id
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getQueueConsumer:getQueueConsumer', __args__, opts=opts, typ=GetQueueConsumerResult)
    return __ret__.apply(lambda __response__: GetQueueConsumerResult(
        account_id=pulumi.get(__response__, 'account_id'),
<<<<<<< HEAD
        id=pulumi.get(__response__, 'id'),
        queue_id=pulumi.get(__response__, 'queue_id')))
=======
        consumer_id=pulumi.get(__response__, 'consumer_id'),
        created_on=pulumi.get(__response__, 'created_on'),
        id=pulumi.get(__response__, 'id'),
        queue_id=pulumi.get(__response__, 'queue_id'),
        script=pulumi.get(__response__, 'script'),
        script_name=pulumi.get(__response__, 'script_name'),
        settings=pulumi.get(__response__, 'settings'),
        type=pulumi.get(__response__, 'type')))
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
