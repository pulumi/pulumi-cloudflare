# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class RateLimit(pulumi.CustomResource):
    action: pulumi.Output[dict]
    """
    The action to be performed when the threshold of matched traffic within the period defined is exceeded.
    """
    bypass_url_patterns: pulumi.Output[list]
    """
    URLs matching the patterns specified here will be excluded from rate limiting.
    """
    correlate: pulumi.Output[dict]
    """
    Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
    """
    description: pulumi.Output[str]
    """
    A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
    """
    disabled: pulumi.Output[bool]
    """
    Whether this ratelimit is currently disabled. Default: `false`.
    """
    match: pulumi.Output[dict]
    """
    Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.
    """
    period: pulumi.Output[float]
    """
    The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).
    """
    threshold: pulumi.Output[float]
    """
    The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).
    """
    zone: pulumi.Output[str]
    """
    The DNS zone to apply rate limiting to.
    """
    zone_id: pulumi.Output[str]
    """
    The DNS zone ID.
    """
    def __init__(__self__, resource_name, opts=None, action=None, bypass_url_patterns=None, correlate=None, description=None, disabled=None, match=None, period=None, threshold=None, zone=None, __name__=None, __opts__=None):
        """
        Provides a Cloudflare rate limit resource for a given zone. This can be used to limit the traffic you receive zone-wide, or matching more specific types of requests/responses.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] action: The action to be performed when the threshold of matched traffic within the period defined is exceeded.
        :param pulumi.Input[list] bypass_url_patterns: URLs matching the patterns specified here will be excluded from rate limiting.
        :param pulumi.Input[dict] correlate: Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
        :param pulumi.Input[str] description: A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
        :param pulumi.Input[bool] disabled: Whether this ratelimit is currently disabled. Default: `false`.
        :param pulumi.Input[dict] match: Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone. See definition below.
        :param pulumi.Input[float] period: The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed (min: 1, max: 86,400).
        :param pulumi.Input[float] threshold: The threshold that triggers the rate limit mitigations, combine with period. i.e. threshold per period (min: 2, max: 1,000,000).
        :param pulumi.Input[str] zone: The DNS zone to apply rate limiting to.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if action is None:
            raise TypeError("Missing required property 'action'")
        __props__['action'] = action

        __props__['bypass_url_patterns'] = bypass_url_patterns

        __props__['correlate'] = correlate

        __props__['description'] = description

        __props__['disabled'] = disabled

        __props__['match'] = match

        if period is None:
            raise TypeError("Missing required property 'period'")
        __props__['period'] = period

        if threshold is None:
            raise TypeError("Missing required property 'threshold'")
        __props__['threshold'] = threshold

        if zone is None:
            raise TypeError("Missing required property 'zone'")
        __props__['zone'] = zone

        __props__['zone_id'] = None

        super(RateLimit, __self__).__init__(
            'cloudflare:index/rateLimit:RateLimit',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

