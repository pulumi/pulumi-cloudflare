# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudConnectorRulesArgs', 'CloudConnectorRules']

@pulumi.input_type
class CloudConnectorRulesArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[builtins.str],
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]] = None):
        """
        The set of arguments for constructing a CloudConnectorRules resource.
        :param pulumi.Input[builtins.str] zone_id: Identifier
        :param pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]] rules: List of Cloud Connector rules
        """
        pulumi.set(__self__, "zone_id", zone_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]]:
        """
        List of Cloud Connector rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _CloudConnectorRulesState:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 expression: Optional[pulumi.Input[builtins.str]] = None,
                 parameters: Optional[pulumi.Input['CloudConnectorRulesParametersArgs']] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CloudConnectorRules resources.
        :param pulumi.Input[builtins.str] cloud_provider: Cloud Provider type
               Available values: "aws*s3", "r2", "gcp*storage", "azure_storage".
        :param pulumi.Input['CloudConnectorRulesParametersArgs'] parameters: Parameters of Cloud Connector Rule
        :param pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]] rules: List of Cloud Connector rules
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cloud Provider type
        Available values: "aws*s3", "r2", "gcp*storage", "azure_storage".
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['CloudConnectorRulesParametersArgs']]:
        """
        Parameters of Cloud Connector Rule
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['CloudConnectorRulesParametersArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]]:
        """
        List of Cloud Connector rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudConnectorRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("cloudflare:index/cloudConnectorRules:CloudConnectorRules")
class CloudConnectorRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudConnectorRulesRuleArgs', 'CloudConnectorRulesRuleArgsDict']]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudConnectorRulesRuleArgs', 'CloudConnectorRulesRuleArgsDict']]]] rules: List of Cloud Connector rules
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudConnectorRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param CloudConnectorRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudConnectorRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudConnectorRulesRuleArgs', 'CloudConnectorRulesRuleArgsDict']]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudConnectorRulesArgs.__new__(CloudConnectorRulesArgs)

            __props__.__dict__["rules"] = rules
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["cloud_provider"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["enabled"] = None
            __props__.__dict__["expression"] = None
            __props__.__dict__["parameters"] = None
        super(CloudConnectorRules, __self__).__init__(
            'cloudflare:index/cloudConnectorRules:CloudConnectorRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_provider: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            expression: Optional[pulumi.Input[builtins.str]] = None,
            parameters: Optional[pulumi.Input[Union['CloudConnectorRulesParametersArgs', 'CloudConnectorRulesParametersArgsDict']]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudConnectorRulesRuleArgs', 'CloudConnectorRulesRuleArgsDict']]]]] = None,
            zone_id: Optional[pulumi.Input[builtins.str]] = None) -> 'CloudConnectorRules':
        """
        Get an existing CloudConnectorRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cloud_provider: Cloud Provider type
               Available values: "aws*s3", "r2", "gcp*storage", "azure_storage".
        :param pulumi.Input[Union['CloudConnectorRulesParametersArgs', 'CloudConnectorRulesParametersArgsDict']] parameters: Parameters of Cloud Connector Rule
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudConnectorRulesRuleArgs', 'CloudConnectorRulesRuleArgsDict']]]] rules: List of Cloud Connector rules
        :param pulumi.Input[builtins.str] zone_id: Identifier
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudConnectorRulesState.__new__(_CloudConnectorRulesState)

        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["expression"] = expression
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["rules"] = rules
        __props__.__dict__["zone_id"] = zone_id
        return CloudConnectorRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[builtins.str]:
        """
        Cloud Provider type
        Available values: "aws*s3", "r2", "gcp*storage", "azure_storage".
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output['outputs.CloudConnectorRulesParameters']:
        """
        Parameters of Cloud Connector Rule
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.CloudConnectorRulesRule']]:
        """
        List of Cloud Connector rules
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[builtins.str]:
        """
        Identifier
        """
        return pulumi.get(self, "zone_id")

