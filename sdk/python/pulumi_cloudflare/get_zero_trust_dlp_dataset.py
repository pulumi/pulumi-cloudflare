# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetZeroTrustDlpDatasetResult',
    'AwaitableGetZeroTrustDlpDatasetResult',
    'get_zero_trust_dlp_dataset',
    'get_zero_trust_dlp_dataset_output',
]

@pulumi.output_type
class GetZeroTrustDlpDatasetResult:
    """
    A collection of values returned by getZeroTrustDlpDataset.
    """
    def __init__(__self__, account_id=None, columns=None, created_at=None, dataset_id=None, description=None, encoding_version=None, id=None, name=None, num_cells=None, secret=None, status=None, updated_at=None, uploads=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if columns and not isinstance(columns, list):
            raise TypeError("Expected argument 'columns' to be a list")
        pulumi.set(__self__, "columns", columns)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dataset_id and not isinstance(dataset_id, str):
            raise TypeError("Expected argument 'dataset_id' to be a str")
        pulumi.set(__self__, "dataset_id", dataset_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if encoding_version and not isinstance(encoding_version, int):
            raise TypeError("Expected argument 'encoding_version' to be a int")
        pulumi.set(__self__, "encoding_version", encoding_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if num_cells and not isinstance(num_cells, int):
            raise TypeError("Expected argument 'num_cells' to be a int")
        pulumi.set(__self__, "num_cells", num_cells)
        if secret and not isinstance(secret, bool):
            raise TypeError("Expected argument 'secret' to be a bool")
        pulumi.set(__self__, "secret", secret)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if uploads and not isinstance(uploads, list):
            raise TypeError("Expected argument 'uploads' to be a list")
        pulumi.set(__self__, "uploads", uploads)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetZeroTrustDlpDatasetColumnResult']:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> builtins.str:
        return pulumi.get(self, "dataset_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the dataset
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encodingVersion")
    def encoding_version(self) -> builtins.int:
        return pulumi.get(self, "encoding_version")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numCells")
    def num_cells(self) -> builtins.int:
        return pulumi.get(self, "num_cells")

    @property
    @pulumi.getter
    def secret(self) -> builtins.bool:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Available values: "empty", "uploading", "processing", "failed", "complete".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        When the dataset was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def uploads(self) -> Sequence['outputs.GetZeroTrustDlpDatasetUploadResult']:
        return pulumi.get(self, "uploads")


class AwaitableGetZeroTrustDlpDatasetResult(GetZeroTrustDlpDatasetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustDlpDatasetResult(
            account_id=self.account_id,
            columns=self.columns,
            created_at=self.created_at,
            dataset_id=self.dataset_id,
            description=self.description,
            encoding_version=self.encoding_version,
            id=self.id,
            name=self.name,
            num_cells=self.num_cells,
            secret=self.secret,
            status=self.status,
            updated_at=self.updated_at,
            uploads=self.uploads)


def get_zero_trust_dlp_dataset(account_id: Optional[builtins.str] = None,
                               dataset_id: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustDlpDatasetResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_dlp_dataset = cloudflare.get_zero_trust_dlp_dataset(account_id="account_id",
        dataset_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['datasetId'] = dataset_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustDlpDataset:getZeroTrustDlpDataset', __args__, opts=opts, typ=GetZeroTrustDlpDatasetResult).value

    return AwaitableGetZeroTrustDlpDatasetResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        columns=pulumi.get(__ret__, 'columns'),
        created_at=pulumi.get(__ret__, 'created_at'),
        dataset_id=pulumi.get(__ret__, 'dataset_id'),
        description=pulumi.get(__ret__, 'description'),
        encoding_version=pulumi.get(__ret__, 'encoding_version'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        num_cells=pulumi.get(__ret__, 'num_cells'),
        secret=pulumi.get(__ret__, 'secret'),
        status=pulumi.get(__ret__, 'status'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        uploads=pulumi.get(__ret__, 'uploads'))
def get_zero_trust_dlp_dataset_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                      dataset_id: Optional[pulumi.Input[builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustDlpDatasetResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_dlp_dataset = cloudflare.get_zero_trust_dlp_dataset(account_id="account_id",
        dataset_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
    ```
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['datasetId'] = dataset_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustDlpDataset:getZeroTrustDlpDataset', __args__, opts=opts, typ=GetZeroTrustDlpDatasetResult)
    return __ret__.apply(lambda __response__: GetZeroTrustDlpDatasetResult(
        account_id=pulumi.get(__response__, 'account_id'),
        columns=pulumi.get(__response__, 'columns'),
        created_at=pulumi.get(__response__, 'created_at'),
        dataset_id=pulumi.get(__response__, 'dataset_id'),
        description=pulumi.get(__response__, 'description'),
        encoding_version=pulumi.get(__response__, 'encoding_version'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        num_cells=pulumi.get(__response__, 'num_cells'),
        secret=pulumi.get(__response__, 'secret'),
        status=pulumi.get(__response__, 'status'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        uploads=pulumi.get(__response__, 'uploads')))
