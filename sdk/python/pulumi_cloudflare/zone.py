# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 account: pulumi.Input['ZoneAccountArgs'],
                 name: pulumi.Input[builtins.str],
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[builtins.str] name: The domain name
        :param pulumi.Input[builtins.str] type: A full zone implies that DNS is hosted with Cloudflare. A partial zone is
               typically a partner-hosted zone or a CNAME setup.
               Available values: "full", "partial", "secondary", "internal".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] vanity_name_servers: An array of domains used for custom name servers. This is only
               available for Business and Enterprise plans.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vanity_name_servers is not None:
            pulumi.set(__self__, "vanity_name_servers", vanity_name_servers)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input['ZoneAccountArgs']:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input['ZoneAccountArgs']):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        The domain name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        typically a partner-hosted zone or a CNAME setup.
        Available values: "full", "partial", "secondary", "internal".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        An array of domains used for custom name servers. This is only
        available for Business and Enterprise plans.
        """
        return pulumi.get(self, "vanity_name_servers")

    @vanity_name_servers.setter
    def vanity_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "vanity_name_servers", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['ZoneAccountArgs']] = None,
                 activated_on: Optional[pulumi.Input[builtins.str]] = None,
                 created_on: Optional[pulumi.Input[builtins.str]] = None,
                 development_mode: Optional[pulumi.Input[builtins.float]] = None,
                 meta: Optional[pulumi.Input['ZoneMetaArgs']] = None,
                 modified_on: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 original_dnshost: Optional[pulumi.Input[builtins.str]] = None,
                 original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 original_registrar: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input['ZoneOwnerArgs']] = None,
                 paused: Optional[pulumi.Input[builtins.bool]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 verification_key: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[builtins.str] activated_on: The last time proof of ownership was detected and the zone was made
               active
        :param pulumi.Input[builtins.str] created_on: When the zone was created
        :param pulumi.Input[builtins.float] development_mode: The interval (in seconds) from when development mode expires
               (positive integer) or last expired (negative integer) for the
               domain. If development mode has never been enabled, this value is 0.
        :param pulumi.Input['ZoneMetaArgs'] meta: Metadata about the zone
        :param pulumi.Input[builtins.str] modified_on: When the zone was last modified
        :param pulumi.Input[builtins.str] name: The domain name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] name_servers: The name servers Cloudflare assigns to a zone
        :param pulumi.Input[builtins.str] original_dnshost: DNS host at the time of switching to Cloudflare
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] original_name_servers: Original name servers before moving to Cloudflare
        :param pulumi.Input[builtins.str] original_registrar: Registrar for the domain at the time of switching to Cloudflare
        :param pulumi.Input['ZoneOwnerArgs'] owner: The owner of the zone
        :param pulumi.Input[builtins.bool] paused: Indicates whether the zone is only using Cloudflare DNS services. A
               true value means the zone will not receive security or performance
               benefits.
        :param pulumi.Input[builtins.str] status: The zone status on Cloudflare.
               Available values: "initializing", "pending", "active", "moved".
        :param pulumi.Input[builtins.str] type: A full zone implies that DNS is hosted with Cloudflare. A partial zone is
               typically a partner-hosted zone or a CNAME setup.
               Available values: "full", "partial", "secondary", "internal".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] vanity_name_servers: An array of domains used for custom name servers. This is only
               available for Business and Enterprise plans.
        :param pulumi.Input[builtins.str] verification_key: Verification key for partial zone setup.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if activated_on is not None:
            pulumi.set(__self__, "activated_on", activated_on)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if development_mode is not None:
            pulumi.set(__self__, "development_mode", development_mode)
        if meta is not None:
            pulumi.set(__self__, "meta", meta)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_servers is not None:
            pulumi.set(__self__, "name_servers", name_servers)
        if original_dnshost is not None:
            pulumi.set(__self__, "original_dnshost", original_dnshost)
        if original_name_servers is not None:
            pulumi.set(__self__, "original_name_servers", original_name_servers)
        if original_registrar is not None:
            pulumi.set(__self__, "original_registrar", original_registrar)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vanity_name_servers is not None:
            pulumi.set(__self__, "vanity_name_servers", vanity_name_servers)
        if verification_key is not None:
            pulumi.set(__self__, "verification_key", verification_key)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['ZoneAccountArgs']]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['ZoneAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="activatedOn")
    def activated_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The last time proof of ownership was detected and the zone was made
        active
        """
        return pulumi.get(self, "activated_on")

    @activated_on.setter
    def activated_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "activated_on", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When the zone was created
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The interval (in seconds) from when development mode expires
        (positive integer) or last expired (negative integer) for the
        domain. If development mode has never been enabled, this value is 0.
        """
        return pulumi.get(self, "development_mode")

    @development_mode.setter
    def development_mode(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "development_mode", value)

    @property
    @pulumi.getter
    def meta(self) -> Optional[pulumi.Input['ZoneMetaArgs']]:
        """
        Metadata about the zone
        """
        return pulumi.get(self, "meta")

    @meta.setter
    def meta(self, value: Optional[pulumi.Input['ZoneMetaArgs']]):
        pulumi.set(self, "meta", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When the zone was last modified
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The domain name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The name servers Cloudflare assigns to a zone
        """
        return pulumi.get(self, "name_servers")

    @name_servers.setter
    def name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "name_servers", value)

    @property
    @pulumi.getter(name="originalDnshost")
    def original_dnshost(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        DNS host at the time of switching to Cloudflare
        """
        return pulumi.get(self, "original_dnshost")

    @original_dnshost.setter
    def original_dnshost(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "original_dnshost", value)

    @property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Original name servers before moving to Cloudflare
        """
        return pulumi.get(self, "original_name_servers")

    @original_name_servers.setter
    def original_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "original_name_servers", value)

    @property
    @pulumi.getter(name="originalRegistrar")
    def original_registrar(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Registrar for the domain at the time of switching to Cloudflare
        """
        return pulumi.get(self, "original_registrar")

    @original_registrar.setter
    def original_registrar(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "original_registrar", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['ZoneOwnerArgs']]:
        """
        The owner of the zone
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['ZoneOwnerArgs']]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether the zone is only using Cloudflare DNS services. A
        true value means the zone will not receive security or performance
        benefits.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The zone status on Cloudflare.
        Available values: "initializing", "pending", "active", "moved".
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        typically a partner-hosted zone or a CNAME setup.
        Available values: "full", "partial", "secondary", "internal".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        An array of domains used for custom name servers. This is only
        available for Business and Enterprise plans.
        """
        return pulumi.get(self, "vanity_name_servers")

    @vanity_name_servers.setter
    def vanity_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "vanity_name_servers", value)

    @property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Verification key for partial zone setup.
        """
        return pulumi.get(self, "verification_key")

    @verification_key.setter
    def verification_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "verification_key", value)


@pulumi.type_token("cloudflare:index/zone:Zone")
class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['ZoneAccountArgs', 'ZoneAccountArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zone = cloudflare.Zone("example_zone",
            account={
                "id": "023e105f4ecef8ad9ca31a8372d0c353",
            },
            name="example.com",
            type="full")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/zone:Zone example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: The domain name
        :param pulumi.Input[builtins.str] type: A full zone implies that DNS is hosted with Cloudflare. A partial zone is
               typically a partner-hosted zone or a CNAME setup.
               Available values: "full", "partial", "secondary", "internal".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] vanity_name_servers: An array of domains used for custom name servers. This is only
               available for Business and Enterprise plans.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zone = cloudflare.Zone("example_zone",
            account={
                "id": "023e105f4ecef8ad9ca31a8372d0c353",
            },
            name="example.com",
            type="full")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/zone:Zone example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[Union['ZoneAccountArgs', 'ZoneAccountArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 vanity_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["vanity_name_servers"] = vanity_name_servers
            __props__.__dict__["activated_on"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["development_mode"] = None
            __props__.__dict__["meta"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["name_servers"] = None
            __props__.__dict__["original_dnshost"] = None
            __props__.__dict__["original_name_servers"] = None
            __props__.__dict__["original_registrar"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["paused"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["verification_key"] = None
        super(Zone, __self__).__init__(
            'cloudflare:index/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[Union['ZoneAccountArgs', 'ZoneAccountArgsDict']]] = None,
            activated_on: Optional[pulumi.Input[builtins.str]] = None,
            created_on: Optional[pulumi.Input[builtins.str]] = None,
            development_mode: Optional[pulumi.Input[builtins.float]] = None,
            meta: Optional[pulumi.Input[Union['ZoneMetaArgs', 'ZoneMetaArgsDict']]] = None,
            modified_on: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            original_dnshost: Optional[pulumi.Input[builtins.str]] = None,
            original_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            original_registrar: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[Union['ZoneOwnerArgs', 'ZoneOwnerArgsDict']]] = None,
            paused: Optional[pulumi.Input[builtins.bool]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            vanity_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            verification_key: Optional[pulumi.Input[builtins.str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] activated_on: The last time proof of ownership was detected and the zone was made
               active
        :param pulumi.Input[builtins.str] created_on: When the zone was created
        :param pulumi.Input[builtins.float] development_mode: The interval (in seconds) from when development mode expires
               (positive integer) or last expired (negative integer) for the
               domain. If development mode has never been enabled, this value is 0.
        :param pulumi.Input[Union['ZoneMetaArgs', 'ZoneMetaArgsDict']] meta: Metadata about the zone
        :param pulumi.Input[builtins.str] modified_on: When the zone was last modified
        :param pulumi.Input[builtins.str] name: The domain name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] name_servers: The name servers Cloudflare assigns to a zone
        :param pulumi.Input[builtins.str] original_dnshost: DNS host at the time of switching to Cloudflare
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] original_name_servers: Original name servers before moving to Cloudflare
        :param pulumi.Input[builtins.str] original_registrar: Registrar for the domain at the time of switching to Cloudflare
        :param pulumi.Input[Union['ZoneOwnerArgs', 'ZoneOwnerArgsDict']] owner: The owner of the zone
        :param pulumi.Input[builtins.bool] paused: Indicates whether the zone is only using Cloudflare DNS services. A
               true value means the zone will not receive security or performance
               benefits.
        :param pulumi.Input[builtins.str] status: The zone status on Cloudflare.
               Available values: "initializing", "pending", "active", "moved".
        :param pulumi.Input[builtins.str] type: A full zone implies that DNS is hosted with Cloudflare. A partial zone is
               typically a partner-hosted zone or a CNAME setup.
               Available values: "full", "partial", "secondary", "internal".
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] vanity_name_servers: An array of domains used for custom name servers. This is only
               available for Business and Enterprise plans.
        :param pulumi.Input[builtins.str] verification_key: Verification key for partial zone setup.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["account"] = account
        __props__.__dict__["activated_on"] = activated_on
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["development_mode"] = development_mode
        __props__.__dict__["meta"] = meta
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["name_servers"] = name_servers
        __props__.__dict__["original_dnshost"] = original_dnshost
        __props__.__dict__["original_name_servers"] = original_name_servers
        __props__.__dict__["original_registrar"] = original_registrar
        __props__.__dict__["owner"] = owner
        __props__.__dict__["paused"] = paused
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["vanity_name_servers"] = vanity_name_servers
        __props__.__dict__["verification_key"] = verification_key
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.ZoneAccount']:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="activatedOn")
    def activated_on(self) -> pulumi.Output[builtins.str]:
        """
        The last time proof of ownership was detected and the zone was made
        active
        """
        return pulumi.get(self, "activated_on")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[builtins.str]:
        """
        When the zone was created
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="developmentMode")
    def development_mode(self) -> pulumi.Output[builtins.float]:
        """
        The interval (in seconds) from when development mode expires
        (positive integer) or last expired (negative integer) for the
        domain. If development mode has never been enabled, this value is 0.
        """
        return pulumi.get(self, "development_mode")

    @property
    @pulumi.getter
    def meta(self) -> pulumi.Output['outputs.ZoneMeta']:
        """
        Metadata about the zone
        """
        return pulumi.get(self, "meta")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[builtins.str]:
        """
        When the zone was last modified
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The domain name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameServers")
    def name_servers(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The name servers Cloudflare assigns to a zone
        """
        return pulumi.get(self, "name_servers")

    @property
    @pulumi.getter(name="originalDnshost")
    def original_dnshost(self) -> pulumi.Output[builtins.str]:
        """
        DNS host at the time of switching to Cloudflare
        """
        return pulumi.get(self, "original_dnshost")

    @property
    @pulumi.getter(name="originalNameServers")
    def original_name_servers(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Original name servers before moving to Cloudflare
        """
        return pulumi.get(self, "original_name_servers")

    @property
    @pulumi.getter(name="originalRegistrar")
    def original_registrar(self) -> pulumi.Output[builtins.str]:
        """
        Registrar for the domain at the time of switching to Cloudflare
        """
        return pulumi.get(self, "original_registrar")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output['outputs.ZoneOwner']:
        """
        The owner of the zone
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates whether the zone is only using Cloudflare DNS services. A
        true value means the zone will not receive security or performance
        benefits.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        The zone status on Cloudflare.
        Available values: "initializing", "pending", "active", "moved".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        A full zone implies that DNS is hosted with Cloudflare. A partial zone is
        typically a partner-hosted zone or a CNAME setup.
        Available values: "full", "partial", "secondary", "internal".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vanityNameServers")
    def vanity_name_servers(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        An array of domains used for custom name servers. This is only
        available for Business and Enterprise plans.
        """
        return pulumi.get(self, "vanity_name_servers")

    @property
    @pulumi.getter(name="verificationKey")
    def verification_key(self) -> pulumi.Output[builtins.str]:
        """
        Verification key for partial zone setup.
        """
        return pulumi.get(self, "verification_key")

