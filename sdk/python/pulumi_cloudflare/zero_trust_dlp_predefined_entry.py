# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZeroTrustDlpPredefinedEntryArgs', 'ZeroTrustDlpPredefinedEntry']

@pulumi.input_type
class ZeroTrustDlpPredefinedEntryArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 enabled: pulumi.Input[_builtins.bool],
                 entry_id: pulumi.Input[_builtins.str],
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ZeroTrustDlpPredefinedEntry resource.
        :param pulumi.Input[_builtins.str] profile_id: This field is not actually used as the owning profile for a predefined entry is already set
               to a predefined profile
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "entry_id", entry_id)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "entry_id", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This field is not actually used as the owning profile for a predefined entry is already set
        to a predefined profile
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)


@pulumi.input_type
class _ZeroTrustDlpPredefinedEntryState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 confidence: Optional[pulumi.Input['ZeroTrustDlpPredefinedEntryConfidenceArgs']] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 entry_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ZeroTrustDlpPredefinedEntry resources.
        :param pulumi.Input[_builtins.str] profile_id: This field is not actually used as the owning profile for a predefined entry is already set
               to a predefined profile
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input['ZeroTrustDlpPredefinedEntryConfidenceArgs']]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input['ZeroTrustDlpPredefinedEntryConfidenceArgs']]):
        pulumi.set(self, "confidence", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "entry_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        This field is not actually used as the owning profile for a predefined entry is already set
        to a predefined profile
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "profile_id", value)


@pulumi.type_token("cloudflare:index/zeroTrustDlpPredefinedEntry:ZeroTrustDlpPredefinedEntry")
class ZeroTrustDlpPredefinedEntry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 entry_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zero_trust_dlp_predefined_entry = cloudflare.ZeroTrustDlpPredefinedEntry("example_zero_trust_dlp_predefined_entry",
            account_id="account_id",
            enabled=True,
            entry_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            profile_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] profile_id: This field is not actually used as the owning profile for a predefined entry is already set
               to a predefined profile
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZeroTrustDlpPredefinedEntryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_zero_trust_dlp_predefined_entry = cloudflare.ZeroTrustDlpPredefinedEntry("example_zero_trust_dlp_predefined_entry",
            account_id="account_id",
            enabled=True,
            entry_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e",
            profile_id="182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        ```

        :param str resource_name: The name of the resource.
        :param ZeroTrustDlpPredefinedEntryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZeroTrustDlpPredefinedEntryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 entry_id: Optional[pulumi.Input[_builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZeroTrustDlpPredefinedEntryArgs.__new__(ZeroTrustDlpPredefinedEntryArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if entry_id is None and not opts.urn:
                raise TypeError("Missing required property 'entry_id'")
            __props__.__dict__["entry_id"] = entry_id
            __props__.__dict__["profile_id"] = profile_id
            __props__.__dict__["confidence"] = None
            __props__.__dict__["name"] = None
        super(ZeroTrustDlpPredefinedEntry, __self__).__init__(
            'cloudflare:index/zeroTrustDlpPredefinedEntry:ZeroTrustDlpPredefinedEntry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            confidence: Optional[pulumi.Input[Union['ZeroTrustDlpPredefinedEntryConfidenceArgs', 'ZeroTrustDlpPredefinedEntryConfidenceArgsDict']]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            entry_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            profile_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ZeroTrustDlpPredefinedEntry':
        """
        Get an existing ZeroTrustDlpPredefinedEntry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] profile_id: This field is not actually used as the owning profile for a predefined entry is already set
               to a predefined profile
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZeroTrustDlpPredefinedEntryState.__new__(_ZeroTrustDlpPredefinedEntryState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["confidence"] = confidence
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["entry_id"] = entry_id
        __props__.__dict__["name"] = name
        __props__.__dict__["profile_id"] = profile_id
        return ZeroTrustDlpPredefinedEntry(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> pulumi.Output['outputs.ZeroTrustDlpPredefinedEntryConfidence']:
        return pulumi.get(self, "confidence")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "entry_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        This field is not actually used as the owning profile for a predefined entry is already set
        to a predefined profile
        """
        return pulumi.get(self, "profile_id")

