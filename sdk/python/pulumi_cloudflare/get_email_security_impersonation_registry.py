# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEmailSecurityImpersonationRegistryResult',
    'AwaitableGetEmailSecurityImpersonationRegistryResult',
    'get_email_security_impersonation_registry',
    'get_email_security_impersonation_registry_output',
]

@pulumi.output_type
class GetEmailSecurityImpersonationRegistryResult:
    """
    A collection of values returned by getEmailSecurityImpersonationRegistry.
    """
    def __init__(__self__, account_id=None, comments=None, created_at=None, directory_id=None, directory_node_id=None, display_name_id=None, email=None, external_directory_node_id=None, filter=None, id=None, is_email_regex=None, last_modified=None, name=None, provenance=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if directory_id and not isinstance(directory_id, int):
            raise TypeError("Expected argument 'directory_id' to be a int")
        pulumi.set(__self__, "directory_id", directory_id)
        if directory_node_id and not isinstance(directory_node_id, int):
            raise TypeError("Expected argument 'directory_node_id' to be a int")
        pulumi.set(__self__, "directory_node_id", directory_node_id)
        if display_name_id and not isinstance(display_name_id, int):
            raise TypeError("Expected argument 'display_name_id' to be a int")
        pulumi.set(__self__, "display_name_id", display_name_id)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if external_directory_node_id and not isinstance(external_directory_node_id, str):
            raise TypeError("Expected argument 'external_directory_node_id' to be a str")
        pulumi.set(__self__, "external_directory_node_id", external_directory_node_id)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if is_email_regex and not isinstance(is_email_regex, bool):
            raise TypeError("Expected argument 'is_email_regex' to be a bool")
        pulumi.set(__self__, "is_email_regex", is_email_regex)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provenance and not isinstance(provenance, str):
            raise TypeError("Expected argument 'provenance' to be a str")
        pulumi.set(__self__, "provenance", provenance)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Account Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> builtins.int:
        return pulumi.get(self, "directory_id")

    @property
    @pulumi.getter(name="directoryNodeId")
    def directory_node_id(self) -> builtins.int:
        return pulumi.get(self, "directory_node_id")

    @property
    @pulumi.getter(name="displayNameId")
    def display_name_id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "display_name_id")

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="externalDirectoryNodeId")
    @_utilities.deprecated("""This attribute is deprecated.""")
    def external_directory_node_id(self) -> builtins.str:
        return pulumi.get(self, "external_directory_node_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetEmailSecurityImpersonationRegistryFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEmailRegex")
    def is_email_regex(self) -> builtins.bool:
        return pulumi.get(self, "is_email_regex")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> builtins.str:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def provenance(self) -> builtins.str:
        return pulumi.get(self, "provenance")


class AwaitableGetEmailSecurityImpersonationRegistryResult(GetEmailSecurityImpersonationRegistryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEmailSecurityImpersonationRegistryResult(
            account_id=self.account_id,
            comments=self.comments,
            created_at=self.created_at,
            directory_id=self.directory_id,
            directory_node_id=self.directory_node_id,
            display_name_id=self.display_name_id,
            email=self.email,
            external_directory_node_id=self.external_directory_node_id,
            filter=self.filter,
            id=self.id,
            is_email_regex=self.is_email_regex,
            last_modified=self.last_modified,
            name=self.name,
            provenance=self.provenance)


def get_email_security_impersonation_registry(account_id: Optional[builtins.str] = None,
                                              display_name_id: Optional[builtins.int] = None,
                                              filter: Optional[Union['GetEmailSecurityImpersonationRegistryFilterArgs', 'GetEmailSecurityImpersonationRegistryFilterArgsDict']] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEmailSecurityImpersonationRegistryResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_email_security_impersonation_registry = cloudflare.get_email_security_impersonation_registry(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        display_name_id=2403)
    ```


    :param builtins.str account_id: Account Identifier
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['displayNameId'] = display_name_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getEmailSecurityImpersonationRegistry:getEmailSecurityImpersonationRegistry', __args__, opts=opts, typ=GetEmailSecurityImpersonationRegistryResult).value

    return AwaitableGetEmailSecurityImpersonationRegistryResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        comments=pulumi.get(__ret__, 'comments'),
        created_at=pulumi.get(__ret__, 'created_at'),
        directory_id=pulumi.get(__ret__, 'directory_id'),
        directory_node_id=pulumi.get(__ret__, 'directory_node_id'),
        display_name_id=pulumi.get(__ret__, 'display_name_id'),
        email=pulumi.get(__ret__, 'email'),
        external_directory_node_id=pulumi.get(__ret__, 'external_directory_node_id'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        is_email_regex=pulumi.get(__ret__, 'is_email_regex'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        provenance=pulumi.get(__ret__, 'provenance'))
def get_email_security_impersonation_registry_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                                     display_name_id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                     filter: Optional[pulumi.Input[Optional[Union['GetEmailSecurityImpersonationRegistryFilterArgs', 'GetEmailSecurityImpersonationRegistryFilterArgsDict']]]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEmailSecurityImpersonationRegistryResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_email_security_impersonation_registry = cloudflare.get_email_security_impersonation_registry(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        display_name_id=2403)
    ```


    :param builtins.str account_id: Account Identifier
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['displayNameId'] = display_name_id
    __args__['filter'] = filter
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getEmailSecurityImpersonationRegistry:getEmailSecurityImpersonationRegistry', __args__, opts=opts, typ=GetEmailSecurityImpersonationRegistryResult)
    return __ret__.apply(lambda __response__: GetEmailSecurityImpersonationRegistryResult(
        account_id=pulumi.get(__response__, 'account_id'),
        comments=pulumi.get(__response__, 'comments'),
        created_at=pulumi.get(__response__, 'created_at'),
        directory_id=pulumi.get(__response__, 'directory_id'),
        directory_node_id=pulumi.get(__response__, 'directory_node_id'),
        display_name_id=pulumi.get(__response__, 'display_name_id'),
        email=pulumi.get(__response__, 'email'),
        external_directory_node_id=pulumi.get(__response__, 'external_directory_node_id'),
        filter=pulumi.get(__response__, 'filter'),
        id=pulumi.get(__response__, 'id'),
        is_email_regex=pulumi.get(__response__, 'is_email_regex'),
        last_modified=pulumi.get(__response__, 'last_modified'),
        name=pulumi.get(__response__, 'name'),
        provenance=pulumi.get(__response__, 'provenance')))
