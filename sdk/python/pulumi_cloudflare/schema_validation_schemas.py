# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SchemaValidationSchemasArgs', 'SchemaValidationSchemas']

@pulumi.input_type
class SchemaValidationSchemasArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 source: pulumi.Input[_builtins.str],
                 validation_enabled: pulumi.Input[_builtins.bool],
                 zone_id: pulumi.Input[_builtins.str]):
        """
        The set of arguments for constructing a SchemaValidationSchemas resource.
        :param pulumi.Input[_builtins.str] kind: The kind of the schema
               Available values: "openapi_v3".
        :param pulumi.Input[_builtins.str] name: A human-readable name for the schema
        :param pulumi.Input[_builtins.str] source: The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        :param pulumi.Input[_builtins.bool] validation_enabled: An indicator if this schema is enabled
        :param pulumi.Input[_builtins.str] zone_id: Identifier.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "validation_enabled", validation_enabled)
        pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        The kind of the schema
        Available values: "openapi_v3".
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        A human-readable name for the schema
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input[_builtins.str]:
        """
        The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="validationEnabled")
    def validation_enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        An indicator if this schema is enabled
        """
        return pulumi.get(self, "validation_enabled")

    @validation_enabled.setter
    def validation_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "validation_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[_builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _SchemaValidationSchemasState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 schema_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SchemaValidationSchemas resources.
        :param pulumi.Input[_builtins.str] kind: The kind of the schema
               Available values: "openapi_v3".
        :param pulumi.Input[_builtins.str] name: A human-readable name for the schema
        :param pulumi.Input[_builtins.str] schema_id: A unique identifier of this schema
        :param pulumi.Input[_builtins.str] source: The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        :param pulumi.Input[_builtins.bool] validation_enabled: An indicator if this schema is enabled
        :param pulumi.Input[_builtins.str] zone_id: Identifier.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if validation_enabled is not None:
            pulumi.set(__self__, "validation_enabled", validation_enabled)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The kind of the schema
        Available values: "openapi_v3".
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A human-readable name for the schema
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique identifier of this schema
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "schema_id", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="validationEnabled")
    def validation_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        An indicator if this schema is enabled
        """
        return pulumi.get(self, "validation_enabled")

    @validation_enabled.setter
    def validation_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "validation_enabled", value)

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.type_token("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas")
class SchemaValidationSchemas(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_schema_validation_schemas = cloudflare.SchemaValidationSchemas("example_schema_validation_schemas",
            zone_id="023e105f4ecef8ad9ca31a8372d0c353",
            kind="openapi_v3",
            name="petstore schema",
            source="<schema file contents>",
            validation_enabled=True)
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas example '<zone_id>/<schema_id>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] kind: The kind of the schema
               Available values: "openapi_v3".
        :param pulumi.Input[_builtins.str] name: A human-readable name for the schema
        :param pulumi.Input[_builtins.str] source: The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        :param pulumi.Input[_builtins.bool] validation_enabled: An indicator if this schema is enabled
        :param pulumi.Input[_builtins.str] zone_id: Identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchemaValidationSchemasArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_schema_validation_schemas = cloudflare.SchemaValidationSchemas("example_schema_validation_schemas",
            zone_id="023e105f4ecef8ad9ca31a8372d0c353",
            kind="openapi_v3",
            name="petstore schema",
            source="<schema file contents>",
            validation_enabled=True)
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas example '<zone_id>/<schema_id>'
        ```

        :param str resource_name: The name of the resource.
        :param SchemaValidationSchemasArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchemaValidationSchemasArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 zone_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchemaValidationSchemasArgs.__new__(SchemaValidationSchemasArgs)

            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if validation_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'validation_enabled'")
            __props__.__dict__["validation_enabled"] = validation_enabled
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["schema_id"] = None
        super(SchemaValidationSchemas, __self__).__init__(
            'cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            kind: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            schema_id: Optional[pulumi.Input[_builtins.str]] = None,
            source: Optional[pulumi.Input[_builtins.str]] = None,
            validation_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            zone_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'SchemaValidationSchemas':
        """
        Get an existing SchemaValidationSchemas resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] kind: The kind of the schema
               Available values: "openapi_v3".
        :param pulumi.Input[_builtins.str] name: A human-readable name for the schema
        :param pulumi.Input[_builtins.str] schema_id: A unique identifier of this schema
        :param pulumi.Input[_builtins.str] source: The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        :param pulumi.Input[_builtins.bool] validation_enabled: An indicator if this schema is enabled
        :param pulumi.Input[_builtins.str] zone_id: Identifier.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchemaValidationSchemasState.__new__(_SchemaValidationSchemasState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["schema_id"] = schema_id
        __props__.__dict__["source"] = source
        __props__.__dict__["validation_enabled"] = validation_enabled
        __props__.__dict__["zone_id"] = zone_id
        return SchemaValidationSchemas(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Output[_builtins.str]:
        """
        The kind of the schema
        Available values: "openapi_v3".
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        A human-readable name for the schema
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> pulumi.Output[_builtins.str]:
        """
        A unique identifier of this schema
        """
        return pulumi.get(self, "schema_id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Output[_builtins.str]:
        """
        The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="validationEnabled")
    def validation_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        An indicator if this schema is enabled
        """
        return pulumi.get(self, "validation_enabled")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "zone_id")

