# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZeroTrustOrganizationArgs', 'ZeroTrustOrganization']

@pulumi.input_type
class ZeroTrustOrganizationArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 allow_authenticate_via_warp: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_domain: Optional[pulumi.Input[builtins.str]] = None,
                 auto_redirect_to_identity: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_pages: Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']] = None,
                 is_ui_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 login_design: Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 ui_read_only_toggle_reason: Optional[pulumi.Input[builtins.str]] = None,
                 user_seat_expiration_inactive_time: Optional[pulumi.Input[builtins.str]] = None,
                 warp_auth_session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ZeroTrustOrganization resource.
        :param pulumi.Input[builtins.str] account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        :param pulumi.Input[builtins.bool] allow_authenticate_via_warp: When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        :param pulumi.Input[builtins.str] auth_domain: The unique subdomain assigned to your Zero Trust organization.
        :param pulumi.Input[builtins.bool] auto_redirect_to_identity: When set to `true`, users skip the identity provider selection step during login.
        :param pulumi.Input[builtins.str] name: The name of your Zero Trust organization.
        :param pulumi.Input[builtins.str] session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        :param pulumi.Input[builtins.str] ui_read_only_toggle_reason: A description of the reason why the UI read only field is being toggled.
        :param pulumi.Input[builtins.str] user_seat_expiration_inactive_time: The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        :param pulumi.Input[builtins.str] warp_auth_session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        :param pulumi.Input[builtins.str] zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allow_authenticate_via_warp is not None:
            pulumi.set(__self__, "allow_authenticate_via_warp", allow_authenticate_via_warp)
        if auth_domain is not None:
            pulumi.set(__self__, "auth_domain", auth_domain)
        if auto_redirect_to_identity is not None:
            pulumi.set(__self__, "auto_redirect_to_identity", auto_redirect_to_identity)
        if custom_pages is not None:
            pulumi.set(__self__, "custom_pages", custom_pages)
        if is_ui_read_only is not None:
            pulumi.set(__self__, "is_ui_read_only", is_ui_read_only)
        if login_design is not None:
            pulumi.set(__self__, "login_design", login_design)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if ui_read_only_toggle_reason is not None:
            pulumi.set(__self__, "ui_read_only_toggle_reason", ui_read_only_toggle_reason)
        if user_seat_expiration_inactive_time is not None:
            pulumi.set(__self__, "user_seat_expiration_inactive_time", user_seat_expiration_inactive_time)
        if warp_auth_session_duration is not None:
            pulumi.set(__self__, "warp_auth_session_duration", warp_auth_session_duration)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="allowAuthenticateViaWarp")
    def allow_authenticate_via_warp(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        """
        return pulumi.get(self, "allow_authenticate_via_warp")

    @allow_authenticate_via_warp.setter
    def allow_authenticate_via_warp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_authenticate_via_warp", value)

    @property
    @pulumi.getter(name="authDomain")
    def auth_domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique subdomain assigned to your Zero Trust organization.
        """
        return pulumi.get(self, "auth_domain")

    @auth_domain.setter
    def auth_domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auth_domain", value)

    @property
    @pulumi.getter(name="autoRedirectToIdentity")
    def auto_redirect_to_identity(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set to `true`, users skip the identity provider selection step during login.
        """
        return pulumi.get(self, "auto_redirect_to_identity")

    @auto_redirect_to_identity.setter
    def auto_redirect_to_identity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_redirect_to_identity", value)

    @property
    @pulumi.getter(name="customPages")
    def custom_pages(self) -> Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']]:
        return pulumi.get(self, "custom_pages")

    @custom_pages.setter
    def custom_pages(self, value: Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']]):
        pulumi.set(self, "custom_pages", value)

    @property
    @pulumi.getter(name="isUiReadOnly")
    def is_ui_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_ui_read_only")

    @is_ui_read_only.setter
    def is_ui_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_ui_read_only", value)

    @property
    @pulumi.getter(name="loginDesign")
    def login_design(self) -> Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']]:
        return pulumi.get(self, "login_design")

    @login_design.setter
    def login_design(self, value: Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']]):
        pulumi.set(self, "login_design", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of your Zero Trust organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        """
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="uiReadOnlyToggleReason")
    def ui_read_only_toggle_reason(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the reason why the UI read only field is being toggled.
        """
        return pulumi.get(self, "ui_read_only_toggle_reason")

    @ui_read_only_toggle_reason.setter
    def ui_read_only_toggle_reason(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ui_read_only_toggle_reason", value)

    @property
    @pulumi.getter(name="userSeatExpirationInactiveTime")
    def user_seat_expiration_inactive_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        """
        return pulumi.get(self, "user_seat_expiration_inactive_time")

    @user_seat_expiration_inactive_time.setter
    def user_seat_expiration_inactive_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_seat_expiration_inactive_time", value)

    @property
    @pulumi.getter(name="warpAuthSessionDuration")
    def warp_auth_session_duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        """
        return pulumi.get(self, "warp_auth_session_duration")

    @warp_auth_session_duration.setter
    def warp_auth_session_duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "warp_auth_session_duration", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _ZeroTrustOrganizationState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 allow_authenticate_via_warp: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_domain: Optional[pulumi.Input[builtins.str]] = None,
                 auto_redirect_to_identity: Optional[pulumi.Input[builtins.bool]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 custom_pages: Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']] = None,
                 is_ui_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 login_design: Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 ui_read_only_toggle_reason: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None,
                 user_seat_expiration_inactive_time: Optional[pulumi.Input[builtins.str]] = None,
                 warp_auth_session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ZeroTrustOrganization resources.
        :param pulumi.Input[builtins.str] account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        :param pulumi.Input[builtins.bool] allow_authenticate_via_warp: When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        :param pulumi.Input[builtins.str] auth_domain: The unique subdomain assigned to your Zero Trust organization.
        :param pulumi.Input[builtins.bool] auto_redirect_to_identity: When set to `true`, users skip the identity provider selection step during login.
        :param pulumi.Input[builtins.str] name: The name of your Zero Trust organization.
        :param pulumi.Input[builtins.str] session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        :param pulumi.Input[builtins.str] ui_read_only_toggle_reason: A description of the reason why the UI read only field is being toggled.
        :param pulumi.Input[builtins.str] user_seat_expiration_inactive_time: The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        :param pulumi.Input[builtins.str] warp_auth_session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        :param pulumi.Input[builtins.str] zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if allow_authenticate_via_warp is not None:
            pulumi.set(__self__, "allow_authenticate_via_warp", allow_authenticate_via_warp)
        if auth_domain is not None:
            pulumi.set(__self__, "auth_domain", auth_domain)
        if auto_redirect_to_identity is not None:
            pulumi.set(__self__, "auto_redirect_to_identity", auto_redirect_to_identity)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_pages is not None:
            pulumi.set(__self__, "custom_pages", custom_pages)
        if is_ui_read_only is not None:
            pulumi.set(__self__, "is_ui_read_only", is_ui_read_only)
        if login_design is not None:
            pulumi.set(__self__, "login_design", login_design)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if ui_read_only_toggle_reason is not None:
            pulumi.set(__self__, "ui_read_only_toggle_reason", ui_read_only_toggle_reason)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_seat_expiration_inactive_time is not None:
            pulumi.set(__self__, "user_seat_expiration_inactive_time", user_seat_expiration_inactive_time)
        if warp_auth_session_duration is not None:
            pulumi.set(__self__, "warp_auth_session_duration", warp_auth_session_duration)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="allowAuthenticateViaWarp")
    def allow_authenticate_via_warp(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        """
        return pulumi.get(self, "allow_authenticate_via_warp")

    @allow_authenticate_via_warp.setter
    def allow_authenticate_via_warp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_authenticate_via_warp", value)

    @property
    @pulumi.getter(name="authDomain")
    def auth_domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique subdomain assigned to your Zero Trust organization.
        """
        return pulumi.get(self, "auth_domain")

    @auth_domain.setter
    def auth_domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "auth_domain", value)

    @property
    @pulumi.getter(name="autoRedirectToIdentity")
    def auto_redirect_to_identity(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        When set to `true`, users skip the identity provider selection step during login.
        """
        return pulumi.get(self, "auto_redirect_to_identity")

    @auto_redirect_to_identity.setter
    def auto_redirect_to_identity(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "auto_redirect_to_identity", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customPages")
    def custom_pages(self) -> Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']]:
        return pulumi.get(self, "custom_pages")

    @custom_pages.setter
    def custom_pages(self, value: Optional[pulumi.Input['ZeroTrustOrganizationCustomPagesArgs']]):
        pulumi.set(self, "custom_pages", value)

    @property
    @pulumi.getter(name="isUiReadOnly")
    def is_ui_read_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_ui_read_only")

    @is_ui_read_only.setter
    def is_ui_read_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_ui_read_only", value)

    @property
    @pulumi.getter(name="loginDesign")
    def login_design(self) -> Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']]:
        return pulumi.get(self, "login_design")

    @login_design.setter
    def login_design(self, value: Optional[pulumi.Input['ZeroTrustOrganizationLoginDesignArgs']]):
        pulumi.set(self, "login_design", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of your Zero Trust organization.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        """
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter(name="uiReadOnlyToggleReason")
    def ui_read_only_toggle_reason(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A description of the reason why the UI read only field is being toggled.
        """
        return pulumi.get(self, "ui_read_only_toggle_reason")

    @ui_read_only_toggle_reason.setter
    def ui_read_only_toggle_reason(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ui_read_only_toggle_reason", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="userSeatExpirationInactiveTime")
    def user_seat_expiration_inactive_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        """
        return pulumi.get(self, "user_seat_expiration_inactive_time")

    @user_seat_expiration_inactive_time.setter
    def user_seat_expiration_inactive_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_seat_expiration_inactive_time", value)

    @property
    @pulumi.getter(name="warpAuthSessionDuration")
    def warp_auth_session_duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        """
        return pulumi.get(self, "warp_auth_session_duration")

    @warp_auth_session_duration.setter
    def warp_auth_session_duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "warp_auth_session_duration", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


class ZeroTrustOrganization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 allow_authenticate_via_warp: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_domain: Optional[pulumi.Input[builtins.str]] = None,
                 auto_redirect_to_identity: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_pages: Optional[pulumi.Input[Union['ZeroTrustOrganizationCustomPagesArgs', 'ZeroTrustOrganizationCustomPagesArgsDict']]] = None,
                 is_ui_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 login_design: Optional[pulumi.Input[Union['ZeroTrustOrganizationLoginDesignArgs', 'ZeroTrustOrganizationLoginDesignArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 ui_read_only_toggle_reason: Optional[pulumi.Input[builtins.str]] = None,
                 user_seat_expiration_inactive_time: Optional[pulumi.Input[builtins.str]] = None,
                 warp_auth_session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        :param pulumi.Input[builtins.bool] allow_authenticate_via_warp: When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        :param pulumi.Input[builtins.str] auth_domain: The unique subdomain assigned to your Zero Trust organization.
        :param pulumi.Input[builtins.bool] auto_redirect_to_identity: When set to `true`, users skip the identity provider selection step during login.
        :param pulumi.Input[builtins.str] name: The name of your Zero Trust organization.
        :param pulumi.Input[builtins.str] session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        :param pulumi.Input[builtins.str] ui_read_only_toggle_reason: A description of the reason why the UI read only field is being toggled.
        :param pulumi.Input[builtins.str] user_seat_expiration_inactive_time: The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        :param pulumi.Input[builtins.str] warp_auth_session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        :param pulumi.Input[builtins.str] zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZeroTrustOrganizationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ZeroTrustOrganizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZeroTrustOrganizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 allow_authenticate_via_warp: Optional[pulumi.Input[builtins.bool]] = None,
                 auth_domain: Optional[pulumi.Input[builtins.str]] = None,
                 auto_redirect_to_identity: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_pages: Optional[pulumi.Input[Union['ZeroTrustOrganizationCustomPagesArgs', 'ZeroTrustOrganizationCustomPagesArgsDict']]] = None,
                 is_ui_read_only: Optional[pulumi.Input[builtins.bool]] = None,
                 login_design: Optional[pulumi.Input[Union['ZeroTrustOrganizationLoginDesignArgs', 'ZeroTrustOrganizationLoginDesignArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 ui_read_only_toggle_reason: Optional[pulumi.Input[builtins.str]] = None,
                 user_seat_expiration_inactive_time: Optional[pulumi.Input[builtins.str]] = None,
                 warp_auth_session_duration: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZeroTrustOrganizationArgs.__new__(ZeroTrustOrganizationArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["allow_authenticate_via_warp"] = allow_authenticate_via_warp
            __props__.__dict__["auth_domain"] = auth_domain
            __props__.__dict__["auto_redirect_to_identity"] = auto_redirect_to_identity
            __props__.__dict__["custom_pages"] = custom_pages
            __props__.__dict__["is_ui_read_only"] = is_ui_read_only
            __props__.__dict__["login_design"] = login_design
            __props__.__dict__["name"] = name
            __props__.__dict__["session_duration"] = session_duration
            __props__.__dict__["ui_read_only_toggle_reason"] = ui_read_only_toggle_reason
            __props__.__dict__["user_seat_expiration_inactive_time"] = user_seat_expiration_inactive_time
            __props__.__dict__["warp_auth_session_duration"] = warp_auth_session_duration
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="cloudflare:index/accessOrganization:AccessOrganization")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(ZeroTrustOrganization, __self__).__init__(
            'cloudflare:index/zeroTrustOrganization:ZeroTrustOrganization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            allow_authenticate_via_warp: Optional[pulumi.Input[builtins.bool]] = None,
            auth_domain: Optional[pulumi.Input[builtins.str]] = None,
            auto_redirect_to_identity: Optional[pulumi.Input[builtins.bool]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            custom_pages: Optional[pulumi.Input[Union['ZeroTrustOrganizationCustomPagesArgs', 'ZeroTrustOrganizationCustomPagesArgsDict']]] = None,
            is_ui_read_only: Optional[pulumi.Input[builtins.bool]] = None,
            login_design: Optional[pulumi.Input[Union['ZeroTrustOrganizationLoginDesignArgs', 'ZeroTrustOrganizationLoginDesignArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            session_duration: Optional[pulumi.Input[builtins.str]] = None,
            ui_read_only_toggle_reason: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None,
            user_seat_expiration_inactive_time: Optional[pulumi.Input[builtins.str]] = None,
            warp_auth_session_duration: Optional[pulumi.Input[builtins.str]] = None,
            zone_id: Optional[pulumi.Input[builtins.str]] = None) -> 'ZeroTrustOrganization':
        """
        Get an existing ZeroTrustOrganization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        :param pulumi.Input[builtins.bool] allow_authenticate_via_warp: When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        :param pulumi.Input[builtins.str] auth_domain: The unique subdomain assigned to your Zero Trust organization.
        :param pulumi.Input[builtins.bool] auto_redirect_to_identity: When set to `true`, users skip the identity provider selection step during login.
        :param pulumi.Input[builtins.str] name: The name of your Zero Trust organization.
        :param pulumi.Input[builtins.str] session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        :param pulumi.Input[builtins.str] ui_read_only_toggle_reason: A description of the reason why the UI read only field is being toggled.
        :param pulumi.Input[builtins.str] user_seat_expiration_inactive_time: The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        :param pulumi.Input[builtins.str] warp_auth_session_duration: The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        :param pulumi.Input[builtins.str] zone_id: The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZeroTrustOrganizationState.__new__(_ZeroTrustOrganizationState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["allow_authenticate_via_warp"] = allow_authenticate_via_warp
        __props__.__dict__["auth_domain"] = auth_domain
        __props__.__dict__["auto_redirect_to_identity"] = auto_redirect_to_identity
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_pages"] = custom_pages
        __props__.__dict__["is_ui_read_only"] = is_ui_read_only
        __props__.__dict__["login_design"] = login_design
        __props__.__dict__["name"] = name
        __props__.__dict__["session_duration"] = session_duration
        __props__.__dict__["ui_read_only_toggle_reason"] = ui_read_only_toggle_reason
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_seat_expiration_inactive_time"] = user_seat_expiration_inactive_time
        __props__.__dict__["warp_auth_session_duration"] = warp_auth_session_duration
        __props__.__dict__["zone_id"] = zone_id
        return ZeroTrustOrganization(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="allowAuthenticateViaWarp")
    def allow_authenticate_via_warp(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
        """
        return pulumi.get(self, "allow_authenticate_via_warp")

    @property
    @pulumi.getter(name="authDomain")
    def auth_domain(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique subdomain assigned to your Zero Trust organization.
        """
        return pulumi.get(self, "auth_domain")

    @property
    @pulumi.getter(name="autoRedirectToIdentity")
    def auto_redirect_to_identity(self) -> pulumi.Output[builtins.bool]:
        """
        When set to `true`, users skip the identity provider selection step during login.
        """
        return pulumi.get(self, "auto_redirect_to_identity")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customPages")
    def custom_pages(self) -> pulumi.Output['outputs.ZeroTrustOrganizationCustomPages']:
        return pulumi.get(self, "custom_pages")

    @property
    @pulumi.getter(name="isUiReadOnly")
    def is_ui_read_only(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_ui_read_only")

    @property
    @pulumi.getter(name="loginDesign")
    def login_design(self) -> pulumi.Output['outputs.ZeroTrustOrganizationLoginDesign']:
        return pulumi.get(self, "login_design")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of your Zero Trust organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
        """
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter(name="uiReadOnlyToggleReason")
    def ui_read_only_toggle_reason(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        A description of the reason why the UI read only field is being toggled.
        """
        return pulumi.get(self, "ui_read_only_toggle_reason")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="userSeatExpirationInactiveTime")
    def user_seat_expiration_inactive_time(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
        """
        return pulumi.get(self, "user_seat_expiration_inactive_time")

    @property
    @pulumi.getter(name="warpAuthSessionDuration")
    def warp_auth_session_duration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
        """
        return pulumi.get(self, "warp_auth_session_duration")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
        """
        return pulumi.get(self, "zone_id")

