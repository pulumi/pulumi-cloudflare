# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WorkersForPlatformsNamespaceArgs', 'WorkersForPlatformsNamespace']

@pulumi.input_type
class WorkersForPlatformsNamespaceArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[builtins.str],
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a WorkersForPlatformsNamespace resource.
        :param pulumi.Input[builtins.str] account_id: Identifier.
        :param pulumi.Input[builtins.str] name: The name of the dispatch namespace
        """
        pulumi.set(__self__, "account_id", account_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the dispatch namespace
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _WorkersForPlatformsNamespaceState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 created_by: Optional[pulumi.Input[builtins.str]] = None,
                 created_on: Optional[pulumi.Input[builtins.str]] = None,
                 modified_by: Optional[pulumi.Input[builtins.str]] = None,
                 modified_on: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_id: Optional[pulumi.Input[builtins.str]] = None,
                 namespace_name: Optional[pulumi.Input[builtins.str]] = None,
                 script_count: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering WorkersForPlatformsNamespace resources.
        :param pulumi.Input[builtins.str] account_id: Identifier.
        :param pulumi.Input[builtins.str] created_by: Identifier.
        :param pulumi.Input[builtins.str] created_on: When the script was created.
        :param pulumi.Input[builtins.str] modified_by: Identifier.
        :param pulumi.Input[builtins.str] modified_on: When the script was last modified.
        :param pulumi.Input[builtins.str] name: The name of the dispatch namespace
        :param pulumi.Input[builtins.str] namespace_id: API Resource UUID tag.
        :param pulumi.Input[builtins.str] namespace_name: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.int] script_count: The current number of scripts in this Dispatch Namespace
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_on is not None:
            pulumi.set(__self__, "created_on", created_on)
        if modified_by is not None:
            pulumi.set(__self__, "modified_by", modified_by)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if script_count is not None:
            pulumi.set(__self__, "script_count", script_count)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When the script was created.
        """
        return pulumi.get(self, "created_on")

    @created_on.setter
    def created_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_on", value)

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Identifier.
        """
        return pulumi.get(self, "modified_by")

    @modified_by.setter
    def modified_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_by", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        When the script was last modified.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the dispatch namespace
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        API Resource UUID tag.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="scriptCount")
    def script_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The current number of scripts in this Dispatch Namespace
        """
        return pulumi.get(self, "script_count")

    @script_count.setter
    def script_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "script_count", value)


warnings.warn("""cloudflare.index/workersforplatformsnamespace.WorkersForPlatformsNamespace has been deprecated in favor of cloudflare.index/workersforplatformsdispatchnamespace.WorkersForPlatformsDispatchNamespace""", DeprecationWarning)


@pulumi.type_token("cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace")
class WorkersForPlatformsNamespace(pulumi.CustomResource):
    warnings.warn("""cloudflare.index/workersforplatformsnamespace.WorkersForPlatformsNamespace has been deprecated in favor of cloudflare.index/workersforplatformsdispatchnamespace.WorkersForPlatformsDispatchNamespace""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workers_for_platforms_dispatch_namespace = cloudflare.WorkersForPlatformsDispatchNamespace("example_workers_for_platforms_dispatch_namespace",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            name="my-dispatch-namespace")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace example '<account_id>/<dispatch_namespace>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: Identifier.
        :param pulumi.Input[builtins.str] name: The name of the dispatch namespace
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkersForPlatformsNamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_workers_for_platforms_dispatch_namespace = cloudflare.WorkersForPlatformsDispatchNamespace("example_workers_for_platforms_dispatch_namespace",
            account_id="023e105f4ecef8ad9ca31a8372d0c353",
            name="my-dispatch-namespace")
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace example '<account_id>/<dispatch_namespace>'
        ```

        :param str resource_name: The name of the resource.
        :param WorkersForPlatformsNamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkersForPlatformsNamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        pulumi.log.warn("""WorkersForPlatformsNamespace is deprecated: cloudflare.index/workersforplatformsnamespace.WorkersForPlatformsNamespace has been deprecated in favor of cloudflare.index/workersforplatformsdispatchnamespace.WorkersForPlatformsDispatchNamespace""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkersForPlatformsNamespaceArgs.__new__(WorkersForPlatformsNamespaceArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["name"] = name
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_on"] = None
            __props__.__dict__["modified_by"] = None
            __props__.__dict__["modified_on"] = None
            __props__.__dict__["namespace_id"] = None
            __props__.__dict__["namespace_name"] = None
            __props__.__dict__["script_count"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(WorkersForPlatformsNamespace, __self__).__init__(
            'cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            created_by: Optional[pulumi.Input[builtins.str]] = None,
            created_on: Optional[pulumi.Input[builtins.str]] = None,
            modified_by: Optional[pulumi.Input[builtins.str]] = None,
            modified_on: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            namespace_id: Optional[pulumi.Input[builtins.str]] = None,
            namespace_name: Optional[pulumi.Input[builtins.str]] = None,
            script_count: Optional[pulumi.Input[builtins.int]] = None) -> 'WorkersForPlatformsNamespace':
        """
        Get an existing WorkersForPlatformsNamespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: Identifier.
        :param pulumi.Input[builtins.str] created_by: Identifier.
        :param pulumi.Input[builtins.str] created_on: When the script was created.
        :param pulumi.Input[builtins.str] modified_by: Identifier.
        :param pulumi.Input[builtins.str] modified_on: When the script was last modified.
        :param pulumi.Input[builtins.str] name: The name of the dispatch namespace
        :param pulumi.Input[builtins.str] namespace_id: API Resource UUID tag.
        :param pulumi.Input[builtins.str] namespace_name: Name of the Workers for Platforms dispatch namespace.
        :param pulumi.Input[builtins.int] script_count: The current number of scripts in this Dispatch Namespace
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkersForPlatformsNamespaceState.__new__(_WorkersForPlatformsNamespaceState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_on"] = created_on
        __props__.__dict__["modified_by"] = modified_by
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["namespace_name"] = namespace_name
        __props__.__dict__["script_count"] = script_count
        return WorkersForPlatformsNamespace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> pulumi.Output[builtins.str]:
        """
        When the script was created.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> pulumi.Output[builtins.str]:
        """
        Identifier.
        """
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[builtins.str]:
        """
        When the script was last modified.
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the dispatch namespace
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[builtins.str]:
        """
        API Resource UUID tag.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Workers for Platforms dispatch namespace.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="scriptCount")
    def script_count(self) -> pulumi.Output[builtins.int]:
        """
        The current number of scripts in this Dispatch Namespace
        """
        return pulumi.get(self, "script_count")

