# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DnsZoneTransfersOutgoingArgs', 'DnsZoneTransfersOutgoing']

@pulumi.input_type
class DnsZoneTransfersOutgoingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 peers: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 zone_id: pulumi.Input[builtins.str]):
        """
        The set of arguments for constructing a DnsZoneTransfersOutgoing resource.
        :param pulumi.Input[builtins.str] name: Zone name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peers: A list of peer tags.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peers", peers)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        A list of peer tags.
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "peers", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class _DnsZoneTransfersOutgoingState:
    def __init__(__self__, *,
                 checked_time: Optional[pulumi.Input[builtins.str]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 last_transferred_time: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 soa_serial: Optional[pulumi.Input[builtins.float]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DnsZoneTransfersOutgoing resources.
        :param pulumi.Input[builtins.str] checked_time: The time for a specific event.
        :param pulumi.Input[builtins.str] created_time: The time for a specific event.
        :param pulumi.Input[builtins.str] last_transferred_time: The time for a specific event.
        :param pulumi.Input[builtins.str] name: Zone name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peers: A list of peer tags.
        :param pulumi.Input[builtins.float] soa_serial: The serial number of the SOA for the given zone.
        """
        if checked_time is not None:
            pulumi.set(__self__, "checked_time", checked_time)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if last_transferred_time is not None:
            pulumi.set(__self__, "last_transferred_time", last_transferred_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)
        if soa_serial is not None:
            pulumi.set(__self__, "soa_serial", soa_serial)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="checkedTime")
    def checked_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "checked_time")

    @checked_time.setter
    def checked_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "checked_time", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="lastTransferredTime")
    def last_transferred_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "last_transferred_time")

    @last_transferred_time.setter
    def last_transferred_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "last_transferred_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of peer tags.
        """
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "peers", value)

    @property
    @pulumi.getter(name="soaSerial")
    def soa_serial(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        The serial number of the SOA for the given zone.
        """
        return pulumi.get(self, "soa_serial")

    @soa_serial.setter
    def soa_serial(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "soa_serial", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


class DnsZoneTransfersOutgoing(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_dns_zone_transfers_outgoing = cloudflare.DnsZoneTransfersOutgoing("example_dns_zone_transfers_outgoing",
            zone_id="269d8f4853475ca241c4e730be286b20",
            name="www.example.com.",
            peers=[
                "23ff594956f20c2a721606e94745a8aa",
                "00920f38ce07c2e2f4df50b1f61d4194",
            ])
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] name: Zone name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peers: A list of peer tags.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsZoneTransfersOutgoingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudflare as cloudflare

        example_dns_zone_transfers_outgoing = cloudflare.DnsZoneTransfersOutgoing("example_dns_zone_transfers_outgoing",
            zone_id="269d8f4853475ca241c4e730be286b20",
            name="www.example.com.",
            peers=[
                "23ff594956f20c2a721606e94745a8aa",
                "00920f38ce07c2e2f4df50b1f61d4194",
            ])
        ```

        ## Import

        ```sh
        $ pulumi import cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing example '<zone_id>'
        ```

        :param str resource_name: The name of the resource.
        :param DnsZoneTransfersOutgoingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsZoneTransfersOutgoingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsZoneTransfersOutgoingArgs.__new__(DnsZoneTransfersOutgoingArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if peers is None and not opts.urn:
                raise TypeError("Missing required property 'peers'")
            __props__.__dict__["peers"] = peers
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["checked_time"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["last_transferred_time"] = None
            __props__.__dict__["soa_serial"] = None
        super(DnsZoneTransfersOutgoing, __self__).__init__(
            'cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            checked_time: Optional[pulumi.Input[builtins.str]] = None,
            created_time: Optional[pulumi.Input[builtins.str]] = None,
            last_transferred_time: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            peers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            soa_serial: Optional[pulumi.Input[builtins.float]] = None,
            zone_id: Optional[pulumi.Input[builtins.str]] = None) -> 'DnsZoneTransfersOutgoing':
        """
        Get an existing DnsZoneTransfersOutgoing resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] checked_time: The time for a specific event.
        :param pulumi.Input[builtins.str] created_time: The time for a specific event.
        :param pulumi.Input[builtins.str] last_transferred_time: The time for a specific event.
        :param pulumi.Input[builtins.str] name: Zone name.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] peers: A list of peer tags.
        :param pulumi.Input[builtins.float] soa_serial: The serial number of the SOA for the given zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsZoneTransfersOutgoingState.__new__(_DnsZoneTransfersOutgoingState)

        __props__.__dict__["checked_time"] = checked_time
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["last_transferred_time"] = last_transferred_time
        __props__.__dict__["name"] = name
        __props__.__dict__["peers"] = peers
        __props__.__dict__["soa_serial"] = soa_serial
        __props__.__dict__["zone_id"] = zone_id
        return DnsZoneTransfersOutgoing(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="checkedTime")
    def checked_time(self) -> pulumi.Output[builtins.str]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "checked_time")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[builtins.str]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="lastTransferredTime")
    def last_transferred_time(self) -> pulumi.Output[builtins.str]:
        """
        The time for a specific event.
        """
        return pulumi.get(self, "last_transferred_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Zone name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        A list of peer tags.
        """
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter(name="soaSerial")
    def soa_serial(self) -> pulumi.Output[builtins.float]:
        """
        The serial number of the SOA for the given zone.
        """
        return pulumi.get(self, "soa_serial")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "zone_id")

