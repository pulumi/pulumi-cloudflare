# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetZeroTrustAccessCustomPageResult',
    'AwaitableGetZeroTrustAccessCustomPageResult',
    'get_zero_trust_access_custom_page',
    'get_zero_trust_access_custom_page_output',
]

@pulumi.output_type
class GetZeroTrustAccessCustomPageResult:
    """
    A collection of values returned by getZeroTrustAccessCustomPage.
    """
    def __init__(__self__, account_id=None, app_count=None, created_at=None, custom_html=None, custom_page_id=None, id=None, name=None, type=None, uid=None, updated_at=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if app_count and not isinstance(app_count, int):
            raise TypeError("Expected argument 'app_count' to be a int")
        pulumi.set(__self__, "app_count", app_count)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if custom_html and not isinstance(custom_html, str):
            raise TypeError("Expected argument 'custom_html' to be a str")
        pulumi.set(__self__, "custom_html", custom_html)
        if custom_page_id and not isinstance(custom_page_id, str):
            raise TypeError("Expected argument 'custom_page_id' to be a str")
        pulumi.set(__self__, "custom_page_id", custom_page_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if uid and not isinstance(uid, str):
            raise TypeError("Expected argument 'uid' to be a str")
        pulumi.set(__self__, "uid", uid)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Identifier
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="appCount")
    def app_count(self) -> builtins.int:
        """
        Number of apps the custom page is assigned to.
        """
        return pulumi.get(self, "app_count")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customHtml")
    def custom_html(self) -> builtins.str:
        """
        Custom page HTML.
        """
        return pulumi.get(self, "custom_html")

    @property
    @pulumi.getter(name="customPageId")
    def custom_page_id(self) -> Optional[builtins.str]:
        """
        UUID
        """
        return pulumi.get(self, "custom_page_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        UUID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Custom page name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Custom page type.
        Available values: "identity_denied", "forbidden".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> builtins.str:
        """
        UUID
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        return pulumi.get(self, "updated_at")


class AwaitableGetZeroTrustAccessCustomPageResult(GetZeroTrustAccessCustomPageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZeroTrustAccessCustomPageResult(
            account_id=self.account_id,
            app_count=self.app_count,
            created_at=self.created_at,
            custom_html=self.custom_html,
            custom_page_id=self.custom_page_id,
            id=self.id,
            name=self.name,
            type=self.type,
            uid=self.uid,
            updated_at=self.updated_at)


def get_zero_trust_access_custom_page(account_id: Optional[builtins.str] = None,
                                      custom_page_id: Optional[builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZeroTrustAccessCustomPageResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_access_custom_page = cloudflare.get_zero_trust_access_custom_page(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        custom_page_id="f174e90a-fafe-4643-bbbc-4a0ed4fc8415")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str custom_page_id: UUID
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['customPageId'] = custom_page_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudflare:index/getZeroTrustAccessCustomPage:getZeroTrustAccessCustomPage', __args__, opts=opts, typ=GetZeroTrustAccessCustomPageResult).value

    return AwaitableGetZeroTrustAccessCustomPageResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        app_count=pulumi.get(__ret__, 'app_count'),
        created_at=pulumi.get(__ret__, 'created_at'),
        custom_html=pulumi.get(__ret__, 'custom_html'),
        custom_page_id=pulumi.get(__ret__, 'custom_page_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'),
        uid=pulumi.get(__ret__, 'uid'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_zero_trust_access_custom_page_output(account_id: Optional[pulumi.Input[builtins.str]] = None,
                                             custom_page_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetZeroTrustAccessCustomPageResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudflare as cloudflare

    example_zero_trust_access_custom_page = cloudflare.get_zero_trust_access_custom_page(account_id="023e105f4ecef8ad9ca31a8372d0c353",
        custom_page_id="f174e90a-fafe-4643-bbbc-4a0ed4fc8415")
    ```


    :param builtins.str account_id: Identifier
    :param builtins.str custom_page_id: UUID
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    __args__['customPageId'] = custom_page_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudflare:index/getZeroTrustAccessCustomPage:getZeroTrustAccessCustomPage', __args__, opts=opts, typ=GetZeroTrustAccessCustomPageResult)
    return __ret__.apply(lambda __response__: GetZeroTrustAccessCustomPageResult(
        account_id=pulumi.get(__response__, 'account_id'),
        app_count=pulumi.get(__response__, 'app_count'),
        created_at=pulumi.get(__response__, 'created_at'),
        custom_html=pulumi.get(__response__, 'custom_html'),
        custom_page_id=pulumi.get(__response__, 'custom_page_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        type=pulumi.get(__response__, 'type'),
        uid=pulumi.get(__response__, 'uid'),
        updated_at=pulumi.get(__response__, 'updated_at')))
