// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Web3 hostnames for IPFS and Ethereum gateways.
type Web3Hostname struct {
	pulumi.CustomResourceState

	// Creation time.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// An optional description of the hostname.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DNSLink value used if the target is ipfs.
	Dnslink pulumi.StringPtrOutput `pulumi:"dnslink"`
	// Last modification time.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// The hostname that will point to the target gateway via CNAME.
	Name pulumi.StringOutput `pulumi:"name"`
	// Status of the hostname's activation.
	Status pulumi.StringOutput `pulumi:"status"`
	// Target gateway of the hostname.
	Target pulumi.StringOutput `pulumi:"target"`
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewWeb3Hostname registers a new resource with the given unique name, arguments, and options.
func NewWeb3Hostname(ctx *pulumi.Context,
	name string, args *Web3HostnameArgs, opts ...pulumi.ResourceOption) (*Web3Hostname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Web3Hostname
	err := ctx.RegisterResource("cloudflare:index/web3Hostname:Web3Hostname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWeb3Hostname gets an existing Web3Hostname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWeb3Hostname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Web3HostnameState, opts ...pulumi.ResourceOption) (*Web3Hostname, error) {
	var resource Web3Hostname
	err := ctx.ReadResource("cloudflare:index/web3Hostname:Web3Hostname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Web3Hostname resources.
type web3HostnameState struct {
	// Creation time.
	CreatedOn *string `pulumi:"createdOn"`
	// An optional description of the hostname.
	Description *string `pulumi:"description"`
	// DNSLink value used if the target is ipfs.
	Dnslink *string `pulumi:"dnslink"`
	// Last modification time.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// The hostname that will point to the target gateway via CNAME.
	Name *string `pulumi:"name"`
	// Status of the hostname's activation.
	Status *string `pulumi:"status"`
	// Target gateway of the hostname.
	Target *string `pulumi:"target"`
	// The zone identifier to target for the resource.
	ZoneId *string `pulumi:"zoneId"`
}

type Web3HostnameState struct {
	// Creation time.
	CreatedOn pulumi.StringPtrInput
	// An optional description of the hostname.
	Description pulumi.StringPtrInput
	// DNSLink value used if the target is ipfs.
	Dnslink pulumi.StringPtrInput
	// Last modification time.
	ModifiedOn pulumi.StringPtrInput
	// The hostname that will point to the target gateway via CNAME.
	Name pulumi.StringPtrInput
	// Status of the hostname's activation.
	Status pulumi.StringPtrInput
	// Target gateway of the hostname.
	Target pulumi.StringPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringPtrInput
}

func (Web3HostnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*web3HostnameState)(nil)).Elem()
}

type web3HostnameArgs struct {
	// An optional description of the hostname.
	Description *string `pulumi:"description"`
	// DNSLink value used if the target is ipfs.
	Dnslink *string `pulumi:"dnslink"`
	// The hostname that will point to the target gateway via CNAME.
	Name string `pulumi:"name"`
	// Target gateway of the hostname.
	Target string `pulumi:"target"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Web3Hostname resource.
type Web3HostnameArgs struct {
	// An optional description of the hostname.
	Description pulumi.StringPtrInput
	// DNSLink value used if the target is ipfs.
	Dnslink pulumi.StringPtrInput
	// The hostname that will point to the target gateway via CNAME.
	Name pulumi.StringInput
	// Target gateway of the hostname.
	Target pulumi.StringInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput
}

func (Web3HostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*web3HostnameArgs)(nil)).Elem()
}

type Web3HostnameInput interface {
	pulumi.Input

	ToWeb3HostnameOutput() Web3HostnameOutput
	ToWeb3HostnameOutputWithContext(ctx context.Context) Web3HostnameOutput
}

func (*Web3Hostname) ElementType() reflect.Type {
	return reflect.TypeOf((**Web3Hostname)(nil)).Elem()
}

func (i *Web3Hostname) ToWeb3HostnameOutput() Web3HostnameOutput {
	return i.ToWeb3HostnameOutputWithContext(context.Background())
}

func (i *Web3Hostname) ToWeb3HostnameOutputWithContext(ctx context.Context) Web3HostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Web3HostnameOutput)
}

// Web3HostnameArrayInput is an input type that accepts Web3HostnameArray and Web3HostnameArrayOutput values.
// You can construct a concrete instance of `Web3HostnameArrayInput` via:
//
//	Web3HostnameArray{ Web3HostnameArgs{...} }
type Web3HostnameArrayInput interface {
	pulumi.Input

	ToWeb3HostnameArrayOutput() Web3HostnameArrayOutput
	ToWeb3HostnameArrayOutputWithContext(context.Context) Web3HostnameArrayOutput
}

type Web3HostnameArray []Web3HostnameInput

func (Web3HostnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Web3Hostname)(nil)).Elem()
}

func (i Web3HostnameArray) ToWeb3HostnameArrayOutput() Web3HostnameArrayOutput {
	return i.ToWeb3HostnameArrayOutputWithContext(context.Background())
}

func (i Web3HostnameArray) ToWeb3HostnameArrayOutputWithContext(ctx context.Context) Web3HostnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Web3HostnameArrayOutput)
}

// Web3HostnameMapInput is an input type that accepts Web3HostnameMap and Web3HostnameMapOutput values.
// You can construct a concrete instance of `Web3HostnameMapInput` via:
//
//	Web3HostnameMap{ "key": Web3HostnameArgs{...} }
type Web3HostnameMapInput interface {
	pulumi.Input

	ToWeb3HostnameMapOutput() Web3HostnameMapOutput
	ToWeb3HostnameMapOutputWithContext(context.Context) Web3HostnameMapOutput
}

type Web3HostnameMap map[string]Web3HostnameInput

func (Web3HostnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Web3Hostname)(nil)).Elem()
}

func (i Web3HostnameMap) ToWeb3HostnameMapOutput() Web3HostnameMapOutput {
	return i.ToWeb3HostnameMapOutputWithContext(context.Background())
}

func (i Web3HostnameMap) ToWeb3HostnameMapOutputWithContext(ctx context.Context) Web3HostnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Web3HostnameMapOutput)
}

type Web3HostnameOutput struct{ *pulumi.OutputState }

func (Web3HostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Web3Hostname)(nil)).Elem()
}

func (o Web3HostnameOutput) ToWeb3HostnameOutput() Web3HostnameOutput {
	return o
}

func (o Web3HostnameOutput) ToWeb3HostnameOutputWithContext(ctx context.Context) Web3HostnameOutput {
	return o
}

// Creation time.
func (o Web3HostnameOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// An optional description of the hostname.
func (o Web3HostnameOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DNSLink value used if the target is ipfs.
func (o Web3HostnameOutput) Dnslink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringPtrOutput { return v.Dnslink }).(pulumi.StringPtrOutput)
}

// Last modification time.
func (o Web3HostnameOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The hostname that will point to the target gateway via CNAME.
func (o Web3HostnameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Status of the hostname's activation.
func (o Web3HostnameOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Target gateway of the hostname.
func (o Web3HostnameOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource.
func (o Web3HostnameOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Web3Hostname) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type Web3HostnameArrayOutput struct{ *pulumi.OutputState }

func (Web3HostnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Web3Hostname)(nil)).Elem()
}

func (o Web3HostnameArrayOutput) ToWeb3HostnameArrayOutput() Web3HostnameArrayOutput {
	return o
}

func (o Web3HostnameArrayOutput) ToWeb3HostnameArrayOutputWithContext(ctx context.Context) Web3HostnameArrayOutput {
	return o
}

func (o Web3HostnameArrayOutput) Index(i pulumi.IntInput) Web3HostnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Web3Hostname {
		return vs[0].([]*Web3Hostname)[vs[1].(int)]
	}).(Web3HostnameOutput)
}

type Web3HostnameMapOutput struct{ *pulumi.OutputState }

func (Web3HostnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Web3Hostname)(nil)).Elem()
}

func (o Web3HostnameMapOutput) ToWeb3HostnameMapOutput() Web3HostnameMapOutput {
	return o
}

func (o Web3HostnameMapOutput) ToWeb3HostnameMapOutputWithContext(ctx context.Context) Web3HostnameMapOutput {
	return o
}

func (o Web3HostnameMapOutput) MapIndex(k pulumi.StringInput) Web3HostnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Web3Hostname {
		return vs[0].(map[string]*Web3Hostname)[vs[1].(string)]
	}).(Web3HostnameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Web3HostnameInput)(nil)).Elem(), &Web3Hostname{})
	pulumi.RegisterInputType(reflect.TypeOf((*Web3HostnameArrayInput)(nil)).Elem(), Web3HostnameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Web3HostnameMapInput)(nil)).Elem(), Web3HostnameMap{})
	pulumi.RegisterOutputType(Web3HostnameOutput{})
	pulumi.RegisterOutputType(Web3HostnameArrayOutput{})
	pulumi.RegisterOutputType(Web3HostnameMapOutput{})
}
