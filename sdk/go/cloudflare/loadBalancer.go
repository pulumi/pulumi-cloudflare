// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Load Balancer resource. This sits in front of a number of defined pools of origins and provides various options for geographically-aware load balancing. Note that the load balancing feature must be enabled in your Cloudflare account before you can use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v4/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := cloudflare.NewLoadBalancerPool(ctx, "foo", &cloudflare.LoadBalancerPoolArgs{
// 			Name: pulumi.String("example-lb-pool"),
// 			Origins: LoadBalancerPoolOriginArray{
// 				&LoadBalancerPoolOriginArgs{
// 					Name:    pulumi.String("example-1"),
// 					Address: pulumi.String("192.0.2.1"),
// 					Enabled: pulumi.Bool(false),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudflare.NewLoadBalancer(ctx, "bar", &cloudflare.LoadBalancerArgs{
// 			ZoneId:         pulumi.String("d41d8cd98f00b204e9800998ecf8427e"),
// 			Name:           pulumi.String("example-load-balancer.example.com"),
// 			FallbackPoolId: foo.ID(),
// 			DefaultPoolIds: pulumi.StringArray{
// 				foo.ID(),
// 			},
// 			Description:    pulumi.String("example load balancer using geo-balancing"),
// 			Proxied:        pulumi.Bool(true),
// 			SteeringPolicy: pulumi.String("geo"),
// 			PopPools: LoadBalancerPopPoolArray{
// 				&LoadBalancerPopPoolArgs{
// 					Pop: pulumi.String("LAX"),
// 					PoolIds: pulumi.StringArray{
// 						foo.ID(),
// 					},
// 				},
// 			},
// 			RegionPools: LoadBalancerRegionPoolArray{
// 				&LoadBalancerRegionPoolArgs{
// 					Region: pulumi.String("WNAM"),
// 					PoolIds: pulumi.StringArray{
// 						foo.ID(),
// 					},
// 				},
// 			},
// 			Rules: LoadBalancerRuleArray{
// 				&LoadBalancerRuleArgs{
// 					Name:      pulumi.String("example rule"),
// 					Condition: pulumi.String("http.request.uri.path contains \"testing\""),
// 					FixedResponse: &LoadBalancerRuleFixedResponseArgs{
// 						MessageBody: pulumi.String("hello"),
// 						StatusCode:  pulumi.Int(200),
// 						ContentType: pulumi.String("html"),
// 						Location:    pulumi.String("www.example.com"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
	DefaultPoolIds pulumi.StringArrayOutput `pulumi:"defaultPoolIds"`
	// Free text description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true` (enabled).
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringOutput `pulumi:"fallbackPoolId"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Human readable name for this rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// See popPools above.
	PopPools LoadBalancerPopPoolArrayOutput `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
	Proxied pulumi.BoolPtrOutput `pulumi:"proxied"`
	// See regionPools above.
	RegionPools LoadBalancerRegionPoolArrayOutput `pulumi:"regionPools"`
	// A list of conditions and overrides for each load balancer operation. See the field documentation below.
	Rules LoadBalancerRuleArrayOutput `pulumi:"rules"`
	// See field above.
	SessionAffinity pulumi.StringPtrOutput `pulumi:"sessionAffinity"`
	// See field above.
	SessionAffinityAttributes pulumi.StringMapOutput `pulumi:"sessionAffinityAttributes"`
	// See field above.
	SessionAffinityTtl pulumi.IntPtrOutput `pulumi:"sessionAffinityTtl"`
	// See field above.
	SteeringPolicy pulumi.StringOutput `pulumi:"steeringPolicy"`
	// See field above.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The zone ID to add the load balancer to.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultPoolIds == nil {
		return nil, errors.New("invalid value for required argument 'DefaultPoolIds'")
	}
	if args.FallbackPoolId == nil {
		return nil, errors.New("invalid value for required argument 'FallbackPoolId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource LoadBalancer
	err := ctx.RegisterResource("cloudflare:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("cloudflare:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn *string `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
	DefaultPoolIds []string `pulumi:"defaultPoolIds"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true` (enabled).
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId *string `pulumi:"fallbackPoolId"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Human readable name for this rule.
	Name *string `pulumi:"name"`
	// See popPools above.
	PopPools []LoadBalancerPopPool `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
	Proxied *bool `pulumi:"proxied"`
	// See regionPools above.
	RegionPools []LoadBalancerRegionPool `pulumi:"regionPools"`
	// A list of conditions and overrides for each load balancer operation. See the field documentation below.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// See field above.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// See field above.
	SessionAffinityAttributes map[string]string `pulumi:"sessionAffinityAttributes"`
	// See field above.
	SessionAffinityTtl *int `pulumi:"sessionAffinityTtl"`
	// See field above.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// See field above.
	Ttl *int `pulumi:"ttl"`
	// The zone ID to add the load balancer to.
	ZoneId *string `pulumi:"zoneId"`
}

type LoadBalancerState struct {
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringPtrInput
	// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
	DefaultPoolIds pulumi.StringArrayInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Enable or disable the load balancer. Defaults to `true` (enabled).
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringPtrInput
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Human readable name for this rule.
	Name pulumi.StringPtrInput
	// See popPools above.
	PopPools LoadBalancerPopPoolArrayInput
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
	Proxied pulumi.BoolPtrInput
	// See regionPools above.
	RegionPools LoadBalancerRegionPoolArrayInput
	// A list of conditions and overrides for each load balancer operation. See the field documentation below.
	Rules LoadBalancerRuleArrayInput
	// See field above.
	SessionAffinity pulumi.StringPtrInput
	// See field above.
	SessionAffinityAttributes pulumi.StringMapInput
	// See field above.
	SessionAffinityTtl pulumi.IntPtrInput
	// See field above.
	SteeringPolicy pulumi.StringPtrInput
	// See field above.
	Ttl pulumi.IntPtrInput
	// The zone ID to add the load balancer to.
	ZoneId pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
	DefaultPoolIds []string `pulumi:"defaultPoolIds"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true` (enabled).
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId string `pulumi:"fallbackPoolId"`
	// Human readable name for this rule.
	Name string `pulumi:"name"`
	// See popPools above.
	PopPools []LoadBalancerPopPool `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
	Proxied *bool `pulumi:"proxied"`
	// See regionPools above.
	RegionPools []LoadBalancerRegionPool `pulumi:"regionPools"`
	// A list of conditions and overrides for each load balancer operation. See the field documentation below.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// See field above.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// See field above.
	SessionAffinityAttributes map[string]string `pulumi:"sessionAffinityAttributes"`
	// See field above.
	SessionAffinityTtl *int `pulumi:"sessionAffinityTtl"`
	// See field above.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// See field above.
	Ttl *int `pulumi:"ttl"`
	// The zone ID to add the load balancer to.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
	DefaultPoolIds pulumi.StringArrayInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Enable or disable the load balancer. Defaults to `true` (enabled).
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringInput
	// Human readable name for this rule.
	Name pulumi.StringInput
	// See popPools above.
	PopPools LoadBalancerPopPoolArrayInput
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`.
	Proxied pulumi.BoolPtrInput
	// See regionPools above.
	RegionPools LoadBalancerRegionPoolArrayInput
	// A list of conditions and overrides for each load balancer operation. See the field documentation below.
	Rules LoadBalancerRuleArrayInput
	// See field above.
	SessionAffinity pulumi.StringPtrInput
	// See field above.
	SessionAffinityAttributes pulumi.StringMapInput
	// See field above.
	SessionAffinityTtl pulumi.IntPtrInput
	// See field above.
	SteeringPolicy pulumi.StringPtrInput
	// See field above.
	Ttl pulumi.IntPtrInput
	// The zone ID to add the load balancer to.
	ZoneId pulumi.StringInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//          LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//          LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
