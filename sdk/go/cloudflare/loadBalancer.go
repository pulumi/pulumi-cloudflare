// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example '<zone_id>/<load_balancer_id>'
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting LoadBalancerAdaptiveRoutingOutput `pulumi:"adaptiveRouting"`
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools pulumi.StringArrayMapOutput `pulumi:"countryPools"`
	CreatedOn    pulumi.StringOutput         `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools pulumi.StringArrayOutput `pulumi:"defaultPools"`
	// Object description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to enable (the default) this load balancer.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool pulumi.StringOutput `pulumi:"fallbackPool"`
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy LoadBalancerLocationStrategyOutput `pulumi:"locationStrategy"`
	ModifiedOn       pulumi.StringOutput                `pulumi:"modifiedOn"`
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks pulumi.StringArrayOutput `pulumi:"networks"`
	// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools pulumi.StringArrayMapOutput `pulumi:"popPools"`
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied pulumi.BoolOutput `pulumi:"proxied"`
	// Configures pool weights.
	RandomSteering LoadBalancerRandomSteeringOutput `pulumi:"randomSteering"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools pulumi.StringArrayMapOutput `pulumi:"regionPools"`
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayOutput `pulumi:"rules"`
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
	// Available values: "none", "cookie", "ipCookie", "header".
	SessionAffinity pulumi.StringOutput `pulumi:"sessionAffinity"`
	// Configures attributes for session affinity.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributesOutput `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTtl pulumi.Float64Output `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy pulumi.StringOutput `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl      pulumi.Float64Output `pulumi:"ttl"`
	ZoneId   pulumi.StringOutput  `pulumi:"zoneId"`
	ZoneName pulumi.StringOutput  `pulumi:"zoneName"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultPools == nil {
		return nil, errors.New("invalid value for required argument 'DefaultPools'")
	}
	if args.FallbackPool == nil {
		return nil, errors.New("invalid value for required argument 'FallbackPool'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("cloudflare:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("cloudflare:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting *LoadBalancerAdaptiveRouting `pulumi:"adaptiveRouting"`
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools map[string][]string `pulumi:"countryPools"`
	CreatedOn    *string             `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools []string `pulumi:"defaultPools"`
	// Object description.
	Description *string `pulumi:"description"`
	// Whether to enable (the default) this load balancer.
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool *string `pulumi:"fallbackPool"`
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy *LoadBalancerLocationStrategy `pulumi:"locationStrategy"`
	ModifiedOn       *string                       `pulumi:"modifiedOn"`
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name *string `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks []string `pulumi:"networks"`
	// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools map[string][]string `pulumi:"popPools"`
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied *bool `pulumi:"proxied"`
	// Configures pool weights.
	RandomSteering *LoadBalancerRandomSteering `pulumi:"randomSteering"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]string `pulumi:"regionPools"`
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
	// Available values: "none", "cookie", "ipCookie", "header".
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Configures attributes for session affinity.
	SessionAffinityAttributes *LoadBalancerSessionAffinityAttributes `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTtl *float64 `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl      *float64 `pulumi:"ttl"`
	ZoneId   *string  `pulumi:"zoneId"`
	ZoneName *string  `pulumi:"zoneName"`
}

type LoadBalancerState struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting LoadBalancerAdaptiveRoutingPtrInput
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools pulumi.StringArrayMapInput
	CreatedOn    pulumi.StringPtrInput
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools pulumi.StringArrayInput
	// Object description.
	Description pulumi.StringPtrInput
	// Whether to enable (the default) this load balancer.
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool pulumi.StringPtrInput
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy LoadBalancerLocationStrategyPtrInput
	ModifiedOn       pulumi.StringPtrInput
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name pulumi.StringPtrInput
	// List of networks where Load Balancer or Pool is enabled.
	Networks pulumi.StringArrayInput
	// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools pulumi.StringArrayMapInput
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied pulumi.BoolPtrInput
	// Configures pool weights.
	RandomSteering LoadBalancerRandomSteeringPtrInput
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools pulumi.StringArrayMapInput
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayInput
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
	// Available values: "none", "cookie", "ipCookie", "header".
	SessionAffinity pulumi.StringPtrInput
	// Configures attributes for session affinity.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributesPtrInput
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTtl pulumi.Float64PtrInput
	// Steering Policy for this load balancer.
	SteeringPolicy pulumi.StringPtrInput
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl      pulumi.Float64PtrInput
	ZoneId   pulumi.StringPtrInput
	ZoneName pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting *LoadBalancerAdaptiveRouting `pulumi:"adaptiveRouting"`
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools map[string][]string `pulumi:"countryPools"`
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools []string `pulumi:"defaultPools"`
	// Object description.
	Description *string `pulumi:"description"`
	// Whether to enable (the default) this load balancer.
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool string `pulumi:"fallbackPool"`
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy *LoadBalancerLocationStrategy `pulumi:"locationStrategy"`
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name string `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks []string `pulumi:"networks"`
	// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools map[string][]string `pulumi:"popPools"`
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied *bool `pulumi:"proxied"`
	// Configures pool weights.
	RandomSteering *LoadBalancerRandomSteering `pulumi:"randomSteering"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]string `pulumi:"regionPools"`
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
	// Available values: "none", "cookie", "ipCookie", "header".
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Configures attributes for session affinity.
	SessionAffinityAttributes *LoadBalancerSessionAffinityAttributes `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTtl *float64 `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl    *float64 `pulumi:"ttl"`
	ZoneId string   `pulumi:"zoneId"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting LoadBalancerAdaptiveRoutingPtrInput
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools pulumi.StringArrayMapInput
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools pulumi.StringArrayInput
	// Object description.
	Description pulumi.StringPtrInput
	// Whether to enable (the default) this load balancer.
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool pulumi.StringInput
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy LoadBalancerLocationStrategyPtrInput
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name pulumi.StringInput
	// List of networks where Load Balancer or Pool is enabled.
	Networks pulumi.StringArrayInput
	// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools pulumi.StringArrayMapInput
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied pulumi.BoolPtrInput
	// Configures pool weights.
	RandomSteering LoadBalancerRandomSteeringPtrInput
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools pulumi.StringArrayMapInput
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayInput
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
	// Available values: "none", "cookie", "ipCookie", "header".
	SessionAffinity pulumi.StringPtrInput
	// Configures attributes for session affinity.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributesPtrInput
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
	SessionAffinityTtl pulumi.Float64PtrInput
	// Steering Policy for this load balancer.
	SteeringPolicy pulumi.StringPtrInput
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl    pulumi.Float64PtrInput
	ZoneId pulumi.StringInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
func (o LoadBalancerOutput) AdaptiveRouting() LoadBalancerAdaptiveRoutingOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerAdaptiveRoutingOutput { return v.AdaptiveRouting }).(LoadBalancerAdaptiveRoutingOutput)
}

// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
func (o LoadBalancerOutput) CountryPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayMapOutput { return v.CountryPools }).(pulumi.StringArrayMapOutput)
}

func (o LoadBalancerOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
func (o LoadBalancerOutput) DefaultPools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.DefaultPools }).(pulumi.StringArrayOutput)
}

// Object description.
func (o LoadBalancerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable (the default) this load balancer.
func (o LoadBalancerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The pool ID to use when all other pools are detected as unhealthy.
func (o LoadBalancerOutput) FallbackPool() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.FallbackPool }).(pulumi.StringOutput)
}

// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
func (o LoadBalancerOutput) LocationStrategy() LoadBalancerLocationStrategyOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerLocationStrategyOutput { return v.LocationStrategy }).(LoadBalancerLocationStrategyOutput)
}

func (o LoadBalancerOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of networks where Load Balancer or Pool is enabled.
func (o LoadBalancerOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.Networks }).(pulumi.StringArrayOutput)
}

// Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
func (o LoadBalancerOutput) PopPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayMapOutput { return v.PopPools }).(pulumi.StringArrayMapOutput)
}

// Whether the hostname should be gray clouded (false) or orange clouded (true).
func (o LoadBalancerOutput) Proxied() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolOutput { return v.Proxied }).(pulumi.BoolOutput)
}

// Configures pool weights.
func (o LoadBalancerOutput) RandomSteering() LoadBalancerRandomSteeringOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRandomSteeringOutput { return v.RandomSteering }).(LoadBalancerRandomSteeringOutput)
}

// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
func (o LoadBalancerOutput) RegionPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayMapOutput { return v.RegionPools }).(pulumi.StringArrayMapOutput)
}

// BETA Field Not General Access: A list of rules for this load balancer to execute.
func (o LoadBalancerOutput) Rules() LoadBalancerRuleArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRuleArrayOutput { return v.Rules }).(LoadBalancerRuleArrayOutput)
}

// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are: - `"cookie"`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `"ipCookie"`: Behaves the same as `"cookie"` except the initial origin selection is stable and based on the client's ip address. - `"header"`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `sessionAffinityTtl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `sessionAffinityAttributes` for additional required configuration.
// Available values: "none", "cookie", "ipCookie", "header".
func (o LoadBalancerOutput) SessionAffinity() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.SessionAffinity }).(pulumi.StringOutput)
}

// Configures attributes for session affinity.
func (o LoadBalancerOutput) SessionAffinityAttributes() LoadBalancerSessionAffinityAttributesOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerSessionAffinityAttributesOutput { return v.SessionAffinityAttributes }).(LoadBalancerSessionAffinityAttributesOutput)
}

// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are: - `"cookie"` / `"ipCookie"`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `"header"`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven't been used for the number of seconds specified.
func (o LoadBalancerOutput) SessionAffinityTtl() pulumi.Float64Output {
	return o.ApplyT(func(v *LoadBalancer) pulumi.Float64Output { return v.SessionAffinityTtl }).(pulumi.Float64Output)
}

// Steering Policy for this load balancer.
func (o LoadBalancerOutput) SteeringPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.SteeringPolicy }).(pulumi.StringOutput)
}

// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
func (o LoadBalancerOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v *LoadBalancer) pulumi.Float64Output { return v.Ttl }).(pulumi.Float64Output)
}

func (o LoadBalancerOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
