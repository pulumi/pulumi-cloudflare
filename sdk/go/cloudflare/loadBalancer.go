// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Load Balancer resource. This sits in front of
// a number of defined pools of origins and provides various options
// for geographically-aware load balancing. Note that the load balancing
// feature must be enabled in your Cloudflare account before you can use
// this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleLoadBalancerPool, err := cloudflare.NewLoadBalancerPool(ctx, "exampleLoadBalancerPool", &cloudflare.LoadBalancerPoolArgs{
//				Name: pulumi.String("example-lb-pool"),
//				Origins: cloudflare.LoadBalancerPoolOriginArray{
//					&cloudflare.LoadBalancerPoolOriginArgs{
//						Name:    pulumi.String("example-1"),
//						Address: pulumi.String("192.0.2.1"),
//						Enabled: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewLoadBalancer(ctx, "exampleLoadBalancer", &cloudflare.LoadBalancerArgs{
//				ZoneId:         pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//				Name:           pulumi.String("example-load-balancer.example.com"),
//				FallbackPoolId: exampleLoadBalancerPool.ID(),
//				DefaultPoolIds: pulumi.StringArray{
//					exampleLoadBalancerPool.ID(),
//				},
//				Description:    pulumi.String("example load balancer using geo-balancing"),
//				Proxied:        pulumi.Bool(true),
//				SteeringPolicy: pulumi.String("geo"),
//				PopPools: cloudflare.LoadBalancerPopPoolArray{
//					&cloudflare.LoadBalancerPopPoolArgs{
//						Pop: pulumi.String("LAX"),
//						PoolIds: pulumi.StringArray{
//							exampleLoadBalancerPool.ID(),
//						},
//					},
//				},
//				CountryPools: cloudflare.LoadBalancerCountryPoolArray{
//					&cloudflare.LoadBalancerCountryPoolArgs{
//						Country: pulumi.String("US"),
//						PoolIds: pulumi.StringArray{
//							exampleLoadBalancerPool.ID(),
//						},
//					},
//				},
//				RegionPools: cloudflare.LoadBalancerRegionPoolArray{
//					&cloudflare.LoadBalancerRegionPoolArgs{
//						Region: pulumi.String("WNAM"),
//						PoolIds: pulumi.StringArray{
//							exampleLoadBalancerPool.ID(),
//						},
//					},
//				},
//				Rules: cloudflare.LoadBalancerRuleArray{
//					&cloudflare.LoadBalancerRuleArgs{
//						Name:      pulumi.String("example rule"),
//						Condition: pulumi.String("http.request.uri.path contains \"testing\""),
//						FixedResponse: &cloudflare.LoadBalancerRuleFixedResponseArgs{
//							MessageBody: pulumi.String("hello"),
//							StatusCode:  pulumi.Int(200),
//							ContentType: pulumi.String("html"),
//							Location:    pulumi.String("www.example.com"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/loadBalancer:LoadBalancer example <zone_id>/<load_balancer_id>
//
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
	AdaptiveRoutings LoadBalancerAdaptiveRoutingArrayOutput `pulumi:"adaptiveRoutings"`
	// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
	CountryPools LoadBalancerCountryPoolArrayOutput `pulumi:"countryPools"`
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
	DefaultPoolIds pulumi.StringArrayOutput `pulumi:"defaultPoolIds"`
	// Free text description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringOutput `pulumi:"fallbackPoolId"`
	// Controls location-based steering for non-proxied requests.
	LocationStrategies LoadBalancerLocationStrategyArrayOutput `pulumi:"locationStrategies"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Human readable name for this rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
	PopPools LoadBalancerPopPoolArrayOutput `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
	Proxied pulumi.BoolPtrOutput `pulumi:"proxied"`
	// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
	RandomSteerings LoadBalancerRandomSteeringArrayOutput `pulumi:"randomSteerings"`
	// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
	RegionPools LoadBalancerRegionPoolArrayOutput `pulumi:"regionPools"`
	// A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayOutput `pulumi:"rules"`
	// Configure attributes for session affinity.
	SessionAffinity pulumi.StringPtrOutput `pulumi:"sessionAffinity"`
	// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributeArrayOutput `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
	SessionAffinityTtl pulumi.IntPtrOutput `pulumi:"sessionAffinityTtl"`
	// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
	SteeringPolicy pulumi.StringOutput `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultPoolIds == nil {
		return nil, errors.New("invalid value for required argument 'DefaultPoolIds'")
	}
	if args.FallbackPoolId == nil {
		return nil, errors.New("invalid value for required argument 'FallbackPoolId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("cloudflare:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("cloudflare:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
	AdaptiveRoutings []LoadBalancerAdaptiveRouting `pulumi:"adaptiveRoutings"`
	// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
	CountryPools []LoadBalancerCountryPool `pulumi:"countryPools"`
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn *string `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
	DefaultPoolIds []string `pulumi:"defaultPoolIds"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId *string `pulumi:"fallbackPoolId"`
	// Controls location-based steering for non-proxied requests.
	LocationStrategies []LoadBalancerLocationStrategy `pulumi:"locationStrategies"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Human readable name for this rule.
	Name *string `pulumi:"name"`
	// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
	PopPools []LoadBalancerPopPool `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
	Proxied *bool `pulumi:"proxied"`
	// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
	RandomSteerings []LoadBalancerRandomSteering `pulumi:"randomSteerings"`
	// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
	RegionPools []LoadBalancerRegionPool `pulumi:"regionPools"`
	// A list of rules for this load balancer to execute.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Configure attributes for session affinity.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
	SessionAffinityAttributes []LoadBalancerSessionAffinityAttribute `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
	SessionAffinityTtl *int `pulumi:"sessionAffinityTtl"`
	// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
	Ttl *int `pulumi:"ttl"`
	// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
	ZoneId *string `pulumi:"zoneId"`
}

type LoadBalancerState struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
	AdaptiveRoutings LoadBalancerAdaptiveRoutingArrayInput
	// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
	CountryPools LoadBalancerCountryPoolArrayInput
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringPtrInput
	// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
	DefaultPoolIds pulumi.StringArrayInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Enable or disable the load balancer. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringPtrInput
	// Controls location-based steering for non-proxied requests.
	LocationStrategies LoadBalancerLocationStrategyArrayInput
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Human readable name for this rule.
	Name pulumi.StringPtrInput
	// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
	PopPools LoadBalancerPopPoolArrayInput
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
	Proxied pulumi.BoolPtrInput
	// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
	RandomSteerings LoadBalancerRandomSteeringArrayInput
	// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
	RegionPools LoadBalancerRegionPoolArrayInput
	// A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayInput
	// Configure attributes for session affinity.
	SessionAffinity pulumi.StringPtrInput
	// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributeArrayInput
	// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
	SessionAffinityTtl pulumi.IntPtrInput
	// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
	SteeringPolicy pulumi.StringPtrInput
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
	Ttl pulumi.IntPtrInput
	// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
	AdaptiveRoutings []LoadBalancerAdaptiveRouting `pulumi:"adaptiveRoutings"`
	// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
	CountryPools []LoadBalancerCountryPool `pulumi:"countryPools"`
	// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
	DefaultPoolIds []string `pulumi:"defaultPoolIds"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Enable or disable the load balancer. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId string `pulumi:"fallbackPoolId"`
	// Controls location-based steering for non-proxied requests.
	LocationStrategies []LoadBalancerLocationStrategy `pulumi:"locationStrategies"`
	// Human readable name for this rule.
	Name string `pulumi:"name"`
	// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
	PopPools []LoadBalancerPopPool `pulumi:"popPools"`
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
	Proxied *bool `pulumi:"proxied"`
	// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
	RandomSteerings []LoadBalancerRandomSteering `pulumi:"randomSteerings"`
	// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
	RegionPools []LoadBalancerRegionPool `pulumi:"regionPools"`
	// A list of rules for this load balancer to execute.
	Rules []LoadBalancerRule `pulumi:"rules"`
	// Configure attributes for session affinity.
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
	SessionAffinityAttributes []LoadBalancerSessionAffinityAttribute `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
	SessionAffinityTtl *int `pulumi:"sessionAffinityTtl"`
	// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
	Ttl *int `pulumi:"ttl"`
	// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
	AdaptiveRoutings LoadBalancerAdaptiveRoutingArrayInput
	// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
	CountryPools LoadBalancerCountryPoolArrayInput
	// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
	DefaultPoolIds pulumi.StringArrayInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Enable or disable the load balancer. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPoolId pulumi.StringInput
	// Controls location-based steering for non-proxied requests.
	LocationStrategies LoadBalancerLocationStrategyArrayInput
	// Human readable name for this rule.
	Name pulumi.StringInput
	// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
	PopPools LoadBalancerPopPoolArrayInput
	// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
	Proxied pulumi.BoolPtrInput
	// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
	RandomSteerings LoadBalancerRandomSteeringArrayInput
	// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
	RegionPools LoadBalancerRegionPoolArrayInput
	// A list of rules for this load balancer to execute.
	Rules LoadBalancerRuleArrayInput
	// Configure attributes for session affinity.
	SessionAffinity pulumi.StringPtrInput
	// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
	SessionAffinityAttributes LoadBalancerSessionAffinityAttributeArrayInput
	// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
	SessionAffinityTtl pulumi.IntPtrInput
	// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
	SteeringPolicy pulumi.StringPtrInput
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
	Ttl pulumi.IntPtrInput
	// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests.
func (o LoadBalancerOutput) AdaptiveRoutings() LoadBalancerAdaptiveRoutingArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerAdaptiveRoutingArrayOutput { return v.AdaptiveRoutings }).(LoadBalancerAdaptiveRoutingArrayOutput)
}

// A set containing mappings of country codes to a list of pool IDs (ordered by their failover priority) for the given country.
func (o LoadBalancerOutput) CountryPools() LoadBalancerCountryPoolArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerCountryPoolArrayOutput { return v.CountryPools }).(LoadBalancerCountryPoolArrayOutput)
}

// The RFC3339 timestamp of when the load balancer was created.
func (o LoadBalancerOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// A list of pool IDs ordered by their failover priority. Used whenever `popPools`/`countryPools`/`regionPools` are not defined.
func (o LoadBalancerOutput) DefaultPoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.DefaultPoolIds }).(pulumi.StringArrayOutput)
}

// Free text description.
func (o LoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable or disable the load balancer. Defaults to `true`.
func (o LoadBalancerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The pool ID to use when all other pools are detected as unhealthy.
func (o LoadBalancerOutput) FallbackPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.FallbackPoolId }).(pulumi.StringOutput)
}

// Controls location-based steering for non-proxied requests.
func (o LoadBalancerOutput) LocationStrategies() LoadBalancerLocationStrategyArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerLocationStrategyArrayOutput { return v.LocationStrategies }).(LoadBalancerLocationStrategyArrayOutput)
}

// The RFC3339 timestamp of when the load balancer was last modified.
func (o LoadBalancerOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Human readable name for this rule.
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A set containing mappings of Cloudflare Point-of-Presence (PoP) identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). This feature is only available to enterprise customers.
func (o LoadBalancerOutput) PopPools() LoadBalancerPopPoolArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerPopPoolArrayOutput { return v.PopPools }).(LoadBalancerPopPoolArrayOutput)
}

// Whether the hostname gets Cloudflare's origin protection. Defaults to `false`. Conflicts with `ttl`.
func (o LoadBalancerOutput) Proxied() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolPtrOutput { return v.Proxied }).(pulumi.BoolPtrOutput)
}

// Configures pool weights. When `steering_policy="random"`, a random pool is selected with probability proportional to pool weights. When `steering_policy="leastOutstandingRequests"`, pool weights are used to scale each pool's outstanding requests. When `steering_policy="leastConnections"`, pool weights are used to scale each pool's open connections.
func (o LoadBalancerOutput) RandomSteerings() LoadBalancerRandomSteeringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRandomSteeringArrayOutput { return v.RandomSteerings }).(LoadBalancerRandomSteeringArrayOutput)
}

// A set containing mappings of region codes to a list of pool IDs (ordered by their failover priority) for the given region.
func (o LoadBalancerOutput) RegionPools() LoadBalancerRegionPoolArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRegionPoolArrayOutput { return v.RegionPools }).(LoadBalancerRegionPoolArrayOutput)
}

// A list of rules for this load balancer to execute.
func (o LoadBalancerOutput) Rules() LoadBalancerRuleArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerRuleArrayOutput { return v.Rules }).(LoadBalancerRuleArrayOutput)
}

// Configure attributes for session affinity.
func (o LoadBalancerOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// Configure attributes for session affinity. Note that the property `drainDuration` is not currently supported as a rule override.
func (o LoadBalancerOutput) SessionAffinityAttributes() LoadBalancerSessionAffinityAttributeArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerSessionAffinityAttributeArrayOutput {
		return v.SessionAffinityAttributes
	}).(LoadBalancerSessionAffinityAttributeArrayOutput)
}

// Time, in seconds, until this load balancer's session affinity cookie expires after being created. This parameter is ignored unless a supported session affinity policy is set. The current default of `82800` (23 hours) will be used unless `sessionAffinityTtl` is explicitly set. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. Valid values are between `1800` and `604800`.
func (o LoadBalancerOutput) SessionAffinityTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntPtrOutput { return v.SessionAffinityTtl }).(pulumi.IntPtrOutput)
}

// The method the load balancer uses to determine the route to your origin. Value `off` uses `defaultPoolIds`. Value `geo` uses `popPools`/`countryPools`/`regionPools`. For non-proxied requests, the `country` for `countryPools` is determined by `locationStrategy`. Value `random` selects a pool randomly. Value `dynamicLatency` uses round trip time to select the closest pool in `defaultPoolIds` (requires pool health checks). Value `proximity` uses the pools' latitude and longitude to select the closest pool using the Cloudflare PoP location for proxied requests or the location determined by `locationStrategy` for non-proxied requests. Value `leastOutstandingRequests` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of outstanding requests. Pools with more pending requests are weighted proportionately less relative to others. Value `leastConnections` selects a pool by taking into consideration `randomSteering` weights, as well as each pool's number of open connections. Pools with more open connections are weighted proportionately less relative to others. Supported for HTTP/1 and HTTP/2 connections. Value `""` maps to `geo` if you use `popPools`/`countryPools`/`regionPools` otherwise `off`. Available values: `off`, `geo`, `dynamicLatency`, `random`, `proximity`, `leastOutstandingRequests`, `leastConnections`, `""` Defaults to `""`.
func (o LoadBalancerOutput) SteeringPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.SteeringPolicy }).(pulumi.StringOutput)
}

// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This cannot be set for proxied load balancers. Defaults to `30`.
func (o LoadBalancerOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// The zone ID to add the load balancer to. **Modifying this attribute will force creation of a new resource.**
func (o LoadBalancerOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
