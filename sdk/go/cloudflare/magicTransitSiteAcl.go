// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl example '<account_id>/<site_id>/<acl_id>'
// ```
type MagicTransitSiteAcl struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Description for the ACL.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally pulumi.BoolPtrOutput          `pulumi:"forwardLocally"`
	Lan1           MagicTransitSiteAclLan1Output `pulumi:"lan1"`
	Lan2           MagicTransitSiteAclLan2Output `pulumi:"lan2"`
	// The name of the ACL.
	Name      pulumi.StringOutput      `pulumi:"name"`
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Identifier
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional pulumi.BoolPtrOutput `pulumi:"unidirectional"`
}

// NewMagicTransitSiteAcl registers a new resource with the given unique name, arguments, and options.
func NewMagicTransitSiteAcl(ctx *pulumi.Context,
	name string, args *MagicTransitSiteAclArgs, opts ...pulumi.ResourceOption) (*MagicTransitSiteAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Lan1 == nil {
		return nil, errors.New("invalid value for required argument 'Lan1'")
	}
	if args.Lan2 == nil {
		return nil, errors.New("invalid value for required argument 'Lan2'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicTransitSiteAcl
	err := ctx.RegisterResource("cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicTransitSiteAcl gets an existing MagicTransitSiteAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicTransitSiteAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicTransitSiteAclState, opts ...pulumi.ResourceOption) (*MagicTransitSiteAcl, error) {
	var resource MagicTransitSiteAcl
	err := ctx.ReadResource("cloudflare:index/magicTransitSiteAcl:MagicTransitSiteAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicTransitSiteAcl resources.
type magicTransitSiteAclState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// Description for the ACL.
	Description *string `pulumi:"description"`
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally *bool                    `pulumi:"forwardLocally"`
	Lan1           *MagicTransitSiteAclLan1 `pulumi:"lan1"`
	Lan2           *MagicTransitSiteAclLan2 `pulumi:"lan2"`
	// The name of the ACL.
	Name      *string  `pulumi:"name"`
	Protocols []string `pulumi:"protocols"`
	// Identifier
	SiteId *string `pulumi:"siteId"`
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional *bool `pulumi:"unidirectional"`
}

type MagicTransitSiteAclState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// Description for the ACL.
	Description pulumi.StringPtrInput
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally pulumi.BoolPtrInput
	Lan1           MagicTransitSiteAclLan1PtrInput
	Lan2           MagicTransitSiteAclLan2PtrInput
	// The name of the ACL.
	Name      pulumi.StringPtrInput
	Protocols pulumi.StringArrayInput
	// Identifier
	SiteId pulumi.StringPtrInput
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional pulumi.BoolPtrInput
}

func (MagicTransitSiteAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicTransitSiteAclState)(nil)).Elem()
}

type magicTransitSiteAclArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Description for the ACL.
	Description *string `pulumi:"description"`
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally *bool                   `pulumi:"forwardLocally"`
	Lan1           MagicTransitSiteAclLan1 `pulumi:"lan1"`
	Lan2           MagicTransitSiteAclLan2 `pulumi:"lan2"`
	// The name of the ACL.
	Name      string   `pulumi:"name"`
	Protocols []string `pulumi:"protocols"`
	// Identifier
	SiteId string `pulumi:"siteId"`
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional *bool `pulumi:"unidirectional"`
}

// The set of arguments for constructing a MagicTransitSiteAcl resource.
type MagicTransitSiteAclArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// Description for the ACL.
	Description pulumi.StringPtrInput
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally pulumi.BoolPtrInput
	Lan1           MagicTransitSiteAclLan1Input
	Lan2           MagicTransitSiteAclLan2Input
	// The name of the ACL.
	Name      pulumi.StringInput
	Protocols pulumi.StringArrayInput
	// Identifier
	SiteId pulumi.StringInput
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional pulumi.BoolPtrInput
}

func (MagicTransitSiteAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicTransitSiteAclArgs)(nil)).Elem()
}

type MagicTransitSiteAclInput interface {
	pulumi.Input

	ToMagicTransitSiteAclOutput() MagicTransitSiteAclOutput
	ToMagicTransitSiteAclOutputWithContext(ctx context.Context) MagicTransitSiteAclOutput
}

func (*MagicTransitSiteAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicTransitSiteAcl)(nil)).Elem()
}

func (i *MagicTransitSiteAcl) ToMagicTransitSiteAclOutput() MagicTransitSiteAclOutput {
	return i.ToMagicTransitSiteAclOutputWithContext(context.Background())
}

func (i *MagicTransitSiteAcl) ToMagicTransitSiteAclOutputWithContext(ctx context.Context) MagicTransitSiteAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteAclOutput)
}

// MagicTransitSiteAclArrayInput is an input type that accepts MagicTransitSiteAclArray and MagicTransitSiteAclArrayOutput values.
// You can construct a concrete instance of `MagicTransitSiteAclArrayInput` via:
//
//	MagicTransitSiteAclArray{ MagicTransitSiteAclArgs{...} }
type MagicTransitSiteAclArrayInput interface {
	pulumi.Input

	ToMagicTransitSiteAclArrayOutput() MagicTransitSiteAclArrayOutput
	ToMagicTransitSiteAclArrayOutputWithContext(context.Context) MagicTransitSiteAclArrayOutput
}

type MagicTransitSiteAclArray []MagicTransitSiteAclInput

func (MagicTransitSiteAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicTransitSiteAcl)(nil)).Elem()
}

func (i MagicTransitSiteAclArray) ToMagicTransitSiteAclArrayOutput() MagicTransitSiteAclArrayOutput {
	return i.ToMagicTransitSiteAclArrayOutputWithContext(context.Background())
}

func (i MagicTransitSiteAclArray) ToMagicTransitSiteAclArrayOutputWithContext(ctx context.Context) MagicTransitSiteAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteAclArrayOutput)
}

// MagicTransitSiteAclMapInput is an input type that accepts MagicTransitSiteAclMap and MagicTransitSiteAclMapOutput values.
// You can construct a concrete instance of `MagicTransitSiteAclMapInput` via:
//
//	MagicTransitSiteAclMap{ "key": MagicTransitSiteAclArgs{...} }
type MagicTransitSiteAclMapInput interface {
	pulumi.Input

	ToMagicTransitSiteAclMapOutput() MagicTransitSiteAclMapOutput
	ToMagicTransitSiteAclMapOutputWithContext(context.Context) MagicTransitSiteAclMapOutput
}

type MagicTransitSiteAclMap map[string]MagicTransitSiteAclInput

func (MagicTransitSiteAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicTransitSiteAcl)(nil)).Elem()
}

func (i MagicTransitSiteAclMap) ToMagicTransitSiteAclMapOutput() MagicTransitSiteAclMapOutput {
	return i.ToMagicTransitSiteAclMapOutputWithContext(context.Background())
}

func (i MagicTransitSiteAclMap) ToMagicTransitSiteAclMapOutputWithContext(ctx context.Context) MagicTransitSiteAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteAclMapOutput)
}

type MagicTransitSiteAclOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicTransitSiteAcl)(nil)).Elem()
}

func (o MagicTransitSiteAclOutput) ToMagicTransitSiteAclOutput() MagicTransitSiteAclOutput {
	return o
}

func (o MagicTransitSiteAclOutput) ToMagicTransitSiteAclOutputWithContext(ctx context.Context) MagicTransitSiteAclOutput {
	return o
}

// Identifier
func (o MagicTransitSiteAclOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Description for the ACL.
func (o MagicTransitSiteAclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
func (o MagicTransitSiteAclOutput) ForwardLocally() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.BoolPtrOutput { return v.ForwardLocally }).(pulumi.BoolPtrOutput)
}

func (o MagicTransitSiteAclOutput) Lan1() MagicTransitSiteAclLan1Output {
	return o.ApplyT(func(v *MagicTransitSiteAcl) MagicTransitSiteAclLan1Output { return v.Lan1 }).(MagicTransitSiteAclLan1Output)
}

func (o MagicTransitSiteAclOutput) Lan2() MagicTransitSiteAclLan2Output {
	return o.ApplyT(func(v *MagicTransitSiteAcl) MagicTransitSiteAclLan2Output { return v.Lan2 }).(MagicTransitSiteAclLan2Output)
}

// The name of the ACL.
func (o MagicTransitSiteAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MagicTransitSiteAclOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Identifier
func (o MagicTransitSiteAclOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
func (o MagicTransitSiteAclOutput) Unidirectional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MagicTransitSiteAcl) pulumi.BoolPtrOutput { return v.Unidirectional }).(pulumi.BoolPtrOutput)
}

type MagicTransitSiteAclArrayOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicTransitSiteAcl)(nil)).Elem()
}

func (o MagicTransitSiteAclArrayOutput) ToMagicTransitSiteAclArrayOutput() MagicTransitSiteAclArrayOutput {
	return o
}

func (o MagicTransitSiteAclArrayOutput) ToMagicTransitSiteAclArrayOutputWithContext(ctx context.Context) MagicTransitSiteAclArrayOutput {
	return o
}

func (o MagicTransitSiteAclArrayOutput) Index(i pulumi.IntInput) MagicTransitSiteAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicTransitSiteAcl {
		return vs[0].([]*MagicTransitSiteAcl)[vs[1].(int)]
	}).(MagicTransitSiteAclOutput)
}

type MagicTransitSiteAclMapOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicTransitSiteAcl)(nil)).Elem()
}

func (o MagicTransitSiteAclMapOutput) ToMagicTransitSiteAclMapOutput() MagicTransitSiteAclMapOutput {
	return o
}

func (o MagicTransitSiteAclMapOutput) ToMagicTransitSiteAclMapOutputWithContext(ctx context.Context) MagicTransitSiteAclMapOutput {
	return o
}

func (o MagicTransitSiteAclMapOutput) MapIndex(k pulumi.StringInput) MagicTransitSiteAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicTransitSiteAcl {
		return vs[0].(map[string]*MagicTransitSiteAcl)[vs[1].(string)]
	}).(MagicTransitSiteAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteAclInput)(nil)).Elem(), &MagicTransitSiteAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteAclArrayInput)(nil)).Elem(), MagicTransitSiteAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteAclMapInput)(nil)).Elem(), MagicTransitSiteAclMap{})
	pulumi.RegisterOutputType(MagicTransitSiteAclOutput{})
	pulumi.RegisterOutputType(MagicTransitSiteAclArrayOutput{})
	pulumi.RegisterOutputType(MagicTransitSiteAclMapOutput{})
}
