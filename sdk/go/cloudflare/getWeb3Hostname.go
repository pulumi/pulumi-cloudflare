// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWeb3Hostname(ctx, &cloudflare.LookupWeb3HostnameArgs{
//				ZoneId:     "023e105f4ecef8ad9ca31a8372d0c353",
//				Identifier: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWeb3Hostname(ctx *pulumi.Context, args *LookupWeb3HostnameArgs, opts ...pulumi.InvokeOption) (*LookupWeb3HostnameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWeb3HostnameResult
	err := ctx.Invoke("cloudflare:index/getWeb3Hostname:getWeb3Hostname", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWeb3Hostname.
type LookupWeb3HostnameArgs struct {
	// Identifier
	Identifier *string `pulumi:"identifier"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getWeb3Hostname.
type LookupWeb3HostnameResult struct {
	CreatedOn string `pulumi:"createdOn"`
	// An optional description of the hostname.
	Description string `pulumi:"description"`
	// DNSLink value used if the target is ipfs.
	Dnslink string `pulumi:"dnslink"`
	// Identifier
	Id string `pulumi:"id"`
	// Identifier
	Identifier *string `pulumi:"identifier"`
	ModifiedOn string  `pulumi:"modifiedOn"`
	// The hostname that will point to the target gateway via CNAME.
	Name string `pulumi:"name"`
	// Status of the hostname's activation.
	// Available values: "active", "pending", "deleting", "error".
	Status string `pulumi:"status"`
	// Target gateway of the hostname.
	// Available values: "ethereum", "ipfs", "ipfs*universal*path".
	Target string `pulumi:"target"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupWeb3HostnameOutput(ctx *pulumi.Context, args LookupWeb3HostnameOutputArgs, opts ...pulumi.InvokeOption) LookupWeb3HostnameResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWeb3HostnameResultOutput, error) {
			args := v.(LookupWeb3HostnameArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWeb3Hostname:getWeb3Hostname", args, LookupWeb3HostnameResultOutput{}, options).(LookupWeb3HostnameResultOutput), nil
		}).(LookupWeb3HostnameResultOutput)
}

// A collection of arguments for invoking getWeb3Hostname.
type LookupWeb3HostnameOutputArgs struct {
	// Identifier
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupWeb3HostnameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWeb3HostnameArgs)(nil)).Elem()
}

// A collection of values returned by getWeb3Hostname.
type LookupWeb3HostnameResultOutput struct{ *pulumi.OutputState }

func (LookupWeb3HostnameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWeb3HostnameResult)(nil)).Elem()
}

func (o LookupWeb3HostnameResultOutput) ToLookupWeb3HostnameResultOutput() LookupWeb3HostnameResultOutput {
	return o
}

func (o LookupWeb3HostnameResultOutput) ToLookupWeb3HostnameResultOutputWithContext(ctx context.Context) LookupWeb3HostnameResultOutput {
	return o
}

func (o LookupWeb3HostnameResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// An optional description of the hostname.
func (o LookupWeb3HostnameResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Description }).(pulumi.StringOutput)
}

// DNSLink value used if the target is ipfs.
func (o LookupWeb3HostnameResultOutput) Dnslink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Dnslink }).(pulumi.StringOutput)
}

// Identifier
func (o LookupWeb3HostnameResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier
func (o LookupWeb3HostnameResultOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

func (o LookupWeb3HostnameResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The hostname that will point to the target gateway via CNAME.
func (o LookupWeb3HostnameResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Name }).(pulumi.StringOutput)
}

// Status of the hostname's activation.
// Available values: "active", "pending", "deleting", "error".
func (o LookupWeb3HostnameResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Status }).(pulumi.StringOutput)
}

// Target gateway of the hostname.
// Available values: "ethereum", "ipfs", "ipfs*universal*path".
func (o LookupWeb3HostnameResultOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.Target }).(pulumi.StringOutput)
}

// Identifier
func (o LookupWeb3HostnameResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnameResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWeb3HostnameResultOutput{})
}
