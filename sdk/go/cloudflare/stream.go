// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStream(ctx, "example_stream", &cloudflare.StreamArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Stream struct {
	pulumi.CustomResourceState

	// The account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins pulumi.StringArrayOutput `pulumi:"allowedOrigins"`
	// The date and time the media item was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// A user-defined identifier for the media creator.
	Creator pulumi.StringPtrOutput `pulumi:"creator"`
	// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
	Duration pulumi.Float64Output `pulumi:"duration"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrOutput `pulumi:"identifier"`
	Input      StreamInputTypeOutput  `pulumi:"input"`
	// The live input ID used to upload a video with Stream Live.
	LiveInput pulumi.StringOutput `pulumi:"liveInput"`
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds pulumi.IntPtrOutput `pulumi:"maxDurationSeconds"`
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta pulumi.StringPtrOutput `pulumi:"meta"`
	// The date and time the media item was last modified.
	Modified pulumi.StringOutput  `pulumi:"modified"`
	Playback StreamPlaybackOutput `pulumi:"playback"`
	// The video's preview page URI. This field is omitted until encoding is complete.
	Preview pulumi.StringOutput `pulumi:"preview"`
	// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStream pulumi.BoolOutput `pulumi:"readyToStream"`
	// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStreamAt pulumi.StringOutput `pulumi:"readyToStreamAt"`
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls pulumi.BoolOutput `pulumi:"requireSignedUrls"`
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion pulumi.StringPtrOutput `pulumi:"scheduledDeletion"`
	// The size of the media item in bytes.
	Size pulumi.Float64Output `pulumi:"size"`
	// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
	Status StreamStatusOutput `pulumi:"status"`
	// The media item's thumbnail URI. This field is omitted until encoding is complete.
	Thumbnail pulumi.StringOutput `pulumi:"thumbnail"`
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct pulumi.Float64Output `pulumi:"thumbnailTimestampPct"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry pulumi.StringPtrOutput `pulumi:"uploadExpiry"`
	// The date and time the media item was uploaded.
	Uploaded  pulumi.StringOutput       `pulumi:"uploaded"`
	Watermark StreamWatermarkTypeOutput `pulumi:"watermark"`
}

// NewStream registers a new resource with the given unique name, arguments, and options.
func NewStream(ctx *pulumi.Context,
	name string, args *StreamArgs, opts ...pulumi.ResourceOption) (*Stream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Stream
	err := ctx.RegisterResource("cloudflare:index/stream:Stream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStream gets an existing Stream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamState, opts ...pulumi.ResourceOption) (*Stream, error) {
	var resource Stream
	err := ctx.ReadResource("cloudflare:index/stream:Stream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Stream resources.
type streamState struct {
	// The account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// The date and time the media item was created.
	Created *string `pulumi:"created"`
	// A user-defined identifier for the media creator.
	Creator *string `pulumi:"creator"`
	// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
	Duration *float64 `pulumi:"duration"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string          `pulumi:"identifier"`
	Input      *StreamInputType `pulumi:"input"`
	// The live input ID used to upload a video with Stream Live.
	LiveInput *string `pulumi:"liveInput"`
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta *string `pulumi:"meta"`
	// The date and time the media item was last modified.
	Modified *string         `pulumi:"modified"`
	Playback *StreamPlayback `pulumi:"playback"`
	// The video's preview page URI. This field is omitted until encoding is complete.
	Preview *string `pulumi:"preview"`
	// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStream *bool `pulumi:"readyToStream"`
	// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStreamAt *string `pulumi:"readyToStreamAt"`
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls *bool `pulumi:"requireSignedUrls"`
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion *string `pulumi:"scheduledDeletion"`
	// The size of the media item in bytes.
	Size *float64 `pulumi:"size"`
	// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
	Status *StreamStatus `pulumi:"status"`
	// The media item's thumbnail URI. This field is omitted until encoding is complete.
	Thumbnail *string `pulumi:"thumbnail"`
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct *float64 `pulumi:"thumbnailTimestampPct"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid *string `pulumi:"uid"`
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry *string `pulumi:"uploadExpiry"`
	// The date and time the media item was uploaded.
	Uploaded  *string              `pulumi:"uploaded"`
	Watermark *StreamWatermarkType `pulumi:"watermark"`
}

type StreamState struct {
	// The account identifier tag.
	AccountId pulumi.StringPtrInput
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins pulumi.StringArrayInput
	// The date and time the media item was created.
	Created pulumi.StringPtrInput
	// A user-defined identifier for the media creator.
	Creator pulumi.StringPtrInput
	// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
	Duration pulumi.Float64PtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrInput
	Input      StreamInputTypePtrInput
	// The live input ID used to upload a video with Stream Live.
	LiveInput pulumi.StringPtrInput
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds pulumi.IntPtrInput
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta pulumi.StringPtrInput
	// The date and time the media item was last modified.
	Modified pulumi.StringPtrInput
	Playback StreamPlaybackPtrInput
	// The video's preview page URI. This field is omitted until encoding is complete.
	Preview pulumi.StringPtrInput
	// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStream pulumi.BoolPtrInput
	// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStreamAt pulumi.StringPtrInput
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls pulumi.BoolPtrInput
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion pulumi.StringPtrInput
	// The size of the media item in bytes.
	Size pulumi.Float64PtrInput
	// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
	Status StreamStatusPtrInput
	// The media item's thumbnail URI. This field is omitted until encoding is complete.
	Thumbnail pulumi.StringPtrInput
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct pulumi.Float64PtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Uid pulumi.StringPtrInput
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry pulumi.StringPtrInput
	// The date and time the media item was uploaded.
	Uploaded  pulumi.StringPtrInput
	Watermark StreamWatermarkTypePtrInput
}

func (StreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamState)(nil)).Elem()
}

type streamArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// A user-defined identifier for the media creator.
	Creator *string `pulumi:"creator"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `pulumi:"identifier"`
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta *string `pulumi:"meta"`
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls *bool `pulumi:"requireSignedUrls"`
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion *string `pulumi:"scheduledDeletion"`
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct *float64 `pulumi:"thumbnailTimestampPct"`
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry *string `pulumi:"uploadExpiry"`
}

// The set of arguments for constructing a Stream resource.
type StreamArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins pulumi.StringArrayInput
	// A user-defined identifier for the media creator.
	Creator pulumi.StringPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrInput
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds pulumi.IntPtrInput
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta pulumi.StringPtrInput
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls pulumi.BoolPtrInput
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion pulumi.StringPtrInput
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct pulumi.Float64PtrInput
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry pulumi.StringPtrInput
}

func (StreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamArgs)(nil)).Elem()
}

type StreamInput interface {
	pulumi.Input

	ToStreamOutput() StreamOutput
	ToStreamOutputWithContext(ctx context.Context) StreamOutput
}

func (*Stream) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (i *Stream) ToStreamOutput() StreamOutput {
	return i.ToStreamOutputWithContext(context.Background())
}

func (i *Stream) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamOutput)
}

// StreamArrayInput is an input type that accepts StreamArray and StreamArrayOutput values.
// You can construct a concrete instance of `StreamArrayInput` via:
//
//	StreamArray{ StreamArgs{...} }
type StreamArrayInput interface {
	pulumi.Input

	ToStreamArrayOutput() StreamArrayOutput
	ToStreamArrayOutputWithContext(context.Context) StreamArrayOutput
}

type StreamArray []StreamInput

func (StreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (i StreamArray) ToStreamArrayOutput() StreamArrayOutput {
	return i.ToStreamArrayOutputWithContext(context.Background())
}

func (i StreamArray) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamArrayOutput)
}

// StreamMapInput is an input type that accepts StreamMap and StreamMapOutput values.
// You can construct a concrete instance of `StreamMapInput` via:
//
//	StreamMap{ "key": StreamArgs{...} }
type StreamMapInput interface {
	pulumi.Input

	ToStreamMapOutput() StreamMapOutput
	ToStreamMapOutputWithContext(context.Context) StreamMapOutput
}

type StreamMap map[string]StreamInput

func (StreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (i StreamMap) ToStreamMapOutput() StreamMapOutput {
	return i.ToStreamMapOutputWithContext(context.Background())
}

func (i StreamMap) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMapOutput)
}

type StreamOutput struct{ *pulumi.OutputState }

func (StreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Stream)(nil)).Elem()
}

func (o StreamOutput) ToStreamOutput() StreamOutput {
	return o
}

func (o StreamOutput) ToStreamOutputWithContext(ctx context.Context) StreamOutput {
	return o
}

// The account identifier tag.
func (o StreamOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
func (o StreamOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringArrayOutput { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// The date and time the media item was created.
func (o StreamOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// A user-defined identifier for the media creator.
func (o StreamOutput) Creator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.Creator }).(pulumi.StringPtrOutput)
}

// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
func (o StreamOutput) Duration() pulumi.Float64Output {
	return o.ApplyT(func(v *Stream) pulumi.Float64Output { return v.Duration }).(pulumi.Float64Output)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.Identifier }).(pulumi.StringPtrOutput)
}

func (o StreamOutput) Input() StreamInputTypeOutput {
	return o.ApplyT(func(v *Stream) StreamInputTypeOutput { return v.Input }).(StreamInputTypeOutput)
}

// The live input ID used to upload a video with Stream Live.
func (o StreamOutput) LiveInput() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.LiveInput }).(pulumi.StringOutput)
}

// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
func (o StreamOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.IntPtrOutput { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// A user modifiable key-value store used to reference other systems of record for managing videos.
func (o StreamOutput) Meta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.Meta }).(pulumi.StringPtrOutput)
}

// The date and time the media item was last modified.
func (o StreamOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Modified }).(pulumi.StringOutput)
}

func (o StreamOutput) Playback() StreamPlaybackOutput {
	return o.ApplyT(func(v *Stream) StreamPlaybackOutput { return v.Playback }).(StreamPlaybackOutput)
}

// The video's preview page URI. This field is omitted until encoding is complete.
func (o StreamOutput) Preview() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Preview }).(pulumi.StringOutput)
}

// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
func (o StreamOutput) ReadyToStream() pulumi.BoolOutput {
	return o.ApplyT(func(v *Stream) pulumi.BoolOutput { return v.ReadyToStream }).(pulumi.BoolOutput)
}

// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
func (o StreamOutput) ReadyToStreamAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.ReadyToStreamAt }).(pulumi.StringOutput)
}

// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
func (o StreamOutput) RequireSignedUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v *Stream) pulumi.BoolOutput { return v.RequireSignedUrls }).(pulumi.BoolOutput)
}

// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
func (o StreamOutput) ScheduledDeletion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.ScheduledDeletion }).(pulumi.StringPtrOutput)
}

// The size of the media item in bytes.
func (o StreamOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *Stream) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
func (o StreamOutput) Status() StreamStatusOutput {
	return o.ApplyT(func(v *Stream) StreamStatusOutput { return v.Status }).(StreamStatusOutput)
}

// The media item's thumbnail URI. This field is omitted until encoding is complete.
func (o StreamOutput) Thumbnail() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Thumbnail }).(pulumi.StringOutput)
}

// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
func (o StreamOutput) ThumbnailTimestampPct() pulumi.Float64Output {
	return o.ApplyT(func(v *Stream) pulumi.Float64Output { return v.ThumbnailTimestampPct }).(pulumi.Float64Output)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The date and time when the video upload URL is no longer valid for direct user uploads.
func (o StreamOutput) UploadExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringPtrOutput { return v.UploadExpiry }).(pulumi.StringPtrOutput)
}

// The date and time the media item was uploaded.
func (o StreamOutput) Uploaded() pulumi.StringOutput {
	return o.ApplyT(func(v *Stream) pulumi.StringOutput { return v.Uploaded }).(pulumi.StringOutput)
}

func (o StreamOutput) Watermark() StreamWatermarkTypeOutput {
	return o.ApplyT(func(v *Stream) StreamWatermarkTypeOutput { return v.Watermark }).(StreamWatermarkTypeOutput)
}

type StreamArrayOutput struct{ *pulumi.OutputState }

func (StreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Stream)(nil)).Elem()
}

func (o StreamArrayOutput) ToStreamArrayOutput() StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) ToStreamArrayOutputWithContext(ctx context.Context) StreamArrayOutput {
	return o
}

func (o StreamArrayOutput) Index(i pulumi.IntInput) StreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].([]*Stream)[vs[1].(int)]
	}).(StreamOutput)
}

type StreamMapOutput struct{ *pulumi.OutputState }

func (StreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Stream)(nil)).Elem()
}

func (o StreamMapOutput) ToStreamMapOutput() StreamMapOutput {
	return o
}

func (o StreamMapOutput) ToStreamMapOutputWithContext(ctx context.Context) StreamMapOutput {
	return o
}

func (o StreamMapOutput) MapIndex(k pulumi.StringInput) StreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Stream {
		return vs[0].(map[string]*Stream)[vs[1].(string)]
	}).(StreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInput)(nil)).Elem(), &Stream{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamArrayInput)(nil)).Elem(), StreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMapInput)(nil)).Elem(), StreamMap{})
	pulumi.RegisterOutputType(StreamOutput{})
	pulumi.RegisterOutputType(StreamArrayOutput{})
	pulumi.RegisterOutputType(StreamMapOutput{})
}
