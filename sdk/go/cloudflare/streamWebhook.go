// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStreamWebhook(ctx, "example_stream_webhook", &cloudflare.StreamWebhookArgs{
//				AccountId:       pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				NotificationUrl: pulumi.String("https://example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StreamWebhook struct {
	pulumi.CustomResourceState

	// The account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The URL where webhooks will be sent.
	NotificationUrl pulumi.StringOutput `pulumi:"notificationUrl"`
}

// NewStreamWebhook registers a new resource with the given unique name, arguments, and options.
func NewStreamWebhook(ctx *pulumi.Context,
	name string, args *StreamWebhookArgs, opts ...pulumi.ResourceOption) (*StreamWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.NotificationUrl == nil {
		return nil, errors.New("invalid value for required argument 'NotificationUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamWebhook
	err := ctx.RegisterResource("cloudflare:index/streamWebhook:StreamWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamWebhook gets an existing StreamWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamWebhookState, opts ...pulumi.ResourceOption) (*StreamWebhook, error) {
	var resource StreamWebhook
	err := ctx.ReadResource("cloudflare:index/streamWebhook:StreamWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamWebhook resources.
type streamWebhookState struct {
	// The account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// The URL where webhooks will be sent.
	NotificationUrl *string `pulumi:"notificationUrl"`
}

type StreamWebhookState struct {
	// The account identifier tag.
	AccountId pulumi.StringPtrInput
	// The URL where webhooks will be sent.
	NotificationUrl pulumi.StringPtrInput
}

func (StreamWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamWebhookState)(nil)).Elem()
}

type streamWebhookArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The URL where webhooks will be sent.
	NotificationUrl string `pulumi:"notificationUrl"`
}

// The set of arguments for constructing a StreamWebhook resource.
type StreamWebhookArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput
	// The URL where webhooks will be sent.
	NotificationUrl pulumi.StringInput
}

func (StreamWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamWebhookArgs)(nil)).Elem()
}

type StreamWebhookInput interface {
	pulumi.Input

	ToStreamWebhookOutput() StreamWebhookOutput
	ToStreamWebhookOutputWithContext(ctx context.Context) StreamWebhookOutput
}

func (*StreamWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamWebhook)(nil)).Elem()
}

func (i *StreamWebhook) ToStreamWebhookOutput() StreamWebhookOutput {
	return i.ToStreamWebhookOutputWithContext(context.Background())
}

func (i *StreamWebhook) ToStreamWebhookOutputWithContext(ctx context.Context) StreamWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamWebhookOutput)
}

// StreamWebhookArrayInput is an input type that accepts StreamWebhookArray and StreamWebhookArrayOutput values.
// You can construct a concrete instance of `StreamWebhookArrayInput` via:
//
//	StreamWebhookArray{ StreamWebhookArgs{...} }
type StreamWebhookArrayInput interface {
	pulumi.Input

	ToStreamWebhookArrayOutput() StreamWebhookArrayOutput
	ToStreamWebhookArrayOutputWithContext(context.Context) StreamWebhookArrayOutput
}

type StreamWebhookArray []StreamWebhookInput

func (StreamWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamWebhook)(nil)).Elem()
}

func (i StreamWebhookArray) ToStreamWebhookArrayOutput() StreamWebhookArrayOutput {
	return i.ToStreamWebhookArrayOutputWithContext(context.Background())
}

func (i StreamWebhookArray) ToStreamWebhookArrayOutputWithContext(ctx context.Context) StreamWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamWebhookArrayOutput)
}

// StreamWebhookMapInput is an input type that accepts StreamWebhookMap and StreamWebhookMapOutput values.
// You can construct a concrete instance of `StreamWebhookMapInput` via:
//
//	StreamWebhookMap{ "key": StreamWebhookArgs{...} }
type StreamWebhookMapInput interface {
	pulumi.Input

	ToStreamWebhookMapOutput() StreamWebhookMapOutput
	ToStreamWebhookMapOutputWithContext(context.Context) StreamWebhookMapOutput
}

type StreamWebhookMap map[string]StreamWebhookInput

func (StreamWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamWebhook)(nil)).Elem()
}

func (i StreamWebhookMap) ToStreamWebhookMapOutput() StreamWebhookMapOutput {
	return i.ToStreamWebhookMapOutputWithContext(context.Background())
}

func (i StreamWebhookMap) ToStreamWebhookMapOutputWithContext(ctx context.Context) StreamWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamWebhookMapOutput)
}

type StreamWebhookOutput struct{ *pulumi.OutputState }

func (StreamWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamWebhook)(nil)).Elem()
}

func (o StreamWebhookOutput) ToStreamWebhookOutput() StreamWebhookOutput {
	return o
}

func (o StreamWebhookOutput) ToStreamWebhookOutputWithContext(ctx context.Context) StreamWebhookOutput {
	return o
}

// The account identifier tag.
func (o StreamWebhookOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamWebhook) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The URL where webhooks will be sent.
func (o StreamWebhookOutput) NotificationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamWebhook) pulumi.StringOutput { return v.NotificationUrl }).(pulumi.StringOutput)
}

type StreamWebhookArrayOutput struct{ *pulumi.OutputState }

func (StreamWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamWebhook)(nil)).Elem()
}

func (o StreamWebhookArrayOutput) ToStreamWebhookArrayOutput() StreamWebhookArrayOutput {
	return o
}

func (o StreamWebhookArrayOutput) ToStreamWebhookArrayOutputWithContext(ctx context.Context) StreamWebhookArrayOutput {
	return o
}

func (o StreamWebhookArrayOutput) Index(i pulumi.IntInput) StreamWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamWebhook {
		return vs[0].([]*StreamWebhook)[vs[1].(int)]
	}).(StreamWebhookOutput)
}

type StreamWebhookMapOutput struct{ *pulumi.OutputState }

func (StreamWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamWebhook)(nil)).Elem()
}

func (o StreamWebhookMapOutput) ToStreamWebhookMapOutput() StreamWebhookMapOutput {
	return o
}

func (o StreamWebhookMapOutput) ToStreamWebhookMapOutputWithContext(ctx context.Context) StreamWebhookMapOutput {
	return o
}

func (o StreamWebhookMapOutput) MapIndex(k pulumi.StringInput) StreamWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamWebhook {
		return vs[0].(map[string]*StreamWebhook)[vs[1].(string)]
	}).(StreamWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamWebhookInput)(nil)).Elem(), &StreamWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamWebhookArrayInput)(nil)).Elem(), StreamWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamWebhookMapInput)(nil)).Elem(), StreamWebhookMap{})
	pulumi.RegisterOutputType(StreamWebhookOutput{})
	pulumi.RegisterOutputType(StreamWebhookArrayOutput{})
	pulumi.RegisterOutputType(StreamWebhookMapOutput{})
}
