// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDnsZoneTransfersOutgoing(ctx, "example_dns_zone_transfers_outgoing", &cloudflare.DnsZoneTransfersOutgoingArgs{
//				ZoneId: pulumi.String("269d8f4853475ca241c4e730be286b20"),
//				Name:   pulumi.String("www.example.com."),
//				Peers: pulumi.StringArray{
//					pulumi.String("23ff594956f20c2a721606e94745a8aa"),
//					pulumi.String("00920f38ce07c2e2f4df50b1f61d4194"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing example '<zone_id>'
// ```
type DnsZoneTransfersOutgoing struct {
	pulumi.CustomResourceState

	// The time for a specific event.
	CheckedTime pulumi.StringOutput `pulumi:"checkedTime"`
	// The time for a specific event.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The time for a specific event.
	LastTransferredTime pulumi.StringOutput `pulumi:"lastTransferredTime"`
	// Zone name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of peer tags.
	Peers pulumi.StringArrayOutput `pulumi:"peers"`
	// The serial number of the SOA for the given zone.
	SoaSerial pulumi.Float64Output `pulumi:"soaSerial"`
	ZoneId    pulumi.StringOutput  `pulumi:"zoneId"`
}

// NewDnsZoneTransfersOutgoing registers a new resource with the given unique name, arguments, and options.
func NewDnsZoneTransfersOutgoing(ctx *pulumi.Context,
	name string, args *DnsZoneTransfersOutgoingArgs, opts ...pulumi.ResourceOption) (*DnsZoneTransfersOutgoing, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Peers == nil {
		return nil, errors.New("invalid value for required argument 'Peers'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZoneTransfersOutgoing
	err := ctx.RegisterResource("cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZoneTransfersOutgoing gets an existing DnsZoneTransfersOutgoing resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZoneTransfersOutgoing(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneTransfersOutgoingState, opts ...pulumi.ResourceOption) (*DnsZoneTransfersOutgoing, error) {
	var resource DnsZoneTransfersOutgoing
	err := ctx.ReadResource("cloudflare:index/dnsZoneTransfersOutgoing:DnsZoneTransfersOutgoing", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZoneTransfersOutgoing resources.
type dnsZoneTransfersOutgoingState struct {
	// The time for a specific event.
	CheckedTime *string `pulumi:"checkedTime"`
	// The time for a specific event.
	CreatedTime *string `pulumi:"createdTime"`
	// The time for a specific event.
	LastTransferredTime *string `pulumi:"lastTransferredTime"`
	// Zone name.
	Name *string `pulumi:"name"`
	// A list of peer tags.
	Peers []string `pulumi:"peers"`
	// The serial number of the SOA for the given zone.
	SoaSerial *float64 `pulumi:"soaSerial"`
	ZoneId    *string  `pulumi:"zoneId"`
}

type DnsZoneTransfersOutgoingState struct {
	// The time for a specific event.
	CheckedTime pulumi.StringPtrInput
	// The time for a specific event.
	CreatedTime pulumi.StringPtrInput
	// The time for a specific event.
	LastTransferredTime pulumi.StringPtrInput
	// Zone name.
	Name pulumi.StringPtrInput
	// A list of peer tags.
	Peers pulumi.StringArrayInput
	// The serial number of the SOA for the given zone.
	SoaSerial pulumi.Float64PtrInput
	ZoneId    pulumi.StringPtrInput
}

func (DnsZoneTransfersOutgoingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersOutgoingState)(nil)).Elem()
}

type dnsZoneTransfersOutgoingArgs struct {
	// Zone name.
	Name string `pulumi:"name"`
	// A list of peer tags.
	Peers  []string `pulumi:"peers"`
	ZoneId string   `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsZoneTransfersOutgoing resource.
type DnsZoneTransfersOutgoingArgs struct {
	// Zone name.
	Name pulumi.StringInput
	// A list of peer tags.
	Peers  pulumi.StringArrayInput
	ZoneId pulumi.StringInput
}

func (DnsZoneTransfersOutgoingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersOutgoingArgs)(nil)).Elem()
}

type DnsZoneTransfersOutgoingInput interface {
	pulumi.Input

	ToDnsZoneTransfersOutgoingOutput() DnsZoneTransfersOutgoingOutput
	ToDnsZoneTransfersOutgoingOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingOutput
}

func (*DnsZoneTransfersOutgoing) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (i *DnsZoneTransfersOutgoing) ToDnsZoneTransfersOutgoingOutput() DnsZoneTransfersOutgoingOutput {
	return i.ToDnsZoneTransfersOutgoingOutputWithContext(context.Background())
}

func (i *DnsZoneTransfersOutgoing) ToDnsZoneTransfersOutgoingOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersOutgoingOutput)
}

// DnsZoneTransfersOutgoingArrayInput is an input type that accepts DnsZoneTransfersOutgoingArray and DnsZoneTransfersOutgoingArrayOutput values.
// You can construct a concrete instance of `DnsZoneTransfersOutgoingArrayInput` via:
//
//	DnsZoneTransfersOutgoingArray{ DnsZoneTransfersOutgoingArgs{...} }
type DnsZoneTransfersOutgoingArrayInput interface {
	pulumi.Input

	ToDnsZoneTransfersOutgoingArrayOutput() DnsZoneTransfersOutgoingArrayOutput
	ToDnsZoneTransfersOutgoingArrayOutputWithContext(context.Context) DnsZoneTransfersOutgoingArrayOutput
}

type DnsZoneTransfersOutgoingArray []DnsZoneTransfersOutgoingInput

func (DnsZoneTransfersOutgoingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (i DnsZoneTransfersOutgoingArray) ToDnsZoneTransfersOutgoingArrayOutput() DnsZoneTransfersOutgoingArrayOutput {
	return i.ToDnsZoneTransfersOutgoingArrayOutputWithContext(context.Background())
}

func (i DnsZoneTransfersOutgoingArray) ToDnsZoneTransfersOutgoingArrayOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersOutgoingArrayOutput)
}

// DnsZoneTransfersOutgoingMapInput is an input type that accepts DnsZoneTransfersOutgoingMap and DnsZoneTransfersOutgoingMapOutput values.
// You can construct a concrete instance of `DnsZoneTransfersOutgoingMapInput` via:
//
//	DnsZoneTransfersOutgoingMap{ "key": DnsZoneTransfersOutgoingArgs{...} }
type DnsZoneTransfersOutgoingMapInput interface {
	pulumi.Input

	ToDnsZoneTransfersOutgoingMapOutput() DnsZoneTransfersOutgoingMapOutput
	ToDnsZoneTransfersOutgoingMapOutputWithContext(context.Context) DnsZoneTransfersOutgoingMapOutput
}

type DnsZoneTransfersOutgoingMap map[string]DnsZoneTransfersOutgoingInput

func (DnsZoneTransfersOutgoingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (i DnsZoneTransfersOutgoingMap) ToDnsZoneTransfersOutgoingMapOutput() DnsZoneTransfersOutgoingMapOutput {
	return i.ToDnsZoneTransfersOutgoingMapOutputWithContext(context.Background())
}

func (i DnsZoneTransfersOutgoingMap) ToDnsZoneTransfersOutgoingMapOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersOutgoingMapOutput)
}

type DnsZoneTransfersOutgoingOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersOutgoingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (o DnsZoneTransfersOutgoingOutput) ToDnsZoneTransfersOutgoingOutput() DnsZoneTransfersOutgoingOutput {
	return o
}

func (o DnsZoneTransfersOutgoingOutput) ToDnsZoneTransfersOutgoingOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingOutput {
	return o
}

// The time for a specific event.
func (o DnsZoneTransfersOutgoingOutput) CheckedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringOutput { return v.CheckedTime }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o DnsZoneTransfersOutgoingOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o DnsZoneTransfersOutgoingOutput) LastTransferredTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringOutput { return v.LastTransferredTime }).(pulumi.StringOutput)
}

// Zone name.
func (o DnsZoneTransfersOutgoingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of peer tags.
func (o DnsZoneTransfersOutgoingOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringArrayOutput { return v.Peers }).(pulumi.StringArrayOutput)
}

// The serial number of the SOA for the given zone.
func (o DnsZoneTransfersOutgoingOutput) SoaSerial() pulumi.Float64Output {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.Float64Output { return v.SoaSerial }).(pulumi.Float64Output)
}

func (o DnsZoneTransfersOutgoingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersOutgoing) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsZoneTransfersOutgoingArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersOutgoingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (o DnsZoneTransfersOutgoingArrayOutput) ToDnsZoneTransfersOutgoingArrayOutput() DnsZoneTransfersOutgoingArrayOutput {
	return o
}

func (o DnsZoneTransfersOutgoingArrayOutput) ToDnsZoneTransfersOutgoingArrayOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingArrayOutput {
	return o
}

func (o DnsZoneTransfersOutgoingArrayOutput) Index(i pulumi.IntInput) DnsZoneTransfersOutgoingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZoneTransfersOutgoing {
		return vs[0].([]*DnsZoneTransfersOutgoing)[vs[1].(int)]
	}).(DnsZoneTransfersOutgoingOutput)
}

type DnsZoneTransfersOutgoingMapOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersOutgoingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersOutgoing)(nil)).Elem()
}

func (o DnsZoneTransfersOutgoingMapOutput) ToDnsZoneTransfersOutgoingMapOutput() DnsZoneTransfersOutgoingMapOutput {
	return o
}

func (o DnsZoneTransfersOutgoingMapOutput) ToDnsZoneTransfersOutgoingMapOutputWithContext(ctx context.Context) DnsZoneTransfersOutgoingMapOutput {
	return o
}

func (o DnsZoneTransfersOutgoingMapOutput) MapIndex(k pulumi.StringInput) DnsZoneTransfersOutgoingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZoneTransfersOutgoing {
		return vs[0].(map[string]*DnsZoneTransfersOutgoing)[vs[1].(string)]
	}).(DnsZoneTransfersOutgoingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersOutgoingInput)(nil)).Elem(), &DnsZoneTransfersOutgoing{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersOutgoingArrayInput)(nil)).Elem(), DnsZoneTransfersOutgoingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersOutgoingMapInput)(nil)).Elem(), DnsZoneTransfersOutgoingMap{})
	pulumi.RegisterOutputType(DnsZoneTransfersOutgoingOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersOutgoingArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersOutgoingMapOutput{})
}
