// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workerVersion:WorkerVersion example '<account_id>/<worker_id>/<version_id>'
// ```
type WorkerVersion struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Metadata about the version.
	Annotations WorkerVersionAnnotationsOutput `pulumi:"annotations"`
	// Configuration for assets within a Worker.
	Assets WorkerVersionAssetsPtrOutput `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerVersionBindingArrayOutput `pulumi:"bindings"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrOutput `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayOutput `pulumi:"compatibilityFlags"`
	// When the version was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Resource limits enforced at runtime.
	Limits WorkerVersionLimitsOutput `pulumi:"limits"`
	// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
	MainModule pulumi.StringPtrOutput `pulumi:"mainModule"`
	// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
	Migrations WorkerVersionMigrationsPtrOutput `pulumi:"migrations"`
	// Code, sourcemaps, and other content used at runtime.
	//
	// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
	// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
	// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
	// included as modules named `_headers` and `_redirects` with content type `text/plain`.
	Modules WorkerVersionModuleArrayOutput `pulumi:"modules"`
	// The integer version number, starting from one.
	Number pulumi.IntOutput `pulumi:"number"`
	// Placement settings for the version.
	Placement WorkerVersionPlacementPtrOutput `pulumi:"placement"`
	// The client used to create the version.
	Source pulumi.StringOutput `pulumi:"source"`
	// Usage model for the version.
	// Available values: "standard", "bundled", "unbound".
	//
	// Deprecated: This attribute is deprecated.
	UsageModel pulumi.StringOutput `pulumi:"usageModel"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId pulumi.StringOutput `pulumi:"workerId"`
}

// NewWorkerVersion registers a new resource with the given unique name, arguments, and options.
func NewWorkerVersion(ctx *pulumi.Context,
	name string, args *WorkerVersionArgs, opts ...pulumi.ResourceOption) (*WorkerVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.WorkerId == nil {
		return nil, errors.New("invalid value for required argument 'WorkerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerVersion
	err := ctx.RegisterResource("cloudflare:index/workerVersion:WorkerVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerVersion gets an existing WorkerVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerVersionState, opts ...pulumi.ResourceOption) (*WorkerVersion, error) {
	var resource WorkerVersion
	err := ctx.ReadResource("cloudflare:index/workerVersion:WorkerVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerVersion resources.
type workerVersionState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// Metadata about the version.
	Annotations *WorkerVersionAnnotations `pulumi:"annotations"`
	// Configuration for assets within a Worker.
	Assets *WorkerVersionAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkerVersionBinding `pulumi:"bindings"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// When the version was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Resource limits enforced at runtime.
	Limits *WorkerVersionLimits `pulumi:"limits"`
	// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
	MainModule *string `pulumi:"mainModule"`
	// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
	Migrations *WorkerVersionMigrations `pulumi:"migrations"`
	// Code, sourcemaps, and other content used at runtime.
	//
	// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
	// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
	// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
	// included as modules named `_headers` and `_redirects` with content type `text/plain`.
	Modules []WorkerVersionModule `pulumi:"modules"`
	// The integer version number, starting from one.
	Number *int `pulumi:"number"`
	// Placement settings for the version.
	Placement *WorkerVersionPlacement `pulumi:"placement"`
	// The client used to create the version.
	Source *string `pulumi:"source"`
	// Usage model for the version.
	// Available values: "standard", "bundled", "unbound".
	//
	// Deprecated: This attribute is deprecated.
	UsageModel *string `pulumi:"usageModel"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId *string `pulumi:"workerId"`
}

type WorkerVersionState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// Metadata about the version.
	Annotations WorkerVersionAnnotationsPtrInput
	// Configuration for assets within a Worker.
	Assets WorkerVersionAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerVersionBindingArrayInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// When the version was created.
	CreatedOn pulumi.StringPtrInput
	// Resource limits enforced at runtime.
	Limits WorkerVersionLimitsPtrInput
	// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
	MainModule pulumi.StringPtrInput
	// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
	Migrations WorkerVersionMigrationsPtrInput
	// Code, sourcemaps, and other content used at runtime.
	//
	// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
	// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
	// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
	// included as modules named `_headers` and `_redirects` with content type `text/plain`.
	Modules WorkerVersionModuleArrayInput
	// The integer version number, starting from one.
	Number pulumi.IntPtrInput
	// Placement settings for the version.
	Placement WorkerVersionPlacementPtrInput
	// The client used to create the version.
	Source pulumi.StringPtrInput
	// Usage model for the version.
	// Available values: "standard", "bundled", "unbound".
	//
	// Deprecated: This attribute is deprecated.
	UsageModel pulumi.StringPtrInput
	// Identifier for the Worker, which can be ID or name.
	WorkerId pulumi.StringPtrInput
}

func (WorkerVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerVersionState)(nil)).Elem()
}

type workerVersionArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Metadata about the version.
	Annotations *WorkerVersionAnnotations `pulumi:"annotations"`
	// Configuration for assets within a Worker.
	Assets *WorkerVersionAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkerVersionBinding `pulumi:"bindings"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// Resource limits enforced at runtime.
	Limits *WorkerVersionLimits `pulumi:"limits"`
	// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
	MainModule *string `pulumi:"mainModule"`
	// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
	Migrations *WorkerVersionMigrations `pulumi:"migrations"`
	// Code, sourcemaps, and other content used at runtime.
	//
	// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
	// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
	// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
	// included as modules named `_headers` and `_redirects` with content type `text/plain`.
	Modules []WorkerVersionModule `pulumi:"modules"`
	// Placement settings for the version.
	Placement *WorkerVersionPlacement `pulumi:"placement"`
	// Usage model for the version.
	// Available values: "standard", "bundled", "unbound".
	//
	// Deprecated: This attribute is deprecated.
	UsageModel *string `pulumi:"usageModel"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId string `pulumi:"workerId"`
}

// The set of arguments for constructing a WorkerVersion resource.
type WorkerVersionArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Metadata about the version.
	Annotations WorkerVersionAnnotationsPtrInput
	// Configuration for assets within a Worker.
	Assets WorkerVersionAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerVersionBindingArrayInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// Resource limits enforced at runtime.
	Limits WorkerVersionLimitsPtrInput
	// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
	MainModule pulumi.StringPtrInput
	// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
	Migrations WorkerVersionMigrationsPtrInput
	// Code, sourcemaps, and other content used at runtime.
	//
	// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
	// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
	// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
	// included as modules named `_headers` and `_redirects` with content type `text/plain`.
	Modules WorkerVersionModuleArrayInput
	// Placement settings for the version.
	Placement WorkerVersionPlacementPtrInput
	// Usage model for the version.
	// Available values: "standard", "bundled", "unbound".
	//
	// Deprecated: This attribute is deprecated.
	UsageModel pulumi.StringPtrInput
	// Identifier for the Worker, which can be ID or name.
	WorkerId pulumi.StringInput
}

func (WorkerVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerVersionArgs)(nil)).Elem()
}

type WorkerVersionInput interface {
	pulumi.Input

	ToWorkerVersionOutput() WorkerVersionOutput
	ToWorkerVersionOutputWithContext(ctx context.Context) WorkerVersionOutput
}

func (*WorkerVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerVersion)(nil)).Elem()
}

func (i *WorkerVersion) ToWorkerVersionOutput() WorkerVersionOutput {
	return i.ToWorkerVersionOutputWithContext(context.Background())
}

func (i *WorkerVersion) ToWorkerVersionOutputWithContext(ctx context.Context) WorkerVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerVersionOutput)
}

// WorkerVersionArrayInput is an input type that accepts WorkerVersionArray and WorkerVersionArrayOutput values.
// You can construct a concrete instance of `WorkerVersionArrayInput` via:
//
//	WorkerVersionArray{ WorkerVersionArgs{...} }
type WorkerVersionArrayInput interface {
	pulumi.Input

	ToWorkerVersionArrayOutput() WorkerVersionArrayOutput
	ToWorkerVersionArrayOutputWithContext(context.Context) WorkerVersionArrayOutput
}

type WorkerVersionArray []WorkerVersionInput

func (WorkerVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerVersion)(nil)).Elem()
}

func (i WorkerVersionArray) ToWorkerVersionArrayOutput() WorkerVersionArrayOutput {
	return i.ToWorkerVersionArrayOutputWithContext(context.Background())
}

func (i WorkerVersionArray) ToWorkerVersionArrayOutputWithContext(ctx context.Context) WorkerVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerVersionArrayOutput)
}

// WorkerVersionMapInput is an input type that accepts WorkerVersionMap and WorkerVersionMapOutput values.
// You can construct a concrete instance of `WorkerVersionMapInput` via:
//
//	WorkerVersionMap{ "key": WorkerVersionArgs{...} }
type WorkerVersionMapInput interface {
	pulumi.Input

	ToWorkerVersionMapOutput() WorkerVersionMapOutput
	ToWorkerVersionMapOutputWithContext(context.Context) WorkerVersionMapOutput
}

type WorkerVersionMap map[string]WorkerVersionInput

func (WorkerVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerVersion)(nil)).Elem()
}

func (i WorkerVersionMap) ToWorkerVersionMapOutput() WorkerVersionMapOutput {
	return i.ToWorkerVersionMapOutputWithContext(context.Background())
}

func (i WorkerVersionMap) ToWorkerVersionMapOutputWithContext(ctx context.Context) WorkerVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerVersionMapOutput)
}

type WorkerVersionOutput struct{ *pulumi.OutputState }

func (WorkerVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerVersion)(nil)).Elem()
}

func (o WorkerVersionOutput) ToWorkerVersionOutput() WorkerVersionOutput {
	return o
}

func (o WorkerVersionOutput) ToWorkerVersionOutputWithContext(ctx context.Context) WorkerVersionOutput {
	return o
}

// Identifier.
func (o WorkerVersionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Metadata about the version.
func (o WorkerVersionOutput) Annotations() WorkerVersionAnnotationsOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionAnnotationsOutput { return v.Annotations }).(WorkerVersionAnnotationsOutput)
}

// Configuration for assets within a Worker.
func (o WorkerVersionOutput) Assets() WorkerVersionAssetsPtrOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionAssetsPtrOutput { return v.Assets }).(WorkerVersionAssetsPtrOutput)
}

// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
func (o WorkerVersionOutput) Bindings() WorkerVersionBindingArrayOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionBindingArrayOutput { return v.Bindings }).(WorkerVersionBindingArrayOutput)
}

// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
func (o WorkerVersionOutput) CompatibilityDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringPtrOutput { return v.CompatibilityDate }).(pulumi.StringPtrOutput)
}

// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
func (o WorkerVersionOutput) CompatibilityFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringArrayOutput { return v.CompatibilityFlags }).(pulumi.StringArrayOutput)
}

// When the version was created.
func (o WorkerVersionOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Resource limits enforced at runtime.
func (o WorkerVersionOutput) Limits() WorkerVersionLimitsOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionLimitsOutput { return v.Limits }).(WorkerVersionLimitsOutput)
}

// The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
func (o WorkerVersionOutput) MainModule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringPtrOutput { return v.MainModule }).(pulumi.StringPtrOutput)
}

// Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
func (o WorkerVersionOutput) Migrations() WorkerVersionMigrationsPtrOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionMigrationsPtrOutput { return v.Migrations }).(WorkerVersionMigrationsPtrOutput)
}

// Code, sourcemaps, and other content used at runtime.
//
// This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
// [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
// [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
// included as modules named `_headers` and `_redirects` with content type `text/plain`.
func (o WorkerVersionOutput) Modules() WorkerVersionModuleArrayOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionModuleArrayOutput { return v.Modules }).(WorkerVersionModuleArrayOutput)
}

// The integer version number, starting from one.
func (o WorkerVersionOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.IntOutput { return v.Number }).(pulumi.IntOutput)
}

// Placement settings for the version.
func (o WorkerVersionOutput) Placement() WorkerVersionPlacementPtrOutput {
	return o.ApplyT(func(v *WorkerVersion) WorkerVersionPlacementPtrOutput { return v.Placement }).(WorkerVersionPlacementPtrOutput)
}

// The client used to create the version.
func (o WorkerVersionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// Usage model for the version.
// Available values: "standard", "bundled", "unbound".
//
// Deprecated: This attribute is deprecated.
func (o WorkerVersionOutput) UsageModel() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringOutput { return v.UsageModel }).(pulumi.StringOutput)
}

// Identifier for the Worker, which can be ID or name.
func (o WorkerVersionOutput) WorkerId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerVersion) pulumi.StringOutput { return v.WorkerId }).(pulumi.StringOutput)
}

type WorkerVersionArrayOutput struct{ *pulumi.OutputState }

func (WorkerVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerVersion)(nil)).Elem()
}

func (o WorkerVersionArrayOutput) ToWorkerVersionArrayOutput() WorkerVersionArrayOutput {
	return o
}

func (o WorkerVersionArrayOutput) ToWorkerVersionArrayOutputWithContext(ctx context.Context) WorkerVersionArrayOutput {
	return o
}

func (o WorkerVersionArrayOutput) Index(i pulumi.IntInput) WorkerVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerVersion {
		return vs[0].([]*WorkerVersion)[vs[1].(int)]
	}).(WorkerVersionOutput)
}

type WorkerVersionMapOutput struct{ *pulumi.OutputState }

func (WorkerVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerVersion)(nil)).Elem()
}

func (o WorkerVersionMapOutput) ToWorkerVersionMapOutput() WorkerVersionMapOutput {
	return o
}

func (o WorkerVersionMapOutput) ToWorkerVersionMapOutputWithContext(ctx context.Context) WorkerVersionMapOutput {
	return o
}

func (o WorkerVersionMapOutput) MapIndex(k pulumi.StringInput) WorkerVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerVersion {
		return vs[0].(map[string]*WorkerVersion)[vs[1].(string)]
	}).(WorkerVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerVersionInput)(nil)).Elem(), &WorkerVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerVersionArrayInput)(nil)).Elem(), WorkerVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerVersionMapInput)(nil)).Elem(), WorkerVersionMap{})
	pulumi.RegisterOutputType(WorkerVersionOutput{})
	pulumi.RegisterOutputType(WorkerVersionArrayOutput{})
	pulumi.RegisterOutputType(WorkerVersionMapOutput{})
}
