// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupStream(ctx, &cloudflare.LookupStreamArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				Identifier: "ea95132c15732412d22c1476fa83f27a",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStream(ctx *pulumi.Context, args *LookupStreamArgs, opts ...pulumi.InvokeOption) (*LookupStreamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamResult
	err := ctx.Invoke("cloudflare:index/getStream:getStream", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStream.
type LookupStreamArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
}

// A collection of values returned by getStream.
type LookupStreamResult struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// The date and time the media item was created.
	Created string `pulumi:"created"`
	// A user-defined identifier for the media creator.
	Creator string `pulumi:"creator"`
	// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
	Duration float64 `pulumi:"duration"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string         `pulumi:"identifier"`
	Input      GetStreamInput `pulumi:"input"`
	// The live input ID used to upload a video with Stream Live.
	LiveInput string `pulumi:"liveInput"`
	// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
	MaxDurationSeconds int `pulumi:"maxDurationSeconds"`
	// A user modifiable key-value store used to reference other systems of record for managing videos.
	Meta string `pulumi:"meta"`
	// The date and time the media item was last modified.
	Modified string            `pulumi:"modified"`
	Playback GetStreamPlayback `pulumi:"playback"`
	// The video's preview page URI. This field is omitted until encoding is complete.
	Preview string `pulumi:"preview"`
	// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStream bool `pulumi:"readyToStream"`
	// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
	ReadyToStreamAt string `pulumi:"readyToStreamAt"`
	// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
	RequireSignedUrls bool `pulumi:"requireSignedUrls"`
	// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
	ScheduledDeletion string `pulumi:"scheduledDeletion"`
	// The size of the media item in bytes.
	Size float64 `pulumi:"size"`
	// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
	Status GetStreamStatus `pulumi:"status"`
	// The media item's thumbnail URI. This field is omitted until encoding is complete.
	Thumbnail string `pulumi:"thumbnail"`
	// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
	ThumbnailTimestampPct float64 `pulumi:"thumbnailTimestampPct"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid string `pulumi:"uid"`
	// The date and time when the video upload URL is no longer valid for direct user uploads.
	UploadExpiry string `pulumi:"uploadExpiry"`
	// The date and time the media item was uploaded.
	Uploaded  string                 `pulumi:"uploaded"`
	Watermark GetStreamWatermarkType `pulumi:"watermark"`
}

func LookupStreamOutput(ctx *pulumi.Context, args LookupStreamOutputArgs, opts ...pulumi.InvokeOption) LookupStreamResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamResultOutput, error) {
			args := v.(LookupStreamArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getStream:getStream", args, LookupStreamResultOutput{}, options).(LookupStreamResultOutput), nil
		}).(LookupStreamResultOutput)
}

// A collection of arguments for invoking getStream.
type LookupStreamOutputArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringInput `pulumi:"identifier"`
}

func (LookupStreamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamArgs)(nil)).Elem()
}

// A collection of values returned by getStream.
type LookupStreamResultOutput struct{ *pulumi.OutputState }

func (LookupStreamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamResult)(nil)).Elem()
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutput() LookupStreamResultOutput {
	return o
}

func (o LookupStreamResultOutput) ToLookupStreamResultOutputWithContext(ctx context.Context) LookupStreamResultOutput {
	return o
}

// The account identifier tag.
func (o LookupStreamResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
func (o LookupStreamResultOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupStreamResult) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// The date and time the media item was created.
func (o LookupStreamResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Created }).(pulumi.StringOutput)
}

// A user-defined identifier for the media creator.
func (o LookupStreamResultOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Creator }).(pulumi.StringOutput)
}

// The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
func (o LookupStreamResultOutput) Duration() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamResult) float64 { return v.Duration }).(pulumi.Float64Output)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStreamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Id }).(pulumi.StringOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o LookupStreamResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o LookupStreamResultOutput) Input() GetStreamInputOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamInput { return v.Input }).(GetStreamInputOutput)
}

// The live input ID used to upload a video with Stream Live.
func (o LookupStreamResultOutput) LiveInput() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.LiveInput }).(pulumi.StringOutput)
}

// The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
func (o LookupStreamResultOutput) MaxDurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamResult) int { return v.MaxDurationSeconds }).(pulumi.IntOutput)
}

// A user modifiable key-value store used to reference other systems of record for managing videos.
func (o LookupStreamResultOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Meta }).(pulumi.StringOutput)
}

// The date and time the media item was last modified.
func (o LookupStreamResultOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Modified }).(pulumi.StringOutput)
}

func (o LookupStreamResultOutput) Playback() GetStreamPlaybackOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamPlayback { return v.Playback }).(GetStreamPlaybackOutput)
}

// The video's preview page URI. This field is omitted until encoding is complete.
func (o LookupStreamResultOutput) Preview() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Preview }).(pulumi.StringOutput)
}

// Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
func (o LookupStreamResultOutput) ReadyToStream() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamResult) bool { return v.ReadyToStream }).(pulumi.BoolOutput)
}

// Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
func (o LookupStreamResultOutput) ReadyToStreamAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.ReadyToStreamAt }).(pulumi.StringOutput)
}

// Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
func (o LookupStreamResultOutput) RequireSignedUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamResult) bool { return v.RequireSignedUrls }).(pulumi.BoolOutput)
}

// Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
func (o LookupStreamResultOutput) ScheduledDeletion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.ScheduledDeletion }).(pulumi.StringOutput)
}

// The size of the media item in bytes.
func (o LookupStreamResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
func (o LookupStreamResultOutput) Status() GetStreamStatusOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamStatus { return v.Status }).(GetStreamStatusOutput)
}

// The media item's thumbnail URI. This field is omitted until encoding is complete.
func (o LookupStreamResultOutput) Thumbnail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Thumbnail }).(pulumi.StringOutput)
}

// The timestamp for a thumbnail image calculated as a percentage value of the video's duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
func (o LookupStreamResultOutput) ThumbnailTimestampPct() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamResult) float64 { return v.ThumbnailTimestampPct }).(pulumi.Float64Output)
}

// A Cloudflare-generated unique identifier for a media item.
func (o LookupStreamResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The date and time when the video upload URL is no longer valid for direct user uploads.
func (o LookupStreamResultOutput) UploadExpiry() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.UploadExpiry }).(pulumi.StringOutput)
}

// The date and time the media item was uploaded.
func (o LookupStreamResultOutput) Uploaded() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamResult) string { return v.Uploaded }).(pulumi.StringOutput)
}

func (o LookupStreamResultOutput) Watermark() GetStreamWatermarkTypeOutput {
	return o.ApplyT(func(v LookupStreamResult) GetStreamWatermarkType { return v.Watermark }).(GetStreamWatermarkTypeOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamResultOutput{})
}
