// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cloudflare Web Analytics Site resource.
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/webAnalyticsSite:WebAnalyticsSite example <account_id>/<site_tag>
//
// ```
type WebAnalyticsSite struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
	AutoInstall pulumi.BoolOutput `pulumi:"autoInstall"`
	// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// The ID for the ruleset associated to this Web Analytics Site.
	RulesetId pulumi.StringOutput `pulumi:"rulesetId"`
	// The Web Analytics site tag.
	SiteTag pulumi.StringOutput `pulumi:"siteTag"`
	// The token for the Web Analytics site.
	SiteToken pulumi.StringOutput `pulumi:"siteToken"`
	// The encoded JS snippet to add to your site's HTML page if autoInstall is false.
	Snippet pulumi.StringOutput `pulumi:"snippet"`
	// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
	ZoneTag pulumi.StringPtrOutput `pulumi:"zoneTag"`
}

// NewWebAnalyticsSite registers a new resource with the given unique name, arguments, and options.
func NewWebAnalyticsSite(ctx *pulumi.Context,
	name string, args *WebAnalyticsSiteArgs, opts ...pulumi.ResourceOption) (*WebAnalyticsSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AutoInstall == nil {
		return nil, errors.New("invalid value for required argument 'AutoInstall'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"siteToken",
		"snippet",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WebAnalyticsSite
	err := ctx.RegisterResource("cloudflare:index/webAnalyticsSite:WebAnalyticsSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebAnalyticsSite gets an existing WebAnalyticsSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebAnalyticsSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebAnalyticsSiteState, opts ...pulumi.ResourceOption) (*WebAnalyticsSite, error) {
	var resource WebAnalyticsSite
	err := ctx.ReadResource("cloudflare:index/webAnalyticsSite:WebAnalyticsSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebAnalyticsSite resources.
type webAnalyticsSiteState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
	AutoInstall *bool `pulumi:"autoInstall"`
	// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
	Host *string `pulumi:"host"`
	// The ID for the ruleset associated to this Web Analytics Site.
	RulesetId *string `pulumi:"rulesetId"`
	// The Web Analytics site tag.
	SiteTag *string `pulumi:"siteTag"`
	// The token for the Web Analytics site.
	SiteToken *string `pulumi:"siteToken"`
	// The encoded JS snippet to add to your site's HTML page if autoInstall is false.
	Snippet *string `pulumi:"snippet"`
	// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
	ZoneTag *string `pulumi:"zoneTag"`
}

type WebAnalyticsSiteState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
	AutoInstall pulumi.BoolPtrInput
	// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
	Host pulumi.StringPtrInput
	// The ID for the ruleset associated to this Web Analytics Site.
	RulesetId pulumi.StringPtrInput
	// The Web Analytics site tag.
	SiteTag pulumi.StringPtrInput
	// The token for the Web Analytics site.
	SiteToken pulumi.StringPtrInput
	// The encoded JS snippet to add to your site's HTML page if autoInstall is false.
	Snippet pulumi.StringPtrInput
	// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
	ZoneTag pulumi.StringPtrInput
}

func (WebAnalyticsSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*webAnalyticsSiteState)(nil)).Elem()
}

type webAnalyticsSiteArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
	AutoInstall bool `pulumi:"autoInstall"`
	// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
	Host *string `pulumi:"host"`
	// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
	ZoneTag *string `pulumi:"zoneTag"`
}

// The set of arguments for constructing a WebAnalyticsSite resource.
type WebAnalyticsSiteArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringInput
	// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
	AutoInstall pulumi.BoolInput
	// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
	Host pulumi.StringPtrInput
	// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
	ZoneTag pulumi.StringPtrInput
}

func (WebAnalyticsSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webAnalyticsSiteArgs)(nil)).Elem()
}

type WebAnalyticsSiteInput interface {
	pulumi.Input

	ToWebAnalyticsSiteOutput() WebAnalyticsSiteOutput
	ToWebAnalyticsSiteOutputWithContext(ctx context.Context) WebAnalyticsSiteOutput
}

func (*WebAnalyticsSite) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAnalyticsSite)(nil)).Elem()
}

func (i *WebAnalyticsSite) ToWebAnalyticsSiteOutput() WebAnalyticsSiteOutput {
	return i.ToWebAnalyticsSiteOutputWithContext(context.Background())
}

func (i *WebAnalyticsSite) ToWebAnalyticsSiteOutputWithContext(ctx context.Context) WebAnalyticsSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnalyticsSiteOutput)
}

func (i *WebAnalyticsSite) ToOutput(ctx context.Context) pulumix.Output[*WebAnalyticsSite] {
	return pulumix.Output[*WebAnalyticsSite]{
		OutputState: i.ToWebAnalyticsSiteOutputWithContext(ctx).OutputState,
	}
}

// WebAnalyticsSiteArrayInput is an input type that accepts WebAnalyticsSiteArray and WebAnalyticsSiteArrayOutput values.
// You can construct a concrete instance of `WebAnalyticsSiteArrayInput` via:
//
//	WebAnalyticsSiteArray{ WebAnalyticsSiteArgs{...} }
type WebAnalyticsSiteArrayInput interface {
	pulumi.Input

	ToWebAnalyticsSiteArrayOutput() WebAnalyticsSiteArrayOutput
	ToWebAnalyticsSiteArrayOutputWithContext(context.Context) WebAnalyticsSiteArrayOutput
}

type WebAnalyticsSiteArray []WebAnalyticsSiteInput

func (WebAnalyticsSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAnalyticsSite)(nil)).Elem()
}

func (i WebAnalyticsSiteArray) ToWebAnalyticsSiteArrayOutput() WebAnalyticsSiteArrayOutput {
	return i.ToWebAnalyticsSiteArrayOutputWithContext(context.Background())
}

func (i WebAnalyticsSiteArray) ToWebAnalyticsSiteArrayOutputWithContext(ctx context.Context) WebAnalyticsSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnalyticsSiteArrayOutput)
}

func (i WebAnalyticsSiteArray) ToOutput(ctx context.Context) pulumix.Output[[]*WebAnalyticsSite] {
	return pulumix.Output[[]*WebAnalyticsSite]{
		OutputState: i.ToWebAnalyticsSiteArrayOutputWithContext(ctx).OutputState,
	}
}

// WebAnalyticsSiteMapInput is an input type that accepts WebAnalyticsSiteMap and WebAnalyticsSiteMapOutput values.
// You can construct a concrete instance of `WebAnalyticsSiteMapInput` via:
//
//	WebAnalyticsSiteMap{ "key": WebAnalyticsSiteArgs{...} }
type WebAnalyticsSiteMapInput interface {
	pulumi.Input

	ToWebAnalyticsSiteMapOutput() WebAnalyticsSiteMapOutput
	ToWebAnalyticsSiteMapOutputWithContext(context.Context) WebAnalyticsSiteMapOutput
}

type WebAnalyticsSiteMap map[string]WebAnalyticsSiteInput

func (WebAnalyticsSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAnalyticsSite)(nil)).Elem()
}

func (i WebAnalyticsSiteMap) ToWebAnalyticsSiteMapOutput() WebAnalyticsSiteMapOutput {
	return i.ToWebAnalyticsSiteMapOutputWithContext(context.Background())
}

func (i WebAnalyticsSiteMap) ToWebAnalyticsSiteMapOutputWithContext(ctx context.Context) WebAnalyticsSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebAnalyticsSiteMapOutput)
}

func (i WebAnalyticsSiteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebAnalyticsSite] {
	return pulumix.Output[map[string]*WebAnalyticsSite]{
		OutputState: i.ToWebAnalyticsSiteMapOutputWithContext(ctx).OutputState,
	}
}

type WebAnalyticsSiteOutput struct{ *pulumi.OutputState }

func (WebAnalyticsSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebAnalyticsSite)(nil)).Elem()
}

func (o WebAnalyticsSiteOutput) ToWebAnalyticsSiteOutput() WebAnalyticsSiteOutput {
	return o
}

func (o WebAnalyticsSiteOutput) ToWebAnalyticsSiteOutputWithContext(ctx context.Context) WebAnalyticsSiteOutput {
	return o
}

func (o WebAnalyticsSiteOutput) ToOutput(ctx context.Context) pulumix.Output[*WebAnalyticsSite] {
	return pulumix.Output[*WebAnalyticsSite]{
		OutputState: o.OutputState,
	}
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o WebAnalyticsSiteOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether Cloudflare will automatically inject the JavaScript snippet for orange-clouded sites. **Modifying this attribute will force creation of a new resource.**
func (o WebAnalyticsSiteOutput) AutoInstall() pulumi.BoolOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.BoolOutput { return v.AutoInstall }).(pulumi.BoolOutput)
}

// The hostname to use for gray-clouded sites. Must provide only one of `zoneTag`. **Modifying this attribute will force creation of a new resource.**
func (o WebAnalyticsSiteOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringPtrOutput { return v.Host }).(pulumi.StringPtrOutput)
}

// The ID for the ruleset associated to this Web Analytics Site.
func (o WebAnalyticsSiteOutput) RulesetId() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringOutput { return v.RulesetId }).(pulumi.StringOutput)
}

// The Web Analytics site tag.
func (o WebAnalyticsSiteOutput) SiteTag() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringOutput { return v.SiteTag }).(pulumi.StringOutput)
}

// The token for the Web Analytics site.
func (o WebAnalyticsSiteOutput) SiteToken() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringOutput { return v.SiteToken }).(pulumi.StringOutput)
}

// The encoded JS snippet to add to your site's HTML page if autoInstall is false.
func (o WebAnalyticsSiteOutput) Snippet() pulumi.StringOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringOutput { return v.Snippet }).(pulumi.StringOutput)
}

// The zone identifier for orange-clouded sites. Must provide only one of `host`. **Modifying this attribute will force creation of a new resource.**
func (o WebAnalyticsSiteOutput) ZoneTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebAnalyticsSite) pulumi.StringPtrOutput { return v.ZoneTag }).(pulumi.StringPtrOutput)
}

type WebAnalyticsSiteArrayOutput struct{ *pulumi.OutputState }

func (WebAnalyticsSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WebAnalyticsSite)(nil)).Elem()
}

func (o WebAnalyticsSiteArrayOutput) ToWebAnalyticsSiteArrayOutput() WebAnalyticsSiteArrayOutput {
	return o
}

func (o WebAnalyticsSiteArrayOutput) ToWebAnalyticsSiteArrayOutputWithContext(ctx context.Context) WebAnalyticsSiteArrayOutput {
	return o
}

func (o WebAnalyticsSiteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WebAnalyticsSite] {
	return pulumix.Output[[]*WebAnalyticsSite]{
		OutputState: o.OutputState,
	}
}

func (o WebAnalyticsSiteArrayOutput) Index(i pulumi.IntInput) WebAnalyticsSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WebAnalyticsSite {
		return vs[0].([]*WebAnalyticsSite)[vs[1].(int)]
	}).(WebAnalyticsSiteOutput)
}

type WebAnalyticsSiteMapOutput struct{ *pulumi.OutputState }

func (WebAnalyticsSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WebAnalyticsSite)(nil)).Elem()
}

func (o WebAnalyticsSiteMapOutput) ToWebAnalyticsSiteMapOutput() WebAnalyticsSiteMapOutput {
	return o
}

func (o WebAnalyticsSiteMapOutput) ToWebAnalyticsSiteMapOutputWithContext(ctx context.Context) WebAnalyticsSiteMapOutput {
	return o
}

func (o WebAnalyticsSiteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WebAnalyticsSite] {
	return pulumix.Output[map[string]*WebAnalyticsSite]{
		OutputState: o.OutputState,
	}
}

func (o WebAnalyticsSiteMapOutput) MapIndex(k pulumi.StringInput) WebAnalyticsSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WebAnalyticsSite {
		return vs[0].(map[string]*WebAnalyticsSite)[vs[1].(string)]
	}).(WebAnalyticsSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebAnalyticsSiteInput)(nil)).Elem(), &WebAnalyticsSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAnalyticsSiteArrayInput)(nil)).Elem(), WebAnalyticsSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebAnalyticsSiteMapInput)(nil)).Elem(), WebAnalyticsSiteMap{})
	pulumi.RegisterOutputType(WebAnalyticsSiteOutput{})
	pulumi.RegisterOutputType(WebAnalyticsSiteArrayOutput{})
	pulumi.RegisterOutputType(WebAnalyticsSiteMapOutput{})
}
