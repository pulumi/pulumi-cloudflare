// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStreamDownload(ctx, "example_stream_download", &cloudflare.StreamDownloadArgs{
//				AccountId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Identifier: pulumi.String("ea95132c15732412d22c1476fa83f27a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StreamDownload struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
}

// NewStreamDownload registers a new resource with the given unique name, arguments, and options.
func NewStreamDownload(ctx *pulumi.Context,
	name string, args *StreamDownloadArgs, opts ...pulumi.ResourceOption) (*StreamDownload, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamDownload
	err := ctx.RegisterResource("cloudflare:index/streamDownload:StreamDownload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamDownload gets an existing StreamDownload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamDownload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamDownloadState, opts ...pulumi.ResourceOption) (*StreamDownload, error) {
	var resource StreamDownload
	err := ctx.ReadResource("cloudflare:index/streamDownload:StreamDownload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamDownload resources.
type streamDownloadState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `pulumi:"identifier"`
}

type StreamDownloadState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrInput
}

func (StreamDownloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamDownloadState)(nil)).Elem()
}

type streamDownloadArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
}

// The set of arguments for constructing a StreamDownload resource.
type StreamDownloadArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringInput
}

func (StreamDownloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamDownloadArgs)(nil)).Elem()
}

type StreamDownloadInput interface {
	pulumi.Input

	ToStreamDownloadOutput() StreamDownloadOutput
	ToStreamDownloadOutputWithContext(ctx context.Context) StreamDownloadOutput
}

func (*StreamDownload) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDownload)(nil)).Elem()
}

func (i *StreamDownload) ToStreamDownloadOutput() StreamDownloadOutput {
	return i.ToStreamDownloadOutputWithContext(context.Background())
}

func (i *StreamDownload) ToStreamDownloadOutputWithContext(ctx context.Context) StreamDownloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDownloadOutput)
}

// StreamDownloadArrayInput is an input type that accepts StreamDownloadArray and StreamDownloadArrayOutput values.
// You can construct a concrete instance of `StreamDownloadArrayInput` via:
//
//	StreamDownloadArray{ StreamDownloadArgs{...} }
type StreamDownloadArrayInput interface {
	pulumi.Input

	ToStreamDownloadArrayOutput() StreamDownloadArrayOutput
	ToStreamDownloadArrayOutputWithContext(context.Context) StreamDownloadArrayOutput
}

type StreamDownloadArray []StreamDownloadInput

func (StreamDownloadArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamDownload)(nil)).Elem()
}

func (i StreamDownloadArray) ToStreamDownloadArrayOutput() StreamDownloadArrayOutput {
	return i.ToStreamDownloadArrayOutputWithContext(context.Background())
}

func (i StreamDownloadArray) ToStreamDownloadArrayOutputWithContext(ctx context.Context) StreamDownloadArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDownloadArrayOutput)
}

// StreamDownloadMapInput is an input type that accepts StreamDownloadMap and StreamDownloadMapOutput values.
// You can construct a concrete instance of `StreamDownloadMapInput` via:
//
//	StreamDownloadMap{ "key": StreamDownloadArgs{...} }
type StreamDownloadMapInput interface {
	pulumi.Input

	ToStreamDownloadMapOutput() StreamDownloadMapOutput
	ToStreamDownloadMapOutputWithContext(context.Context) StreamDownloadMapOutput
}

type StreamDownloadMap map[string]StreamDownloadInput

func (StreamDownloadMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamDownload)(nil)).Elem()
}

func (i StreamDownloadMap) ToStreamDownloadMapOutput() StreamDownloadMapOutput {
	return i.ToStreamDownloadMapOutputWithContext(context.Background())
}

func (i StreamDownloadMap) ToStreamDownloadMapOutputWithContext(ctx context.Context) StreamDownloadMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDownloadMapOutput)
}

type StreamDownloadOutput struct{ *pulumi.OutputState }

func (StreamDownloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamDownload)(nil)).Elem()
}

func (o StreamDownloadOutput) ToStreamDownloadOutput() StreamDownloadOutput {
	return o
}

func (o StreamDownloadOutput) ToStreamDownloadOutputWithContext(ctx context.Context) StreamDownloadOutput {
	return o
}

// Identifier
func (o StreamDownloadOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamDownload) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamDownloadOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamDownload) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

type StreamDownloadArrayOutput struct{ *pulumi.OutputState }

func (StreamDownloadArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamDownload)(nil)).Elem()
}

func (o StreamDownloadArrayOutput) ToStreamDownloadArrayOutput() StreamDownloadArrayOutput {
	return o
}

func (o StreamDownloadArrayOutput) ToStreamDownloadArrayOutputWithContext(ctx context.Context) StreamDownloadArrayOutput {
	return o
}

func (o StreamDownloadArrayOutput) Index(i pulumi.IntInput) StreamDownloadOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamDownload {
		return vs[0].([]*StreamDownload)[vs[1].(int)]
	}).(StreamDownloadOutput)
}

type StreamDownloadMapOutput struct{ *pulumi.OutputState }

func (StreamDownloadMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamDownload)(nil)).Elem()
}

func (o StreamDownloadMapOutput) ToStreamDownloadMapOutput() StreamDownloadMapOutput {
	return o
}

func (o StreamDownloadMapOutput) ToStreamDownloadMapOutputWithContext(ctx context.Context) StreamDownloadMapOutput {
	return o
}

func (o StreamDownloadMapOutput) MapIndex(k pulumi.StringInput) StreamDownloadOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamDownload {
		return vs[0].(map[string]*StreamDownload)[vs[1].(string)]
	}).(StreamDownloadOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDownloadInput)(nil)).Elem(), &StreamDownload{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDownloadArrayInput)(nil)).Elem(), StreamDownloadArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamDownloadMapInput)(nil)).Elem(), StreamDownloadMap{})
	pulumi.RegisterOutputType(StreamDownloadOutput{})
	pulumi.RegisterOutputType(StreamDownloadArrayOutput{})
	pulumi.RegisterOutputType(StreamDownloadMapOutput{})
}
