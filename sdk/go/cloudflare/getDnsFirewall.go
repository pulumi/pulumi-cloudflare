// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupDnsFirewall(ctx, &cloudflare.LookupDnsFirewallArgs{
//				AccountId:     "023e105f4ecef8ad9ca31a8372d0c353",
//				DnsFirewallId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsFirewall(ctx *pulumi.Context, args *LookupDnsFirewallArgs, opts ...pulumi.InvokeOption) (*LookupDnsFirewallResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsFirewallResult
	err := ctx.Invoke("cloudflare:index/getDnsFirewall:getDnsFirewall", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsFirewall.
type LookupDnsFirewallArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Identifier.
	DnsFirewallId *string `pulumi:"dnsFirewallId"`
}

// A collection of values returned by getDnsFirewall.
type LookupDnsFirewallResult struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Attack mitigation settings
	AttackMitigation GetDnsFirewallAttackMitigation `pulumi:"attackMitigation"`
	// Whether to refuse to answer queries for the ANY type
	DeprecateAnyRequests bool `pulumi:"deprecateAnyRequests"`
	// Identifier.
	DnsFirewallId  *string  `pulumi:"dnsFirewallId"`
	DnsFirewallIps []string `pulumi:"dnsFirewallIps"`
	// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
	EcsFallback bool `pulumi:"ecsFallback"`
	// Identifier.
	Id string `pulumi:"id"`
	// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
	MaximumCacheTtl float64 `pulumi:"maximumCacheTtl"`
	// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
	MinimumCacheTtl float64 `pulumi:"minimumCacheTtl"`
	// Last modification of DNS Firewall cluster
	ModifiedOn string `pulumi:"modifiedOn"`
	// DNS Firewall cluster name
	Name string `pulumi:"name"`
	// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
	NegativeCacheTtl float64 `pulumi:"negativeCacheTtl"`
	// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
	Ratelimit float64 `pulumi:"ratelimit"`
	// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
	Retries     float64  `pulumi:"retries"`
	UpstreamIps []string `pulumi:"upstreamIps"`
}

func LookupDnsFirewallOutput(ctx *pulumi.Context, args LookupDnsFirewallOutputArgs, opts ...pulumi.InvokeOption) LookupDnsFirewallResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsFirewallResultOutput, error) {
			args := v.(LookupDnsFirewallArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getDnsFirewall:getDnsFirewall", args, LookupDnsFirewallResultOutput{}, options).(LookupDnsFirewallResultOutput), nil
		}).(LookupDnsFirewallResultOutput)
}

// A collection of arguments for invoking getDnsFirewall.
type LookupDnsFirewallOutputArgs struct {
	// Identifier.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier.
	DnsFirewallId pulumi.StringPtrInput `pulumi:"dnsFirewallId"`
}

func (LookupDnsFirewallOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsFirewallArgs)(nil)).Elem()
}

// A collection of values returned by getDnsFirewall.
type LookupDnsFirewallResultOutput struct{ *pulumi.OutputState }

func (LookupDnsFirewallResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsFirewallResult)(nil)).Elem()
}

func (o LookupDnsFirewallResultOutput) ToLookupDnsFirewallResultOutput() LookupDnsFirewallResultOutput {
	return o
}

func (o LookupDnsFirewallResultOutput) ToLookupDnsFirewallResultOutputWithContext(ctx context.Context) LookupDnsFirewallResultOutput {
	return o
}

// Identifier.
func (o LookupDnsFirewallResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Attack mitigation settings
func (o LookupDnsFirewallResultOutput) AttackMitigation() GetDnsFirewallAttackMitigationOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) GetDnsFirewallAttackMitigation { return v.AttackMitigation }).(GetDnsFirewallAttackMitigationOutput)
}

// Whether to refuse to answer queries for the ANY type
func (o LookupDnsFirewallResultOutput) DeprecateAnyRequests() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) bool { return v.DeprecateAnyRequests }).(pulumi.BoolOutput)
}

// Identifier.
func (o LookupDnsFirewallResultOutput) DnsFirewallId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) *string { return v.DnsFirewallId }).(pulumi.StringPtrOutput)
}

func (o LookupDnsFirewallResultOutput) DnsFirewallIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) []string { return v.DnsFirewallIps }).(pulumi.StringArrayOutput)
}

// Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
func (o LookupDnsFirewallResultOutput) EcsFallback() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) bool { return v.EcsFallback }).(pulumi.BoolOutput)
}

// Identifier.
func (o LookupDnsFirewallResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) string { return v.Id }).(pulumi.StringOutput)
}

// Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
func (o LookupDnsFirewallResultOutput) MaximumCacheTtl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsFirewallResult) float64 { return v.MaximumCacheTtl }).(pulumi.Float64Output)
}

// Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
func (o LookupDnsFirewallResultOutput) MinimumCacheTtl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsFirewallResult) float64 { return v.MinimumCacheTtl }).(pulumi.Float64Output)
}

// Last modification of DNS Firewall cluster
func (o LookupDnsFirewallResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// DNS Firewall cluster name
func (o LookupDnsFirewallResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) string { return v.Name }).(pulumi.StringOutput)
}

// Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
func (o LookupDnsFirewallResultOutput) NegativeCacheTtl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsFirewallResult) float64 { return v.NegativeCacheTtl }).(pulumi.Float64Output)
}

// Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
func (o LookupDnsFirewallResultOutput) Ratelimit() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsFirewallResult) float64 { return v.Ratelimit }).(pulumi.Float64Output)
}

// Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
func (o LookupDnsFirewallResultOutput) Retries() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsFirewallResult) float64 { return v.Retries }).(pulumi.Float64Output)
}

func (o LookupDnsFirewallResultOutput) UpstreamIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsFirewallResult) []string { return v.UpstreamIps }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsFirewallResultOutput{})
}
