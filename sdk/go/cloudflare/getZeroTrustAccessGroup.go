// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZeroTrustAccessGroup(ctx, &cloudflare.LookupZeroTrustAccessGroupArgs{
//				GroupId:   pulumi.StringRef("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//				AccountId: pulumi.StringRef("account_id"),
//				ZoneId:    pulumi.StringRef("zone_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZeroTrustAccessGroup(ctx *pulumi.Context, args *LookupZeroTrustAccessGroupArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustAccessGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustAccessGroupResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustAccessGroup:getZeroTrustAccessGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustAccessGroup.
type LookupZeroTrustAccessGroupArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string                        `pulumi:"accountId"`
	Filter    *GetZeroTrustAccessGroupFilter `pulumi:"filter"`
	// UUID.
	GroupId *string `pulumi:"groupId"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getZeroTrustAccessGroup.
type LookupZeroTrustAccessGroupResult struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes []GetZeroTrustAccessGroupExclude `pulumi:"excludes"`
	Filter   *GetZeroTrustAccessGroupFilter   `pulumi:"filter"`
	// UUID.
	GroupId *string `pulumi:"groupId"`
	// UUID.
	Id string `pulumi:"id"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []GetZeroTrustAccessGroupInclude `pulumi:"includes"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	IsDefaults []GetZeroTrustAccessGroupIsDefault `pulumi:"isDefaults"`
	// The name of the Access group.
	Name string `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires []GetZeroTrustAccessGroupRequire `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

func LookupZeroTrustAccessGroupOutput(ctx *pulumi.Context, args LookupZeroTrustAccessGroupOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustAccessGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustAccessGroupResultOutput, error) {
			args := v.(LookupZeroTrustAccessGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZeroTrustAccessGroup:getZeroTrustAccessGroup", args, LookupZeroTrustAccessGroupResultOutput{}, options).(LookupZeroTrustAccessGroupResultOutput), nil
		}).(LookupZeroTrustAccessGroupResultOutput)
}

// A collection of arguments for invoking getZeroTrustAccessGroup.
type LookupZeroTrustAccessGroupOutputArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput                 `pulumi:"accountId"`
	Filter    GetZeroTrustAccessGroupFilterPtrInput `pulumi:"filter"`
	// UUID.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (LookupZeroTrustAccessGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustAccessGroupArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustAccessGroup.
type LookupZeroTrustAccessGroupResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustAccessGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustAccessGroupResult)(nil)).Elem()
}

func (o LookupZeroTrustAccessGroupResultOutput) ToLookupZeroTrustAccessGroupResultOutput() LookupZeroTrustAccessGroupResultOutput {
	return o
}

func (o LookupZeroTrustAccessGroupResultOutput) ToLookupZeroTrustAccessGroupResultOutputWithContext(ctx context.Context) LookupZeroTrustAccessGroupResultOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o LookupZeroTrustAccessGroupResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
func (o LookupZeroTrustAccessGroupResultOutput) Excludes() GetZeroTrustAccessGroupExcludeArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) []GetZeroTrustAccessGroupExclude { return v.Excludes }).(GetZeroTrustAccessGroupExcludeArrayOutput)
}

func (o LookupZeroTrustAccessGroupResultOutput) Filter() GetZeroTrustAccessGroupFilterPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) *GetZeroTrustAccessGroupFilter { return v.Filter }).(GetZeroTrustAccessGroupFilterPtrOutput)
}

// UUID.
func (o LookupZeroTrustAccessGroupResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// UUID.
func (o LookupZeroTrustAccessGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
func (o LookupZeroTrustAccessGroupResultOutput) Includes() GetZeroTrustAccessGroupIncludeArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) []GetZeroTrustAccessGroupInclude { return v.Includes }).(GetZeroTrustAccessGroupIncludeArrayOutput)
}

// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
func (o LookupZeroTrustAccessGroupResultOutput) IsDefaults() GetZeroTrustAccessGroupIsDefaultArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) []GetZeroTrustAccessGroupIsDefault { return v.IsDefaults }).(GetZeroTrustAccessGroupIsDefaultArrayOutput)
}

// The name of the Access group.
func (o LookupZeroTrustAccessGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
func (o LookupZeroTrustAccessGroupResultOutput) Requires() GetZeroTrustAccessGroupRequireArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) []GetZeroTrustAccessGroupRequire { return v.Requires }).(GetZeroTrustAccessGroupRequireArrayOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o LookupZeroTrustAccessGroupResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessGroupResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustAccessGroupResultOutput{})
}
