// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type R2BucketSippy struct {
	pulumi.CustomResourceState

	// Account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Name of the bucket
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// R2 bucket to copy objects to
	Destination R2BucketSippyDestinationOutput `pulumi:"destination"`
	// State of Sippy for this bucket
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringOutput `pulumi:"jurisdiction"`
	// AWS S3 bucket to copy objects from
	Source R2BucketSippySourceOutput `pulumi:"source"`
}

// NewR2BucketSippy registers a new resource with the given unique name, arguments, and options.
func NewR2BucketSippy(ctx *pulumi.Context,
	name string, args *R2BucketSippyArgs, opts ...pulumi.ResourceOption) (*R2BucketSippy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource R2BucketSippy
	err := ctx.RegisterResource("cloudflare:index/r2BucketSippy:R2BucketSippy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetR2BucketSippy gets an existing R2BucketSippy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetR2BucketSippy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *R2BucketSippyState, opts ...pulumi.ResourceOption) (*R2BucketSippy, error) {
	var resource R2BucketSippy
	err := ctx.ReadResource("cloudflare:index/r2BucketSippy:R2BucketSippy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering R2BucketSippy resources.
type r2bucketSippyState struct {
	// Account ID
	AccountId *string `pulumi:"accountId"`
	// Name of the bucket
	BucketName *string `pulumi:"bucketName"`
	// R2 bucket to copy objects to
	Destination *R2BucketSippyDestination `pulumi:"destination"`
	// State of Sippy for this bucket
	Enabled *bool `pulumi:"enabled"`
	// Jurisdiction of the bucket
	Jurisdiction *string `pulumi:"jurisdiction"`
	// AWS S3 bucket to copy objects from
	Source *R2BucketSippySource `pulumi:"source"`
}

type R2BucketSippyState struct {
	// Account ID
	AccountId pulumi.StringPtrInput
	// Name of the bucket
	BucketName pulumi.StringPtrInput
	// R2 bucket to copy objects to
	Destination R2BucketSippyDestinationPtrInput
	// State of Sippy for this bucket
	Enabled pulumi.BoolPtrInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	// AWS S3 bucket to copy objects from
	Source R2BucketSippySourcePtrInput
}

func (R2BucketSippyState) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketSippyState)(nil)).Elem()
}

type r2bucketSippyArgs struct {
	// Account ID
	AccountId string `pulumi:"accountId"`
	// Name of the bucket
	BucketName string `pulumi:"bucketName"`
	// R2 bucket to copy objects to
	Destination *R2BucketSippyDestination `pulumi:"destination"`
	// Jurisdiction of the bucket
	Jurisdiction *string `pulumi:"jurisdiction"`
	// AWS S3 bucket to copy objects from
	Source *R2BucketSippySource `pulumi:"source"`
}

// The set of arguments for constructing a R2BucketSippy resource.
type R2BucketSippyArgs struct {
	// Account ID
	AccountId pulumi.StringInput
	// Name of the bucket
	BucketName pulumi.StringInput
	// R2 bucket to copy objects to
	Destination R2BucketSippyDestinationPtrInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	// AWS S3 bucket to copy objects from
	Source R2BucketSippySourcePtrInput
}

func (R2BucketSippyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketSippyArgs)(nil)).Elem()
}

type R2BucketSippyInput interface {
	pulumi.Input

	ToR2BucketSippyOutput() R2BucketSippyOutput
	ToR2BucketSippyOutputWithContext(ctx context.Context) R2BucketSippyOutput
}

func (*R2BucketSippy) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketSippy)(nil)).Elem()
}

func (i *R2BucketSippy) ToR2BucketSippyOutput() R2BucketSippyOutput {
	return i.ToR2BucketSippyOutputWithContext(context.Background())
}

func (i *R2BucketSippy) ToR2BucketSippyOutputWithContext(ctx context.Context) R2BucketSippyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketSippyOutput)
}

// R2BucketSippyArrayInput is an input type that accepts R2BucketSippyArray and R2BucketSippyArrayOutput values.
// You can construct a concrete instance of `R2BucketSippyArrayInput` via:
//
//	R2BucketSippyArray{ R2BucketSippyArgs{...} }
type R2BucketSippyArrayInput interface {
	pulumi.Input

	ToR2BucketSippyArrayOutput() R2BucketSippyArrayOutput
	ToR2BucketSippyArrayOutputWithContext(context.Context) R2BucketSippyArrayOutput
}

type R2BucketSippyArray []R2BucketSippyInput

func (R2BucketSippyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketSippy)(nil)).Elem()
}

func (i R2BucketSippyArray) ToR2BucketSippyArrayOutput() R2BucketSippyArrayOutput {
	return i.ToR2BucketSippyArrayOutputWithContext(context.Background())
}

func (i R2BucketSippyArray) ToR2BucketSippyArrayOutputWithContext(ctx context.Context) R2BucketSippyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketSippyArrayOutput)
}

// R2BucketSippyMapInput is an input type that accepts R2BucketSippyMap and R2BucketSippyMapOutput values.
// You can construct a concrete instance of `R2BucketSippyMapInput` via:
//
//	R2BucketSippyMap{ "key": R2BucketSippyArgs{...} }
type R2BucketSippyMapInput interface {
	pulumi.Input

	ToR2BucketSippyMapOutput() R2BucketSippyMapOutput
	ToR2BucketSippyMapOutputWithContext(context.Context) R2BucketSippyMapOutput
}

type R2BucketSippyMap map[string]R2BucketSippyInput

func (R2BucketSippyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketSippy)(nil)).Elem()
}

func (i R2BucketSippyMap) ToR2BucketSippyMapOutput() R2BucketSippyMapOutput {
	return i.ToR2BucketSippyMapOutputWithContext(context.Background())
}

func (i R2BucketSippyMap) ToR2BucketSippyMapOutputWithContext(ctx context.Context) R2BucketSippyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketSippyMapOutput)
}

type R2BucketSippyOutput struct{ *pulumi.OutputState }

func (R2BucketSippyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketSippy)(nil)).Elem()
}

func (o R2BucketSippyOutput) ToR2BucketSippyOutput() R2BucketSippyOutput {
	return o
}

func (o R2BucketSippyOutput) ToR2BucketSippyOutputWithContext(ctx context.Context) R2BucketSippyOutput {
	return o
}

// Account ID
func (o R2BucketSippyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketSippy) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket
func (o R2BucketSippyOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketSippy) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// R2 bucket to copy objects to
func (o R2BucketSippyOutput) Destination() R2BucketSippyDestinationOutput {
	return o.ApplyT(func(v *R2BucketSippy) R2BucketSippyDestinationOutput { return v.Destination }).(R2BucketSippyDestinationOutput)
}

// State of Sippy for this bucket
func (o R2BucketSippyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *R2BucketSippy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Jurisdiction of the bucket
func (o R2BucketSippyOutput) Jurisdiction() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketSippy) pulumi.StringOutput { return v.Jurisdiction }).(pulumi.StringOutput)
}

// AWS S3 bucket to copy objects from
func (o R2BucketSippyOutput) Source() R2BucketSippySourceOutput {
	return o.ApplyT(func(v *R2BucketSippy) R2BucketSippySourceOutput { return v.Source }).(R2BucketSippySourceOutput)
}

type R2BucketSippyArrayOutput struct{ *pulumi.OutputState }

func (R2BucketSippyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketSippy)(nil)).Elem()
}

func (o R2BucketSippyArrayOutput) ToR2BucketSippyArrayOutput() R2BucketSippyArrayOutput {
	return o
}

func (o R2BucketSippyArrayOutput) ToR2BucketSippyArrayOutputWithContext(ctx context.Context) R2BucketSippyArrayOutput {
	return o
}

func (o R2BucketSippyArrayOutput) Index(i pulumi.IntInput) R2BucketSippyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *R2BucketSippy {
		return vs[0].([]*R2BucketSippy)[vs[1].(int)]
	}).(R2BucketSippyOutput)
}

type R2BucketSippyMapOutput struct{ *pulumi.OutputState }

func (R2BucketSippyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketSippy)(nil)).Elem()
}

func (o R2BucketSippyMapOutput) ToR2BucketSippyMapOutput() R2BucketSippyMapOutput {
	return o
}

func (o R2BucketSippyMapOutput) ToR2BucketSippyMapOutputWithContext(ctx context.Context) R2BucketSippyMapOutput {
	return o
}

func (o R2BucketSippyMapOutput) MapIndex(k pulumi.StringInput) R2BucketSippyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *R2BucketSippy {
		return vs[0].(map[string]*R2BucketSippy)[vs[1].(string)]
	}).(R2BucketSippyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketSippyInput)(nil)).Elem(), &R2BucketSippy{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketSippyArrayInput)(nil)).Elem(), R2BucketSippyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketSippyMapInput)(nil)).Elem(), R2BucketSippyMap{})
	pulumi.RegisterOutputType(R2BucketSippyOutput{})
	pulumi.RegisterOutputType(R2BucketSippyArrayOutput{})
	pulumi.RegisterOutputType(R2BucketSippyMapOutput{})
}
