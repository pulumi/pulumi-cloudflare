// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupLoadBalancerMonitor(ctx, &cloudflare.LookupLoadBalancerMonitorArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				MonitorId: pulumi.StringRef("f1aba936b94213e5b8dca0c0dbf1f9cc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancerMonitor(ctx *pulumi.Context, args *LookupLoadBalancerMonitorArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerMonitorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerMonitorResult
	err := ctx.Invoke("cloudflare:index/getLoadBalancerMonitor:getLoadBalancerMonitor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancerMonitor.
type LookupLoadBalancerMonitorArgs struct {
	// Identifier
	AccountId string  `pulumi:"accountId"`
	MonitorId *string `pulumi:"monitorId"`
}

// A collection of values returned by getLoadBalancerMonitor.
type LookupLoadBalancerMonitorResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
	AllowInsecure bool `pulumi:"allowInsecure"`
	// To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
	ConsecutiveDown int `pulumi:"consecutiveDown"`
	// To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
	ConsecutiveUp int    `pulumi:"consecutiveUp"`
	CreatedOn     string `pulumi:"createdOn"`
	// Object description.
	Description string `pulumi:"description"`
	// A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
	ExpectedBody string `pulumi:"expectedBody"`
	// The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
	ExpectedCodes string `pulumi:"expectedCodes"`
	// Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
	FollowRedirects bool `pulumi:"followRedirects"`
	// The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
	Header map[string][]string `pulumi:"header"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
	Interval int `pulumi:"interval"`
	// The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.
	Method     string  `pulumi:"method"`
	ModifiedOn string  `pulumi:"modifiedOn"`
	MonitorId  *string `pulumi:"monitorId"`
	// The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
	Path string `pulumi:"path"`
	// The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
	Port int `pulumi:"port"`
	// Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
	ProbeZone string `pulumi:"probeZone"`
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries int `pulumi:"retries"`
	// The timeout (in seconds) before marking the health check as failed.
	Timeout int `pulumi:"timeout"`
	// The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.
	// Available values: "http", "https", "tcp", "udp*icmp", "icmp*ping", "smtp".
	Type string `pulumi:"type"`
}

func LookupLoadBalancerMonitorOutput(ctx *pulumi.Context, args LookupLoadBalancerMonitorOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerMonitorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerMonitorResultOutput, error) {
			args := v.(LookupLoadBalancerMonitorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getLoadBalancerMonitor:getLoadBalancerMonitor", args, LookupLoadBalancerMonitorResultOutput{}, options).(LookupLoadBalancerMonitorResultOutput), nil
		}).(LookupLoadBalancerMonitorResultOutput)
}

// A collection of arguments for invoking getLoadBalancerMonitor.
type LookupLoadBalancerMonitorOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput    `pulumi:"accountId"`
	MonitorId pulumi.StringPtrInput `pulumi:"monitorId"`
}

func (LookupLoadBalancerMonitorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerMonitorArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancerMonitor.
type LookupLoadBalancerMonitorResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerMonitorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerMonitorResult)(nil)).Elem()
}

func (o LookupLoadBalancerMonitorResultOutput) ToLookupLoadBalancerMonitorResultOutput() LookupLoadBalancerMonitorResultOutput {
	return o
}

func (o LookupLoadBalancerMonitorResultOutput) ToLookupLoadBalancerMonitorResultOutputWithContext(ctx context.Context) LookupLoadBalancerMonitorResultOutput {
	return o
}

// Identifier
func (o LookupLoadBalancerMonitorResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Do not validate the certificate when monitor use HTTPS. This parameter is currently only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) AllowInsecure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) bool { return v.AllowInsecure }).(pulumi.BoolOutput)
}

// To be marked unhealthy the monitored origin must fail this healthcheck N consecutive times.
func (o LookupLoadBalancerMonitorResultOutput) ConsecutiveDown() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.ConsecutiveDown }).(pulumi.IntOutput)
}

// To be marked healthy the monitored origin must pass this healthcheck N consecutive times.
func (o LookupLoadBalancerMonitorResultOutput) ConsecutiveUp() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.ConsecutiveUp }).(pulumi.IntOutput)
}

func (o LookupLoadBalancerMonitorResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// Object description.
func (o LookupLoadBalancerMonitorResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.Description }).(pulumi.StringOutput)
}

// A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) ExpectedBody() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.ExpectedBody }).(pulumi.StringOutput)
}

// The expected HTTP response code or code range of the health check. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) ExpectedCodes() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.ExpectedCodes }).(pulumi.StringOutput)
}

// Follow redirects if returned by the origin. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) FollowRedirects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) bool { return v.FollowRedirects }).(pulumi.BoolOutput)
}

// The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) Header() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) map[string][]string { return v.Header }).(pulumi.StringArrayMapOutput)
}

// The ID of this resource.
func (o LookupLoadBalancerMonitorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The interval between each health check. Shorter intervals may improve failover time, but will increase load on the origins as we check from multiple locations.
func (o LookupLoadBalancerMonitorResultOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.Interval }).(pulumi.IntOutput)
}

// The method to use for the health check. This defaults to 'GET' for HTTP/HTTPS based checks and 'connection_established' for TCP based health checks.
func (o LookupLoadBalancerMonitorResultOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.Method }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerMonitorResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerMonitorResultOutput) MonitorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) *string { return v.MonitorId }).(pulumi.StringPtrOutput)
}

// The endpoint path you want to conduct a health check against. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.Path }).(pulumi.StringOutput)
}

// The port number to connect to for the health check. Required for TCP, UDP, and SMTP checks. HTTP and HTTPS checks should only define the port when using a non-standard port (HTTP: default 80, HTTPS: default 443).
func (o LookupLoadBalancerMonitorResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.Port }).(pulumi.IntOutput)
}

// Assign this monitor to emulate the specified zone while probing. This parameter is only valid for HTTP and HTTPS monitors.
func (o LookupLoadBalancerMonitorResultOutput) ProbeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.ProbeZone }).(pulumi.StringOutput)
}

// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
func (o LookupLoadBalancerMonitorResultOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.Retries }).(pulumi.IntOutput)
}

// The timeout (in seconds) before marking the health check as failed.
func (o LookupLoadBalancerMonitorResultOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) int { return v.Timeout }).(pulumi.IntOutput)
}

// The protocol to use for the health check. Currently supported protocols are 'HTTP','HTTPS', 'TCP', 'ICMP-PING', 'UDP-ICMP', and 'SMTP'.
// Available values: "http", "https", "tcp", "udp*icmp", "icmp*ping", "smtp".
func (o LookupLoadBalancerMonitorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerMonitorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerMonitorResultOutput{})
}
