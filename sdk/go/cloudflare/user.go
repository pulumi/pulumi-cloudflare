// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewUser(ctx, "example_user", &cloudflare.UserArgs{
//				Country:   pulumi.String("US"),
//				FirstName: pulumi.String("John"),
//				LastName:  pulumi.String("Appleseed"),
//				Telephone: pulumi.String("+1 123-123-1234"),
//				Zipcode:   pulumi.String("12345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type User struct {
	pulumi.CustomResourceState

	// Lists the betas that the user is participating in.
	Betas pulumi.StringArrayOutput `pulumi:"betas"`
	// The country in which the user lives.
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// User's first name
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// Indicates whether user has any business zones
	HasBusinessZones pulumi.BoolOutput `pulumi:"hasBusinessZones"`
	// Indicates whether user has any enterprise zones
	HasEnterpriseZones pulumi.BoolOutput `pulumi:"hasEnterpriseZones"`
	// Indicates whether user has any pro zones
	HasProZones pulumi.BoolOutput `pulumi:"hasProZones"`
	// User's last name
	LastName      pulumi.StringPtrOutput      `pulumi:"lastName"`
	Organizations UserOrganizationArrayOutput `pulumi:"organizations"`
	// Indicates whether user has been suspended
	Suspended pulumi.BoolOutput `pulumi:"suspended"`
	// User's telephone number
	Telephone pulumi.StringPtrOutput `pulumi:"telephone"`
	// Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
	TwoFactorAuthenticationEnabled pulumi.BoolOutput `pulumi:"twoFactorAuthenticationEnabled"`
	// Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
	TwoFactorAuthenticationLocked pulumi.BoolOutput `pulumi:"twoFactorAuthenticationLocked"`
	// The zipcode or postal code where the user lives.
	Zipcode pulumi.StringPtrOutput `pulumi:"zipcode"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		args = &UserArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("cloudflare:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("cloudflare:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Lists the betas that the user is participating in.
	Betas []string `pulumi:"betas"`
	// The country in which the user lives.
	Country *string `pulumi:"country"`
	// User's first name
	FirstName *string `pulumi:"firstName"`
	// Indicates whether user has any business zones
	HasBusinessZones *bool `pulumi:"hasBusinessZones"`
	// Indicates whether user has any enterprise zones
	HasEnterpriseZones *bool `pulumi:"hasEnterpriseZones"`
	// Indicates whether user has any pro zones
	HasProZones *bool `pulumi:"hasProZones"`
	// User's last name
	LastName      *string            `pulumi:"lastName"`
	Organizations []UserOrganization `pulumi:"organizations"`
	// Indicates whether user has been suspended
	Suspended *bool `pulumi:"suspended"`
	// User's telephone number
	Telephone *string `pulumi:"telephone"`
	// Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
	TwoFactorAuthenticationEnabled *bool `pulumi:"twoFactorAuthenticationEnabled"`
	// Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
	TwoFactorAuthenticationLocked *bool `pulumi:"twoFactorAuthenticationLocked"`
	// The zipcode or postal code where the user lives.
	Zipcode *string `pulumi:"zipcode"`
}

type UserState struct {
	// Lists the betas that the user is participating in.
	Betas pulumi.StringArrayInput
	// The country in which the user lives.
	Country pulumi.StringPtrInput
	// User's first name
	FirstName pulumi.StringPtrInput
	// Indicates whether user has any business zones
	HasBusinessZones pulumi.BoolPtrInput
	// Indicates whether user has any enterprise zones
	HasEnterpriseZones pulumi.BoolPtrInput
	// Indicates whether user has any pro zones
	HasProZones pulumi.BoolPtrInput
	// User's last name
	LastName      pulumi.StringPtrInput
	Organizations UserOrganizationArrayInput
	// Indicates whether user has been suspended
	Suspended pulumi.BoolPtrInput
	// User's telephone number
	Telephone pulumi.StringPtrInput
	// Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
	TwoFactorAuthenticationEnabled pulumi.BoolPtrInput
	// Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
	TwoFactorAuthenticationLocked pulumi.BoolPtrInput
	// The zipcode or postal code where the user lives.
	Zipcode pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// The country in which the user lives.
	Country *string `pulumi:"country"`
	// User's first name
	FirstName *string `pulumi:"firstName"`
	// User's last name
	LastName *string `pulumi:"lastName"`
	// User's telephone number
	Telephone *string `pulumi:"telephone"`
	// The zipcode or postal code where the user lives.
	Zipcode *string `pulumi:"zipcode"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// The country in which the user lives.
	Country pulumi.StringPtrInput
	// User's first name
	FirstName pulumi.StringPtrInput
	// User's last name
	LastName pulumi.StringPtrInput
	// User's telephone number
	Telephone pulumi.StringPtrInput
	// The zipcode or postal code where the user lives.
	Zipcode pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Lists the betas that the user is participating in.
func (o UserOutput) Betas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Betas }).(pulumi.StringArrayOutput)
}

// The country in which the user lives.
func (o UserOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// User's first name
func (o UserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Indicates whether user has any business zones
func (o UserOutput) HasBusinessZones() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.HasBusinessZones }).(pulumi.BoolOutput)
}

// Indicates whether user has any enterprise zones
func (o UserOutput) HasEnterpriseZones() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.HasEnterpriseZones }).(pulumi.BoolOutput)
}

// Indicates whether user has any pro zones
func (o UserOutput) HasProZones() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.HasProZones }).(pulumi.BoolOutput)
}

// User's last name
func (o UserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Organizations() UserOrganizationArrayOutput {
	return o.ApplyT(func(v *User) UserOrganizationArrayOutput { return v.Organizations }).(UserOrganizationArrayOutput)
}

// Indicates whether user has been suspended
func (o UserOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

// User's telephone number
func (o UserOutput) Telephone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Telephone }).(pulumi.StringPtrOutput)
}

// Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
func (o UserOutput) TwoFactorAuthenticationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.TwoFactorAuthenticationEnabled }).(pulumi.BoolOutput)
}

// Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
func (o UserOutput) TwoFactorAuthenticationLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.TwoFactorAuthenticationLocked }).(pulumi.BoolOutput)
}

// The zipcode or postal code where the user lives.
func (o UserOutput) Zipcode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Zipcode }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
