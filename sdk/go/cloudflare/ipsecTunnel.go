// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource, that manages IPsec tunnels for Magic Transit.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v4/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewIpsecTunnel(ctx, "example", &cloudflare.IpsecTunnelArgs{
// 			AccountId:          pulumi.String("c4a7362d577a6c3019a474fd6f485821"),
// 			CloudflareEndpoint: pulumi.String("203.0.113.1"),
// 			CustomerEndpoint:   pulumi.String("203.0.113.1"),
// 			Description:        pulumi.String("Tunnel for ISP X"),
// 			InterfaceAddress:   pulumi.String("192.0.2.0/31"),
// 			Name:               pulumi.String("IPsec_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing IPsec tunnel can be imported using the account ID and tunnel ID
//
// ```sh
//  $ pulumi import cloudflare:index/ipsecTunnel:IpsecTunnel example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
// ```
type IpsecTunnel struct {
	pulumi.CustomResourceState

	// The ID of the account where the tunnel is being created.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringOutput `pulumi:"cloudflareEndpoint"`
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint pulumi.StringOutput `pulumi:"customerEndpoint"`
	// An optional description of the IPsec tunnel.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress pulumi.StringOutput `pulumi:"interfaceAddress"`
	// Name of the IPsec tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIpsecTunnel registers a new resource with the given unique name, arguments, and options.
func NewIpsecTunnel(ctx *pulumi.Context,
	name string, args *IpsecTunnelArgs, opts ...pulumi.ResourceOption) (*IpsecTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudflareEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CloudflareEndpoint'")
	}
	if args.CustomerEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CustomerEndpoint'")
	}
	if args.InterfaceAddress == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceAddress'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource IpsecTunnel
	err := ctx.RegisterResource("cloudflare:index/ipsecTunnel:IpsecTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsecTunnel gets an existing IpsecTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsecTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsecTunnelState, opts ...pulumi.ResourceOption) (*IpsecTunnel, error) {
	var resource IpsecTunnel
	err := ctx.ReadResource("cloudflare:index/ipsecTunnel:IpsecTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsecTunnel resources.
type ipsecTunnelState struct {
	// The ID of the account where the tunnel is being created.
	AccountId *string `pulumi:"accountId"`
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint *string `pulumi:"cloudflareEndpoint"`
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint *string `pulumi:"customerEndpoint"`
	// An optional description of the IPsec tunnel.
	Description *string `pulumi:"description"`
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress *string `pulumi:"interfaceAddress"`
	// Name of the IPsec tunnel.
	Name *string `pulumi:"name"`
}

type IpsecTunnelState struct {
	// The ID of the account where the tunnel is being created.
	AccountId pulumi.StringPtrInput
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringPtrInput
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint pulumi.StringPtrInput
	// An optional description of the IPsec tunnel.
	Description pulumi.StringPtrInput
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress pulumi.StringPtrInput
	// Name of the IPsec tunnel.
	Name pulumi.StringPtrInput
}

func (IpsecTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecTunnelState)(nil)).Elem()
}

type ipsecTunnelArgs struct {
	// The ID of the account where the tunnel is being created.
	AccountId *string `pulumi:"accountId"`
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint string `pulumi:"cloudflareEndpoint"`
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint string `pulumi:"customerEndpoint"`
	// An optional description of the IPsec tunnel.
	Description *string `pulumi:"description"`
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress string `pulumi:"interfaceAddress"`
	// Name of the IPsec tunnel.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a IpsecTunnel resource.
type IpsecTunnelArgs struct {
	// The ID of the account where the tunnel is being created.
	AccountId pulumi.StringPtrInput
	// IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringInput
	// IP address assigned to the customer side of the IPsec tunnel.
	CustomerEndpoint pulumi.StringInput
	// An optional description of the IPsec tunnel.
	Description pulumi.StringPtrInput
	// 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
	InterfaceAddress pulumi.StringInput
	// Name of the IPsec tunnel.
	Name pulumi.StringInput
}

func (IpsecTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsecTunnelArgs)(nil)).Elem()
}

type IpsecTunnelInput interface {
	pulumi.Input

	ToIpsecTunnelOutput() IpsecTunnelOutput
	ToIpsecTunnelOutputWithContext(ctx context.Context) IpsecTunnelOutput
}

func (*IpsecTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnel)(nil)).Elem()
}

func (i *IpsecTunnel) ToIpsecTunnelOutput() IpsecTunnelOutput {
	return i.ToIpsecTunnelOutputWithContext(context.Background())
}

func (i *IpsecTunnel) ToIpsecTunnelOutputWithContext(ctx context.Context) IpsecTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelOutput)
}

// IpsecTunnelArrayInput is an input type that accepts IpsecTunnelArray and IpsecTunnelArrayOutput values.
// You can construct a concrete instance of `IpsecTunnelArrayInput` via:
//
//          IpsecTunnelArray{ IpsecTunnelArgs{...} }
type IpsecTunnelArrayInput interface {
	pulumi.Input

	ToIpsecTunnelArrayOutput() IpsecTunnelArrayOutput
	ToIpsecTunnelArrayOutputWithContext(context.Context) IpsecTunnelArrayOutput
}

type IpsecTunnelArray []IpsecTunnelInput

func (IpsecTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecTunnel)(nil)).Elem()
}

func (i IpsecTunnelArray) ToIpsecTunnelArrayOutput() IpsecTunnelArrayOutput {
	return i.ToIpsecTunnelArrayOutputWithContext(context.Background())
}

func (i IpsecTunnelArray) ToIpsecTunnelArrayOutputWithContext(ctx context.Context) IpsecTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelArrayOutput)
}

// IpsecTunnelMapInput is an input type that accepts IpsecTunnelMap and IpsecTunnelMapOutput values.
// You can construct a concrete instance of `IpsecTunnelMapInput` via:
//
//          IpsecTunnelMap{ "key": IpsecTunnelArgs{...} }
type IpsecTunnelMapInput interface {
	pulumi.Input

	ToIpsecTunnelMapOutput() IpsecTunnelMapOutput
	ToIpsecTunnelMapOutputWithContext(context.Context) IpsecTunnelMapOutput
}

type IpsecTunnelMap map[string]IpsecTunnelInput

func (IpsecTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecTunnel)(nil)).Elem()
}

func (i IpsecTunnelMap) ToIpsecTunnelMapOutput() IpsecTunnelMapOutput {
	return i.ToIpsecTunnelMapOutputWithContext(context.Background())
}

func (i IpsecTunnelMap) ToIpsecTunnelMapOutputWithContext(ctx context.Context) IpsecTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsecTunnelMapOutput)
}

type IpsecTunnelOutput struct{ *pulumi.OutputState }

func (IpsecTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsecTunnel)(nil)).Elem()
}

func (o IpsecTunnelOutput) ToIpsecTunnelOutput() IpsecTunnelOutput {
	return o
}

func (o IpsecTunnelOutput) ToIpsecTunnelOutputWithContext(ctx context.Context) IpsecTunnelOutput {
	return o
}

type IpsecTunnelArrayOutput struct{ *pulumi.OutputState }

func (IpsecTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsecTunnel)(nil)).Elem()
}

func (o IpsecTunnelArrayOutput) ToIpsecTunnelArrayOutput() IpsecTunnelArrayOutput {
	return o
}

func (o IpsecTunnelArrayOutput) ToIpsecTunnelArrayOutputWithContext(ctx context.Context) IpsecTunnelArrayOutput {
	return o
}

func (o IpsecTunnelArrayOutput) Index(i pulumi.IntInput) IpsecTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsecTunnel {
		return vs[0].([]*IpsecTunnel)[vs[1].(int)]
	}).(IpsecTunnelOutput)
}

type IpsecTunnelMapOutput struct{ *pulumi.OutputState }

func (IpsecTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsecTunnel)(nil)).Elem()
}

func (o IpsecTunnelMapOutput) ToIpsecTunnelMapOutput() IpsecTunnelMapOutput {
	return o
}

func (o IpsecTunnelMapOutput) ToIpsecTunnelMapOutputWithContext(ctx context.Context) IpsecTunnelMapOutput {
	return o
}

func (o IpsecTunnelMapOutput) MapIndex(k pulumi.StringInput) IpsecTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsecTunnel {
		return vs[0].(map[string]*IpsecTunnel)[vs[1].(string)]
	}).(IpsecTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelInput)(nil)).Elem(), &IpsecTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelArrayInput)(nil)).Elem(), IpsecTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsecTunnelMapInput)(nil)).Elem(), IpsecTunnelMap{})
	pulumi.RegisterOutputType(IpsecTunnelOutput{})
	pulumi.RegisterOutputType(IpsecTunnelArrayOutput{})
	pulumi.RegisterOutputType(IpsecTunnelMapOutput{})
}
