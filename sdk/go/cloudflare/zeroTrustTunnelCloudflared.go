// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustTunnelCloudflared(ctx, "example_zero_trust_tunnel_cloudflared", &cloudflare.ZeroTrustTunnelCloudflaredArgs{
//				AccountId:    pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Name:         pulumi.String("blog"),
//				ConfigSrc:    pulumi.String("local"),
//				TunnelSecret: pulumi.String("AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared example '<account_id>/<tunnel_id>'
// ```
type ZeroTrustTunnelCloudflared struct {
	pulumi.CustomResourceState

	// Cloudflare account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag pulumi.StringOutput `pulumi:"accountTag"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringOutput `pulumi:"configSrc"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections ZeroTrustTunnelCloudflaredConnectionArrayOutput `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringOutput `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringOutput `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolOutput `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringOutput `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrOutput `pulumi:"tunnelSecret"`
}

// NewZeroTrustTunnelCloudflared registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustTunnelCloudflared(ctx *pulumi.Context,
	name string, args *ZeroTrustTunnelCloudflaredArgs, opts ...pulumi.ResourceOption) (*ZeroTrustTunnelCloudflared, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/tunnel:Tunnel"),
		},
	})
	opts = append(opts, aliases)
	if args.TunnelSecret != nil {
		args.TunnelSecret = pulumi.ToSecret(args.TunnelSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tunnelSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustTunnelCloudflared
	err := ctx.RegisterResource("cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustTunnelCloudflared gets an existing ZeroTrustTunnelCloudflared resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustTunnelCloudflared(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustTunnelCloudflaredState, opts ...pulumi.ResourceOption) (*ZeroTrustTunnelCloudflared, error) {
	var resource ZeroTrustTunnelCloudflared
	err := ctx.ReadResource("cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustTunnelCloudflared resources.
type zeroTrustTunnelCloudflaredState struct {
	// Cloudflare account ID
	AccountId *string `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag *string `pulumi:"accountTag"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc *string `pulumi:"configSrc"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections []ZeroTrustTunnelCloudflaredConnection `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt *string `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt *string `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata *string `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name *string `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig *bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status *string `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType *string `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

type ZeroTrustTunnelCloudflaredState struct {
	// Cloudflare account ID
	AccountId pulumi.StringPtrInput
	// Cloudflare account ID
	AccountTag pulumi.StringPtrInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringPtrInput
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections ZeroTrustTunnelCloudflaredConnectionArrayInput
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringPtrInput
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringPtrInput
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringPtrInput
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringPtrInput
	// Metadata associated with the tunnel.
	Metadata pulumi.StringPtrInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringPtrInput
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolPtrInput
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringPtrInput
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringPtrInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (ZeroTrustTunnelCloudflaredState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustTunnelCloudflaredState)(nil)).Elem()
}

type zeroTrustTunnelCloudflaredArgs struct {
	// Cloudflare account ID
	AccountId string `pulumi:"accountId"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc *string `pulumi:"configSrc"`
	// A user-friendly name for a tunnel.
	Name string `pulumi:"name"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

// The set of arguments for constructing a ZeroTrustTunnelCloudflared resource.
type ZeroTrustTunnelCloudflaredArgs struct {
	// Cloudflare account ID
	AccountId pulumi.StringInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringPtrInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (ZeroTrustTunnelCloudflaredArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustTunnelCloudflaredArgs)(nil)).Elem()
}

type ZeroTrustTunnelCloudflaredInput interface {
	pulumi.Input

	ToZeroTrustTunnelCloudflaredOutput() ZeroTrustTunnelCloudflaredOutput
	ToZeroTrustTunnelCloudflaredOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredOutput
}

func (*ZeroTrustTunnelCloudflared) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (i *ZeroTrustTunnelCloudflared) ToZeroTrustTunnelCloudflaredOutput() ZeroTrustTunnelCloudflaredOutput {
	return i.ToZeroTrustTunnelCloudflaredOutputWithContext(context.Background())
}

func (i *ZeroTrustTunnelCloudflared) ToZeroTrustTunnelCloudflaredOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelCloudflaredOutput)
}

// ZeroTrustTunnelCloudflaredArrayInput is an input type that accepts ZeroTrustTunnelCloudflaredArray and ZeroTrustTunnelCloudflaredArrayOutput values.
// You can construct a concrete instance of `ZeroTrustTunnelCloudflaredArrayInput` via:
//
//	ZeroTrustTunnelCloudflaredArray{ ZeroTrustTunnelCloudflaredArgs{...} }
type ZeroTrustTunnelCloudflaredArrayInput interface {
	pulumi.Input

	ToZeroTrustTunnelCloudflaredArrayOutput() ZeroTrustTunnelCloudflaredArrayOutput
	ToZeroTrustTunnelCloudflaredArrayOutputWithContext(context.Context) ZeroTrustTunnelCloudflaredArrayOutput
}

type ZeroTrustTunnelCloudflaredArray []ZeroTrustTunnelCloudflaredInput

func (ZeroTrustTunnelCloudflaredArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (i ZeroTrustTunnelCloudflaredArray) ToZeroTrustTunnelCloudflaredArrayOutput() ZeroTrustTunnelCloudflaredArrayOutput {
	return i.ToZeroTrustTunnelCloudflaredArrayOutputWithContext(context.Background())
}

func (i ZeroTrustTunnelCloudflaredArray) ToZeroTrustTunnelCloudflaredArrayOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelCloudflaredArrayOutput)
}

// ZeroTrustTunnelCloudflaredMapInput is an input type that accepts ZeroTrustTunnelCloudflaredMap and ZeroTrustTunnelCloudflaredMapOutput values.
// You can construct a concrete instance of `ZeroTrustTunnelCloudflaredMapInput` via:
//
//	ZeroTrustTunnelCloudflaredMap{ "key": ZeroTrustTunnelCloudflaredArgs{...} }
type ZeroTrustTunnelCloudflaredMapInput interface {
	pulumi.Input

	ToZeroTrustTunnelCloudflaredMapOutput() ZeroTrustTunnelCloudflaredMapOutput
	ToZeroTrustTunnelCloudflaredMapOutputWithContext(context.Context) ZeroTrustTunnelCloudflaredMapOutput
}

type ZeroTrustTunnelCloudflaredMap map[string]ZeroTrustTunnelCloudflaredInput

func (ZeroTrustTunnelCloudflaredMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (i ZeroTrustTunnelCloudflaredMap) ToZeroTrustTunnelCloudflaredMapOutput() ZeroTrustTunnelCloudflaredMapOutput {
	return i.ToZeroTrustTunnelCloudflaredMapOutputWithContext(context.Background())
}

func (i ZeroTrustTunnelCloudflaredMap) ToZeroTrustTunnelCloudflaredMapOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelCloudflaredMapOutput)
}

type ZeroTrustTunnelCloudflaredOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelCloudflaredOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (o ZeroTrustTunnelCloudflaredOutput) ToZeroTrustTunnelCloudflaredOutput() ZeroTrustTunnelCloudflaredOutput {
	return o
}

func (o ZeroTrustTunnelCloudflaredOutput) ToZeroTrustTunnelCloudflaredOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredOutput {
	return o
}

// Cloudflare account ID
func (o ZeroTrustTunnelCloudflaredOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Cloudflare account ID
func (o ZeroTrustTunnelCloudflaredOutput) AccountTag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.AccountTag }).(pulumi.StringOutput)
}

// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
// Available values: "local", "cloudflare".
func (o ZeroTrustTunnelCloudflaredOutput) ConfigSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.ConfigSrc }).(pulumi.StringOutput)
}

// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
func (o ZeroTrustTunnelCloudflaredOutput) Connections() ZeroTrustTunnelCloudflaredConnectionArrayOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) ZeroTrustTunnelCloudflaredConnectionArrayOutput {
		return v.Connections
	}).(ZeroTrustTunnelCloudflaredConnectionArrayOutput)
}

// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
func (o ZeroTrustTunnelCloudflaredOutput) ConnsActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.ConnsActiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
func (o ZeroTrustTunnelCloudflaredOutput) ConnsInactiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.ConnsInactiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was created.
func (o ZeroTrustTunnelCloudflaredOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
func (o ZeroTrustTunnelCloudflaredOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Metadata associated with the tunnel.
func (o ZeroTrustTunnelCloudflaredOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// A user-friendly name for a tunnel.
func (o ZeroTrustTunnelCloudflaredOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
func (o ZeroTrustTunnelCloudflaredOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.BoolOutput { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
// Available values: "inactive", "degraded", "healthy", "down".
func (o ZeroTrustTunnelCloudflaredOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of tunnel.
// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
func (o ZeroTrustTunnelCloudflaredOutput) TunType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringOutput { return v.TunType }).(pulumi.StringOutput)
}

// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
func (o ZeroTrustTunnelCloudflaredOutput) TunnelSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelCloudflared) pulumi.StringPtrOutput { return v.TunnelSecret }).(pulumi.StringPtrOutput)
}

type ZeroTrustTunnelCloudflaredArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelCloudflaredArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (o ZeroTrustTunnelCloudflaredArrayOutput) ToZeroTrustTunnelCloudflaredArrayOutput() ZeroTrustTunnelCloudflaredArrayOutput {
	return o
}

func (o ZeroTrustTunnelCloudflaredArrayOutput) ToZeroTrustTunnelCloudflaredArrayOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredArrayOutput {
	return o
}

func (o ZeroTrustTunnelCloudflaredArrayOutput) Index(i pulumi.IntInput) ZeroTrustTunnelCloudflaredOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustTunnelCloudflared {
		return vs[0].([]*ZeroTrustTunnelCloudflared)[vs[1].(int)]
	}).(ZeroTrustTunnelCloudflaredOutput)
}

type ZeroTrustTunnelCloudflaredMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelCloudflaredMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustTunnelCloudflared)(nil)).Elem()
}

func (o ZeroTrustTunnelCloudflaredMapOutput) ToZeroTrustTunnelCloudflaredMapOutput() ZeroTrustTunnelCloudflaredMapOutput {
	return o
}

func (o ZeroTrustTunnelCloudflaredMapOutput) ToZeroTrustTunnelCloudflaredMapOutputWithContext(ctx context.Context) ZeroTrustTunnelCloudflaredMapOutput {
	return o
}

func (o ZeroTrustTunnelCloudflaredMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustTunnelCloudflaredOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustTunnelCloudflared {
		return vs[0].(map[string]*ZeroTrustTunnelCloudflared)[vs[1].(string)]
	}).(ZeroTrustTunnelCloudflaredOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelCloudflaredInput)(nil)).Elem(), &ZeroTrustTunnelCloudflared{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelCloudflaredArrayInput)(nil)).Elem(), ZeroTrustTunnelCloudflaredArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelCloudflaredMapInput)(nil)).Elem(), ZeroTrustTunnelCloudflaredMap{})
	pulumi.RegisterOutputType(ZeroTrustTunnelCloudflaredOutput{})
	pulumi.RegisterOutputType(ZeroTrustTunnelCloudflaredArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustTunnelCloudflaredMapOutput{})
}
