// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkersRoute(ctx, "example_workers_route", &cloudflare.WorkersRouteArgs{
//				ZoneId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Pattern: pulumi.String("example.net/*"),
//				Script:  pulumi.String("this-is_my_script-01"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WorkersRoute struct {
	pulumi.CustomResourceState

	Errors   WorkersRouteErrorArrayOutput   `pulumi:"errors"`
	Messages WorkersRouteMessageArrayOutput `pulumi:"messages"`
	Pattern  pulumi.StringOutput            `pulumi:"pattern"`
	// Identifier.
	RouteId pulumi.StringPtrOutput `pulumi:"routeId"`
	// Name of the script, used in URLs and route configuration.
	Script pulumi.StringPtrOutput `pulumi:"script"`
	// Whether the API call was successful.
	Success pulumi.BoolOutput `pulumi:"success"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewWorkersRoute registers a new resource with the given unique name, arguments, and options.
func NewWorkersRoute(ctx *pulumi.Context,
	name string, args *WorkersRouteArgs, opts ...pulumi.ResourceOption) (*WorkersRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Pattern == nil {
		return nil, errors.New("invalid value for required argument 'Pattern'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersRoute
	err := ctx.RegisterResource("cloudflare:index/workersRoute:WorkersRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersRoute gets an existing WorkersRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersRouteState, opts ...pulumi.ResourceOption) (*WorkersRoute, error) {
	var resource WorkersRoute
	err := ctx.ReadResource("cloudflare:index/workersRoute:WorkersRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersRoute resources.
type workersRouteState struct {
	Errors   []WorkersRouteError   `pulumi:"errors"`
	Messages []WorkersRouteMessage `pulumi:"messages"`
	Pattern  *string               `pulumi:"pattern"`
	// Identifier.
	RouteId *string `pulumi:"routeId"`
	// Name of the script, used in URLs and route configuration.
	Script *string `pulumi:"script"`
	// Whether the API call was successful.
	Success *bool `pulumi:"success"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type WorkersRouteState struct {
	Errors   WorkersRouteErrorArrayInput
	Messages WorkersRouteMessageArrayInput
	Pattern  pulumi.StringPtrInput
	// Identifier.
	RouteId pulumi.StringPtrInput
	// Name of the script, used in URLs and route configuration.
	Script pulumi.StringPtrInput
	// Whether the API call was successful.
	Success pulumi.BoolPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (WorkersRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersRouteState)(nil)).Elem()
}

type workersRouteArgs struct {
	Pattern string `pulumi:"pattern"`
	// Identifier.
	RouteId *string `pulumi:"routeId"`
	// Name of the script, used in URLs and route configuration.
	Script *string `pulumi:"script"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a WorkersRoute resource.
type WorkersRouteArgs struct {
	Pattern pulumi.StringInput
	// Identifier.
	RouteId pulumi.StringPtrInput
	// Name of the script, used in URLs and route configuration.
	Script pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (WorkersRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersRouteArgs)(nil)).Elem()
}

type WorkersRouteInput interface {
	pulumi.Input

	ToWorkersRouteOutput() WorkersRouteOutput
	ToWorkersRouteOutputWithContext(ctx context.Context) WorkersRouteOutput
}

func (*WorkersRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersRoute)(nil)).Elem()
}

func (i *WorkersRoute) ToWorkersRouteOutput() WorkersRouteOutput {
	return i.ToWorkersRouteOutputWithContext(context.Background())
}

func (i *WorkersRoute) ToWorkersRouteOutputWithContext(ctx context.Context) WorkersRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersRouteOutput)
}

// WorkersRouteArrayInput is an input type that accepts WorkersRouteArray and WorkersRouteArrayOutput values.
// You can construct a concrete instance of `WorkersRouteArrayInput` via:
//
//	WorkersRouteArray{ WorkersRouteArgs{...} }
type WorkersRouteArrayInput interface {
	pulumi.Input

	ToWorkersRouteArrayOutput() WorkersRouteArrayOutput
	ToWorkersRouteArrayOutputWithContext(context.Context) WorkersRouteArrayOutput
}

type WorkersRouteArray []WorkersRouteInput

func (WorkersRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersRoute)(nil)).Elem()
}

func (i WorkersRouteArray) ToWorkersRouteArrayOutput() WorkersRouteArrayOutput {
	return i.ToWorkersRouteArrayOutputWithContext(context.Background())
}

func (i WorkersRouteArray) ToWorkersRouteArrayOutputWithContext(ctx context.Context) WorkersRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersRouteArrayOutput)
}

// WorkersRouteMapInput is an input type that accepts WorkersRouteMap and WorkersRouteMapOutput values.
// You can construct a concrete instance of `WorkersRouteMapInput` via:
//
//	WorkersRouteMap{ "key": WorkersRouteArgs{...} }
type WorkersRouteMapInput interface {
	pulumi.Input

	ToWorkersRouteMapOutput() WorkersRouteMapOutput
	ToWorkersRouteMapOutputWithContext(context.Context) WorkersRouteMapOutput
}

type WorkersRouteMap map[string]WorkersRouteInput

func (WorkersRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersRoute)(nil)).Elem()
}

func (i WorkersRouteMap) ToWorkersRouteMapOutput() WorkersRouteMapOutput {
	return i.ToWorkersRouteMapOutputWithContext(context.Background())
}

func (i WorkersRouteMap) ToWorkersRouteMapOutputWithContext(ctx context.Context) WorkersRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersRouteMapOutput)
}

type WorkersRouteOutput struct{ *pulumi.OutputState }

func (WorkersRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersRoute)(nil)).Elem()
}

func (o WorkersRouteOutput) ToWorkersRouteOutput() WorkersRouteOutput {
	return o
}

func (o WorkersRouteOutput) ToWorkersRouteOutputWithContext(ctx context.Context) WorkersRouteOutput {
	return o
}

func (o WorkersRouteOutput) Errors() WorkersRouteErrorArrayOutput {
	return o.ApplyT(func(v *WorkersRoute) WorkersRouteErrorArrayOutput { return v.Errors }).(WorkersRouteErrorArrayOutput)
}

func (o WorkersRouteOutput) Messages() WorkersRouteMessageArrayOutput {
	return o.ApplyT(func(v *WorkersRoute) WorkersRouteMessageArrayOutput { return v.Messages }).(WorkersRouteMessageArrayOutput)
}

func (o WorkersRouteOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersRoute) pulumi.StringOutput { return v.Pattern }).(pulumi.StringOutput)
}

// Identifier.
func (o WorkersRouteOutput) RouteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersRoute) pulumi.StringPtrOutput { return v.RouteId }).(pulumi.StringPtrOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkersRouteOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersRoute) pulumi.StringPtrOutput { return v.Script }).(pulumi.StringPtrOutput)
}

// Whether the API call was successful.
func (o WorkersRouteOutput) Success() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersRoute) pulumi.BoolOutput { return v.Success }).(pulumi.BoolOutput)
}

// Identifier.
func (o WorkersRouteOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersRoute) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type WorkersRouteArrayOutput struct{ *pulumi.OutputState }

func (WorkersRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersRoute)(nil)).Elem()
}

func (o WorkersRouteArrayOutput) ToWorkersRouteArrayOutput() WorkersRouteArrayOutput {
	return o
}

func (o WorkersRouteArrayOutput) ToWorkersRouteArrayOutputWithContext(ctx context.Context) WorkersRouteArrayOutput {
	return o
}

func (o WorkersRouteArrayOutput) Index(i pulumi.IntInput) WorkersRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersRoute {
		return vs[0].([]*WorkersRoute)[vs[1].(int)]
	}).(WorkersRouteOutput)
}

type WorkersRouteMapOutput struct{ *pulumi.OutputState }

func (WorkersRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersRoute)(nil)).Elem()
}

func (o WorkersRouteMapOutput) ToWorkersRouteMapOutput() WorkersRouteMapOutput {
	return o
}

func (o WorkersRouteMapOutput) ToWorkersRouteMapOutputWithContext(ctx context.Context) WorkersRouteMapOutput {
	return o
}

func (o WorkersRouteMapOutput) MapIndex(k pulumi.StringInput) WorkersRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersRoute {
		return vs[0].(map[string]*WorkersRoute)[vs[1].(string)]
	}).(WorkersRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersRouteInput)(nil)).Elem(), &WorkersRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersRouteArrayInput)(nil)).Elem(), WorkersRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersRouteMapInput)(nil)).Elem(), WorkersRouteMap{})
	pulumi.RegisterOutputType(WorkersRouteOutput{})
	pulumi.RegisterOutputType(WorkersRouteArrayOutput{})
	pulumi.RegisterOutputType(WorkersRouteMapOutput{})
}
