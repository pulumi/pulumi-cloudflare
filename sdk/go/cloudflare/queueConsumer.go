// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type QueueConsumer struct {
	pulumi.CustomResourceState

	// A Resource identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A Resource identifier.
	ConsumerId      pulumi.StringPtrOutput `pulumi:"consumerId"`
	CreatedOn       pulumi.StringOutput    `pulumi:"createdOn"`
	DeadLetterQueue pulumi.StringPtrOutput `pulumi:"deadLetterQueue"`
	// A Resource identifier.
	QueueId pulumi.StringOutput `pulumi:"queueId"`
	// Name of a Worker
	Script pulumi.StringOutput `pulumi:"script"`
	// Name of a Worker
	ScriptName pulumi.StringPtrOutput      `pulumi:"scriptName"`
	Settings   QueueConsumerSettingsOutput `pulumi:"settings"`
	// Available values: "worker".
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewQueueConsumer registers a new resource with the given unique name, arguments, and options.
func NewQueueConsumer(ctx *pulumi.Context,
	name string, args *QueueConsumerArgs, opts ...pulumi.ResourceOption) (*QueueConsumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.QueueId == nil {
		return nil, errors.New("invalid value for required argument 'QueueId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource QueueConsumer
	err := ctx.RegisterResource("cloudflare:index/queueConsumer:QueueConsumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueueConsumer gets an existing QueueConsumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueueConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueConsumerState, opts ...pulumi.ResourceOption) (*QueueConsumer, error) {
	var resource QueueConsumer
	err := ctx.ReadResource("cloudflare:index/queueConsumer:QueueConsumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QueueConsumer resources.
type queueConsumerState struct {
	// A Resource identifier.
	AccountId *string `pulumi:"accountId"`
	// A Resource identifier.
	ConsumerId      *string `pulumi:"consumerId"`
	CreatedOn       *string `pulumi:"createdOn"`
	DeadLetterQueue *string `pulumi:"deadLetterQueue"`
	// A Resource identifier.
	QueueId *string `pulumi:"queueId"`
	// Name of a Worker
	Script *string `pulumi:"script"`
	// Name of a Worker
	ScriptName *string                `pulumi:"scriptName"`
	Settings   *QueueConsumerSettings `pulumi:"settings"`
	// Available values: "worker".
	Type *string `pulumi:"type"`
}

type QueueConsumerState struct {
	// A Resource identifier.
	AccountId pulumi.StringPtrInput
	// A Resource identifier.
	ConsumerId      pulumi.StringPtrInput
	CreatedOn       pulumi.StringPtrInput
	DeadLetterQueue pulumi.StringPtrInput
	// A Resource identifier.
	QueueId pulumi.StringPtrInput
	// Name of a Worker
	Script pulumi.StringPtrInput
	// Name of a Worker
	ScriptName pulumi.StringPtrInput
	Settings   QueueConsumerSettingsPtrInput
	// Available values: "worker".
	Type pulumi.StringPtrInput
}

func (QueueConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueConsumerState)(nil)).Elem()
}

type queueConsumerArgs struct {
	// A Resource identifier.
	AccountId string `pulumi:"accountId"`
	// A Resource identifier.
	ConsumerId      *string `pulumi:"consumerId"`
	DeadLetterQueue *string `pulumi:"deadLetterQueue"`
	// A Resource identifier.
	QueueId string `pulumi:"queueId"`
	// Name of a Worker
	ScriptName *string                `pulumi:"scriptName"`
	Settings   *QueueConsumerSettings `pulumi:"settings"`
	// Available values: "worker".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a QueueConsumer resource.
type QueueConsumerArgs struct {
	// A Resource identifier.
	AccountId pulumi.StringInput
	// A Resource identifier.
	ConsumerId      pulumi.StringPtrInput
	DeadLetterQueue pulumi.StringPtrInput
	// A Resource identifier.
	QueueId pulumi.StringInput
	// Name of a Worker
	ScriptName pulumi.StringPtrInput
	Settings   QueueConsumerSettingsPtrInput
	// Available values: "worker".
	Type pulumi.StringPtrInput
}

func (QueueConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueConsumerArgs)(nil)).Elem()
}

type QueueConsumerInput interface {
	pulumi.Input

	ToQueueConsumerOutput() QueueConsumerOutput
	ToQueueConsumerOutputWithContext(ctx context.Context) QueueConsumerOutput
}

func (*QueueConsumer) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueConsumer)(nil)).Elem()
}

func (i *QueueConsumer) ToQueueConsumerOutput() QueueConsumerOutput {
	return i.ToQueueConsumerOutputWithContext(context.Background())
}

func (i *QueueConsumer) ToQueueConsumerOutputWithContext(ctx context.Context) QueueConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueConsumerOutput)
}

// QueueConsumerArrayInput is an input type that accepts QueueConsumerArray and QueueConsumerArrayOutput values.
// You can construct a concrete instance of `QueueConsumerArrayInput` via:
//
//	QueueConsumerArray{ QueueConsumerArgs{...} }
type QueueConsumerArrayInput interface {
	pulumi.Input

	ToQueueConsumerArrayOutput() QueueConsumerArrayOutput
	ToQueueConsumerArrayOutputWithContext(context.Context) QueueConsumerArrayOutput
}

type QueueConsumerArray []QueueConsumerInput

func (QueueConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueConsumer)(nil)).Elem()
}

func (i QueueConsumerArray) ToQueueConsumerArrayOutput() QueueConsumerArrayOutput {
	return i.ToQueueConsumerArrayOutputWithContext(context.Background())
}

func (i QueueConsumerArray) ToQueueConsumerArrayOutputWithContext(ctx context.Context) QueueConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueConsumerArrayOutput)
}

// QueueConsumerMapInput is an input type that accepts QueueConsumerMap and QueueConsumerMapOutput values.
// You can construct a concrete instance of `QueueConsumerMapInput` via:
//
//	QueueConsumerMap{ "key": QueueConsumerArgs{...} }
type QueueConsumerMapInput interface {
	pulumi.Input

	ToQueueConsumerMapOutput() QueueConsumerMapOutput
	ToQueueConsumerMapOutputWithContext(context.Context) QueueConsumerMapOutput
}

type QueueConsumerMap map[string]QueueConsumerInput

func (QueueConsumerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueConsumer)(nil)).Elem()
}

func (i QueueConsumerMap) ToQueueConsumerMapOutput() QueueConsumerMapOutput {
	return i.ToQueueConsumerMapOutputWithContext(context.Background())
}

func (i QueueConsumerMap) ToQueueConsumerMapOutputWithContext(ctx context.Context) QueueConsumerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueConsumerMapOutput)
}

type QueueConsumerOutput struct{ *pulumi.OutputState }

func (QueueConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueConsumer)(nil)).Elem()
}

func (o QueueConsumerOutput) ToQueueConsumerOutput() QueueConsumerOutput {
	return o
}

func (o QueueConsumerOutput) ToQueueConsumerOutputWithContext(ctx context.Context) QueueConsumerOutput {
	return o
}

// A Resource identifier.
func (o QueueConsumerOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A Resource identifier.
func (o QueueConsumerOutput) ConsumerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringPtrOutput { return v.ConsumerId }).(pulumi.StringPtrOutput)
}

func (o QueueConsumerOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o QueueConsumerOutput) DeadLetterQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringPtrOutput { return v.DeadLetterQueue }).(pulumi.StringPtrOutput)
}

// A Resource identifier.
func (o QueueConsumerOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

// Name of a Worker
func (o QueueConsumerOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringOutput { return v.Script }).(pulumi.StringOutput)
}

// Name of a Worker
func (o QueueConsumerOutput) ScriptName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringPtrOutput { return v.ScriptName }).(pulumi.StringPtrOutput)
}

func (o QueueConsumerOutput) Settings() QueueConsumerSettingsOutput {
	return o.ApplyT(func(v *QueueConsumer) QueueConsumerSettingsOutput { return v.Settings }).(QueueConsumerSettingsOutput)
}

// Available values: "worker".
func (o QueueConsumerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueConsumer) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type QueueConsumerArrayOutput struct{ *pulumi.OutputState }

func (QueueConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QueueConsumer)(nil)).Elem()
}

func (o QueueConsumerArrayOutput) ToQueueConsumerArrayOutput() QueueConsumerArrayOutput {
	return o
}

func (o QueueConsumerArrayOutput) ToQueueConsumerArrayOutputWithContext(ctx context.Context) QueueConsumerArrayOutput {
	return o
}

func (o QueueConsumerArrayOutput) Index(i pulumi.IntInput) QueueConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QueueConsumer {
		return vs[0].([]*QueueConsumer)[vs[1].(int)]
	}).(QueueConsumerOutput)
}

type QueueConsumerMapOutput struct{ *pulumi.OutputState }

func (QueueConsumerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QueueConsumer)(nil)).Elem()
}

func (o QueueConsumerMapOutput) ToQueueConsumerMapOutput() QueueConsumerMapOutput {
	return o
}

func (o QueueConsumerMapOutput) ToQueueConsumerMapOutputWithContext(ctx context.Context) QueueConsumerMapOutput {
	return o
}

func (o QueueConsumerMapOutput) MapIndex(k pulumi.StringInput) QueueConsumerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QueueConsumer {
		return vs[0].(map[string]*QueueConsumer)[vs[1].(string)]
	}).(QueueConsumerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueConsumerInput)(nil)).Elem(), &QueueConsumer{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueConsumerArrayInput)(nil)).Elem(), QueueConsumerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueConsumerMapInput)(nil)).Elem(), QueueConsumerMap{})
	pulumi.RegisterOutputType(QueueConsumerOutput{})
	pulumi.RegisterOutputType(QueueConsumerArrayOutput{})
	pulumi.RegisterOutputType(QueueConsumerMapOutput{})
}
