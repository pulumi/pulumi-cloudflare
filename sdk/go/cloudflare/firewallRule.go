// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > `FirewallRule` is in a deprecation phase until June 15th, 2025.
//
//	During this time period, this resource is still
//	fully supported but you are strongly advised  to move to the
//	`Ruleset` resource. Full details can be found in the
//	developer documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewFirewallRule(ctx, "example_firewall_rule", &cloudflare.FirewallRuleArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Action: &cloudflare.FirewallRuleActionArgs{
//					Mode: pulumi.String("challenge"),
//					Response: &cloudflare.FirewallRuleActionResponseArgs{
//						Body:        pulumi.String("<error>This request has been rate-limited.</error>"),
//						ContentType: pulumi.String("text/xml"),
//					},
//					Timeout: pulumi.Float64(86400),
//				},
//				Filter: &cloudflare.FirewallRuleFilterArgs{
//					Description: pulumi.String("Restrict access from these browsers on this address range."),
//					Expression:  pulumi.String("(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.addr ne 172.16.22.155"),
//					Paused:      pulumi.Bool(false),
//					Ref:         pulumi.String("FIL-100"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/firewallRule:FirewallRule example '<zone_id>/<rule_id>'
// ```
type FirewallRule struct {
	pulumi.CustomResourceState

	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action FirewallRuleActionOutput `pulumi:"action"`
	// An informative summary of the firewall rule.
	Description pulumi.StringOutput      `pulumi:"description"`
	Filter      FirewallRuleFilterOutput `pulumi:"filter"`
	// When true, indicates that the firewall rule is currently paused.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
	Priority pulumi.Float64Output     `pulumi:"priority"`
	Products pulumi.StringArrayOutput `pulumi:"products"`
	// A short reference tag. Allows you to select related firewall rules.
	Ref pulumi.StringOutput `pulumi:"ref"`
	// Defines an identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFirewallRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallRule(ctx *pulumi.Context,
	name string, args *FirewallRuleArgs, opts ...pulumi.ResourceOption) (*FirewallRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Filter == nil {
		return nil, errors.New("invalid value for required argument 'Filter'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallRule
	err := ctx.RegisterResource("cloudflare:index/firewallRule:FirewallRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallRule gets an existing FirewallRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallRuleState, opts ...pulumi.ResourceOption) (*FirewallRule, error) {
	var resource FirewallRule
	err := ctx.ReadResource("cloudflare:index/firewallRule:FirewallRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallRule resources.
type firewallRuleState struct {
	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action *FirewallRuleAction `pulumi:"action"`
	// An informative summary of the firewall rule.
	Description *string             `pulumi:"description"`
	Filter      *FirewallRuleFilter `pulumi:"filter"`
	// When true, indicates that the firewall rule is currently paused.
	Paused *bool `pulumi:"paused"`
	// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
	Priority *float64 `pulumi:"priority"`
	Products []string `pulumi:"products"`
	// A short reference tag. Allows you to select related firewall rules.
	Ref *string `pulumi:"ref"`
	// Defines an identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type FirewallRuleState struct {
	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action FirewallRuleActionPtrInput
	// An informative summary of the firewall rule.
	Description pulumi.StringPtrInput
	Filter      FirewallRuleFilterPtrInput
	// When true, indicates that the firewall rule is currently paused.
	Paused pulumi.BoolPtrInput
	// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
	Priority pulumi.Float64PtrInput
	Products pulumi.StringArrayInput
	// A short reference tag. Allows you to select related firewall rules.
	Ref pulumi.StringPtrInput
	// Defines an identifier.
	ZoneId pulumi.StringPtrInput
}

func (FirewallRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRuleState)(nil)).Elem()
}

type firewallRuleArgs struct {
	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action FirewallRuleAction `pulumi:"action"`
	Filter FirewallRuleFilter `pulumi:"filter"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FirewallRule resource.
type FirewallRuleArgs struct {
	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action FirewallRuleActionInput
	Filter FirewallRuleFilterInput
	// Defines an identifier.
	ZoneId pulumi.StringInput
}

func (FirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallRuleArgs)(nil)).Elem()
}

type FirewallRuleInput interface {
	pulumi.Input

	ToFirewallRuleOutput() FirewallRuleOutput
	ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput
}

func (*FirewallRule) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRule)(nil)).Elem()
}

func (i *FirewallRule) ToFirewallRuleOutput() FirewallRuleOutput {
	return i.ToFirewallRuleOutputWithContext(context.Background())
}

func (i *FirewallRule) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleOutput)
}

// FirewallRuleArrayInput is an input type that accepts FirewallRuleArray and FirewallRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRuleArrayInput` via:
//
//	FirewallRuleArray{ FirewallRuleArgs{...} }
type FirewallRuleArrayInput interface {
	pulumi.Input

	ToFirewallRuleArrayOutput() FirewallRuleArrayOutput
	ToFirewallRuleArrayOutputWithContext(context.Context) FirewallRuleArrayOutput
}

type FirewallRuleArray []FirewallRuleInput

func (FirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallRule)(nil)).Elem()
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return i.ToFirewallRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleArrayOutput)
}

// FirewallRuleMapInput is an input type that accepts FirewallRuleMap and FirewallRuleMapOutput values.
// You can construct a concrete instance of `FirewallRuleMapInput` via:
//
//	FirewallRuleMap{ "key": FirewallRuleArgs{...} }
type FirewallRuleMapInput interface {
	pulumi.Input

	ToFirewallRuleMapOutput() FirewallRuleMapOutput
	ToFirewallRuleMapOutputWithContext(context.Context) FirewallRuleMapOutput
}

type FirewallRuleMap map[string]FirewallRuleInput

func (FirewallRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallRule)(nil)).Elem()
}

func (i FirewallRuleMap) ToFirewallRuleMapOutput() FirewallRuleMapOutput {
	return i.ToFirewallRuleMapOutputWithContext(context.Background())
}

func (i FirewallRuleMap) ToFirewallRuleMapOutputWithContext(ctx context.Context) FirewallRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleMapOutput)
}

type FirewallRuleOutput struct{ *pulumi.OutputState }

func (FirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRule)(nil)).Elem()
}

func (o FirewallRuleOutput) ToFirewallRuleOutput() FirewallRuleOutput {
	return o
}

func (o FirewallRuleOutput) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return o
}

// The action to perform when the threshold of matched traffic within the configured period is exceeded.
func (o FirewallRuleOutput) Action() FirewallRuleActionOutput {
	return o.ApplyT(func(v *FirewallRule) FirewallRuleActionOutput { return v.Action }).(FirewallRuleActionOutput)
}

// An informative summary of the firewall rule.
func (o FirewallRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o FirewallRuleOutput) Filter() FirewallRuleFilterOutput {
	return o.ApplyT(func(v *FirewallRule) FirewallRuleFilterOutput { return v.Filter }).(FirewallRuleFilterOutput)
}

// When true, indicates that the firewall rule is currently paused.
func (o FirewallRuleOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirewallRule) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
func (o FirewallRuleOutput) Priority() pulumi.Float64Output {
	return o.ApplyT(func(v *FirewallRule) pulumi.Float64Output { return v.Priority }).(pulumi.Float64Output)
}

func (o FirewallRuleOutput) Products() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallRule) pulumi.StringArrayOutput { return v.Products }).(pulumi.StringArrayOutput)
}

// A short reference tag. Allows you to select related firewall rules.
func (o FirewallRuleOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallRule) pulumi.StringOutput { return v.Ref }).(pulumi.StringOutput)
}

// Defines an identifier.
func (o FirewallRuleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallRule) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallRule)(nil)).Elem()
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) Index(i pulumi.IntInput) FirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallRule {
		return vs[0].([]*FirewallRule)[vs[1].(int)]
	}).(FirewallRuleOutput)
}

type FirewallRuleMapOutput struct{ *pulumi.OutputState }

func (FirewallRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallRule)(nil)).Elem()
}

func (o FirewallRuleMapOutput) ToFirewallRuleMapOutput() FirewallRuleMapOutput {
	return o
}

func (o FirewallRuleMapOutput) ToFirewallRuleMapOutputWithContext(ctx context.Context) FirewallRuleMapOutput {
	return o
}

func (o FirewallRuleMapOutput) MapIndex(k pulumi.StringInput) FirewallRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallRule {
		return vs[0].(map[string]*FirewallRule)[vs[1].(string)]
	}).(FirewallRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleInput)(nil)).Elem(), &FirewallRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleArrayInput)(nil)).Elem(), FirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleMapInput)(nil)).Elem(), FirewallRuleMap{})
	pulumi.RegisterOutputType(FirewallRuleOutput{})
	pulumi.RegisterOutputType(FirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleMapOutput{})
}
