// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/accountToken:AccountToken example '<account_id>/<token_id>'
// ```
type AccountToken struct {
	pulumi.CustomResourceState

	// Account identifier tag.
	AccountId pulumi.StringOutput         `pulumi:"accountId"`
	Condition AccountTokenConditionOutput `pulumi:"condition"`
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn pulumi.StringPtrOutput `pulumi:"expiresOn"`
	// The time on which the token was created.
	IssuedOn pulumi.StringOutput `pulumi:"issuedOn"`
	// Last time the token was used.
	LastUsedOn pulumi.StringOutput `pulumi:"lastUsedOn"`
	// Last time the token was modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Token name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore pulumi.StringPtrOutput `pulumi:"notBefore"`
	// List of access policies assigned to the token.
	Policies AccountTokenPolicyArrayOutput `pulumi:"policies"`
	// Status of the token.
	// Available values: "active", "disabled", "expired".
	Status pulumi.StringOutput `pulumi:"status"`
	// The token value.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewAccountToken registers a new resource with the given unique name, arguments, and options.
func NewAccountToken(ctx *pulumi.Context,
	name string, args *AccountTokenArgs, opts ...pulumi.ResourceOption) (*AccountToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountToken
	err := ctx.RegisterResource("cloudflare:index/accountToken:AccountToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountToken gets an existing AccountToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountTokenState, opts ...pulumi.ResourceOption) (*AccountToken, error) {
	var resource AccountToken
	err := ctx.ReadResource("cloudflare:index/accountToken:AccountToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountToken resources.
type accountTokenState struct {
	// Account identifier tag.
	AccountId *string                `pulumi:"accountId"`
	Condition *AccountTokenCondition `pulumi:"condition"`
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The time on which the token was created.
	IssuedOn *string `pulumi:"issuedOn"`
	// Last time the token was used.
	LastUsedOn *string `pulumi:"lastUsedOn"`
	// Last time the token was modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Token name.
	Name *string `pulumi:"name"`
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore *string `pulumi:"notBefore"`
	// List of access policies assigned to the token.
	Policies []AccountTokenPolicy `pulumi:"policies"`
	// Status of the token.
	// Available values: "active", "disabled", "expired".
	Status *string `pulumi:"status"`
	// The token value.
	Value *string `pulumi:"value"`
}

type AccountTokenState struct {
	// Account identifier tag.
	AccountId pulumi.StringPtrInput
	Condition AccountTokenConditionPtrInput
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn pulumi.StringPtrInput
	// The time on which the token was created.
	IssuedOn pulumi.StringPtrInput
	// Last time the token was used.
	LastUsedOn pulumi.StringPtrInput
	// Last time the token was modified.
	ModifiedOn pulumi.StringPtrInput
	// Token name.
	Name pulumi.StringPtrInput
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore pulumi.StringPtrInput
	// List of access policies assigned to the token.
	Policies AccountTokenPolicyArrayInput
	// Status of the token.
	// Available values: "active", "disabled", "expired".
	Status pulumi.StringPtrInput
	// The token value.
	Value pulumi.StringPtrInput
}

func (AccountTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTokenState)(nil)).Elem()
}

type accountTokenArgs struct {
	// Account identifier tag.
	AccountId string                 `pulumi:"accountId"`
	Condition *AccountTokenCondition `pulumi:"condition"`
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn *string `pulumi:"expiresOn"`
	// Token name.
	Name string `pulumi:"name"`
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore *string `pulumi:"notBefore"`
	// List of access policies assigned to the token.
	Policies []AccountTokenPolicy `pulumi:"policies"`
}

// The set of arguments for constructing a AccountToken resource.
type AccountTokenArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput
	Condition AccountTokenConditionPtrInput
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn pulumi.StringPtrInput
	// Token name.
	Name pulumi.StringInput
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore pulumi.StringPtrInput
	// List of access policies assigned to the token.
	Policies AccountTokenPolicyArrayInput
}

func (AccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountTokenArgs)(nil)).Elem()
}

type AccountTokenInput interface {
	pulumi.Input

	ToAccountTokenOutput() AccountTokenOutput
	ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput
}

func (*AccountToken) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountToken)(nil)).Elem()
}

func (i *AccountToken) ToAccountTokenOutput() AccountTokenOutput {
	return i.ToAccountTokenOutputWithContext(context.Background())
}

func (i *AccountToken) ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenOutput)
}

// AccountTokenArrayInput is an input type that accepts AccountTokenArray and AccountTokenArrayOutput values.
// You can construct a concrete instance of `AccountTokenArrayInput` via:
//
//	AccountTokenArray{ AccountTokenArgs{...} }
type AccountTokenArrayInput interface {
	pulumi.Input

	ToAccountTokenArrayOutput() AccountTokenArrayOutput
	ToAccountTokenArrayOutputWithContext(context.Context) AccountTokenArrayOutput
}

type AccountTokenArray []AccountTokenInput

func (AccountTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountToken)(nil)).Elem()
}

func (i AccountTokenArray) ToAccountTokenArrayOutput() AccountTokenArrayOutput {
	return i.ToAccountTokenArrayOutputWithContext(context.Background())
}

func (i AccountTokenArray) ToAccountTokenArrayOutputWithContext(ctx context.Context) AccountTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenArrayOutput)
}

// AccountTokenMapInput is an input type that accepts AccountTokenMap and AccountTokenMapOutput values.
// You can construct a concrete instance of `AccountTokenMapInput` via:
//
//	AccountTokenMap{ "key": AccountTokenArgs{...} }
type AccountTokenMapInput interface {
	pulumi.Input

	ToAccountTokenMapOutput() AccountTokenMapOutput
	ToAccountTokenMapOutputWithContext(context.Context) AccountTokenMapOutput
}

type AccountTokenMap map[string]AccountTokenInput

func (AccountTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountToken)(nil)).Elem()
}

func (i AccountTokenMap) ToAccountTokenMapOutput() AccountTokenMapOutput {
	return i.ToAccountTokenMapOutputWithContext(context.Background())
}

func (i AccountTokenMap) ToAccountTokenMapOutputWithContext(ctx context.Context) AccountTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountTokenMapOutput)
}

type AccountTokenOutput struct{ *pulumi.OutputState }

func (AccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountToken)(nil)).Elem()
}

func (o AccountTokenOutput) ToAccountTokenOutput() AccountTokenOutput {
	return o
}

func (o AccountTokenOutput) ToAccountTokenOutputWithContext(ctx context.Context) AccountTokenOutput {
	return o
}

// Account identifier tag.
func (o AccountTokenOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o AccountTokenOutput) Condition() AccountTokenConditionOutput {
	return o.ApplyT(func(v *AccountToken) AccountTokenConditionOutput { return v.Condition }).(AccountTokenConditionOutput)
}

// The expiration time on or after which the JWT MUST NOT be accepted for processing.
func (o AccountTokenOutput) ExpiresOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.ExpiresOn }).(pulumi.StringPtrOutput)
}

// The time on which the token was created.
func (o AccountTokenOutput) IssuedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.IssuedOn }).(pulumi.StringOutput)
}

// Last time the token was used.
func (o AccountTokenOutput) LastUsedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.LastUsedOn }).(pulumi.StringOutput)
}

// Last time the token was modified.
func (o AccountTokenOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Token name.
func (o AccountTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The time before which the token MUST NOT be accepted for processing.
func (o AccountTokenOutput) NotBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringPtrOutput { return v.NotBefore }).(pulumi.StringPtrOutput)
}

// List of access policies assigned to the token.
func (o AccountTokenOutput) Policies() AccountTokenPolicyArrayOutput {
	return o.ApplyT(func(v *AccountToken) AccountTokenPolicyArrayOutput { return v.Policies }).(AccountTokenPolicyArrayOutput)
}

// Status of the token.
// Available values: "active", "disabled", "expired".
func (o AccountTokenOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The token value.
func (o AccountTokenOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountToken) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type AccountTokenArrayOutput struct{ *pulumi.OutputState }

func (AccountTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountToken)(nil)).Elem()
}

func (o AccountTokenArrayOutput) ToAccountTokenArrayOutput() AccountTokenArrayOutput {
	return o
}

func (o AccountTokenArrayOutput) ToAccountTokenArrayOutputWithContext(ctx context.Context) AccountTokenArrayOutput {
	return o
}

func (o AccountTokenArrayOutput) Index(i pulumi.IntInput) AccountTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountToken {
		return vs[0].([]*AccountToken)[vs[1].(int)]
	}).(AccountTokenOutput)
}

type AccountTokenMapOutput struct{ *pulumi.OutputState }

func (AccountTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountToken)(nil)).Elem()
}

func (o AccountTokenMapOutput) ToAccountTokenMapOutput() AccountTokenMapOutput {
	return o
}

func (o AccountTokenMapOutput) ToAccountTokenMapOutputWithContext(ctx context.Context) AccountTokenMapOutput {
	return o
}

func (o AccountTokenMapOutput) MapIndex(k pulumi.StringInput) AccountTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountToken {
		return vs[0].(map[string]*AccountToken)[vs[1].(string)]
	}).(AccountTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenInput)(nil)).Elem(), &AccountToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenArrayInput)(nil)).Elem(), AccountTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountTokenMapInput)(nil)).Elem(), AccountTokenMap{})
	pulumi.RegisterOutputType(AccountTokenOutput{})
	pulumi.RegisterOutputType(AccountTokenArrayOutput{})
	pulumi.RegisterOutputType(AccountTokenMapOutput{})
}
