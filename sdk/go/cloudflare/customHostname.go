// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/customHostname:CustomHostname example '<zone_id>/<custom_hostname_id>'
// ```
type CustomHostname struct {
	pulumi.CustomResourceState

	// This is the time the hostname was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata pulumi.StringMapOutput `pulumi:"customMetadata"`
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer pulumi.StringPtrOutput `pulumi:"customOriginServer"`
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni pulumi.StringPtrOutput `pulumi:"customOriginSni"`
	// The custom hostname that will point to your hostname via CNAME.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// This is a record which can be placed to activate a hostname.
	OwnershipVerification CustomHostnameOwnershipVerificationOutput `pulumi:"ownershipVerification"`
	// This presents the token to be served by the given http url to activate a hostname.
	OwnershipVerificationHttp CustomHostnameOwnershipVerificationHttpOutput `pulumi:"ownershipVerificationHttp"`
	// SSL properties used when creating the custom hostname.
	Ssl CustomHostnameSslOutput `pulumi:"ssl"`
	// Status of the hostname's activation.
	Status pulumi.StringOutput `pulumi:"status"`
	// These are errors that were encountered while trying to activate a hostname.
	VerificationErrors pulumi.StringArrayOutput `pulumi:"verificationErrors"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCustomHostname registers a new resource with the given unique name, arguments, and options.
func NewCustomHostname(ctx *pulumi.Context,
	name string, args *CustomHostnameArgs, opts ...pulumi.ResourceOption) (*CustomHostname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Ssl == nil {
		return nil, errors.New("invalid value for required argument 'Ssl'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomHostname
	err := ctx.RegisterResource("cloudflare:index/customHostname:CustomHostname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomHostname gets an existing CustomHostname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomHostname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomHostnameState, opts ...pulumi.ResourceOption) (*CustomHostname, error) {
	var resource CustomHostname
	err := ctx.ReadResource("cloudflare:index/customHostname:CustomHostname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomHostname resources.
type customHostnameState struct {
	// This is the time the hostname was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata map[string]string `pulumi:"customMetadata"`
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer *string `pulumi:"customOriginServer"`
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni *string `pulumi:"customOriginSni"`
	// The custom hostname that will point to your hostname via CNAME.
	Hostname *string `pulumi:"hostname"`
	// This is a record which can be placed to activate a hostname.
	OwnershipVerification *CustomHostnameOwnershipVerification `pulumi:"ownershipVerification"`
	// This presents the token to be served by the given http url to activate a hostname.
	OwnershipVerificationHttp *CustomHostnameOwnershipVerificationHttp `pulumi:"ownershipVerificationHttp"`
	// SSL properties used when creating the custom hostname.
	Ssl *CustomHostnameSsl `pulumi:"ssl"`
	// Status of the hostname's activation.
	Status *string `pulumi:"status"`
	// These are errors that were encountered while trying to activate a hostname.
	VerificationErrors []string `pulumi:"verificationErrors"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type CustomHostnameState struct {
	// This is the time the hostname was created.
	CreatedAt pulumi.StringPtrInput
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata pulumi.StringMapInput
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer pulumi.StringPtrInput
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni pulumi.StringPtrInput
	// The custom hostname that will point to your hostname via CNAME.
	Hostname pulumi.StringPtrInput
	// This is a record which can be placed to activate a hostname.
	OwnershipVerification CustomHostnameOwnershipVerificationPtrInput
	// This presents the token to be served by the given http url to activate a hostname.
	OwnershipVerificationHttp CustomHostnameOwnershipVerificationHttpPtrInput
	// SSL properties used when creating the custom hostname.
	Ssl CustomHostnameSslPtrInput
	// Status of the hostname's activation.
	Status pulumi.StringPtrInput
	// These are errors that were encountered while trying to activate a hostname.
	VerificationErrors pulumi.StringArrayInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (CustomHostnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*customHostnameState)(nil)).Elem()
}

type customHostnameArgs struct {
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata map[string]string `pulumi:"customMetadata"`
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer *string `pulumi:"customOriginServer"`
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni *string `pulumi:"customOriginSni"`
	// The custom hostname that will point to your hostname via CNAME.
	Hostname string `pulumi:"hostname"`
	// SSL properties used when creating the custom hostname.
	Ssl CustomHostnameSsl `pulumi:"ssl"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CustomHostname resource.
type CustomHostnameArgs struct {
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata pulumi.StringMapInput
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer pulumi.StringPtrInput
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni pulumi.StringPtrInput
	// The custom hostname that will point to your hostname via CNAME.
	Hostname pulumi.StringInput
	// SSL properties used when creating the custom hostname.
	Ssl CustomHostnameSslInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (CustomHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customHostnameArgs)(nil)).Elem()
}

type CustomHostnameInput interface {
	pulumi.Input

	ToCustomHostnameOutput() CustomHostnameOutput
	ToCustomHostnameOutputWithContext(ctx context.Context) CustomHostnameOutput
}

func (*CustomHostname) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHostname)(nil)).Elem()
}

func (i *CustomHostname) ToCustomHostnameOutput() CustomHostnameOutput {
	return i.ToCustomHostnameOutputWithContext(context.Background())
}

func (i *CustomHostname) ToCustomHostnameOutputWithContext(ctx context.Context) CustomHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHostnameOutput)
}

// CustomHostnameArrayInput is an input type that accepts CustomHostnameArray and CustomHostnameArrayOutput values.
// You can construct a concrete instance of `CustomHostnameArrayInput` via:
//
//	CustomHostnameArray{ CustomHostnameArgs{...} }
type CustomHostnameArrayInput interface {
	pulumi.Input

	ToCustomHostnameArrayOutput() CustomHostnameArrayOutput
	ToCustomHostnameArrayOutputWithContext(context.Context) CustomHostnameArrayOutput
}

type CustomHostnameArray []CustomHostnameInput

func (CustomHostnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomHostname)(nil)).Elem()
}

func (i CustomHostnameArray) ToCustomHostnameArrayOutput() CustomHostnameArrayOutput {
	return i.ToCustomHostnameArrayOutputWithContext(context.Background())
}

func (i CustomHostnameArray) ToCustomHostnameArrayOutputWithContext(ctx context.Context) CustomHostnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHostnameArrayOutput)
}

// CustomHostnameMapInput is an input type that accepts CustomHostnameMap and CustomHostnameMapOutput values.
// You can construct a concrete instance of `CustomHostnameMapInput` via:
//
//	CustomHostnameMap{ "key": CustomHostnameArgs{...} }
type CustomHostnameMapInput interface {
	pulumi.Input

	ToCustomHostnameMapOutput() CustomHostnameMapOutput
	ToCustomHostnameMapOutputWithContext(context.Context) CustomHostnameMapOutput
}

type CustomHostnameMap map[string]CustomHostnameInput

func (CustomHostnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomHostname)(nil)).Elem()
}

func (i CustomHostnameMap) ToCustomHostnameMapOutput() CustomHostnameMapOutput {
	return i.ToCustomHostnameMapOutputWithContext(context.Background())
}

func (i CustomHostnameMap) ToCustomHostnameMapOutputWithContext(ctx context.Context) CustomHostnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomHostnameMapOutput)
}

type CustomHostnameOutput struct{ *pulumi.OutputState }

func (CustomHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomHostname)(nil)).Elem()
}

func (o CustomHostnameOutput) ToCustomHostnameOutput() CustomHostnameOutput {
	return o
}

func (o CustomHostnameOutput) ToCustomHostnameOutputWithContext(ctx context.Context) CustomHostnameOutput {
	return o
}

// This is the time the hostname was created.
func (o CustomHostnameOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
func (o CustomHostnameOutput) CustomMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringMapOutput { return v.CustomMetadata }).(pulumi.StringMapOutput)
}

// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
func (o CustomHostnameOutput) CustomOriginServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringPtrOutput { return v.CustomOriginServer }).(pulumi.StringPtrOutput)
}

// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
func (o CustomHostnameOutput) CustomOriginSni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringPtrOutput { return v.CustomOriginSni }).(pulumi.StringPtrOutput)
}

// The custom hostname that will point to your hostname via CNAME.
func (o CustomHostnameOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// This is a record which can be placed to activate a hostname.
func (o CustomHostnameOutput) OwnershipVerification() CustomHostnameOwnershipVerificationOutput {
	return o.ApplyT(func(v *CustomHostname) CustomHostnameOwnershipVerificationOutput { return v.OwnershipVerification }).(CustomHostnameOwnershipVerificationOutput)
}

// This presents the token to be served by the given http url to activate a hostname.
func (o CustomHostnameOutput) OwnershipVerificationHttp() CustomHostnameOwnershipVerificationHttpOutput {
	return o.ApplyT(func(v *CustomHostname) CustomHostnameOwnershipVerificationHttpOutput {
		return v.OwnershipVerificationHttp
	}).(CustomHostnameOwnershipVerificationHttpOutput)
}

// SSL properties used when creating the custom hostname.
func (o CustomHostnameOutput) Ssl() CustomHostnameSslOutput {
	return o.ApplyT(func(v *CustomHostname) CustomHostnameSslOutput { return v.Ssl }).(CustomHostnameSslOutput)
}

// Status of the hostname's activation.
func (o CustomHostnameOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// These are errors that were encountered while trying to activate a hostname.
func (o CustomHostnameOutput) VerificationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringArrayOutput { return v.VerificationErrors }).(pulumi.StringArrayOutput)
}

// Identifier
func (o CustomHostnameOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomHostname) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CustomHostnameArrayOutput struct{ *pulumi.OutputState }

func (CustomHostnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomHostname)(nil)).Elem()
}

func (o CustomHostnameArrayOutput) ToCustomHostnameArrayOutput() CustomHostnameArrayOutput {
	return o
}

func (o CustomHostnameArrayOutput) ToCustomHostnameArrayOutputWithContext(ctx context.Context) CustomHostnameArrayOutput {
	return o
}

func (o CustomHostnameArrayOutput) Index(i pulumi.IntInput) CustomHostnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomHostname {
		return vs[0].([]*CustomHostname)[vs[1].(int)]
	}).(CustomHostnameOutput)
}

type CustomHostnameMapOutput struct{ *pulumi.OutputState }

func (CustomHostnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomHostname)(nil)).Elem()
}

func (o CustomHostnameMapOutput) ToCustomHostnameMapOutput() CustomHostnameMapOutput {
	return o
}

func (o CustomHostnameMapOutput) ToCustomHostnameMapOutputWithContext(ctx context.Context) CustomHostnameMapOutput {
	return o
}

func (o CustomHostnameMapOutput) MapIndex(k pulumi.StringInput) CustomHostnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomHostname {
		return vs[0].(map[string]*CustomHostname)[vs[1].(string)]
	}).(CustomHostnameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomHostnameInput)(nil)).Elem(), &CustomHostname{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomHostnameArrayInput)(nil)).Elem(), CustomHostnameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomHostnameMapInput)(nil)).Elem(), CustomHostnameMap{})
	pulumi.RegisterOutputType(CustomHostnameOutput{})
	pulumi.RegisterOutputType(CustomHostnameArrayOutput{})
	pulumi.RegisterOutputType(CustomHostnameMapOutput{})
}
