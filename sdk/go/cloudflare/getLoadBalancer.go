// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupLoadBalancer(ctx, &cloudflare.LookupLoadBalancerArgs{
//				ZoneId:         "699d98642c564d2e855e9661899b7252",
//				LoadBalancerId: pulumi.StringRef("699d98642c564d2e855e9661899b7252"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("cloudflare:index/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools   map[string][]string `pulumi:"countryPools"`
	LoadBalancerId *string             `pulumi:"loadBalancerId"`
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools map[string][]string `pulumi:"popPools"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]string `pulumi:"regionPools"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are:
	SessionAffinityTtl *float64 `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy *string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl    *float64 `pulumi:"ttl"`
	ZoneId string   `pulumi:"zoneId"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
	AdaptiveRouting GetLoadBalancerAdaptiveRouting `pulumi:"adaptiveRouting"`
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools map[string][]string `pulumi:"countryPools"`
	CreatedOn    string              `pulumi:"createdOn"`
	// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
	DefaultPools []string `pulumi:"defaultPools"`
	// Object description.
	Description string `pulumi:"description"`
	// Whether to enable (the default) this load balancer.
	Enabled bool `pulumi:"enabled"`
	// The pool ID to use when all other pools are detected as unhealthy.
	FallbackPool string `pulumi:"fallbackPool"`
	// The ID of this resource.
	Id             string  `pulumi:"id"`
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
	LocationStrategy GetLoadBalancerLocationStrategy `pulumi:"locationStrategy"`
	ModifiedOn       string                          `pulumi:"modifiedOn"`
	// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
	Name string `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks []string `pulumi:"networks"`
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools map[string][]string `pulumi:"popPools"`
	// Whether the hostname should be gray clouded (false) or orange clouded (true).
	Proxied bool `pulumi:"proxied"`
	// Configures pool weights.
	RandomSteering GetLoadBalancerRandomSteering `pulumi:"randomSteering"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools map[string][]string `pulumi:"regionPools"`
	// BETA Field Not General Access: A list of rules for this load balancer to execute.
	Rules []GetLoadBalancerRule `pulumi:"rules"`
	// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
	SessionAffinity string `pulumi:"sessionAffinity"`
	// Configures attributes for session affinity.
	SessionAffinityAttributes GetLoadBalancerSessionAffinityAttributes `pulumi:"sessionAffinityAttributes"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are:
	SessionAffinityTtl float64 `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy string `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl    float64 `pulumi:"ttl"`
	ZoneId string  `pulumi:"zoneId"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerResultOutput, error) {
			args := v.(LookupLoadBalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getLoadBalancer:getLoadBalancer", args, LookupLoadBalancerResultOutput{}, options).(LookupLoadBalancerResultOutput), nil
		}).(LookupLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
	CountryPools   pulumi.StringArrayMapInput `pulumi:"countryPools"`
	LoadBalancerId pulumi.StringPtrInput      `pulumi:"loadBalancerId"`
	// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
	PopPools pulumi.StringArrayMapInput `pulumi:"popPools"`
	// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
	RegionPools pulumi.StringArrayMapInput `pulumi:"regionPools"`
	// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are:
	SessionAffinityTtl pulumi.Float64PtrInput `pulumi:"sessionAffinityTtl"`
	// Steering Policy for this load balancer.
	SteeringPolicy pulumi.StringPtrInput `pulumi:"steeringPolicy"`
	// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
	Ttl    pulumi.Float64PtrInput `pulumi:"ttl"`
	ZoneId pulumi.StringInput     `pulumi:"zoneId"`
}

func (LookupLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutput() LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutputWithContext(ctx context.Context) LookupLoadBalancerResultOutput {
	return o
}

// Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
func (o LookupLoadBalancerResultOutput) AdaptiveRouting() GetLoadBalancerAdaptiveRoutingOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerAdaptiveRouting { return v.AdaptiveRouting }).(GetLoadBalancerAdaptiveRoutingOutput)
}

// A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
func (o LookupLoadBalancerResultOutput) CountryPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string][]string { return v.CountryPools }).(pulumi.StringArrayMapOutput)
}

func (o LookupLoadBalancerResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when regionPools are not configured for a given region.
func (o LookupLoadBalancerResultOutput) DefaultPools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.DefaultPools }).(pulumi.StringArrayOutput)
}

// Object description.
func (o LookupLoadBalancerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable (the default) this load balancer.
func (o LookupLoadBalancerResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The pool ID to use when all other pools are detected as unhealthy.
func (o LookupLoadBalancerResultOutput) FallbackPool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.FallbackPool }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) LoadBalancerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) *string { return v.LoadBalancerId }).(pulumi.StringPtrOutput)
}

// Controls location-based steering for non-proxied requests. See `steeringPolicy` to learn how steering is affected.
func (o LookupLoadBalancerResultOutput) LocationStrategy() GetLoadBalancerLocationStrategyOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerLocationStrategy { return v.LocationStrategy }).(GetLoadBalancerLocationStrategyOutput)
}

func (o LookupLoadBalancerResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare's DNS, the Load Balancer will take precedence and the DNS record will not be used.
func (o LookupLoadBalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of networks where Load Balancer or Pool is enabled.
func (o LookupLoadBalancerResultOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.Networks }).(pulumi.StringArrayOutput)
}

// (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
func (o LookupLoadBalancerResultOutput) PopPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string][]string { return v.PopPools }).(pulumi.StringArrayMapOutput)
}

// Whether the hostname should be gray clouded (false) or orange clouded (true).
func (o LookupLoadBalancerResultOutput) Proxied() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.Proxied }).(pulumi.BoolOutput)
}

// Configures pool weights.
func (o LookupLoadBalancerResultOutput) RandomSteering() GetLoadBalancerRandomSteeringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerRandomSteering { return v.RandomSteering }).(GetLoadBalancerRandomSteeringOutput)
}

// A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
func (o LookupLoadBalancerResultOutput) RegionPools() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) map[string][]string { return v.RegionPools }).(pulumi.StringArrayMapOutput)
}

// BETA Field Not General Access: A list of rules for this load balancer to execute.
func (o LookupLoadBalancerResultOutput) Rules() GetLoadBalancerRuleArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerRule { return v.Rules }).(GetLoadBalancerRuleArrayOutput)
}

// Specifies the type of session affinity the load balancer should use unless specified as `"none"`. The supported types are:
func (o LookupLoadBalancerResultOutput) SessionAffinity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.SessionAffinity }).(pulumi.StringOutput)
}

// Configures attributes for session affinity.
func (o LookupLoadBalancerResultOutput) SessionAffinityAttributes() GetLoadBalancerSessionAffinityAttributesOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerSessionAffinityAttributes {
		return v.SessionAffinityAttributes
	}).(GetLoadBalancerSessionAffinityAttributesOutput)
}

// Time, in seconds, until a client's session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `sessionAffinity` policy are:
func (o LookupLoadBalancerResultOutput) SessionAffinityTtl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupLoadBalancerResult) float64 { return v.SessionAffinityTtl }).(pulumi.Float64Output)
}

// Steering Policy for this load balancer.
func (o LookupLoadBalancerResultOutput) SteeringPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.SteeringPolicy }).(pulumi.StringOutput)
}

// Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
func (o LookupLoadBalancerResultOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupLoadBalancerResult) float64 { return v.Ttl }).(pulumi.Float64Output)
}

func (o LookupLoadBalancerResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerResultOutput{})
}
