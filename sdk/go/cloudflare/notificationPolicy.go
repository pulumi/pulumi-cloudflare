// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example '<account_id>/<policy_id>'
// ```
type NotificationPolicy struct {
	pulumi.CustomResourceState

	// The account id
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval pulumi.StringPtrOutput `pulumi:"alertInterval"`
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	AlertType pulumi.StringOutput `pulumi:"alertType"`
	Created   pulumi.StringOutput `pulumi:"created"`
	// Optional description for the Notification policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether or not the Notification policy is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters NotificationPolicyFiltersOutput `pulumi:"filters"`
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms NotificationPolicyMechanismsOutput `pulumi:"mechanisms"`
	Modified   pulumi.StringOutput                `pulumi:"modified"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewNotificationPolicy registers a new resource with the given unique name, arguments, and options.
func NewNotificationPolicy(ctx *pulumi.Context,
	name string, args *NotificationPolicyArgs, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AlertType == nil {
		return nil, errors.New("invalid value for required argument 'AlertType'")
	}
	if args.Mechanisms == nil {
		return nil, errors.New("invalid value for required argument 'Mechanisms'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationPolicy
	err := ctx.RegisterResource("cloudflare:index/notificationPolicy:NotificationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationPolicy gets an existing NotificationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationPolicyState, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	var resource NotificationPolicy
	err := ctx.ReadResource("cloudflare:index/notificationPolicy:NotificationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationPolicy resources.
type notificationPolicyState struct {
	// The account id
	AccountId *string `pulumi:"accountId"`
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval *string `pulumi:"alertInterval"`
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	AlertType *string `pulumi:"alertType"`
	Created   *string `pulumi:"created"`
	// Optional description for the Notification policy.
	Description *string `pulumi:"description"`
	// Whether or not the Notification policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters *NotificationPolicyFilters `pulumi:"filters"`
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms *NotificationPolicyMechanisms `pulumi:"mechanisms"`
	Modified   *string                       `pulumi:"modified"`
	// Name of the policy.
	Name *string `pulumi:"name"`
}

type NotificationPolicyState struct {
	// The account id
	AccountId pulumi.StringPtrInput
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval pulumi.StringPtrInput
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	AlertType pulumi.StringPtrInput
	Created   pulumi.StringPtrInput
	// Optional description for the Notification policy.
	Description pulumi.StringPtrInput
	// Whether or not the Notification policy is enabled.
	Enabled pulumi.BoolPtrInput
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters NotificationPolicyFiltersPtrInput
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms NotificationPolicyMechanismsPtrInput
	Modified   pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
}

func (NotificationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyState)(nil)).Elem()
}

type notificationPolicyArgs struct {
	// The account id
	AccountId string `pulumi:"accountId"`
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval *string `pulumi:"alertInterval"`
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	AlertType string `pulumi:"alertType"`
	// Optional description for the Notification policy.
	Description *string `pulumi:"description"`
	// Whether or not the Notification policy is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters *NotificationPolicyFilters `pulumi:"filters"`
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms NotificationPolicyMechanisms `pulumi:"mechanisms"`
	// Name of the policy.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a NotificationPolicy resource.
type NotificationPolicyArgs struct {
	// The account id
	AccountId pulumi.StringInput
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval pulumi.StringPtrInput
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	AlertType pulumi.StringInput
	// Optional description for the Notification policy.
	Description pulumi.StringPtrInput
	// Whether or not the Notification policy is enabled.
	Enabled pulumi.BoolPtrInput
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters NotificationPolicyFiltersPtrInput
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms NotificationPolicyMechanismsInput
	// Name of the policy.
	Name pulumi.StringInput
}

func (NotificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyArgs)(nil)).Elem()
}

type NotificationPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyOutput() NotificationPolicyOutput
	ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput
}

func (*NotificationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (i *NotificationPolicy) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return i.ToNotificationPolicyOutputWithContext(context.Background())
}

func (i *NotificationPolicy) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyOutput)
}

// NotificationPolicyArrayInput is an input type that accepts NotificationPolicyArray and NotificationPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyArrayInput` via:
//
//	NotificationPolicyArray{ NotificationPolicyArgs{...} }
type NotificationPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput
	ToNotificationPolicyArrayOutputWithContext(context.Context) NotificationPolicyArrayOutput
}

type NotificationPolicyArray []NotificationPolicyInput

func (NotificationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return i.ToNotificationPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyArrayOutput)
}

// NotificationPolicyMapInput is an input type that accepts NotificationPolicyMap and NotificationPolicyMapOutput values.
// You can construct a concrete instance of `NotificationPolicyMapInput` via:
//
//	NotificationPolicyMap{ "key": NotificationPolicyArgs{...} }
type NotificationPolicyMapInput interface {
	pulumi.Input

	ToNotificationPolicyMapOutput() NotificationPolicyMapOutput
	ToNotificationPolicyMapOutputWithContext(context.Context) NotificationPolicyMapOutput
}

type NotificationPolicyMap map[string]NotificationPolicyInput

func (NotificationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return i.ToNotificationPolicyMapOutputWithContext(context.Background())
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyMapOutput)
}

type NotificationPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return o
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return o
}

// The account id
func (o NotificationPolicyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Optional specification of how often to re-alert from the same incident, not support on all alert types.
func (o NotificationPolicyOutput) AlertInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.AlertInterval }).(pulumi.StringPtrOutput)
}

// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
func (o NotificationPolicyOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.AlertType }).(pulumi.StringOutput)
}

func (o NotificationPolicyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Optional description for the Notification policy.
func (o NotificationPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether or not the Notification policy is enabled.
func (o NotificationPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
func (o NotificationPolicyOutput) Filters() NotificationPolicyFiltersOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyFiltersOutput { return v.Filters }).(NotificationPolicyFiltersOutput)
}

// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
func (o NotificationPolicyOutput) Mechanisms() NotificationPolicyMechanismsOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyMechanismsOutput { return v.Mechanisms }).(NotificationPolicyMechanismsOutput)
}

func (o NotificationPolicyOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.Modified }).(pulumi.StringOutput)
}

// Name of the policy.
func (o NotificationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type NotificationPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].([]*NotificationPolicy)[vs[1].(int)]
	}).(NotificationPolicyOutput)
}

type NotificationPolicyMapOutput struct{ *pulumi.OutputState }

func (NotificationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) MapIndex(k pulumi.StringInput) NotificationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].(map[string]*NotificationPolicy)[vs[1].(string)]
	}).(NotificationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyInput)(nil)).Elem(), &NotificationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyArrayInput)(nil)).Elem(), NotificationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyMapInput)(nil)).Elem(), NotificationPolicyMap{})
	pulumi.RegisterOutputType(NotificationPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyMapOutput{})
}
