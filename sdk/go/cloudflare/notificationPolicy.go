// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource, that manages a notification policy for Cloudflare's products. The delivery
// mechanisms supported are email, webhooks, and PagerDuty.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v4/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewNotificationPolicy(ctx, "example", &cloudflare.NotificationPolicyArgs{
// 			AccountId:   pulumi.String("c4a7362d577a6c3019a474fd6f485821"),
// 			AlertType:   pulumi.String("universal_ssl_event_type"),
// 			Description: pulumi.String("Notification policy to alert when my SSL certificates are modified"),
// 			EmailIntegrations: NotificationPolicyEmailIntegrationArray{
// 				&NotificationPolicyEmailIntegrationArgs{
// 					Id: pulumi.String("myemail@example.com"),
// 				},
// 			},
// 			Enabled: pulumi.Bool(true),
// 			Name:    pulumi.String("Policy for SSL notification events"),
// 			PagerdutyIntegrations: NotificationPolicyPagerdutyIntegrationArray{
// 				&NotificationPolicyPagerdutyIntegrationArgs{
// 					Id: pulumi.String("850129d136459401860572c5d964d27k"),
// 				},
// 			},
// 			WebhooksIntegrations: NotificationPolicyWebhooksIntegrationArray{
// 				&NotificationPolicyWebhooksIntegrationArgs{
// 					Id: pulumi.String("1860572c5d964d27aa0f379d13645940"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An existing notification policy can be imported using the account ID and the policy ID
//
// ```sh
//  $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example 72c379d136459405d964d27aa0f18605/c4a7362d577a6c3019a474fd6f485821
// ```
type NotificationPolicy struct {
	pulumi.CustomResourceState

	// The ID of the account for which the notification policy has to be created.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The event type that will trigger the dispatch of a notification.
	AlertType  pulumi.StringOutput `pulumi:"alertType"`
	Conditions pulumi.MapOutput    `pulumi:"conditions"`
	Created    pulumi.StringOutput `pulumi:"created"`
	// Description of the notification policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	EmailIntegrations NotificationPolicyEmailIntegrationArrayOutput `pulumi:"emailIntegrations"`
	// The status of the notification policy, a boolean value.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Optional filterable items for a policy.
	Filters  pulumi.ArrayMapOutput `pulumi:"filters"`
	Modified pulumi.StringOutput   `pulumi:"modified"`
	// The name of the notification policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	PagerdutyIntegrations NotificationPolicyPagerdutyIntegrationArrayOutput `pulumi:"pagerdutyIntegrations"`
	// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	WebhooksIntegrations NotificationPolicyWebhooksIntegrationArrayOutput `pulumi:"webhooksIntegrations"`
}

// NewNotificationPolicy registers a new resource with the given unique name, arguments, and options.
func NewNotificationPolicy(ctx *pulumi.Context,
	name string, args *NotificationPolicyArgs, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AlertType == nil {
		return nil, errors.New("invalid value for required argument 'AlertType'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource NotificationPolicy
	err := ctx.RegisterResource("cloudflare:index/notificationPolicy:NotificationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationPolicy gets an existing NotificationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationPolicyState, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	var resource NotificationPolicy
	err := ctx.ReadResource("cloudflare:index/notificationPolicy:NotificationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationPolicy resources.
type notificationPolicyState struct {
	// The ID of the account for which the notification policy has to be created.
	AccountId *string `pulumi:"accountId"`
	// The event type that will trigger the dispatch of a notification.
	AlertType  *string                `pulumi:"alertType"`
	Conditions map[string]interface{} `pulumi:"conditions"`
	Created    *string                `pulumi:"created"`
	// Description of the notification policy.
	Description *string `pulumi:"description"`
	// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	EmailIntegrations []NotificationPolicyEmailIntegration `pulumi:"emailIntegrations"`
	// The status of the notification policy, a boolean value.
	Enabled *bool `pulumi:"enabled"`
	// Optional filterable items for a policy.
	Filters  map[string][]interface{} `pulumi:"filters"`
	Modified *string                  `pulumi:"modified"`
	// The name of the notification policy.
	Name *string `pulumi:"name"`
	// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	PagerdutyIntegrations []NotificationPolicyPagerdutyIntegration `pulumi:"pagerdutyIntegrations"`
	// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	WebhooksIntegrations []NotificationPolicyWebhooksIntegration `pulumi:"webhooksIntegrations"`
}

type NotificationPolicyState struct {
	// The ID of the account for which the notification policy has to be created.
	AccountId pulumi.StringPtrInput
	// The event type that will trigger the dispatch of a notification.
	AlertType  pulumi.StringPtrInput
	Conditions pulumi.MapInput
	Created    pulumi.StringPtrInput
	// Description of the notification policy.
	Description pulumi.StringPtrInput
	// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	EmailIntegrations NotificationPolicyEmailIntegrationArrayInput
	// The status of the notification policy, a boolean value.
	Enabled pulumi.BoolPtrInput
	// Optional filterable items for a policy.
	Filters  pulumi.ArrayMapInput
	Modified pulumi.StringPtrInput
	// The name of the notification policy.
	Name pulumi.StringPtrInput
	// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	PagerdutyIntegrations NotificationPolicyPagerdutyIntegrationArrayInput
	// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	WebhooksIntegrations NotificationPolicyWebhooksIntegrationArrayInput
}

func (NotificationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyState)(nil)).Elem()
}

type notificationPolicyArgs struct {
	// The ID of the account for which the notification policy has to be created.
	AccountId string `pulumi:"accountId"`
	// The event type that will trigger the dispatch of a notification.
	AlertType  string                 `pulumi:"alertType"`
	Conditions map[string]interface{} `pulumi:"conditions"`
	// Description of the notification policy.
	Description *string `pulumi:"description"`
	// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	EmailIntegrations []NotificationPolicyEmailIntegration `pulumi:"emailIntegrations"`
	// The status of the notification policy, a boolean value.
	Enabled bool `pulumi:"enabled"`
	// Optional filterable items for a policy.
	Filters map[string][]interface{} `pulumi:"filters"`
	// The name of the notification policy.
	Name string `pulumi:"name"`
	// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	PagerdutyIntegrations []NotificationPolicyPagerdutyIntegration `pulumi:"pagerdutyIntegrations"`
	// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	WebhooksIntegrations []NotificationPolicyWebhooksIntegration `pulumi:"webhooksIntegrations"`
}

// The set of arguments for constructing a NotificationPolicy resource.
type NotificationPolicyArgs struct {
	// The ID of the account for which the notification policy has to be created.
	AccountId pulumi.StringInput
	// The event type that will trigger the dispatch of a notification.
	AlertType  pulumi.StringInput
	Conditions pulumi.MapInput
	// Description of the notification policy.
	Description pulumi.StringPtrInput
	// The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	EmailIntegrations NotificationPolicyEmailIntegrationArrayInput
	// The status of the notification policy, a boolean value.
	Enabled pulumi.BoolInput
	// Optional filterable items for a policy.
	Filters pulumi.ArrayMapInput
	// The name of the notification policy.
	Name pulumi.StringInput
	// The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	PagerdutyIntegrations NotificationPolicyPagerdutyIntegrationArrayInput
	// The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
	WebhooksIntegrations NotificationPolicyWebhooksIntegrationArrayInput
}

func (NotificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyArgs)(nil)).Elem()
}

type NotificationPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyOutput() NotificationPolicyOutput
	ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput
}

func (*NotificationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (i *NotificationPolicy) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return i.ToNotificationPolicyOutputWithContext(context.Background())
}

func (i *NotificationPolicy) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyOutput)
}

// NotificationPolicyArrayInput is an input type that accepts NotificationPolicyArray and NotificationPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyArrayInput` via:
//
//          NotificationPolicyArray{ NotificationPolicyArgs{...} }
type NotificationPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput
	ToNotificationPolicyArrayOutputWithContext(context.Context) NotificationPolicyArrayOutput
}

type NotificationPolicyArray []NotificationPolicyInput

func (NotificationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return i.ToNotificationPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyArrayOutput)
}

// NotificationPolicyMapInput is an input type that accepts NotificationPolicyMap and NotificationPolicyMapOutput values.
// You can construct a concrete instance of `NotificationPolicyMapInput` via:
//
//          NotificationPolicyMap{ "key": NotificationPolicyArgs{...} }
type NotificationPolicyMapInput interface {
	pulumi.Input

	ToNotificationPolicyMapOutput() NotificationPolicyMapOutput
	ToNotificationPolicyMapOutputWithContext(context.Context) NotificationPolicyMapOutput
}

type NotificationPolicyMap map[string]NotificationPolicyInput

func (NotificationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return i.ToNotificationPolicyMapOutputWithContext(context.Background())
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyMapOutput)
}

type NotificationPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return o
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return o
}

type NotificationPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].([]*NotificationPolicy)[vs[1].(int)]
	}).(NotificationPolicyOutput)
}

type NotificationPolicyMapOutput struct{ *pulumi.OutputState }

func (NotificationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) MapIndex(k pulumi.StringInput) NotificationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].(map[string]*NotificationPolicy)[vs[1].(string)]
	}).(NotificationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyInput)(nil)).Elem(), &NotificationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyArrayInput)(nil)).Elem(), NotificationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyMapInput)(nil)).Elem(), NotificationPolicyMap{})
	pulumi.RegisterOutputType(NotificationPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyMapOutput{})
}
