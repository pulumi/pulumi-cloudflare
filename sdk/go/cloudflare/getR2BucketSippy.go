// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupR2BucketSippy(ctx, &cloudflare.LookupR2BucketSippyArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				BucketName: "example-bucket",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupR2BucketSippy(ctx *pulumi.Context, args *LookupR2BucketSippyArgs, opts ...pulumi.InvokeOption) (*LookupR2BucketSippyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupR2BucketSippyResult
	err := ctx.Invoke("cloudflare:index/getR2BucketSippy:getR2BucketSippy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getR2BucketSippy.
type LookupR2BucketSippyArgs struct {
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
}

// A collection of values returned by getR2BucketSippy.
type LookupR2BucketSippyResult struct {
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// Details about the configured destination bucket.
	Destination GetR2BucketSippyDestination `pulumi:"destination"`
	// State of Sippy for this bucket.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Details about the configured source bucket.
	Source GetR2BucketSippySource `pulumi:"source"`
}

func LookupR2BucketSippyOutput(ctx *pulumi.Context, args LookupR2BucketSippyOutputArgs, opts ...pulumi.InvokeOption) LookupR2BucketSippyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupR2BucketSippyResultOutput, error) {
			args := v.(LookupR2BucketSippyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getR2BucketSippy:getR2BucketSippy", args, LookupR2BucketSippyResultOutput{}, options).(LookupR2BucketSippyResultOutput), nil
		}).(LookupR2BucketSippyResultOutput)
}

// A collection of arguments for invoking getR2BucketSippy.
type LookupR2BucketSippyOutputArgs struct {
	// Account ID.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the bucket.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (LookupR2BucketSippyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketSippyArgs)(nil)).Elem()
}

// A collection of values returned by getR2BucketSippy.
type LookupR2BucketSippyResultOutput struct{ *pulumi.OutputState }

func (LookupR2BucketSippyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketSippyResult)(nil)).Elem()
}

func (o LookupR2BucketSippyResultOutput) ToLookupR2BucketSippyResultOutput() LookupR2BucketSippyResultOutput {
	return o
}

func (o LookupR2BucketSippyResultOutput) ToLookupR2BucketSippyResultOutputWithContext(ctx context.Context) LookupR2BucketSippyResultOutput {
	return o
}

// Account ID.
func (o LookupR2BucketSippyResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket.
func (o LookupR2BucketSippyResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Details about the configured destination bucket.
func (o LookupR2BucketSippyResultOutput) Destination() GetR2BucketSippyDestinationOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) GetR2BucketSippyDestination { return v.Destination }).(GetR2BucketSippyDestinationOutput)
}

// State of Sippy for this bucket.
func (o LookupR2BucketSippyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupR2BucketSippyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Details about the configured source bucket.
func (o LookupR2BucketSippyResultOutput) Source() GetR2BucketSippySourceOutput {
	return o.ApplyT(func(v LookupR2BucketSippyResult) GetR2BucketSippySource { return v.Source }).(GetR2BucketSippySourceOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupR2BucketSippyResultOutput{})
}
