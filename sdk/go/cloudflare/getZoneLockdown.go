// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZoneLockdown(ctx, &cloudflare.LookupZoneLockdownArgs{
//				ZoneId:      "023e105f4ecef8ad9ca31a8372d0c353",
//				LockDownsId: pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b59"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZoneLockdown(ctx *pulumi.Context, args *LookupZoneLockdownArgs, opts ...pulumi.InvokeOption) (*LookupZoneLockdownResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneLockdownResult
	err := ctx.Invoke("cloudflare:index/getZoneLockdown:getZoneLockdown", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneLockdown.
type LookupZoneLockdownArgs struct {
	Filter *GetZoneLockdownFilter `pulumi:"filter"`
	// The unique identifier of the Zone Lockdown rule.
	LockDownsId *string `pulumi:"lockDownsId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneLockdown.
type LookupZoneLockdownResult struct {
	// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ipRange` configurations.
	Configurations []GetZoneLockdownConfiguration `pulumi:"configurations"`
	// The timestamp of when the rule was created.
	CreatedOn string `pulumi:"createdOn"`
	// An informative summary of the rule.
	Description string                 `pulumi:"description"`
	Filter      *GetZoneLockdownFilter `pulumi:"filter"`
	// The unique identifier of the Zone Lockdown rule.
	Id string `pulumi:"id"`
	// The unique identifier of the Zone Lockdown rule.
	LockDownsId *string `pulumi:"lockDownsId"`
	// The timestamp of when the rule was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// When true, indicates that the rule is currently paused.
	Paused bool `pulumi:"paused"`
	// The URLs to include in the rule definition. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
	Urls []string `pulumi:"urls"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupZoneLockdownOutput(ctx *pulumi.Context, args LookupZoneLockdownOutputArgs, opts ...pulumi.InvokeOption) LookupZoneLockdownResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZoneLockdownResultOutput, error) {
			args := v.(LookupZoneLockdownArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZoneLockdown:getZoneLockdown", args, LookupZoneLockdownResultOutput{}, options).(LookupZoneLockdownResultOutput), nil
		}).(LookupZoneLockdownResultOutput)
}

// A collection of arguments for invoking getZoneLockdown.
type LookupZoneLockdownOutputArgs struct {
	Filter GetZoneLockdownFilterPtrInput `pulumi:"filter"`
	// The unique identifier of the Zone Lockdown rule.
	LockDownsId pulumi.StringPtrInput `pulumi:"lockDownsId"`
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneLockdownOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneLockdownArgs)(nil)).Elem()
}

// A collection of values returned by getZoneLockdown.
type LookupZoneLockdownResultOutput struct{ *pulumi.OutputState }

func (LookupZoneLockdownResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneLockdownResult)(nil)).Elem()
}

func (o LookupZoneLockdownResultOutput) ToLookupZoneLockdownResultOutput() LookupZoneLockdownResultOutput {
	return o
}

func (o LookupZoneLockdownResultOutput) ToLookupZoneLockdownResultOutputWithContext(ctx context.Context) LookupZoneLockdownResultOutput {
	return o
}

// A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ipRange` configurations.
func (o LookupZoneLockdownResultOutput) Configurations() GetZoneLockdownConfigurationArrayOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) []GetZoneLockdownConfiguration { return v.Configurations }).(GetZoneLockdownConfigurationArrayOutput)
}

// The timestamp of when the rule was created.
func (o LookupZoneLockdownResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// An informative summary of the rule.
func (o LookupZoneLockdownResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupZoneLockdownResultOutput) Filter() GetZoneLockdownFilterPtrOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) *GetZoneLockdownFilter { return v.Filter }).(GetZoneLockdownFilterPtrOutput)
}

// The unique identifier of the Zone Lockdown rule.
func (o LookupZoneLockdownResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique identifier of the Zone Lockdown rule.
func (o LookupZoneLockdownResultOutput) LockDownsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) *string { return v.LockDownsId }).(pulumi.StringPtrOutput)
}

// The timestamp of when the rule was last modified.
func (o LookupZoneLockdownResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// When true, indicates that the rule is currently paused.
func (o LookupZoneLockdownResultOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) bool { return v.Paused }).(pulumi.BoolOutput)
}

// The URLs to include in the rule definition. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
func (o LookupZoneLockdownResultOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

// Defines an identifier.
func (o LookupZoneLockdownResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneLockdownResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneLockdownResultOutput{})
}
