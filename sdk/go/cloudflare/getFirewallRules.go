// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupFirewallRules(ctx, &cloudflare.LookupFirewallRulesArgs{
//				ZoneId:      "023e105f4ecef8ad9ca31a8372d0c353",
//				Id:          pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b60"),
//				Action:      pulumi.StringRef("block"),
//				Description: pulumi.StringRef("mir"),
//				Paused:      pulumi.BoolRef(false),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFirewallRules(ctx *pulumi.Context, args *LookupFirewallRulesArgs, opts ...pulumi.InvokeOption) (*LookupFirewallRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFirewallRulesResult
	err := ctx.Invoke("cloudflare:index/getFirewallRules:getFirewallRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirewallRules.
type LookupFirewallRulesArgs struct {
	// The action to search for. Must be an exact match.
	Action *string `pulumi:"action"`
	// A case-insensitive string to find in the description.
	Description *string `pulumi:"description"`
	// The unique identifier of the firewall rule.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// When true, indicates that the firewall rule is currently paused.
	Paused *bool `pulumi:"paused"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getFirewallRules.
type LookupFirewallRulesResult struct {
	// The action to search for. Must be an exact match.
	Action *string `pulumi:"action"`
	// A case-insensitive string to find in the description.
	Description *string `pulumi:"description"`
	// The unique identifier of the firewall rule.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// When true, indicates that the firewall rule is currently paused.
	Paused *bool `pulumi:"paused"`
	// The items returned by the data source
	Results []GetFirewallRulesResult `pulumi:"results"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupFirewallRulesOutput(ctx *pulumi.Context, args LookupFirewallRulesOutputArgs, opts ...pulumi.InvokeOption) LookupFirewallRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFirewallRulesResultOutput, error) {
			args := v.(LookupFirewallRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getFirewallRules:getFirewallRules", args, LookupFirewallRulesResultOutput{}, options).(LookupFirewallRulesResultOutput), nil
		}).(LookupFirewallRulesResultOutput)
}

// A collection of arguments for invoking getFirewallRules.
type LookupFirewallRulesOutputArgs struct {
	// The action to search for. Must be an exact match.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// A case-insensitive string to find in the description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The unique identifier of the firewall rule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// When true, indicates that the firewall rule is currently paused.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupFirewallRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallRulesArgs)(nil)).Elem()
}

// A collection of values returned by getFirewallRules.
type LookupFirewallRulesResultOutput struct{ *pulumi.OutputState }

func (LookupFirewallRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallRulesResult)(nil)).Elem()
}

func (o LookupFirewallRulesResultOutput) ToLookupFirewallRulesResultOutput() LookupFirewallRulesResultOutput {
	return o
}

func (o LookupFirewallRulesResultOutput) ToLookupFirewallRulesResultOutputWithContext(ctx context.Context) LookupFirewallRulesResultOutput {
	return o
}

// The action to search for. Must be an exact match.
func (o LookupFirewallRulesResultOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// A case-insensitive string to find in the description.
func (o LookupFirewallRulesResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The unique identifier of the firewall rule.
func (o LookupFirewallRulesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Max items to fetch, default: 1000
func (o LookupFirewallRulesResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// When true, indicates that the firewall rule is currently paused.
func (o LookupFirewallRulesResultOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The items returned by the data source
func (o LookupFirewallRulesResultOutput) Results() GetFirewallRulesResultArrayOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) []GetFirewallRulesResult { return v.Results }).(GetFirewallRulesResultArrayOutput)
}

// Identifier
func (o LookupFirewallRulesResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRulesResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFirewallRulesResultOutput{})
}
