// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewUserAgentBlockingRule(ctx, "example_user_agent_blocking_rule", &cloudflare.UserAgentBlockingRuleArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Configuration: &cloudflare.UserAgentBlockingRuleConfigurationArgs{
//					Target: pulumi.String("ip"),
//					Value:  pulumi.String("198.51.100.4"),
//				},
//				Mode: pulumi.String("challenge"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UserAgentBlockingRule struct {
	pulumi.CustomResourceState

	// The rule configuration.
	Configuration UserAgentBlockingRuleConfigurationOutput `pulumi:"configuration"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The unique identifier of the User Agent Blocking rule.
	UaRuleId pulumi.StringPtrOutput `pulumi:"uaRuleId"`
	// Defines an identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewUserAgentBlockingRule registers a new resource with the given unique name, arguments, and options.
func NewUserAgentBlockingRule(ctx *pulumi.Context,
	name string, args *UserAgentBlockingRuleArgs, opts ...pulumi.ResourceOption) (*UserAgentBlockingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAgentBlockingRule
	err := ctx.RegisterResource("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAgentBlockingRule gets an existing UserAgentBlockingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAgentBlockingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAgentBlockingRuleState, opts ...pulumi.ResourceOption) (*UserAgentBlockingRule, error) {
	var resource UserAgentBlockingRule
	err := ctx.ReadResource("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAgentBlockingRule resources.
type userAgentBlockingRuleState struct {
	// The rule configuration.
	Configuration *UserAgentBlockingRuleConfiguration `pulumi:"configuration"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode *string `pulumi:"mode"`
	// The unique identifier of the User Agent Blocking rule.
	UaRuleId *string `pulumi:"uaRuleId"`
	// Defines an identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type UserAgentBlockingRuleState struct {
	// The rule configuration.
	Configuration UserAgentBlockingRuleConfigurationPtrInput
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode pulumi.StringPtrInput
	// The unique identifier of the User Agent Blocking rule.
	UaRuleId pulumi.StringPtrInput
	// Defines an identifier.
	ZoneId pulumi.StringPtrInput
}

func (UserAgentBlockingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAgentBlockingRuleState)(nil)).Elem()
}

type userAgentBlockingRuleArgs struct {
	// The rule configuration.
	Configuration UserAgentBlockingRuleConfiguration `pulumi:"configuration"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode string `pulumi:"mode"`
	// The unique identifier of the User Agent Blocking rule.
	UaRuleId *string `pulumi:"uaRuleId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a UserAgentBlockingRule resource.
type UserAgentBlockingRuleArgs struct {
	// The rule configuration.
	Configuration UserAgentBlockingRuleConfigurationInput
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode pulumi.StringInput
	// The unique identifier of the User Agent Blocking rule.
	UaRuleId pulumi.StringPtrInput
	// Defines an identifier.
	ZoneId pulumi.StringInput
}

func (UserAgentBlockingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAgentBlockingRuleArgs)(nil)).Elem()
}

type UserAgentBlockingRuleInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput
	ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput
}

func (*UserAgentBlockingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAgentBlockingRule)(nil)).Elem()
}

func (i *UserAgentBlockingRule) ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput {
	return i.ToUserAgentBlockingRuleOutputWithContext(context.Background())
}

func (i *UserAgentBlockingRule) ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleOutput)
}

// UserAgentBlockingRuleArrayInput is an input type that accepts UserAgentBlockingRuleArray and UserAgentBlockingRuleArrayOutput values.
// You can construct a concrete instance of `UserAgentBlockingRuleArrayInput` via:
//
//	UserAgentBlockingRuleArray{ UserAgentBlockingRuleArgs{...} }
type UserAgentBlockingRuleArrayInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput
	ToUserAgentBlockingRuleArrayOutputWithContext(context.Context) UserAgentBlockingRuleArrayOutput
}

type UserAgentBlockingRuleArray []UserAgentBlockingRuleInput

func (UserAgentBlockingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAgentBlockingRule)(nil)).Elem()
}

func (i UserAgentBlockingRuleArray) ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput {
	return i.ToUserAgentBlockingRuleArrayOutputWithContext(context.Background())
}

func (i UserAgentBlockingRuleArray) ToUserAgentBlockingRuleArrayOutputWithContext(ctx context.Context) UserAgentBlockingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleArrayOutput)
}

// UserAgentBlockingRuleMapInput is an input type that accepts UserAgentBlockingRuleMap and UserAgentBlockingRuleMapOutput values.
// You can construct a concrete instance of `UserAgentBlockingRuleMapInput` via:
//
//	UserAgentBlockingRuleMap{ "key": UserAgentBlockingRuleArgs{...} }
type UserAgentBlockingRuleMapInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput
	ToUserAgentBlockingRuleMapOutputWithContext(context.Context) UserAgentBlockingRuleMapOutput
}

type UserAgentBlockingRuleMap map[string]UserAgentBlockingRuleInput

func (UserAgentBlockingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAgentBlockingRule)(nil)).Elem()
}

func (i UserAgentBlockingRuleMap) ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput {
	return i.ToUserAgentBlockingRuleMapOutputWithContext(context.Background())
}

func (i UserAgentBlockingRuleMap) ToUserAgentBlockingRuleMapOutputWithContext(ctx context.Context) UserAgentBlockingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleMapOutput)
}

type UserAgentBlockingRuleOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleOutput) ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput {
	return o
}

func (o UserAgentBlockingRuleOutput) ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput {
	return o
}

// The rule configuration.
func (o UserAgentBlockingRuleOutput) Configuration() UserAgentBlockingRuleConfigurationOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) UserAgentBlockingRuleConfigurationOutput { return v.Configuration }).(UserAgentBlockingRuleConfigurationOutput)
}

// The action to apply to a matched request.
// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
func (o UserAgentBlockingRuleOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The unique identifier of the User Agent Blocking rule.
func (o UserAgentBlockingRuleOutput) UaRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringPtrOutput { return v.UaRuleId }).(pulumi.StringPtrOutput)
}

// Defines an identifier.
func (o UserAgentBlockingRuleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type UserAgentBlockingRuleArrayOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleArrayOutput) ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput {
	return o
}

func (o UserAgentBlockingRuleArrayOutput) ToUserAgentBlockingRuleArrayOutputWithContext(ctx context.Context) UserAgentBlockingRuleArrayOutput {
	return o
}

func (o UserAgentBlockingRuleArrayOutput) Index(i pulumi.IntInput) UserAgentBlockingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAgentBlockingRule {
		return vs[0].([]*UserAgentBlockingRule)[vs[1].(int)]
	}).(UserAgentBlockingRuleOutput)
}

type UserAgentBlockingRuleMapOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleMapOutput) ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput {
	return o
}

func (o UserAgentBlockingRuleMapOutput) ToUserAgentBlockingRuleMapOutputWithContext(ctx context.Context) UserAgentBlockingRuleMapOutput {
	return o
}

func (o UserAgentBlockingRuleMapOutput) MapIndex(k pulumi.StringInput) UserAgentBlockingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAgentBlockingRule {
		return vs[0].(map[string]*UserAgentBlockingRule)[vs[1].(string)]
	}).(UserAgentBlockingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleInput)(nil)).Elem(), &UserAgentBlockingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleArrayInput)(nil)).Elem(), UserAgentBlockingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleMapInput)(nil)).Elem(), UserAgentBlockingRuleMap{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleOutput{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleArrayOutput{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleMapOutput{})
}
