// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage User Agent Blocking Rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewUserAgentBlockingRule(ctx, "example1", &cloudflare.UserAgentBlockingRuleArgs{
//				Configuration: &cloudflare.UserAgentBlockingRuleConfigurationArgs{
//					Target: pulumi.String("ua"),
//					Value:  pulumi.String("Chrome"),
//				},
//				Description: pulumi.String("My description 1"),
//				Mode:        pulumi.String("js_challenge"),
//				Paused:      pulumi.Bool(false),
//				ZoneId:      pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewUserAgentBlockingRule(ctx, "example2", &cloudflare.UserAgentBlockingRuleArgs{
//				Configuration: &cloudflare.UserAgentBlockingRuleConfigurationArgs{
//					Target: pulumi.String("ua"),
//					Value:  pulumi.String("Mozilla"),
//				},
//				Description: pulumi.String("My description 22"),
//				Mode:        pulumi.String("challenge"),
//				Paused:      pulumi.Bool(true),
//				ZoneId:      pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule example <zone_id>/<user_agent_blocking_rule_id>
//
// ```
type UserAgentBlockingRule struct {
	pulumi.CustomResourceState

	// The configuration object for the current rule.
	Configuration UserAgentBlockingRuleConfigurationOutput `pulumi:"configuration"`
	// An informative summary of the rule.
	Description pulumi.StringOutput `pulumi:"description"`
	// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// When true, indicates that the rule is currently paused.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewUserAgentBlockingRule registers a new resource with the given unique name, arguments, and options.
func NewUserAgentBlockingRule(ctx *pulumi.Context,
	name string, args *UserAgentBlockingRuleArgs, opts ...pulumi.ResourceOption) (*UserAgentBlockingRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserAgentBlockingRule
	err := ctx.RegisterResource("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserAgentBlockingRule gets an existing UserAgentBlockingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserAgentBlockingRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserAgentBlockingRuleState, opts ...pulumi.ResourceOption) (*UserAgentBlockingRule, error) {
	var resource UserAgentBlockingRule
	err := ctx.ReadResource("cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserAgentBlockingRule resources.
type userAgentBlockingRuleState struct {
	// The configuration object for the current rule.
	Configuration *UserAgentBlockingRuleConfiguration `pulumi:"configuration"`
	// An informative summary of the rule.
	Description *string `pulumi:"description"`
	// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
	Mode *string `pulumi:"mode"`
	// When true, indicates that the rule is currently paused.
	Paused *bool `pulumi:"paused"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId *string `pulumi:"zoneId"`
}

type UserAgentBlockingRuleState struct {
	// The configuration object for the current rule.
	Configuration UserAgentBlockingRuleConfigurationPtrInput
	// An informative summary of the rule.
	Description pulumi.StringPtrInput
	// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
	Mode pulumi.StringPtrInput
	// When true, indicates that the rule is currently paused.
	Paused pulumi.BoolPtrInput
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrInput
}

func (UserAgentBlockingRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*userAgentBlockingRuleState)(nil)).Elem()
}

type userAgentBlockingRuleArgs struct {
	// The configuration object for the current rule.
	Configuration UserAgentBlockingRuleConfiguration `pulumi:"configuration"`
	// An informative summary of the rule.
	Description string `pulumi:"description"`
	// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
	Mode string `pulumi:"mode"`
	// When true, indicates that the rule is currently paused.
	Paused bool `pulumi:"paused"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a UserAgentBlockingRule resource.
type UserAgentBlockingRuleArgs struct {
	// The configuration object for the current rule.
	Configuration UserAgentBlockingRuleConfigurationInput
	// An informative summary of the rule.
	Description pulumi.StringInput
	// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
	Mode pulumi.StringInput
	// When true, indicates that the rule is currently paused.
	Paused pulumi.BoolInput
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringInput
}

func (UserAgentBlockingRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userAgentBlockingRuleArgs)(nil)).Elem()
}

type UserAgentBlockingRuleInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput
	ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput
}

func (*UserAgentBlockingRule) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAgentBlockingRule)(nil)).Elem()
}

func (i *UserAgentBlockingRule) ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput {
	return i.ToUserAgentBlockingRuleOutputWithContext(context.Background())
}

func (i *UserAgentBlockingRule) ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleOutput)
}

// UserAgentBlockingRuleArrayInput is an input type that accepts UserAgentBlockingRuleArray and UserAgentBlockingRuleArrayOutput values.
// You can construct a concrete instance of `UserAgentBlockingRuleArrayInput` via:
//
//	UserAgentBlockingRuleArray{ UserAgentBlockingRuleArgs{...} }
type UserAgentBlockingRuleArrayInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput
	ToUserAgentBlockingRuleArrayOutputWithContext(context.Context) UserAgentBlockingRuleArrayOutput
}

type UserAgentBlockingRuleArray []UserAgentBlockingRuleInput

func (UserAgentBlockingRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAgentBlockingRule)(nil)).Elem()
}

func (i UserAgentBlockingRuleArray) ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput {
	return i.ToUserAgentBlockingRuleArrayOutputWithContext(context.Background())
}

func (i UserAgentBlockingRuleArray) ToUserAgentBlockingRuleArrayOutputWithContext(ctx context.Context) UserAgentBlockingRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleArrayOutput)
}

// UserAgentBlockingRuleMapInput is an input type that accepts UserAgentBlockingRuleMap and UserAgentBlockingRuleMapOutput values.
// You can construct a concrete instance of `UserAgentBlockingRuleMapInput` via:
//
//	UserAgentBlockingRuleMap{ "key": UserAgentBlockingRuleArgs{...} }
type UserAgentBlockingRuleMapInput interface {
	pulumi.Input

	ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput
	ToUserAgentBlockingRuleMapOutputWithContext(context.Context) UserAgentBlockingRuleMapOutput
}

type UserAgentBlockingRuleMap map[string]UserAgentBlockingRuleInput

func (UserAgentBlockingRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAgentBlockingRule)(nil)).Elem()
}

func (i UserAgentBlockingRuleMap) ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput {
	return i.ToUserAgentBlockingRuleMapOutputWithContext(context.Background())
}

func (i UserAgentBlockingRuleMap) ToUserAgentBlockingRuleMapOutputWithContext(ctx context.Context) UserAgentBlockingRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAgentBlockingRuleMapOutput)
}

type UserAgentBlockingRuleOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleOutput) ToUserAgentBlockingRuleOutput() UserAgentBlockingRuleOutput {
	return o
}

func (o UserAgentBlockingRuleOutput) ToUserAgentBlockingRuleOutputWithContext(ctx context.Context) UserAgentBlockingRuleOutput {
	return o
}

// The configuration object for the current rule.
func (o UserAgentBlockingRuleOutput) Configuration() UserAgentBlockingRuleConfigurationOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) UserAgentBlockingRuleConfigurationOutput { return v.Configuration }).(UserAgentBlockingRuleConfigurationOutput)
}

// An informative summary of the rule.
func (o UserAgentBlockingRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The action to apply to a matched request. Available values: `block`, `challenge`, `jsChallenge`, `managedChallenge`.
func (o UserAgentBlockingRuleOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// When true, indicates that the rule is currently paused.
func (o UserAgentBlockingRuleOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o UserAgentBlockingRuleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserAgentBlockingRule) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type UserAgentBlockingRuleArrayOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleArrayOutput) ToUserAgentBlockingRuleArrayOutput() UserAgentBlockingRuleArrayOutput {
	return o
}

func (o UserAgentBlockingRuleArrayOutput) ToUserAgentBlockingRuleArrayOutputWithContext(ctx context.Context) UserAgentBlockingRuleArrayOutput {
	return o
}

func (o UserAgentBlockingRuleArrayOutput) Index(i pulumi.IntInput) UserAgentBlockingRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserAgentBlockingRule {
		return vs[0].([]*UserAgentBlockingRule)[vs[1].(int)]
	}).(UserAgentBlockingRuleOutput)
}

type UserAgentBlockingRuleMapOutput struct{ *pulumi.OutputState }

func (UserAgentBlockingRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserAgentBlockingRule)(nil)).Elem()
}

func (o UserAgentBlockingRuleMapOutput) ToUserAgentBlockingRuleMapOutput() UserAgentBlockingRuleMapOutput {
	return o
}

func (o UserAgentBlockingRuleMapOutput) ToUserAgentBlockingRuleMapOutputWithContext(ctx context.Context) UserAgentBlockingRuleMapOutput {
	return o
}

func (o UserAgentBlockingRuleMapOutput) MapIndex(k pulumi.StringInput) UserAgentBlockingRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserAgentBlockingRule {
		return vs[0].(map[string]*UserAgentBlockingRule)[vs[1].(string)]
	}).(UserAgentBlockingRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleInput)(nil)).Elem(), &UserAgentBlockingRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleArrayInput)(nil)).Elem(), UserAgentBlockingRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAgentBlockingRuleMapInput)(nil)).Elem(), UserAgentBlockingRuleMap{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleOutput{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleArrayOutput{})
	pulumi.RegisterOutputType(UserAgentBlockingRuleMapOutput{})
}
