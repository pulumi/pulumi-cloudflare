// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
// include or exclude lists of routes from the WARP client's tunnel.
type ZeroTrustSplitTunnel struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The mode of the split tunnel policy. Available values: `include`, `exclude`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The settings policy for which to configure this split tunnel policy.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// The value of the tunnel attributes.
	Tunnels ZeroTrustSplitTunnelTunnelArrayOutput `pulumi:"tunnels"`
}

// NewZeroTrustSplitTunnel registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustSplitTunnel(ctx *pulumi.Context,
	name string, args *ZeroTrustSplitTunnelArgs, opts ...pulumi.ResourceOption) (*ZeroTrustSplitTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Tunnels == nil {
		return nil, errors.New("invalid value for required argument 'Tunnels'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustSplitTunnel
	err := ctx.RegisterResource("cloudflare:index/zeroTrustSplitTunnel:ZeroTrustSplitTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustSplitTunnel gets an existing ZeroTrustSplitTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustSplitTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustSplitTunnelState, opts ...pulumi.ResourceOption) (*ZeroTrustSplitTunnel, error) {
	var resource ZeroTrustSplitTunnel
	err := ctx.ReadResource("cloudflare:index/zeroTrustSplitTunnel:ZeroTrustSplitTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustSplitTunnel resources.
type zeroTrustSplitTunnelState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// The mode of the split tunnel policy. Available values: `include`, `exclude`.
	Mode *string `pulumi:"mode"`
	// The settings policy for which to configure this split tunnel policy.
	PolicyId *string `pulumi:"policyId"`
	// The value of the tunnel attributes.
	Tunnels []ZeroTrustSplitTunnelTunnel `pulumi:"tunnels"`
}

type ZeroTrustSplitTunnelState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// The mode of the split tunnel policy. Available values: `include`, `exclude`.
	Mode pulumi.StringPtrInput
	// The settings policy for which to configure this split tunnel policy.
	PolicyId pulumi.StringPtrInput
	// The value of the tunnel attributes.
	Tunnels ZeroTrustSplitTunnelTunnelArrayInput
}

func (ZeroTrustSplitTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustSplitTunnelState)(nil)).Elem()
}

type zeroTrustSplitTunnelArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// The mode of the split tunnel policy. Available values: `include`, `exclude`.
	Mode string `pulumi:"mode"`
	// The settings policy for which to configure this split tunnel policy.
	PolicyId *string `pulumi:"policyId"`
	// The value of the tunnel attributes.
	Tunnels []ZeroTrustSplitTunnelTunnel `pulumi:"tunnels"`
}

// The set of arguments for constructing a ZeroTrustSplitTunnel resource.
type ZeroTrustSplitTunnelArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// The mode of the split tunnel policy. Available values: `include`, `exclude`.
	Mode pulumi.StringInput
	// The settings policy for which to configure this split tunnel policy.
	PolicyId pulumi.StringPtrInput
	// The value of the tunnel attributes.
	Tunnels ZeroTrustSplitTunnelTunnelArrayInput
}

func (ZeroTrustSplitTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustSplitTunnelArgs)(nil)).Elem()
}

type ZeroTrustSplitTunnelInput interface {
	pulumi.Input

	ToZeroTrustSplitTunnelOutput() ZeroTrustSplitTunnelOutput
	ToZeroTrustSplitTunnelOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelOutput
}

func (*ZeroTrustSplitTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustSplitTunnel)(nil)).Elem()
}

func (i *ZeroTrustSplitTunnel) ToZeroTrustSplitTunnelOutput() ZeroTrustSplitTunnelOutput {
	return i.ToZeroTrustSplitTunnelOutputWithContext(context.Background())
}

func (i *ZeroTrustSplitTunnel) ToZeroTrustSplitTunnelOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustSplitTunnelOutput)
}

// ZeroTrustSplitTunnelArrayInput is an input type that accepts ZeroTrustSplitTunnelArray and ZeroTrustSplitTunnelArrayOutput values.
// You can construct a concrete instance of `ZeroTrustSplitTunnelArrayInput` via:
//
//	ZeroTrustSplitTunnelArray{ ZeroTrustSplitTunnelArgs{...} }
type ZeroTrustSplitTunnelArrayInput interface {
	pulumi.Input

	ToZeroTrustSplitTunnelArrayOutput() ZeroTrustSplitTunnelArrayOutput
	ToZeroTrustSplitTunnelArrayOutputWithContext(context.Context) ZeroTrustSplitTunnelArrayOutput
}

type ZeroTrustSplitTunnelArray []ZeroTrustSplitTunnelInput

func (ZeroTrustSplitTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustSplitTunnel)(nil)).Elem()
}

func (i ZeroTrustSplitTunnelArray) ToZeroTrustSplitTunnelArrayOutput() ZeroTrustSplitTunnelArrayOutput {
	return i.ToZeroTrustSplitTunnelArrayOutputWithContext(context.Background())
}

func (i ZeroTrustSplitTunnelArray) ToZeroTrustSplitTunnelArrayOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustSplitTunnelArrayOutput)
}

// ZeroTrustSplitTunnelMapInput is an input type that accepts ZeroTrustSplitTunnelMap and ZeroTrustSplitTunnelMapOutput values.
// You can construct a concrete instance of `ZeroTrustSplitTunnelMapInput` via:
//
//	ZeroTrustSplitTunnelMap{ "key": ZeroTrustSplitTunnelArgs{...} }
type ZeroTrustSplitTunnelMapInput interface {
	pulumi.Input

	ToZeroTrustSplitTunnelMapOutput() ZeroTrustSplitTunnelMapOutput
	ToZeroTrustSplitTunnelMapOutputWithContext(context.Context) ZeroTrustSplitTunnelMapOutput
}

type ZeroTrustSplitTunnelMap map[string]ZeroTrustSplitTunnelInput

func (ZeroTrustSplitTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustSplitTunnel)(nil)).Elem()
}

func (i ZeroTrustSplitTunnelMap) ToZeroTrustSplitTunnelMapOutput() ZeroTrustSplitTunnelMapOutput {
	return i.ToZeroTrustSplitTunnelMapOutputWithContext(context.Background())
}

func (i ZeroTrustSplitTunnelMap) ToZeroTrustSplitTunnelMapOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustSplitTunnelMapOutput)
}

type ZeroTrustSplitTunnelOutput struct{ *pulumi.OutputState }

func (ZeroTrustSplitTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustSplitTunnel)(nil)).Elem()
}

func (o ZeroTrustSplitTunnelOutput) ToZeroTrustSplitTunnelOutput() ZeroTrustSplitTunnelOutput {
	return o
}

func (o ZeroTrustSplitTunnelOutput) ToZeroTrustSplitTunnelOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelOutput {
	return o
}

// The account identifier to target for the resource.
func (o ZeroTrustSplitTunnelOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustSplitTunnel) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The mode of the split tunnel policy. Available values: `include`, `exclude`.
func (o ZeroTrustSplitTunnelOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustSplitTunnel) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The settings policy for which to configure this split tunnel policy.
func (o ZeroTrustSplitTunnelOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustSplitTunnel) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The value of the tunnel attributes.
func (o ZeroTrustSplitTunnelOutput) Tunnels() ZeroTrustSplitTunnelTunnelArrayOutput {
	return o.ApplyT(func(v *ZeroTrustSplitTunnel) ZeroTrustSplitTunnelTunnelArrayOutput { return v.Tunnels }).(ZeroTrustSplitTunnelTunnelArrayOutput)
}

type ZeroTrustSplitTunnelArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustSplitTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustSplitTunnel)(nil)).Elem()
}

func (o ZeroTrustSplitTunnelArrayOutput) ToZeroTrustSplitTunnelArrayOutput() ZeroTrustSplitTunnelArrayOutput {
	return o
}

func (o ZeroTrustSplitTunnelArrayOutput) ToZeroTrustSplitTunnelArrayOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelArrayOutput {
	return o
}

func (o ZeroTrustSplitTunnelArrayOutput) Index(i pulumi.IntInput) ZeroTrustSplitTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustSplitTunnel {
		return vs[0].([]*ZeroTrustSplitTunnel)[vs[1].(int)]
	}).(ZeroTrustSplitTunnelOutput)
}

type ZeroTrustSplitTunnelMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustSplitTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustSplitTunnel)(nil)).Elem()
}

func (o ZeroTrustSplitTunnelMapOutput) ToZeroTrustSplitTunnelMapOutput() ZeroTrustSplitTunnelMapOutput {
	return o
}

func (o ZeroTrustSplitTunnelMapOutput) ToZeroTrustSplitTunnelMapOutputWithContext(ctx context.Context) ZeroTrustSplitTunnelMapOutput {
	return o
}

func (o ZeroTrustSplitTunnelMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustSplitTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustSplitTunnel {
		return vs[0].(map[string]*ZeroTrustSplitTunnel)[vs[1].(string)]
	}).(ZeroTrustSplitTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustSplitTunnelInput)(nil)).Elem(), &ZeroTrustSplitTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustSplitTunnelArrayInput)(nil)).Elem(), ZeroTrustSplitTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustSplitTunnelMapInput)(nil)).Elem(), ZeroTrustSplitTunnelMap{})
	pulumi.RegisterOutputType(ZeroTrustSplitTunnelOutput{})
	pulumi.RegisterOutputType(ZeroTrustSplitTunnelArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustSplitTunnelMapOutput{})
}
