// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type ZoneSubscription struct {
	pulumi.CustomResourceState

	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// Subscription identifier tag.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanOutput `pulumi:"ratePlan"`
}

// NewZoneSubscription registers a new resource with the given unique name, arguments, and options.
func NewZoneSubscription(ctx *pulumi.Context,
	name string, args *ZoneSubscriptionArgs, opts ...pulumi.ResourceOption) (*ZoneSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneSubscription
	err := ctx.RegisterResource("cloudflare:index/zoneSubscription:ZoneSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneSubscription gets an existing ZoneSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneSubscriptionState, opts ...pulumi.ResourceOption) (*ZoneSubscription, error) {
	var resource ZoneSubscription
	err := ctx.ReadResource("cloudflare:index/zoneSubscription:ZoneSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneSubscription resources.
type zoneSubscriptionState struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency *string `pulumi:"frequency"`
	// Subscription identifier tag.
	Identifier *string `pulumi:"identifier"`
	// The rate plan applied to the subscription.
	RatePlan *ZoneSubscriptionRatePlan `pulumi:"ratePlan"`
}

type ZoneSubscriptionState struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrInput
	// Subscription identifier tag.
	Identifier pulumi.StringPtrInput
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanPtrInput
}

func (ZoneSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSubscriptionState)(nil)).Elem()
}

type zoneSubscriptionArgs struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency *string `pulumi:"frequency"`
	// Subscription identifier tag.
	Identifier string `pulumi:"identifier"`
	// The rate plan applied to the subscription.
	RatePlan *ZoneSubscriptionRatePlan `pulumi:"ratePlan"`
}

// The set of arguments for constructing a ZoneSubscription resource.
type ZoneSubscriptionArgs struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrInput
	// Subscription identifier tag.
	Identifier pulumi.StringInput
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanPtrInput
}

func (ZoneSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSubscriptionArgs)(nil)).Elem()
}

type ZoneSubscriptionInput interface {
	pulumi.Input

	ToZoneSubscriptionOutput() ZoneSubscriptionOutput
	ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput
}

func (*ZoneSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSubscription)(nil)).Elem()
}

func (i *ZoneSubscription) ToZoneSubscriptionOutput() ZoneSubscriptionOutput {
	return i.ToZoneSubscriptionOutputWithContext(context.Background())
}

func (i *ZoneSubscription) ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionOutput)
}

// ZoneSubscriptionArrayInput is an input type that accepts ZoneSubscriptionArray and ZoneSubscriptionArrayOutput values.
// You can construct a concrete instance of `ZoneSubscriptionArrayInput` via:
//
//	ZoneSubscriptionArray{ ZoneSubscriptionArgs{...} }
type ZoneSubscriptionArrayInput interface {
	pulumi.Input

	ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput
	ToZoneSubscriptionArrayOutputWithContext(context.Context) ZoneSubscriptionArrayOutput
}

type ZoneSubscriptionArray []ZoneSubscriptionInput

func (ZoneSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSubscription)(nil)).Elem()
}

func (i ZoneSubscriptionArray) ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput {
	return i.ToZoneSubscriptionArrayOutputWithContext(context.Background())
}

func (i ZoneSubscriptionArray) ToZoneSubscriptionArrayOutputWithContext(ctx context.Context) ZoneSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionArrayOutput)
}

// ZoneSubscriptionMapInput is an input type that accepts ZoneSubscriptionMap and ZoneSubscriptionMapOutput values.
// You can construct a concrete instance of `ZoneSubscriptionMapInput` via:
//
//	ZoneSubscriptionMap{ "key": ZoneSubscriptionArgs{...} }
type ZoneSubscriptionMapInput interface {
	pulumi.Input

	ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput
	ToZoneSubscriptionMapOutputWithContext(context.Context) ZoneSubscriptionMapOutput
}

type ZoneSubscriptionMap map[string]ZoneSubscriptionInput

func (ZoneSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSubscription)(nil)).Elem()
}

func (i ZoneSubscriptionMap) ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput {
	return i.ToZoneSubscriptionMapOutputWithContext(context.Background())
}

func (i ZoneSubscriptionMap) ToZoneSubscriptionMapOutputWithContext(ctx context.Context) ZoneSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionMapOutput)
}

type ZoneSubscriptionOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionOutput) ToZoneSubscriptionOutput() ZoneSubscriptionOutput {
	return o
}

func (o ZoneSubscriptionOutput) ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput {
	return o
}

// How often the subscription is renewed automatically.
// Available values: "weekly", "monthly", "quarterly", "yearly".
func (o ZoneSubscriptionOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Subscription identifier tag.
func (o ZoneSubscriptionOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The rate plan applied to the subscription.
func (o ZoneSubscriptionOutput) RatePlan() ZoneSubscriptionRatePlanOutput {
	return o.ApplyT(func(v *ZoneSubscription) ZoneSubscriptionRatePlanOutput { return v.RatePlan }).(ZoneSubscriptionRatePlanOutput)
}

type ZoneSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionArrayOutput) ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput {
	return o
}

func (o ZoneSubscriptionArrayOutput) ToZoneSubscriptionArrayOutputWithContext(ctx context.Context) ZoneSubscriptionArrayOutput {
	return o
}

func (o ZoneSubscriptionArrayOutput) Index(i pulumi.IntInput) ZoneSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneSubscription {
		return vs[0].([]*ZoneSubscription)[vs[1].(int)]
	}).(ZoneSubscriptionOutput)
}

type ZoneSubscriptionMapOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionMapOutput) ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput {
	return o
}

func (o ZoneSubscriptionMapOutput) ToZoneSubscriptionMapOutputWithContext(ctx context.Context) ZoneSubscriptionMapOutput {
	return o
}

func (o ZoneSubscriptionMapOutput) MapIndex(k pulumi.StringInput) ZoneSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneSubscription {
		return vs[0].(map[string]*ZoneSubscription)[vs[1].(string)]
	}).(ZoneSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionInput)(nil)).Elem(), &ZoneSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionArrayInput)(nil)).Elem(), ZoneSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionMapInput)(nil)).Elem(), ZoneSubscriptionMap{})
	pulumi.RegisterOutputType(ZoneSubscriptionOutput{})
	pulumi.RegisterOutputType(ZoneSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(ZoneSubscriptionMapOutput{})
}
