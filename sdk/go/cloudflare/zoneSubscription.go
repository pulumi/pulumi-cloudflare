// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZoneSubscription(ctx, "example_zone_subscription", &cloudflare.ZoneSubscriptionArgs{
//				ZoneId:    pulumi.String("506e3185e9c882d175a2d0cb0093d9f2"),
//				Frequency: pulumi.String("monthly"),
//				RatePlan: &cloudflare.ZoneSubscriptionRatePlanArgs{
//					Id:                 pulumi.String("free"),
//					Currency:           pulumi.String("USD"),
//					Externally_managed: false,
//					Is_contract:        false,
//					Public_name:        "Business Plan",
//					Scope:              pulumi.String("zone"),
//					Sets: pulumi.StringArray{
//						pulumi.String("string"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zoneSubscription:ZoneSubscription example '<zone_id>'
// ```
type ZoneSubscription struct {
	pulumi.CustomResourceState

	// The monetary unit in which pricing information is displayed.
	Currency pulumi.StringOutput `pulumi:"currency"`
	// The end of the current period and also when the next billing is due.
	CurrentPeriodEnd pulumi.StringOutput `pulumi:"currentPeriodEnd"`
	// When the current billing period started. May match initial*period*start if this is the first period.
	CurrentPeriodStart pulumi.StringOutput `pulumi:"currentPeriodStart"`
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// The price of the subscription that will be billed, in US dollars.
	Price pulumi.Float64Output `pulumi:"price"`
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanPtrOutput `pulumi:"ratePlan"`
	// The state that the subscription is in.
	// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
	State pulumi.StringOutput `pulumi:"state"`
	// Subscription identifier tag.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneSubscription registers a new resource with the given unique name, arguments, and options.
func NewZoneSubscription(ctx *pulumi.Context,
	name string, args *ZoneSubscriptionArgs, opts ...pulumi.ResourceOption) (*ZoneSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneSubscription
	err := ctx.RegisterResource("cloudflare:index/zoneSubscription:ZoneSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneSubscription gets an existing ZoneSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneSubscriptionState, opts ...pulumi.ResourceOption) (*ZoneSubscription, error) {
	var resource ZoneSubscription
	err := ctx.ReadResource("cloudflare:index/zoneSubscription:ZoneSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneSubscription resources.
type zoneSubscriptionState struct {
	// The monetary unit in which pricing information is displayed.
	Currency *string `pulumi:"currency"`
	// The end of the current period and also when the next billing is due.
	CurrentPeriodEnd *string `pulumi:"currentPeriodEnd"`
	// When the current billing period started. May match initial*period*start if this is the first period.
	CurrentPeriodStart *string `pulumi:"currentPeriodStart"`
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency *string `pulumi:"frequency"`
	// The price of the subscription that will be billed, in US dollars.
	Price *float64 `pulumi:"price"`
	// The rate plan applied to the subscription.
	RatePlan *ZoneSubscriptionRatePlan `pulumi:"ratePlan"`
	// The state that the subscription is in.
	// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
	State *string `pulumi:"state"`
	// Subscription identifier tag.
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneSubscriptionState struct {
	// The monetary unit in which pricing information is displayed.
	Currency pulumi.StringPtrInput
	// The end of the current period and also when the next billing is due.
	CurrentPeriodEnd pulumi.StringPtrInput
	// When the current billing period started. May match initial*period*start if this is the first period.
	CurrentPeriodStart pulumi.StringPtrInput
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrInput
	// The price of the subscription that will be billed, in US dollars.
	Price pulumi.Float64PtrInput
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanPtrInput
	// The state that the subscription is in.
	// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
	State pulumi.StringPtrInput
	// Subscription identifier tag.
	ZoneId pulumi.StringPtrInput
}

func (ZoneSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSubscriptionState)(nil)).Elem()
}

type zoneSubscriptionArgs struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency *string `pulumi:"frequency"`
	// The rate plan applied to the subscription.
	RatePlan *ZoneSubscriptionRatePlan `pulumi:"ratePlan"`
	// Subscription identifier tag.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneSubscription resource.
type ZoneSubscriptionArgs struct {
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency pulumi.StringPtrInput
	// The rate plan applied to the subscription.
	RatePlan ZoneSubscriptionRatePlanPtrInput
	// Subscription identifier tag.
	ZoneId pulumi.StringInput
}

func (ZoneSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSubscriptionArgs)(nil)).Elem()
}

type ZoneSubscriptionInput interface {
	pulumi.Input

	ToZoneSubscriptionOutput() ZoneSubscriptionOutput
	ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput
}

func (*ZoneSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSubscription)(nil)).Elem()
}

func (i *ZoneSubscription) ToZoneSubscriptionOutput() ZoneSubscriptionOutput {
	return i.ToZoneSubscriptionOutputWithContext(context.Background())
}

func (i *ZoneSubscription) ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionOutput)
}

// ZoneSubscriptionArrayInput is an input type that accepts ZoneSubscriptionArray and ZoneSubscriptionArrayOutput values.
// You can construct a concrete instance of `ZoneSubscriptionArrayInput` via:
//
//	ZoneSubscriptionArray{ ZoneSubscriptionArgs{...} }
type ZoneSubscriptionArrayInput interface {
	pulumi.Input

	ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput
	ToZoneSubscriptionArrayOutputWithContext(context.Context) ZoneSubscriptionArrayOutput
}

type ZoneSubscriptionArray []ZoneSubscriptionInput

func (ZoneSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSubscription)(nil)).Elem()
}

func (i ZoneSubscriptionArray) ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput {
	return i.ToZoneSubscriptionArrayOutputWithContext(context.Background())
}

func (i ZoneSubscriptionArray) ToZoneSubscriptionArrayOutputWithContext(ctx context.Context) ZoneSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionArrayOutput)
}

// ZoneSubscriptionMapInput is an input type that accepts ZoneSubscriptionMap and ZoneSubscriptionMapOutput values.
// You can construct a concrete instance of `ZoneSubscriptionMapInput` via:
//
//	ZoneSubscriptionMap{ "key": ZoneSubscriptionArgs{...} }
type ZoneSubscriptionMapInput interface {
	pulumi.Input

	ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput
	ToZoneSubscriptionMapOutputWithContext(context.Context) ZoneSubscriptionMapOutput
}

type ZoneSubscriptionMap map[string]ZoneSubscriptionInput

func (ZoneSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSubscription)(nil)).Elem()
}

func (i ZoneSubscriptionMap) ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput {
	return i.ToZoneSubscriptionMapOutputWithContext(context.Background())
}

func (i ZoneSubscriptionMap) ToZoneSubscriptionMapOutputWithContext(ctx context.Context) ZoneSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSubscriptionMapOutput)
}

type ZoneSubscriptionOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionOutput) ToZoneSubscriptionOutput() ZoneSubscriptionOutput {
	return o
}

func (o ZoneSubscriptionOutput) ToZoneSubscriptionOutputWithContext(ctx context.Context) ZoneSubscriptionOutput {
	return o
}

// The monetary unit in which pricing information is displayed.
func (o ZoneSubscriptionOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.Currency }).(pulumi.StringOutput)
}

// The end of the current period and also when the next billing is due.
func (o ZoneSubscriptionOutput) CurrentPeriodEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.CurrentPeriodEnd }).(pulumi.StringOutput)
}

// When the current billing period started. May match initial*period*start if this is the first period.
func (o ZoneSubscriptionOutput) CurrentPeriodStart() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.CurrentPeriodStart }).(pulumi.StringOutput)
}

// How often the subscription is renewed automatically.
// Available values: "weekly", "monthly", "quarterly", "yearly".
func (o ZoneSubscriptionOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The price of the subscription that will be billed, in US dollars.
func (o ZoneSubscriptionOutput) Price() pulumi.Float64Output {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.Float64Output { return v.Price }).(pulumi.Float64Output)
}

// The rate plan applied to the subscription.
func (o ZoneSubscriptionOutput) RatePlan() ZoneSubscriptionRatePlanPtrOutput {
	return o.ApplyT(func(v *ZoneSubscription) ZoneSubscriptionRatePlanPtrOutput { return v.RatePlan }).(ZoneSubscriptionRatePlanPtrOutput)
}

// The state that the subscription is in.
// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
func (o ZoneSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Subscription identifier tag.
func (o ZoneSubscriptionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSubscription) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionArrayOutput) ToZoneSubscriptionArrayOutput() ZoneSubscriptionArrayOutput {
	return o
}

func (o ZoneSubscriptionArrayOutput) ToZoneSubscriptionArrayOutputWithContext(ctx context.Context) ZoneSubscriptionArrayOutput {
	return o
}

func (o ZoneSubscriptionArrayOutput) Index(i pulumi.IntInput) ZoneSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneSubscription {
		return vs[0].([]*ZoneSubscription)[vs[1].(int)]
	}).(ZoneSubscriptionOutput)
}

type ZoneSubscriptionMapOutput struct{ *pulumi.OutputState }

func (ZoneSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSubscription)(nil)).Elem()
}

func (o ZoneSubscriptionMapOutput) ToZoneSubscriptionMapOutput() ZoneSubscriptionMapOutput {
	return o
}

func (o ZoneSubscriptionMapOutput) ToZoneSubscriptionMapOutputWithContext(ctx context.Context) ZoneSubscriptionMapOutput {
	return o
}

func (o ZoneSubscriptionMapOutput) MapIndex(k pulumi.StringInput) ZoneSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneSubscription {
		return vs[0].(map[string]*ZoneSubscription)[vs[1].(string)]
	}).(ZoneSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionInput)(nil)).Elem(), &ZoneSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionArrayInput)(nil)).Elem(), ZoneSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSubscriptionMapInput)(nil)).Elem(), ZoneSubscriptionMap{})
	pulumi.RegisterOutputType(ZoneSubscriptionOutput{})
	pulumi.RegisterOutputType(ZoneSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(ZoneSubscriptionMapOutput{})
}
