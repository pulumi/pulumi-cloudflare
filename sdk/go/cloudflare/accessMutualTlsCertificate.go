// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Access Mutual TLS Certificate resource. Mutual TLS authentication ensures that the traffic is secure and trusted in both directions between a client and server and can be used with Access to only allows requests from devices with a corresponding client certificate.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v4/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewAccessMutualTlsCertificate(ctx, "myCert", &cloudflare.AccessMutualTlsCertificateArgs{
// 			ZoneId:      pulumi.String("1d5fdc9e88c8a8c4518b068cd94331fe"),
// 			Name:        pulumi.String("My Root Cert"),
// 			Certificate: pulumi.Any(_var.Ca_pem),
// 			AssociatedHostnames: pulumi.StringArray{
// 				pulumi.String("staging.example.com"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Access Mutual TLS Certificate can be imported using a composite ID composed of the account or zone and the mutual TLS certificate ID in the form of`account/ACCOUNT_ID/MUTUAL_TLS_CERTIFICATE_ID` or `zone/ZONE_ID/MUTUAL_TLS_CERTIFICATE_ID`.
//
// ```sh
//  $ pulumi import cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate staging account/cb029e245cfdd66dc8d2e570d5dd3322/d41d8cd98f00b204e9800998ecf8427e
// ```
type AccessMutualTlsCertificate struct {
	pulumi.CustomResourceState

	// The account to which the certificate should be added. Conflicts with `zoneId`.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The hostnames that will be prompted for this certificate.
	AssociatedHostnames pulumi.StringArrayOutput `pulumi:"associatedHostnames"`
	// The Root CA for your certificates.
	Certificate pulumi.StringPtrOutput `pulumi:"certificate"`
	Fingerprint pulumi.StringOutput    `pulumi:"fingerprint"`
	// The name of the certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// The DNS zone to which the certificate should be added. Conflicts with `accountId`.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAccessMutualTlsCertificate registers a new resource with the given unique name, arguments, and options.
func NewAccessMutualTlsCertificate(ctx *pulumi.Context,
	name string, args *AccessMutualTlsCertificateArgs, opts ...pulumi.ResourceOption) (*AccessMutualTlsCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource AccessMutualTlsCertificate
	err := ctx.RegisterResource("cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessMutualTlsCertificate gets an existing AccessMutualTlsCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessMutualTlsCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessMutualTlsCertificateState, opts ...pulumi.ResourceOption) (*AccessMutualTlsCertificate, error) {
	var resource AccessMutualTlsCertificate
	err := ctx.ReadResource("cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessMutualTlsCertificate resources.
type accessMutualTlsCertificateState struct {
	// The account to which the certificate should be added. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// The hostnames that will be prompted for this certificate.
	AssociatedHostnames []string `pulumi:"associatedHostnames"`
	// The Root CA for your certificates.
	Certificate *string `pulumi:"certificate"`
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the certificate.
	Name *string `pulumi:"name"`
	// The DNS zone to which the certificate should be added. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessMutualTlsCertificateState struct {
	// The account to which the certificate should be added. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// The hostnames that will be prompted for this certificate.
	AssociatedHostnames pulumi.StringArrayInput
	// The Root CA for your certificates.
	Certificate pulumi.StringPtrInput
	Fingerprint pulumi.StringPtrInput
	// The name of the certificate.
	Name pulumi.StringPtrInput
	// The DNS zone to which the certificate should be added. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsCertificateState)(nil)).Elem()
}

type accessMutualTlsCertificateArgs struct {
	// The account to which the certificate should be added. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// The hostnames that will be prompted for this certificate.
	AssociatedHostnames []string `pulumi:"associatedHostnames"`
	// The Root CA for your certificates.
	Certificate *string `pulumi:"certificate"`
	// The name of the certificate.
	Name string `pulumi:"name"`
	// The DNS zone to which the certificate should be added. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessMutualTlsCertificate resource.
type AccessMutualTlsCertificateArgs struct {
	// The account to which the certificate should be added. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// The hostnames that will be prompted for this certificate.
	AssociatedHostnames pulumi.StringArrayInput
	// The Root CA for your certificates.
	Certificate pulumi.StringPtrInput
	// The name of the certificate.
	Name pulumi.StringInput
	// The DNS zone to which the certificate should be added. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsCertificateArgs)(nil)).Elem()
}

type AccessMutualTlsCertificateInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput
	ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput
}

func (*AccessMutualTlsCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessMutualTlsCertificate)(nil))
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput {
	return i.ToAccessMutualTlsCertificateOutputWithContext(context.Background())
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateOutput)
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificatePtrOutput() AccessMutualTlsCertificatePtrOutput {
	return i.ToAccessMutualTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificatePtrOutputWithContext(ctx context.Context) AccessMutualTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificatePtrOutput)
}

type AccessMutualTlsCertificatePtrInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificatePtrOutput() AccessMutualTlsCertificatePtrOutput
	ToAccessMutualTlsCertificatePtrOutputWithContext(ctx context.Context) AccessMutualTlsCertificatePtrOutput
}

type accessMutualTlsCertificatePtrType AccessMutualTlsCertificateArgs

func (*accessMutualTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsCertificate)(nil))
}

func (i *accessMutualTlsCertificatePtrType) ToAccessMutualTlsCertificatePtrOutput() AccessMutualTlsCertificatePtrOutput {
	return i.ToAccessMutualTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *accessMutualTlsCertificatePtrType) ToAccessMutualTlsCertificatePtrOutputWithContext(ctx context.Context) AccessMutualTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificatePtrOutput)
}

// AccessMutualTlsCertificateArrayInput is an input type that accepts AccessMutualTlsCertificateArray and AccessMutualTlsCertificateArrayOutput values.
// You can construct a concrete instance of `AccessMutualTlsCertificateArrayInput` via:
//
//          AccessMutualTlsCertificateArray{ AccessMutualTlsCertificateArgs{...} }
type AccessMutualTlsCertificateArrayInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput
	ToAccessMutualTlsCertificateArrayOutputWithContext(context.Context) AccessMutualTlsCertificateArrayOutput
}

type AccessMutualTlsCertificateArray []AccessMutualTlsCertificateInput

func (AccessMutualTlsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (i AccessMutualTlsCertificateArray) ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput {
	return i.ToAccessMutualTlsCertificateArrayOutputWithContext(context.Background())
}

func (i AccessMutualTlsCertificateArray) ToAccessMutualTlsCertificateArrayOutputWithContext(ctx context.Context) AccessMutualTlsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateArrayOutput)
}

// AccessMutualTlsCertificateMapInput is an input type that accepts AccessMutualTlsCertificateMap and AccessMutualTlsCertificateMapOutput values.
// You can construct a concrete instance of `AccessMutualTlsCertificateMapInput` via:
//
//          AccessMutualTlsCertificateMap{ "key": AccessMutualTlsCertificateArgs{...} }
type AccessMutualTlsCertificateMapInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput
	ToAccessMutualTlsCertificateMapOutputWithContext(context.Context) AccessMutualTlsCertificateMapOutput
}

type AccessMutualTlsCertificateMap map[string]AccessMutualTlsCertificateInput

func (AccessMutualTlsCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (i AccessMutualTlsCertificateMap) ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput {
	return i.ToAccessMutualTlsCertificateMapOutputWithContext(context.Background())
}

func (i AccessMutualTlsCertificateMap) ToAccessMutualTlsCertificateMapOutputWithContext(ctx context.Context) AccessMutualTlsCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateMapOutput)
}

type AccessMutualTlsCertificateOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessMutualTlsCertificate)(nil))
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput {
	return o
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput {
	return o
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificatePtrOutput() AccessMutualTlsCertificatePtrOutput {
	return o.ToAccessMutualTlsCertificatePtrOutputWithContext(context.Background())
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificatePtrOutputWithContext(ctx context.Context) AccessMutualTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessMutualTlsCertificate) *AccessMutualTlsCertificate {
		return &v
	}).(AccessMutualTlsCertificatePtrOutput)
}

type AccessMutualTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsCertificate)(nil))
}

func (o AccessMutualTlsCertificatePtrOutput) ToAccessMutualTlsCertificatePtrOutput() AccessMutualTlsCertificatePtrOutput {
	return o
}

func (o AccessMutualTlsCertificatePtrOutput) ToAccessMutualTlsCertificatePtrOutputWithContext(ctx context.Context) AccessMutualTlsCertificatePtrOutput {
	return o
}

func (o AccessMutualTlsCertificatePtrOutput) Elem() AccessMutualTlsCertificateOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) AccessMutualTlsCertificate {
		if v != nil {
			return *v
		}
		var ret AccessMutualTlsCertificate
		return ret
	}).(AccessMutualTlsCertificateOutput)
}

type AccessMutualTlsCertificateArrayOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessMutualTlsCertificate)(nil))
}

func (o AccessMutualTlsCertificateArrayOutput) ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput {
	return o
}

func (o AccessMutualTlsCertificateArrayOutput) ToAccessMutualTlsCertificateArrayOutputWithContext(ctx context.Context) AccessMutualTlsCertificateArrayOutput {
	return o
}

func (o AccessMutualTlsCertificateArrayOutput) Index(i pulumi.IntInput) AccessMutualTlsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessMutualTlsCertificate {
		return vs[0].([]AccessMutualTlsCertificate)[vs[1].(int)]
	}).(AccessMutualTlsCertificateOutput)
}

type AccessMutualTlsCertificateMapOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AccessMutualTlsCertificate)(nil))
}

func (o AccessMutualTlsCertificateMapOutput) ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput {
	return o
}

func (o AccessMutualTlsCertificateMapOutput) ToAccessMutualTlsCertificateMapOutputWithContext(ctx context.Context) AccessMutualTlsCertificateMapOutput {
	return o
}

func (o AccessMutualTlsCertificateMapOutput) MapIndex(k pulumi.StringInput) AccessMutualTlsCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AccessMutualTlsCertificate {
		return vs[0].(map[string]AccessMutualTlsCertificate)[vs[1].(string)]
	}).(AccessMutualTlsCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateInput)(nil)).Elem(), &AccessMutualTlsCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificatePtrInput)(nil)).Elem(), &AccessMutualTlsCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateArrayInput)(nil)).Elem(), AccessMutualTlsCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateMapInput)(nil)).Elem(), AccessMutualTlsCertificateMap{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateArrayOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateMapOutput{})
}
