// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustAccessMtlsCertificate(ctx, "example_zero_trust_access_mtls_certificate", &cloudflare.ZeroTrustAccessMtlsCertificateArgs{
//				Certificate: pulumi.String("  -----BEGIN CERTIFICATE-----\n  MIIGAjCCA+qgAwIBAgIJAI7kymlF7CWT...N4RI7KKB7nikiuUf8vhULKy5IX10\n  DrUtmu/B\n  -----END CERTIFICATE-----\n"),
//				Name:        pulumi.String("Allow devs"),
//				ZoneId:      pulumi.String("zone_id"),
//				AssociatedHostnames: pulumi.StringArray{
//					pulumi.String("admin.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate example '<{accounts|zones}/{account_id|zone_id}>/<certificate_id>'
// ```
//
// Deprecated: cloudflare.index/accessmutualtlscertificate.AccessMutualTlsCertificate has been deprecated in favor of cloudflare.index/zerotrustaccessmtlscertificate.ZeroTrustAccessMtlsCertificate
type AccessMutualTlsCertificate struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames pulumi.StringArrayOutput `pulumi:"associatedHostnames"`
	// The certificate content.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	ExpiresOn   pulumi.StringOutput `pulumi:"expiresOn"`
	// The MD5 fingerprint of the certificate.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The name of the certificate.
	Name      pulumi.StringOutput `pulumi:"name"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewAccessMutualTlsCertificate registers a new resource with the given unique name, arguments, and options.
func NewAccessMutualTlsCertificate(ctx *pulumi.Context,
	name string, args *AccessMutualTlsCertificateArgs, opts ...pulumi.ResourceOption) (*AccessMutualTlsCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/cloudflareAccessMutualTlsCertificate:AccessMutualTlsCertificate"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessMutualTlsCertificate
	err := ctx.RegisterResource("cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessMutualTlsCertificate gets an existing AccessMutualTlsCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessMutualTlsCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessMutualTlsCertificateState, opts ...pulumi.ResourceOption) (*AccessMutualTlsCertificate, error) {
	var resource AccessMutualTlsCertificate
	err := ctx.ReadResource("cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessMutualTlsCertificate resources.
type accessMutualTlsCertificateState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames []string `pulumi:"associatedHostnames"`
	// The certificate content.
	Certificate *string `pulumi:"certificate"`
	CreatedAt   *string `pulumi:"createdAt"`
	ExpiresOn   *string `pulumi:"expiresOn"`
	// The MD5 fingerprint of the certificate.
	Fingerprint *string `pulumi:"fingerprint"`
	// The name of the certificate.
	Name      *string `pulumi:"name"`
	UpdatedAt *string `pulumi:"updatedAt"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessMutualTlsCertificateState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames pulumi.StringArrayInput
	// The certificate content.
	Certificate pulumi.StringPtrInput
	CreatedAt   pulumi.StringPtrInput
	ExpiresOn   pulumi.StringPtrInput
	// The MD5 fingerprint of the certificate.
	Fingerprint pulumi.StringPtrInput
	// The name of the certificate.
	Name      pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsCertificateState)(nil)).Elem()
}

type accessMutualTlsCertificateArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames []string `pulumi:"associatedHostnames"`
	// The certificate content.
	Certificate string `pulumi:"certificate"`
	// The name of the certificate.
	Name string `pulumi:"name"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessMutualTlsCertificate resource.
type AccessMutualTlsCertificateArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// The hostnames of the applications that will use this certificate.
	AssociatedHostnames pulumi.StringArrayInput
	// The certificate content.
	Certificate pulumi.StringInput
	// The name of the certificate.
	Name pulumi.StringInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsCertificateArgs)(nil)).Elem()
}

type AccessMutualTlsCertificateInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput
	ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput
}

func (*AccessMutualTlsCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsCertificate)(nil)).Elem()
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput {
	return i.ToAccessMutualTlsCertificateOutputWithContext(context.Background())
}

func (i *AccessMutualTlsCertificate) ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateOutput)
}

// AccessMutualTlsCertificateArrayInput is an input type that accepts AccessMutualTlsCertificateArray and AccessMutualTlsCertificateArrayOutput values.
// You can construct a concrete instance of `AccessMutualTlsCertificateArrayInput` via:
//
//	AccessMutualTlsCertificateArray{ AccessMutualTlsCertificateArgs{...} }
type AccessMutualTlsCertificateArrayInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput
	ToAccessMutualTlsCertificateArrayOutputWithContext(context.Context) AccessMutualTlsCertificateArrayOutput
}

type AccessMutualTlsCertificateArray []AccessMutualTlsCertificateInput

func (AccessMutualTlsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (i AccessMutualTlsCertificateArray) ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput {
	return i.ToAccessMutualTlsCertificateArrayOutputWithContext(context.Background())
}

func (i AccessMutualTlsCertificateArray) ToAccessMutualTlsCertificateArrayOutputWithContext(ctx context.Context) AccessMutualTlsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateArrayOutput)
}

// AccessMutualTlsCertificateMapInput is an input type that accepts AccessMutualTlsCertificateMap and AccessMutualTlsCertificateMapOutput values.
// You can construct a concrete instance of `AccessMutualTlsCertificateMapInput` via:
//
//	AccessMutualTlsCertificateMap{ "key": AccessMutualTlsCertificateArgs{...} }
type AccessMutualTlsCertificateMapInput interface {
	pulumi.Input

	ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput
	ToAccessMutualTlsCertificateMapOutputWithContext(context.Context) AccessMutualTlsCertificateMapOutput
}

type AccessMutualTlsCertificateMap map[string]AccessMutualTlsCertificateInput

func (AccessMutualTlsCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (i AccessMutualTlsCertificateMap) ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput {
	return i.ToAccessMutualTlsCertificateMapOutputWithContext(context.Background())
}

func (i AccessMutualTlsCertificateMap) ToAccessMutualTlsCertificateMapOutputWithContext(ctx context.Context) AccessMutualTlsCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsCertificateMapOutput)
}

type AccessMutualTlsCertificateOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsCertificate)(nil)).Elem()
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificateOutput() AccessMutualTlsCertificateOutput {
	return o
}

func (o AccessMutualTlsCertificateOutput) ToAccessMutualTlsCertificateOutputWithContext(ctx context.Context) AccessMutualTlsCertificateOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o AccessMutualTlsCertificateOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The hostnames of the applications that will use this certificate.
func (o AccessMutualTlsCertificateOutput) AssociatedHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringArrayOutput { return v.AssociatedHostnames }).(pulumi.StringArrayOutput)
}

// The certificate content.
func (o AccessMutualTlsCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o AccessMutualTlsCertificateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o AccessMutualTlsCertificateOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.ExpiresOn }).(pulumi.StringOutput)
}

// The MD5 fingerprint of the certificate.
func (o AccessMutualTlsCertificateOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// The name of the certificate.
func (o AccessMutualTlsCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AccessMutualTlsCertificateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o AccessMutualTlsCertificateOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessMutualTlsCertificate) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type AccessMutualTlsCertificateArrayOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (o AccessMutualTlsCertificateArrayOutput) ToAccessMutualTlsCertificateArrayOutput() AccessMutualTlsCertificateArrayOutput {
	return o
}

func (o AccessMutualTlsCertificateArrayOutput) ToAccessMutualTlsCertificateArrayOutputWithContext(ctx context.Context) AccessMutualTlsCertificateArrayOutput {
	return o
}

func (o AccessMutualTlsCertificateArrayOutput) Index(i pulumi.IntInput) AccessMutualTlsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessMutualTlsCertificate {
		return vs[0].([]*AccessMutualTlsCertificate)[vs[1].(int)]
	}).(AccessMutualTlsCertificateOutput)
}

type AccessMutualTlsCertificateMapOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessMutualTlsCertificate)(nil)).Elem()
}

func (o AccessMutualTlsCertificateMapOutput) ToAccessMutualTlsCertificateMapOutput() AccessMutualTlsCertificateMapOutput {
	return o
}

func (o AccessMutualTlsCertificateMapOutput) ToAccessMutualTlsCertificateMapOutputWithContext(ctx context.Context) AccessMutualTlsCertificateMapOutput {
	return o
}

func (o AccessMutualTlsCertificateMapOutput) MapIndex(k pulumi.StringInput) AccessMutualTlsCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessMutualTlsCertificate {
		return vs[0].(map[string]*AccessMutualTlsCertificate)[vs[1].(string)]
	}).(AccessMutualTlsCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateInput)(nil)).Elem(), &AccessMutualTlsCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateArrayInput)(nil)).Elem(), AccessMutualTlsCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsCertificateMapInput)(nil)).Elem(), AccessMutualTlsCertificateMap{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateArrayOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsCertificateMapOutput{})
}
