// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewSchemaValidationOperationSettings(ctx, "example_schema_validation_operation_settings", &cloudflare.SchemaValidationOperationSettingsArgs{
//				ZoneId:           pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				OperationId:      pulumi.String("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//				MitigationAction: pulumi.String("block"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SchemaValidationOperationSettings struct {
	pulumi.CustomResourceState

	// When set, this applies a mitigation action to this operation
	//
	//   - `"log"` - log request when request does not conform to schema for this operation
	//   - `"block"` - deny access to the site when request does not conform to schema for this operation
	//   - `"none"` - will skip mitigation for this operation
	//   - `null` - clears any mitigation action
	//     Available values: "log", "block", "none".
	MitigationAction pulumi.StringOutput `pulumi:"mitigationAction"`
	// UUID.
	OperationId pulumi.StringOutput `pulumi:"operationId"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSchemaValidationOperationSettings registers a new resource with the given unique name, arguments, and options.
func NewSchemaValidationOperationSettings(ctx *pulumi.Context,
	name string, args *SchemaValidationOperationSettingsArgs, opts ...pulumi.ResourceOption) (*SchemaValidationOperationSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MitigationAction == nil {
		return nil, errors.New("invalid value for required argument 'MitigationAction'")
	}
	if args.OperationId == nil {
		return nil, errors.New("invalid value for required argument 'OperationId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaValidationOperationSettings
	err := ctx.RegisterResource("cloudflare:index/schemaValidationOperationSettings:SchemaValidationOperationSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaValidationOperationSettings gets an existing SchemaValidationOperationSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaValidationOperationSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaValidationOperationSettingsState, opts ...pulumi.ResourceOption) (*SchemaValidationOperationSettings, error) {
	var resource SchemaValidationOperationSettings
	err := ctx.ReadResource("cloudflare:index/schemaValidationOperationSettings:SchemaValidationOperationSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaValidationOperationSettings resources.
type schemaValidationOperationSettingsState struct {
	// When set, this applies a mitigation action to this operation
	//
	//   - `"log"` - log request when request does not conform to schema for this operation
	//   - `"block"` - deny access to the site when request does not conform to schema for this operation
	//   - `"none"` - will skip mitigation for this operation
	//   - `null` - clears any mitigation action
	//     Available values: "log", "block", "none".
	MitigationAction *string `pulumi:"mitigationAction"`
	// UUID.
	OperationId *string `pulumi:"operationId"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type SchemaValidationOperationSettingsState struct {
	// When set, this applies a mitigation action to this operation
	//
	//   - `"log"` - log request when request does not conform to schema for this operation
	//   - `"block"` - deny access to the site when request does not conform to schema for this operation
	//   - `"none"` - will skip mitigation for this operation
	//   - `null` - clears any mitigation action
	//     Available values: "log", "block", "none".
	MitigationAction pulumi.StringPtrInput
	// UUID.
	OperationId pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (SchemaValidationOperationSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaValidationOperationSettingsState)(nil)).Elem()
}

type schemaValidationOperationSettingsArgs struct {
	// When set, this applies a mitigation action to this operation
	//
	//   - `"log"` - log request when request does not conform to schema for this operation
	//   - `"block"` - deny access to the site when request does not conform to schema for this operation
	//   - `"none"` - will skip mitigation for this operation
	//   - `null` - clears any mitigation action
	//     Available values: "log", "block", "none".
	MitigationAction string `pulumi:"mitigationAction"`
	// UUID.
	OperationId string `pulumi:"operationId"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a SchemaValidationOperationSettings resource.
type SchemaValidationOperationSettingsArgs struct {
	// When set, this applies a mitigation action to this operation
	//
	//   - `"log"` - log request when request does not conform to schema for this operation
	//   - `"block"` - deny access to the site when request does not conform to schema for this operation
	//   - `"none"` - will skip mitigation for this operation
	//   - `null` - clears any mitigation action
	//     Available values: "log", "block", "none".
	MitigationAction pulumi.StringInput
	// UUID.
	OperationId pulumi.StringInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (SchemaValidationOperationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaValidationOperationSettingsArgs)(nil)).Elem()
}

type SchemaValidationOperationSettingsInput interface {
	pulumi.Input

	ToSchemaValidationOperationSettingsOutput() SchemaValidationOperationSettingsOutput
	ToSchemaValidationOperationSettingsOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsOutput
}

func (*SchemaValidationOperationSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaValidationOperationSettings)(nil)).Elem()
}

func (i *SchemaValidationOperationSettings) ToSchemaValidationOperationSettingsOutput() SchemaValidationOperationSettingsOutput {
	return i.ToSchemaValidationOperationSettingsOutputWithContext(context.Background())
}

func (i *SchemaValidationOperationSettings) ToSchemaValidationOperationSettingsOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationOperationSettingsOutput)
}

// SchemaValidationOperationSettingsArrayInput is an input type that accepts SchemaValidationOperationSettingsArray and SchemaValidationOperationSettingsArrayOutput values.
// You can construct a concrete instance of `SchemaValidationOperationSettingsArrayInput` via:
//
//	SchemaValidationOperationSettingsArray{ SchemaValidationOperationSettingsArgs{...} }
type SchemaValidationOperationSettingsArrayInput interface {
	pulumi.Input

	ToSchemaValidationOperationSettingsArrayOutput() SchemaValidationOperationSettingsArrayOutput
	ToSchemaValidationOperationSettingsArrayOutputWithContext(context.Context) SchemaValidationOperationSettingsArrayOutput
}

type SchemaValidationOperationSettingsArray []SchemaValidationOperationSettingsInput

func (SchemaValidationOperationSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaValidationOperationSettings)(nil)).Elem()
}

func (i SchemaValidationOperationSettingsArray) ToSchemaValidationOperationSettingsArrayOutput() SchemaValidationOperationSettingsArrayOutput {
	return i.ToSchemaValidationOperationSettingsArrayOutputWithContext(context.Background())
}

func (i SchemaValidationOperationSettingsArray) ToSchemaValidationOperationSettingsArrayOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationOperationSettingsArrayOutput)
}

// SchemaValidationOperationSettingsMapInput is an input type that accepts SchemaValidationOperationSettingsMap and SchemaValidationOperationSettingsMapOutput values.
// You can construct a concrete instance of `SchemaValidationOperationSettingsMapInput` via:
//
//	SchemaValidationOperationSettingsMap{ "key": SchemaValidationOperationSettingsArgs{...} }
type SchemaValidationOperationSettingsMapInput interface {
	pulumi.Input

	ToSchemaValidationOperationSettingsMapOutput() SchemaValidationOperationSettingsMapOutput
	ToSchemaValidationOperationSettingsMapOutputWithContext(context.Context) SchemaValidationOperationSettingsMapOutput
}

type SchemaValidationOperationSettingsMap map[string]SchemaValidationOperationSettingsInput

func (SchemaValidationOperationSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaValidationOperationSettings)(nil)).Elem()
}

func (i SchemaValidationOperationSettingsMap) ToSchemaValidationOperationSettingsMapOutput() SchemaValidationOperationSettingsMapOutput {
	return i.ToSchemaValidationOperationSettingsMapOutputWithContext(context.Background())
}

func (i SchemaValidationOperationSettingsMap) ToSchemaValidationOperationSettingsMapOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationOperationSettingsMapOutput)
}

type SchemaValidationOperationSettingsOutput struct{ *pulumi.OutputState }

func (SchemaValidationOperationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaValidationOperationSettings)(nil)).Elem()
}

func (o SchemaValidationOperationSettingsOutput) ToSchemaValidationOperationSettingsOutput() SchemaValidationOperationSettingsOutput {
	return o
}

func (o SchemaValidationOperationSettingsOutput) ToSchemaValidationOperationSettingsOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsOutput {
	return o
}

// When set, this applies a mitigation action to this operation
//
//   - `"log"` - log request when request does not conform to schema for this operation
//   - `"block"` - deny access to the site when request does not conform to schema for this operation
//   - `"none"` - will skip mitigation for this operation
//   - `null` - clears any mitigation action
//     Available values: "log", "block", "none".
func (o SchemaValidationOperationSettingsOutput) MitigationAction() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationOperationSettings) pulumi.StringOutput { return v.MitigationAction }).(pulumi.StringOutput)
}

// UUID.
func (o SchemaValidationOperationSettingsOutput) OperationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationOperationSettings) pulumi.StringOutput { return v.OperationId }).(pulumi.StringOutput)
}

// Identifier.
func (o SchemaValidationOperationSettingsOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationOperationSettings) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SchemaValidationOperationSettingsArrayOutput struct{ *pulumi.OutputState }

func (SchemaValidationOperationSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaValidationOperationSettings)(nil)).Elem()
}

func (o SchemaValidationOperationSettingsArrayOutput) ToSchemaValidationOperationSettingsArrayOutput() SchemaValidationOperationSettingsArrayOutput {
	return o
}

func (o SchemaValidationOperationSettingsArrayOutput) ToSchemaValidationOperationSettingsArrayOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsArrayOutput {
	return o
}

func (o SchemaValidationOperationSettingsArrayOutput) Index(i pulumi.IntInput) SchemaValidationOperationSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaValidationOperationSettings {
		return vs[0].([]*SchemaValidationOperationSettings)[vs[1].(int)]
	}).(SchemaValidationOperationSettingsOutput)
}

type SchemaValidationOperationSettingsMapOutput struct{ *pulumi.OutputState }

func (SchemaValidationOperationSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaValidationOperationSettings)(nil)).Elem()
}

func (o SchemaValidationOperationSettingsMapOutput) ToSchemaValidationOperationSettingsMapOutput() SchemaValidationOperationSettingsMapOutput {
	return o
}

func (o SchemaValidationOperationSettingsMapOutput) ToSchemaValidationOperationSettingsMapOutputWithContext(ctx context.Context) SchemaValidationOperationSettingsMapOutput {
	return o
}

func (o SchemaValidationOperationSettingsMapOutput) MapIndex(k pulumi.StringInput) SchemaValidationOperationSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaValidationOperationSettings {
		return vs[0].(map[string]*SchemaValidationOperationSettings)[vs[1].(string)]
	}).(SchemaValidationOperationSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationOperationSettingsInput)(nil)).Elem(), &SchemaValidationOperationSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationOperationSettingsArrayInput)(nil)).Elem(), SchemaValidationOperationSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationOperationSettingsMapInput)(nil)).Elem(), SchemaValidationOperationSettingsMap{})
	pulumi.RegisterOutputType(SchemaValidationOperationSettingsOutput{})
	pulumi.RegisterOutputType(SchemaValidationOperationSettingsArrayOutput{})
	pulumi.RegisterOutputType(SchemaValidationOperationSettingsMapOutput{})
}
