// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this datasource to lookup a tunnel in an account.
func LookupZeroTrustTunnelCloudflared(ctx *pulumi.Context, args *LookupZeroTrustTunnelCloudflaredArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustTunnelCloudflaredResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustTunnelCloudflaredResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustTunnelCloudflared:getZeroTrustTunnelCloudflared", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustTunnelCloudflared.
type LookupZeroTrustTunnelCloudflaredArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// If true, only include deleted tunnels. If false, exclude deleted tunnels. If empty, all tunnels will be included. **Modifying this attribute will force creation of a new resource.**
	IsDeleted *bool `pulumi:"isDeleted"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
}

// A collection of values returned by getZeroTrustTunnelCloudflared.
type LookupZeroTrustTunnelCloudflaredResult struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// ID of the tunnel.
	Id string `pulumi:"id"`
	// If true, only include deleted tunnels. If false, exclude deleted tunnels. If empty, all tunnels will be included. **Modifying this attribute will force creation of a new resource.**
	IsDeleted *bool `pulumi:"isDeleted"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
	// Whether the tunnel can be configured remotely from the Zero Trust dashboard.
	RemoteConfig bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Available values: `inactive`, `degraded`, `healthy`, `down`.
	Status string `pulumi:"status"`
	// The type of the tunnel. Available values: `cfdTunnel`, `warpConnector`.
	TunnelType string `pulumi:"tunnelType"`
}

func LookupZeroTrustTunnelCloudflaredOutput(ctx *pulumi.Context, args LookupZeroTrustTunnelCloudflaredOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustTunnelCloudflaredResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustTunnelCloudflaredResultOutput, error) {
			args := v.(LookupZeroTrustTunnelCloudflaredArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupZeroTrustTunnelCloudflaredResult
			secret, err := ctx.InvokePackageRaw("cloudflare:index/getZeroTrustTunnelCloudflared:getZeroTrustTunnelCloudflared", args, &rv, "", opts...)
			if err != nil {
				return LookupZeroTrustTunnelCloudflaredResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupZeroTrustTunnelCloudflaredResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupZeroTrustTunnelCloudflaredResultOutput), nil
			}
			return output, nil
		}).(LookupZeroTrustTunnelCloudflaredResultOutput)
}

// A collection of arguments for invoking getZeroTrustTunnelCloudflared.
type LookupZeroTrustTunnelCloudflaredOutputArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// If true, only include deleted tunnels. If false, exclude deleted tunnels. If empty, all tunnels will be included. **Modifying this attribute will force creation of a new resource.**
	IsDeleted pulumi.BoolPtrInput `pulumi:"isDeleted"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupZeroTrustTunnelCloudflaredOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelCloudflaredArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustTunnelCloudflared.
type LookupZeroTrustTunnelCloudflaredResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustTunnelCloudflaredResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelCloudflaredResult)(nil)).Elem()
}

func (o LookupZeroTrustTunnelCloudflaredResultOutput) ToLookupZeroTrustTunnelCloudflaredResultOutput() LookupZeroTrustTunnelCloudflaredResultOutput {
	return o
}

func (o LookupZeroTrustTunnelCloudflaredResultOutput) ToLookupZeroTrustTunnelCloudflaredResultOutputWithContext(ctx context.Context) LookupZeroTrustTunnelCloudflaredResultOutput {
	return o
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o LookupZeroTrustTunnelCloudflaredResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// ID of the tunnel.
func (o LookupZeroTrustTunnelCloudflaredResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) string { return v.Id }).(pulumi.StringOutput)
}

// If true, only include deleted tunnels. If false, exclude deleted tunnels. If empty, all tunnels will be included. **Modifying this attribute will force creation of a new resource.**
func (o LookupZeroTrustTunnelCloudflaredResultOutput) IsDeleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) *bool { return v.IsDeleted }).(pulumi.BoolPtrOutput)
}

// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
func (o LookupZeroTrustTunnelCloudflaredResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the tunnel can be configured remotely from the Zero Trust dashboard.
func (o LookupZeroTrustTunnelCloudflaredResultOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) bool { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Available values: `inactive`, `degraded`, `healthy`, `down`.
func (o LookupZeroTrustTunnelCloudflaredResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the tunnel. Available values: `cfdTunnel`, `warpConnector`.
func (o LookupZeroTrustTunnelCloudflaredResultOutput) TunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelCloudflaredResult) string { return v.TunnelType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustTunnelCloudflaredResultOutput{})
}
