// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupCustomHostnames(ctx, &cloudflare.LookupCustomHostnamesArgs{
//				ZoneId:    "023e105f4ecef8ad9ca31a8372d0c353",
//				Id:        pulumi.StringRef("0d89c70d-ad9f-4843-b99f-6cc0252067e9"),
//				Direction: pulumi.StringRef("desc"),
//				Hostname:  pulumi.StringRef("app.example.com"),
//				Ssl:       pulumi.Float64Ref(0),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCustomHostnames(ctx *pulumi.Context, args *LookupCustomHostnamesArgs, opts ...pulumi.InvokeOption) (*LookupCustomHostnamesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomHostnamesResult
	err := ctx.Invoke("cloudflare:index/getCustomHostnames:getCustomHostnames", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomHostnames.
type LookupCustomHostnamesArgs struct {
	// Direction to order hostnames.
	// Available values: "asc", "desc".
	Direction *string `pulumi:"direction"`
	// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
	Hostname *string `pulumi:"hostname"`
	// Hostname ID to match against. This ID was generated and returned during the initial customHostname creation. This parameter cannot be used with the 'hostname' parameter.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Field to order hostnames by.
	// Available values: "ssl", "sslStatus".
	Order *string `pulumi:"order"`
	// Whether to filter hostnames based on if they have SSL enabled.
	// Available values: 0, 1.
	Ssl *float64 `pulumi:"ssl"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCustomHostnames.
type LookupCustomHostnamesResult struct {
	// Direction to order hostnames.
	// Available values: "asc", "desc".
	Direction *string `pulumi:"direction"`
	// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
	Hostname *string `pulumi:"hostname"`
	// Hostname ID to match against. This ID was generated and returned during the initial customHostname creation. This parameter cannot be used with the 'hostname' parameter.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Field to order hostnames by.
	// Available values: "ssl", "sslStatus".
	Order string `pulumi:"order"`
	// The items returned by the data source
	Results []GetCustomHostnamesResult `pulumi:"results"`
	// Whether to filter hostnames based on if they have SSL enabled.
	// Available values: 0, 1.
	Ssl *float64 `pulumi:"ssl"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupCustomHostnamesOutput(ctx *pulumi.Context, args LookupCustomHostnamesOutputArgs, opts ...pulumi.InvokeOption) LookupCustomHostnamesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCustomHostnamesResultOutput, error) {
			args := v.(LookupCustomHostnamesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getCustomHostnames:getCustomHostnames", args, LookupCustomHostnamesResultOutput{}, options).(LookupCustomHostnamesResultOutput), nil
		}).(LookupCustomHostnamesResultOutput)
}

// A collection of arguments for invoking getCustomHostnames.
type LookupCustomHostnamesOutputArgs struct {
	// Direction to order hostnames.
	// Available values: "asc", "desc".
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Hostname ID to match against. This ID was generated and returned during the initial customHostname creation. This parameter cannot be used with the 'hostname' parameter.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// Field to order hostnames by.
	// Available values: "ssl", "sslStatus".
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Whether to filter hostnames based on if they have SSL enabled.
	// Available values: 0, 1.
	Ssl pulumi.Float64PtrInput `pulumi:"ssl"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupCustomHostnamesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomHostnamesArgs)(nil)).Elem()
}

// A collection of values returned by getCustomHostnames.
type LookupCustomHostnamesResultOutput struct{ *pulumi.OutputState }

func (LookupCustomHostnamesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomHostnamesResult)(nil)).Elem()
}

func (o LookupCustomHostnamesResultOutput) ToLookupCustomHostnamesResultOutput() LookupCustomHostnamesResultOutput {
	return o
}

func (o LookupCustomHostnamesResultOutput) ToLookupCustomHostnamesResultOutputWithContext(ctx context.Context) LookupCustomHostnamesResultOutput {
	return o
}

// Direction to order hostnames.
// Available values: "asc", "desc".
func (o LookupCustomHostnamesResultOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// Fully qualified domain name to match against. This parameter cannot be used with the 'id' parameter.
func (o LookupCustomHostnamesResultOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Hostname ID to match against. This ID was generated and returned during the initial customHostname creation. This parameter cannot be used with the 'hostname' parameter.
func (o LookupCustomHostnamesResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Max items to fetch, default: 1000
func (o LookupCustomHostnamesResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// Field to order hostnames by.
// Available values: "ssl", "sslStatus".
func (o LookupCustomHostnamesResultOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) string { return v.Order }).(pulumi.StringOutput)
}

// The items returned by the data source
func (o LookupCustomHostnamesResultOutput) Results() GetCustomHostnamesResultArrayOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) []GetCustomHostnamesResult { return v.Results }).(GetCustomHostnamesResultArrayOutput)
}

// Whether to filter hostnames based on if they have SSL enabled.
// Available values: 0, 1.
func (o LookupCustomHostnamesResultOutput) Ssl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) *float64 { return v.Ssl }).(pulumi.Float64PtrOutput)
}

// Identifier.
func (o LookupCustomHostnamesResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnamesResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCustomHostnamesResultOutput{})
}
