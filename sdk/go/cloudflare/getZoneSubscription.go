// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZoneSubscription(ctx, &cloudflare.LookupZoneSubscriptionArgs{
//				ZoneId: "506e3185e9c882d175a2d0cb0093d9f2",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZoneSubscription(ctx *pulumi.Context, args *LookupZoneSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupZoneSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneSubscriptionResult
	err := ctx.Invoke("cloudflare:index/getZoneSubscription:getZoneSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneSubscription.
type LookupZoneSubscriptionArgs struct {
	// Subscription identifier tag.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneSubscription.
type LookupZoneSubscriptionResult struct {
	// The monetary unit in which pricing information is displayed.
	Currency string `pulumi:"currency"`
	// The end of the current period and also when the next billing is due.
	CurrentPeriodEnd string `pulumi:"currentPeriodEnd"`
	// When the current billing period started. May match initial*period*start if this is the first period.
	CurrentPeriodStart string `pulumi:"currentPeriodStart"`
	// How often the subscription is renewed automatically.
	// Available values: "weekly", "monthly", "quarterly", "yearly".
	Frequency string `pulumi:"frequency"`
	// Subscription identifier tag.
	Id string `pulumi:"id"`
	// The price of the subscription that will be billed, in US dollars.
	Price float64 `pulumi:"price"`
	// The rate plan applied to the subscription.
	RatePlan GetZoneSubscriptionRatePlan `pulumi:"ratePlan"`
	// The state that the subscription is in.
	// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
	State string `pulumi:"state"`
	// Subscription identifier tag.
	ZoneId string `pulumi:"zoneId"`
}

func LookupZoneSubscriptionOutput(ctx *pulumi.Context, args LookupZoneSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupZoneSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZoneSubscriptionResultOutput, error) {
			args := v.(LookupZoneSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZoneSubscription:getZoneSubscription", args, LookupZoneSubscriptionResultOutput{}, options).(LookupZoneSubscriptionResultOutput), nil
		}).(LookupZoneSubscriptionResultOutput)
}

// A collection of arguments for invoking getZoneSubscription.
type LookupZoneSubscriptionOutputArgs struct {
	// Subscription identifier tag.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getZoneSubscription.
type LookupZoneSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupZoneSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneSubscriptionResult)(nil)).Elem()
}

func (o LookupZoneSubscriptionResultOutput) ToLookupZoneSubscriptionResultOutput() LookupZoneSubscriptionResultOutput {
	return o
}

func (o LookupZoneSubscriptionResultOutput) ToLookupZoneSubscriptionResultOutputWithContext(ctx context.Context) LookupZoneSubscriptionResultOutput {
	return o
}

// The monetary unit in which pricing information is displayed.
func (o LookupZoneSubscriptionResultOutput) Currency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.Currency }).(pulumi.StringOutput)
}

// The end of the current period and also when the next billing is due.
func (o LookupZoneSubscriptionResultOutput) CurrentPeriodEnd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.CurrentPeriodEnd }).(pulumi.StringOutput)
}

// When the current billing period started. May match initial*period*start if this is the first period.
func (o LookupZoneSubscriptionResultOutput) CurrentPeriodStart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.CurrentPeriodStart }).(pulumi.StringOutput)
}

// How often the subscription is renewed automatically.
// Available values: "weekly", "monthly", "quarterly", "yearly".
func (o LookupZoneSubscriptionResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// Subscription identifier tag.
func (o LookupZoneSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The price of the subscription that will be billed, in US dollars.
func (o LookupZoneSubscriptionResultOutput) Price() pulumi.Float64Output {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) float64 { return v.Price }).(pulumi.Float64Output)
}

// The rate plan applied to the subscription.
func (o LookupZoneSubscriptionResultOutput) RatePlan() GetZoneSubscriptionRatePlanOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) GetZoneSubscriptionRatePlan { return v.RatePlan }).(GetZoneSubscriptionRatePlanOutput)
}

// The state that the subscription is in.
// Available values: "Trial", "Provisioned", "Paid", "AwaitingPayment", "Cancelled", "Failed", "Expired".
func (o LookupZoneSubscriptionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.State }).(pulumi.StringOutput)
}

// Subscription identifier tag.
func (o LookupZoneSubscriptionResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneSubscriptionResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneSubscriptionResultOutput{})
}
