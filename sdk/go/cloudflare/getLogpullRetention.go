// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupLogpullRetention(ctx, &cloudflare.LookupLogpullRetentionArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLogpullRetention(ctx *pulumi.Context, args *LookupLogpullRetentionArgs, opts ...pulumi.InvokeOption) (*LookupLogpullRetentionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogpullRetentionResult
	err := ctx.Invoke("cloudflare:index/getLogpullRetention:getLogpullRetention", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogpullRetention.
type LookupLogpullRetentionArgs struct {
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getLogpullRetention.
type LookupLogpullRetentionResult struct {
	// The log retention flag for Logpull API.
	Flag bool `pulumi:"flag"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupLogpullRetentionOutput(ctx *pulumi.Context, args LookupLogpullRetentionOutputArgs, opts ...pulumi.InvokeOption) LookupLogpullRetentionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLogpullRetentionResultOutput, error) {
			args := v.(LookupLogpullRetentionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getLogpullRetention:getLogpullRetention", args, LookupLogpullRetentionResultOutput{}, options).(LookupLogpullRetentionResultOutput), nil
		}).(LookupLogpullRetentionResultOutput)
}

// A collection of arguments for invoking getLogpullRetention.
type LookupLogpullRetentionOutputArgs struct {
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupLogpullRetentionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogpullRetentionArgs)(nil)).Elem()
}

// A collection of values returned by getLogpullRetention.
type LookupLogpullRetentionResultOutput struct{ *pulumi.OutputState }

func (LookupLogpullRetentionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogpullRetentionResult)(nil)).Elem()
}

func (o LookupLogpullRetentionResultOutput) ToLookupLogpullRetentionResultOutput() LookupLogpullRetentionResultOutput {
	return o
}

func (o LookupLogpullRetentionResultOutput) ToLookupLogpullRetentionResultOutputWithContext(ctx context.Context) LookupLogpullRetentionResultOutput {
	return o
}

// The log retention flag for Logpull API.
func (o LookupLogpullRetentionResultOutput) Flag() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLogpullRetentionResult) bool { return v.Flag }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLogpullRetentionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpullRetentionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupLogpullRetentionResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpullRetentionResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogpullRetentionResultOutput{})
}
