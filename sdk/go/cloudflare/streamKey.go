// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStreamKey(ctx, "example_stream_key", &cloudflare.StreamKeyArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/streamKey:StreamKey example '<account_id>'
// ```
type StreamKey struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The date and time a signing key was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// The signing key in JWK format.
	Jwk pulumi.StringOutput `pulumi:"jwk"`
	// The signing key in PEM format.
	Pem pulumi.StringOutput `pulumi:"pem"`
}

// NewStreamKey registers a new resource with the given unique name, arguments, and options.
func NewStreamKey(ctx *pulumi.Context,
	name string, args *StreamKeyArgs, opts ...pulumi.ResourceOption) (*StreamKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"jwk",
		"pem",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamKey
	err := ctx.RegisterResource("cloudflare:index/streamKey:StreamKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamKey gets an existing StreamKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamKeyState, opts ...pulumi.ResourceOption) (*StreamKey, error) {
	var resource StreamKey
	err := ctx.ReadResource("cloudflare:index/streamKey:StreamKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamKey resources.
type streamKeyState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// The date and time a signing key was created.
	Created *string `pulumi:"created"`
	// The signing key in JWK format.
	Jwk *string `pulumi:"jwk"`
	// The signing key in PEM format.
	Pem *string `pulumi:"pem"`
}

type StreamKeyState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// The date and time a signing key was created.
	Created pulumi.StringPtrInput
	// The signing key in JWK format.
	Jwk pulumi.StringPtrInput
	// The signing key in PEM format.
	Pem pulumi.StringPtrInput
}

func (StreamKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamKeyState)(nil)).Elem()
}

type streamKeyArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
}

// The set of arguments for constructing a StreamKey resource.
type StreamKeyArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
}

func (StreamKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamKeyArgs)(nil)).Elem()
}

type StreamKeyInput interface {
	pulumi.Input

	ToStreamKeyOutput() StreamKeyOutput
	ToStreamKeyOutputWithContext(ctx context.Context) StreamKeyOutput
}

func (*StreamKey) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamKey)(nil)).Elem()
}

func (i *StreamKey) ToStreamKeyOutput() StreamKeyOutput {
	return i.ToStreamKeyOutputWithContext(context.Background())
}

func (i *StreamKey) ToStreamKeyOutputWithContext(ctx context.Context) StreamKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyOutput)
}

// StreamKeyArrayInput is an input type that accepts StreamKeyArray and StreamKeyArrayOutput values.
// You can construct a concrete instance of `StreamKeyArrayInput` via:
//
//	StreamKeyArray{ StreamKeyArgs{...} }
type StreamKeyArrayInput interface {
	pulumi.Input

	ToStreamKeyArrayOutput() StreamKeyArrayOutput
	ToStreamKeyArrayOutputWithContext(context.Context) StreamKeyArrayOutput
}

type StreamKeyArray []StreamKeyInput

func (StreamKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamKey)(nil)).Elem()
}

func (i StreamKeyArray) ToStreamKeyArrayOutput() StreamKeyArrayOutput {
	return i.ToStreamKeyArrayOutputWithContext(context.Background())
}

func (i StreamKeyArray) ToStreamKeyArrayOutputWithContext(ctx context.Context) StreamKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyArrayOutput)
}

// StreamKeyMapInput is an input type that accepts StreamKeyMap and StreamKeyMapOutput values.
// You can construct a concrete instance of `StreamKeyMapInput` via:
//
//	StreamKeyMap{ "key": StreamKeyArgs{...} }
type StreamKeyMapInput interface {
	pulumi.Input

	ToStreamKeyMapOutput() StreamKeyMapOutput
	ToStreamKeyMapOutputWithContext(context.Context) StreamKeyMapOutput
}

type StreamKeyMap map[string]StreamKeyInput

func (StreamKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamKey)(nil)).Elem()
}

func (i StreamKeyMap) ToStreamKeyMapOutput() StreamKeyMapOutput {
	return i.ToStreamKeyMapOutputWithContext(context.Background())
}

func (i StreamKeyMap) ToStreamKeyMapOutputWithContext(ctx context.Context) StreamKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamKeyMapOutput)
}

type StreamKeyOutput struct{ *pulumi.OutputState }

func (StreamKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamKey)(nil)).Elem()
}

func (o StreamKeyOutput) ToStreamKeyOutput() StreamKeyOutput {
	return o
}

func (o StreamKeyOutput) ToStreamKeyOutputWithContext(ctx context.Context) StreamKeyOutput {
	return o
}

// Identifier.
func (o StreamKeyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamKey) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The date and time a signing key was created.
func (o StreamKeyOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamKey) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The signing key in JWK format.
func (o StreamKeyOutput) Jwk() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamKey) pulumi.StringOutput { return v.Jwk }).(pulumi.StringOutput)
}

// The signing key in PEM format.
func (o StreamKeyOutput) Pem() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamKey) pulumi.StringOutput { return v.Pem }).(pulumi.StringOutput)
}

type StreamKeyArrayOutput struct{ *pulumi.OutputState }

func (StreamKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamKey)(nil)).Elem()
}

func (o StreamKeyArrayOutput) ToStreamKeyArrayOutput() StreamKeyArrayOutput {
	return o
}

func (o StreamKeyArrayOutput) ToStreamKeyArrayOutputWithContext(ctx context.Context) StreamKeyArrayOutput {
	return o
}

func (o StreamKeyArrayOutput) Index(i pulumi.IntInput) StreamKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamKey {
		return vs[0].([]*StreamKey)[vs[1].(int)]
	}).(StreamKeyOutput)
}

type StreamKeyMapOutput struct{ *pulumi.OutputState }

func (StreamKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamKey)(nil)).Elem()
}

func (o StreamKeyMapOutput) ToStreamKeyMapOutput() StreamKeyMapOutput {
	return o
}

func (o StreamKeyMapOutput) ToStreamKeyMapOutputWithContext(ctx context.Context) StreamKeyMapOutput {
	return o
}

func (o StreamKeyMapOutput) MapIndex(k pulumi.StringInput) StreamKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamKey {
		return vs[0].(map[string]*StreamKey)[vs[1].(string)]
	}).(StreamKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamKeyInput)(nil)).Elem(), &StreamKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamKeyArrayInput)(nil)).Elem(), StreamKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamKeyMapInput)(nil)).Elem(), StreamKeyMap{})
	pulumi.RegisterOutputType(StreamKeyOutput{})
	pulumi.RegisterOutputType(StreamKeyArrayOutput{})
	pulumi.RegisterOutputType(StreamKeyMapOutput{})
}
