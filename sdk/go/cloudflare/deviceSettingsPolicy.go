// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Device Settings Policy resource. Device policies configure settings applied to WARP devices.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDeviceSettingsPolicy(ctx, "developerWarpPolicy", &cloudflare.DeviceSettingsPolicyArgs{
//				AccountId:           pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				AllowModeSwitch:     pulumi.Bool(true),
//				AllowUpdates:        pulumi.Bool(true),
//				AllowedToLeave:      pulumi.Bool(true),
//				AutoConnect:         pulumi.Int(0),
//				CaptivePortal:       pulumi.Int(5),
//				Default:             pulumi.Bool(false),
//				DisableAutoFallback: pulumi.Bool(true),
//				Enabled:             pulumi.Bool(true),
//				ExcludeOfficeIps:    pulumi.Bool(false),
//				Match:               pulumi.String("any(identity.groups.name[*] in {\"Developers\"})"),
//				Name:                pulumi.String("Developers WARP settings policy"),
//				Precedence:          pulumi.Int(10),
//				ServiceModeV2Mode:   pulumi.String("warp"),
//				ServiceModeV2Port:   pulumi.Int(3000),
//				SupportUrl:          pulumi.String("https://cloudflare.com"),
//				SwitchLocked:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For default device settings policies you must use "default" as the policy ID.
//
// ```sh
//
//	$ pulumi import cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy example <account_id>/<device_policy_id>
//
// ```
type DeviceSettingsPolicy struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrOutput `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrOutput `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrOutput `pulumi:"allowedToLeave"`
	// The amount of time in minutes to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrOutput `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrOutput `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrOutput `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrOutput `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrOutput `pulumi:"match"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrOutput `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrOutput `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrOutput `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrOutput `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrOutput `pulumi:"switchLocked"`
}

// NewDeviceSettingsPolicy registers a new resource with the given unique name, arguments, and options.
func NewDeviceSettingsPolicy(ctx *pulumi.Context,
	name string, args *DeviceSettingsPolicyArgs, opts ...pulumi.ResourceOption) (*DeviceSettingsPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource DeviceSettingsPolicy
	err := ctx.RegisterResource("cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceSettingsPolicy gets an existing DeviceSettingsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceSettingsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceSettingsPolicyState, opts ...pulumi.ResourceOption) (*DeviceSettingsPolicy, error) {
	var resource DeviceSettingsPolicy
	err := ctx.ReadResource("cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceSettingsPolicy resources.
type deviceSettingsPolicyState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in minutes to reconnect after having been disabled.
	AutoConnect *int `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal *int `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default *bool `pulumi:"default"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match *string `pulumi:"match"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence *int `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode *string `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port *int `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl *string `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked *bool `pulumi:"switchLocked"`
}

type DeviceSettingsPolicyState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in minutes to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrInput
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrInput
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrInput
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrInput
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrInput
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrInput
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrInput
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrInput
}

func (DeviceSettingsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceSettingsPolicyState)(nil)).Elem()
}

type deviceSettingsPolicyArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in minutes to reconnect after having been disabled.
	AutoConnect *int `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal *int `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default *bool `pulumi:"default"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match *string `pulumi:"match"`
	// Name of the policy.
	Name string `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence *int `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode *string `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port *int `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl *string `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked *bool `pulumi:"switchLocked"`
}

// The set of arguments for constructing a DeviceSettingsPolicy resource.
type DeviceSettingsPolicyArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in minutes to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrInput
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrInput
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrInput
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringInput
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrInput
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrInput
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrInput
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrInput
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrInput
}

func (DeviceSettingsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceSettingsPolicyArgs)(nil)).Elem()
}

type DeviceSettingsPolicyInput interface {
	pulumi.Input

	ToDeviceSettingsPolicyOutput() DeviceSettingsPolicyOutput
	ToDeviceSettingsPolicyOutputWithContext(ctx context.Context) DeviceSettingsPolicyOutput
}

func (*DeviceSettingsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSettingsPolicy)(nil)).Elem()
}

func (i *DeviceSettingsPolicy) ToDeviceSettingsPolicyOutput() DeviceSettingsPolicyOutput {
	return i.ToDeviceSettingsPolicyOutputWithContext(context.Background())
}

func (i *DeviceSettingsPolicy) ToDeviceSettingsPolicyOutputWithContext(ctx context.Context) DeviceSettingsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSettingsPolicyOutput)
}

// DeviceSettingsPolicyArrayInput is an input type that accepts DeviceSettingsPolicyArray and DeviceSettingsPolicyArrayOutput values.
// You can construct a concrete instance of `DeviceSettingsPolicyArrayInput` via:
//
//	DeviceSettingsPolicyArray{ DeviceSettingsPolicyArgs{...} }
type DeviceSettingsPolicyArrayInput interface {
	pulumi.Input

	ToDeviceSettingsPolicyArrayOutput() DeviceSettingsPolicyArrayOutput
	ToDeviceSettingsPolicyArrayOutputWithContext(context.Context) DeviceSettingsPolicyArrayOutput
}

type DeviceSettingsPolicyArray []DeviceSettingsPolicyInput

func (DeviceSettingsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceSettingsPolicy)(nil)).Elem()
}

func (i DeviceSettingsPolicyArray) ToDeviceSettingsPolicyArrayOutput() DeviceSettingsPolicyArrayOutput {
	return i.ToDeviceSettingsPolicyArrayOutputWithContext(context.Background())
}

func (i DeviceSettingsPolicyArray) ToDeviceSettingsPolicyArrayOutputWithContext(ctx context.Context) DeviceSettingsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSettingsPolicyArrayOutput)
}

// DeviceSettingsPolicyMapInput is an input type that accepts DeviceSettingsPolicyMap and DeviceSettingsPolicyMapOutput values.
// You can construct a concrete instance of `DeviceSettingsPolicyMapInput` via:
//
//	DeviceSettingsPolicyMap{ "key": DeviceSettingsPolicyArgs{...} }
type DeviceSettingsPolicyMapInput interface {
	pulumi.Input

	ToDeviceSettingsPolicyMapOutput() DeviceSettingsPolicyMapOutput
	ToDeviceSettingsPolicyMapOutputWithContext(context.Context) DeviceSettingsPolicyMapOutput
}

type DeviceSettingsPolicyMap map[string]DeviceSettingsPolicyInput

func (DeviceSettingsPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceSettingsPolicy)(nil)).Elem()
}

func (i DeviceSettingsPolicyMap) ToDeviceSettingsPolicyMapOutput() DeviceSettingsPolicyMapOutput {
	return i.ToDeviceSettingsPolicyMapOutputWithContext(context.Background())
}

func (i DeviceSettingsPolicyMap) ToDeviceSettingsPolicyMapOutputWithContext(ctx context.Context) DeviceSettingsPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceSettingsPolicyMapOutput)
}

type DeviceSettingsPolicyOutput struct{ *pulumi.OutputState }

func (DeviceSettingsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceSettingsPolicy)(nil)).Elem()
}

func (o DeviceSettingsPolicyOutput) ToDeviceSettingsPolicyOutput() DeviceSettingsPolicyOutput {
	return o
}

func (o DeviceSettingsPolicyOutput) ToDeviceSettingsPolicyOutputWithContext(ctx context.Context) DeviceSettingsPolicyOutput {
	return o
}

// The account identifier to target for the resource.
func (o DeviceSettingsPolicyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether to allow mode switch for this policy.
func (o DeviceSettingsPolicyOutput) AllowModeSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.AllowModeSwitch }).(pulumi.BoolPtrOutput)
}

// Whether to allow updates under this policy.
func (o DeviceSettingsPolicyOutput) AllowUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.AllowUpdates }).(pulumi.BoolPtrOutput)
}

// Whether to allow devices to leave the organization. Defaults to `true`.
func (o DeviceSettingsPolicyOutput) AllowedToLeave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.AllowedToLeave }).(pulumi.BoolPtrOutput)
}

// The amount of time in minutes to reconnect after having been disabled.
func (o DeviceSettingsPolicyOutput) AutoConnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.IntPtrOutput { return v.AutoConnect }).(pulumi.IntPtrOutput)
}

// The captive portal value for this policy. Defaults to `180`.
func (o DeviceSettingsPolicyOutput) CaptivePortal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.IntPtrOutput { return v.CaptivePortal }).(pulumi.IntPtrOutput)
}

// Whether the policy refers to the default account policy.
func (o DeviceSettingsPolicyOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Whether to disable auto fallback for this policy.
func (o DeviceSettingsPolicyOutput) DisableAutoFallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.DisableAutoFallback }).(pulumi.BoolPtrOutput)
}

// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
func (o DeviceSettingsPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether to add Microsoft IPs to split tunnel exclusions.
func (o DeviceSettingsPolicyOutput) ExcludeOfficeIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.ExcludeOfficeIps }).(pulumi.BoolPtrOutput)
}

// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
func (o DeviceSettingsPolicyOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.StringPtrOutput { return v.Match }).(pulumi.StringPtrOutput)
}

// Name of the policy.
func (o DeviceSettingsPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The precedence of the policy. Lower values indicate higher precedence.
func (o DeviceSettingsPolicyOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.IntPtrOutput { return v.Precedence }).(pulumi.IntPtrOutput)
}

// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
func (o DeviceSettingsPolicyOutput) ServiceModeV2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.StringPtrOutput { return v.ServiceModeV2Mode }).(pulumi.StringPtrOutput)
}

// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
func (o DeviceSettingsPolicyOutput) ServiceModeV2Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.IntPtrOutput { return v.ServiceModeV2Port }).(pulumi.IntPtrOutput)
}

// The support URL that will be opened when sending feedback.
func (o DeviceSettingsPolicyOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.StringPtrOutput { return v.SupportUrl }).(pulumi.StringPtrOutput)
}

// Enablement of the ZT client switch lock.
func (o DeviceSettingsPolicyOutput) SwitchLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceSettingsPolicy) pulumi.BoolPtrOutput { return v.SwitchLocked }).(pulumi.BoolPtrOutput)
}

type DeviceSettingsPolicyArrayOutput struct{ *pulumi.OutputState }

func (DeviceSettingsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceSettingsPolicy)(nil)).Elem()
}

func (o DeviceSettingsPolicyArrayOutput) ToDeviceSettingsPolicyArrayOutput() DeviceSettingsPolicyArrayOutput {
	return o
}

func (o DeviceSettingsPolicyArrayOutput) ToDeviceSettingsPolicyArrayOutputWithContext(ctx context.Context) DeviceSettingsPolicyArrayOutput {
	return o
}

func (o DeviceSettingsPolicyArrayOutput) Index(i pulumi.IntInput) DeviceSettingsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceSettingsPolicy {
		return vs[0].([]*DeviceSettingsPolicy)[vs[1].(int)]
	}).(DeviceSettingsPolicyOutput)
}

type DeviceSettingsPolicyMapOutput struct{ *pulumi.OutputState }

func (DeviceSettingsPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceSettingsPolicy)(nil)).Elem()
}

func (o DeviceSettingsPolicyMapOutput) ToDeviceSettingsPolicyMapOutput() DeviceSettingsPolicyMapOutput {
	return o
}

func (o DeviceSettingsPolicyMapOutput) ToDeviceSettingsPolicyMapOutputWithContext(ctx context.Context) DeviceSettingsPolicyMapOutput {
	return o
}

func (o DeviceSettingsPolicyMapOutput) MapIndex(k pulumi.StringInput) DeviceSettingsPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceSettingsPolicy {
		return vs[0].(map[string]*DeviceSettingsPolicy)[vs[1].(string)]
	}).(DeviceSettingsPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSettingsPolicyInput)(nil)).Elem(), &DeviceSettingsPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSettingsPolicyArrayInput)(nil)).Elem(), DeviceSettingsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceSettingsPolicyMapInput)(nil)).Elem(), DeviceSettingsPolicyMap{})
	pulumi.RegisterOutputType(DeviceSettingsPolicyOutput{})
	pulumi.RegisterOutputType(DeviceSettingsPolicyArrayOutput{})
	pulumi.RegisterOutputType(DeviceSettingsPolicyMapOutput{})
}
