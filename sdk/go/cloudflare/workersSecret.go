// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkersForPlatformsScriptSecret(ctx, "example_workers_for_platforms_script_secret", &cloudflare.WorkersForPlatformsScriptSecretArgs{
//				AccountId:         pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				DispatchNamespace: pulumi.String("my-dispatch-namespace"),
//				ScriptName:        pulumi.String("this-is_my_script-01"),
//				Name:              pulumi.String("MY_SECRET"),
//				Text:              pulumi.String("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"),
//				Type:              pulumi.String("secret_text"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersSecret:WorkersSecret example '<account_id>/<dispatch_namespace>/<script_name>/<secret_name>'
// ```
//
// Deprecated: cloudflare.index/workerssecret.WorkersSecret has been deprecated in favor of cloudflare.index/workersforplatformsscriptsecret.WorkersForPlatformsScriptSecret
type WorkersSecret struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringOutput `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// The value of the secret.
	Text pulumi.StringPtrOutput `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewWorkersSecret registers a new resource with the given unique name, arguments, and options.
func NewWorkersSecret(ctx *pulumi.Context,
	name string, args *WorkersSecretArgs, opts ...pulumi.ResourceOption) (*WorkersSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.DispatchNamespace == nil {
		return nil, errors.New("invalid value for required argument 'DispatchNamespace'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/workersSecret:WorkersSecret"),
		},
	})
	opts = append(opts, aliases)
	if args.Text != nil {
		args.Text = pulumi.ToSecret(args.Text).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"text",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersSecret
	err := ctx.RegisterResource("cloudflare:index/workersSecret:WorkersSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersSecret gets an existing WorkersSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersSecretState, opts ...pulumi.ResourceOption) (*WorkersSecret, error) {
	var resource WorkersSecret
	err := ctx.ReadResource("cloudflare:index/workersSecret:WorkersSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersSecret resources.
type workersSecretState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace *string `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name *string `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `pulumi:"scriptName"`
	// The value of the secret.
	Text *string `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type *string `pulumi:"type"`
}

type WorkersSecretState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringPtrInput
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringPtrInput
	// The value of the secret.
	Text pulumi.StringPtrInput
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrInput
}

func (WorkersSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersSecretState)(nil)).Elem()
}

type workersSecretArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace string `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name string `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
	// The value of the secret.
	Text *string `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a WorkersSecret resource.
type WorkersSecretArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringInput
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
	// The value of the secret.
	Text pulumi.StringPtrInput
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrInput
}

func (WorkersSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersSecretArgs)(nil)).Elem()
}

type WorkersSecretInput interface {
	pulumi.Input

	ToWorkersSecretOutput() WorkersSecretOutput
	ToWorkersSecretOutputWithContext(ctx context.Context) WorkersSecretOutput
}

func (*WorkersSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersSecret)(nil)).Elem()
}

func (i *WorkersSecret) ToWorkersSecretOutput() WorkersSecretOutput {
	return i.ToWorkersSecretOutputWithContext(context.Background())
}

func (i *WorkersSecret) ToWorkersSecretOutputWithContext(ctx context.Context) WorkersSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersSecretOutput)
}

// WorkersSecretArrayInput is an input type that accepts WorkersSecretArray and WorkersSecretArrayOutput values.
// You can construct a concrete instance of `WorkersSecretArrayInput` via:
//
//	WorkersSecretArray{ WorkersSecretArgs{...} }
type WorkersSecretArrayInput interface {
	pulumi.Input

	ToWorkersSecretArrayOutput() WorkersSecretArrayOutput
	ToWorkersSecretArrayOutputWithContext(context.Context) WorkersSecretArrayOutput
}

type WorkersSecretArray []WorkersSecretInput

func (WorkersSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersSecret)(nil)).Elem()
}

func (i WorkersSecretArray) ToWorkersSecretArrayOutput() WorkersSecretArrayOutput {
	return i.ToWorkersSecretArrayOutputWithContext(context.Background())
}

func (i WorkersSecretArray) ToWorkersSecretArrayOutputWithContext(ctx context.Context) WorkersSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersSecretArrayOutput)
}

// WorkersSecretMapInput is an input type that accepts WorkersSecretMap and WorkersSecretMapOutput values.
// You can construct a concrete instance of `WorkersSecretMapInput` via:
//
//	WorkersSecretMap{ "key": WorkersSecretArgs{...} }
type WorkersSecretMapInput interface {
	pulumi.Input

	ToWorkersSecretMapOutput() WorkersSecretMapOutput
	ToWorkersSecretMapOutputWithContext(context.Context) WorkersSecretMapOutput
}

type WorkersSecretMap map[string]WorkersSecretInput

func (WorkersSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersSecret)(nil)).Elem()
}

func (i WorkersSecretMap) ToWorkersSecretMapOutput() WorkersSecretMapOutput {
	return i.ToWorkersSecretMapOutputWithContext(context.Background())
}

func (i WorkersSecretMap) ToWorkersSecretMapOutputWithContext(ctx context.Context) WorkersSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersSecretMapOutput)
}

type WorkersSecretOutput struct{ *pulumi.OutputState }

func (WorkersSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersSecret)(nil)).Elem()
}

func (o WorkersSecretOutput) ToWorkersSecretOutput() WorkersSecretOutput {
	return o
}

func (o WorkersSecretOutput) ToWorkersSecretOutputWithContext(ctx context.Context) WorkersSecretOutput {
	return o
}

// Identifier.
func (o WorkersSecretOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the Workers for Platforms dispatch namespace.
func (o WorkersSecretOutput) DispatchNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringOutput { return v.DispatchNamespace }).(pulumi.StringOutput)
}

// The name of this secret, this is what will be used to access it inside the Worker.
func (o WorkersSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkersSecretOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

// The value of the secret.
func (o WorkersSecretOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringPtrOutput { return v.Text }).(pulumi.StringPtrOutput)
}

// The type of secret to put.
// Available values: "secretText".
func (o WorkersSecretOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersSecret) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type WorkersSecretArrayOutput struct{ *pulumi.OutputState }

func (WorkersSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersSecret)(nil)).Elem()
}

func (o WorkersSecretArrayOutput) ToWorkersSecretArrayOutput() WorkersSecretArrayOutput {
	return o
}

func (o WorkersSecretArrayOutput) ToWorkersSecretArrayOutputWithContext(ctx context.Context) WorkersSecretArrayOutput {
	return o
}

func (o WorkersSecretArrayOutput) Index(i pulumi.IntInput) WorkersSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersSecret {
		return vs[0].([]*WorkersSecret)[vs[1].(int)]
	}).(WorkersSecretOutput)
}

type WorkersSecretMapOutput struct{ *pulumi.OutputState }

func (WorkersSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersSecret)(nil)).Elem()
}

func (o WorkersSecretMapOutput) ToWorkersSecretMapOutput() WorkersSecretMapOutput {
	return o
}

func (o WorkersSecretMapOutput) ToWorkersSecretMapOutputWithContext(ctx context.Context) WorkersSecretMapOutput {
	return o
}

func (o WorkersSecretMapOutput) MapIndex(k pulumi.StringInput) WorkersSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersSecret {
		return vs[0].(map[string]*WorkersSecret)[vs[1].(string)]
	}).(WorkersSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersSecretInput)(nil)).Elem(), &WorkersSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersSecretArrayInput)(nil)).Elem(), WorkersSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersSecretMapInput)(nil)).Elem(), WorkersSecretMap{})
	pulumi.RegisterOutputType(WorkersSecretOutput{})
	pulumi.RegisterOutputType(WorkersSecretArrayOutput{})
	pulumi.RegisterOutputType(WorkersSecretMapOutput{})
}
