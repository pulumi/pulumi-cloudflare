// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > If you are attempting to sign up a subdomain of a zone you must first have Subdomain Support entitlement for your account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZone(ctx, "example_zone", &cloudflare.ZoneArgs{
//				Account: &cloudflare.ZoneAccountArgs{
//					Id: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				},
//				Name: pulumi.String("example.com"),
//				Type: pulumi.String("full"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zone:Zone example '<zone_id>'
// ```
type Zone struct {
	pulumi.CustomResourceState

	Account ZoneAccountOutput `pulumi:"account"`
	// The last time proof of ownership was detected and the zone was made
	// active.
	ActivatedOn pulumi.StringOutput `pulumi:"activatedOn"`
	// Allows the customer to use a custom apex.
	// *Tenants Only Configuration*.
	CnameSuffix pulumi.StringOutput `pulumi:"cnameSuffix"`
	// When the zone was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The interval (in seconds) from when development mode expires
	// (positive integer) or last expired (negative integer) for the
	// domain. If development mode has never been enabled, this value is 0.
	DevelopmentMode pulumi.Float64Output `pulumi:"developmentMode"`
	// Metadata about the zone.
	Meta ZoneMetaOutput `pulumi:"meta"`
	// When the zone was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// The domain name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name servers Cloudflare assigns to a zone.
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
	// DNS host at the time of switching to Cloudflare.
	OriginalDnshost pulumi.StringOutput `pulumi:"originalDnshost"`
	// Original name servers before moving to Cloudflare.
	OriginalNameServers pulumi.StringArrayOutput `pulumi:"originalNameServers"`
	// Registrar for the domain at the time of switching to Cloudflare.
	OriginalRegistrar pulumi.StringOutput `pulumi:"originalRegistrar"`
	// The owner of the zone.
	Owner ZoneOwnerOutput `pulumi:"owner"`
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Legacy permissions based on legacy user membership information.
	//
	// Deprecated: This attribute is deprecated.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// A Zones subscription information.
	//
	// Deprecated: This attribute is deprecated.
	Plan ZonePlanOutput `pulumi:"plan"`
	// The zone status on Cloudflare.
	// Available values: "initializing", "pending", "active", "moved".
	Status pulumi.StringOutput `pulumi:"status"`
	// The root organizational unit that this zone belongs to (such as a tenant or organization).
	Tenant ZoneTenantOutput `pulumi:"tenant"`
	// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
	TenantUnit ZoneTenantUnitOutput `pulumi:"tenantUnit"`
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// Available values: "full", "partial", "secondary", "internal".
	Type pulumi.StringOutput `pulumi:"type"`
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers pulumi.StringArrayOutput `pulumi:"vanityNameServers"`
	// Verification key for partial zone setup.
	VerificationKey pulumi.StringOutput `pulumi:"verificationKey"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Account == nil {
		return nil, errors.New("invalid value for required argument 'Account'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("cloudflare:index/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("cloudflare:index/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	Account *ZoneAccount `pulumi:"account"`
	// The last time proof of ownership was detected and the zone was made
	// active.
	ActivatedOn *string `pulumi:"activatedOn"`
	// Allows the customer to use a custom apex.
	// *Tenants Only Configuration*.
	CnameSuffix *string `pulumi:"cnameSuffix"`
	// When the zone was created.
	CreatedOn *string `pulumi:"createdOn"`
	// The interval (in seconds) from when development mode expires
	// (positive integer) or last expired (negative integer) for the
	// domain. If development mode has never been enabled, this value is 0.
	DevelopmentMode *float64 `pulumi:"developmentMode"`
	// Metadata about the zone.
	Meta *ZoneMeta `pulumi:"meta"`
	// When the zone was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// The domain name.
	Name *string `pulumi:"name"`
	// The name servers Cloudflare assigns to a zone.
	NameServers []string `pulumi:"nameServers"`
	// DNS host at the time of switching to Cloudflare.
	OriginalDnshost *string `pulumi:"originalDnshost"`
	// Original name servers before moving to Cloudflare.
	OriginalNameServers []string `pulumi:"originalNameServers"`
	// Registrar for the domain at the time of switching to Cloudflare.
	OriginalRegistrar *string `pulumi:"originalRegistrar"`
	// The owner of the zone.
	Owner *ZoneOwner `pulumi:"owner"`
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused *bool `pulumi:"paused"`
	// Legacy permissions based on legacy user membership information.
	//
	// Deprecated: This attribute is deprecated.
	Permissions []string `pulumi:"permissions"`
	// A Zones subscription information.
	//
	// Deprecated: This attribute is deprecated.
	Plan *ZonePlan `pulumi:"plan"`
	// The zone status on Cloudflare.
	// Available values: "initializing", "pending", "active", "moved".
	Status *string `pulumi:"status"`
	// The root organizational unit that this zone belongs to (such as a tenant or organization).
	Tenant *ZoneTenant `pulumi:"tenant"`
	// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
	TenantUnit *ZoneTenantUnit `pulumi:"tenantUnit"`
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// Available values: "full", "partial", "secondary", "internal".
	Type *string `pulumi:"type"`
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers []string `pulumi:"vanityNameServers"`
	// Verification key for partial zone setup.
	VerificationKey *string `pulumi:"verificationKey"`
}

type ZoneState struct {
	Account ZoneAccountPtrInput
	// The last time proof of ownership was detected and the zone was made
	// active.
	ActivatedOn pulumi.StringPtrInput
	// Allows the customer to use a custom apex.
	// *Tenants Only Configuration*.
	CnameSuffix pulumi.StringPtrInput
	// When the zone was created.
	CreatedOn pulumi.StringPtrInput
	// The interval (in seconds) from when development mode expires
	// (positive integer) or last expired (negative integer) for the
	// domain. If development mode has never been enabled, this value is 0.
	DevelopmentMode pulumi.Float64PtrInput
	// Metadata about the zone.
	Meta ZoneMetaPtrInput
	// When the zone was last modified.
	ModifiedOn pulumi.StringPtrInput
	// The domain name.
	Name pulumi.StringPtrInput
	// The name servers Cloudflare assigns to a zone.
	NameServers pulumi.StringArrayInput
	// DNS host at the time of switching to Cloudflare.
	OriginalDnshost pulumi.StringPtrInput
	// Original name servers before moving to Cloudflare.
	OriginalNameServers pulumi.StringArrayInput
	// Registrar for the domain at the time of switching to Cloudflare.
	OriginalRegistrar pulumi.StringPtrInput
	// The owner of the zone.
	Owner ZoneOwnerPtrInput
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused pulumi.BoolPtrInput
	// Legacy permissions based on legacy user membership information.
	//
	// Deprecated: This attribute is deprecated.
	Permissions pulumi.StringArrayInput
	// A Zones subscription information.
	//
	// Deprecated: This attribute is deprecated.
	Plan ZonePlanPtrInput
	// The zone status on Cloudflare.
	// Available values: "initializing", "pending", "active", "moved".
	Status pulumi.StringPtrInput
	// The root organizational unit that this zone belongs to (such as a tenant or organization).
	Tenant ZoneTenantPtrInput
	// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
	TenantUnit ZoneTenantUnitPtrInput
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// Available values: "full", "partial", "secondary", "internal".
	Type pulumi.StringPtrInput
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers pulumi.StringArrayInput
	// Verification key for partial zone setup.
	VerificationKey pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	Account ZoneAccount `pulumi:"account"`
	// The domain name.
	Name string `pulumi:"name"`
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused *bool `pulumi:"paused"`
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// Available values: "full", "partial", "secondary", "internal".
	Type *string `pulumi:"type"`
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers []string `pulumi:"vanityNameServers"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	Account ZoneAccountInput
	// The domain name.
	Name pulumi.StringInput
	// Indicates whether the zone is only using Cloudflare DNS services. A
	// true value means the zone will not receive security or performance
	// benefits.
	Paused pulumi.BoolPtrInput
	// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
	// typically a partner-hosted zone or a CNAME setup.
	// Available values: "full", "partial", "secondary", "internal".
	Type pulumi.StringPtrInput
	// An array of domains used for custom name servers. This is only
	// available for Business and Enterprise plans.
	VanityNameServers pulumi.StringArrayInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//	ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//	ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

func (o ZoneOutput) Account() ZoneAccountOutput {
	return o.ApplyT(func(v *Zone) ZoneAccountOutput { return v.Account }).(ZoneAccountOutput)
}

// The last time proof of ownership was detected and the zone was made
// active.
func (o ZoneOutput) ActivatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ActivatedOn }).(pulumi.StringOutput)
}

// Allows the customer to use a custom apex.
// *Tenants Only Configuration*.
func (o ZoneOutput) CnameSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CnameSuffix }).(pulumi.StringOutput)
}

// When the zone was created.
func (o ZoneOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The interval (in seconds) from when development mode expires
// (positive integer) or last expired (negative integer) for the
// domain. If development mode has never been enabled, this value is 0.
func (o ZoneOutput) DevelopmentMode() pulumi.Float64Output {
	return o.ApplyT(func(v *Zone) pulumi.Float64Output { return v.DevelopmentMode }).(pulumi.Float64Output)
}

// Metadata about the zone.
func (o ZoneOutput) Meta() ZoneMetaOutput {
	return o.ApplyT(func(v *Zone) ZoneMetaOutput { return v.Meta }).(ZoneMetaOutput)
}

// When the zone was last modified.
func (o ZoneOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The domain name.
func (o ZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name servers Cloudflare assigns to a zone.
func (o ZoneOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.NameServers }).(pulumi.StringArrayOutput)
}

// DNS host at the time of switching to Cloudflare.
func (o ZoneOutput) OriginalDnshost() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.OriginalDnshost }).(pulumi.StringOutput)
}

// Original name servers before moving to Cloudflare.
func (o ZoneOutput) OriginalNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.OriginalNameServers }).(pulumi.StringArrayOutput)
}

// Registrar for the domain at the time of switching to Cloudflare.
func (o ZoneOutput) OriginalRegistrar() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.OriginalRegistrar }).(pulumi.StringOutput)
}

// The owner of the zone.
func (o ZoneOutput) Owner() ZoneOwnerOutput {
	return o.ApplyT(func(v *Zone) ZoneOwnerOutput { return v.Owner }).(ZoneOwnerOutput)
}

// Indicates whether the zone is only using Cloudflare DNS services. A
// true value means the zone will not receive security or performance
// benefits.
func (o ZoneOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *Zone) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Legacy permissions based on legacy user membership information.
//
// Deprecated: This attribute is deprecated.
func (o ZoneOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// A Zones subscription information.
//
// Deprecated: This attribute is deprecated.
func (o ZoneOutput) Plan() ZonePlanOutput {
	return o.ApplyT(func(v *Zone) ZonePlanOutput { return v.Plan }).(ZonePlanOutput)
}

// The zone status on Cloudflare.
// Available values: "initializing", "pending", "active", "moved".
func (o ZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The root organizational unit that this zone belongs to (such as a tenant or organization).
func (o ZoneOutput) Tenant() ZoneTenantOutput {
	return o.ApplyT(func(v *Zone) ZoneTenantOutput { return v.Tenant }).(ZoneTenantOutput)
}

// The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
func (o ZoneOutput) TenantUnit() ZoneTenantUnitOutput {
	return o.ApplyT(func(v *Zone) ZoneTenantUnitOutput { return v.TenantUnit }).(ZoneTenantUnitOutput)
}

// A full zone implies that DNS is hosted with Cloudflare. A partial zone is
// typically a partner-hosted zone or a CNAME setup.
// Available values: "full", "partial", "secondary", "internal".
func (o ZoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// An array of domains used for custom name servers. This is only
// available for Business and Enterprise plans.
func (o ZoneOutput) VanityNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.VanityNameServers }).(pulumi.StringArrayOutput)
}

// Verification key for partial zone setup.
func (o ZoneOutput) VerificationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.VerificationKey }).(pulumi.StringOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
