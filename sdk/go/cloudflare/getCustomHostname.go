// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupCustomHostname(ctx, &cloudflare.LookupCustomHostnameArgs{
//				ZoneId:           "023e105f4ecef8ad9ca31a8372d0c353",
//				CustomHostnameId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCustomHostname(ctx *pulumi.Context, args *LookupCustomHostnameArgs, opts ...pulumi.InvokeOption) (*LookupCustomHostnameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomHostnameResult
	err := ctx.Invoke("cloudflare:index/getCustomHostname:getCustomHostname", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomHostname.
type LookupCustomHostnameArgs struct {
	// Identifier
	CustomHostnameId *string                  `pulumi:"customHostnameId"`
	Filter           *GetCustomHostnameFilter `pulumi:"filter"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCustomHostname.
type LookupCustomHostnameResult struct {
	// This is the time the hostname was created.
	CreatedAt string `pulumi:"createdAt"`
	// Identifier
	CustomHostnameId *string `pulumi:"customHostnameId"`
	// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
	CustomMetadata map[string]string `pulumi:"customMetadata"`
	// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
	CustomOriginServer string `pulumi:"customOriginServer"`
	// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
	CustomOriginSni string                   `pulumi:"customOriginSni"`
	Filter          *GetCustomHostnameFilter `pulumi:"filter"`
	// The custom hostname that will point to your hostname via CNAME.
	Hostname string `pulumi:"hostname"`
	// Identifier
	Id string `pulumi:"id"`
	// This is a record which can be placed to activate a hostname.
	OwnershipVerification GetCustomHostnameOwnershipVerification `pulumi:"ownershipVerification"`
	// This presents the token to be served by the given http url to activate a hostname.
	OwnershipVerificationHttp GetCustomHostnameOwnershipVerificationHttp `pulumi:"ownershipVerificationHttp"`
	Ssl                       GetCustomHostnameSsl                       `pulumi:"ssl"`
	// Status of the hostname's activation.
	Status string `pulumi:"status"`
	// These are errors that were encountered while trying to activate a hostname.
	VerificationErrors []string `pulumi:"verificationErrors"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupCustomHostnameOutput(ctx *pulumi.Context, args LookupCustomHostnameOutputArgs, opts ...pulumi.InvokeOption) LookupCustomHostnameResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCustomHostnameResultOutput, error) {
			args := v.(LookupCustomHostnameArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getCustomHostname:getCustomHostname", args, LookupCustomHostnameResultOutput{}, options).(LookupCustomHostnameResultOutput), nil
		}).(LookupCustomHostnameResultOutput)
}

// A collection of arguments for invoking getCustomHostname.
type LookupCustomHostnameOutputArgs struct {
	// Identifier
	CustomHostnameId pulumi.StringPtrInput           `pulumi:"customHostnameId"`
	Filter           GetCustomHostnameFilterPtrInput `pulumi:"filter"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupCustomHostnameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomHostnameArgs)(nil)).Elem()
}

// A collection of values returned by getCustomHostname.
type LookupCustomHostnameResultOutput struct{ *pulumi.OutputState }

func (LookupCustomHostnameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomHostnameResult)(nil)).Elem()
}

func (o LookupCustomHostnameResultOutput) ToLookupCustomHostnameResultOutput() LookupCustomHostnameResultOutput {
	return o
}

func (o LookupCustomHostnameResultOutput) ToLookupCustomHostnameResultOutputWithContext(ctx context.Context) LookupCustomHostnameResultOutput {
	return o
}

// This is the time the hostname was created.
func (o LookupCustomHostnameResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Identifier
func (o LookupCustomHostnameResultOutput) CustomHostnameId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) *string { return v.CustomHostnameId }).(pulumi.StringPtrOutput)
}

// Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
func (o LookupCustomHostnameResultOutput) CustomMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) map[string]string { return v.CustomMetadata }).(pulumi.StringMapOutput)
}

// a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
func (o LookupCustomHostnameResultOutput) CustomOriginServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.CustomOriginServer }).(pulumi.StringOutput)
}

// A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string ':request*host*header:' which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
func (o LookupCustomHostnameResultOutput) CustomOriginSni() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.CustomOriginSni }).(pulumi.StringOutput)
}

func (o LookupCustomHostnameResultOutput) Filter() GetCustomHostnameFilterPtrOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) *GetCustomHostnameFilter { return v.Filter }).(GetCustomHostnameFilterPtrOutput)
}

// The custom hostname that will point to your hostname via CNAME.
func (o LookupCustomHostnameResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// Identifier
func (o LookupCustomHostnameResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.Id }).(pulumi.StringOutput)
}

// This is a record which can be placed to activate a hostname.
func (o LookupCustomHostnameResultOutput) OwnershipVerification() GetCustomHostnameOwnershipVerificationOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) GetCustomHostnameOwnershipVerification {
		return v.OwnershipVerification
	}).(GetCustomHostnameOwnershipVerificationOutput)
}

// This presents the token to be served by the given http url to activate a hostname.
func (o LookupCustomHostnameResultOutput) OwnershipVerificationHttp() GetCustomHostnameOwnershipVerificationHttpOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) GetCustomHostnameOwnershipVerificationHttp {
		return v.OwnershipVerificationHttp
	}).(GetCustomHostnameOwnershipVerificationHttpOutput)
}

func (o LookupCustomHostnameResultOutput) Ssl() GetCustomHostnameSslOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) GetCustomHostnameSsl { return v.Ssl }).(GetCustomHostnameSslOutput)
}

// Status of the hostname's activation.
func (o LookupCustomHostnameResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.Status }).(pulumi.StringOutput)
}

// These are errors that were encountered while trying to activate a hostname.
func (o LookupCustomHostnameResultOutput) VerificationErrors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) []string { return v.VerificationErrors }).(pulumi.StringArrayOutput)
}

// Identifier
func (o LookupCustomHostnameResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomHostnameResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCustomHostnameResultOutput{})
}
