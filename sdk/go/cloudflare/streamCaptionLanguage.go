// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStreamCaptionLanguage(ctx, "example_stream_caption_language", &cloudflare.StreamCaptionLanguageArgs{
//				AccountId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Identifier: pulumi.String("ea95132c15732412d22c1476fa83f27a"),
//				Language:   pulumi.String("tr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StreamCaptionLanguage struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The WebVTT file containing the caption or subtitle content.
	File pulumi.StringPtrOutput `pulumi:"file"`
	// Whether the caption was generated via AI.
	Generated pulumi.BoolOutput `pulumi:"generated"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The language label displayed in the native language to users.
	Label pulumi.StringOutput `pulumi:"label"`
	// The language tag in BCP 47 format.
	Language pulumi.StringOutput `pulumi:"language"`
	// The status of a generated caption.
	// Available values: "ready", "inprogress", "error".
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewStreamCaptionLanguage registers a new resource with the given unique name, arguments, and options.
func NewStreamCaptionLanguage(ctx *pulumi.Context,
	name string, args *StreamCaptionLanguageArgs, opts ...pulumi.ResourceOption) (*StreamCaptionLanguage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.Language == nil {
		return nil, errors.New("invalid value for required argument 'Language'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamCaptionLanguage
	err := ctx.RegisterResource("cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamCaptionLanguage gets an existing StreamCaptionLanguage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamCaptionLanguage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamCaptionLanguageState, opts ...pulumi.ResourceOption) (*StreamCaptionLanguage, error) {
	var resource StreamCaptionLanguage
	err := ctx.ReadResource("cloudflare:index/streamCaptionLanguage:StreamCaptionLanguage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamCaptionLanguage resources.
type streamCaptionLanguageState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// The WebVTT file containing the caption or subtitle content.
	File *string `pulumi:"file"`
	// Whether the caption was generated via AI.
	Generated *bool `pulumi:"generated"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `pulumi:"identifier"`
	// The language label displayed in the native language to users.
	Label *string `pulumi:"label"`
	// The language tag in BCP 47 format.
	Language *string `pulumi:"language"`
	// The status of a generated caption.
	// Available values: "ready", "inprogress", "error".
	Status *string `pulumi:"status"`
}

type StreamCaptionLanguageState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// The WebVTT file containing the caption or subtitle content.
	File pulumi.StringPtrInput
	// Whether the caption was generated via AI.
	Generated pulumi.BoolPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrInput
	// The language label displayed in the native language to users.
	Label pulumi.StringPtrInput
	// The language tag in BCP 47 format.
	Language pulumi.StringPtrInput
	// The status of a generated caption.
	// Available values: "ready", "inprogress", "error".
	Status pulumi.StringPtrInput
}

func (StreamCaptionLanguageState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamCaptionLanguageState)(nil)).Elem()
}

type streamCaptionLanguageArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// The WebVTT file containing the caption or subtitle content.
	File *string `pulumi:"file"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
	// The language tag in BCP 47 format.
	Language string `pulumi:"language"`
}

// The set of arguments for constructing a StreamCaptionLanguage resource.
type StreamCaptionLanguageArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// The WebVTT file containing the caption or subtitle content.
	File pulumi.StringPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringInput
	// The language tag in BCP 47 format.
	Language pulumi.StringInput
}

func (StreamCaptionLanguageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamCaptionLanguageArgs)(nil)).Elem()
}

type StreamCaptionLanguageInput interface {
	pulumi.Input

	ToStreamCaptionLanguageOutput() StreamCaptionLanguageOutput
	ToStreamCaptionLanguageOutputWithContext(ctx context.Context) StreamCaptionLanguageOutput
}

func (*StreamCaptionLanguage) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamCaptionLanguage)(nil)).Elem()
}

func (i *StreamCaptionLanguage) ToStreamCaptionLanguageOutput() StreamCaptionLanguageOutput {
	return i.ToStreamCaptionLanguageOutputWithContext(context.Background())
}

func (i *StreamCaptionLanguage) ToStreamCaptionLanguageOutputWithContext(ctx context.Context) StreamCaptionLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamCaptionLanguageOutput)
}

// StreamCaptionLanguageArrayInput is an input type that accepts StreamCaptionLanguageArray and StreamCaptionLanguageArrayOutput values.
// You can construct a concrete instance of `StreamCaptionLanguageArrayInput` via:
//
//	StreamCaptionLanguageArray{ StreamCaptionLanguageArgs{...} }
type StreamCaptionLanguageArrayInput interface {
	pulumi.Input

	ToStreamCaptionLanguageArrayOutput() StreamCaptionLanguageArrayOutput
	ToStreamCaptionLanguageArrayOutputWithContext(context.Context) StreamCaptionLanguageArrayOutput
}

type StreamCaptionLanguageArray []StreamCaptionLanguageInput

func (StreamCaptionLanguageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamCaptionLanguage)(nil)).Elem()
}

func (i StreamCaptionLanguageArray) ToStreamCaptionLanguageArrayOutput() StreamCaptionLanguageArrayOutput {
	return i.ToStreamCaptionLanguageArrayOutputWithContext(context.Background())
}

func (i StreamCaptionLanguageArray) ToStreamCaptionLanguageArrayOutputWithContext(ctx context.Context) StreamCaptionLanguageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamCaptionLanguageArrayOutput)
}

// StreamCaptionLanguageMapInput is an input type that accepts StreamCaptionLanguageMap and StreamCaptionLanguageMapOutput values.
// You can construct a concrete instance of `StreamCaptionLanguageMapInput` via:
//
//	StreamCaptionLanguageMap{ "key": StreamCaptionLanguageArgs{...} }
type StreamCaptionLanguageMapInput interface {
	pulumi.Input

	ToStreamCaptionLanguageMapOutput() StreamCaptionLanguageMapOutput
	ToStreamCaptionLanguageMapOutputWithContext(context.Context) StreamCaptionLanguageMapOutput
}

type StreamCaptionLanguageMap map[string]StreamCaptionLanguageInput

func (StreamCaptionLanguageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamCaptionLanguage)(nil)).Elem()
}

func (i StreamCaptionLanguageMap) ToStreamCaptionLanguageMapOutput() StreamCaptionLanguageMapOutput {
	return i.ToStreamCaptionLanguageMapOutputWithContext(context.Background())
}

func (i StreamCaptionLanguageMap) ToStreamCaptionLanguageMapOutputWithContext(ctx context.Context) StreamCaptionLanguageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamCaptionLanguageMapOutput)
}

type StreamCaptionLanguageOutput struct{ *pulumi.OutputState }

func (StreamCaptionLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamCaptionLanguage)(nil)).Elem()
}

func (o StreamCaptionLanguageOutput) ToStreamCaptionLanguageOutput() StreamCaptionLanguageOutput {
	return o
}

func (o StreamCaptionLanguageOutput) ToStreamCaptionLanguageOutputWithContext(ctx context.Context) StreamCaptionLanguageOutput {
	return o
}

// Identifier
func (o StreamCaptionLanguageOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The WebVTT file containing the caption or subtitle content.
func (o StreamCaptionLanguageOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringPtrOutput { return v.File }).(pulumi.StringPtrOutput)
}

// Whether the caption was generated via AI.
func (o StreamCaptionLanguageOutput) Generated() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.BoolOutput { return v.Generated }).(pulumi.BoolOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamCaptionLanguageOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The language label displayed in the native language to users.
func (o StreamCaptionLanguageOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// The language tag in BCP 47 format.
func (o StreamCaptionLanguageOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

// The status of a generated caption.
// Available values: "ready", "inprogress", "error".
func (o StreamCaptionLanguageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamCaptionLanguage) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type StreamCaptionLanguageArrayOutput struct{ *pulumi.OutputState }

func (StreamCaptionLanguageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamCaptionLanguage)(nil)).Elem()
}

func (o StreamCaptionLanguageArrayOutput) ToStreamCaptionLanguageArrayOutput() StreamCaptionLanguageArrayOutput {
	return o
}

func (o StreamCaptionLanguageArrayOutput) ToStreamCaptionLanguageArrayOutputWithContext(ctx context.Context) StreamCaptionLanguageArrayOutput {
	return o
}

func (o StreamCaptionLanguageArrayOutput) Index(i pulumi.IntInput) StreamCaptionLanguageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamCaptionLanguage {
		return vs[0].([]*StreamCaptionLanguage)[vs[1].(int)]
	}).(StreamCaptionLanguageOutput)
}

type StreamCaptionLanguageMapOutput struct{ *pulumi.OutputState }

func (StreamCaptionLanguageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamCaptionLanguage)(nil)).Elem()
}

func (o StreamCaptionLanguageMapOutput) ToStreamCaptionLanguageMapOutput() StreamCaptionLanguageMapOutput {
	return o
}

func (o StreamCaptionLanguageMapOutput) ToStreamCaptionLanguageMapOutputWithContext(ctx context.Context) StreamCaptionLanguageMapOutput {
	return o
}

func (o StreamCaptionLanguageMapOutput) MapIndex(k pulumi.StringInput) StreamCaptionLanguageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamCaptionLanguage {
		return vs[0].(map[string]*StreamCaptionLanguage)[vs[1].(string)]
	}).(StreamCaptionLanguageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamCaptionLanguageInput)(nil)).Elem(), &StreamCaptionLanguage{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamCaptionLanguageArrayInput)(nil)).Elem(), StreamCaptionLanguageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamCaptionLanguageMapInput)(nil)).Elem(), StreamCaptionLanguageMap{})
	pulumi.RegisterOutputType(StreamCaptionLanguageOutput{})
	pulumi.RegisterOutputType(StreamCaptionLanguageArrayOutput{})
	pulumi.RegisterOutputType(StreamCaptionLanguageMapOutput{})
}
