// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustDeviceManagedNetworks(ctx, "example_zero_trust_device_managed_networks", &cloudflare.ZeroTrustDeviceManagedNetworksArgs{
//				AccountId: pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Config: &cloudflare.ZeroTrustDeviceManagedNetworksConfigArgs{
//					Tls_sockaddr: "foo.bar:1234",
//					Sha256:       pulumi.String("b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c"),
//				},
//				Name: pulumi.String("managed-network-1"),
//				Type: pulumi.String("tls"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks example '<account_id>/<network_id>'
// ```
//
// Deprecated: cloudflare.index/devicemanagednetworks.DeviceManagedNetworks has been deprecated in favor of cloudflare.index/zerotrustdevicemanagednetworks.ZeroTrustDeviceManagedNetworks
type DeviceManagedNetworks struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The configuration object containing information for the WARP client to detect the managed network.
	Config DeviceManagedNetworksConfigOutput `pulumi:"config"`
	// The name of the device managed network. This name must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// API UUID.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The type of device managed network.
	// Available values: "tls".
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDeviceManagedNetworks registers a new resource with the given unique name, arguments, and options.
func NewDeviceManagedNetworks(ctx *pulumi.Context,
	name string, args *DeviceManagedNetworksArgs, opts ...pulumi.ResourceOption) (*DeviceManagedNetworks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeviceManagedNetworks
	err := ctx.RegisterResource("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceManagedNetworks gets an existing DeviceManagedNetworks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceManagedNetworks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceManagedNetworksState, opts ...pulumi.ResourceOption) (*DeviceManagedNetworks, error) {
	var resource DeviceManagedNetworks
	err := ctx.ReadResource("cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceManagedNetworks resources.
type deviceManagedNetworksState struct {
	AccountId *string `pulumi:"accountId"`
	// The configuration object containing information for the WARP client to detect the managed network.
	Config *DeviceManagedNetworksConfig `pulumi:"config"`
	// The name of the device managed network. This name must be unique.
	Name *string `pulumi:"name"`
	// API UUID.
	NetworkId *string `pulumi:"networkId"`
	// The type of device managed network.
	// Available values: "tls".
	Type *string `pulumi:"type"`
}

type DeviceManagedNetworksState struct {
	AccountId pulumi.StringPtrInput
	// The configuration object containing information for the WARP client to detect the managed network.
	Config DeviceManagedNetworksConfigPtrInput
	// The name of the device managed network. This name must be unique.
	Name pulumi.StringPtrInput
	// API UUID.
	NetworkId pulumi.StringPtrInput
	// The type of device managed network.
	// Available values: "tls".
	Type pulumi.StringPtrInput
}

func (DeviceManagedNetworksState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceManagedNetworksState)(nil)).Elem()
}

type deviceManagedNetworksArgs struct {
	AccountId string `pulumi:"accountId"`
	// The configuration object containing information for the WARP client to detect the managed network.
	Config DeviceManagedNetworksConfig `pulumi:"config"`
	// The name of the device managed network. This name must be unique.
	Name string `pulumi:"name"`
	// The type of device managed network.
	// Available values: "tls".
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DeviceManagedNetworks resource.
type DeviceManagedNetworksArgs struct {
	AccountId pulumi.StringInput
	// The configuration object containing information for the WARP client to detect the managed network.
	Config DeviceManagedNetworksConfigInput
	// The name of the device managed network. This name must be unique.
	Name pulumi.StringInput
	// The type of device managed network.
	// Available values: "tls".
	Type pulumi.StringInput
}

func (DeviceManagedNetworksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceManagedNetworksArgs)(nil)).Elem()
}

type DeviceManagedNetworksInput interface {
	pulumi.Input

	ToDeviceManagedNetworksOutput() DeviceManagedNetworksOutput
	ToDeviceManagedNetworksOutputWithContext(ctx context.Context) DeviceManagedNetworksOutput
}

func (*DeviceManagedNetworks) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceManagedNetworks)(nil)).Elem()
}

func (i *DeviceManagedNetworks) ToDeviceManagedNetworksOutput() DeviceManagedNetworksOutput {
	return i.ToDeviceManagedNetworksOutputWithContext(context.Background())
}

func (i *DeviceManagedNetworks) ToDeviceManagedNetworksOutputWithContext(ctx context.Context) DeviceManagedNetworksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceManagedNetworksOutput)
}

// DeviceManagedNetworksArrayInput is an input type that accepts DeviceManagedNetworksArray and DeviceManagedNetworksArrayOutput values.
// You can construct a concrete instance of `DeviceManagedNetworksArrayInput` via:
//
//	DeviceManagedNetworksArray{ DeviceManagedNetworksArgs{...} }
type DeviceManagedNetworksArrayInput interface {
	pulumi.Input

	ToDeviceManagedNetworksArrayOutput() DeviceManagedNetworksArrayOutput
	ToDeviceManagedNetworksArrayOutputWithContext(context.Context) DeviceManagedNetworksArrayOutput
}

type DeviceManagedNetworksArray []DeviceManagedNetworksInput

func (DeviceManagedNetworksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceManagedNetworks)(nil)).Elem()
}

func (i DeviceManagedNetworksArray) ToDeviceManagedNetworksArrayOutput() DeviceManagedNetworksArrayOutput {
	return i.ToDeviceManagedNetworksArrayOutputWithContext(context.Background())
}

func (i DeviceManagedNetworksArray) ToDeviceManagedNetworksArrayOutputWithContext(ctx context.Context) DeviceManagedNetworksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceManagedNetworksArrayOutput)
}

// DeviceManagedNetworksMapInput is an input type that accepts DeviceManagedNetworksMap and DeviceManagedNetworksMapOutput values.
// You can construct a concrete instance of `DeviceManagedNetworksMapInput` via:
//
//	DeviceManagedNetworksMap{ "key": DeviceManagedNetworksArgs{...} }
type DeviceManagedNetworksMapInput interface {
	pulumi.Input

	ToDeviceManagedNetworksMapOutput() DeviceManagedNetworksMapOutput
	ToDeviceManagedNetworksMapOutputWithContext(context.Context) DeviceManagedNetworksMapOutput
}

type DeviceManagedNetworksMap map[string]DeviceManagedNetworksInput

func (DeviceManagedNetworksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceManagedNetworks)(nil)).Elem()
}

func (i DeviceManagedNetworksMap) ToDeviceManagedNetworksMapOutput() DeviceManagedNetworksMapOutput {
	return i.ToDeviceManagedNetworksMapOutputWithContext(context.Background())
}

func (i DeviceManagedNetworksMap) ToDeviceManagedNetworksMapOutputWithContext(ctx context.Context) DeviceManagedNetworksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceManagedNetworksMapOutput)
}

type DeviceManagedNetworksOutput struct{ *pulumi.OutputState }

func (DeviceManagedNetworksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceManagedNetworks)(nil)).Elem()
}

func (o DeviceManagedNetworksOutput) ToDeviceManagedNetworksOutput() DeviceManagedNetworksOutput {
	return o
}

func (o DeviceManagedNetworksOutput) ToDeviceManagedNetworksOutputWithContext(ctx context.Context) DeviceManagedNetworksOutput {
	return o
}

func (o DeviceManagedNetworksOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceManagedNetworks) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The configuration object containing information for the WARP client to detect the managed network.
func (o DeviceManagedNetworksOutput) Config() DeviceManagedNetworksConfigOutput {
	return o.ApplyT(func(v *DeviceManagedNetworks) DeviceManagedNetworksConfigOutput { return v.Config }).(DeviceManagedNetworksConfigOutput)
}

// The name of the device managed network. This name must be unique.
func (o DeviceManagedNetworksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceManagedNetworks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// API UUID.
func (o DeviceManagedNetworksOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceManagedNetworks) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The type of device managed network.
// Available values: "tls".
func (o DeviceManagedNetworksOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceManagedNetworks) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DeviceManagedNetworksArrayOutput struct{ *pulumi.OutputState }

func (DeviceManagedNetworksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceManagedNetworks)(nil)).Elem()
}

func (o DeviceManagedNetworksArrayOutput) ToDeviceManagedNetworksArrayOutput() DeviceManagedNetworksArrayOutput {
	return o
}

func (o DeviceManagedNetworksArrayOutput) ToDeviceManagedNetworksArrayOutputWithContext(ctx context.Context) DeviceManagedNetworksArrayOutput {
	return o
}

func (o DeviceManagedNetworksArrayOutput) Index(i pulumi.IntInput) DeviceManagedNetworksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceManagedNetworks {
		return vs[0].([]*DeviceManagedNetworks)[vs[1].(int)]
	}).(DeviceManagedNetworksOutput)
}

type DeviceManagedNetworksMapOutput struct{ *pulumi.OutputState }

func (DeviceManagedNetworksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceManagedNetworks)(nil)).Elem()
}

func (o DeviceManagedNetworksMapOutput) ToDeviceManagedNetworksMapOutput() DeviceManagedNetworksMapOutput {
	return o
}

func (o DeviceManagedNetworksMapOutput) ToDeviceManagedNetworksMapOutputWithContext(ctx context.Context) DeviceManagedNetworksMapOutput {
	return o
}

func (o DeviceManagedNetworksMapOutput) MapIndex(k pulumi.StringInput) DeviceManagedNetworksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceManagedNetworks {
		return vs[0].(map[string]*DeviceManagedNetworks)[vs[1].(string)]
	}).(DeviceManagedNetworksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceManagedNetworksInput)(nil)).Elem(), &DeviceManagedNetworks{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceManagedNetworksArrayInput)(nil)).Elem(), DeviceManagedNetworksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceManagedNetworksMapInput)(nil)).Elem(), DeviceManagedNetworksMap{})
	pulumi.RegisterOutputType(DeviceManagedNetworksOutput{})
	pulumi.RegisterOutputType(DeviceManagedNetworksArrayOutput{})
	pulumi.RegisterOutputType(DeviceManagedNetworksMapOutput{})
}
