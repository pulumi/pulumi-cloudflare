// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Currently, you cannot import rulesets.
type Ruleset struct {
	pulumi.CustomResourceState

	// The ID of the account where the ruleset is being created. Conflicts with `"zoneId"`.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Brief summary of the ruleset rule and its intended use.
	Description pulumi.StringOutput `pulumi:"description"`
	// Type of Ruleset to create. Valid values are `"custom"`, `"managed"`, `"root"`, `"schema"` or `"zone"`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the HTTP request header to target.
	Name pulumi.StringOutput `pulumi:"name"`
	// Point in the request/response lifecycle where the ruleset will be created. Valid values are `"ddosL4"`, `"ddosL7"`, `"httpRequestFirewallCustom"`, `"httpRequestFirewallManaged"`, `"httpRequestLateTransform"`, `"httpResponseHeadersTransform"`, `"httpRequestMain"`, `"httpRequestSanitize"`, `"httpRequestTransform"`, `"httpResponseFirewallManaged"`, `"magicTransit"`, or `"httpRatelimit"`.
	Phase pulumi.StringOutput `pulumi:"phase"`
	// List of rule-based overrides (refer to the nested schema).
	Rules RulesetRuleArrayOutput `pulumi:"rules"`
	// Name of entitlement that is shareable between entities.
	ShareableEntitlementName pulumi.StringPtrOutput `pulumi:"shareableEntitlementName"`
	// The ID of the zone where the ruleset is being created. Conflicts with `"accountId"`.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewRuleset registers a new resource with the given unique name, arguments, and options.
func NewRuleset(ctx *pulumi.Context,
	name string, args *RulesetArgs, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Phase == nil {
		return nil, errors.New("invalid value for required argument 'Phase'")
	}
	var resource Ruleset
	err := ctx.RegisterResource("cloudflare:index/ruleset:Ruleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleset gets an existing Ruleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RulesetState, opts ...pulumi.ResourceOption) (*Ruleset, error) {
	var resource Ruleset
	err := ctx.ReadResource("cloudflare:index/ruleset:Ruleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ruleset resources.
type rulesetState struct {
	// The ID of the account where the ruleset is being created. Conflicts with `"zoneId"`.
	AccountId *string `pulumi:"accountId"`
	// Brief summary of the ruleset rule and its intended use.
	Description *string `pulumi:"description"`
	// Type of Ruleset to create. Valid values are `"custom"`, `"managed"`, `"root"`, `"schema"` or `"zone"`.
	Kind *string `pulumi:"kind"`
	// Name of the HTTP request header to target.
	Name *string `pulumi:"name"`
	// Point in the request/response lifecycle where the ruleset will be created. Valid values are `"ddosL4"`, `"ddosL7"`, `"httpRequestFirewallCustom"`, `"httpRequestFirewallManaged"`, `"httpRequestLateTransform"`, `"httpResponseHeadersTransform"`, `"httpRequestMain"`, `"httpRequestSanitize"`, `"httpRequestTransform"`, `"httpResponseFirewallManaged"`, `"magicTransit"`, or `"httpRatelimit"`.
	Phase *string `pulumi:"phase"`
	// List of rule-based overrides (refer to the nested schema).
	Rules []RulesetRule `pulumi:"rules"`
	// Name of entitlement that is shareable between entities.
	ShareableEntitlementName *string `pulumi:"shareableEntitlementName"`
	// The ID of the zone where the ruleset is being created. Conflicts with `"accountId"`.
	ZoneId *string `pulumi:"zoneId"`
}

type RulesetState struct {
	// The ID of the account where the ruleset is being created. Conflicts with `"zoneId"`.
	AccountId pulumi.StringPtrInput
	// Brief summary of the ruleset rule and its intended use.
	Description pulumi.StringPtrInput
	// Type of Ruleset to create. Valid values are `"custom"`, `"managed"`, `"root"`, `"schema"` or `"zone"`.
	Kind pulumi.StringPtrInput
	// Name of the HTTP request header to target.
	Name pulumi.StringPtrInput
	// Point in the request/response lifecycle where the ruleset will be created. Valid values are `"ddosL4"`, `"ddosL7"`, `"httpRequestFirewallCustom"`, `"httpRequestFirewallManaged"`, `"httpRequestLateTransform"`, `"httpResponseHeadersTransform"`, `"httpRequestMain"`, `"httpRequestSanitize"`, `"httpRequestTransform"`, `"httpResponseFirewallManaged"`, `"magicTransit"`, or `"httpRatelimit"`.
	Phase pulumi.StringPtrInput
	// List of rule-based overrides (refer to the nested schema).
	Rules RulesetRuleArrayInput
	// Name of entitlement that is shareable between entities.
	ShareableEntitlementName pulumi.StringPtrInput
	// The ID of the zone where the ruleset is being created. Conflicts with `"accountId"`.
	ZoneId pulumi.StringPtrInput
}

func (RulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetState)(nil)).Elem()
}

type rulesetArgs struct {
	// The ID of the account where the ruleset is being created. Conflicts with `"zoneId"`.
	AccountId *string `pulumi:"accountId"`
	// Brief summary of the ruleset rule and its intended use.
	Description string `pulumi:"description"`
	// Type of Ruleset to create. Valid values are `"custom"`, `"managed"`, `"root"`, `"schema"` or `"zone"`.
	Kind string `pulumi:"kind"`
	// Name of the HTTP request header to target.
	Name string `pulumi:"name"`
	// Point in the request/response lifecycle where the ruleset will be created. Valid values are `"ddosL4"`, `"ddosL7"`, `"httpRequestFirewallCustom"`, `"httpRequestFirewallManaged"`, `"httpRequestLateTransform"`, `"httpResponseHeadersTransform"`, `"httpRequestMain"`, `"httpRequestSanitize"`, `"httpRequestTransform"`, `"httpResponseFirewallManaged"`, `"magicTransit"`, or `"httpRatelimit"`.
	Phase string `pulumi:"phase"`
	// List of rule-based overrides (refer to the nested schema).
	Rules []RulesetRule `pulumi:"rules"`
	// Name of entitlement that is shareable between entities.
	ShareableEntitlementName *string `pulumi:"shareableEntitlementName"`
	// The ID of the zone where the ruleset is being created. Conflicts with `"accountId"`.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Ruleset resource.
type RulesetArgs struct {
	// The ID of the account where the ruleset is being created. Conflicts with `"zoneId"`.
	AccountId pulumi.StringPtrInput
	// Brief summary of the ruleset rule and its intended use.
	Description pulumi.StringInput
	// Type of Ruleset to create. Valid values are `"custom"`, `"managed"`, `"root"`, `"schema"` or `"zone"`.
	Kind pulumi.StringInput
	// Name of the HTTP request header to target.
	Name pulumi.StringInput
	// Point in the request/response lifecycle where the ruleset will be created. Valid values are `"ddosL4"`, `"ddosL7"`, `"httpRequestFirewallCustom"`, `"httpRequestFirewallManaged"`, `"httpRequestLateTransform"`, `"httpResponseHeadersTransform"`, `"httpRequestMain"`, `"httpRequestSanitize"`, `"httpRequestTransform"`, `"httpResponseFirewallManaged"`, `"magicTransit"`, or `"httpRatelimit"`.
	Phase pulumi.StringInput
	// List of rule-based overrides (refer to the nested schema).
	Rules RulesetRuleArrayInput
	// Name of entitlement that is shareable between entities.
	ShareableEntitlementName pulumi.StringPtrInput
	// The ID of the zone where the ruleset is being created. Conflicts with `"accountId"`.
	ZoneId pulumi.StringPtrInput
}

func (RulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rulesetArgs)(nil)).Elem()
}

type RulesetInput interface {
	pulumi.Input

	ToRulesetOutput() RulesetOutput
	ToRulesetOutputWithContext(ctx context.Context) RulesetOutput
}

func (*Ruleset) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleset)(nil))
}

func (i *Ruleset) ToRulesetOutput() RulesetOutput {
	return i.ToRulesetOutputWithContext(context.Background())
}

func (i *Ruleset) ToRulesetOutputWithContext(ctx context.Context) RulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetOutput)
}

func (i *Ruleset) ToRulesetPtrOutput() RulesetPtrOutput {
	return i.ToRulesetPtrOutputWithContext(context.Background())
}

func (i *Ruleset) ToRulesetPtrOutputWithContext(ctx context.Context) RulesetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetPtrOutput)
}

type RulesetPtrInput interface {
	pulumi.Input

	ToRulesetPtrOutput() RulesetPtrOutput
	ToRulesetPtrOutputWithContext(ctx context.Context) RulesetPtrOutput
}

type rulesetPtrType RulesetArgs

func (*rulesetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ruleset)(nil))
}

func (i *rulesetPtrType) ToRulesetPtrOutput() RulesetPtrOutput {
	return i.ToRulesetPtrOutputWithContext(context.Background())
}

func (i *rulesetPtrType) ToRulesetPtrOutputWithContext(ctx context.Context) RulesetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetPtrOutput)
}

// RulesetArrayInput is an input type that accepts RulesetArray and RulesetArrayOutput values.
// You can construct a concrete instance of `RulesetArrayInput` via:
//
//          RulesetArray{ RulesetArgs{...} }
type RulesetArrayInput interface {
	pulumi.Input

	ToRulesetArrayOutput() RulesetArrayOutput
	ToRulesetArrayOutputWithContext(context.Context) RulesetArrayOutput
}

type RulesetArray []RulesetInput

func (RulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ruleset)(nil)).Elem()
}

func (i RulesetArray) ToRulesetArrayOutput() RulesetArrayOutput {
	return i.ToRulesetArrayOutputWithContext(context.Background())
}

func (i RulesetArray) ToRulesetArrayOutputWithContext(ctx context.Context) RulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetArrayOutput)
}

// RulesetMapInput is an input type that accepts RulesetMap and RulesetMapOutput values.
// You can construct a concrete instance of `RulesetMapInput` via:
//
//          RulesetMap{ "key": RulesetArgs{...} }
type RulesetMapInput interface {
	pulumi.Input

	ToRulesetMapOutput() RulesetMapOutput
	ToRulesetMapOutputWithContext(context.Context) RulesetMapOutput
}

type RulesetMap map[string]RulesetInput

func (RulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ruleset)(nil)).Elem()
}

func (i RulesetMap) ToRulesetMapOutput() RulesetMapOutput {
	return i.ToRulesetMapOutputWithContext(context.Background())
}

func (i RulesetMap) ToRulesetMapOutputWithContext(ctx context.Context) RulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesetMapOutput)
}

type RulesetOutput struct{ *pulumi.OutputState }

func (RulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ruleset)(nil))
}

func (o RulesetOutput) ToRulesetOutput() RulesetOutput {
	return o
}

func (o RulesetOutput) ToRulesetOutputWithContext(ctx context.Context) RulesetOutput {
	return o
}

func (o RulesetOutput) ToRulesetPtrOutput() RulesetPtrOutput {
	return o.ToRulesetPtrOutputWithContext(context.Background())
}

func (o RulesetOutput) ToRulesetPtrOutputWithContext(ctx context.Context) RulesetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ruleset) *Ruleset {
		return &v
	}).(RulesetPtrOutput)
}

type RulesetPtrOutput struct{ *pulumi.OutputState }

func (RulesetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ruleset)(nil))
}

func (o RulesetPtrOutput) ToRulesetPtrOutput() RulesetPtrOutput {
	return o
}

func (o RulesetPtrOutput) ToRulesetPtrOutputWithContext(ctx context.Context) RulesetPtrOutput {
	return o
}

func (o RulesetPtrOutput) Elem() RulesetOutput {
	return o.ApplyT(func(v *Ruleset) Ruleset {
		if v != nil {
			return *v
		}
		var ret Ruleset
		return ret
	}).(RulesetOutput)
}

type RulesetArrayOutput struct{ *pulumi.OutputState }

func (RulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Ruleset)(nil))
}

func (o RulesetArrayOutput) ToRulesetArrayOutput() RulesetArrayOutput {
	return o
}

func (o RulesetArrayOutput) ToRulesetArrayOutputWithContext(ctx context.Context) RulesetArrayOutput {
	return o
}

func (o RulesetArrayOutput) Index(i pulumi.IntInput) RulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Ruleset {
		return vs[0].([]Ruleset)[vs[1].(int)]
	}).(RulesetOutput)
}

type RulesetMapOutput struct{ *pulumi.OutputState }

func (RulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Ruleset)(nil))
}

func (o RulesetMapOutput) ToRulesetMapOutput() RulesetMapOutput {
	return o
}

func (o RulesetMapOutput) ToRulesetMapOutputWithContext(ctx context.Context) RulesetMapOutput {
	return o
}

func (o RulesetMapOutput) MapIndex(k pulumi.StringInput) RulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Ruleset {
		return vs[0].(map[string]Ruleset)[vs[1].(string)]
	}).(RulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetInput)(nil)).Elem(), &Ruleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetPtrInput)(nil)).Elem(), &Ruleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetArrayInput)(nil)).Elem(), RulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesetMapInput)(nil)).Elem(), RulesetMap{})
	pulumi.RegisterOutputType(RulesetOutput{})
	pulumi.RegisterOutputType(RulesetPtrOutput{})
	pulumi.RegisterOutputType(RulesetArrayOutput{})
	pulumi.RegisterOutputType(RulesetMapOutput{})
}
