// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupStreamWatermark(ctx, &cloudflare.LookupStreamWatermarkArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				Identifier: "ea95132c15732412d22c1476fa83f27a",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamWatermark(ctx *pulumi.Context, args *LookupStreamWatermarkArgs, opts ...pulumi.InvokeOption) (*LookupStreamWatermarkResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamWatermarkResult
	err := ctx.Invoke("cloudflare:index/getStreamWatermark:getStreamWatermark", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamWatermark.
type LookupStreamWatermarkArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The unique identifier for a watermark profile.
	Identifier string `pulumi:"identifier"`
}

// A collection of values returned by getStreamWatermark.
type LookupStreamWatermarkResult struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The date and a time a watermark profile was created.
	Created string `pulumi:"created"`
	// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
	DownloadedFrom string `pulumi:"downloadedFrom"`
	// The height of the image in pixels.
	Height int `pulumi:"height"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The unique identifier for a watermark profile.
	Identifier string `pulumi:"identifier"`
	// A short description of the watermark profile.
	Name string `pulumi:"name"`
	// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
	Opacity float64 `pulumi:"opacity"`
	// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
	Padding float64 `pulumi:"padding"`
	// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
	Position string `pulumi:"position"`
	// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
	Scale float64 `pulumi:"scale"`
	// The size of the image in bytes.
	Size float64 `pulumi:"size"`
	// The unique identifier for a watermark profile.
	Uid string `pulumi:"uid"`
	// The width of the image in pixels.
	Width int `pulumi:"width"`
}

func LookupStreamWatermarkOutput(ctx *pulumi.Context, args LookupStreamWatermarkOutputArgs, opts ...pulumi.InvokeOption) LookupStreamWatermarkResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamWatermarkResultOutput, error) {
			args := v.(LookupStreamWatermarkArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getStreamWatermark:getStreamWatermark", args, LookupStreamWatermarkResultOutput{}, options).(LookupStreamWatermarkResultOutput), nil
		}).(LookupStreamWatermarkResultOutput)
}

// A collection of arguments for invoking getStreamWatermark.
type LookupStreamWatermarkOutputArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The unique identifier for a watermark profile.
	Identifier pulumi.StringInput `pulumi:"identifier"`
}

func (LookupStreamWatermarkOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamWatermarkArgs)(nil)).Elem()
}

// A collection of values returned by getStreamWatermark.
type LookupStreamWatermarkResultOutput struct{ *pulumi.OutputState }

func (LookupStreamWatermarkResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamWatermarkResult)(nil)).Elem()
}

func (o LookupStreamWatermarkResultOutput) ToLookupStreamWatermarkResultOutput() LookupStreamWatermarkResultOutput {
	return o
}

func (o LookupStreamWatermarkResultOutput) ToLookupStreamWatermarkResultOutputWithContext(ctx context.Context) LookupStreamWatermarkResultOutput {
	return o
}

// The account identifier tag.
func (o LookupStreamWatermarkResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The date and a time a watermark profile was created.
func (o LookupStreamWatermarkResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Created }).(pulumi.StringOutput)
}

// The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
func (o LookupStreamWatermarkResultOutput) DownloadedFrom() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.DownloadedFrom }).(pulumi.StringOutput)
}

// The height of the image in pixels.
func (o LookupStreamWatermarkResultOutput) Height() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) int { return v.Height }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStreamWatermarkResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique identifier for a watermark profile.
func (o LookupStreamWatermarkResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// A short description of the watermark profile.
func (o LookupStreamWatermarkResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Name }).(pulumi.StringOutput)
}

// The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
func (o LookupStreamWatermarkResultOutput) Opacity() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamWatermarkResult) float64 { return v.Opacity }).(pulumi.Float64Output)
}

// The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
func (o LookupStreamWatermarkResultOutput) Padding() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamWatermarkResult) float64 { return v.Padding }).(pulumi.Float64Output)
}

// The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
func (o LookupStreamWatermarkResultOutput) Position() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Position }).(pulumi.StringOutput)
}

// The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
func (o LookupStreamWatermarkResultOutput) Scale() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamWatermarkResult) float64 { return v.Scale }).(pulumi.Float64Output)
}

// The size of the image in bytes.
func (o LookupStreamWatermarkResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamWatermarkResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// The unique identifier for a watermark profile.
func (o LookupStreamWatermarkResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The width of the image in pixels.
func (o LookupStreamWatermarkResultOutput) Width() pulumi.IntOutput {
	return o.ApplyT(func(v LookupStreamWatermarkResult) int { return v.Width }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamWatermarkResultOutput{})
}
