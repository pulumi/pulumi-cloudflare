// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupR2Bucket(ctx, &cloudflare.LookupR2BucketArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				BucketName: "example-bucket",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupR2Bucket(ctx *pulumi.Context, args *LookupR2BucketArgs, opts ...pulumi.InvokeOption) (*LookupR2BucketResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupR2BucketResult
	err := ctx.Invoke("cloudflare:index/getR2Bucket:getR2Bucket", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getR2Bucket.
type LookupR2BucketArgs struct {
	// Account ID
	AccountId string `pulumi:"accountId"`
	// Name of the bucket
	BucketName string `pulumi:"bucketName"`
}

// A collection of values returned by getR2Bucket.
type LookupR2BucketResult struct {
	// Account ID
	AccountId string `pulumi:"accountId"`
	// Name of the bucket
	BucketName string `pulumi:"bucketName"`
	// Creation timestamp
	CreationDate string `pulumi:"creationDate"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Location of the bucket
	// Available values: "apac", "eeur", "enam", "weur", "wnam", "oc".
	Location string `pulumi:"location"`
	// Name of the bucket
	Name string `pulumi:"name"`
	// Storage class for newly uploaded objects, unless specified otherwise.
	// Available values: "Standard", "InfrequentAccess".
	StorageClass string `pulumi:"storageClass"`
}

func LookupR2BucketOutput(ctx *pulumi.Context, args LookupR2BucketOutputArgs, opts ...pulumi.InvokeOption) LookupR2BucketResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupR2BucketResultOutput, error) {
			args := v.(LookupR2BucketArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getR2Bucket:getR2Bucket", args, LookupR2BucketResultOutput{}, options).(LookupR2BucketResultOutput), nil
		}).(LookupR2BucketResultOutput)
}

// A collection of arguments for invoking getR2Bucket.
type LookupR2BucketOutputArgs struct {
	// Account ID
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the bucket
	BucketName pulumi.StringInput `pulumi:"bucketName"`
}

func (LookupR2BucketOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketArgs)(nil)).Elem()
}

// A collection of values returned by getR2Bucket.
type LookupR2BucketResultOutput struct{ *pulumi.OutputState }

func (LookupR2BucketResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketResult)(nil)).Elem()
}

func (o LookupR2BucketResultOutput) ToLookupR2BucketResultOutput() LookupR2BucketResultOutput {
	return o
}

func (o LookupR2BucketResultOutput) ToLookupR2BucketResultOutputWithContext(ctx context.Context) LookupR2BucketResultOutput {
	return o
}

// Account ID
func (o LookupR2BucketResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket
func (o LookupR2BucketResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Creation timestamp
func (o LookupR2BucketResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupR2BucketResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the bucket
// Available values: "apac", "eeur", "enam", "weur", "wnam", "oc".
func (o LookupR2BucketResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.Location }).(pulumi.StringOutput)
}

// Name of the bucket
func (o LookupR2BucketResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.Name }).(pulumi.StringOutput)
}

// Storage class for newly uploaded objects, unless specified otherwise.
// Available values: "Standard", "InfrequentAccess".
func (o LookupR2BucketResultOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketResult) string { return v.StorageClass }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupR2BucketResultOutput{})
}
