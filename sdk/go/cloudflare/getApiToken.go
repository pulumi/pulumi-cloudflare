// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupApiToken(ctx, &cloudflare.LookupApiTokenArgs{
//				TokenId: pulumi.StringRef("ed17574386854bf78a67040be0a770b0"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupApiToken(ctx *pulumi.Context, args *LookupApiTokenArgs, opts ...pulumi.InvokeOption) (*LookupApiTokenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiTokenResult
	err := ctx.Invoke("cloudflare:index/getApiToken:getApiToken", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApiToken.
type LookupApiTokenArgs struct {
	Filter *GetApiTokenFilter `pulumi:"filter"`
	// Token identifier tag.
	TokenId *string `pulumi:"tokenId"`
}

// A collection of values returned by getApiToken.
type LookupApiTokenResult struct {
	Condition GetApiTokenCondition `pulumi:"condition"`
	// The expiration time on or after which the JWT MUST NOT be accepted for processing.
	ExpiresOn string             `pulumi:"expiresOn"`
	Filter    *GetApiTokenFilter `pulumi:"filter"`
	// Token identifier tag.
	Id string `pulumi:"id"`
	// The time on which the token was created.
	IssuedOn string `pulumi:"issuedOn"`
	// Last time the token was used.
	LastUsedOn string `pulumi:"lastUsedOn"`
	// Last time the token was modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Token name.
	Name string `pulumi:"name"`
	// The time before which the token MUST NOT be accepted for processing.
	NotBefore string `pulumi:"notBefore"`
	// List of access policies assigned to the token.
	Policies []GetApiTokenPolicy `pulumi:"policies"`
	// Status of the token.
	Status string `pulumi:"status"`
	// Token identifier tag.
	TokenId *string `pulumi:"tokenId"`
}

func LookupApiTokenOutput(ctx *pulumi.Context, args LookupApiTokenOutputArgs, opts ...pulumi.InvokeOption) LookupApiTokenResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupApiTokenResultOutput, error) {
			args := v.(LookupApiTokenArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getApiToken:getApiToken", args, LookupApiTokenResultOutput{}, options).(LookupApiTokenResultOutput), nil
		}).(LookupApiTokenResultOutput)
}

// A collection of arguments for invoking getApiToken.
type LookupApiTokenOutputArgs struct {
	Filter GetApiTokenFilterPtrInput `pulumi:"filter"`
	// Token identifier tag.
	TokenId pulumi.StringPtrInput `pulumi:"tokenId"`
}

func (LookupApiTokenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiTokenArgs)(nil)).Elem()
}

// A collection of values returned by getApiToken.
type LookupApiTokenResultOutput struct{ *pulumi.OutputState }

func (LookupApiTokenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiTokenResult)(nil)).Elem()
}

func (o LookupApiTokenResultOutput) ToLookupApiTokenResultOutput() LookupApiTokenResultOutput {
	return o
}

func (o LookupApiTokenResultOutput) ToLookupApiTokenResultOutputWithContext(ctx context.Context) LookupApiTokenResultOutput {
	return o
}

func (o LookupApiTokenResultOutput) Condition() GetApiTokenConditionOutput {
	return o.ApplyT(func(v LookupApiTokenResult) GetApiTokenCondition { return v.Condition }).(GetApiTokenConditionOutput)
}

// The expiration time on or after which the JWT MUST NOT be accepted for processing.
func (o LookupApiTokenResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

func (o LookupApiTokenResultOutput) Filter() GetApiTokenFilterPtrOutput {
	return o.ApplyT(func(v LookupApiTokenResult) *GetApiTokenFilter { return v.Filter }).(GetApiTokenFilterPtrOutput)
}

// Token identifier tag.
func (o LookupApiTokenResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Id }).(pulumi.StringOutput)
}

// The time on which the token was created.
func (o LookupApiTokenResultOutput) IssuedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.IssuedOn }).(pulumi.StringOutput)
}

// Last time the token was used.
func (o LookupApiTokenResultOutput) LastUsedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.LastUsedOn }).(pulumi.StringOutput)
}

// Last time the token was modified.
func (o LookupApiTokenResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Token name.
func (o LookupApiTokenResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time before which the token MUST NOT be accepted for processing.
func (o LookupApiTokenResultOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.NotBefore }).(pulumi.StringOutput)
}

// List of access policies assigned to the token.
func (o LookupApiTokenResultOutput) Policies() GetApiTokenPolicyArrayOutput {
	return o.ApplyT(func(v LookupApiTokenResult) []GetApiTokenPolicy { return v.Policies }).(GetApiTokenPolicyArrayOutput)
}

// Status of the token.
func (o LookupApiTokenResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiTokenResult) string { return v.Status }).(pulumi.StringOutput)
}

// Token identifier tag.
func (o LookupApiTokenResultOutput) TokenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiTokenResult) *string { return v.TokenId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiTokenResultOutput{})
}
