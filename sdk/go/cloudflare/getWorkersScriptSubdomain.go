// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWorkersScriptSubdomain(ctx, &cloudflare.LookupWorkersScriptSubdomainArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				ScriptName: "this-is_my_script-01",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkersScriptSubdomain(ctx *pulumi.Context, args *LookupWorkersScriptSubdomainArgs, opts ...pulumi.InvokeOption) (*LookupWorkersScriptSubdomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkersScriptSubdomainResult
	err := ctx.Invoke("cloudflare:index/getWorkersScriptSubdomain:getWorkersScriptSubdomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkersScriptSubdomain.
type LookupWorkersScriptSubdomainArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
}

// A collection of values returned by getWorkersScriptSubdomain.
type LookupWorkersScriptSubdomainResult struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Whether the Worker is available on the workers.dev subdomain.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled bool `pulumi:"previewsEnabled"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
}

func LookupWorkersScriptSubdomainOutput(ctx *pulumi.Context, args LookupWorkersScriptSubdomainOutputArgs, opts ...pulumi.InvokeOption) LookupWorkersScriptSubdomainResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkersScriptSubdomainResultOutput, error) {
			args := v.(LookupWorkersScriptSubdomainArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWorkersScriptSubdomain:getWorkersScriptSubdomain", args, LookupWorkersScriptSubdomainResultOutput{}, options).(LookupWorkersScriptSubdomainResultOutput), nil
		}).(LookupWorkersScriptSubdomainResultOutput)
}

// A collection of arguments for invoking getWorkersScriptSubdomain.
type LookupWorkersScriptSubdomainOutputArgs struct {
	// Identifier.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput `pulumi:"scriptName"`
}

func (LookupWorkersScriptSubdomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersScriptSubdomainArgs)(nil)).Elem()
}

// A collection of values returned by getWorkersScriptSubdomain.
type LookupWorkersScriptSubdomainResultOutput struct{ *pulumi.OutputState }

func (LookupWorkersScriptSubdomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersScriptSubdomainResult)(nil)).Elem()
}

func (o LookupWorkersScriptSubdomainResultOutput) ToLookupWorkersScriptSubdomainResultOutput() LookupWorkersScriptSubdomainResultOutput {
	return o
}

func (o LookupWorkersScriptSubdomainResultOutput) ToLookupWorkersScriptSubdomainResultOutputWithContext(ctx context.Context) LookupWorkersScriptSubdomainResultOutput {
	return o
}

// Identifier.
func (o LookupWorkersScriptSubdomainResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersScriptSubdomainResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether the Worker is available on the workers.dev subdomain.
func (o LookupWorkersScriptSubdomainResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkersScriptSubdomainResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWorkersScriptSubdomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersScriptSubdomainResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
func (o LookupWorkersScriptSubdomainResultOutput) PreviewsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkersScriptSubdomainResult) bool { return v.PreviewsEnabled }).(pulumi.BoolOutput)
}

// Name of the script, used in URLs and route configuration.
func (o LookupWorkersScriptSubdomainResultOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersScriptSubdomainResult) string { return v.ScriptName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkersScriptSubdomainResultOutput{})
}
