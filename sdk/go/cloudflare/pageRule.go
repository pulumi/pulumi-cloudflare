// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/pageRule:PageRule example '<zone_id>/<pagerule_id>'
// ```
type PageRule struct {
	pulumi.CustomResourceState

	Actions PageRuleActionsOutput `pulumi:"actions"`
	// The timestamp of when the Page Rule was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The timestamp of when the Page Rule was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// The priority of the rule, used to define which Page Rule is processed
	// over another. A higher number indicates a higher priority. For example,
	// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
	// specific Page Rule to take precedence (rule B: `/images/special/*`),
	// specify a higher priority for rule B so it overrides rule A.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The status of the Page Rule.
	// Available values: "active", "disabled".
	Status pulumi.StringOutput `pulumi:"status"`
	Target pulumi.StringOutput `pulumi:"target"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewPageRule registers a new resource with the given unique name, arguments, and options.
func NewPageRule(ctx *pulumi.Context,
	name string, args *PageRuleArgs, opts ...pulumi.ResourceOption) (*PageRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PageRule
	err := ctx.RegisterResource("cloudflare:index/pageRule:PageRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPageRule gets an existing PageRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPageRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PageRuleState, opts ...pulumi.ResourceOption) (*PageRule, error) {
	var resource PageRule
	err := ctx.ReadResource("cloudflare:index/pageRule:PageRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PageRule resources.
type pageRuleState struct {
	Actions *PageRuleActions `pulumi:"actions"`
	// The timestamp of when the Page Rule was created.
	CreatedOn *string `pulumi:"createdOn"`
	// The timestamp of when the Page Rule was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// The priority of the rule, used to define which Page Rule is processed
	// over another. A higher number indicates a higher priority. For example,
	// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
	// specific Page Rule to take precedence (rule B: `/images/special/*`),
	// specify a higher priority for rule B so it overrides rule A.
	Priority *int `pulumi:"priority"`
	// The status of the Page Rule.
	// Available values: "active", "disabled".
	Status *string `pulumi:"status"`
	Target *string `pulumi:"target"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type PageRuleState struct {
	Actions PageRuleActionsPtrInput
	// The timestamp of when the Page Rule was created.
	CreatedOn pulumi.StringPtrInput
	// The timestamp of when the Page Rule was last modified.
	ModifiedOn pulumi.StringPtrInput
	// The priority of the rule, used to define which Page Rule is processed
	// over another. A higher number indicates a higher priority. For example,
	// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
	// specific Page Rule to take precedence (rule B: `/images/special/*`),
	// specify a higher priority for rule B so it overrides rule A.
	Priority pulumi.IntPtrInput
	// The status of the Page Rule.
	// Available values: "active", "disabled".
	Status pulumi.StringPtrInput
	Target pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (PageRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*pageRuleState)(nil)).Elem()
}

type pageRuleArgs struct {
	Actions PageRuleActions `pulumi:"actions"`
	// The priority of the rule, used to define which Page Rule is processed
	// over another. A higher number indicates a higher priority. For example,
	// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
	// specific Page Rule to take precedence (rule B: `/images/special/*`),
	// specify a higher priority for rule B so it overrides rule A.
	Priority *int `pulumi:"priority"`
	// The status of the Page Rule.
	// Available values: "active", "disabled".
	Status *string `pulumi:"status"`
	Target string  `pulumi:"target"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a PageRule resource.
type PageRuleArgs struct {
	Actions PageRuleActionsInput
	// The priority of the rule, used to define which Page Rule is processed
	// over another. A higher number indicates a higher priority. For example,
	// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
	// specific Page Rule to take precedence (rule B: `/images/special/*`),
	// specify a higher priority for rule B so it overrides rule A.
	Priority pulumi.IntPtrInput
	// The status of the Page Rule.
	// Available values: "active", "disabled".
	Status pulumi.StringPtrInput
	Target pulumi.StringInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (PageRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pageRuleArgs)(nil)).Elem()
}

type PageRuleInput interface {
	pulumi.Input

	ToPageRuleOutput() PageRuleOutput
	ToPageRuleOutputWithContext(ctx context.Context) PageRuleOutput
}

func (*PageRule) ElementType() reflect.Type {
	return reflect.TypeOf((**PageRule)(nil)).Elem()
}

func (i *PageRule) ToPageRuleOutput() PageRuleOutput {
	return i.ToPageRuleOutputWithContext(context.Background())
}

func (i *PageRule) ToPageRuleOutputWithContext(ctx context.Context) PageRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageRuleOutput)
}

// PageRuleArrayInput is an input type that accepts PageRuleArray and PageRuleArrayOutput values.
// You can construct a concrete instance of `PageRuleArrayInput` via:
//
//	PageRuleArray{ PageRuleArgs{...} }
type PageRuleArrayInput interface {
	pulumi.Input

	ToPageRuleArrayOutput() PageRuleArrayOutput
	ToPageRuleArrayOutputWithContext(context.Context) PageRuleArrayOutput
}

type PageRuleArray []PageRuleInput

func (PageRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PageRule)(nil)).Elem()
}

func (i PageRuleArray) ToPageRuleArrayOutput() PageRuleArrayOutput {
	return i.ToPageRuleArrayOutputWithContext(context.Background())
}

func (i PageRuleArray) ToPageRuleArrayOutputWithContext(ctx context.Context) PageRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageRuleArrayOutput)
}

// PageRuleMapInput is an input type that accepts PageRuleMap and PageRuleMapOutput values.
// You can construct a concrete instance of `PageRuleMapInput` via:
//
//	PageRuleMap{ "key": PageRuleArgs{...} }
type PageRuleMapInput interface {
	pulumi.Input

	ToPageRuleMapOutput() PageRuleMapOutput
	ToPageRuleMapOutputWithContext(context.Context) PageRuleMapOutput
}

type PageRuleMap map[string]PageRuleInput

func (PageRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PageRule)(nil)).Elem()
}

func (i PageRuleMap) ToPageRuleMapOutput() PageRuleMapOutput {
	return i.ToPageRuleMapOutputWithContext(context.Background())
}

func (i PageRuleMap) ToPageRuleMapOutputWithContext(ctx context.Context) PageRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageRuleMapOutput)
}

type PageRuleOutput struct{ *pulumi.OutputState }

func (PageRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PageRule)(nil)).Elem()
}

func (o PageRuleOutput) ToPageRuleOutput() PageRuleOutput {
	return o
}

func (o PageRuleOutput) ToPageRuleOutputWithContext(ctx context.Context) PageRuleOutput {
	return o
}

func (o PageRuleOutput) Actions() PageRuleActionsOutput {
	return o.ApplyT(func(v *PageRule) PageRuleActionsOutput { return v.Actions }).(PageRuleActionsOutput)
}

// The timestamp of when the Page Rule was created.
func (o PageRuleOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *PageRule) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The timestamp of when the Page Rule was last modified.
func (o PageRuleOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *PageRule) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The priority of the rule, used to define which Page Rule is processed
// over another. A higher number indicates a higher priority. For example,
// if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
// specific Page Rule to take precedence (rule B: `/images/special/*`),
// specify a higher priority for rule B so it overrides rule A.
func (o PageRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *PageRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The status of the Page Rule.
// Available values: "active", "disabled".
func (o PageRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PageRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PageRuleOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *PageRule) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Identifier.
func (o PageRuleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *PageRule) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type PageRuleArrayOutput struct{ *pulumi.OutputState }

func (PageRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PageRule)(nil)).Elem()
}

func (o PageRuleArrayOutput) ToPageRuleArrayOutput() PageRuleArrayOutput {
	return o
}

func (o PageRuleArrayOutput) ToPageRuleArrayOutputWithContext(ctx context.Context) PageRuleArrayOutput {
	return o
}

func (o PageRuleArrayOutput) Index(i pulumi.IntInput) PageRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PageRule {
		return vs[0].([]*PageRule)[vs[1].(int)]
	}).(PageRuleOutput)
}

type PageRuleMapOutput struct{ *pulumi.OutputState }

func (PageRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PageRule)(nil)).Elem()
}

func (o PageRuleMapOutput) ToPageRuleMapOutput() PageRuleMapOutput {
	return o
}

func (o PageRuleMapOutput) ToPageRuleMapOutputWithContext(ctx context.Context) PageRuleMapOutput {
	return o
}

func (o PageRuleMapOutput) MapIndex(k pulumi.StringInput) PageRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PageRule {
		return vs[0].(map[string]*PageRule)[vs[1].(string)]
	}).(PageRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PageRuleInput)(nil)).Elem(), &PageRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*PageRuleArrayInput)(nil)).Elem(), PageRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PageRuleMapInput)(nil)).Elem(), PageRuleMap{})
	pulumi.RegisterOutputType(PageRuleOutput{})
	pulumi.RegisterOutputType(PageRuleArrayOutput{})
	pulumi.RegisterOutputType(PageRuleMapOutput{})
}
