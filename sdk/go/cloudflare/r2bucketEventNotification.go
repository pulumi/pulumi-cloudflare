// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewR2BucketEventNotification(ctx, "example_r2_bucket_event_notification", &cloudflare.R2BucketEventNotificationArgs{
//				AccountId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				BucketName: pulumi.String("example-bucket"),
//				QueueId:    pulumi.String("queue_id"),
//				Rules: cloudflare.R2BucketEventNotificationRuleArray{
//					&cloudflare.R2BucketEventNotificationRuleArgs{
//						Actions: pulumi.StringArray{
//							pulumi.String("PutObject"),
//							pulumi.String("CopyObject"),
//						},
//						Description: pulumi.String("Notifications from source bucket to queue"),
//						Prefix:      pulumi.String("img/"),
//						Suffix:      pulumi.String(".jpeg"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type R2BucketEventNotification struct {
	pulumi.CustomResourceState

	// Account ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringOutput `pulumi:"jurisdiction"`
	// Queue ID.
	QueueId pulumi.StringOutput `pulumi:"queueId"`
	// Name of the queue.
	QueueName pulumi.StringOutput `pulumi:"queueName"`
	// Array of rules to drive notifications.
	Rules R2BucketEventNotificationRuleArrayOutput `pulumi:"rules"`
}

// NewR2BucketEventNotification registers a new resource with the given unique name, arguments, and options.
func NewR2BucketEventNotification(ctx *pulumi.Context,
	name string, args *R2BucketEventNotificationArgs, opts ...pulumi.ResourceOption) (*R2BucketEventNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.QueueId == nil {
		return nil, errors.New("invalid value for required argument 'QueueId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource R2BucketEventNotification
	err := ctx.RegisterResource("cloudflare:index/r2BucketEventNotification:R2BucketEventNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetR2BucketEventNotification gets an existing R2BucketEventNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetR2BucketEventNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *R2BucketEventNotificationState, opts ...pulumi.ResourceOption) (*R2BucketEventNotification, error) {
	var resource R2BucketEventNotification
	err := ctx.ReadResource("cloudflare:index/r2BucketEventNotification:R2BucketEventNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering R2BucketEventNotification resources.
type r2bucketEventNotificationState struct {
	// Account ID.
	AccountId *string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction *string `pulumi:"jurisdiction"`
	// Queue ID.
	QueueId *string `pulumi:"queueId"`
	// Name of the queue.
	QueueName *string `pulumi:"queueName"`
	// Array of rules to drive notifications.
	Rules []R2BucketEventNotificationRule `pulumi:"rules"`
}

type R2BucketEventNotificationState struct {
	// Account ID.
	AccountId pulumi.StringPtrInput
	// Name of the bucket.
	BucketName pulumi.StringPtrInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	// Queue ID.
	QueueId pulumi.StringPtrInput
	// Name of the queue.
	QueueName pulumi.StringPtrInput
	// Array of rules to drive notifications.
	Rules R2BucketEventNotificationRuleArrayInput
}

func (R2BucketEventNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketEventNotificationState)(nil)).Elem()
}

type r2bucketEventNotificationArgs struct {
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction *string `pulumi:"jurisdiction"`
	// Queue ID.
	QueueId string `pulumi:"queueId"`
	// Array of rules to drive notifications.
	Rules []R2BucketEventNotificationRule `pulumi:"rules"`
}

// The set of arguments for constructing a R2BucketEventNotification resource.
type R2BucketEventNotificationArgs struct {
	// Account ID.
	AccountId pulumi.StringInput
	// Name of the bucket.
	BucketName pulumi.StringInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	// Queue ID.
	QueueId pulumi.StringInput
	// Array of rules to drive notifications.
	Rules R2BucketEventNotificationRuleArrayInput
}

func (R2BucketEventNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketEventNotificationArgs)(nil)).Elem()
}

type R2BucketEventNotificationInput interface {
	pulumi.Input

	ToR2BucketEventNotificationOutput() R2BucketEventNotificationOutput
	ToR2BucketEventNotificationOutputWithContext(ctx context.Context) R2BucketEventNotificationOutput
}

func (*R2BucketEventNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketEventNotification)(nil)).Elem()
}

func (i *R2BucketEventNotification) ToR2BucketEventNotificationOutput() R2BucketEventNotificationOutput {
	return i.ToR2BucketEventNotificationOutputWithContext(context.Background())
}

func (i *R2BucketEventNotification) ToR2BucketEventNotificationOutputWithContext(ctx context.Context) R2BucketEventNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketEventNotificationOutput)
}

// R2BucketEventNotificationArrayInput is an input type that accepts R2BucketEventNotificationArray and R2BucketEventNotificationArrayOutput values.
// You can construct a concrete instance of `R2BucketEventNotificationArrayInput` via:
//
//	R2BucketEventNotificationArray{ R2BucketEventNotificationArgs{...} }
type R2BucketEventNotificationArrayInput interface {
	pulumi.Input

	ToR2BucketEventNotificationArrayOutput() R2BucketEventNotificationArrayOutput
	ToR2BucketEventNotificationArrayOutputWithContext(context.Context) R2BucketEventNotificationArrayOutput
}

type R2BucketEventNotificationArray []R2BucketEventNotificationInput

func (R2BucketEventNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketEventNotification)(nil)).Elem()
}

func (i R2BucketEventNotificationArray) ToR2BucketEventNotificationArrayOutput() R2BucketEventNotificationArrayOutput {
	return i.ToR2BucketEventNotificationArrayOutputWithContext(context.Background())
}

func (i R2BucketEventNotificationArray) ToR2BucketEventNotificationArrayOutputWithContext(ctx context.Context) R2BucketEventNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketEventNotificationArrayOutput)
}

// R2BucketEventNotificationMapInput is an input type that accepts R2BucketEventNotificationMap and R2BucketEventNotificationMapOutput values.
// You can construct a concrete instance of `R2BucketEventNotificationMapInput` via:
//
//	R2BucketEventNotificationMap{ "key": R2BucketEventNotificationArgs{...} }
type R2BucketEventNotificationMapInput interface {
	pulumi.Input

	ToR2BucketEventNotificationMapOutput() R2BucketEventNotificationMapOutput
	ToR2BucketEventNotificationMapOutputWithContext(context.Context) R2BucketEventNotificationMapOutput
}

type R2BucketEventNotificationMap map[string]R2BucketEventNotificationInput

func (R2BucketEventNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketEventNotification)(nil)).Elem()
}

func (i R2BucketEventNotificationMap) ToR2BucketEventNotificationMapOutput() R2BucketEventNotificationMapOutput {
	return i.ToR2BucketEventNotificationMapOutputWithContext(context.Background())
}

func (i R2BucketEventNotificationMap) ToR2BucketEventNotificationMapOutputWithContext(ctx context.Context) R2BucketEventNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketEventNotificationMapOutput)
}

type R2BucketEventNotificationOutput struct{ *pulumi.OutputState }

func (R2BucketEventNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketEventNotification)(nil)).Elem()
}

func (o R2BucketEventNotificationOutput) ToR2BucketEventNotificationOutput() R2BucketEventNotificationOutput {
	return o
}

func (o R2BucketEventNotificationOutput) ToR2BucketEventNotificationOutputWithContext(ctx context.Context) R2BucketEventNotificationOutput {
	return o
}

// Account ID.
func (o R2BucketEventNotificationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket.
func (o R2BucketEventNotificationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Jurisdiction of the bucket
func (o R2BucketEventNotificationOutput) Jurisdiction() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) pulumi.StringOutput { return v.Jurisdiction }).(pulumi.StringOutput)
}

// Queue ID.
func (o R2BucketEventNotificationOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

// Name of the queue.
func (o R2BucketEventNotificationOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) pulumi.StringOutput { return v.QueueName }).(pulumi.StringOutput)
}

// Array of rules to drive notifications.
func (o R2BucketEventNotificationOutput) Rules() R2BucketEventNotificationRuleArrayOutput {
	return o.ApplyT(func(v *R2BucketEventNotification) R2BucketEventNotificationRuleArrayOutput { return v.Rules }).(R2BucketEventNotificationRuleArrayOutput)
}

type R2BucketEventNotificationArrayOutput struct{ *pulumi.OutputState }

func (R2BucketEventNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketEventNotification)(nil)).Elem()
}

func (o R2BucketEventNotificationArrayOutput) ToR2BucketEventNotificationArrayOutput() R2BucketEventNotificationArrayOutput {
	return o
}

func (o R2BucketEventNotificationArrayOutput) ToR2BucketEventNotificationArrayOutputWithContext(ctx context.Context) R2BucketEventNotificationArrayOutput {
	return o
}

func (o R2BucketEventNotificationArrayOutput) Index(i pulumi.IntInput) R2BucketEventNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *R2BucketEventNotification {
		return vs[0].([]*R2BucketEventNotification)[vs[1].(int)]
	}).(R2BucketEventNotificationOutput)
}

type R2BucketEventNotificationMapOutput struct{ *pulumi.OutputState }

func (R2BucketEventNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketEventNotification)(nil)).Elem()
}

func (o R2BucketEventNotificationMapOutput) ToR2BucketEventNotificationMapOutput() R2BucketEventNotificationMapOutput {
	return o
}

func (o R2BucketEventNotificationMapOutput) ToR2BucketEventNotificationMapOutputWithContext(ctx context.Context) R2BucketEventNotificationMapOutput {
	return o
}

func (o R2BucketEventNotificationMapOutput) MapIndex(k pulumi.StringInput) R2BucketEventNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *R2BucketEventNotification {
		return vs[0].(map[string]*R2BucketEventNotification)[vs[1].(string)]
	}).(R2BucketEventNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketEventNotificationInput)(nil)).Elem(), &R2BucketEventNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketEventNotificationArrayInput)(nil)).Elem(), R2BucketEventNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketEventNotificationMapInput)(nil)).Elem(), R2BucketEventNotificationMap{})
	pulumi.RegisterOutputType(R2BucketEventNotificationOutput{})
	pulumi.RegisterOutputType(R2BucketEventNotificationArrayOutput{})
	pulumi.RegisterOutputType(R2BucketEventNotificationMapOutput{})
}
