// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZeroTrustTunnelWarpConnector(ctx, &cloudflare.LookupZeroTrustTunnelWarpConnectorArgs{
//				AccountId: "699d98642c564d2e855e9661899b7252",
//				TunnelId:  pulumi.StringRef("f70ff985-a4ef-4643-bbbc-4a0ed4fc8415"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZeroTrustTunnelWarpConnector(ctx *pulumi.Context, args *LookupZeroTrustTunnelWarpConnectorArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustTunnelWarpConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustTunnelWarpConnectorResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustTunnelWarpConnector:getZeroTrustTunnelWarpConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustTunnelWarpConnector.
type LookupZeroTrustTunnelWarpConnectorArgs struct {
	// Cloudflare account ID
	AccountId string                                 `pulumi:"accountId"`
	Filter    *GetZeroTrustTunnelWarpConnectorFilter `pulumi:"filter"`
	// UUID of the tunnel.
	TunnelId *string `pulumi:"tunnelId"`
}

// A collection of values returned by getZeroTrustTunnelWarpConnector.
type LookupZeroTrustTunnelWarpConnectorResult struct {
	// Cloudflare account ID
	AccountId string `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag string `pulumi:"accountTag"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	//
	// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
	Connections []GetZeroTrustTunnelWarpConnectorConnection `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt string `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt string `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt string `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt string                                 `pulumi:"deletedAt"`
	Filter    *GetZeroTrustTunnelWarpConnectorFilter `pulumi:"filter"`
	// UUID of the tunnel.
	Id string `pulumi:"id"`
	// Metadata associated with the tunnel.
	Metadata string `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name string `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status string `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType string `pulumi:"tunType"`
	// UUID of the tunnel.
	TunnelId *string `pulumi:"tunnelId"`
}

func LookupZeroTrustTunnelWarpConnectorOutput(ctx *pulumi.Context, args LookupZeroTrustTunnelWarpConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustTunnelWarpConnectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustTunnelWarpConnectorResultOutput, error) {
			args := v.(LookupZeroTrustTunnelWarpConnectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZeroTrustTunnelWarpConnector:getZeroTrustTunnelWarpConnector", args, LookupZeroTrustTunnelWarpConnectorResultOutput{}, options).(LookupZeroTrustTunnelWarpConnectorResultOutput), nil
		}).(LookupZeroTrustTunnelWarpConnectorResultOutput)
}

// A collection of arguments for invoking getZeroTrustTunnelWarpConnector.
type LookupZeroTrustTunnelWarpConnectorOutputArgs struct {
	// Cloudflare account ID
	AccountId pulumi.StringInput                            `pulumi:"accountId"`
	Filter    GetZeroTrustTunnelWarpConnectorFilterPtrInput `pulumi:"filter"`
	// UUID of the tunnel.
	TunnelId pulumi.StringPtrInput `pulumi:"tunnelId"`
}

func (LookupZeroTrustTunnelWarpConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelWarpConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustTunnelWarpConnector.
type LookupZeroTrustTunnelWarpConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustTunnelWarpConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelWarpConnectorResult)(nil)).Elem()
}

func (o LookupZeroTrustTunnelWarpConnectorResultOutput) ToLookupZeroTrustTunnelWarpConnectorResultOutput() LookupZeroTrustTunnelWarpConnectorResultOutput {
	return o
}

func (o LookupZeroTrustTunnelWarpConnectorResultOutput) ToLookupZeroTrustTunnelWarpConnectorResultOutputWithContext(ctx context.Context) LookupZeroTrustTunnelWarpConnectorResultOutput {
	return o
}

// Cloudflare account ID
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Cloudflare account ID
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) AccountTag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.AccountTag }).(pulumi.StringOutput)
}

// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
//
// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Connections() GetZeroTrustTunnelWarpConnectorConnectionArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) []GetZeroTrustTunnelWarpConnectorConnection {
		return v.Connections
	}).(GetZeroTrustTunnelWarpConnectorConnectionArrayOutput)
}

// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) ConnsActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.ConnsActiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) ConnsInactiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.ConnsInactiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was created.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.DeletedAt }).(pulumi.StringOutput)
}

func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Filter() GetZeroTrustTunnelWarpConnectorFilterPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) *GetZeroTrustTunnelWarpConnectorFilter {
		return v.Filter
	}).(GetZeroTrustTunnelWarpConnectorFilterPtrOutput)
}

// UUID of the tunnel.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Metadata associated with the tunnel.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.Metadata }).(pulumi.StringOutput)
}

// A user-friendly name for a tunnel.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) bool { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
// Available values: "inactive", "degraded", "healthy", "down".
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of tunnel.
// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) TunType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) string { return v.TunType }).(pulumi.StringOutput)
}

// UUID of the tunnel.
func (o LookupZeroTrustTunnelWarpConnectorResultOutput) TunnelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorResult) *string { return v.TunnelId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustTunnelWarpConnectorResultOutput{})
}
