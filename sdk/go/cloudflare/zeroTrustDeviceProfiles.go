// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Device Settings Policy resource. Device policies configure settings applied to WARP devices.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustDeviceProfiles(ctx, "developer_warp_policy", &cloudflare.ZeroTrustDeviceProfilesArgs{
//				AccountId:           pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:                pulumi.String("Developers WARP settings policy"),
//				Description:         pulumi.String("Developers WARP settings policy description"),
//				Precedence:          pulumi.Int(10),
//				Match:               pulumi.String("any(identity.groups.name[*] in {\"Developers\"})"),
//				Default:             pulumi.Bool(false),
//				Enabled:             pulumi.Bool(true),
//				AllowModeSwitch:     pulumi.Bool(true),
//				AllowUpdates:        pulumi.Bool(true),
//				AllowedToLeave:      pulumi.Bool(true),
//				AutoConnect:         pulumi.Int(0),
//				CaptivePortal:       pulumi.Int(5),
//				DisableAutoFallback: pulumi.Bool(true),
//				SupportUrl:          pulumi.String("https://cloudflare.com"),
//				SwitchLocked:        pulumi.Bool(true),
//				ServiceModeV2Mode:   pulumi.String("warp"),
//				ServiceModeV2Port:   pulumi.Int(3000),
//				ExcludeOfficeIps:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// For default device settings policies you must use "default" as the policy ID.
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustDeviceProfiles:ZeroTrustDeviceProfiles example <account_id>/<device_policy_id>
// ```
type ZeroTrustDeviceProfiles struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrOutput `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrOutput `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrOutput `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrOutput `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrOutput `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrOutput `pulumi:"default"`
	// Description of Policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrOutput `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrOutput `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrOutput `pulumi:"match"`
	// Name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrOutput `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrOutput `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrOutput `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrOutput `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrOutput `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
	TunnelProtocol pulumi.StringPtrOutput `pulumi:"tunnelProtocol"`
}

// NewZeroTrustDeviceProfiles registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustDeviceProfiles(ctx *pulumi.Context,
	name string, args *ZeroTrustDeviceProfilesArgs, opts ...pulumi.ResourceOption) (*ZeroTrustDeviceProfiles, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustDeviceProfiles
	err := ctx.RegisterResource("cloudflare:index/zeroTrustDeviceProfiles:ZeroTrustDeviceProfiles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustDeviceProfiles gets an existing ZeroTrustDeviceProfiles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustDeviceProfiles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustDeviceProfilesState, opts ...pulumi.ResourceOption) (*ZeroTrustDeviceProfiles, error) {
	var resource ZeroTrustDeviceProfiles
	err := ctx.ReadResource("cloudflare:index/zeroTrustDeviceProfiles:ZeroTrustDeviceProfiles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustDeviceProfiles resources.
type zeroTrustDeviceProfilesState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect *int `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal *int `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default *bool `pulumi:"default"`
	// Description of Policy.
	Description *string `pulumi:"description"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match *string `pulumi:"match"`
	// Name of the policy.
	Name *string `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence *int `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode *string `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port *int `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl *string `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked *bool `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
}

type ZeroTrustDeviceProfilesState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrInput
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrInput
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrInput
	// Description of Policy.
	Description pulumi.StringPtrInput
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringPtrInput
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrInput
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrInput
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrInput
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrInput
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrInput
	// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
	TunnelProtocol pulumi.StringPtrInput
}

func (ZeroTrustDeviceProfilesState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDeviceProfilesState)(nil)).Elem()
}

type zeroTrustDeviceProfilesArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// Whether to allow mode switch for this policy.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to allow updates under this policy.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect *int `pulumi:"autoConnect"`
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal *int `pulumi:"captivePortal"`
	// Whether the policy refers to the default account policy.
	Default *bool `pulumi:"default"`
	// Description of Policy.
	Description string `pulumi:"description"`
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match *string `pulumi:"match"`
	// Name of the policy.
	Name string `pulumi:"name"`
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence *int `pulumi:"precedence"`
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode *string `pulumi:"serviceModeV2Mode"`
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port *int `pulumi:"serviceModeV2Port"`
	// The support URL that will be opened when sending feedback.
	SupportUrl *string `pulumi:"supportUrl"`
	// Enablement of the ZT client switch lock.
	SwitchLocked *bool `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
}

// The set of arguments for constructing a ZeroTrustDeviceProfiles resource.
type ZeroTrustDeviceProfilesArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// Whether to allow mode switch for this policy.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to allow updates under this policy.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization. Defaults to `true`.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.IntPtrInput
	// The captive portal value for this policy. Defaults to `180`.
	CaptivePortal pulumi.IntPtrInput
	// Whether the policy refers to the default account policy.
	Default pulumi.BoolPtrInput
	// Description of Policy.
	Description pulumi.StringInput
	// Whether to disable auto fallback for this policy.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to split tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
	Match pulumi.StringPtrInput
	// Name of the policy.
	Name pulumi.StringInput
	// The precedence of the policy. Lower values indicate higher precedence.
	Precedence pulumi.IntPtrInput
	// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
	ServiceModeV2Mode pulumi.StringPtrInput
	// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
	ServiceModeV2Port pulumi.IntPtrInput
	// The support URL that will be opened when sending feedback.
	SupportUrl pulumi.StringPtrInput
	// Enablement of the ZT client switch lock.
	SwitchLocked pulumi.BoolPtrInput
	// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
	TunnelProtocol pulumi.StringPtrInput
}

func (ZeroTrustDeviceProfilesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDeviceProfilesArgs)(nil)).Elem()
}

type ZeroTrustDeviceProfilesInput interface {
	pulumi.Input

	ToZeroTrustDeviceProfilesOutput() ZeroTrustDeviceProfilesOutput
	ToZeroTrustDeviceProfilesOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesOutput
}

func (*ZeroTrustDeviceProfiles) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (i *ZeroTrustDeviceProfiles) ToZeroTrustDeviceProfilesOutput() ZeroTrustDeviceProfilesOutput {
	return i.ToZeroTrustDeviceProfilesOutputWithContext(context.Background())
}

func (i *ZeroTrustDeviceProfiles) ToZeroTrustDeviceProfilesOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceProfilesOutput)
}

// ZeroTrustDeviceProfilesArrayInput is an input type that accepts ZeroTrustDeviceProfilesArray and ZeroTrustDeviceProfilesArrayOutput values.
// You can construct a concrete instance of `ZeroTrustDeviceProfilesArrayInput` via:
//
//	ZeroTrustDeviceProfilesArray{ ZeroTrustDeviceProfilesArgs{...} }
type ZeroTrustDeviceProfilesArrayInput interface {
	pulumi.Input

	ToZeroTrustDeviceProfilesArrayOutput() ZeroTrustDeviceProfilesArrayOutput
	ToZeroTrustDeviceProfilesArrayOutputWithContext(context.Context) ZeroTrustDeviceProfilesArrayOutput
}

type ZeroTrustDeviceProfilesArray []ZeroTrustDeviceProfilesInput

func (ZeroTrustDeviceProfilesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (i ZeroTrustDeviceProfilesArray) ToZeroTrustDeviceProfilesArrayOutput() ZeroTrustDeviceProfilesArrayOutput {
	return i.ToZeroTrustDeviceProfilesArrayOutputWithContext(context.Background())
}

func (i ZeroTrustDeviceProfilesArray) ToZeroTrustDeviceProfilesArrayOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceProfilesArrayOutput)
}

// ZeroTrustDeviceProfilesMapInput is an input type that accepts ZeroTrustDeviceProfilesMap and ZeroTrustDeviceProfilesMapOutput values.
// You can construct a concrete instance of `ZeroTrustDeviceProfilesMapInput` via:
//
//	ZeroTrustDeviceProfilesMap{ "key": ZeroTrustDeviceProfilesArgs{...} }
type ZeroTrustDeviceProfilesMapInput interface {
	pulumi.Input

	ToZeroTrustDeviceProfilesMapOutput() ZeroTrustDeviceProfilesMapOutput
	ToZeroTrustDeviceProfilesMapOutputWithContext(context.Context) ZeroTrustDeviceProfilesMapOutput
}

type ZeroTrustDeviceProfilesMap map[string]ZeroTrustDeviceProfilesInput

func (ZeroTrustDeviceProfilesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (i ZeroTrustDeviceProfilesMap) ToZeroTrustDeviceProfilesMapOutput() ZeroTrustDeviceProfilesMapOutput {
	return i.ToZeroTrustDeviceProfilesMapOutputWithContext(context.Background())
}

func (i ZeroTrustDeviceProfilesMap) ToZeroTrustDeviceProfilesMapOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceProfilesMapOutput)
}

type ZeroTrustDeviceProfilesOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceProfilesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (o ZeroTrustDeviceProfilesOutput) ToZeroTrustDeviceProfilesOutput() ZeroTrustDeviceProfilesOutput {
	return o
}

func (o ZeroTrustDeviceProfilesOutput) ToZeroTrustDeviceProfilesOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesOutput {
	return o
}

// The account identifier to target for the resource.
func (o ZeroTrustDeviceProfilesOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether to allow mode switch for this policy.
func (o ZeroTrustDeviceProfilesOutput) AllowModeSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.AllowModeSwitch }).(pulumi.BoolPtrOutput)
}

// Whether to allow updates under this policy.
func (o ZeroTrustDeviceProfilesOutput) AllowUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.AllowUpdates }).(pulumi.BoolPtrOutput)
}

// Whether to allow devices to leave the organization. Defaults to `true`.
func (o ZeroTrustDeviceProfilesOutput) AllowedToLeave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.AllowedToLeave }).(pulumi.BoolPtrOutput)
}

// The amount of time in seconds to reconnect after having been disabled.
func (o ZeroTrustDeviceProfilesOutput) AutoConnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.IntPtrOutput { return v.AutoConnect }).(pulumi.IntPtrOutput)
}

// The captive portal value for this policy. Defaults to `180`.
func (o ZeroTrustDeviceProfilesOutput) CaptivePortal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.IntPtrOutput { return v.CaptivePortal }).(pulumi.IntPtrOutput)
}

// Whether the policy refers to the default account policy.
func (o ZeroTrustDeviceProfilesOutput) Default() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.Default }).(pulumi.BoolPtrOutput)
}

// Description of Policy.
func (o ZeroTrustDeviceProfilesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to disable auto fallback for this policy.
func (o ZeroTrustDeviceProfilesOutput) DisableAutoFallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.DisableAutoFallback }).(pulumi.BoolPtrOutput)
}

// Whether the policy is enabled (cannot be set for default policies). Defaults to `true`.
func (o ZeroTrustDeviceProfilesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Whether to add Microsoft IPs to split tunnel exclusions.
func (o ZeroTrustDeviceProfilesOutput) ExcludeOfficeIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.ExcludeOfficeIps }).(pulumi.BoolPtrOutput)
}

// Wirefilter expression to match a device against when evaluating whether this policy should take effect for that device.
func (o ZeroTrustDeviceProfilesOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringPtrOutput { return v.Match }).(pulumi.StringPtrOutput)
}

// Name of the policy.
func (o ZeroTrustDeviceProfilesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The precedence of the policy. Lower values indicate higher precedence.
func (o ZeroTrustDeviceProfilesOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.IntPtrOutput { return v.Precedence }).(pulumi.IntPtrOutput)
}

// The service mode. Available values: `1dot1`, `warp`, `proxy`, `postureOnly`, `warpTunnelOnly`. Defaults to `warp`.
func (o ZeroTrustDeviceProfilesOutput) ServiceModeV2Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringPtrOutput { return v.ServiceModeV2Mode }).(pulumi.StringPtrOutput)
}

// The port to use for the proxy service mode. Required when using `serviceModeV2Mode`.
func (o ZeroTrustDeviceProfilesOutput) ServiceModeV2Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.IntPtrOutput { return v.ServiceModeV2Port }).(pulumi.IntPtrOutput)
}

// The support URL that will be opened when sending feedback.
func (o ZeroTrustDeviceProfilesOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringPtrOutput { return v.SupportUrl }).(pulumi.StringPtrOutput)
}

// Enablement of the ZT client switch lock.
func (o ZeroTrustDeviceProfilesOutput) SwitchLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.BoolPtrOutput { return v.SwitchLocked }).(pulumi.BoolPtrOutput)
}

// Determines which tunnel protocol to use. Available values: `""`, `wireguard`, `masque`. Defaults to `wireguard`.
func (o ZeroTrustDeviceProfilesOutput) TunnelProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceProfiles) pulumi.StringPtrOutput { return v.TunnelProtocol }).(pulumi.StringPtrOutput)
}

type ZeroTrustDeviceProfilesArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceProfilesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (o ZeroTrustDeviceProfilesArrayOutput) ToZeroTrustDeviceProfilesArrayOutput() ZeroTrustDeviceProfilesArrayOutput {
	return o
}

func (o ZeroTrustDeviceProfilesArrayOutput) ToZeroTrustDeviceProfilesArrayOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesArrayOutput {
	return o
}

func (o ZeroTrustDeviceProfilesArrayOutput) Index(i pulumi.IntInput) ZeroTrustDeviceProfilesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustDeviceProfiles {
		return vs[0].([]*ZeroTrustDeviceProfiles)[vs[1].(int)]
	}).(ZeroTrustDeviceProfilesOutput)
}

type ZeroTrustDeviceProfilesMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceProfilesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDeviceProfiles)(nil)).Elem()
}

func (o ZeroTrustDeviceProfilesMapOutput) ToZeroTrustDeviceProfilesMapOutput() ZeroTrustDeviceProfilesMapOutput {
	return o
}

func (o ZeroTrustDeviceProfilesMapOutput) ToZeroTrustDeviceProfilesMapOutputWithContext(ctx context.Context) ZeroTrustDeviceProfilesMapOutput {
	return o
}

func (o ZeroTrustDeviceProfilesMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustDeviceProfilesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustDeviceProfiles {
		return vs[0].(map[string]*ZeroTrustDeviceProfiles)[vs[1].(string)]
	}).(ZeroTrustDeviceProfilesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceProfilesInput)(nil)).Elem(), &ZeroTrustDeviceProfiles{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceProfilesArrayInput)(nil)).Elem(), ZeroTrustDeviceProfilesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceProfilesMapInput)(nil)).Elem(), ZeroTrustDeviceProfilesMap{})
	pulumi.RegisterOutputType(ZeroTrustDeviceProfilesOutput{})
	pulumi.RegisterOutputType(ZeroTrustDeviceProfilesArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustDeviceProfilesMapOutput{})
}
