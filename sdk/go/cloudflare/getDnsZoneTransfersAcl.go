// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupDnsZoneTransfersAcl(ctx, &cloudflare.LookupDnsZoneTransfersAclArgs{
//				AccountId: "01a7362d577a6c3019a474fd6f485823",
//				AclId:     pulumi.StringRef("23ff594956f20c2a721606e94745a8aa"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsZoneTransfersAcl(ctx *pulumi.Context, args *LookupDnsZoneTransfersAclArgs, opts ...pulumi.InvokeOption) (*LookupDnsZoneTransfersAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsZoneTransfersAclResult
	err := ctx.Invoke("cloudflare:index/getDnsZoneTransfersAcl:getDnsZoneTransfersAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsZoneTransfersAcl.
type LookupDnsZoneTransfersAclArgs struct {
	AccountId string  `pulumi:"accountId"`
	AclId     *string `pulumi:"aclId"`
}

// A collection of values returned by getDnsZoneTransfersAcl.
type LookupDnsZoneTransfersAclResult struct {
	AccountId string  `pulumi:"accountId"`
	AclId     *string `pulumi:"aclId"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
	IpRange string `pulumi:"ipRange"`
	// The name of the acl.
	Name string `pulumi:"name"`
}

func LookupDnsZoneTransfersAclOutput(ctx *pulumi.Context, args LookupDnsZoneTransfersAclOutputArgs, opts ...pulumi.InvokeOption) LookupDnsZoneTransfersAclResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsZoneTransfersAclResultOutput, error) {
			args := v.(LookupDnsZoneTransfersAclArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getDnsZoneTransfersAcl:getDnsZoneTransfersAcl", args, LookupDnsZoneTransfersAclResultOutput{}, options).(LookupDnsZoneTransfersAclResultOutput), nil
		}).(LookupDnsZoneTransfersAclResultOutput)
}

// A collection of arguments for invoking getDnsZoneTransfersAcl.
type LookupDnsZoneTransfersAclOutputArgs struct {
	AccountId pulumi.StringInput    `pulumi:"accountId"`
	AclId     pulumi.StringPtrInput `pulumi:"aclId"`
}

func (LookupDnsZoneTransfersAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersAclArgs)(nil)).Elem()
}

// A collection of values returned by getDnsZoneTransfersAcl.
type LookupDnsZoneTransfersAclResultOutput struct{ *pulumi.OutputState }

func (LookupDnsZoneTransfersAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersAclResult)(nil)).Elem()
}

func (o LookupDnsZoneTransfersAclResultOutput) ToLookupDnsZoneTransfersAclResultOutput() LookupDnsZoneTransfersAclResultOutput {
	return o
}

func (o LookupDnsZoneTransfersAclResultOutput) ToLookupDnsZoneTransfersAclResultOutputWithContext(ctx context.Context) LookupDnsZoneTransfersAclResultOutput {
	return o
}

func (o LookupDnsZoneTransfersAclResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersAclResult) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o LookupDnsZoneTransfersAclResultOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersAclResult) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// The ID of this resource.
func (o LookupDnsZoneTransfersAclResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersAclResult) string { return v.Id }).(pulumi.StringOutput)
}

// Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
func (o LookupDnsZoneTransfersAclResultOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersAclResult) string { return v.IpRange }).(pulumi.StringOutput)
}

// The name of the acl.
func (o LookupDnsZoneTransfersAclResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersAclResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsZoneTransfersAclResultOutput{})
}
