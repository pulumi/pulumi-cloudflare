// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type MagicNetworkMonitoringConfiguration struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling pulumi.Float64Output `pulumi:"defaultSampling"`
	// The account name.
	Name        pulumi.StringOutput                                      `pulumi:"name"`
	RouterIps   pulumi.StringArrayOutput                                 `pulumi:"routerIps"`
	WarpDevices MagicNetworkMonitoringConfigurationWarpDeviceArrayOutput `pulumi:"warpDevices"`
}

// NewMagicNetworkMonitoringConfiguration registers a new resource with the given unique name, arguments, and options.
func NewMagicNetworkMonitoringConfiguration(ctx *pulumi.Context,
	name string, args *MagicNetworkMonitoringConfigurationArgs, opts ...pulumi.ResourceOption) (*MagicNetworkMonitoringConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicNetworkMonitoringConfiguration
	err := ctx.RegisterResource("cloudflare:index/magicNetworkMonitoringConfiguration:MagicNetworkMonitoringConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicNetworkMonitoringConfiguration gets an existing MagicNetworkMonitoringConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicNetworkMonitoringConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicNetworkMonitoringConfigurationState, opts ...pulumi.ResourceOption) (*MagicNetworkMonitoringConfiguration, error) {
	var resource MagicNetworkMonitoringConfiguration
	err := ctx.ReadResource("cloudflare:index/magicNetworkMonitoringConfiguration:MagicNetworkMonitoringConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicNetworkMonitoringConfiguration resources.
type magicNetworkMonitoringConfigurationState struct {
	AccountId *string `pulumi:"accountId"`
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling *float64 `pulumi:"defaultSampling"`
	// The account name.
	Name        *string                                         `pulumi:"name"`
	RouterIps   []string                                        `pulumi:"routerIps"`
	WarpDevices []MagicNetworkMonitoringConfigurationWarpDevice `pulumi:"warpDevices"`
}

type MagicNetworkMonitoringConfigurationState struct {
	AccountId pulumi.StringPtrInput
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling pulumi.Float64PtrInput
	// The account name.
	Name        pulumi.StringPtrInput
	RouterIps   pulumi.StringArrayInput
	WarpDevices MagicNetworkMonitoringConfigurationWarpDeviceArrayInput
}

func (MagicNetworkMonitoringConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicNetworkMonitoringConfigurationState)(nil)).Elem()
}

type magicNetworkMonitoringConfigurationArgs struct {
	AccountId string `pulumi:"accountId"`
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling *float64 `pulumi:"defaultSampling"`
	// The account name.
	Name        string                                          `pulumi:"name"`
	RouterIps   []string                                        `pulumi:"routerIps"`
	WarpDevices []MagicNetworkMonitoringConfigurationWarpDevice `pulumi:"warpDevices"`
}

// The set of arguments for constructing a MagicNetworkMonitoringConfiguration resource.
type MagicNetworkMonitoringConfigurationArgs struct {
	AccountId pulumi.StringInput
	// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
	DefaultSampling pulumi.Float64PtrInput
	// The account name.
	Name        pulumi.StringInput
	RouterIps   pulumi.StringArrayInput
	WarpDevices MagicNetworkMonitoringConfigurationWarpDeviceArrayInput
}

func (MagicNetworkMonitoringConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicNetworkMonitoringConfigurationArgs)(nil)).Elem()
}

type MagicNetworkMonitoringConfigurationInput interface {
	pulumi.Input

	ToMagicNetworkMonitoringConfigurationOutput() MagicNetworkMonitoringConfigurationOutput
	ToMagicNetworkMonitoringConfigurationOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationOutput
}

func (*MagicNetworkMonitoringConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (i *MagicNetworkMonitoringConfiguration) ToMagicNetworkMonitoringConfigurationOutput() MagicNetworkMonitoringConfigurationOutput {
	return i.ToMagicNetworkMonitoringConfigurationOutputWithContext(context.Background())
}

func (i *MagicNetworkMonitoringConfiguration) ToMagicNetworkMonitoringConfigurationOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicNetworkMonitoringConfigurationOutput)
}

// MagicNetworkMonitoringConfigurationArrayInput is an input type that accepts MagicNetworkMonitoringConfigurationArray and MagicNetworkMonitoringConfigurationArrayOutput values.
// You can construct a concrete instance of `MagicNetworkMonitoringConfigurationArrayInput` via:
//
//	MagicNetworkMonitoringConfigurationArray{ MagicNetworkMonitoringConfigurationArgs{...} }
type MagicNetworkMonitoringConfigurationArrayInput interface {
	pulumi.Input

	ToMagicNetworkMonitoringConfigurationArrayOutput() MagicNetworkMonitoringConfigurationArrayOutput
	ToMagicNetworkMonitoringConfigurationArrayOutputWithContext(context.Context) MagicNetworkMonitoringConfigurationArrayOutput
}

type MagicNetworkMonitoringConfigurationArray []MagicNetworkMonitoringConfigurationInput

func (MagicNetworkMonitoringConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (i MagicNetworkMonitoringConfigurationArray) ToMagicNetworkMonitoringConfigurationArrayOutput() MagicNetworkMonitoringConfigurationArrayOutput {
	return i.ToMagicNetworkMonitoringConfigurationArrayOutputWithContext(context.Background())
}

func (i MagicNetworkMonitoringConfigurationArray) ToMagicNetworkMonitoringConfigurationArrayOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicNetworkMonitoringConfigurationArrayOutput)
}

// MagicNetworkMonitoringConfigurationMapInput is an input type that accepts MagicNetworkMonitoringConfigurationMap and MagicNetworkMonitoringConfigurationMapOutput values.
// You can construct a concrete instance of `MagicNetworkMonitoringConfigurationMapInput` via:
//
//	MagicNetworkMonitoringConfigurationMap{ "key": MagicNetworkMonitoringConfigurationArgs{...} }
type MagicNetworkMonitoringConfigurationMapInput interface {
	pulumi.Input

	ToMagicNetworkMonitoringConfigurationMapOutput() MagicNetworkMonitoringConfigurationMapOutput
	ToMagicNetworkMonitoringConfigurationMapOutputWithContext(context.Context) MagicNetworkMonitoringConfigurationMapOutput
}

type MagicNetworkMonitoringConfigurationMap map[string]MagicNetworkMonitoringConfigurationInput

func (MagicNetworkMonitoringConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (i MagicNetworkMonitoringConfigurationMap) ToMagicNetworkMonitoringConfigurationMapOutput() MagicNetworkMonitoringConfigurationMapOutput {
	return i.ToMagicNetworkMonitoringConfigurationMapOutputWithContext(context.Background())
}

func (i MagicNetworkMonitoringConfigurationMap) ToMagicNetworkMonitoringConfigurationMapOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicNetworkMonitoringConfigurationMapOutput)
}

type MagicNetworkMonitoringConfigurationOutput struct{ *pulumi.OutputState }

func (MagicNetworkMonitoringConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (o MagicNetworkMonitoringConfigurationOutput) ToMagicNetworkMonitoringConfigurationOutput() MagicNetworkMonitoringConfigurationOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationOutput) ToMagicNetworkMonitoringConfigurationOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicNetworkMonitoringConfiguration) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
func (o MagicNetworkMonitoringConfigurationOutput) DefaultSampling() pulumi.Float64Output {
	return o.ApplyT(func(v *MagicNetworkMonitoringConfiguration) pulumi.Float64Output { return v.DefaultSampling }).(pulumi.Float64Output)
}

// The account name.
func (o MagicNetworkMonitoringConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicNetworkMonitoringConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MagicNetworkMonitoringConfigurationOutput) RouterIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MagicNetworkMonitoringConfiguration) pulumi.StringArrayOutput { return v.RouterIps }).(pulumi.StringArrayOutput)
}

func (o MagicNetworkMonitoringConfigurationOutput) WarpDevices() MagicNetworkMonitoringConfigurationWarpDeviceArrayOutput {
	return o.ApplyT(func(v *MagicNetworkMonitoringConfiguration) MagicNetworkMonitoringConfigurationWarpDeviceArrayOutput {
		return v.WarpDevices
	}).(MagicNetworkMonitoringConfigurationWarpDeviceArrayOutput)
}

type MagicNetworkMonitoringConfigurationArrayOutput struct{ *pulumi.OutputState }

func (MagicNetworkMonitoringConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (o MagicNetworkMonitoringConfigurationArrayOutput) ToMagicNetworkMonitoringConfigurationArrayOutput() MagicNetworkMonitoringConfigurationArrayOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationArrayOutput) ToMagicNetworkMonitoringConfigurationArrayOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationArrayOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationArrayOutput) Index(i pulumi.IntInput) MagicNetworkMonitoringConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicNetworkMonitoringConfiguration {
		return vs[0].([]*MagicNetworkMonitoringConfiguration)[vs[1].(int)]
	}).(MagicNetworkMonitoringConfigurationOutput)
}

type MagicNetworkMonitoringConfigurationMapOutput struct{ *pulumi.OutputState }

func (MagicNetworkMonitoringConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicNetworkMonitoringConfiguration)(nil)).Elem()
}

func (o MagicNetworkMonitoringConfigurationMapOutput) ToMagicNetworkMonitoringConfigurationMapOutput() MagicNetworkMonitoringConfigurationMapOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationMapOutput) ToMagicNetworkMonitoringConfigurationMapOutputWithContext(ctx context.Context) MagicNetworkMonitoringConfigurationMapOutput {
	return o
}

func (o MagicNetworkMonitoringConfigurationMapOutput) MapIndex(k pulumi.StringInput) MagicNetworkMonitoringConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicNetworkMonitoringConfiguration {
		return vs[0].(map[string]*MagicNetworkMonitoringConfiguration)[vs[1].(string)]
	}).(MagicNetworkMonitoringConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicNetworkMonitoringConfigurationInput)(nil)).Elem(), &MagicNetworkMonitoringConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicNetworkMonitoringConfigurationArrayInput)(nil)).Elem(), MagicNetworkMonitoringConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicNetworkMonitoringConfigurationMapInput)(nil)).Elem(), MagicNetworkMonitoringConfigurationMap{})
	pulumi.RegisterOutputType(MagicNetworkMonitoringConfigurationOutput{})
	pulumi.RegisterOutputType(MagicNetworkMonitoringConfigurationArrayOutput{})
	pulumi.RegisterOutputType(MagicNetworkMonitoringConfigurationMapOutput{})
}
