// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this datasource to lookup a tunnel in an account.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupTunnel(ctx, &cloudflare.LookupTunnelArgs{
//				AccountId: "f037e56e89293a057740de681ac9abbe",
//				Name:      "my-tunnel",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupTunnel(ctx *pulumi.Context, args *LookupTunnelArgs, opts ...pulumi.InvokeOption) (*LookupTunnelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTunnelResult
	err := ctx.Invoke("cloudflare:index/getTunnel:getTunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTunnel.
type LookupTunnelArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
}

// A collection of values returned by getTunnel.
type LookupTunnelResult struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// ID of the tunnel.
	Id string `pulumi:"id"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
	// Whether the tunnel can be configured remotely from the Zero Trust dashboard.
	RemoteConfig bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Available values: `inactive`, `degraded`, `healthy`, `down`.
	Status string `pulumi:"status"`
	// The type of the tunnel. Available values: `cfdTunnel`, `warpConnector`.
	TunnelType string `pulumi:"tunnelType"`
}

func LookupTunnelOutput(ctx *pulumi.Context, args LookupTunnelOutputArgs, opts ...pulumi.InvokeOption) LookupTunnelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTunnelResult, error) {
			args := v.(LookupTunnelArgs)
			r, err := LookupTunnel(ctx, &args, opts...)
			var s LookupTunnelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTunnelResultOutput)
}

// A collection of arguments for invoking getTunnel.
type LookupTunnelOutputArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupTunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTunnelArgs)(nil)).Elem()
}

// A collection of values returned by getTunnel.
type LookupTunnelResultOutput struct{ *pulumi.OutputState }

func (LookupTunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTunnelResult)(nil)).Elem()
}

func (o LookupTunnelResultOutput) ToLookupTunnelResultOutput() LookupTunnelResultOutput {
	return o
}

func (o LookupTunnelResultOutput) ToLookupTunnelResultOutputWithContext(ctx context.Context) LookupTunnelResultOutput {
	return o
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o LookupTunnelResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// ID of the tunnel.
func (o LookupTunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the tunnel. **Modifying this attribute will force creation of a new resource.**
func (o LookupTunnelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the tunnel can be configured remotely from the Zero Trust dashboard.
func (o LookupTunnelResultOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTunnelResult) bool { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Available values: `inactive`, `degraded`, `healthy`, `down`.
func (o LookupTunnelResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of the tunnel. Available values: `cfdTunnel`, `warpConnector`.
func (o LookupTunnelResultOutput) TunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTunnelResult) string { return v.TunnelType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTunnelResultOutput{})
}
