// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type R2BucketCors struct {
	pulumi.CustomResourceState

	// Account ID.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringOutput         `pulumi:"jurisdiction"`
	Rules        R2BucketCorsRuleArrayOutput `pulumi:"rules"`
}

// NewR2BucketCors registers a new resource with the given unique name, arguments, and options.
func NewR2BucketCors(ctx *pulumi.Context,
	name string, args *R2BucketCorsArgs, opts ...pulumi.ResourceOption) (*R2BucketCors, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource R2BucketCors
	err := ctx.RegisterResource("cloudflare:index/r2BucketCors:R2BucketCors", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetR2BucketCors gets an existing R2BucketCors resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetR2BucketCors(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *R2BucketCorsState, opts ...pulumi.ResourceOption) (*R2BucketCors, error) {
	var resource R2BucketCors
	err := ctx.ReadResource("cloudflare:index/r2BucketCors:R2BucketCors", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering R2BucketCors resources.
type r2bucketCorsState struct {
	// Account ID.
	AccountId *string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction *string            `pulumi:"jurisdiction"`
	Rules        []R2BucketCorsRule `pulumi:"rules"`
}

type R2BucketCorsState struct {
	// Account ID.
	AccountId pulumi.StringPtrInput
	// Name of the bucket.
	BucketName pulumi.StringPtrInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	Rules        R2BucketCorsRuleArrayInput
}

func (R2BucketCorsState) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketCorsState)(nil)).Elem()
}

type r2bucketCorsArgs struct {
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// Jurisdiction of the bucket
	Jurisdiction *string            `pulumi:"jurisdiction"`
	Rules        []R2BucketCorsRule `pulumi:"rules"`
}

// The set of arguments for constructing a R2BucketCors resource.
type R2BucketCorsArgs struct {
	// Account ID.
	AccountId pulumi.StringInput
	// Name of the bucket.
	BucketName pulumi.StringInput
	// Jurisdiction of the bucket
	Jurisdiction pulumi.StringPtrInput
	Rules        R2BucketCorsRuleArrayInput
}

func (R2BucketCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*r2bucketCorsArgs)(nil)).Elem()
}

type R2BucketCorsInput interface {
	pulumi.Input

	ToR2BucketCorsOutput() R2BucketCorsOutput
	ToR2BucketCorsOutputWithContext(ctx context.Context) R2BucketCorsOutput
}

func (*R2BucketCors) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketCors)(nil)).Elem()
}

func (i *R2BucketCors) ToR2BucketCorsOutput() R2BucketCorsOutput {
	return i.ToR2BucketCorsOutputWithContext(context.Background())
}

func (i *R2BucketCors) ToR2BucketCorsOutputWithContext(ctx context.Context) R2BucketCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketCorsOutput)
}

// R2BucketCorsArrayInput is an input type that accepts R2BucketCorsArray and R2BucketCorsArrayOutput values.
// You can construct a concrete instance of `R2BucketCorsArrayInput` via:
//
//	R2BucketCorsArray{ R2BucketCorsArgs{...} }
type R2BucketCorsArrayInput interface {
	pulumi.Input

	ToR2BucketCorsArrayOutput() R2BucketCorsArrayOutput
	ToR2BucketCorsArrayOutputWithContext(context.Context) R2BucketCorsArrayOutput
}

type R2BucketCorsArray []R2BucketCorsInput

func (R2BucketCorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketCors)(nil)).Elem()
}

func (i R2BucketCorsArray) ToR2BucketCorsArrayOutput() R2BucketCorsArrayOutput {
	return i.ToR2BucketCorsArrayOutputWithContext(context.Background())
}

func (i R2BucketCorsArray) ToR2BucketCorsArrayOutputWithContext(ctx context.Context) R2BucketCorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketCorsArrayOutput)
}

// R2BucketCorsMapInput is an input type that accepts R2BucketCorsMap and R2BucketCorsMapOutput values.
// You can construct a concrete instance of `R2BucketCorsMapInput` via:
//
//	R2BucketCorsMap{ "key": R2BucketCorsArgs{...} }
type R2BucketCorsMapInput interface {
	pulumi.Input

	ToR2BucketCorsMapOutput() R2BucketCorsMapOutput
	ToR2BucketCorsMapOutputWithContext(context.Context) R2BucketCorsMapOutput
}

type R2BucketCorsMap map[string]R2BucketCorsInput

func (R2BucketCorsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketCors)(nil)).Elem()
}

func (i R2BucketCorsMap) ToR2BucketCorsMapOutput() R2BucketCorsMapOutput {
	return i.ToR2BucketCorsMapOutputWithContext(context.Background())
}

func (i R2BucketCorsMap) ToR2BucketCorsMapOutputWithContext(ctx context.Context) R2BucketCorsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(R2BucketCorsMapOutput)
}

type R2BucketCorsOutput struct{ *pulumi.OutputState }

func (R2BucketCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**R2BucketCors)(nil)).Elem()
}

func (o R2BucketCorsOutput) ToR2BucketCorsOutput() R2BucketCorsOutput {
	return o
}

func (o R2BucketCorsOutput) ToR2BucketCorsOutputWithContext(ctx context.Context) R2BucketCorsOutput {
	return o
}

// Account ID.
func (o R2BucketCorsOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketCors) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket.
func (o R2BucketCorsOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketCors) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Jurisdiction of the bucket
func (o R2BucketCorsOutput) Jurisdiction() pulumi.StringOutput {
	return o.ApplyT(func(v *R2BucketCors) pulumi.StringOutput { return v.Jurisdiction }).(pulumi.StringOutput)
}

func (o R2BucketCorsOutput) Rules() R2BucketCorsRuleArrayOutput {
	return o.ApplyT(func(v *R2BucketCors) R2BucketCorsRuleArrayOutput { return v.Rules }).(R2BucketCorsRuleArrayOutput)
}

type R2BucketCorsArrayOutput struct{ *pulumi.OutputState }

func (R2BucketCorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*R2BucketCors)(nil)).Elem()
}

func (o R2BucketCorsArrayOutput) ToR2BucketCorsArrayOutput() R2BucketCorsArrayOutput {
	return o
}

func (o R2BucketCorsArrayOutput) ToR2BucketCorsArrayOutputWithContext(ctx context.Context) R2BucketCorsArrayOutput {
	return o
}

func (o R2BucketCorsArrayOutput) Index(i pulumi.IntInput) R2BucketCorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *R2BucketCors {
		return vs[0].([]*R2BucketCors)[vs[1].(int)]
	}).(R2BucketCorsOutput)
}

type R2BucketCorsMapOutput struct{ *pulumi.OutputState }

func (R2BucketCorsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*R2BucketCors)(nil)).Elem()
}

func (o R2BucketCorsMapOutput) ToR2BucketCorsMapOutput() R2BucketCorsMapOutput {
	return o
}

func (o R2BucketCorsMapOutput) ToR2BucketCorsMapOutputWithContext(ctx context.Context) R2BucketCorsMapOutput {
	return o
}

func (o R2BucketCorsMapOutput) MapIndex(k pulumi.StringInput) R2BucketCorsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *R2BucketCors {
		return vs[0].(map[string]*R2BucketCors)[vs[1].(string)]
	}).(R2BucketCorsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketCorsInput)(nil)).Elem(), &R2BucketCors{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketCorsArrayInput)(nil)).Elem(), R2BucketCorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*R2BucketCorsMapInput)(nil)).Elem(), R2BucketCorsMap{})
	pulumi.RegisterOutputType(R2BucketCorsOutput{})
	pulumi.RegisterOutputType(R2BucketCorsArrayOutput{})
	pulumi.RegisterOutputType(R2BucketCorsMapOutput{})
}
