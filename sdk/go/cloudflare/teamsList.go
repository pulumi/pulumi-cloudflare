// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustList(ctx, "example_zero_trust_list", &cloudflare.ZeroTrustListArgs{
//				AccountId:   pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Name:        pulumi.String("Admin Serial Numbers"),
//				Type:        pulumi.String("SERIAL"),
//				Description: pulumi.String("The serial numbers for administrators"),
//				Items: cloudflare.ZeroTrustListItemArray{
//					&cloudflare.ZeroTrustListItemArgs{
//						Description: pulumi.String("Austin office IP"),
//						Value:       pulumi.String("8GE8721REF"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/teamsList:TeamsList example '<account_id>/<list_id>'
// ```
//
// Deprecated: cloudflare.index/teamslist.TeamsList has been deprecated in favor of cloudflare.index/zerotrustlist.ZeroTrustList
type TeamsList struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The items in the list.
	Items TeamsListItemArrayOutput `pulumi:"items"`
	// The number of items in the list.
	ListCount pulumi.Float64Output `pulumi:"listCount"`
	// The name of the list.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of list.
	// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
	Type      pulumi.StringOutput `pulumi:"type"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTeamsList registers a new resource with the given unique name, arguments, and options.
func NewTeamsList(ctx *pulumi.Context,
	name string, args *TeamsListArgs, opts ...pulumi.ResourceOption) (*TeamsList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/teamsList:TeamsList"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamsList
	err := ctx.RegisterResource("cloudflare:index/teamsList:TeamsList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamsList gets an existing TeamsList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamsList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamsListState, opts ...pulumi.ResourceOption) (*TeamsList, error) {
	var resource TeamsList
	err := ctx.ReadResource("cloudflare:index/teamsList:TeamsList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamsList resources.
type teamsListState struct {
	AccountId *string `pulumi:"accountId"`
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the list.
	Description *string `pulumi:"description"`
	// The items in the list.
	Items []TeamsListItem `pulumi:"items"`
	// The number of items in the list.
	ListCount *float64 `pulumi:"listCount"`
	// The name of the list.
	Name *string `pulumi:"name"`
	// The type of list.
	// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
	Type      *string `pulumi:"type"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TeamsListState struct {
	AccountId pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	// The description of the list.
	Description pulumi.StringPtrInput
	// The items in the list.
	Items TeamsListItemArrayInput
	// The number of items in the list.
	ListCount pulumi.Float64PtrInput
	// The name of the list.
	Name pulumi.StringPtrInput
	// The type of list.
	// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
	Type      pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (TeamsListState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsListState)(nil)).Elem()
}

type teamsListArgs struct {
	AccountId string `pulumi:"accountId"`
	// The description of the list.
	Description *string `pulumi:"description"`
	// The items in the list.
	Items []TeamsListItem `pulumi:"items"`
	// The name of the list.
	Name string `pulumi:"name"`
	// The type of list.
	// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TeamsList resource.
type TeamsListArgs struct {
	AccountId pulumi.StringInput
	// The description of the list.
	Description pulumi.StringPtrInput
	// The items in the list.
	Items TeamsListItemArrayInput
	// The name of the list.
	Name pulumi.StringInput
	// The type of list.
	// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
	Type pulumi.StringInput
}

func (TeamsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsListArgs)(nil)).Elem()
}

type TeamsListInput interface {
	pulumi.Input

	ToTeamsListOutput() TeamsListOutput
	ToTeamsListOutputWithContext(ctx context.Context) TeamsListOutput
}

func (*TeamsList) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsList)(nil)).Elem()
}

func (i *TeamsList) ToTeamsListOutput() TeamsListOutput {
	return i.ToTeamsListOutputWithContext(context.Background())
}

func (i *TeamsList) ToTeamsListOutputWithContext(ctx context.Context) TeamsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsListOutput)
}

// TeamsListArrayInput is an input type that accepts TeamsListArray and TeamsListArrayOutput values.
// You can construct a concrete instance of `TeamsListArrayInput` via:
//
//	TeamsListArray{ TeamsListArgs{...} }
type TeamsListArrayInput interface {
	pulumi.Input

	ToTeamsListArrayOutput() TeamsListArrayOutput
	ToTeamsListArrayOutputWithContext(context.Context) TeamsListArrayOutput
}

type TeamsListArray []TeamsListInput

func (TeamsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsList)(nil)).Elem()
}

func (i TeamsListArray) ToTeamsListArrayOutput() TeamsListArrayOutput {
	return i.ToTeamsListArrayOutputWithContext(context.Background())
}

func (i TeamsListArray) ToTeamsListArrayOutputWithContext(ctx context.Context) TeamsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsListArrayOutput)
}

// TeamsListMapInput is an input type that accepts TeamsListMap and TeamsListMapOutput values.
// You can construct a concrete instance of `TeamsListMapInput` via:
//
//	TeamsListMap{ "key": TeamsListArgs{...} }
type TeamsListMapInput interface {
	pulumi.Input

	ToTeamsListMapOutput() TeamsListMapOutput
	ToTeamsListMapOutputWithContext(context.Context) TeamsListMapOutput
}

type TeamsListMap map[string]TeamsListInput

func (TeamsListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsList)(nil)).Elem()
}

func (i TeamsListMap) ToTeamsListMapOutput() TeamsListMapOutput {
	return i.ToTeamsListMapOutputWithContext(context.Background())
}

func (i TeamsListMap) ToTeamsListMapOutputWithContext(ctx context.Context) TeamsListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsListMapOutput)
}

type TeamsListOutput struct{ *pulumi.OutputState }

func (TeamsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsList)(nil)).Elem()
}

func (o TeamsListOutput) ToTeamsListOutput() TeamsListOutput {
	return o
}

func (o TeamsListOutput) ToTeamsListOutputWithContext(ctx context.Context) TeamsListOutput {
	return o
}

func (o TeamsListOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o TeamsListOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the list.
func (o TeamsListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The items in the list.
func (o TeamsListOutput) Items() TeamsListItemArrayOutput {
	return o.ApplyT(func(v *TeamsList) TeamsListItemArrayOutput { return v.Items }).(TeamsListItemArrayOutput)
}

// The number of items in the list.
func (o TeamsListOutput) ListCount() pulumi.Float64Output {
	return o.ApplyT(func(v *TeamsList) pulumi.Float64Output { return v.ListCount }).(pulumi.Float64Output)
}

// The name of the list.
func (o TeamsListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of list.
// Available values: "SERIAL", "URL", "DOMAIN", "EMAIL", "IP".
func (o TeamsListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o TeamsListOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsList) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TeamsListArrayOutput struct{ *pulumi.OutputState }

func (TeamsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsList)(nil)).Elem()
}

func (o TeamsListArrayOutput) ToTeamsListArrayOutput() TeamsListArrayOutput {
	return o
}

func (o TeamsListArrayOutput) ToTeamsListArrayOutputWithContext(ctx context.Context) TeamsListArrayOutput {
	return o
}

func (o TeamsListArrayOutput) Index(i pulumi.IntInput) TeamsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamsList {
		return vs[0].([]*TeamsList)[vs[1].(int)]
	}).(TeamsListOutput)
}

type TeamsListMapOutput struct{ *pulumi.OutputState }

func (TeamsListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsList)(nil)).Elem()
}

func (o TeamsListMapOutput) ToTeamsListMapOutput() TeamsListMapOutput {
	return o
}

func (o TeamsListMapOutput) ToTeamsListMapOutputWithContext(ctx context.Context) TeamsListMapOutput {
	return o
}

func (o TeamsListMapOutput) MapIndex(k pulumi.StringInput) TeamsListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamsList {
		return vs[0].(map[string]*TeamsList)[vs[1].(string)]
	}).(TeamsListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsListInput)(nil)).Elem(), &TeamsList{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsListArrayInput)(nil)).Elem(), TeamsListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsListMapInput)(nil)).Elem(), TeamsListMap{})
	pulumi.RegisterOutputType(TeamsListOutput{})
	pulumi.RegisterOutputType(TeamsListArrayOutput{})
	pulumi.RegisterOutputType(TeamsListMapOutput{})
}
