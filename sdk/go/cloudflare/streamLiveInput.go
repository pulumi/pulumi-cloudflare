// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type StreamLiveInput struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The date and time the live input was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Sets the creator ID asssociated with this live input.
	DefaultCreator pulumi.StringPtrOutput `pulumi:"defaultCreator"`
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays pulumi.Float64PtrOutput `pulumi:"deleteRecordingAfterDays"`
	// A unique identifier for a live input.
	LiveInputIdentifier pulumi.StringPtrOutput `pulumi:"liveInputIdentifier"`
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta pulumi.StringPtrOutput `pulumi:"meta"`
	// The date and time the live input was last modified.
	Modified pulumi.StringOutput `pulumi:"modified"`
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording StreamLiveInputRecordingOutput `pulumi:"recording"`
	// Details for streaming to an live input using RTMPS.
	Rtmps StreamLiveInputRtmpsOutput `pulumi:"rtmps"`
	// Details for playback from an live input using RTMPS.
	RtmpsPlayback StreamLiveInputRtmpsPlaybackOutput `pulumi:"rtmpsPlayback"`
	// Details for streaming to a live input using SRT.
	Srt StreamLiveInputSrtOutput `pulumi:"srt"`
	// Details for playback from an live input using SRT.
	SrtPlayback StreamLiveInputSrtPlaybackOutput `pulumi:"srtPlayback"`
	// The connection status of a live input.
	// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
	Status pulumi.StringOutput `pulumi:"status"`
	// A unique identifier for a live input.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Details for streaming to a live input using WebRTC.
	WebRtc StreamLiveInputWebRtcOutput `pulumi:"webRtc"`
	// Details for playback from a live input using WebRTC.
	WebRtcPlayback StreamLiveInputWebRtcPlaybackOutput `pulumi:"webRtcPlayback"`
}

// NewStreamLiveInput registers a new resource with the given unique name, arguments, and options.
func NewStreamLiveInput(ctx *pulumi.Context,
	name string, args *StreamLiveInputArgs, opts ...pulumi.ResourceOption) (*StreamLiveInput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamLiveInput
	err := ctx.RegisterResource("cloudflare:index/streamLiveInput:StreamLiveInput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamLiveInput gets an existing StreamLiveInput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamLiveInput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamLiveInputState, opts ...pulumi.ResourceOption) (*StreamLiveInput, error) {
	var resource StreamLiveInput
	err := ctx.ReadResource("cloudflare:index/streamLiveInput:StreamLiveInput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamLiveInput resources.
type streamLiveInputState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// The date and time the live input was created.
	Created *string `pulumi:"created"`
	// Sets the creator ID asssociated with this live input.
	DefaultCreator *string `pulumi:"defaultCreator"`
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays *float64 `pulumi:"deleteRecordingAfterDays"`
	// A unique identifier for a live input.
	LiveInputIdentifier *string `pulumi:"liveInputIdentifier"`
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta *string `pulumi:"meta"`
	// The date and time the live input was last modified.
	Modified *string `pulumi:"modified"`
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording *StreamLiveInputRecording `pulumi:"recording"`
	// Details for streaming to an live input using RTMPS.
	Rtmps *StreamLiveInputRtmps `pulumi:"rtmps"`
	// Details for playback from an live input using RTMPS.
	RtmpsPlayback *StreamLiveInputRtmpsPlayback `pulumi:"rtmpsPlayback"`
	// Details for streaming to a live input using SRT.
	Srt *StreamLiveInputSrt `pulumi:"srt"`
	// Details for playback from an live input using SRT.
	SrtPlayback *StreamLiveInputSrtPlayback `pulumi:"srtPlayback"`
	// The connection status of a live input.
	// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
	Status *string `pulumi:"status"`
	// A unique identifier for a live input.
	Uid *string `pulumi:"uid"`
	// Details for streaming to a live input using WebRTC.
	WebRtc *StreamLiveInputWebRtc `pulumi:"webRtc"`
	// Details for playback from a live input using WebRTC.
	WebRtcPlayback *StreamLiveInputWebRtcPlayback `pulumi:"webRtcPlayback"`
}

type StreamLiveInputState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// The date and time the live input was created.
	Created pulumi.StringPtrInput
	// Sets the creator ID asssociated with this live input.
	DefaultCreator pulumi.StringPtrInput
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays pulumi.Float64PtrInput
	// A unique identifier for a live input.
	LiveInputIdentifier pulumi.StringPtrInput
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta pulumi.StringPtrInput
	// The date and time the live input was last modified.
	Modified pulumi.StringPtrInput
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording StreamLiveInputRecordingPtrInput
	// Details for streaming to an live input using RTMPS.
	Rtmps StreamLiveInputRtmpsPtrInput
	// Details for playback from an live input using RTMPS.
	RtmpsPlayback StreamLiveInputRtmpsPlaybackPtrInput
	// Details for streaming to a live input using SRT.
	Srt StreamLiveInputSrtPtrInput
	// Details for playback from an live input using SRT.
	SrtPlayback StreamLiveInputSrtPlaybackPtrInput
	// The connection status of a live input.
	// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
	Status pulumi.StringPtrInput
	// A unique identifier for a live input.
	Uid pulumi.StringPtrInput
	// Details for streaming to a live input using WebRTC.
	WebRtc StreamLiveInputWebRtcPtrInput
	// Details for playback from a live input using WebRTC.
	WebRtcPlayback StreamLiveInputWebRtcPlaybackPtrInput
}

func (StreamLiveInputState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamLiveInputState)(nil)).Elem()
}

type streamLiveInputArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Sets the creator ID asssociated with this live input.
	DefaultCreator *string `pulumi:"defaultCreator"`
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays *float64 `pulumi:"deleteRecordingAfterDays"`
	// A unique identifier for a live input.
	LiveInputIdentifier *string `pulumi:"liveInputIdentifier"`
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta *string `pulumi:"meta"`
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording *StreamLiveInputRecording `pulumi:"recording"`
}

// The set of arguments for constructing a StreamLiveInput resource.
type StreamLiveInputArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Sets the creator ID asssociated with this live input.
	DefaultCreator pulumi.StringPtrInput
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays pulumi.Float64PtrInput
	// A unique identifier for a live input.
	LiveInputIdentifier pulumi.StringPtrInput
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta pulumi.StringPtrInput
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording StreamLiveInputRecordingPtrInput
}

func (StreamLiveInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamLiveInputArgs)(nil)).Elem()
}

type StreamLiveInputInput interface {
	pulumi.Input

	ToStreamLiveInputOutput() StreamLiveInputOutput
	ToStreamLiveInputOutputWithContext(ctx context.Context) StreamLiveInputOutput
}

func (*StreamLiveInput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamLiveInput)(nil)).Elem()
}

func (i *StreamLiveInput) ToStreamLiveInputOutput() StreamLiveInputOutput {
	return i.ToStreamLiveInputOutputWithContext(context.Background())
}

func (i *StreamLiveInput) ToStreamLiveInputOutputWithContext(ctx context.Context) StreamLiveInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLiveInputOutput)
}

// StreamLiveInputArrayInput is an input type that accepts StreamLiveInputArray and StreamLiveInputArrayOutput values.
// You can construct a concrete instance of `StreamLiveInputArrayInput` via:
//
//	StreamLiveInputArray{ StreamLiveInputArgs{...} }
type StreamLiveInputArrayInput interface {
	pulumi.Input

	ToStreamLiveInputArrayOutput() StreamLiveInputArrayOutput
	ToStreamLiveInputArrayOutputWithContext(context.Context) StreamLiveInputArrayOutput
}

type StreamLiveInputArray []StreamLiveInputInput

func (StreamLiveInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamLiveInput)(nil)).Elem()
}

func (i StreamLiveInputArray) ToStreamLiveInputArrayOutput() StreamLiveInputArrayOutput {
	return i.ToStreamLiveInputArrayOutputWithContext(context.Background())
}

func (i StreamLiveInputArray) ToStreamLiveInputArrayOutputWithContext(ctx context.Context) StreamLiveInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLiveInputArrayOutput)
}

// StreamLiveInputMapInput is an input type that accepts StreamLiveInputMap and StreamLiveInputMapOutput values.
// You can construct a concrete instance of `StreamLiveInputMapInput` via:
//
//	StreamLiveInputMap{ "key": StreamLiveInputArgs{...} }
type StreamLiveInputMapInput interface {
	pulumi.Input

	ToStreamLiveInputMapOutput() StreamLiveInputMapOutput
	ToStreamLiveInputMapOutputWithContext(context.Context) StreamLiveInputMapOutput
}

type StreamLiveInputMap map[string]StreamLiveInputInput

func (StreamLiveInputMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamLiveInput)(nil)).Elem()
}

func (i StreamLiveInputMap) ToStreamLiveInputMapOutput() StreamLiveInputMapOutput {
	return i.ToStreamLiveInputMapOutputWithContext(context.Background())
}

func (i StreamLiveInputMap) ToStreamLiveInputMapOutputWithContext(ctx context.Context) StreamLiveInputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLiveInputMapOutput)
}

type StreamLiveInputOutput struct{ *pulumi.OutputState }

func (StreamLiveInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamLiveInput)(nil)).Elem()
}

func (o StreamLiveInputOutput) ToStreamLiveInputOutput() StreamLiveInputOutput {
	return o
}

func (o StreamLiveInputOutput) ToStreamLiveInputOutputWithContext(ctx context.Context) StreamLiveInputOutput {
	return o
}

// Identifier.
func (o StreamLiveInputOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The date and time the live input was created.
func (o StreamLiveInputOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Sets the creator ID asssociated with this live input.
func (o StreamLiveInputOutput) DefaultCreator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringPtrOutput { return v.DefaultCreator }).(pulumi.StringPtrOutput)
}

// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
func (o StreamLiveInputOutput) DeleteRecordingAfterDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.Float64PtrOutput { return v.DeleteRecordingAfterDays }).(pulumi.Float64PtrOutput)
}

// A unique identifier for a live input.
func (o StreamLiveInputOutput) LiveInputIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringPtrOutput { return v.LiveInputIdentifier }).(pulumi.StringPtrOutput)
}

// A user modifiable key-value store used to reference other systems of record for managing live inputs.
func (o StreamLiveInputOutput) Meta() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringPtrOutput { return v.Meta }).(pulumi.StringPtrOutput)
}

// The date and time the live input was last modified.
func (o StreamLiveInputOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringOutput { return v.Modified }).(pulumi.StringOutput)
}

// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
func (o StreamLiveInputOutput) Recording() StreamLiveInputRecordingOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputRecordingOutput { return v.Recording }).(StreamLiveInputRecordingOutput)
}

// Details for streaming to an live input using RTMPS.
func (o StreamLiveInputOutput) Rtmps() StreamLiveInputRtmpsOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputRtmpsOutput { return v.Rtmps }).(StreamLiveInputRtmpsOutput)
}

// Details for playback from an live input using RTMPS.
func (o StreamLiveInputOutput) RtmpsPlayback() StreamLiveInputRtmpsPlaybackOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputRtmpsPlaybackOutput { return v.RtmpsPlayback }).(StreamLiveInputRtmpsPlaybackOutput)
}

// Details for streaming to a live input using SRT.
func (o StreamLiveInputOutput) Srt() StreamLiveInputSrtOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputSrtOutput { return v.Srt }).(StreamLiveInputSrtOutput)
}

// Details for playback from an live input using SRT.
func (o StreamLiveInputOutput) SrtPlayback() StreamLiveInputSrtPlaybackOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputSrtPlaybackOutput { return v.SrtPlayback }).(StreamLiveInputSrtPlaybackOutput)
}

// The connection status of a live input.
// Available values: "connected", "reconnected", "reconnecting", "client*disconnect", "ttl*exceeded", "failed*to*connect", "failed*to*reconnect", "new*configuration*accepted".
func (o StreamLiveInputOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A unique identifier for a live input.
func (o StreamLiveInputOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamLiveInput) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Details for streaming to a live input using WebRTC.
func (o StreamLiveInputOutput) WebRtc() StreamLiveInputWebRtcOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputWebRtcOutput { return v.WebRtc }).(StreamLiveInputWebRtcOutput)
}

// Details for playback from a live input using WebRTC.
func (o StreamLiveInputOutput) WebRtcPlayback() StreamLiveInputWebRtcPlaybackOutput {
	return o.ApplyT(func(v *StreamLiveInput) StreamLiveInputWebRtcPlaybackOutput { return v.WebRtcPlayback }).(StreamLiveInputWebRtcPlaybackOutput)
}

type StreamLiveInputArrayOutput struct{ *pulumi.OutputState }

func (StreamLiveInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamLiveInput)(nil)).Elem()
}

func (o StreamLiveInputArrayOutput) ToStreamLiveInputArrayOutput() StreamLiveInputArrayOutput {
	return o
}

func (o StreamLiveInputArrayOutput) ToStreamLiveInputArrayOutputWithContext(ctx context.Context) StreamLiveInputArrayOutput {
	return o
}

func (o StreamLiveInputArrayOutput) Index(i pulumi.IntInput) StreamLiveInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamLiveInput {
		return vs[0].([]*StreamLiveInput)[vs[1].(int)]
	}).(StreamLiveInputOutput)
}

type StreamLiveInputMapOutput struct{ *pulumi.OutputState }

func (StreamLiveInputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamLiveInput)(nil)).Elem()
}

func (o StreamLiveInputMapOutput) ToStreamLiveInputMapOutput() StreamLiveInputMapOutput {
	return o
}

func (o StreamLiveInputMapOutput) ToStreamLiveInputMapOutputWithContext(ctx context.Context) StreamLiveInputMapOutput {
	return o
}

func (o StreamLiveInputMapOutput) MapIndex(k pulumi.StringInput) StreamLiveInputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamLiveInput {
		return vs[0].(map[string]*StreamLiveInput)[vs[1].(string)]
	}).(StreamLiveInputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamLiveInputInput)(nil)).Elem(), &StreamLiveInput{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamLiveInputArrayInput)(nil)).Elem(), StreamLiveInputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamLiveInputMapInput)(nil)).Elem(), StreamLiveInputMap{})
	pulumi.RegisterOutputType(StreamLiveInputOutput{})
	pulumi.RegisterOutputType(StreamLiveInputArrayOutput{})
	pulumi.RegisterOutputType(StreamLiveInputMapOutput{})
}
