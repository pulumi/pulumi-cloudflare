// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Cloudflare Argo controls the routing to your origin and tiered caching options to speed up your website browsing experience.
type Argo struct {
	pulumi.CustomResourceState

	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting pulumi.StringPtrOutput `pulumi:"smartRouting"`
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching pulumi.StringPtrOutput `pulumi:"tieredCaching"`
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewArgo registers a new resource with the given unique name, arguments, and options.
func NewArgo(ctx *pulumi.Context,
	name string, args *ArgoArgs, opts ...pulumi.ResourceOption) (*Argo, error) {
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	if args == nil {
		args = &ArgoArgs{}
	}
	var resource Argo
	err := ctx.RegisterResource("cloudflare:index/argo:Argo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArgo gets an existing Argo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArgo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArgoState, opts ...pulumi.ResourceOption) (*Argo, error) {
	var resource Argo
	err := ctx.ReadResource("cloudflare:index/argo:Argo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Argo resources.
type argoState struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting *string `pulumi:"smartRouting"`
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching *string `pulumi:"tieredCaching"`
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId *string `pulumi:"zoneId"`
}

type ArgoState struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting pulumi.StringPtrInput
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching pulumi.StringPtrInput
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId pulumi.StringPtrInput
}

func (ArgoState) ElementType() reflect.Type {
	return reflect.TypeOf((*argoState)(nil)).Elem()
}

type argoArgs struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting *string `pulumi:"smartRouting"`
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching *string `pulumi:"tieredCaching"`
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Argo resource.
type ArgoArgs struct {
	// Whether smart routing is enabled. Valid values: `on` or `off`. Defaults to `off`.
	SmartRouting pulumi.StringPtrInput
	// Whether tiered caching is enabled. Valid values: `on` or `off`. Defaults to `off`.
	TieredCaching pulumi.StringPtrInput
	// The DNS zone ID that you wish to manage Argo on.
	ZoneId pulumi.StringInput
}

func (ArgoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argoArgs)(nil)).Elem()
}
