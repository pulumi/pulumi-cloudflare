// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupTurnstileWidget(ctx, &cloudflare.LookupTurnstileWidgetArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Sitekey:   pulumi.StringRef("0x4AAF00AAAABn0R22HWm-YUc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTurnstileWidget(ctx *pulumi.Context, args *LookupTurnstileWidgetArgs, opts ...pulumi.InvokeOption) (*LookupTurnstileWidgetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTurnstileWidgetResult
	err := ctx.Invoke("cloudflare:index/getTurnstileWidget:getTurnstileWidget", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTurnstileWidget.
type LookupTurnstileWidgetArgs struct {
	// Identifier
	AccountId string                    `pulumi:"accountId"`
	Filter    *GetTurnstileWidgetFilter `pulumi:"filter"`
	// Widget item identifier tag.
	Sitekey *string `pulumi:"sitekey"`
}

// A collection of values returned by getTurnstileWidget.
type LookupTurnstileWidgetResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode bool `pulumi:"botFightMode"`
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	// Available values: "noClearance", "jschallenge", "managed", "interactive".
	ClearanceLevel string `pulumi:"clearanceLevel"`
	// When the widget was created.
	CreatedOn string   `pulumi:"createdOn"`
	Domains   []string `pulumi:"domains"`
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId bool                      `pulumi:"ephemeralId"`
	Filter      *GetTurnstileWidgetFilter `pulumi:"filter"`
	// Widget item identifier tag.
	Id string `pulumi:"id"`
	// Widget Mode
	// Available values: "non-interactive", "invisible", "managed".
	Mode string `pulumi:"mode"`
	// When the widget was modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name string `pulumi:"name"`
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel bool `pulumi:"offlabel"`
	// Region where this widget can be used. This cannot be changed after creation.
	// Available values: "world", "china".
	Region string `pulumi:"region"`
	// Secret key for this widget.
	Secret string `pulumi:"secret"`
	// Widget item identifier tag.
	Sitekey string `pulumi:"sitekey"`
}

func LookupTurnstileWidgetOutput(ctx *pulumi.Context, args LookupTurnstileWidgetOutputArgs, opts ...pulumi.InvokeOption) LookupTurnstileWidgetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTurnstileWidgetResultOutput, error) {
			args := v.(LookupTurnstileWidgetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getTurnstileWidget:getTurnstileWidget", args, LookupTurnstileWidgetResultOutput{}, options).(LookupTurnstileWidgetResultOutput), nil
		}).(LookupTurnstileWidgetResultOutput)
}

// A collection of arguments for invoking getTurnstileWidget.
type LookupTurnstileWidgetOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput               `pulumi:"accountId"`
	Filter    GetTurnstileWidgetFilterPtrInput `pulumi:"filter"`
	// Widget item identifier tag.
	Sitekey pulumi.StringPtrInput `pulumi:"sitekey"`
}

func (LookupTurnstileWidgetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTurnstileWidgetArgs)(nil)).Elem()
}

// A collection of values returned by getTurnstileWidget.
type LookupTurnstileWidgetResultOutput struct{ *pulumi.OutputState }

func (LookupTurnstileWidgetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTurnstileWidgetResult)(nil)).Elem()
}

func (o LookupTurnstileWidgetResultOutput) ToLookupTurnstileWidgetResultOutput() LookupTurnstileWidgetResultOutput {
	return o
}

func (o LookupTurnstileWidgetResultOutput) ToLookupTurnstileWidgetResultOutputWithContext(ctx context.Context) LookupTurnstileWidgetResultOutput {
	return o
}

// Identifier
func (o LookupTurnstileWidgetResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// If bot*fight*mode is set to `true`, Cloudflare issues computationally
// expensive challenges in response to malicious bots (ENT only).
func (o LookupTurnstileWidgetResultOutput) BotFightMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) bool { return v.BotFightMode }).(pulumi.BoolOutput)
}

// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
// this setting can determine the clearance level to be set
// Available values: "noClearance", "jschallenge", "managed", "interactive".
func (o LookupTurnstileWidgetResultOutput) ClearanceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.ClearanceLevel }).(pulumi.StringOutput)
}

// When the widget was created.
func (o LookupTurnstileWidgetResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o LookupTurnstileWidgetResultOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Return the Ephemeral ID in /siteverify (ENT only).
func (o LookupTurnstileWidgetResultOutput) EphemeralId() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) bool { return v.EphemeralId }).(pulumi.BoolOutput)
}

func (o LookupTurnstileWidgetResultOutput) Filter() GetTurnstileWidgetFilterPtrOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) *GetTurnstileWidgetFilter { return v.Filter }).(GetTurnstileWidgetFilterPtrOutput)
}

// Widget item identifier tag.
func (o LookupTurnstileWidgetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Id }).(pulumi.StringOutput)
}

// Widget Mode
// Available values: "non-interactive", "invisible", "managed".
func (o LookupTurnstileWidgetResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Mode }).(pulumi.StringOutput)
}

// When the widget was modified.
func (o LookupTurnstileWidgetResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Human readable widget name. Not unique. Cloudflare suggests that you
// set this to a meaningful string to make it easier to identify your
// widget, and where it is used.
func (o LookupTurnstileWidgetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Name }).(pulumi.StringOutput)
}

// Do not show any Cloudflare branding on the widget (ENT only).
func (o LookupTurnstileWidgetResultOutput) Offlabel() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) bool { return v.Offlabel }).(pulumi.BoolOutput)
}

// Region where this widget can be used. This cannot be changed after creation.
// Available values: "world", "china".
func (o LookupTurnstileWidgetResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Region }).(pulumi.StringOutput)
}

// Secret key for this widget.
func (o LookupTurnstileWidgetResultOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Secret }).(pulumi.StringOutput)
}

// Widget item identifier tag.
func (o LookupTurnstileWidgetResultOutput) Sitekey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTurnstileWidgetResult) string { return v.Sitekey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTurnstileWidgetResultOutput{})
}
