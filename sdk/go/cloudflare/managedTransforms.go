// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewManagedTransforms(ctx, "example_managed_transforms", &cloudflare.ManagedTransformsArgs{
//				ZoneId: pulumi.String("9f1839b6152d298aca64c4e906b6d074"),
//				ManagedRequestHeaders: cloudflare.ManagedTransformsManagedRequestHeaderArray{
//					&cloudflare.ManagedTransformsManagedRequestHeaderArgs{
//						Id:      pulumi.String("add_bot_protection_headers"),
//						Enabled: pulumi.Bool(true),
//					},
//				},
//				ManagedResponseHeaders: cloudflare.ManagedTransformsManagedResponseHeaderArray{
//					&cloudflare.ManagedTransformsManagedResponseHeaderArgs{
//						Id:      pulumi.String("add_security_headers"),
//						Enabled: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/managedTransforms:ManagedTransforms example '<zone_id>'
// ```
type ManagedTransforms struct {
	pulumi.CustomResourceState

	// The list of Managed Request Transforms.
	ManagedRequestHeaders ManagedTransformsManagedRequestHeaderArrayOutput `pulumi:"managedRequestHeaders"`
	// The list of Managed Response Transforms.
	ManagedResponseHeaders ManagedTransformsManagedResponseHeaderArrayOutput `pulumi:"managedResponseHeaders"`
	// The unique ID of the zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewManagedTransforms registers a new resource with the given unique name, arguments, and options.
func NewManagedTransforms(ctx *pulumi.Context,
	name string, args *ManagedTransformsArgs, opts ...pulumi.ResourceOption) (*ManagedTransforms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManagedRequestHeaders == nil {
		return nil, errors.New("invalid value for required argument 'ManagedRequestHeaders'")
	}
	if args.ManagedResponseHeaders == nil {
		return nil, errors.New("invalid value for required argument 'ManagedResponseHeaders'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/managedHeaders:ManagedHeaders"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedTransforms
	err := ctx.RegisterResource("cloudflare:index/managedTransforms:ManagedTransforms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedTransforms gets an existing ManagedTransforms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedTransforms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedTransformsState, opts ...pulumi.ResourceOption) (*ManagedTransforms, error) {
	var resource ManagedTransforms
	err := ctx.ReadResource("cloudflare:index/managedTransforms:ManagedTransforms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedTransforms resources.
type managedTransformsState struct {
	// The list of Managed Request Transforms.
	ManagedRequestHeaders []ManagedTransformsManagedRequestHeader `pulumi:"managedRequestHeaders"`
	// The list of Managed Response Transforms.
	ManagedResponseHeaders []ManagedTransformsManagedResponseHeader `pulumi:"managedResponseHeaders"`
	// The unique ID of the zone.
	ZoneId *string `pulumi:"zoneId"`
}

type ManagedTransformsState struct {
	// The list of Managed Request Transforms.
	ManagedRequestHeaders ManagedTransformsManagedRequestHeaderArrayInput
	// The list of Managed Response Transforms.
	ManagedResponseHeaders ManagedTransformsManagedResponseHeaderArrayInput
	// The unique ID of the zone.
	ZoneId pulumi.StringPtrInput
}

func (ManagedTransformsState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedTransformsState)(nil)).Elem()
}

type managedTransformsArgs struct {
	// The list of Managed Request Transforms.
	ManagedRequestHeaders []ManagedTransformsManagedRequestHeader `pulumi:"managedRequestHeaders"`
	// The list of Managed Response Transforms.
	ManagedResponseHeaders []ManagedTransformsManagedResponseHeader `pulumi:"managedResponseHeaders"`
	// The unique ID of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ManagedTransforms resource.
type ManagedTransformsArgs struct {
	// The list of Managed Request Transforms.
	ManagedRequestHeaders ManagedTransformsManagedRequestHeaderArrayInput
	// The list of Managed Response Transforms.
	ManagedResponseHeaders ManagedTransformsManagedResponseHeaderArrayInput
	// The unique ID of the zone.
	ZoneId pulumi.StringInput
}

func (ManagedTransformsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedTransformsArgs)(nil)).Elem()
}

type ManagedTransformsInput interface {
	pulumi.Input

	ToManagedTransformsOutput() ManagedTransformsOutput
	ToManagedTransformsOutputWithContext(ctx context.Context) ManagedTransformsOutput
}

func (*ManagedTransforms) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedTransforms)(nil)).Elem()
}

func (i *ManagedTransforms) ToManagedTransformsOutput() ManagedTransformsOutput {
	return i.ToManagedTransformsOutputWithContext(context.Background())
}

func (i *ManagedTransforms) ToManagedTransformsOutputWithContext(ctx context.Context) ManagedTransformsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedTransformsOutput)
}

// ManagedTransformsArrayInput is an input type that accepts ManagedTransformsArray and ManagedTransformsArrayOutput values.
// You can construct a concrete instance of `ManagedTransformsArrayInput` via:
//
//	ManagedTransformsArray{ ManagedTransformsArgs{...} }
type ManagedTransformsArrayInput interface {
	pulumi.Input

	ToManagedTransformsArrayOutput() ManagedTransformsArrayOutput
	ToManagedTransformsArrayOutputWithContext(context.Context) ManagedTransformsArrayOutput
}

type ManagedTransformsArray []ManagedTransformsInput

func (ManagedTransformsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedTransforms)(nil)).Elem()
}

func (i ManagedTransformsArray) ToManagedTransformsArrayOutput() ManagedTransformsArrayOutput {
	return i.ToManagedTransformsArrayOutputWithContext(context.Background())
}

func (i ManagedTransformsArray) ToManagedTransformsArrayOutputWithContext(ctx context.Context) ManagedTransformsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedTransformsArrayOutput)
}

// ManagedTransformsMapInput is an input type that accepts ManagedTransformsMap and ManagedTransformsMapOutput values.
// You can construct a concrete instance of `ManagedTransformsMapInput` via:
//
//	ManagedTransformsMap{ "key": ManagedTransformsArgs{...} }
type ManagedTransformsMapInput interface {
	pulumi.Input

	ToManagedTransformsMapOutput() ManagedTransformsMapOutput
	ToManagedTransformsMapOutputWithContext(context.Context) ManagedTransformsMapOutput
}

type ManagedTransformsMap map[string]ManagedTransformsInput

func (ManagedTransformsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedTransforms)(nil)).Elem()
}

func (i ManagedTransformsMap) ToManagedTransformsMapOutput() ManagedTransformsMapOutput {
	return i.ToManagedTransformsMapOutputWithContext(context.Background())
}

func (i ManagedTransformsMap) ToManagedTransformsMapOutputWithContext(ctx context.Context) ManagedTransformsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedTransformsMapOutput)
}

type ManagedTransformsOutput struct{ *pulumi.OutputState }

func (ManagedTransformsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedTransforms)(nil)).Elem()
}

func (o ManagedTransformsOutput) ToManagedTransformsOutput() ManagedTransformsOutput {
	return o
}

func (o ManagedTransformsOutput) ToManagedTransformsOutputWithContext(ctx context.Context) ManagedTransformsOutput {
	return o
}

// The list of Managed Request Transforms.
func (o ManagedTransformsOutput) ManagedRequestHeaders() ManagedTransformsManagedRequestHeaderArrayOutput {
	return o.ApplyT(func(v *ManagedTransforms) ManagedTransformsManagedRequestHeaderArrayOutput {
		return v.ManagedRequestHeaders
	}).(ManagedTransformsManagedRequestHeaderArrayOutput)
}

// The list of Managed Response Transforms.
func (o ManagedTransformsOutput) ManagedResponseHeaders() ManagedTransformsManagedResponseHeaderArrayOutput {
	return o.ApplyT(func(v *ManagedTransforms) ManagedTransformsManagedResponseHeaderArrayOutput {
		return v.ManagedResponseHeaders
	}).(ManagedTransformsManagedResponseHeaderArrayOutput)
}

// The unique ID of the zone.
func (o ManagedTransformsOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedTransforms) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ManagedTransformsArrayOutput struct{ *pulumi.OutputState }

func (ManagedTransformsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedTransforms)(nil)).Elem()
}

func (o ManagedTransformsArrayOutput) ToManagedTransformsArrayOutput() ManagedTransformsArrayOutput {
	return o
}

func (o ManagedTransformsArrayOutput) ToManagedTransformsArrayOutputWithContext(ctx context.Context) ManagedTransformsArrayOutput {
	return o
}

func (o ManagedTransformsArrayOutput) Index(i pulumi.IntInput) ManagedTransformsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedTransforms {
		return vs[0].([]*ManagedTransforms)[vs[1].(int)]
	}).(ManagedTransformsOutput)
}

type ManagedTransformsMapOutput struct{ *pulumi.OutputState }

func (ManagedTransformsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedTransforms)(nil)).Elem()
}

func (o ManagedTransformsMapOutput) ToManagedTransformsMapOutput() ManagedTransformsMapOutput {
	return o
}

func (o ManagedTransformsMapOutput) ToManagedTransformsMapOutputWithContext(ctx context.Context) ManagedTransformsMapOutput {
	return o
}

func (o ManagedTransformsMapOutput) MapIndex(k pulumi.StringInput) ManagedTransformsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedTransforms {
		return vs[0].(map[string]*ManagedTransforms)[vs[1].(string)]
	}).(ManagedTransformsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedTransformsInput)(nil)).Elem(), &ManagedTransforms{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedTransformsArrayInput)(nil)).Elem(), ManagedTransformsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedTransformsMapInput)(nil)).Elem(), ManagedTransformsMap{})
	pulumi.RegisterOutputType(ManagedTransformsOutput{})
	pulumi.RegisterOutputType(ManagedTransformsArrayOutput{})
	pulumi.RegisterOutputType(ManagedTransformsMapOutput{})
}
