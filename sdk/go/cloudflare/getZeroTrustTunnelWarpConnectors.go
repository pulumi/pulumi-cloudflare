// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZeroTrustTunnelWarpConnectors(ctx, &cloudflare.LookupZeroTrustTunnelWarpConnectorsArgs{
//				AccountId:     "699d98642c564d2e855e9661899b7252",
//				ExcludePrefix: pulumi.StringRef("vpc1-"),
//				ExistedAt:     pulumi.StringRef("2019-10-12T07%3A20%3A50.52Z"),
//				IncludePrefix: pulumi.StringRef("vpc1-"),
//				IsDeleted:     pulumi.BoolRef(true),
//				Name:          pulumi.StringRef("blog"),
//				Status:        pulumi.StringRef("healthy"),
//				Uuid:          pulumi.StringRef("f70ff985-a4ef-4643-bbbc-4a0ed4fc8415"),
//				WasActiveAt:   pulumi.StringRef("2009-11-10T23:00:00Z"),
//				WasInactiveAt: pulumi.StringRef("2009-11-10T23:00:00Z"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZeroTrustTunnelWarpConnectors(ctx *pulumi.Context, args *LookupZeroTrustTunnelWarpConnectorsArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustTunnelWarpConnectorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustTunnelWarpConnectorsResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustTunnelWarpConnectors:getZeroTrustTunnelWarpConnectors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustTunnelWarpConnectors.
type LookupZeroTrustTunnelWarpConnectorsArgs struct {
	// Cloudflare account ID
	AccountId     string  `pulumi:"accountId"`
	ExcludePrefix *string `pulumi:"excludePrefix"`
	// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
	ExistedAt     *string `pulumi:"existedAt"`
	IncludePrefix *string `pulumi:"includePrefix"`
	// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
	IsDeleted *bool `pulumi:"isDeleted"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// A user-friendly name for the tunnel.
	Name *string `pulumi:"name"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status *string `pulumi:"status"`
	// UUID of the tunnel.
	Uuid          *string `pulumi:"uuid"`
	WasActiveAt   *string `pulumi:"wasActiveAt"`
	WasInactiveAt *string `pulumi:"wasInactiveAt"`
}

// A collection of values returned by getZeroTrustTunnelWarpConnectors.
type LookupZeroTrustTunnelWarpConnectorsResult struct {
	// Cloudflare account ID
	AccountId     string  `pulumi:"accountId"`
	ExcludePrefix *string `pulumi:"excludePrefix"`
	// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
	ExistedAt *string `pulumi:"existedAt"`
	// The provider-assigned unique ID for this managed resource.
	Id            string  `pulumi:"id"`
	IncludePrefix *string `pulumi:"includePrefix"`
	// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
	IsDeleted *bool `pulumi:"isDeleted"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// A user-friendly name for the tunnel.
	Name *string `pulumi:"name"`
	// The items returned by the data source
	Results []GetZeroTrustTunnelWarpConnectorsResult `pulumi:"results"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status *string `pulumi:"status"`
	// UUID of the tunnel.
	Uuid          *string `pulumi:"uuid"`
	WasActiveAt   *string `pulumi:"wasActiveAt"`
	WasInactiveAt *string `pulumi:"wasInactiveAt"`
}

func LookupZeroTrustTunnelWarpConnectorsOutput(ctx *pulumi.Context, args LookupZeroTrustTunnelWarpConnectorsOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustTunnelWarpConnectorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustTunnelWarpConnectorsResultOutput, error) {
			args := v.(LookupZeroTrustTunnelWarpConnectorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZeroTrustTunnelWarpConnectors:getZeroTrustTunnelWarpConnectors", args, LookupZeroTrustTunnelWarpConnectorsResultOutput{}, options).(LookupZeroTrustTunnelWarpConnectorsResultOutput), nil
		}).(LookupZeroTrustTunnelWarpConnectorsResultOutput)
}

// A collection of arguments for invoking getZeroTrustTunnelWarpConnectors.
type LookupZeroTrustTunnelWarpConnectorsOutputArgs struct {
	// Cloudflare account ID
	AccountId     pulumi.StringInput    `pulumi:"accountId"`
	ExcludePrefix pulumi.StringPtrInput `pulumi:"excludePrefix"`
	// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
	ExistedAt     pulumi.StringPtrInput `pulumi:"existedAt"`
	IncludePrefix pulumi.StringPtrInput `pulumi:"includePrefix"`
	// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
	IsDeleted pulumi.BoolPtrInput `pulumi:"isDeleted"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// A user-friendly name for the tunnel.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// UUID of the tunnel.
	Uuid          pulumi.StringPtrInput `pulumi:"uuid"`
	WasActiveAt   pulumi.StringPtrInput `pulumi:"wasActiveAt"`
	WasInactiveAt pulumi.StringPtrInput `pulumi:"wasInactiveAt"`
}

func (LookupZeroTrustTunnelWarpConnectorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelWarpConnectorsArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustTunnelWarpConnectors.
type LookupZeroTrustTunnelWarpConnectorsResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustTunnelWarpConnectorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustTunnelWarpConnectorsResult)(nil)).Elem()
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) ToLookupZeroTrustTunnelWarpConnectorsResultOutput() LookupZeroTrustTunnelWarpConnectorsResultOutput {
	return o
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) ToLookupZeroTrustTunnelWarpConnectorsResultOutputWithContext(ctx context.Context) LookupZeroTrustTunnelWarpConnectorsResultOutput {
	return o
}

// Cloudflare account ID
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) ExcludePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.ExcludePrefix }).(pulumi.StringPtrOutput)
}

// If provided, include only resources that were created (and not deleted) before this time. URL encoded.
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) ExistedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.ExistedAt }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) IncludePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.IncludePrefix }).(pulumi.StringPtrOutput)
}

// If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) IsDeleted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *bool { return v.IsDeleted }).(pulumi.BoolPtrOutput)
}

// Max items to fetch, default: 1000
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// A user-friendly name for the tunnel.
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The items returned by the data source
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) Results() GetZeroTrustTunnelWarpConnectorsResultArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) []GetZeroTrustTunnelWarpConnectorsResult {
		return v.Results
	}).(GetZeroTrustTunnelWarpConnectorsResultArrayOutput)
}

// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
// Available values: "inactive", "degraded", "healthy", "down".
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// UUID of the tunnel.
func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) WasActiveAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.WasActiveAt }).(pulumi.StringPtrOutput)
}

func (o LookupZeroTrustTunnelWarpConnectorsResultOutput) WasInactiveAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustTunnelWarpConnectorsResult) *string { return v.WasInactiveAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustTunnelWarpConnectorsResultOutput{})
}
