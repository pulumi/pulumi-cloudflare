// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Filter expressions that can be referenced across multiple features, e.g. Firewall Rule. The expression format is similar to [Wireshark Display Filter](https://www.wireshark.org/docs/man-pages/wireshark-filter.html).
type Filter struct {
	pulumi.CustomResourceState

	// A note that you can use to describe the purpose of the filter.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The filter expression to be used.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// Whether this filter is currently paused. Boolean value.
	Paused pulumi.BoolPtrOutput `pulumi:"paused"`
	// Short reference tag to quickly select related rules.
	Ref pulumi.StringPtrOutput `pulumi:"ref"`
	// The DNS zone to which the Filter should be added.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFilter registers a new resource with the given unique name, arguments, and options.
func NewFilter(ctx *pulumi.Context,
	name string, args *FilterArgs, opts ...pulumi.ResourceOption) (*Filter, error) {
	if args == nil || args.Expression == nil {
		return nil, errors.New("missing required argument 'Expression'")
	}
	if args == nil || args.ZoneId == nil {
		return nil, errors.New("missing required argument 'ZoneId'")
	}
	if args == nil {
		args = &FilterArgs{}
	}
	var resource Filter
	err := ctx.RegisterResource("cloudflare:index/filter:Filter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFilter gets an existing Filter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FilterState, opts ...pulumi.ResourceOption) (*Filter, error) {
	var resource Filter
	err := ctx.ReadResource("cloudflare:index/filter:Filter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Filter resources.
type filterState struct {
	// A note that you can use to describe the purpose of the filter.
	Description *string `pulumi:"description"`
	// The filter expression to be used.
	Expression *string `pulumi:"expression"`
	// Whether this filter is currently paused. Boolean value.
	Paused *bool `pulumi:"paused"`
	// Short reference tag to quickly select related rules.
	Ref *string `pulumi:"ref"`
	// The DNS zone to which the Filter should be added.
	ZoneId *string `pulumi:"zoneId"`
}

type FilterState struct {
	// A note that you can use to describe the purpose of the filter.
	Description pulumi.StringPtrInput
	// The filter expression to be used.
	Expression pulumi.StringPtrInput
	// Whether this filter is currently paused. Boolean value.
	Paused pulumi.BoolPtrInput
	// Short reference tag to quickly select related rules.
	Ref pulumi.StringPtrInput
	// The DNS zone to which the Filter should be added.
	ZoneId pulumi.StringPtrInput
}

func (FilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*filterState)(nil)).Elem()
}

type filterArgs struct {
	// A note that you can use to describe the purpose of the filter.
	Description *string `pulumi:"description"`
	// The filter expression to be used.
	Expression string `pulumi:"expression"`
	// Whether this filter is currently paused. Boolean value.
	Paused *bool `pulumi:"paused"`
	// Short reference tag to quickly select related rules.
	Ref *string `pulumi:"ref"`
	// The DNS zone to which the Filter should be added.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Filter resource.
type FilterArgs struct {
	// A note that you can use to describe the purpose of the filter.
	Description pulumi.StringPtrInput
	// The filter expression to be used.
	Expression pulumi.StringInput
	// Whether this filter is currently paused. Boolean value.
	Paused pulumi.BoolPtrInput
	// Short reference tag to quickly select related rules.
	Ref pulumi.StringPtrInput
	// The DNS zone to which the Filter should be added.
	ZoneId pulumi.StringInput
}

func (FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*filterArgs)(nil)).Elem()
}
