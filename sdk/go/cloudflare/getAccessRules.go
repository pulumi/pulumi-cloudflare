// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupAccessRules(ctx, &cloudflare.LookupAccessRulesArgs{
//				AccountId: pulumi.StringRef("account_id"),
//				ZoneId:    pulumi.StringRef("zone_id"),
//				Configuration: cloudflare.GetAccessRulesConfiguration{
//					Target: pulumi.StringRef("ip"),
//					Value:  pulumi.StringRef("198.51.100.4"),
//				},
//				Direction: pulumi.StringRef("desc"),
//				Mode:      pulumi.StringRef("challenge"),
//				Notes:     pulumi.StringRef("my note"),
//				Order:     pulumi.StringRef("mode"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccessRules(ctx *pulumi.Context, args *LookupAccessRulesArgs, opts ...pulumi.InvokeOption) (*LookupAccessRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessRulesResult
	err := ctx.Invoke("cloudflare:index/getAccessRules:getAccessRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessRules.
type LookupAccessRulesArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId     *string                      `pulumi:"accountId"`
	Configuration *GetAccessRulesConfiguration `pulumi:"configuration"`
	// Defines the direction used to sort returned rules.
	// Available values: "asc", "desc".
	Direction *string `pulumi:"direction"`
	// Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
	// Available values: "any", "all".
	Match *string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode *string `pulumi:"mode"`
	// Defines the string to search for in the notes of existing IP Access rules.
	// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
	Notes *string `pulumi:"notes"`
	// Defines the field used to sort returned rules.
	// Available values: "configuration.target", "configuration.value", "mode".
	Order *string `pulumi:"order"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getAccessRules.
type LookupAccessRulesResult struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId     *string                      `pulumi:"accountId"`
	Configuration *GetAccessRulesConfiguration `pulumi:"configuration"`
	// Defines the direction used to sort returned rules.
	// Available values: "asc", "desc".
	Direction *string `pulumi:"direction"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
	// Available values: "any", "all".
	Match string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode *string `pulumi:"mode"`
	// Defines the string to search for in the notes of existing IP Access rules.
	// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
	Notes *string `pulumi:"notes"`
	// Defines the field used to sort returned rules.
	// Available values: "configuration.target", "configuration.value", "mode".
	Order *string `pulumi:"order"`
	// The items returned by the data source
	Results []GetAccessRulesResult `pulumi:"results"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

func LookupAccessRulesOutput(ctx *pulumi.Context, args LookupAccessRulesOutputArgs, opts ...pulumi.InvokeOption) LookupAccessRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAccessRulesResultOutput, error) {
			args := v.(LookupAccessRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAccessRules:getAccessRules", args, LookupAccessRulesResultOutput{}, options).(LookupAccessRulesResultOutput), nil
		}).(LookupAccessRulesResultOutput)
}

// A collection of arguments for invoking getAccessRules.
type LookupAccessRulesOutputArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId     pulumi.StringPtrInput               `pulumi:"accountId"`
	Configuration GetAccessRulesConfigurationPtrInput `pulumi:"configuration"`
	// Defines the direction used to sort returned rules.
	// Available values: "asc", "desc".
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
	// Available values: "any", "all".
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// The action to apply to a matched request.
	// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Defines the string to search for in the notes of existing IP Access rules.
	// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
	Notes pulumi.StringPtrInput `pulumi:"notes"`
	// Defines the field used to sort returned rules.
	// Available values: "configuration.target", "configuration.value", "mode".
	Order pulumi.StringPtrInput `pulumi:"order"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (LookupAccessRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessRulesArgs)(nil)).Elem()
}

// A collection of values returned by getAccessRules.
type LookupAccessRulesResultOutput struct{ *pulumi.OutputState }

func (LookupAccessRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessRulesResult)(nil)).Elem()
}

func (o LookupAccessRulesResultOutput) ToLookupAccessRulesResultOutput() LookupAccessRulesResultOutput {
	return o
}

func (o LookupAccessRulesResultOutput) ToLookupAccessRulesResultOutputWithContext(ctx context.Context) LookupAccessRulesResultOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o LookupAccessRulesResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o LookupAccessRulesResultOutput) Configuration() GetAccessRulesConfigurationPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *GetAccessRulesConfiguration { return v.Configuration }).(GetAccessRulesConfigurationPtrOutput)
}

// Defines the direction used to sort returned rules.
// Available values: "asc", "desc".
func (o LookupAccessRulesResultOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Defines the search requirements. When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
// Available values: "any", "all".
func (o LookupAccessRulesResultOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) string { return v.Match }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupAccessRulesResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// The action to apply to a matched request.
// Available values: "block", "challenge", "whitelist", "js*challenge", "managed*challenge".
func (o LookupAccessRulesResultOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Defines the string to search for in the notes of existing IP Access rules.
// Notes: For example, the string 'attack' would match IP Access rules with notes 'Attack 26/02' and 'Attack 27/02'. The search is case insensitive.
func (o LookupAccessRulesResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// Defines the field used to sort returned rules.
// Available values: "configuration.target", "configuration.value", "mode".
func (o LookupAccessRulesResultOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.Order }).(pulumi.StringPtrOutput)
}

// The items returned by the data source
func (o LookupAccessRulesResultOutput) Results() GetAccessRulesResultArrayOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) []GetAccessRulesResult { return v.Results }).(GetAccessRulesResultArrayOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o LookupAccessRulesResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessRulesResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessRulesResultOutput{})
}
