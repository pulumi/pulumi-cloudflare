// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource, that manages Cloudflare static routes for Magic
// Transit or Magic WAN. Static routes are used to route traffic
// through GRE tunnels.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicWanStaticRoute(ctx, "example", &cloudflare.MagicWanStaticRouteArgs{
//				AccountId:   pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Description: pulumi.String("New route for new prefix 192.0.2.0/24"),
//				Prefix:      pulumi.String("192.0.2.0/24"),
//				Nexthop:     pulumi.String("10.0.0.0"),
//				Priority:    pulumi.Int(100),
//				Weight:      pulumi.Int(10),
//				ColoNames: pulumi.StringArray{
//					pulumi.String("den01"),
//				},
//				ColoRegions: pulumi.StringArray{
//					pulumi.String("APAC"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute example <account_id>/<static_route_id>
// ```
type MagicWanStaticRoute struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// List of Cloudflare colocation regions for this static route.
	ColoNames pulumi.StringArrayOutput `pulumi:"coloNames"`
	// List of Cloudflare colocation names for this static route.
	ColoRegions pulumi.StringArrayOutput `pulumi:"coloRegions"`
	// Description of the static route.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The nexthop IP address where traffic will be routed to.
	Nexthop pulumi.StringOutput `pulumi:"nexthop"`
	// Your network prefix using CIDR notation.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// The priority for the static route.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewMagicWanStaticRoute registers a new resource with the given unique name, arguments, and options.
func NewMagicWanStaticRoute(ctx *pulumi.Context,
	name string, args *MagicWanStaticRouteArgs, opts ...pulumi.ResourceOption) (*MagicWanStaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Nexthop == nil {
		return nil, errors.New("invalid value for required argument 'Nexthop'")
	}
	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicWanStaticRoute
	err := ctx.RegisterResource("cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicWanStaticRoute gets an existing MagicWanStaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicWanStaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicWanStaticRouteState, opts ...pulumi.ResourceOption) (*MagicWanStaticRoute, error) {
	var resource MagicWanStaticRoute
	err := ctx.ReadResource("cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicWanStaticRoute resources.
type magicWanStaticRouteState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// List of Cloudflare colocation regions for this static route.
	ColoNames []string `pulumi:"coloNames"`
	// List of Cloudflare colocation names for this static route.
	ColoRegions []string `pulumi:"coloRegions"`
	// Description of the static route.
	Description *string `pulumi:"description"`
	// The nexthop IP address where traffic will be routed to.
	Nexthop *string `pulumi:"nexthop"`
	// Your network prefix using CIDR notation.
	Prefix *string `pulumi:"prefix"`
	// The priority for the static route.
	Priority *int `pulumi:"priority"`
	// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
	Weight *int `pulumi:"weight"`
}

type MagicWanStaticRouteState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// List of Cloudflare colocation regions for this static route.
	ColoNames pulumi.StringArrayInput
	// List of Cloudflare colocation names for this static route.
	ColoRegions pulumi.StringArrayInput
	// Description of the static route.
	Description pulumi.StringPtrInput
	// The nexthop IP address where traffic will be routed to.
	Nexthop pulumi.StringPtrInput
	// Your network prefix using CIDR notation.
	Prefix pulumi.StringPtrInput
	// The priority for the static route.
	Priority pulumi.IntPtrInput
	// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
	Weight pulumi.IntPtrInput
}

func (MagicWanStaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanStaticRouteState)(nil)).Elem()
}

type magicWanStaticRouteArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// List of Cloudflare colocation regions for this static route.
	ColoNames []string `pulumi:"coloNames"`
	// List of Cloudflare colocation names for this static route.
	ColoRegions []string `pulumi:"coloRegions"`
	// Description of the static route.
	Description *string `pulumi:"description"`
	// The nexthop IP address where traffic will be routed to.
	Nexthop string `pulumi:"nexthop"`
	// Your network prefix using CIDR notation.
	Prefix string `pulumi:"prefix"`
	// The priority for the static route.
	Priority int `pulumi:"priority"`
	// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a MagicWanStaticRoute resource.
type MagicWanStaticRouteArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// List of Cloudflare colocation regions for this static route.
	ColoNames pulumi.StringArrayInput
	// List of Cloudflare colocation names for this static route.
	ColoRegions pulumi.StringArrayInput
	// Description of the static route.
	Description pulumi.StringPtrInput
	// The nexthop IP address where traffic will be routed to.
	Nexthop pulumi.StringInput
	// Your network prefix using CIDR notation.
	Prefix pulumi.StringInput
	// The priority for the static route.
	Priority pulumi.IntInput
	// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
	Weight pulumi.IntPtrInput
}

func (MagicWanStaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanStaticRouteArgs)(nil)).Elem()
}

type MagicWanStaticRouteInput interface {
	pulumi.Input

	ToMagicWanStaticRouteOutput() MagicWanStaticRouteOutput
	ToMagicWanStaticRouteOutputWithContext(ctx context.Context) MagicWanStaticRouteOutput
}

func (*MagicWanStaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanStaticRoute)(nil)).Elem()
}

func (i *MagicWanStaticRoute) ToMagicWanStaticRouteOutput() MagicWanStaticRouteOutput {
	return i.ToMagicWanStaticRouteOutputWithContext(context.Background())
}

func (i *MagicWanStaticRoute) ToMagicWanStaticRouteOutputWithContext(ctx context.Context) MagicWanStaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanStaticRouteOutput)
}

// MagicWanStaticRouteArrayInput is an input type that accepts MagicWanStaticRouteArray and MagicWanStaticRouteArrayOutput values.
// You can construct a concrete instance of `MagicWanStaticRouteArrayInput` via:
//
//	MagicWanStaticRouteArray{ MagicWanStaticRouteArgs{...} }
type MagicWanStaticRouteArrayInput interface {
	pulumi.Input

	ToMagicWanStaticRouteArrayOutput() MagicWanStaticRouteArrayOutput
	ToMagicWanStaticRouteArrayOutputWithContext(context.Context) MagicWanStaticRouteArrayOutput
}

type MagicWanStaticRouteArray []MagicWanStaticRouteInput

func (MagicWanStaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanStaticRoute)(nil)).Elem()
}

func (i MagicWanStaticRouteArray) ToMagicWanStaticRouteArrayOutput() MagicWanStaticRouteArrayOutput {
	return i.ToMagicWanStaticRouteArrayOutputWithContext(context.Background())
}

func (i MagicWanStaticRouteArray) ToMagicWanStaticRouteArrayOutputWithContext(ctx context.Context) MagicWanStaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanStaticRouteArrayOutput)
}

// MagicWanStaticRouteMapInput is an input type that accepts MagicWanStaticRouteMap and MagicWanStaticRouteMapOutput values.
// You can construct a concrete instance of `MagicWanStaticRouteMapInput` via:
//
//	MagicWanStaticRouteMap{ "key": MagicWanStaticRouteArgs{...} }
type MagicWanStaticRouteMapInput interface {
	pulumi.Input

	ToMagicWanStaticRouteMapOutput() MagicWanStaticRouteMapOutput
	ToMagicWanStaticRouteMapOutputWithContext(context.Context) MagicWanStaticRouteMapOutput
}

type MagicWanStaticRouteMap map[string]MagicWanStaticRouteInput

func (MagicWanStaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanStaticRoute)(nil)).Elem()
}

func (i MagicWanStaticRouteMap) ToMagicWanStaticRouteMapOutput() MagicWanStaticRouteMapOutput {
	return i.ToMagicWanStaticRouteMapOutputWithContext(context.Background())
}

func (i MagicWanStaticRouteMap) ToMagicWanStaticRouteMapOutputWithContext(ctx context.Context) MagicWanStaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanStaticRouteMapOutput)
}

type MagicWanStaticRouteOutput struct{ *pulumi.OutputState }

func (MagicWanStaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanStaticRoute)(nil)).Elem()
}

func (o MagicWanStaticRouteOutput) ToMagicWanStaticRouteOutput() MagicWanStaticRouteOutput {
	return o
}

func (o MagicWanStaticRouteOutput) ToMagicWanStaticRouteOutputWithContext(ctx context.Context) MagicWanStaticRouteOutput {
	return o
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o MagicWanStaticRouteOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// List of Cloudflare colocation regions for this static route.
func (o MagicWanStaticRouteOutput) ColoNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringArrayOutput { return v.ColoNames }).(pulumi.StringArrayOutput)
}

// List of Cloudflare colocation names for this static route.
func (o MagicWanStaticRouteOutput) ColoRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringArrayOutput { return v.ColoRegions }).(pulumi.StringArrayOutput)
}

// Description of the static route.
func (o MagicWanStaticRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The nexthop IP address where traffic will be routed to.
func (o MagicWanStaticRouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringOutput { return v.Nexthop }).(pulumi.StringOutput)
}

// Your network prefix using CIDR notation.
func (o MagicWanStaticRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// The priority for the static route.
func (o MagicWanStaticRouteOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The optional weight for ECMP routes. **Modifying this attribute will force creation of a new resource.**
func (o MagicWanStaticRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MagicWanStaticRoute) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type MagicWanStaticRouteArrayOutput struct{ *pulumi.OutputState }

func (MagicWanStaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanStaticRoute)(nil)).Elem()
}

func (o MagicWanStaticRouteArrayOutput) ToMagicWanStaticRouteArrayOutput() MagicWanStaticRouteArrayOutput {
	return o
}

func (o MagicWanStaticRouteArrayOutput) ToMagicWanStaticRouteArrayOutputWithContext(ctx context.Context) MagicWanStaticRouteArrayOutput {
	return o
}

func (o MagicWanStaticRouteArrayOutput) Index(i pulumi.IntInput) MagicWanStaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicWanStaticRoute {
		return vs[0].([]*MagicWanStaticRoute)[vs[1].(int)]
	}).(MagicWanStaticRouteOutput)
}

type MagicWanStaticRouteMapOutput struct{ *pulumi.OutputState }

func (MagicWanStaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanStaticRoute)(nil)).Elem()
}

func (o MagicWanStaticRouteMapOutput) ToMagicWanStaticRouteMapOutput() MagicWanStaticRouteMapOutput {
	return o
}

func (o MagicWanStaticRouteMapOutput) ToMagicWanStaticRouteMapOutputWithContext(ctx context.Context) MagicWanStaticRouteMapOutput {
	return o
}

func (o MagicWanStaticRouteMapOutput) MapIndex(k pulumi.StringInput) MagicWanStaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicWanStaticRoute {
		return vs[0].(map[string]*MagicWanStaticRoute)[vs[1].(string)]
	}).(MagicWanStaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanStaticRouteInput)(nil)).Elem(), &MagicWanStaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanStaticRouteArrayInput)(nil)).Elem(), MagicWanStaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanStaticRouteMapInput)(nil)).Elem(), MagicWanStaticRouteMap{})
	pulumi.RegisterOutputType(MagicWanStaticRouteOutput{})
	pulumi.RegisterOutputType(MagicWanStaticRouteArrayOutput{})
	pulumi.RegisterOutputType(MagicWanStaticRouteMapOutput{})
}
