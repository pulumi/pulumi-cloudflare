// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a resource which manages Cloudflare account members.
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/accountMember:AccountMember example <account_id>/<member_id>
//
// ```
type AccountMember struct {
	pulumi.CustomResourceState

	// Account ID to create the account member in.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress pulumi.StringOutput `pulumi:"emailAddress"`
	// List of account role IDs that you want to assign to a member.
	RoleIds pulumi.StringArrayOutput `pulumi:"roleIds"`
	// A member's status in the account. Available values: `accepted`, `pending`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAccountMember registers a new resource with the given unique name, arguments, and options.
func NewAccountMember(ctx *pulumi.Context,
	name string, args *AccountMemberArgs, opts ...pulumi.ResourceOption) (*AccountMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	if args.RoleIds == nil {
		return nil, errors.New("invalid value for required argument 'RoleIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccountMember
	err := ctx.RegisterResource("cloudflare:index/accountMember:AccountMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountMember gets an existing AccountMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountMemberState, opts ...pulumi.ResourceOption) (*AccountMember, error) {
	var resource AccountMember
	err := ctx.ReadResource("cloudflare:index/accountMember:AccountMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountMember resources.
type accountMemberState struct {
	// Account ID to create the account member in.
	AccountId *string `pulumi:"accountId"`
	// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress *string `pulumi:"emailAddress"`
	// List of account role IDs that you want to assign to a member.
	RoleIds []string `pulumi:"roleIds"`
	// A member's status in the account. Available values: `accepted`, `pending`.
	Status *string `pulumi:"status"`
}

type AccountMemberState struct {
	// Account ID to create the account member in.
	AccountId pulumi.StringPtrInput
	// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress pulumi.StringPtrInput
	// List of account role IDs that you want to assign to a member.
	RoleIds pulumi.StringArrayInput
	// A member's status in the account. Available values: `accepted`, `pending`.
	Status pulumi.StringPtrInput
}

func (AccountMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountMemberState)(nil)).Elem()
}

type accountMemberArgs struct {
	// Account ID to create the account member in.
	AccountId string `pulumi:"accountId"`
	// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress string `pulumi:"emailAddress"`
	// List of account role IDs that you want to assign to a member.
	RoleIds []string `pulumi:"roleIds"`
	// A member's status in the account. Available values: `accepted`, `pending`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a AccountMember resource.
type AccountMemberArgs struct {
	// Account ID to create the account member in.
	AccountId pulumi.StringInput
	// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
	EmailAddress pulumi.StringInput
	// List of account role IDs that you want to assign to a member.
	RoleIds pulumi.StringArrayInput
	// A member's status in the account. Available values: `accepted`, `pending`.
	Status pulumi.StringPtrInput
}

func (AccountMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountMemberArgs)(nil)).Elem()
}

type AccountMemberInput interface {
	pulumi.Input

	ToAccountMemberOutput() AccountMemberOutput
	ToAccountMemberOutputWithContext(ctx context.Context) AccountMemberOutput
}

func (*AccountMember) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountMember)(nil)).Elem()
}

func (i *AccountMember) ToAccountMemberOutput() AccountMemberOutput {
	return i.ToAccountMemberOutputWithContext(context.Background())
}

func (i *AccountMember) ToAccountMemberOutputWithContext(ctx context.Context) AccountMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMemberOutput)
}

func (i *AccountMember) ToOutput(ctx context.Context) pulumix.Output[*AccountMember] {
	return pulumix.Output[*AccountMember]{
		OutputState: i.ToAccountMemberOutputWithContext(ctx).OutputState,
	}
}

// AccountMemberArrayInput is an input type that accepts AccountMemberArray and AccountMemberArrayOutput values.
// You can construct a concrete instance of `AccountMemberArrayInput` via:
//
//	AccountMemberArray{ AccountMemberArgs{...} }
type AccountMemberArrayInput interface {
	pulumi.Input

	ToAccountMemberArrayOutput() AccountMemberArrayOutput
	ToAccountMemberArrayOutputWithContext(context.Context) AccountMemberArrayOutput
}

type AccountMemberArray []AccountMemberInput

func (AccountMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountMember)(nil)).Elem()
}

func (i AccountMemberArray) ToAccountMemberArrayOutput() AccountMemberArrayOutput {
	return i.ToAccountMemberArrayOutputWithContext(context.Background())
}

func (i AccountMemberArray) ToAccountMemberArrayOutputWithContext(ctx context.Context) AccountMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMemberArrayOutput)
}

func (i AccountMemberArray) ToOutput(ctx context.Context) pulumix.Output[[]*AccountMember] {
	return pulumix.Output[[]*AccountMember]{
		OutputState: i.ToAccountMemberArrayOutputWithContext(ctx).OutputState,
	}
}

// AccountMemberMapInput is an input type that accepts AccountMemberMap and AccountMemberMapOutput values.
// You can construct a concrete instance of `AccountMemberMapInput` via:
//
//	AccountMemberMap{ "key": AccountMemberArgs{...} }
type AccountMemberMapInput interface {
	pulumi.Input

	ToAccountMemberMapOutput() AccountMemberMapOutput
	ToAccountMemberMapOutputWithContext(context.Context) AccountMemberMapOutput
}

type AccountMemberMap map[string]AccountMemberInput

func (AccountMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountMember)(nil)).Elem()
}

func (i AccountMemberMap) ToAccountMemberMapOutput() AccountMemberMapOutput {
	return i.ToAccountMemberMapOutputWithContext(context.Background())
}

func (i AccountMemberMap) ToAccountMemberMapOutputWithContext(ctx context.Context) AccountMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMemberMapOutput)
}

func (i AccountMemberMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccountMember] {
	return pulumix.Output[map[string]*AccountMember]{
		OutputState: i.ToAccountMemberMapOutputWithContext(ctx).OutputState,
	}
}

type AccountMemberOutput struct{ *pulumi.OutputState }

func (AccountMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountMember)(nil)).Elem()
}

func (o AccountMemberOutput) ToAccountMemberOutput() AccountMemberOutput {
	return o
}

func (o AccountMemberOutput) ToAccountMemberOutputWithContext(ctx context.Context) AccountMemberOutput {
	return o
}

func (o AccountMemberOutput) ToOutput(ctx context.Context) pulumix.Output[*AccountMember] {
	return pulumix.Output[*AccountMember]{
		OutputState: o.OutputState,
	}
}

// Account ID to create the account member in.
func (o AccountMemberOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountMember) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The email address of the user who you wish to manage. Following creation, this field becomes read only via the API and cannot be updated.
func (o AccountMemberOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountMember) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

// List of account role IDs that you want to assign to a member.
func (o AccountMemberOutput) RoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccountMember) pulumi.StringArrayOutput { return v.RoleIds }).(pulumi.StringArrayOutput)
}

// A member's status in the account. Available values: `accepted`, `pending`.
func (o AccountMemberOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountMember) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AccountMemberArrayOutput struct{ *pulumi.OutputState }

func (AccountMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountMember)(nil)).Elem()
}

func (o AccountMemberArrayOutput) ToAccountMemberArrayOutput() AccountMemberArrayOutput {
	return o
}

func (o AccountMemberArrayOutput) ToAccountMemberArrayOutputWithContext(ctx context.Context) AccountMemberArrayOutput {
	return o
}

func (o AccountMemberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AccountMember] {
	return pulumix.Output[[]*AccountMember]{
		OutputState: o.OutputState,
	}
}

func (o AccountMemberArrayOutput) Index(i pulumi.IntInput) AccountMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountMember {
		return vs[0].([]*AccountMember)[vs[1].(int)]
	}).(AccountMemberOutput)
}

type AccountMemberMapOutput struct{ *pulumi.OutputState }

func (AccountMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountMember)(nil)).Elem()
}

func (o AccountMemberMapOutput) ToAccountMemberMapOutput() AccountMemberMapOutput {
	return o
}

func (o AccountMemberMapOutput) ToAccountMemberMapOutputWithContext(ctx context.Context) AccountMemberMapOutput {
	return o
}

func (o AccountMemberMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccountMember] {
	return pulumix.Output[map[string]*AccountMember]{
		OutputState: o.OutputState,
	}
}

func (o AccountMemberMapOutput) MapIndex(k pulumi.StringInput) AccountMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountMember {
		return vs[0].(map[string]*AccountMember)[vs[1].(string)]
	}).(AccountMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMemberInput)(nil)).Elem(), &AccountMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMemberArrayInput)(nil)).Elem(), AccountMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMemberMapInput)(nil)).Elem(), AccountMemberMap{})
	pulumi.RegisterOutputType(AccountMemberOutput{})
	pulumi.RegisterOutputType(AccountMemberArrayOutput{})
	pulumi.RegisterOutputType(AccountMemberMapOutput{})
}
