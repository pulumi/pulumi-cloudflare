// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupCustomSsls(ctx, &cloudflare.LookupCustomSslsArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Status: pulumi.StringRef("active"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCustomSsls(ctx *pulumi.Context, args *LookupCustomSslsArgs, opts ...pulumi.InvokeOption) (*LookupCustomSslsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomSslsResult
	err := ctx.Invoke("cloudflare:index/getCustomSsls:getCustomSsls", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomSsls.
type LookupCustomSslsArgs struct {
	// Whether to match all search requirements or at least one (any).
	// Available values: "any", "all".
	Match *string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Status of the zone's custom SSL.
	// Available values: "active", "expired", "deleted", "pending", "initializing".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCustomSsls.
type LookupCustomSslsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether to match all search requirements or at least one (any).
	// Available values: "any", "all".
	Match string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// The items returned by the data source
	Results []GetCustomSslsResult `pulumi:"results"`
	// Status of the zone's custom SSL.
	// Available values: "active", "expired", "deleted", "pending", "initializing".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupCustomSslsOutput(ctx *pulumi.Context, args LookupCustomSslsOutputArgs, opts ...pulumi.InvokeOption) LookupCustomSslsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCustomSslsResultOutput, error) {
			args := v.(LookupCustomSslsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getCustomSsls:getCustomSsls", args, LookupCustomSslsResultOutput{}, options).(LookupCustomSslsResultOutput), nil
		}).(LookupCustomSslsResultOutput)
}

// A collection of arguments for invoking getCustomSsls.
type LookupCustomSslsOutputArgs struct {
	// Whether to match all search requirements or at least one (any).
	// Available values: "any", "all".
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// Status of the zone's custom SSL.
	// Available values: "active", "expired", "deleted", "pending", "initializing".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupCustomSslsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomSslsArgs)(nil)).Elem()
}

// A collection of values returned by getCustomSsls.
type LookupCustomSslsResultOutput struct{ *pulumi.OutputState }

func (LookupCustomSslsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomSslsResult)(nil)).Elem()
}

func (o LookupCustomSslsResultOutput) ToLookupCustomSslsResultOutput() LookupCustomSslsResultOutput {
	return o
}

func (o LookupCustomSslsResultOutput) ToLookupCustomSslsResultOutputWithContext(ctx context.Context) LookupCustomSslsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCustomSslsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to match all search requirements or at least one (any).
// Available values: "any", "all".
func (o LookupCustomSslsResultOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) string { return v.Match }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupCustomSslsResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// The items returned by the data source
func (o LookupCustomSslsResultOutput) Results() GetCustomSslsResultArrayOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) []GetCustomSslsResult { return v.Results }).(GetCustomSslsResultArrayOutput)
}

// Status of the zone's custom SSL.
// Available values: "active", "expired", "deleted", "pending", "initializing".
func (o LookupCustomSslsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Identifier.
func (o LookupCustomSslsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCustomSslsResultOutput{})
}
