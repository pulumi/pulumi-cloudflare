// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupCustomSsl(ctx, &cloudflare.LookupCustomSslArgs{
//				ZoneId:              "023e105f4ecef8ad9ca31a8372d0c353",
//				CustomCertificateId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCustomSsl(ctx *pulumi.Context, args *LookupCustomSslArgs, opts ...pulumi.InvokeOption) (*LookupCustomSslResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCustomSslResult
	err := ctx.Invoke("cloudflare:index/getCustomSsl:getCustomSsl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCustomSsl.
type LookupCustomSslArgs struct {
	// Identifier
	CustomCertificateId *string             `pulumi:"customCertificateId"`
	Filter              *GetCustomSslFilter `pulumi:"filter"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCustomSsl.
type LookupCustomSslResult struct {
	// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
	// Available values: "ubiquitous", "optimal", "force".
	BundleMethod string `pulumi:"bundleMethod"`
	// Identifier
	CustomCertificateId *string `pulumi:"customCertificateId"`
	// When the certificate from the authority expires.
	ExpiresOn string              `pulumi:"expiresOn"`
	Filter    *GetCustomSslFilter `pulumi:"filter"`
	// Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance.
	GeoRestrictions GetCustomSslGeoRestrictions `pulumi:"geoRestrictions"`
	Hosts           []string                    `pulumi:"hosts"`
	// Identifier
	Id string `pulumi:"id"`
	// The certificate authority that issued the certificate.
	Issuer        string                    `pulumi:"issuer"`
	KeylessServer GetCustomSslKeylessServer `pulumi:"keylessServer"`
	// When the certificate was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO*3166-1*alpha-2#Officially*assigned*code_elements) can be chosen, such as 'country: IN', as well as 'region: EU' which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
	Policy string `pulumi:"policy"`
	// The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping 'legacy*custom' certificates, but 'legacy*custom' certificates will always supercede 'sni_custom' certificates.
	Priority float64 `pulumi:"priority"`
	// The type of hash used for the certificate.
	Signature string `pulumi:"signature"`
	// Status of the zone's custom SSL.
	// Available values: "active", "expired", "deleted", "pending", "initializing".
	Status string `pulumi:"status"`
	// When the certificate was uploaded to Cloudflare.
	UploadedOn string `pulumi:"uploadedOn"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupCustomSslOutput(ctx *pulumi.Context, args LookupCustomSslOutputArgs, opts ...pulumi.InvokeOption) LookupCustomSslResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCustomSslResultOutput, error) {
			args := v.(LookupCustomSslArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getCustomSsl:getCustomSsl", args, LookupCustomSslResultOutput{}, options).(LookupCustomSslResultOutput), nil
		}).(LookupCustomSslResultOutput)
}

// A collection of arguments for invoking getCustomSsl.
type LookupCustomSslOutputArgs struct {
	// Identifier
	CustomCertificateId pulumi.StringPtrInput      `pulumi:"customCertificateId"`
	Filter              GetCustomSslFilterPtrInput `pulumi:"filter"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupCustomSslOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomSslArgs)(nil)).Elem()
}

// A collection of values returned by getCustomSsl.
type LookupCustomSslResultOutput struct{ *pulumi.OutputState }

func (LookupCustomSslResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCustomSslResult)(nil)).Elem()
}

func (o LookupCustomSslResultOutput) ToLookupCustomSslResultOutput() LookupCustomSslResultOutput {
	return o
}

func (o LookupCustomSslResultOutput) ToLookupCustomSslResultOutputWithContext(ctx context.Context) LookupCustomSslResultOutput {
	return o
}

// A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
// Available values: "ubiquitous", "optimal", "force".
func (o LookupCustomSslResultOutput) BundleMethod() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.BundleMethod }).(pulumi.StringOutput)
}

// Identifier
func (o LookupCustomSslResultOutput) CustomCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCustomSslResult) *string { return v.CustomCertificateId }).(pulumi.StringPtrOutput)
}

// When the certificate from the authority expires.
func (o LookupCustomSslResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

func (o LookupCustomSslResultOutput) Filter() GetCustomSslFilterPtrOutput {
	return o.ApplyT(func(v LookupCustomSslResult) *GetCustomSslFilter { return v.Filter }).(GetCustomSslFilterPtrOutput)
}

// Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance.
func (o LookupCustomSslResultOutput) GeoRestrictions() GetCustomSslGeoRestrictionsOutput {
	return o.ApplyT(func(v LookupCustomSslResult) GetCustomSslGeoRestrictions { return v.GeoRestrictions }).(GetCustomSslGeoRestrictionsOutput)
}

func (o LookupCustomSslResultOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCustomSslResult) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Identifier
func (o LookupCustomSslResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.Id }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o LookupCustomSslResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.Issuer }).(pulumi.StringOutput)
}

func (o LookupCustomSslResultOutput) KeylessServer() GetCustomSslKeylessServerOutput {
	return o.ApplyT(func(v LookupCustomSslResult) GetCustomSslKeylessServer { return v.KeylessServer }).(GetCustomSslKeylessServerOutput)
}

// When the certificate was last modified.
func (o LookupCustomSslResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO*3166-1*alpha-2#Officially*assigned*code_elements) can be chosen, such as 'country: IN', as well as 'region: EU' which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
func (o LookupCustomSslResultOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.Policy }).(pulumi.StringOutput)
}

// The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping 'legacy*custom' certificates, but 'legacy*custom' certificates will always supercede 'sni_custom' certificates.
func (o LookupCustomSslResultOutput) Priority() pulumi.Float64Output {
	return o.ApplyT(func(v LookupCustomSslResult) float64 { return v.Priority }).(pulumi.Float64Output)
}

// The type of hash used for the certificate.
func (o LookupCustomSslResultOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.Signature }).(pulumi.StringOutput)
}

// Status of the zone's custom SSL.
// Available values: "active", "expired", "deleted", "pending", "initializing".
func (o LookupCustomSslResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.Status }).(pulumi.StringOutput)
}

// When the certificate was uploaded to Cloudflare.
func (o LookupCustomSslResultOutput) UploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.UploadedOn }).(pulumi.StringOutput)
}

// Identifier
func (o LookupCustomSslResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCustomSslResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCustomSslResultOutput{})
}
