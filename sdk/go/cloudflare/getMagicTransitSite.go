// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupMagicTransitSite(ctx, &cloudflare.LookupMagicTransitSiteArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				SiteId:    pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMagicTransitSite(ctx *pulumi.Context, args *LookupMagicTransitSiteArgs, opts ...pulumi.InvokeOption) (*LookupMagicTransitSiteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMagicTransitSiteResult
	err := ctx.Invoke("cloudflare:index/getMagicTransitSite:getMagicTransitSite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMagicTransitSite.
type LookupMagicTransitSiteArgs struct {
	// Identifier
	AccountId string                     `pulumi:"accountId"`
	Filter    *GetMagicTransitSiteFilter `pulumi:"filter"`
	// Identifier
	SiteId *string `pulumi:"siteId"`
}

// A collection of values returned by getMagicTransitSite.
type LookupMagicTransitSiteResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Magic Connector identifier tag.
	ConnectorId string                     `pulumi:"connectorId"`
	Description string                     `pulumi:"description"`
	Filter      *GetMagicTransitSiteFilter `pulumi:"filter"`
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode bool `pulumi:"haMode"`
	// Identifier
	Id string `pulumi:"id"`
	// Location of site in latitude and longitude.
	Location GetMagicTransitSiteLocation `pulumi:"location"`
	// The name of the site.
	Name string `pulumi:"name"`
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId string `pulumi:"secondaryConnectorId"`
	// Identifier
	SiteId *string `pulumi:"siteId"`
}

func LookupMagicTransitSiteOutput(ctx *pulumi.Context, args LookupMagicTransitSiteOutputArgs, opts ...pulumi.InvokeOption) LookupMagicTransitSiteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMagicTransitSiteResultOutput, error) {
			args := v.(LookupMagicTransitSiteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getMagicTransitSite:getMagicTransitSite", args, LookupMagicTransitSiteResultOutput{}, options).(LookupMagicTransitSiteResultOutput), nil
		}).(LookupMagicTransitSiteResultOutput)
}

// A collection of arguments for invoking getMagicTransitSite.
type LookupMagicTransitSiteOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput                `pulumi:"accountId"`
	Filter    GetMagicTransitSiteFilterPtrInput `pulumi:"filter"`
	// Identifier
	SiteId pulumi.StringPtrInput `pulumi:"siteId"`
}

func (LookupMagicTransitSiteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteArgs)(nil)).Elem()
}

// A collection of values returned by getMagicTransitSite.
type LookupMagicTransitSiteResultOutput struct{ *pulumi.OutputState }

func (LookupMagicTransitSiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteResult)(nil)).Elem()
}

func (o LookupMagicTransitSiteResultOutput) ToLookupMagicTransitSiteResultOutput() LookupMagicTransitSiteResultOutput {
	return o
}

func (o LookupMagicTransitSiteResultOutput) ToLookupMagicTransitSiteResultOutputWithContext(ctx context.Context) LookupMagicTransitSiteResultOutput {
	return o
}

// Identifier
func (o LookupMagicTransitSiteResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Magic Connector identifier tag.
func (o LookupMagicTransitSiteResultOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.ConnectorId }).(pulumi.StringOutput)
}

func (o LookupMagicTransitSiteResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupMagicTransitSiteResultOutput) Filter() GetMagicTransitSiteFilterPtrOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) *GetMagicTransitSiteFilter { return v.Filter }).(GetMagicTransitSiteFilterPtrOutput)
}

// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
func (o LookupMagicTransitSiteResultOutput) HaMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) bool { return v.HaMode }).(pulumi.BoolOutput)
}

// Identifier
func (o LookupMagicTransitSiteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.Id }).(pulumi.StringOutput)
}

// Location of site in latitude and longitude.
func (o LookupMagicTransitSiteResultOutput) Location() GetMagicTransitSiteLocationOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) GetMagicTransitSiteLocation { return v.Location }).(GetMagicTransitSiteLocationOutput)
}

// The name of the site.
func (o LookupMagicTransitSiteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.Name }).(pulumi.StringOutput)
}

// Magic Connector identifier tag. Used when high availability mode is on.
func (o LookupMagicTransitSiteResultOutput) SecondaryConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) string { return v.SecondaryConnectorId }).(pulumi.StringOutput)
}

// Identifier
func (o LookupMagicTransitSiteResultOutput) SiteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteResult) *string { return v.SiteId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMagicTransitSiteResultOutput{})
}
