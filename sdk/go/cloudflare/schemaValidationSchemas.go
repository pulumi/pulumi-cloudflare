// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewSchemaValidationSchemas(ctx, "example_schema_validation_schemas", &cloudflare.SchemaValidationSchemasArgs{
//				ZoneId:            pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Kind:              pulumi.String("openapi_v3"),
//				Name:              pulumi.String("petstore schema"),
//				Source:            pulumi.String("<schema file contents>"),
//				ValidationEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas example '<zone_id>/<schema_id>'
// ```
type SchemaValidationSchemas struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The kind of the schema
	// Available values: "openapiV3".
	Kind pulumi.StringOutput `pulumi:"kind"`
	// A human-readable name for the schema
	Name pulumi.StringOutput `pulumi:"name"`
	// A unique identifier of this schema
	SchemaId pulumi.StringOutput `pulumi:"schemaId"`
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source pulumi.StringOutput `pulumi:"source"`
	// An indicator if this schema is enabled
	ValidationEnabled pulumi.BoolOutput `pulumi:"validationEnabled"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSchemaValidationSchemas registers a new resource with the given unique name, arguments, and options.
func NewSchemaValidationSchemas(ctx *pulumi.Context,
	name string, args *SchemaValidationSchemasArgs, opts ...pulumi.ResourceOption) (*SchemaValidationSchemas, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.ValidationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'ValidationEnabled'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaValidationSchemas
	err := ctx.RegisterResource("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaValidationSchemas gets an existing SchemaValidationSchemas resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaValidationSchemas(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaValidationSchemasState, opts ...pulumi.ResourceOption) (*SchemaValidationSchemas, error) {
	var resource SchemaValidationSchemas
	err := ctx.ReadResource("cloudflare:index/schemaValidationSchemas:SchemaValidationSchemas", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaValidationSchemas resources.
type schemaValidationSchemasState struct {
	CreatedAt *string `pulumi:"createdAt"`
	// The kind of the schema
	// Available values: "openapiV3".
	Kind *string `pulumi:"kind"`
	// A human-readable name for the schema
	Name *string `pulumi:"name"`
	// A unique identifier of this schema
	SchemaId *string `pulumi:"schemaId"`
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source *string `pulumi:"source"`
	// An indicator if this schema is enabled
	ValidationEnabled *bool `pulumi:"validationEnabled"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type SchemaValidationSchemasState struct {
	CreatedAt pulumi.StringPtrInput
	// The kind of the schema
	// Available values: "openapiV3".
	Kind pulumi.StringPtrInput
	// A human-readable name for the schema
	Name pulumi.StringPtrInput
	// A unique identifier of this schema
	SchemaId pulumi.StringPtrInput
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source pulumi.StringPtrInput
	// An indicator if this schema is enabled
	ValidationEnabled pulumi.BoolPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (SchemaValidationSchemasState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaValidationSchemasState)(nil)).Elem()
}

type schemaValidationSchemasArgs struct {
	// The kind of the schema
	// Available values: "openapiV3".
	Kind string `pulumi:"kind"`
	// A human-readable name for the schema
	Name string `pulumi:"name"`
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source string `pulumi:"source"`
	// An indicator if this schema is enabled
	ValidationEnabled bool `pulumi:"validationEnabled"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a SchemaValidationSchemas resource.
type SchemaValidationSchemasArgs struct {
	// The kind of the schema
	// Available values: "openapiV3".
	Kind pulumi.StringInput
	// A human-readable name for the schema
	Name pulumi.StringInput
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source pulumi.StringInput
	// An indicator if this schema is enabled
	ValidationEnabled pulumi.BoolInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (SchemaValidationSchemasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaValidationSchemasArgs)(nil)).Elem()
}

type SchemaValidationSchemasInput interface {
	pulumi.Input

	ToSchemaValidationSchemasOutput() SchemaValidationSchemasOutput
	ToSchemaValidationSchemasOutputWithContext(ctx context.Context) SchemaValidationSchemasOutput
}

func (*SchemaValidationSchemas) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaValidationSchemas)(nil)).Elem()
}

func (i *SchemaValidationSchemas) ToSchemaValidationSchemasOutput() SchemaValidationSchemasOutput {
	return i.ToSchemaValidationSchemasOutputWithContext(context.Background())
}

func (i *SchemaValidationSchemas) ToSchemaValidationSchemasOutputWithContext(ctx context.Context) SchemaValidationSchemasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationSchemasOutput)
}

// SchemaValidationSchemasArrayInput is an input type that accepts SchemaValidationSchemasArray and SchemaValidationSchemasArrayOutput values.
// You can construct a concrete instance of `SchemaValidationSchemasArrayInput` via:
//
//	SchemaValidationSchemasArray{ SchemaValidationSchemasArgs{...} }
type SchemaValidationSchemasArrayInput interface {
	pulumi.Input

	ToSchemaValidationSchemasArrayOutput() SchemaValidationSchemasArrayOutput
	ToSchemaValidationSchemasArrayOutputWithContext(context.Context) SchemaValidationSchemasArrayOutput
}

type SchemaValidationSchemasArray []SchemaValidationSchemasInput

func (SchemaValidationSchemasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaValidationSchemas)(nil)).Elem()
}

func (i SchemaValidationSchemasArray) ToSchemaValidationSchemasArrayOutput() SchemaValidationSchemasArrayOutput {
	return i.ToSchemaValidationSchemasArrayOutputWithContext(context.Background())
}

func (i SchemaValidationSchemasArray) ToSchemaValidationSchemasArrayOutputWithContext(ctx context.Context) SchemaValidationSchemasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationSchemasArrayOutput)
}

// SchemaValidationSchemasMapInput is an input type that accepts SchemaValidationSchemasMap and SchemaValidationSchemasMapOutput values.
// You can construct a concrete instance of `SchemaValidationSchemasMapInput` via:
//
//	SchemaValidationSchemasMap{ "key": SchemaValidationSchemasArgs{...} }
type SchemaValidationSchemasMapInput interface {
	pulumi.Input

	ToSchemaValidationSchemasMapOutput() SchemaValidationSchemasMapOutput
	ToSchemaValidationSchemasMapOutputWithContext(context.Context) SchemaValidationSchemasMapOutput
}

type SchemaValidationSchemasMap map[string]SchemaValidationSchemasInput

func (SchemaValidationSchemasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaValidationSchemas)(nil)).Elem()
}

func (i SchemaValidationSchemasMap) ToSchemaValidationSchemasMapOutput() SchemaValidationSchemasMapOutput {
	return i.ToSchemaValidationSchemasMapOutputWithContext(context.Background())
}

func (i SchemaValidationSchemasMap) ToSchemaValidationSchemasMapOutputWithContext(ctx context.Context) SchemaValidationSchemasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaValidationSchemasMapOutput)
}

type SchemaValidationSchemasOutput struct{ *pulumi.OutputState }

func (SchemaValidationSchemasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaValidationSchemas)(nil)).Elem()
}

func (o SchemaValidationSchemasOutput) ToSchemaValidationSchemasOutput() SchemaValidationSchemasOutput {
	return o
}

func (o SchemaValidationSchemasOutput) ToSchemaValidationSchemasOutputWithContext(ctx context.Context) SchemaValidationSchemasOutput {
	return o
}

func (o SchemaValidationSchemasOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The kind of the schema
// Available values: "openapiV3".
func (o SchemaValidationSchemasOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// A human-readable name for the schema
func (o SchemaValidationSchemasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A unique identifier of this schema
func (o SchemaValidationSchemasOutput) SchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.SchemaId }).(pulumi.StringOutput)
}

// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
func (o SchemaValidationSchemasOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// An indicator if this schema is enabled
func (o SchemaValidationSchemasOutput) ValidationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.BoolOutput { return v.ValidationEnabled }).(pulumi.BoolOutput)
}

// Identifier.
func (o SchemaValidationSchemasOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaValidationSchemas) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SchemaValidationSchemasArrayOutput struct{ *pulumi.OutputState }

func (SchemaValidationSchemasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaValidationSchemas)(nil)).Elem()
}

func (o SchemaValidationSchemasArrayOutput) ToSchemaValidationSchemasArrayOutput() SchemaValidationSchemasArrayOutput {
	return o
}

func (o SchemaValidationSchemasArrayOutput) ToSchemaValidationSchemasArrayOutputWithContext(ctx context.Context) SchemaValidationSchemasArrayOutput {
	return o
}

func (o SchemaValidationSchemasArrayOutput) Index(i pulumi.IntInput) SchemaValidationSchemasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaValidationSchemas {
		return vs[0].([]*SchemaValidationSchemas)[vs[1].(int)]
	}).(SchemaValidationSchemasOutput)
}

type SchemaValidationSchemasMapOutput struct{ *pulumi.OutputState }

func (SchemaValidationSchemasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaValidationSchemas)(nil)).Elem()
}

func (o SchemaValidationSchemasMapOutput) ToSchemaValidationSchemasMapOutput() SchemaValidationSchemasMapOutput {
	return o
}

func (o SchemaValidationSchemasMapOutput) ToSchemaValidationSchemasMapOutputWithContext(ctx context.Context) SchemaValidationSchemasMapOutput {
	return o
}

func (o SchemaValidationSchemasMapOutput) MapIndex(k pulumi.StringInput) SchemaValidationSchemasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaValidationSchemas {
		return vs[0].(map[string]*SchemaValidationSchemas)[vs[1].(string)]
	}).(SchemaValidationSchemasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationSchemasInput)(nil)).Elem(), &SchemaValidationSchemas{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationSchemasArrayInput)(nil)).Elem(), SchemaValidationSchemasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaValidationSchemasMapInput)(nil)).Elem(), SchemaValidationSchemasMap{})
	pulumi.RegisterOutputType(SchemaValidationSchemasOutput{})
	pulumi.RegisterOutputType(SchemaValidationSchemasArrayOutput{})
	pulumi.RegisterOutputType(SchemaValidationSchemasMapOutput{})
}
