// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkersScriptSubdomain(ctx, "example_workers_script_subdomain", &cloudflare.WorkersScriptSubdomainArgs{
//				AccountId:       pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				ScriptName:      pulumi.String("this-is_my_script-01"),
//				Enabled:         pulumi.Bool(true),
//				PreviewsEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type WorkersScriptSubdomain struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether the Worker should be available on the workers.dev subdomain.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled pulumi.BoolOutput `pulumi:"previewsEnabled"`
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
}

// NewWorkersScriptSubdomain registers a new resource with the given unique name, arguments, and options.
func NewWorkersScriptSubdomain(ctx *pulumi.Context,
	name string, args *WorkersScriptSubdomainArgs, opts ...pulumi.ResourceOption) (*WorkersScriptSubdomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersScriptSubdomain
	err := ctx.RegisterResource("cloudflare:index/workersScriptSubdomain:WorkersScriptSubdomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersScriptSubdomain gets an existing WorkersScriptSubdomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersScriptSubdomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersScriptSubdomainState, opts ...pulumi.ResourceOption) (*WorkersScriptSubdomain, error) {
	var resource WorkersScriptSubdomain
	err := ctx.ReadResource("cloudflare:index/workersScriptSubdomain:WorkersScriptSubdomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersScriptSubdomain resources.
type workersScriptSubdomainState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// Whether the Worker should be available on the workers.dev subdomain.
	Enabled *bool `pulumi:"enabled"`
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled *bool `pulumi:"previewsEnabled"`
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `pulumi:"scriptName"`
}

type WorkersScriptSubdomainState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// Whether the Worker should be available on the workers.dev subdomain.
	Enabled pulumi.BoolPtrInput
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled pulumi.BoolPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringPtrInput
}

func (WorkersScriptSubdomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptSubdomainState)(nil)).Elem()
}

type workersScriptSubdomainArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Whether the Worker should be available on the workers.dev subdomain.
	Enabled bool `pulumi:"enabled"`
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled *bool `pulumi:"previewsEnabled"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
}

// The set of arguments for constructing a WorkersScriptSubdomain resource.
type WorkersScriptSubdomainArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Whether the Worker should be available on the workers.dev subdomain.
	Enabled pulumi.BoolInput
	// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
	PreviewsEnabled pulumi.BoolPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
}

func (WorkersScriptSubdomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptSubdomainArgs)(nil)).Elem()
}

type WorkersScriptSubdomainInput interface {
	pulumi.Input

	ToWorkersScriptSubdomainOutput() WorkersScriptSubdomainOutput
	ToWorkersScriptSubdomainOutputWithContext(ctx context.Context) WorkersScriptSubdomainOutput
}

func (*WorkersScriptSubdomain) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScriptSubdomain)(nil)).Elem()
}

func (i *WorkersScriptSubdomain) ToWorkersScriptSubdomainOutput() WorkersScriptSubdomainOutput {
	return i.ToWorkersScriptSubdomainOutputWithContext(context.Background())
}

func (i *WorkersScriptSubdomain) ToWorkersScriptSubdomainOutputWithContext(ctx context.Context) WorkersScriptSubdomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptSubdomainOutput)
}

// WorkersScriptSubdomainArrayInput is an input type that accepts WorkersScriptSubdomainArray and WorkersScriptSubdomainArrayOutput values.
// You can construct a concrete instance of `WorkersScriptSubdomainArrayInput` via:
//
//	WorkersScriptSubdomainArray{ WorkersScriptSubdomainArgs{...} }
type WorkersScriptSubdomainArrayInput interface {
	pulumi.Input

	ToWorkersScriptSubdomainArrayOutput() WorkersScriptSubdomainArrayOutput
	ToWorkersScriptSubdomainArrayOutputWithContext(context.Context) WorkersScriptSubdomainArrayOutput
}

type WorkersScriptSubdomainArray []WorkersScriptSubdomainInput

func (WorkersScriptSubdomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScriptSubdomain)(nil)).Elem()
}

func (i WorkersScriptSubdomainArray) ToWorkersScriptSubdomainArrayOutput() WorkersScriptSubdomainArrayOutput {
	return i.ToWorkersScriptSubdomainArrayOutputWithContext(context.Background())
}

func (i WorkersScriptSubdomainArray) ToWorkersScriptSubdomainArrayOutputWithContext(ctx context.Context) WorkersScriptSubdomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptSubdomainArrayOutput)
}

// WorkersScriptSubdomainMapInput is an input type that accepts WorkersScriptSubdomainMap and WorkersScriptSubdomainMapOutput values.
// You can construct a concrete instance of `WorkersScriptSubdomainMapInput` via:
//
//	WorkersScriptSubdomainMap{ "key": WorkersScriptSubdomainArgs{...} }
type WorkersScriptSubdomainMapInput interface {
	pulumi.Input

	ToWorkersScriptSubdomainMapOutput() WorkersScriptSubdomainMapOutput
	ToWorkersScriptSubdomainMapOutputWithContext(context.Context) WorkersScriptSubdomainMapOutput
}

type WorkersScriptSubdomainMap map[string]WorkersScriptSubdomainInput

func (WorkersScriptSubdomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScriptSubdomain)(nil)).Elem()
}

func (i WorkersScriptSubdomainMap) ToWorkersScriptSubdomainMapOutput() WorkersScriptSubdomainMapOutput {
	return i.ToWorkersScriptSubdomainMapOutputWithContext(context.Background())
}

func (i WorkersScriptSubdomainMap) ToWorkersScriptSubdomainMapOutputWithContext(ctx context.Context) WorkersScriptSubdomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptSubdomainMapOutput)
}

type WorkersScriptSubdomainOutput struct{ *pulumi.OutputState }

func (WorkersScriptSubdomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScriptSubdomain)(nil)).Elem()
}

func (o WorkersScriptSubdomainOutput) ToWorkersScriptSubdomainOutput() WorkersScriptSubdomainOutput {
	return o
}

func (o WorkersScriptSubdomainOutput) ToWorkersScriptSubdomainOutputWithContext(ctx context.Context) WorkersScriptSubdomainOutput {
	return o
}

// Identifier.
func (o WorkersScriptSubdomainOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScriptSubdomain) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether the Worker should be available on the workers.dev subdomain.
func (o WorkersScriptSubdomainOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersScriptSubdomain) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether the Worker's Preview URLs should be available on the workers.dev subdomain.
func (o WorkersScriptSubdomainOutput) PreviewsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersScriptSubdomain) pulumi.BoolOutput { return v.PreviewsEnabled }).(pulumi.BoolOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkersScriptSubdomainOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScriptSubdomain) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

type WorkersScriptSubdomainArrayOutput struct{ *pulumi.OutputState }

func (WorkersScriptSubdomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScriptSubdomain)(nil)).Elem()
}

func (o WorkersScriptSubdomainArrayOutput) ToWorkersScriptSubdomainArrayOutput() WorkersScriptSubdomainArrayOutput {
	return o
}

func (o WorkersScriptSubdomainArrayOutput) ToWorkersScriptSubdomainArrayOutputWithContext(ctx context.Context) WorkersScriptSubdomainArrayOutput {
	return o
}

func (o WorkersScriptSubdomainArrayOutput) Index(i pulumi.IntInput) WorkersScriptSubdomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersScriptSubdomain {
		return vs[0].([]*WorkersScriptSubdomain)[vs[1].(int)]
	}).(WorkersScriptSubdomainOutput)
}

type WorkersScriptSubdomainMapOutput struct{ *pulumi.OutputState }

func (WorkersScriptSubdomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScriptSubdomain)(nil)).Elem()
}

func (o WorkersScriptSubdomainMapOutput) ToWorkersScriptSubdomainMapOutput() WorkersScriptSubdomainMapOutput {
	return o
}

func (o WorkersScriptSubdomainMapOutput) ToWorkersScriptSubdomainMapOutputWithContext(ctx context.Context) WorkersScriptSubdomainMapOutput {
	return o
}

func (o WorkersScriptSubdomainMapOutput) MapIndex(k pulumi.StringInput) WorkersScriptSubdomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersScriptSubdomain {
		return vs[0].(map[string]*WorkersScriptSubdomain)[vs[1].(string)]
	}).(WorkersScriptSubdomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptSubdomainInput)(nil)).Elem(), &WorkersScriptSubdomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptSubdomainArrayInput)(nil)).Elem(), WorkersScriptSubdomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptSubdomainMapInput)(nil)).Elem(), WorkersScriptSubdomainMap{})
	pulumi.RegisterOutputType(WorkersScriptSubdomainOutput{})
	pulumi.RegisterOutputType(WorkersScriptSubdomainArrayOutput{})
	pulumi.RegisterOutputType(WorkersScriptSubdomainMapOutput{})
}
