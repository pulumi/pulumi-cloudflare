// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewSpectrumApplication(ctx, "example_spectrum_application", &cloudflare.SpectrumApplicationArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Dns: &cloudflare.SpectrumApplicationDnsArgs{
//					Name: pulumi.String("ssh.example.com"),
//					Type: pulumi.String("CNAME"),
//				},
//				IpFirewall:       pulumi.Bool(true),
//				Protocol:         pulumi.String("tcp/22"),
//				ProxyProtocol:    pulumi.String("off"),
//				Tls:              pulumi.String("full"),
//				TrafficType:      pulumi.String("direct"),
//				ArgoSmartRouting: pulumi.Bool(true),
//				EdgeIps: &cloudflare.SpectrumApplicationEdgeIpsArgs{
//					Connectivity: pulumi.String("all"),
//					Type:         pulumi.String("dynamic"),
//				},
//				OriginDirects: pulumi.StringArray{
//					pulumi.String("tcp://127.0.0.1:8080"),
//				},
//				OriginDns: &cloudflare.SpectrumApplicationOriginDnsArgs{
//					Name: pulumi.String("origin.example.com"),
//					Ttl:  pulumi.Int(600),
//					Type: pulumi.String(""),
//				},
//				OriginPort: pulumi.Any(22),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/spectrumApplication:SpectrumApplication example '<zone_id>/<app_id>'
// ```
type SpectrumApplication struct {
	pulumi.CustomResourceState

	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting pulumi.BoolOutput `pulumi:"argoSmartRouting"`
	// When the Application was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The name and type of DNS record for the Spectrum application.
	Dns SpectrumApplicationDnsOutput `pulumi:"dns"`
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps SpectrumApplicationEdgeIpsOutput `pulumi:"edgeIps"`
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall pulumi.BoolPtrOutput `pulumi:"ipFirewall"`
	// When the Application was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects pulumi.StringArrayOutput `pulumi:"originDirects"`
	// The name and type of DNS record for the Spectrum application.
	OriginDns SpectrumApplicationOriginDnsPtrOutput `pulumi:"originDns"`
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort pulumi.AnyOutput `pulumi:"originPort"`
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	// Available values: "off", "v1", "v2", "simple".
	ProxyProtocol pulumi.StringOutput `pulumi:"proxyProtocol"`
	// The type of TLS termination associated with the application.
	// Available values: "off", "flexible", "full", "strict".
	Tls pulumi.StringPtrOutput `pulumi:"tls"`
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	// Available values: "direct", "http", "https".
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
	// Zone identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSpectrumApplication registers a new resource with the given unique name, arguments, and options.
func NewSpectrumApplication(ctx *pulumi.Context,
	name string, args *SpectrumApplicationArgs, opts ...pulumi.ResourceOption) (*SpectrumApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dns == nil {
		return nil, errors.New("invalid value for required argument 'Dns'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpectrumApplication
	err := ctx.RegisterResource("cloudflare:index/spectrumApplication:SpectrumApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpectrumApplication gets an existing SpectrumApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpectrumApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpectrumApplicationState, opts ...pulumi.ResourceOption) (*SpectrumApplication, error) {
	var resource SpectrumApplication
	err := ctx.ReadResource("cloudflare:index/spectrumApplication:SpectrumApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpectrumApplication resources.
type spectrumApplicationState struct {
	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting *bool `pulumi:"argoSmartRouting"`
	// When the Application was created.
	CreatedOn *string `pulumi:"createdOn"`
	// The name and type of DNS record for the Spectrum application.
	Dns *SpectrumApplicationDns `pulumi:"dns"`
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps *SpectrumApplicationEdgeIps `pulumi:"edgeIps"`
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall *bool `pulumi:"ipFirewall"`
	// When the Application was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects []string `pulumi:"originDirects"`
	// The name and type of DNS record for the Spectrum application.
	OriginDns *SpectrumApplicationOriginDns `pulumi:"originDns"`
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort interface{} `pulumi:"originPort"`
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol *string `pulumi:"protocol"`
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	// Available values: "off", "v1", "v2", "simple".
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// The type of TLS termination associated with the application.
	// Available values: "off", "flexible", "full", "strict".
	Tls *string `pulumi:"tls"`
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	// Available values: "direct", "http", "https".
	TrafficType *string `pulumi:"trafficType"`
	// Zone identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type SpectrumApplicationState struct {
	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting pulumi.BoolPtrInput
	// When the Application was created.
	CreatedOn pulumi.StringPtrInput
	// The name and type of DNS record for the Spectrum application.
	Dns SpectrumApplicationDnsPtrInput
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps SpectrumApplicationEdgeIpsPtrInput
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall pulumi.BoolPtrInput
	// When the Application was last modified.
	ModifiedOn pulumi.StringPtrInput
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects pulumi.StringArrayInput
	// The name and type of DNS record for the Spectrum application.
	OriginDns SpectrumApplicationOriginDnsPtrInput
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort pulumi.Input
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol pulumi.StringPtrInput
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	// Available values: "off", "v1", "v2", "simple".
	ProxyProtocol pulumi.StringPtrInput
	// The type of TLS termination associated with the application.
	// Available values: "off", "flexible", "full", "strict".
	Tls pulumi.StringPtrInput
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	// Available values: "direct", "http", "https".
	TrafficType pulumi.StringPtrInput
	// Zone identifier.
	ZoneId pulumi.StringPtrInput
}

func (SpectrumApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*spectrumApplicationState)(nil)).Elem()
}

type spectrumApplicationArgs struct {
	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting *bool `pulumi:"argoSmartRouting"`
	// The name and type of DNS record for the Spectrum application.
	Dns SpectrumApplicationDns `pulumi:"dns"`
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps *SpectrumApplicationEdgeIps `pulumi:"edgeIps"`
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall *bool `pulumi:"ipFirewall"`
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects []string `pulumi:"originDirects"`
	// The name and type of DNS record for the Spectrum application.
	OriginDns *SpectrumApplicationOriginDns `pulumi:"originDns"`
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort interface{} `pulumi:"originPort"`
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol string `pulumi:"protocol"`
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	// Available values: "off", "v1", "v2", "simple".
	ProxyProtocol *string `pulumi:"proxyProtocol"`
	// The type of TLS termination associated with the application.
	// Available values: "off", "flexible", "full", "strict".
	Tls *string `pulumi:"tls"`
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	// Available values: "direct", "http", "https".
	TrafficType *string `pulumi:"trafficType"`
	// Zone identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a SpectrumApplication resource.
type SpectrumApplicationArgs struct {
	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting pulumi.BoolPtrInput
	// The name and type of DNS record for the Spectrum application.
	Dns SpectrumApplicationDnsInput
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps SpectrumApplicationEdgeIpsPtrInput
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall pulumi.BoolPtrInput
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects pulumi.StringArrayInput
	// The name and type of DNS record for the Spectrum application.
	OriginDns SpectrumApplicationOriginDnsPtrInput
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort pulumi.Input
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol pulumi.StringInput
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	// Available values: "off", "v1", "v2", "simple".
	ProxyProtocol pulumi.StringPtrInput
	// The type of TLS termination associated with the application.
	// Available values: "off", "flexible", "full", "strict".
	Tls pulumi.StringPtrInput
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	// Available values: "direct", "http", "https".
	TrafficType pulumi.StringPtrInput
	// Zone identifier.
	ZoneId pulumi.StringInput
}

func (SpectrumApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spectrumApplicationArgs)(nil)).Elem()
}

type SpectrumApplicationInput interface {
	pulumi.Input

	ToSpectrumApplicationOutput() SpectrumApplicationOutput
	ToSpectrumApplicationOutputWithContext(ctx context.Context) SpectrumApplicationOutput
}

func (*SpectrumApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**SpectrumApplication)(nil)).Elem()
}

func (i *SpectrumApplication) ToSpectrumApplicationOutput() SpectrumApplicationOutput {
	return i.ToSpectrumApplicationOutputWithContext(context.Background())
}

func (i *SpectrumApplication) ToSpectrumApplicationOutputWithContext(ctx context.Context) SpectrumApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpectrumApplicationOutput)
}

// SpectrumApplicationArrayInput is an input type that accepts SpectrumApplicationArray and SpectrumApplicationArrayOutput values.
// You can construct a concrete instance of `SpectrumApplicationArrayInput` via:
//
//	SpectrumApplicationArray{ SpectrumApplicationArgs{...} }
type SpectrumApplicationArrayInput interface {
	pulumi.Input

	ToSpectrumApplicationArrayOutput() SpectrumApplicationArrayOutput
	ToSpectrumApplicationArrayOutputWithContext(context.Context) SpectrumApplicationArrayOutput
}

type SpectrumApplicationArray []SpectrumApplicationInput

func (SpectrumApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpectrumApplication)(nil)).Elem()
}

func (i SpectrumApplicationArray) ToSpectrumApplicationArrayOutput() SpectrumApplicationArrayOutput {
	return i.ToSpectrumApplicationArrayOutputWithContext(context.Background())
}

func (i SpectrumApplicationArray) ToSpectrumApplicationArrayOutputWithContext(ctx context.Context) SpectrumApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpectrumApplicationArrayOutput)
}

// SpectrumApplicationMapInput is an input type that accepts SpectrumApplicationMap and SpectrumApplicationMapOutput values.
// You can construct a concrete instance of `SpectrumApplicationMapInput` via:
//
//	SpectrumApplicationMap{ "key": SpectrumApplicationArgs{...} }
type SpectrumApplicationMapInput interface {
	pulumi.Input

	ToSpectrumApplicationMapOutput() SpectrumApplicationMapOutput
	ToSpectrumApplicationMapOutputWithContext(context.Context) SpectrumApplicationMapOutput
}

type SpectrumApplicationMap map[string]SpectrumApplicationInput

func (SpectrumApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpectrumApplication)(nil)).Elem()
}

func (i SpectrumApplicationMap) ToSpectrumApplicationMapOutput() SpectrumApplicationMapOutput {
	return i.ToSpectrumApplicationMapOutputWithContext(context.Background())
}

func (i SpectrumApplicationMap) ToSpectrumApplicationMapOutputWithContext(ctx context.Context) SpectrumApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpectrumApplicationMapOutput)
}

type SpectrumApplicationOutput struct{ *pulumi.OutputState }

func (SpectrumApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpectrumApplication)(nil)).Elem()
}

func (o SpectrumApplicationOutput) ToSpectrumApplicationOutput() SpectrumApplicationOutput {
	return o
}

func (o SpectrumApplicationOutput) ToSpectrumApplicationOutputWithContext(ctx context.Context) SpectrumApplicationOutput {
	return o
}

// Enables Argo Smart Routing for this application.
// Notes: Only available for TCP applications with trafficType set to "direct".
func (o SpectrumApplicationOutput) ArgoSmartRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.BoolOutput { return v.ArgoSmartRouting }).(pulumi.BoolOutput)
}

// When the Application was created.
func (o SpectrumApplicationOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The name and type of DNS record for the Spectrum application.
func (o SpectrumApplicationOutput) Dns() SpectrumApplicationDnsOutput {
	return o.ApplyT(func(v *SpectrumApplication) SpectrumApplicationDnsOutput { return v.Dns }).(SpectrumApplicationDnsOutput)
}

// The anycast edge IP configuration for the hostname of this application.
func (o SpectrumApplicationOutput) EdgeIps() SpectrumApplicationEdgeIpsOutput {
	return o.ApplyT(func(v *SpectrumApplication) SpectrumApplicationEdgeIpsOutput { return v.EdgeIps }).(SpectrumApplicationEdgeIpsOutput)
}

// Enables IP Access Rules for this application.
// Notes: Only available for TCP applications.
func (o SpectrumApplicationOutput) IpFirewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.BoolPtrOutput { return v.IpFirewall }).(pulumi.BoolPtrOutput)
}

// When the Application was last modified.
func (o SpectrumApplicationOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
func (o SpectrumApplicationOutput) OriginDirects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringArrayOutput { return v.OriginDirects }).(pulumi.StringArrayOutput)
}

// The name and type of DNS record for the Spectrum application.
func (o SpectrumApplicationOutput) OriginDns() SpectrumApplicationOriginDnsPtrOutput {
	return o.ApplyT(func(v *SpectrumApplication) SpectrumApplicationOriginDnsPtrOutput { return v.OriginDns }).(SpectrumApplicationOriginDnsPtrOutput)
}

// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
func (o SpectrumApplicationOutput) OriginPort() pulumi.AnyOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.AnyOutput { return v.OriginPort }).(pulumi.AnyOutput)
}

// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
func (o SpectrumApplicationOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
// Available values: "off", "v1", "v2", "simple".
func (o SpectrumApplicationOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.ProxyProtocol }).(pulumi.StringOutput)
}

// The type of TLS termination associated with the application.
// Available values: "off", "flexible", "full", "strict".
func (o SpectrumApplicationOutput) Tls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringPtrOutput { return v.Tls }).(pulumi.StringPtrOutput)
}

// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
// Available values: "direct", "http", "https".
func (o SpectrumApplicationOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

// Zone identifier.
func (o SpectrumApplicationOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *SpectrumApplication) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SpectrumApplicationArrayOutput struct{ *pulumi.OutputState }

func (SpectrumApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpectrumApplication)(nil)).Elem()
}

func (o SpectrumApplicationArrayOutput) ToSpectrumApplicationArrayOutput() SpectrumApplicationArrayOutput {
	return o
}

func (o SpectrumApplicationArrayOutput) ToSpectrumApplicationArrayOutputWithContext(ctx context.Context) SpectrumApplicationArrayOutput {
	return o
}

func (o SpectrumApplicationArrayOutput) Index(i pulumi.IntInput) SpectrumApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpectrumApplication {
		return vs[0].([]*SpectrumApplication)[vs[1].(int)]
	}).(SpectrumApplicationOutput)
}

type SpectrumApplicationMapOutput struct{ *pulumi.OutputState }

func (SpectrumApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpectrumApplication)(nil)).Elem()
}

func (o SpectrumApplicationMapOutput) ToSpectrumApplicationMapOutput() SpectrumApplicationMapOutput {
	return o
}

func (o SpectrumApplicationMapOutput) ToSpectrumApplicationMapOutputWithContext(ctx context.Context) SpectrumApplicationMapOutput {
	return o
}

func (o SpectrumApplicationMapOutput) MapIndex(k pulumi.StringInput) SpectrumApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpectrumApplication {
		return vs[0].(map[string]*SpectrumApplication)[vs[1].(string)]
	}).(SpectrumApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpectrumApplicationInput)(nil)).Elem(), &SpectrumApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpectrumApplicationArrayInput)(nil)).Elem(), SpectrumApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpectrumApplicationMapInput)(nil)).Elem(), SpectrumApplicationMap{})
	pulumi.RegisterOutputType(SpectrumApplicationOutput{})
	pulumi.RegisterOutputType(SpectrumApplicationArrayOutput{})
	pulumi.RegisterOutputType(SpectrumApplicationMapOutput{})
}
