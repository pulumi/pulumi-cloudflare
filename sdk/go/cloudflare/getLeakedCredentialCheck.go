// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupLeakedCredentialCheck(ctx, &cloudflare.LookupLeakedCredentialCheckArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLeakedCredentialCheck(ctx *pulumi.Context, args *LookupLeakedCredentialCheckArgs, opts ...pulumi.InvokeOption) (*LookupLeakedCredentialCheckResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLeakedCredentialCheckResult
	err := ctx.Invoke("cloudflare:index/getLeakedCredentialCheck:getLeakedCredentialCheck", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLeakedCredentialCheck.
type LookupLeakedCredentialCheckArgs struct {
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getLeakedCredentialCheck.
type LookupLeakedCredentialCheckResult struct {
	// Determines whether or not Leaked Credential Checks are enabled.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupLeakedCredentialCheckOutput(ctx *pulumi.Context, args LookupLeakedCredentialCheckOutputArgs, opts ...pulumi.InvokeOption) LookupLeakedCredentialCheckResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLeakedCredentialCheckResultOutput, error) {
			args := v.(LookupLeakedCredentialCheckArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getLeakedCredentialCheck:getLeakedCredentialCheck", args, LookupLeakedCredentialCheckResultOutput{}, options).(LookupLeakedCredentialCheckResultOutput), nil
		}).(LookupLeakedCredentialCheckResultOutput)
}

// A collection of arguments for invoking getLeakedCredentialCheck.
type LookupLeakedCredentialCheckOutputArgs struct {
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupLeakedCredentialCheckOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLeakedCredentialCheckArgs)(nil)).Elem()
}

// A collection of values returned by getLeakedCredentialCheck.
type LookupLeakedCredentialCheckResultOutput struct{ *pulumi.OutputState }

func (LookupLeakedCredentialCheckResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLeakedCredentialCheckResult)(nil)).Elem()
}

func (o LookupLeakedCredentialCheckResultOutput) ToLookupLeakedCredentialCheckResultOutput() LookupLeakedCredentialCheckResultOutput {
	return o
}

func (o LookupLeakedCredentialCheckResultOutput) ToLookupLeakedCredentialCheckResultOutputWithContext(ctx context.Context) LookupLeakedCredentialCheckResultOutput {
	return o
}

// Determines whether or not Leaked Credential Checks are enabled.
func (o LookupLeakedCredentialCheckResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLeakedCredentialCheckResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLeakedCredentialCheckResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLeakedCredentialCheckResult) string { return v.Id }).(pulumi.StringOutput)
}

// Defines an identifier.
func (o LookupLeakedCredentialCheckResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLeakedCredentialCheckResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLeakedCredentialCheckResultOutput{})
}
