// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Deprecated: cloudflare.index/accessmutualtlshostnamesettings.AccessMutualTlsHostnameSettings has been deprecated in favor of cloudflare.index/zerotrustaccessmtlshostnamesettings.ZeroTrustAccessMtlsHostnameSettings
type AccessMutualTlsHostnameSettings struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
	ChinaNetwork pulumi.BoolOutput `pulumi:"chinaNetwork"`
	// Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
	ClientCertificateForwarding pulumi.BoolOutput `pulumi:"clientCertificateForwarding"`
	// The hostname that these settings apply to.
	Hostname pulumi.StringOutput                               `pulumi:"hostname"`
	Settings AccessMutualTlsHostnameSettingsSettingArrayOutput `pulumi:"settings"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewAccessMutualTlsHostnameSettings registers a new resource with the given unique name, arguments, and options.
func NewAccessMutualTlsHostnameSettings(ctx *pulumi.Context,
	name string, args *AccessMutualTlsHostnameSettingsArgs, opts ...pulumi.ResourceOption) (*AccessMutualTlsHostnameSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessMutualTlsHostnameSettings
	err := ctx.RegisterResource("cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessMutualTlsHostnameSettings gets an existing AccessMutualTlsHostnameSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessMutualTlsHostnameSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessMutualTlsHostnameSettingsState, opts ...pulumi.ResourceOption) (*AccessMutualTlsHostnameSettings, error) {
	var resource AccessMutualTlsHostnameSettings
	err := ctx.ReadResource("cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessMutualTlsHostnameSettings resources.
type accessMutualTlsHostnameSettingsState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
	ChinaNetwork *bool `pulumi:"chinaNetwork"`
	// Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
	ClientCertificateForwarding *bool `pulumi:"clientCertificateForwarding"`
	// The hostname that these settings apply to.
	Hostname *string                                  `pulumi:"hostname"`
	Settings []AccessMutualTlsHostnameSettingsSetting `pulumi:"settings"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessMutualTlsHostnameSettingsState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
	ChinaNetwork pulumi.BoolPtrInput
	// Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
	ClientCertificateForwarding pulumi.BoolPtrInput
	// The hostname that these settings apply to.
	Hostname pulumi.StringPtrInput
	Settings AccessMutualTlsHostnameSettingsSettingArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsHostnameSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsHostnameSettingsState)(nil)).Elem()
}

type accessMutualTlsHostnameSettingsArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string                                  `pulumi:"accountId"`
	Settings  []AccessMutualTlsHostnameSettingsSetting `pulumi:"settings"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessMutualTlsHostnameSettings resource.
type AccessMutualTlsHostnameSettingsArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	Settings  AccessMutualTlsHostnameSettingsSettingArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessMutualTlsHostnameSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessMutualTlsHostnameSettingsArgs)(nil)).Elem()
}

type AccessMutualTlsHostnameSettingsInput interface {
	pulumi.Input

	ToAccessMutualTlsHostnameSettingsOutput() AccessMutualTlsHostnameSettingsOutput
	ToAccessMutualTlsHostnameSettingsOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsOutput
}

func (*AccessMutualTlsHostnameSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (i *AccessMutualTlsHostnameSettings) ToAccessMutualTlsHostnameSettingsOutput() AccessMutualTlsHostnameSettingsOutput {
	return i.ToAccessMutualTlsHostnameSettingsOutputWithContext(context.Background())
}

func (i *AccessMutualTlsHostnameSettings) ToAccessMutualTlsHostnameSettingsOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsHostnameSettingsOutput)
}

// AccessMutualTlsHostnameSettingsArrayInput is an input type that accepts AccessMutualTlsHostnameSettingsArray and AccessMutualTlsHostnameSettingsArrayOutput values.
// You can construct a concrete instance of `AccessMutualTlsHostnameSettingsArrayInput` via:
//
//	AccessMutualTlsHostnameSettingsArray{ AccessMutualTlsHostnameSettingsArgs{...} }
type AccessMutualTlsHostnameSettingsArrayInput interface {
	pulumi.Input

	ToAccessMutualTlsHostnameSettingsArrayOutput() AccessMutualTlsHostnameSettingsArrayOutput
	ToAccessMutualTlsHostnameSettingsArrayOutputWithContext(context.Context) AccessMutualTlsHostnameSettingsArrayOutput
}

type AccessMutualTlsHostnameSettingsArray []AccessMutualTlsHostnameSettingsInput

func (AccessMutualTlsHostnameSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (i AccessMutualTlsHostnameSettingsArray) ToAccessMutualTlsHostnameSettingsArrayOutput() AccessMutualTlsHostnameSettingsArrayOutput {
	return i.ToAccessMutualTlsHostnameSettingsArrayOutputWithContext(context.Background())
}

func (i AccessMutualTlsHostnameSettingsArray) ToAccessMutualTlsHostnameSettingsArrayOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsHostnameSettingsArrayOutput)
}

// AccessMutualTlsHostnameSettingsMapInput is an input type that accepts AccessMutualTlsHostnameSettingsMap and AccessMutualTlsHostnameSettingsMapOutput values.
// You can construct a concrete instance of `AccessMutualTlsHostnameSettingsMapInput` via:
//
//	AccessMutualTlsHostnameSettingsMap{ "key": AccessMutualTlsHostnameSettingsArgs{...} }
type AccessMutualTlsHostnameSettingsMapInput interface {
	pulumi.Input

	ToAccessMutualTlsHostnameSettingsMapOutput() AccessMutualTlsHostnameSettingsMapOutput
	ToAccessMutualTlsHostnameSettingsMapOutputWithContext(context.Context) AccessMutualTlsHostnameSettingsMapOutput
}

type AccessMutualTlsHostnameSettingsMap map[string]AccessMutualTlsHostnameSettingsInput

func (AccessMutualTlsHostnameSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (i AccessMutualTlsHostnameSettingsMap) ToAccessMutualTlsHostnameSettingsMapOutput() AccessMutualTlsHostnameSettingsMapOutput {
	return i.ToAccessMutualTlsHostnameSettingsMapOutputWithContext(context.Background())
}

func (i AccessMutualTlsHostnameSettingsMap) ToAccessMutualTlsHostnameSettingsMapOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessMutualTlsHostnameSettingsMapOutput)
}

type AccessMutualTlsHostnameSettingsOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsHostnameSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (o AccessMutualTlsHostnameSettingsOutput) ToAccessMutualTlsHostnameSettingsOutput() AccessMutualTlsHostnameSettingsOutput {
	return o
}

func (o AccessMutualTlsHostnameSettingsOutput) ToAccessMutualTlsHostnameSettingsOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o AccessMutualTlsHostnameSettingsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
func (o AccessMutualTlsHostnameSettingsOutput) ChinaNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) pulumi.BoolOutput { return v.ChinaNetwork }).(pulumi.BoolOutput)
}

// Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
func (o AccessMutualTlsHostnameSettingsOutput) ClientCertificateForwarding() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) pulumi.BoolOutput { return v.ClientCertificateForwarding }).(pulumi.BoolOutput)
}

// The hostname that these settings apply to.
func (o AccessMutualTlsHostnameSettingsOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

func (o AccessMutualTlsHostnameSettingsOutput) Settings() AccessMutualTlsHostnameSettingsSettingArrayOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) AccessMutualTlsHostnameSettingsSettingArrayOutput {
		return v.Settings
	}).(AccessMutualTlsHostnameSettingsSettingArrayOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o AccessMutualTlsHostnameSettingsOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessMutualTlsHostnameSettings) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type AccessMutualTlsHostnameSettingsArrayOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsHostnameSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (o AccessMutualTlsHostnameSettingsArrayOutput) ToAccessMutualTlsHostnameSettingsArrayOutput() AccessMutualTlsHostnameSettingsArrayOutput {
	return o
}

func (o AccessMutualTlsHostnameSettingsArrayOutput) ToAccessMutualTlsHostnameSettingsArrayOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsArrayOutput {
	return o
}

func (o AccessMutualTlsHostnameSettingsArrayOutput) Index(i pulumi.IntInput) AccessMutualTlsHostnameSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessMutualTlsHostnameSettings {
		return vs[0].([]*AccessMutualTlsHostnameSettings)[vs[1].(int)]
	}).(AccessMutualTlsHostnameSettingsOutput)
}

type AccessMutualTlsHostnameSettingsMapOutput struct{ *pulumi.OutputState }

func (AccessMutualTlsHostnameSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessMutualTlsHostnameSettings)(nil)).Elem()
}

func (o AccessMutualTlsHostnameSettingsMapOutput) ToAccessMutualTlsHostnameSettingsMapOutput() AccessMutualTlsHostnameSettingsMapOutput {
	return o
}

func (o AccessMutualTlsHostnameSettingsMapOutput) ToAccessMutualTlsHostnameSettingsMapOutputWithContext(ctx context.Context) AccessMutualTlsHostnameSettingsMapOutput {
	return o
}

func (o AccessMutualTlsHostnameSettingsMapOutput) MapIndex(k pulumi.StringInput) AccessMutualTlsHostnameSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessMutualTlsHostnameSettings {
		return vs[0].(map[string]*AccessMutualTlsHostnameSettings)[vs[1].(string)]
	}).(AccessMutualTlsHostnameSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsHostnameSettingsInput)(nil)).Elem(), &AccessMutualTlsHostnameSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsHostnameSettingsArrayInput)(nil)).Elem(), AccessMutualTlsHostnameSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessMutualTlsHostnameSettingsMapInput)(nil)).Elem(), AccessMutualTlsHostnameSettingsMap{})
	pulumi.RegisterOutputType(AccessMutualTlsHostnameSettingsOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsHostnameSettingsArrayOutput{})
	pulumi.RegisterOutputType(AccessMutualTlsHostnameSettingsMapOutput{})
}
