// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustAccessShortLivedCertificate(ctx, "example_zero_trust_access_short_lived_certificate", &cloudflare.ZeroTrustAccessShortLivedCertificateArgs{
//				AppId:  pulumi.String("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//				ZoneId: pulumi.String("zone_id"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example '<{accounts|zones}/{account_id|zone_id}>/<app_id>'
// ```
//
// Deprecated: cloudflare.index/accesscacertificate.AccessCaCertificate has been deprecated in favor of cloudflare.index/zerotrustaccessshortlivedcertificate.ZeroTrustAccessShortLivedCertificate
type AccessCaCertificate struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// UUID.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The Application Audience (AUD) tag. Identifies the application associated with the CA.
	Aud pulumi.StringOutput `pulumi:"aud"`
	// The public key to add to your SSH server configuration.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewAccessCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewAccessCaCertificate(ctx *pulumi.Context,
	name string, args *AccessCaCertificateArgs, opts ...pulumi.ResourceOption) (*AccessCaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/accessCaCertificate:AccessCaCertificate"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessCaCertificate
	err := ctx.RegisterResource("cloudflare:index/accessCaCertificate:AccessCaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessCaCertificate gets an existing AccessCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessCaCertificateState, opts ...pulumi.ResourceOption) (*AccessCaCertificate, error) {
	var resource AccessCaCertificate
	err := ctx.ReadResource("cloudflare:index/accessCaCertificate:AccessCaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessCaCertificate resources.
type accessCaCertificateState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// UUID.
	AppId *string `pulumi:"appId"`
	// The Application Audience (AUD) tag. Identifies the application associated with the CA.
	Aud *string `pulumi:"aud"`
	// The public key to add to your SSH server configuration.
	PublicKey *string `pulumi:"publicKey"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessCaCertificateState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// UUID.
	AppId pulumi.StringPtrInput
	// The Application Audience (AUD) tag. Identifies the application associated with the CA.
	Aud pulumi.StringPtrInput
	// The public key to add to your SSH server configuration.
	PublicKey pulumi.StringPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessCaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessCaCertificateState)(nil)).Elem()
}

type accessCaCertificateArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// UUID.
	AppId string `pulumi:"appId"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessCaCertificate resource.
type AccessCaCertificateArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// UUID.
	AppId pulumi.StringInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessCaCertificateArgs)(nil)).Elem()
}

type AccessCaCertificateInput interface {
	pulumi.Input

	ToAccessCaCertificateOutput() AccessCaCertificateOutput
	ToAccessCaCertificateOutputWithContext(ctx context.Context) AccessCaCertificateOutput
}

func (*AccessCaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessCaCertificate)(nil)).Elem()
}

func (i *AccessCaCertificate) ToAccessCaCertificateOutput() AccessCaCertificateOutput {
	return i.ToAccessCaCertificateOutputWithContext(context.Background())
}

func (i *AccessCaCertificate) ToAccessCaCertificateOutputWithContext(ctx context.Context) AccessCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessCaCertificateOutput)
}

// AccessCaCertificateArrayInput is an input type that accepts AccessCaCertificateArray and AccessCaCertificateArrayOutput values.
// You can construct a concrete instance of `AccessCaCertificateArrayInput` via:
//
//	AccessCaCertificateArray{ AccessCaCertificateArgs{...} }
type AccessCaCertificateArrayInput interface {
	pulumi.Input

	ToAccessCaCertificateArrayOutput() AccessCaCertificateArrayOutput
	ToAccessCaCertificateArrayOutputWithContext(context.Context) AccessCaCertificateArrayOutput
}

type AccessCaCertificateArray []AccessCaCertificateInput

func (AccessCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessCaCertificate)(nil)).Elem()
}

func (i AccessCaCertificateArray) ToAccessCaCertificateArrayOutput() AccessCaCertificateArrayOutput {
	return i.ToAccessCaCertificateArrayOutputWithContext(context.Background())
}

func (i AccessCaCertificateArray) ToAccessCaCertificateArrayOutputWithContext(ctx context.Context) AccessCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessCaCertificateArrayOutput)
}

// AccessCaCertificateMapInput is an input type that accepts AccessCaCertificateMap and AccessCaCertificateMapOutput values.
// You can construct a concrete instance of `AccessCaCertificateMapInput` via:
//
//	AccessCaCertificateMap{ "key": AccessCaCertificateArgs{...} }
type AccessCaCertificateMapInput interface {
	pulumi.Input

	ToAccessCaCertificateMapOutput() AccessCaCertificateMapOutput
	ToAccessCaCertificateMapOutputWithContext(context.Context) AccessCaCertificateMapOutput
}

type AccessCaCertificateMap map[string]AccessCaCertificateInput

func (AccessCaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessCaCertificate)(nil)).Elem()
}

func (i AccessCaCertificateMap) ToAccessCaCertificateMapOutput() AccessCaCertificateMapOutput {
	return i.ToAccessCaCertificateMapOutputWithContext(context.Background())
}

func (i AccessCaCertificateMap) ToAccessCaCertificateMapOutputWithContext(ctx context.Context) AccessCaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessCaCertificateMapOutput)
}

type AccessCaCertificateOutput struct{ *pulumi.OutputState }

func (AccessCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessCaCertificate)(nil)).Elem()
}

func (o AccessCaCertificateOutput) ToAccessCaCertificateOutput() AccessCaCertificateOutput {
	return o
}

func (o AccessCaCertificateOutput) ToAccessCaCertificateOutputWithContext(ctx context.Context) AccessCaCertificateOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o AccessCaCertificateOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessCaCertificate) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// UUID.
func (o AccessCaCertificateOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessCaCertificate) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The Application Audience (AUD) tag. Identifies the application associated with the CA.
func (o AccessCaCertificateOutput) Aud() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessCaCertificate) pulumi.StringOutput { return v.Aud }).(pulumi.StringOutput)
}

// The public key to add to your SSH server configuration.
func (o AccessCaCertificateOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessCaCertificate) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o AccessCaCertificateOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessCaCertificate) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type AccessCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (AccessCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessCaCertificate)(nil)).Elem()
}

func (o AccessCaCertificateArrayOutput) ToAccessCaCertificateArrayOutput() AccessCaCertificateArrayOutput {
	return o
}

func (o AccessCaCertificateArrayOutput) ToAccessCaCertificateArrayOutputWithContext(ctx context.Context) AccessCaCertificateArrayOutput {
	return o
}

func (o AccessCaCertificateArrayOutput) Index(i pulumi.IntInput) AccessCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessCaCertificate {
		return vs[0].([]*AccessCaCertificate)[vs[1].(int)]
	}).(AccessCaCertificateOutput)
}

type AccessCaCertificateMapOutput struct{ *pulumi.OutputState }

func (AccessCaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessCaCertificate)(nil)).Elem()
}

func (o AccessCaCertificateMapOutput) ToAccessCaCertificateMapOutput() AccessCaCertificateMapOutput {
	return o
}

func (o AccessCaCertificateMapOutput) ToAccessCaCertificateMapOutputWithContext(ctx context.Context) AccessCaCertificateMapOutput {
	return o
}

func (o AccessCaCertificateMapOutput) MapIndex(k pulumi.StringInput) AccessCaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessCaCertificate {
		return vs[0].(map[string]*AccessCaCertificate)[vs[1].(string)]
	}).(AccessCaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessCaCertificateInput)(nil)).Elem(), &AccessCaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessCaCertificateArrayInput)(nil)).Elem(), AccessCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessCaCertificateMapInput)(nil)).Elem(), AccessCaCertificateMap{})
	pulumi.RegisterOutputType(AccessCaCertificateOutput{})
	pulumi.RegisterOutputType(AccessCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(AccessCaCertificateMapOutput{})
}
