// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupFilters(ctx, &cloudflare.LookupFiltersArgs{
//				ZoneId:      "023e105f4ecef8ad9ca31a8372d0c353",
//				Id:          pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b61"),
//				Description: pulumi.StringRef("browsers"),
//				Expression:  pulumi.StringRef("php"),
//				Paused:      pulumi.BoolRef(false),
//				Ref:         pulumi.StringRef("FIL-100"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFilters(ctx *pulumi.Context, args *LookupFiltersArgs, opts ...pulumi.InvokeOption) (*LookupFiltersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFiltersResult
	err := ctx.Invoke("cloudflare:index/getFilters:getFilters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFilters.
type LookupFiltersArgs struct {
	// A case-insensitive string to find in the description.
	Description *string `pulumi:"description"`
	// A case-insensitive string to find in the expression.
	Expression *string `pulumi:"expression"`
	// The unique identifier of the filter.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// When true, indicates that the filter is currently paused.
	Paused *bool `pulumi:"paused"`
	// The filter ref (a short reference tag) to search for. Must be an exact match.
	Ref *string `pulumi:"ref"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getFilters.
type LookupFiltersResult struct {
	// A case-insensitive string to find in the description.
	Description *string `pulumi:"description"`
	// A case-insensitive string to find in the expression.
	Expression *string `pulumi:"expression"`
	// The unique identifier of the filter.
	Id *string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// When true, indicates that the filter is currently paused.
	Paused *bool `pulumi:"paused"`
	// The filter ref (a short reference tag) to search for. Must be an exact match.
	Ref *string `pulumi:"ref"`
	// The items returned by the data source
	Results []GetFiltersResult `pulumi:"results"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupFiltersOutput(ctx *pulumi.Context, args LookupFiltersOutputArgs, opts ...pulumi.InvokeOption) LookupFiltersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFiltersResultOutput, error) {
			args := v.(LookupFiltersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getFilters:getFilters", args, LookupFiltersResultOutput{}, options).(LookupFiltersResultOutput), nil
		}).(LookupFiltersResultOutput)
}

// A collection of arguments for invoking getFilters.
type LookupFiltersOutputArgs struct {
	// A case-insensitive string to find in the description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A case-insensitive string to find in the expression.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The unique identifier of the filter.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// When true, indicates that the filter is currently paused.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// The filter ref (a short reference tag) to search for. Must be an exact match.
	Ref pulumi.StringPtrInput `pulumi:"ref"`
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupFiltersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFiltersArgs)(nil)).Elem()
}

// A collection of values returned by getFilters.
type LookupFiltersResultOutput struct{ *pulumi.OutputState }

func (LookupFiltersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFiltersResult)(nil)).Elem()
}

func (o LookupFiltersResultOutput) ToLookupFiltersResultOutput() LookupFiltersResultOutput {
	return o
}

func (o LookupFiltersResultOutput) ToLookupFiltersResultOutputWithContext(ctx context.Context) LookupFiltersResultOutput {
	return o
}

// A case-insensitive string to find in the description.
func (o LookupFiltersResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// A case-insensitive string to find in the expression.
func (o LookupFiltersResultOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The unique identifier of the filter.
func (o LookupFiltersResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Max items to fetch, default: 1000
func (o LookupFiltersResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// When true, indicates that the filter is currently paused.
func (o LookupFiltersResultOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// The filter ref (a short reference tag) to search for. Must be an exact match.
func (o LookupFiltersResultOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFiltersResult) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

// The items returned by the data source
func (o LookupFiltersResultOutput) Results() GetFiltersResultArrayOutput {
	return o.ApplyT(func(v LookupFiltersResult) []GetFiltersResult { return v.Results }).(GetFiltersResultArrayOutput)
}

// Defines an identifier.
func (o LookupFiltersResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFiltersResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFiltersResultOutput{})
}
