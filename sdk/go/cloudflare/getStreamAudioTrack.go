// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupStreamAudioTrack(ctx, &cloudflare.LookupStreamAudioTrackArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				Identifier: "ea95132c15732412d22c1476fa83f27a",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamAudioTrack(ctx *pulumi.Context, args *LookupStreamAudioTrackArgs, opts ...pulumi.InvokeOption) (*LookupStreamAudioTrackResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamAudioTrackResult
	err := ctx.Invoke("cloudflare:index/getStreamAudioTrack:getStreamAudioTrack", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamAudioTrack.
type LookupStreamAudioTrackArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
}

// A collection of values returned by getStreamAudioTrack.
type LookupStreamAudioTrackResult struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Denotes whether the audio track will be played by default in a player.
	Default bool `pulumi:"default"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label string `pulumi:"label"`
	// Specifies the processing status of the video.
	// Available values: "queued", "ready", "error".
	Status string `pulumi:"status"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid string `pulumi:"uid"`
}

func LookupStreamAudioTrackOutput(ctx *pulumi.Context, args LookupStreamAudioTrackOutputArgs, opts ...pulumi.InvokeOption) LookupStreamAudioTrackResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamAudioTrackResultOutput, error) {
			args := v.(LookupStreamAudioTrackArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getStreamAudioTrack:getStreamAudioTrack", args, LookupStreamAudioTrackResultOutput{}, options).(LookupStreamAudioTrackResultOutput), nil
		}).(LookupStreamAudioTrackResultOutput)
}

// A collection of arguments for invoking getStreamAudioTrack.
type LookupStreamAudioTrackOutputArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringInput `pulumi:"identifier"`
}

func (LookupStreamAudioTrackOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAudioTrackArgs)(nil)).Elem()
}

// A collection of values returned by getStreamAudioTrack.
type LookupStreamAudioTrackResultOutput struct{ *pulumi.OutputState }

func (LookupStreamAudioTrackResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamAudioTrackResult)(nil)).Elem()
}

func (o LookupStreamAudioTrackResultOutput) ToLookupStreamAudioTrackResultOutput() LookupStreamAudioTrackResultOutput {
	return o
}

func (o LookupStreamAudioTrackResultOutput) ToLookupStreamAudioTrackResultOutputWithContext(ctx context.Context) LookupStreamAudioTrackResultOutput {
	return o
}

// The account identifier tag.
func (o LookupStreamAudioTrackResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Denotes whether the audio track will be played by default in a player.
func (o LookupStreamAudioTrackResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStreamAudioTrackResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.Id }).(pulumi.StringOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o LookupStreamAudioTrackResultOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.Identifier }).(pulumi.StringOutput)
}

// A string to uniquely identify the track amongst other audio track labels for the specified video.
func (o LookupStreamAudioTrackResultOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.Label }).(pulumi.StringOutput)
}

// Specifies the processing status of the video.
// Available values: "queued", "ready", "error".
func (o LookupStreamAudioTrackResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.Status }).(pulumi.StringOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o LookupStreamAudioTrackResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamAudioTrackResult) string { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamAudioTrackResultOutput{})
}
