// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZeroTrustAccessPolicy(ctx, &cloudflare.LookupZeroTrustAccessPolicyArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				PolicyId:  pulumi.StringRef("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZeroTrustAccessPolicy(ctx *pulumi.Context, args *LookupZeroTrustAccessPolicyArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustAccessPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustAccessPolicyResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustAccessPolicy:getZeroTrustAccessPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustAccessPolicy.
type LookupZeroTrustAccessPolicyArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// The UUID of the policy
	PolicyId *string `pulumi:"policyId"`
}

// A collection of values returned by getZeroTrustAccessPolicy.
type LookupZeroTrustAccessPolicyResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Number of access applications currently using this policy.
	AppCount int `pulumi:"appCount"`
	// Administrators who can approve a temporary authentication request.
	ApprovalGroups []GetZeroTrustAccessPolicyApprovalGroup `pulumi:"approvalGroups"`
	// Requires the user to request access from an administrator at the start of each session.
	ApprovalRequired bool   `pulumi:"approvalRequired"`
	CreatedAt        string `pulumi:"createdAt"`
	// The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
	Decision string `pulumi:"decision"`
	// Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
	Excludes []GetZeroTrustAccessPolicyExclude `pulumi:"excludes"`
	// The UUID of the policy
	Id string `pulumi:"id"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []GetZeroTrustAccessPolicyInclude `pulumi:"includes"`
	// Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
	IsolationRequired bool `pulumi:"isolationRequired"`
	// The name of the Access policy.
	Name string `pulumi:"name"`
	// The UUID of the policy
	PolicyId *string `pulumi:"policyId"`
	// A custom message that will appear on the purpose justification screen.
	PurposeJustificationPrompt string `pulumi:"purposeJustificationPrompt"`
	// Require users to enter a justification when they log in to the application.
	PurposeJustificationRequired bool `pulumi:"purposeJustificationRequired"`
	// Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
	Requires []GetZeroTrustAccessPolicyRequire `pulumi:"requires"`
	Reusable bool                              `pulumi:"reusable"`
	// The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
	SessionDuration string `pulumi:"sessionDuration"`
	UpdatedAt       string `pulumi:"updatedAt"`
}

func LookupZeroTrustAccessPolicyOutput(ctx *pulumi.Context, args LookupZeroTrustAccessPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustAccessPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustAccessPolicyResultOutput, error) {
			args := v.(LookupZeroTrustAccessPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZeroTrustAccessPolicy:getZeroTrustAccessPolicy", args, LookupZeroTrustAccessPolicyResultOutput{}, options).(LookupZeroTrustAccessPolicyResultOutput), nil
		}).(LookupZeroTrustAccessPolicyResultOutput)
}

// A collection of arguments for invoking getZeroTrustAccessPolicy.
type LookupZeroTrustAccessPolicyOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The UUID of the policy
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
}

func (LookupZeroTrustAccessPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustAccessPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustAccessPolicy.
type LookupZeroTrustAccessPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustAccessPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustAccessPolicyResult)(nil)).Elem()
}

func (o LookupZeroTrustAccessPolicyResultOutput) ToLookupZeroTrustAccessPolicyResultOutput() LookupZeroTrustAccessPolicyResultOutput {
	return o
}

func (o LookupZeroTrustAccessPolicyResultOutput) ToLookupZeroTrustAccessPolicyResultOutputWithContext(ctx context.Context) LookupZeroTrustAccessPolicyResultOutput {
	return o
}

// Identifier
func (o LookupZeroTrustAccessPolicyResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Number of access applications currently using this policy.
func (o LookupZeroTrustAccessPolicyResultOutput) AppCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) int { return v.AppCount }).(pulumi.IntOutput)
}

// Administrators who can approve a temporary authentication request.
func (o LookupZeroTrustAccessPolicyResultOutput) ApprovalGroups() GetZeroTrustAccessPolicyApprovalGroupArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) []GetZeroTrustAccessPolicyApprovalGroup {
		return v.ApprovalGroups
	}).(GetZeroTrustAccessPolicyApprovalGroupArrayOutput)
}

// Requires the user to request access from an administrator at the start of each session.
func (o LookupZeroTrustAccessPolicyResultOutput) ApprovalRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) bool { return v.ApprovalRequired }).(pulumi.BoolOutput)
}

func (o LookupZeroTrustAccessPolicyResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
func (o LookupZeroTrustAccessPolicyResultOutput) Decision() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.Decision }).(pulumi.StringOutput)
}

// Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
func (o LookupZeroTrustAccessPolicyResultOutput) Excludes() GetZeroTrustAccessPolicyExcludeArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) []GetZeroTrustAccessPolicyExclude { return v.Excludes }).(GetZeroTrustAccessPolicyExcludeArrayOutput)
}

// The UUID of the policy
func (o LookupZeroTrustAccessPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
func (o LookupZeroTrustAccessPolicyResultOutput) Includes() GetZeroTrustAccessPolicyIncludeArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) []GetZeroTrustAccessPolicyInclude { return v.Includes }).(GetZeroTrustAccessPolicyIncludeArrayOutput)
}

// Require this application to be served in an isolated browser for users matching this policy. 'Client Web Isolation' must be on for the account in order to use this feature.
func (o LookupZeroTrustAccessPolicyResultOutput) IsolationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) bool { return v.IsolationRequired }).(pulumi.BoolOutput)
}

// The name of the Access policy.
func (o LookupZeroTrustAccessPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The UUID of the policy
func (o LookupZeroTrustAccessPolicyResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// A custom message that will appear on the purpose justification screen.
func (o LookupZeroTrustAccessPolicyResultOutput) PurposeJustificationPrompt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.PurposeJustificationPrompt }).(pulumi.StringOutput)
}

// Require users to enter a justification when they log in to the application.
func (o LookupZeroTrustAccessPolicyResultOutput) PurposeJustificationRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) bool { return v.PurposeJustificationRequired }).(pulumi.BoolOutput)
}

// Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
func (o LookupZeroTrustAccessPolicyResultOutput) Requires() GetZeroTrustAccessPolicyRequireArrayOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) []GetZeroTrustAccessPolicyRequire { return v.Requires }).(GetZeroTrustAccessPolicyRequireArrayOutput)
}

func (o LookupZeroTrustAccessPolicyResultOutput) Reusable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) bool { return v.Reusable }).(pulumi.BoolOutput)
}

// The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
func (o LookupZeroTrustAccessPolicyResultOutput) SessionDuration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.SessionDuration }).(pulumi.StringOutput)
}

func (o LookupZeroTrustAccessPolicyResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustAccessPolicyResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustAccessPolicyResultOutput{})
}
