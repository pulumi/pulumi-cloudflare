// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupRateLimit(ctx, &cloudflare.LookupRateLimitArgs{
//				ZoneId:      "023e105f4ecef8ad9ca31a8372d0c353",
//				RateLimitId: pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b59"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRateLimit(ctx *pulumi.Context, args *LookupRateLimitArgs, opts ...pulumi.InvokeOption) (*LookupRateLimitResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRateLimitResult
	err := ctx.Invoke("cloudflare:index/getRateLimit:getRateLimit", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRateLimit.
type LookupRateLimitArgs struct {
	// Defines the unique identifier of the rate limit.
	RateLimitId *string `pulumi:"rateLimitId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getRateLimit.
type LookupRateLimitResult struct {
	// The action to perform when the threshold of matched traffic within the configured period is exceeded.
	Action GetRateLimitAction `pulumi:"action"`
	// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
	Bypasses []GetRateLimitBypass `pulumi:"bypasses"`
	// An informative summary of the rate limit. This value is sanitized and any tags will be removed.
	Description string `pulumi:"description"`
	// When true, indicates that the rate limit is currently disabled.
	Disabled bool `pulumi:"disabled"`
	// Defines the unique identifier of the rate limit.
	Id string `pulumi:"id"`
	// Determines which traffic the rate limit counts towards the threshold.
	Match GetRateLimitMatch `pulumi:"match"`
	// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
	Period float64 `pulumi:"period"`
	// Defines the unique identifier of the rate limit.
	RateLimitId *string `pulumi:"rateLimitId"`
	// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
	Threshold float64 `pulumi:"threshold"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupRateLimitOutput(ctx *pulumi.Context, args LookupRateLimitOutputArgs, opts ...pulumi.InvokeOption) LookupRateLimitResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRateLimitResultOutput, error) {
			args := v.(LookupRateLimitArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getRateLimit:getRateLimit", args, LookupRateLimitResultOutput{}, options).(LookupRateLimitResultOutput), nil
		}).(LookupRateLimitResultOutput)
}

// A collection of arguments for invoking getRateLimit.
type LookupRateLimitOutputArgs struct {
	// Defines the unique identifier of the rate limit.
	RateLimitId pulumi.StringPtrInput `pulumi:"rateLimitId"`
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupRateLimitOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRateLimitArgs)(nil)).Elem()
}

// A collection of values returned by getRateLimit.
type LookupRateLimitResultOutput struct{ *pulumi.OutputState }

func (LookupRateLimitResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRateLimitResult)(nil)).Elem()
}

func (o LookupRateLimitResultOutput) ToLookupRateLimitResultOutput() LookupRateLimitResultOutput {
	return o
}

func (o LookupRateLimitResultOutput) ToLookupRateLimitResultOutputWithContext(ctx context.Context) LookupRateLimitResultOutput {
	return o
}

// The action to perform when the threshold of matched traffic within the configured period is exceeded.
func (o LookupRateLimitResultOutput) Action() GetRateLimitActionOutput {
	return o.ApplyT(func(v LookupRateLimitResult) GetRateLimitAction { return v.Action }).(GetRateLimitActionOutput)
}

// Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
func (o LookupRateLimitResultOutput) Bypasses() GetRateLimitBypassArrayOutput {
	return o.ApplyT(func(v LookupRateLimitResult) []GetRateLimitBypass { return v.Bypasses }).(GetRateLimitBypassArrayOutput)
}

// An informative summary of the rate limit. This value is sanitized and any tags will be removed.
func (o LookupRateLimitResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRateLimitResult) string { return v.Description }).(pulumi.StringOutput)
}

// When true, indicates that the rate limit is currently disabled.
func (o LookupRateLimitResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRateLimitResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Defines the unique identifier of the rate limit.
func (o LookupRateLimitResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRateLimitResult) string { return v.Id }).(pulumi.StringOutput)
}

// Determines which traffic the rate limit counts towards the threshold.
func (o LookupRateLimitResultOutput) Match() GetRateLimitMatchOutput {
	return o.ApplyT(func(v LookupRateLimitResult) GetRateLimitMatch { return v.Match }).(GetRateLimitMatchOutput)
}

// The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
func (o LookupRateLimitResultOutput) Period() pulumi.Float64Output {
	return o.ApplyT(func(v LookupRateLimitResult) float64 { return v.Period }).(pulumi.Float64Output)
}

// Defines the unique identifier of the rate limit.
func (o LookupRateLimitResultOutput) RateLimitId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRateLimitResult) *string { return v.RateLimitId }).(pulumi.StringPtrOutput)
}

// The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
func (o LookupRateLimitResultOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupRateLimitResult) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Defines an identifier.
func (o LookupRateLimitResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRateLimitResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRateLimitResultOutput{})
}
