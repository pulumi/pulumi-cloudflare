// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupCertificatePacks(ctx, &cloudflare.LookupCertificatePacksArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Status: pulumi.StringRef("all"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCertificatePacks(ctx *pulumi.Context, args *LookupCertificatePacksArgs, opts ...pulumi.InvokeOption) (*LookupCertificatePacksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificatePacksResult
	err := ctx.Invoke("cloudflare:index/getCertificatePacks:getCertificatePacks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificatePacks.
type LookupCertificatePacksArgs struct {
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Include Certificate Packs of all statuses, not just active ones.
	// Available values: "all".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCertificatePacks.
type LookupCertificatePacksResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// The items returned by the data source
	Results []GetCertificatePacksResult `pulumi:"results"`
	// Include Certificate Packs of all statuses, not just active ones.
	// Available values: "all".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupCertificatePacksOutput(ctx *pulumi.Context, args LookupCertificatePacksOutputArgs, opts ...pulumi.InvokeOption) LookupCertificatePacksResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificatePacksResultOutput, error) {
			args := v.(LookupCertificatePacksArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getCertificatePacks:getCertificatePacks", args, LookupCertificatePacksResultOutput{}, options).(LookupCertificatePacksResultOutput), nil
		}).(LookupCertificatePacksResultOutput)
}

// A collection of arguments for invoking getCertificatePacks.
type LookupCertificatePacksOutputArgs struct {
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// Include Certificate Packs of all statuses, not just active ones.
	// Available values: "all".
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupCertificatePacksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificatePacksArgs)(nil)).Elem()
}

// A collection of values returned by getCertificatePacks.
type LookupCertificatePacksResultOutput struct{ *pulumi.OutputState }

func (LookupCertificatePacksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificatePacksResult)(nil)).Elem()
}

func (o LookupCertificatePacksResultOutput) ToLookupCertificatePacksResultOutput() LookupCertificatePacksResultOutput {
	return o
}

func (o LookupCertificatePacksResultOutput) ToLookupCertificatePacksResultOutputWithContext(ctx context.Context) LookupCertificatePacksResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCertificatePacksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePacksResult) string { return v.Id }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupCertificatePacksResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCertificatePacksResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// The items returned by the data source
func (o LookupCertificatePacksResultOutput) Results() GetCertificatePacksResultArrayOutput {
	return o.ApplyT(func(v LookupCertificatePacksResult) []GetCertificatePacksResult { return v.Results }).(GetCertificatePacksResultArrayOutput)
}

// Include Certificate Packs of all statuses, not just active ones.
// Available values: "all".
func (o LookupCertificatePacksResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCertificatePacksResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Identifier.
func (o LookupCertificatePacksResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificatePacksResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificatePacksResultOutput{})
}
