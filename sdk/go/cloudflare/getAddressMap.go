// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupAddressMap(ctx, &cloudflare.LookupAddressMapArgs{
//				AccountId:    "258def64c72dae45f3e4c8516e2111f2",
//				AddressMapId: pulumi.StringRef("055817b111884e0227e1be16a0be6ee0"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAddressMap(ctx *pulumi.Context, args *LookupAddressMapArgs, opts ...pulumi.InvokeOption) (*LookupAddressMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAddressMapResult
	err := ctx.Invoke("cloudflare:index/getAddressMap:getAddressMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddressMap.
type LookupAddressMapArgs struct {
	// Identifier of a Cloudflare account.
	AccountId string `pulumi:"accountId"`
	// Identifier of an Address Map.
	AddressMapId *string `pulumi:"addressMapId"`
}

// A collection of values returned by getAddressMap.
type LookupAddressMapResult struct {
	// Identifier of a Cloudflare account.
	AccountId string `pulumi:"accountId"`
	// Identifier of an Address Map.
	AddressMapId *string `pulumi:"addressMapId"`
	// If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
	CanDelete bool `pulumi:"canDelete"`
	// If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
	CanModifyIps bool   `pulumi:"canModifyIps"`
	CreatedAt    string `pulumi:"createdAt"`
	// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
	DefaultSni string `pulumi:"defaultSni"`
	// An optional description field which may be used to describe the types of IPs or zones on the map.
	Description string `pulumi:"description"`
	// Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
	Enabled bool `pulumi:"enabled"`
	// Identifier of an Address Map.
	Id string `pulumi:"id"`
	// The set of IPs on the Address Map.
	Ips []GetAddressMapIp `pulumi:"ips"`
	// Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
	Memberships []GetAddressMapMembership `pulumi:"memberships"`
	ModifiedAt  string                    `pulumi:"modifiedAt"`
}

func LookupAddressMapOutput(ctx *pulumi.Context, args LookupAddressMapOutputArgs, opts ...pulumi.InvokeOption) LookupAddressMapResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAddressMapResultOutput, error) {
			args := v.(LookupAddressMapArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAddressMap:getAddressMap", args, LookupAddressMapResultOutput{}, options).(LookupAddressMapResultOutput), nil
		}).(LookupAddressMapResultOutput)
}

// A collection of arguments for invoking getAddressMap.
type LookupAddressMapOutputArgs struct {
	// Identifier of a Cloudflare account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier of an Address Map.
	AddressMapId pulumi.StringPtrInput `pulumi:"addressMapId"`
}

func (LookupAddressMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddressMapArgs)(nil)).Elem()
}

// A collection of values returned by getAddressMap.
type LookupAddressMapResultOutput struct{ *pulumi.OutputState }

func (LookupAddressMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddressMapResult)(nil)).Elem()
}

func (o LookupAddressMapResultOutput) ToLookupAddressMapResultOutput() LookupAddressMapResultOutput {
	return o
}

func (o LookupAddressMapResultOutput) ToLookupAddressMapResultOutputWithContext(ctx context.Context) LookupAddressMapResultOutput {
	return o
}

// Identifier of a Cloudflare account.
func (o LookupAddressMapResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Identifier of an Address Map.
func (o LookupAddressMapResultOutput) AddressMapId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAddressMapResult) *string { return v.AddressMapId }).(pulumi.StringPtrOutput)
}

// If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
func (o LookupAddressMapResultOutput) CanDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAddressMapResult) bool { return v.CanDelete }).(pulumi.BoolOutput)
}

// If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
func (o LookupAddressMapResultOutput) CanModifyIps() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAddressMapResult) bool { return v.CanModifyIps }).(pulumi.BoolOutput)
}

func (o LookupAddressMapResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
func (o LookupAddressMapResultOutput) DefaultSni() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.DefaultSni }).(pulumi.StringOutput)
}

// An optional description field which may be used to describe the types of IPs or zones on the map.
func (o LookupAddressMapResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether the Address Map is enabled or not. Cloudflare's DNS will not respond with IP addresses on an Address Map until the map is enabled.
func (o LookupAddressMapResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAddressMapResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Identifier of an Address Map.
func (o LookupAddressMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.Id }).(pulumi.StringOutput)
}

// The set of IPs on the Address Map.
func (o LookupAddressMapResultOutput) Ips() GetAddressMapIpArrayOutput {
	return o.ApplyT(func(v LookupAddressMapResult) []GetAddressMapIp { return v.Ips }).(GetAddressMapIpArrayOutput)
}

// Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
func (o LookupAddressMapResultOutput) Memberships() GetAddressMapMembershipArrayOutput {
	return o.ApplyT(func(v LookupAddressMapResult) []GetAddressMapMembership { return v.Memberships }).(GetAddressMapMembershipArrayOutput)
}

func (o LookupAddressMapResultOutput) ModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddressMapResult) string { return v.ModifiedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAddressMapResultOutput{})
}
