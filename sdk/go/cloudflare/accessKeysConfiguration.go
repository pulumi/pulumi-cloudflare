// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessKeysConfiguration struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays pulumi.IntOutput `pulumi:"keyRotationIntervalDays"`
}

// NewAccessKeysConfiguration registers a new resource with the given unique name, arguments, and options.
func NewAccessKeysConfiguration(ctx *pulumi.Context,
	name string, args *AccessKeysConfigurationArgs, opts ...pulumi.ResourceOption) (*AccessKeysConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessKeysConfiguration
	err := ctx.RegisterResource("cloudflare:index/accessKeysConfiguration:AccessKeysConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessKeysConfiguration gets an existing AccessKeysConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessKeysConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessKeysConfigurationState, opts ...pulumi.ResourceOption) (*AccessKeysConfiguration, error) {
	var resource AccessKeysConfiguration
	err := ctx.ReadResource("cloudflare:index/accessKeysConfiguration:AccessKeysConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessKeysConfiguration resources.
type accessKeysConfigurationState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays *int `pulumi:"keyRotationIntervalDays"`
}

type AccessKeysConfigurationState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays pulumi.IntPtrInput
}

func (AccessKeysConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeysConfigurationState)(nil)).Elem()
}

type accessKeysConfigurationArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays *int `pulumi:"keyRotationIntervalDays"`
}

// The set of arguments for constructing a AccessKeysConfiguration resource.
type AccessKeysConfigurationArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// Number of days to trigger a rotation of the keys.
	KeyRotationIntervalDays pulumi.IntPtrInput
}

func (AccessKeysConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeysConfigurationArgs)(nil)).Elem()
}

type AccessKeysConfigurationInput interface {
	pulumi.Input

	ToAccessKeysConfigurationOutput() AccessKeysConfigurationOutput
	ToAccessKeysConfigurationOutputWithContext(ctx context.Context) AccessKeysConfigurationOutput
}

func (*AccessKeysConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeysConfiguration)(nil)).Elem()
}

func (i *AccessKeysConfiguration) ToAccessKeysConfigurationOutput() AccessKeysConfigurationOutput {
	return i.ToAccessKeysConfigurationOutputWithContext(context.Background())
}

func (i *AccessKeysConfiguration) ToAccessKeysConfigurationOutputWithContext(ctx context.Context) AccessKeysConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysConfigurationOutput)
}

// AccessKeysConfigurationArrayInput is an input type that accepts AccessKeysConfigurationArray and AccessKeysConfigurationArrayOutput values.
// You can construct a concrete instance of `AccessKeysConfigurationArrayInput` via:
//
//	AccessKeysConfigurationArray{ AccessKeysConfigurationArgs{...} }
type AccessKeysConfigurationArrayInput interface {
	pulumi.Input

	ToAccessKeysConfigurationArrayOutput() AccessKeysConfigurationArrayOutput
	ToAccessKeysConfigurationArrayOutputWithContext(context.Context) AccessKeysConfigurationArrayOutput
}

type AccessKeysConfigurationArray []AccessKeysConfigurationInput

func (AccessKeysConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKeysConfiguration)(nil)).Elem()
}

func (i AccessKeysConfigurationArray) ToAccessKeysConfigurationArrayOutput() AccessKeysConfigurationArrayOutput {
	return i.ToAccessKeysConfigurationArrayOutputWithContext(context.Background())
}

func (i AccessKeysConfigurationArray) ToAccessKeysConfigurationArrayOutputWithContext(ctx context.Context) AccessKeysConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysConfigurationArrayOutput)
}

// AccessKeysConfigurationMapInput is an input type that accepts AccessKeysConfigurationMap and AccessKeysConfigurationMapOutput values.
// You can construct a concrete instance of `AccessKeysConfigurationMapInput` via:
//
//	AccessKeysConfigurationMap{ "key": AccessKeysConfigurationArgs{...} }
type AccessKeysConfigurationMapInput interface {
	pulumi.Input

	ToAccessKeysConfigurationMapOutput() AccessKeysConfigurationMapOutput
	ToAccessKeysConfigurationMapOutputWithContext(context.Context) AccessKeysConfigurationMapOutput
}

type AccessKeysConfigurationMap map[string]AccessKeysConfigurationInput

func (AccessKeysConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKeysConfiguration)(nil)).Elem()
}

func (i AccessKeysConfigurationMap) ToAccessKeysConfigurationMapOutput() AccessKeysConfigurationMapOutput {
	return i.ToAccessKeysConfigurationMapOutputWithContext(context.Background())
}

func (i AccessKeysConfigurationMap) ToAccessKeysConfigurationMapOutputWithContext(ctx context.Context) AccessKeysConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysConfigurationMapOutput)
}

type AccessKeysConfigurationOutput struct{ *pulumi.OutputState }

func (AccessKeysConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeysConfiguration)(nil)).Elem()
}

func (o AccessKeysConfigurationOutput) ToAccessKeysConfigurationOutput() AccessKeysConfigurationOutput {
	return o
}

func (o AccessKeysConfigurationOutput) ToAccessKeysConfigurationOutputWithContext(ctx context.Context) AccessKeysConfigurationOutput {
	return o
}

// The account identifier to target for the resource.
func (o AccessKeysConfigurationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKeysConfiguration) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Number of days to trigger a rotation of the keys.
func (o AccessKeysConfigurationOutput) KeyRotationIntervalDays() pulumi.IntOutput {
	return o.ApplyT(func(v *AccessKeysConfiguration) pulumi.IntOutput { return v.KeyRotationIntervalDays }).(pulumi.IntOutput)
}

type AccessKeysConfigurationArrayOutput struct{ *pulumi.OutputState }

func (AccessKeysConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKeysConfiguration)(nil)).Elem()
}

func (o AccessKeysConfigurationArrayOutput) ToAccessKeysConfigurationArrayOutput() AccessKeysConfigurationArrayOutput {
	return o
}

func (o AccessKeysConfigurationArrayOutput) ToAccessKeysConfigurationArrayOutputWithContext(ctx context.Context) AccessKeysConfigurationArrayOutput {
	return o
}

func (o AccessKeysConfigurationArrayOutput) Index(i pulumi.IntInput) AccessKeysConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessKeysConfiguration {
		return vs[0].([]*AccessKeysConfiguration)[vs[1].(int)]
	}).(AccessKeysConfigurationOutput)
}

type AccessKeysConfigurationMapOutput struct{ *pulumi.OutputState }

func (AccessKeysConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKeysConfiguration)(nil)).Elem()
}

func (o AccessKeysConfigurationMapOutput) ToAccessKeysConfigurationMapOutput() AccessKeysConfigurationMapOutput {
	return o
}

func (o AccessKeysConfigurationMapOutput) ToAccessKeysConfigurationMapOutputWithContext(ctx context.Context) AccessKeysConfigurationMapOutput {
	return o
}

func (o AccessKeysConfigurationMapOutput) MapIndex(k pulumi.StringInput) AccessKeysConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessKeysConfiguration {
		return vs[0].(map[string]*AccessKeysConfiguration)[vs[1].(string)]
	}).(AccessKeysConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysConfigurationInput)(nil)).Elem(), &AccessKeysConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysConfigurationArrayInput)(nil)).Elem(), AccessKeysConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysConfigurationMapInput)(nil)).Elem(), AccessKeysConfigurationMap{})
	pulumi.RegisterOutputType(AccessKeysConfigurationOutput{})
	pulumi.RegisterOutputType(AccessKeysConfigurationArrayOutput{})
	pulumi.RegisterOutputType(AccessKeysConfigurationMapOutput{})
}
