// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupLogpushJob(ctx, &cloudflare.LookupLogpushJobArgs{
//				JobId:     pulumi.IntRef(1),
//				AccountId: pulumi.StringRef("account_id"),
//				ZoneId:    pulumi.StringRef("zone_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLogpushJob(ctx *pulumi.Context, args *LookupLogpushJobArgs, opts ...pulumi.InvokeOption) (*LookupLogpushJobResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLogpushJobResult
	err := ctx.Invoke("cloudflare:index/getLogpushJob:getLogpushJob", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLogpushJob.
type LookupLogpushJobArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Unique id of the job.
	JobId *int `pulumi:"jobId"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getLogpushJob.
type LookupLogpushJobResult struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Name of the dataset. A list of supported datasets can be found on the [Developer Docs](https://developers.cloudflare.com/logs/reference/log-fields/).
	Dataset string `pulumi:"dataset"`
	// Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included.
	DestinationConf string `pulumi:"destinationConf"`
	// Flag that indicates if the job is enabled.
	Enabled bool `pulumi:"enabled"`
	// If not null, the job is currently failing. Failures are usually repetitive (example: no permissions to write to destination bucket). Only the last failure is recorded. On successful execution of a job the error*message and last*error are set to null.
	ErrorMessage string `pulumi:"errorMessage"`
	// This field is deprecated. Please use `max_upload_*` parameters instead. The frequency at which Cloudflare sends batches of logs to your destination. Setting frequency to high sends your logs in larger quantities of smaller files. Setting frequency to low sends logs in smaller quantities of larger files.
	// Available values: "high", "low".
	Frequency string `pulumi:"frequency"`
	// Unique id of the job.
	Id int `pulumi:"id"`
	// Unique id of the job.
	JobId *int `pulumi:"jobId"`
	// The kind parameter (optional) is used to differentiate between Logpush and Edge Log Delivery jobs. Currently, Edge Log Delivery is only supported for the `httpRequests` dataset.
	// Available values: "edge".
	Kind string `pulumi:"kind"`
	// Records the last time for which logs have been successfully pushed. If the last successful push was for logs range 2018-07-23T10:00:00Z to 2018-07-23T10:01:00Z then the value of this field will be 2018-07-23T10:01:00Z. If the job has never run or has just been enabled and hasn't run yet then the field will be empty.
	LastComplete string `pulumi:"lastComplete"`
	// Records the last time the job failed. If not null, the job is currently failing. If null, the job has either never failed or has run successfully at least once since last failure. See also the errorMessage field.
	LastError string `pulumi:"lastError"`
	// This field is deprecated. Use `outputOptions` instead. Configuration string. It specifies things like requested fields and timestamp formats. If migrating from the logpull api, copy the url (full url or just the query string) of your call here, and logpush will keep on making this call for you, setting start and end times appropriately.
	LogpullOptions string `pulumi:"logpullOptions"`
	// The maximum uncompressed file size of a batch of logs. This setting value must be between `5 MB` and `1 GB`, or `0` to disable it. Note that you cannot set a minimum file size; this means that log files may be much smaller than this batch size. This parameter is not available for jobs with `edge` as its kind.
	MaxUploadBytes int `pulumi:"maxUploadBytes"`
	// The maximum interval in seconds for log batches. This setting must be between 30 and 300 seconds (5 minutes), or `0` to disable it. Note that you cannot specify a minimum interval for log batches; this means that log files may be sent in shorter intervals than this. This parameter is only used for jobs with `edge` as its kind.
	MaxUploadIntervalSeconds int `pulumi:"maxUploadIntervalSeconds"`
	// The maximum number of log lines per batch. This setting must be between 1000 and 1,000,000 lines, or `0` to disable it. Note that you cannot specify a minimum number of log lines per batch; this means that log files may contain many fewer lines than this. This parameter is not available for jobs with `edge` as its kind.
	MaxUploadRecords int `pulumi:"maxUploadRecords"`
	// Optional human readable job name. Not unique. Cloudflare suggests that you set this to a meaningful string, like the domain name, to make it easier to identify your job.
	Name string `pulumi:"name"`
	// The structured replacement for `logpullOptions`. When including this field, the `logpullOption` field will be ignored.
	OutputOptions GetLogpushJobOutputOptions `pulumi:"outputOptions"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

func LookupLogpushJobOutput(ctx *pulumi.Context, args LookupLogpushJobOutputArgs, opts ...pulumi.InvokeOption) LookupLogpushJobResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLogpushJobResultOutput, error) {
			args := v.(LookupLogpushJobArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getLogpushJob:getLogpushJob", args, LookupLogpushJobResultOutput{}, options).(LookupLogpushJobResultOutput), nil
		}).(LookupLogpushJobResultOutput)
}

// A collection of arguments for invoking getLogpushJob.
type LookupLogpushJobOutputArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// Unique id of the job.
	JobId pulumi.IntPtrInput `pulumi:"jobId"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (LookupLogpushJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogpushJobArgs)(nil)).Elem()
}

// A collection of values returned by getLogpushJob.
type LookupLogpushJobResultOutput struct{ *pulumi.OutputState }

func (LookupLogpushJobResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLogpushJobResult)(nil)).Elem()
}

func (o LookupLogpushJobResultOutput) ToLookupLogpushJobResultOutput() LookupLogpushJobResultOutput {
	return o
}

func (o LookupLogpushJobResultOutput) ToLookupLogpushJobResultOutputWithContext(ctx context.Context) LookupLogpushJobResultOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o LookupLogpushJobResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Name of the dataset. A list of supported datasets can be found on the [Developer Docs](https://developers.cloudflare.com/logs/reference/log-fields/).
func (o LookupLogpushJobResultOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.Dataset }).(pulumi.StringOutput)
}

// Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included.
func (o LookupLogpushJobResultOutput) DestinationConf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.DestinationConf }).(pulumi.StringOutput)
}

// Flag that indicates if the job is enabled.
func (o LookupLogpushJobResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// If not null, the job is currently failing. Failures are usually repetitive (example: no permissions to write to destination bucket). Only the last failure is recorded. On successful execution of a job the error*message and last*error are set to null.
func (o LookupLogpushJobResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// This field is deprecated. Please use `max_upload_*` parameters instead. The frequency at which Cloudflare sends batches of logs to your destination. Setting frequency to high sends your logs in larger quantities of smaller files. Setting frequency to low sends logs in smaller quantities of larger files.
// Available values: "high", "low".
func (o LookupLogpushJobResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// Unique id of the job.
func (o LookupLogpushJobResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) int { return v.Id }).(pulumi.IntOutput)
}

// Unique id of the job.
func (o LookupLogpushJobResultOutput) JobId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) *int { return v.JobId }).(pulumi.IntPtrOutput)
}

// The kind parameter (optional) is used to differentiate between Logpush and Edge Log Delivery jobs. Currently, Edge Log Delivery is only supported for the `httpRequests` dataset.
// Available values: "edge".
func (o LookupLogpushJobResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Records the last time for which logs have been successfully pushed. If the last successful push was for logs range 2018-07-23T10:00:00Z to 2018-07-23T10:01:00Z then the value of this field will be 2018-07-23T10:01:00Z. If the job has never run or has just been enabled and hasn't run yet then the field will be empty.
func (o LookupLogpushJobResultOutput) LastComplete() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.LastComplete }).(pulumi.StringOutput)
}

// Records the last time the job failed. If not null, the job is currently failing. If null, the job has either never failed or has run successfully at least once since last failure. See also the errorMessage field.
func (o LookupLogpushJobResultOutput) LastError() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.LastError }).(pulumi.StringOutput)
}

// This field is deprecated. Use `outputOptions` instead. Configuration string. It specifies things like requested fields and timestamp formats. If migrating from the logpull api, copy the url (full url or just the query string) of your call here, and logpush will keep on making this call for you, setting start and end times appropriately.
func (o LookupLogpushJobResultOutput) LogpullOptions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.LogpullOptions }).(pulumi.StringOutput)
}

// The maximum uncompressed file size of a batch of logs. This setting value must be between `5 MB` and `1 GB`, or `0` to disable it. Note that you cannot set a minimum file size; this means that log files may be much smaller than this batch size. This parameter is not available for jobs with `edge` as its kind.
func (o LookupLogpushJobResultOutput) MaxUploadBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) int { return v.MaxUploadBytes }).(pulumi.IntOutput)
}

// The maximum interval in seconds for log batches. This setting must be between 30 and 300 seconds (5 minutes), or `0` to disable it. Note that you cannot specify a minimum interval for log batches; this means that log files may be sent in shorter intervals than this. This parameter is only used for jobs with `edge` as its kind.
func (o LookupLogpushJobResultOutput) MaxUploadIntervalSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) int { return v.MaxUploadIntervalSeconds }).(pulumi.IntOutput)
}

// The maximum number of log lines per batch. This setting must be between 1000 and 1,000,000 lines, or `0` to disable it. Note that you cannot specify a minimum number of log lines per batch; this means that log files may contain many fewer lines than this. This parameter is not available for jobs with `edge` as its kind.
func (o LookupLogpushJobResultOutput) MaxUploadRecords() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) int { return v.MaxUploadRecords }).(pulumi.IntOutput)
}

// Optional human readable job name. Not unique. Cloudflare suggests that you set this to a meaningful string, like the domain name, to make it easier to identify your job.
func (o LookupLogpushJobResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) string { return v.Name }).(pulumi.StringOutput)
}

// The structured replacement for `logpullOptions`. When including this field, the `logpullOption` field will be ignored.
func (o LookupLogpushJobResultOutput) OutputOptions() GetLogpushJobOutputOptionsOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) GetLogpushJobOutputOptions { return v.OutputOptions }).(GetLogpushJobOutputOptionsOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o LookupLogpushJobResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLogpushJobResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLogpushJobResultOutput{})
}
