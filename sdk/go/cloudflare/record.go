// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/record:Record example '<zone_id>/<dns_record_id>'
// ```
//
// Deprecated: cloudflare.index/record.Record has been deprecated in favor of cloudflare.index/dnsrecord.DnsRecord
type Record struct {
	pulumi.CustomResourceState

	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn pulumi.StringOutput `pulumi:"commentModifiedOn"`
	// A valid IPv4 address.
	Content pulumi.StringOutput `pulumi:"content"`
	// When the record was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Components of a CAA record.
	Data RecordDataOutput `pulumi:"data"`
	// Extra Cloudflare-specific information about the record.
	Meta pulumi.StringOutput `pulumi:"meta"`
	// When the record was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrOutput `pulumi:"priority"`
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable pulumi.BoolOutput `pulumi:"proxiable"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolOutput `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings RecordSettingsOutput `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn pulumi.StringOutput `pulumi:"tagsModifiedOn"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64Output `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/record:Record"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("cloudflare:index/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("cloudflare:index/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `pulumi:"comment"`
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn *string `pulumi:"commentModifiedOn"`
	// A valid IPv4 address.
	Content *string `pulumi:"content"`
	// When the record was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Components of a CAA record.
	Data *RecordData `pulumi:"data"`
	// Extra Cloudflare-specific information about the record.
	Meta *string `pulumi:"meta"`
	// When the record was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name *string `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority *float64 `pulumi:"priority"`
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable *bool `pulumi:"proxiable"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied *bool `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings *RecordSettings `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags []string `pulumi:"tags"`
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn *string `pulumi:"tagsModifiedOn"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl *float64 `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type RecordState struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringPtrInput
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn pulumi.StringPtrInput
	// A valid IPv4 address.
	Content pulumi.StringPtrInput
	// When the record was created.
	CreatedOn pulumi.StringPtrInput
	// Components of a CAA record.
	Data RecordDataPtrInput
	// Extra Cloudflare-specific information about the record.
	Meta pulumi.StringPtrInput
	// When the record was last modified.
	ModifiedOn pulumi.StringPtrInput
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringPtrInput
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrInput
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable pulumi.BoolPtrInput
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolPtrInput
	// Settings for the DNS record.
	Settings RecordSettingsPtrInput
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayInput
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn pulumi.StringPtrInput
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64PtrInput
	// Record type.
	// Available values: "A".
	Type pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `pulumi:"comment"`
	// A valid IPv4 address.
	Content *string `pulumi:"content"`
	// Components of a CAA record.
	Data *RecordData `pulumi:"data"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name string `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority *float64 `pulumi:"priority"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied *bool `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings *RecordSettings `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags []string `pulumi:"tags"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl float64 `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type string `pulumi:"type"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringPtrInput
	// A valid IPv4 address.
	Content pulumi.StringPtrInput
	// Components of a CAA record.
	Data RecordDataPtrInput
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringInput
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrInput
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolPtrInput
	// Settings for the DNS record.
	Settings RecordSettingsPtrInput
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayInput
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64Input
	// Record type.
	// Available values: "A".
	Type pulumi.StringInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// Comments or notes about the DNS record. This field has no effect on DNS responses.
func (o RecordOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// When the record comment was last modified. Omitted if there is no comment.
func (o RecordOutput) CommentModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.CommentModifiedOn }).(pulumi.StringOutput)
}

// A valid IPv4 address.
func (o RecordOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// When the record was created.
func (o RecordOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Components of a CAA record.
func (o RecordOutput) Data() RecordDataOutput {
	return o.ApplyT(func(v *Record) RecordDataOutput { return v.Data }).(RecordDataOutput)
}

// Extra Cloudflare-specific information about the record.
func (o RecordOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Meta }).(pulumi.StringOutput)
}

// When the record was last modified.
func (o RecordOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// DNS record name (or @ for the zone apex) in Punycode.
func (o RecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
func (o RecordOutput) Priority() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Record) pulumi.Float64PtrOutput { return v.Priority }).(pulumi.Float64PtrOutput)
}

// Whether the record can be proxied by Cloudflare or not.
func (o RecordOutput) Proxiable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Record) pulumi.BoolOutput { return v.Proxiable }).(pulumi.BoolOutput)
}

// Whether the record is receiving the performance and security benefits of Cloudflare.
func (o RecordOutput) Proxied() pulumi.BoolOutput {
	return o.ApplyT(func(v *Record) pulumi.BoolOutput { return v.Proxied }).(pulumi.BoolOutput)
}

// Settings for the DNS record.
func (o RecordOutput) Settings() RecordSettingsOutput {
	return o.ApplyT(func(v *Record) RecordSettingsOutput { return v.Settings }).(RecordSettingsOutput)
}

// Custom tags for the DNS record. This field has no effect on DNS responses.
func (o RecordOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Record) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When the record tags were last modified. Omitted if there are no tags.
func (o RecordOutput) TagsModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.TagsModifiedOn }).(pulumi.StringOutput)
}

// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
func (o RecordOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v *Record) pulumi.Float64Output { return v.Ttl }).(pulumi.Float64Output)
}

// Record type.
// Available values: "A".
func (o RecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifier
func (o RecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
