// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Device Posture Rule resource. Device posture rules configure security policies for device posture checks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDevicePostureRule(ctx, "eaxmple", &cloudflare.DevicePostureRuleArgs{
//				AccountId:   pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:        pulumi.String("Corporate devices posture rule"),
//				Type:        pulumi.String("os_version"),
//				Description: pulumi.String("Device posture rule for corporate devices."),
//				Schedule:    pulumi.String("24h"),
//				Expiration:  pulumi.String("24h"),
//				Matches: cloudflare.DevicePostureRuleMatchArray{
//					&cloudflare.DevicePostureRuleMatchArgs{
//						Platform: pulumi.String("linux"),
//					},
//				},
//				Inputs: cloudflare.DevicePostureRuleInputTypeArray{
//					&cloudflare.DevicePostureRuleInputTypeArgs{
//						Id:               pulumi.Any(cloudflare_teams_list.Corporate_devices.Id),
//						Version:          pulumi.String("1.0.0"),
//						Operator:         pulumi.String("<"),
//						OsDistroName:     pulumi.String("ubuntu"),
//						OsDistroRevision: pulumi.String("1.0.0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/devicePostureRule:DevicePostureRule example <account_id>/<device_posture_rule_id>
//
// ```
type DevicePostureRule struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId   pulumi.StringOutput    `pulumi:"accountId"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration pulumi.StringPtrOutput                `pulumi:"expiration"`
	Inputs     DevicePostureRuleInputTypeArrayOutput `pulumi:"inputs"`
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayOutput `pulumi:"matches"`
	// Name of the device posture rule.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDevicePostureRule registers a new resource with the given unique name, arguments, and options.
func NewDevicePostureRule(ctx *pulumi.Context,
	name string, args *DevicePostureRuleArgs, opts ...pulumi.ResourceOption) (*DevicePostureRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePostureRule
	err := ctx.RegisterResource("cloudflare:index/devicePostureRule:DevicePostureRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePostureRule gets an existing DevicePostureRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePostureRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePostureRuleState, opts ...pulumi.ResourceOption) (*DevicePostureRule, error) {
	var resource DevicePostureRule
	err := ctx.ReadResource("cloudflare:index/devicePostureRule:DevicePostureRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePostureRule resources.
type devicePostureRuleState struct {
	// The account identifier to target for the resource.
	AccountId   *string `pulumi:"accountId"`
	Description *string `pulumi:"description"`
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration *string                      `pulumi:"expiration"`
	Inputs     []DevicePostureRuleInputType `pulumi:"inputs"`
	// The conditions that the client must match to run the rule.
	Matches []DevicePostureRuleMatch `pulumi:"matches"`
	// Name of the device posture rule.
	Name *string `pulumi:"name"`
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule *string `pulumi:"schedule"`
	// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
	Type *string `pulumi:"type"`
}

type DevicePostureRuleState struct {
	// The account identifier to target for the resource.
	AccountId   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration pulumi.StringPtrInput
	Inputs     DevicePostureRuleInputTypeArrayInput
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayInput
	// Name of the device posture rule.
	Name pulumi.StringPtrInput
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule pulumi.StringPtrInput
	// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
	Type pulumi.StringPtrInput
}

func (DevicePostureRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureRuleState)(nil)).Elem()
}

type devicePostureRuleArgs struct {
	// The account identifier to target for the resource.
	AccountId   string  `pulumi:"accountId"`
	Description *string `pulumi:"description"`
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration *string                      `pulumi:"expiration"`
	Inputs     []DevicePostureRuleInputType `pulumi:"inputs"`
	// The conditions that the client must match to run the rule.
	Matches []DevicePostureRuleMatch `pulumi:"matches"`
	// Name of the device posture rule.
	Name *string `pulumi:"name"`
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule *string `pulumi:"schedule"`
	// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DevicePostureRule resource.
type DevicePostureRuleArgs struct {
	// The account identifier to target for the resource.
	AccountId   pulumi.StringInput
	Description pulumi.StringPtrInput
	// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Expiration pulumi.StringPtrInput
	Inputs     DevicePostureRuleInputTypeArrayInput
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayInput
	// Name of the device posture rule.
	Name pulumi.StringPtrInput
	// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
	Schedule pulumi.StringPtrInput
	// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
	Type pulumi.StringInput
}

func (DevicePostureRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureRuleArgs)(nil)).Elem()
}

type DevicePostureRuleInput interface {
	pulumi.Input

	ToDevicePostureRuleOutput() DevicePostureRuleOutput
	ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput
}

func (*DevicePostureRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureRule)(nil)).Elem()
}

func (i *DevicePostureRule) ToDevicePostureRuleOutput() DevicePostureRuleOutput {
	return i.ToDevicePostureRuleOutputWithContext(context.Background())
}

func (i *DevicePostureRule) ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleOutput)
}

// DevicePostureRuleArrayInput is an input type that accepts DevicePostureRuleArray and DevicePostureRuleArrayOutput values.
// You can construct a concrete instance of `DevicePostureRuleArrayInput` via:
//
//	DevicePostureRuleArray{ DevicePostureRuleArgs{...} }
type DevicePostureRuleArrayInput interface {
	pulumi.Input

	ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput
	ToDevicePostureRuleArrayOutputWithContext(context.Context) DevicePostureRuleArrayOutput
}

type DevicePostureRuleArray []DevicePostureRuleInput

func (DevicePostureRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureRule)(nil)).Elem()
}

func (i DevicePostureRuleArray) ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput {
	return i.ToDevicePostureRuleArrayOutputWithContext(context.Background())
}

func (i DevicePostureRuleArray) ToDevicePostureRuleArrayOutputWithContext(ctx context.Context) DevicePostureRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleArrayOutput)
}

// DevicePostureRuleMapInput is an input type that accepts DevicePostureRuleMap and DevicePostureRuleMapOutput values.
// You can construct a concrete instance of `DevicePostureRuleMapInput` via:
//
//	DevicePostureRuleMap{ "key": DevicePostureRuleArgs{...} }
type DevicePostureRuleMapInput interface {
	pulumi.Input

	ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput
	ToDevicePostureRuleMapOutputWithContext(context.Context) DevicePostureRuleMapOutput
}

type DevicePostureRuleMap map[string]DevicePostureRuleInput

func (DevicePostureRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureRule)(nil)).Elem()
}

func (i DevicePostureRuleMap) ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput {
	return i.ToDevicePostureRuleMapOutputWithContext(context.Background())
}

func (i DevicePostureRuleMap) ToDevicePostureRuleMapOutputWithContext(ctx context.Context) DevicePostureRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleMapOutput)
}

type DevicePostureRuleOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleOutput) ToDevicePostureRuleOutput() DevicePostureRuleOutput {
	return o
}

func (o DevicePostureRuleOutput) ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput {
	return o
}

// The account identifier to target for the resource.
func (o DevicePostureRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o DevicePostureRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Expire posture results after the specified amount of time. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
func (o DevicePostureRuleOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Expiration }).(pulumi.StringPtrOutput)
}

func (o DevicePostureRuleOutput) Inputs() DevicePostureRuleInputTypeArrayOutput {
	return o.ApplyT(func(v *DevicePostureRule) DevicePostureRuleInputTypeArrayOutput { return v.Inputs }).(DevicePostureRuleInputTypeArrayOutput)
}

// The conditions that the client must match to run the rule.
func (o DevicePostureRuleOutput) Matches() DevicePostureRuleMatchArrayOutput {
	return o.ApplyT(func(v *DevicePostureRule) DevicePostureRuleMatchArrayOutput { return v.Matches }).(DevicePostureRuleMatchArrayOutput)
}

// Name of the device posture rule.
func (o DevicePostureRuleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// Tells the client when to run the device posture check. Must be in the format `1h` or `30m`. Valid units are `h` and `m`.
func (o DevicePostureRuleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The device posture rule type. Available values: `serialNumber`, `file`, `application`, `gateway`, `warp`, `domainJoined`, `osVersion`, `diskEncryption`, `firewall`, `clientCertificate`, `workspaceOne`, `uniqueClientId`, `crowdstrikeS2s`, `sentinelone`, `kolide`, `taniumS2s`, `intune`, `sentineloneS2s`.
func (o DevicePostureRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DevicePostureRuleArrayOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleArrayOutput) ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput {
	return o
}

func (o DevicePostureRuleArrayOutput) ToDevicePostureRuleArrayOutputWithContext(ctx context.Context) DevicePostureRuleArrayOutput {
	return o
}

func (o DevicePostureRuleArrayOutput) Index(i pulumi.IntInput) DevicePostureRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePostureRule {
		return vs[0].([]*DevicePostureRule)[vs[1].(int)]
	}).(DevicePostureRuleOutput)
}

type DevicePostureRuleMapOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleMapOutput) ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput {
	return o
}

func (o DevicePostureRuleMapOutput) ToDevicePostureRuleMapOutputWithContext(ctx context.Context) DevicePostureRuleMapOutput {
	return o
}

func (o DevicePostureRuleMapOutput) MapIndex(k pulumi.StringInput) DevicePostureRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePostureRule {
		return vs[0].(map[string]*DevicePostureRule)[vs[1].(string)]
	}).(DevicePostureRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleInput)(nil)).Elem(), &DevicePostureRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleArrayInput)(nil)).Elem(), DevicePostureRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleMapInput)(nil)).Elem(), DevicePostureRuleMap{})
	pulumi.RegisterOutputType(DevicePostureRuleOutput{})
	pulumi.RegisterOutputType(DevicePostureRuleArrayOutput{})
	pulumi.RegisterOutputType(DevicePostureRuleMapOutput{})
}
