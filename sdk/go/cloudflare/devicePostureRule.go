// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/devicePostureRule:DevicePostureRule example '<account_id>/<rule_id>'
// ```
//
// Deprecated: cloudflare.index/deviceposturerule.DevicePostureRule has been deprecated in favor of cloudflare.index/zerotrustdeviceposturerule.ZeroTrustDevicePostureRule
type DevicePostureRule struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The description of the device posture rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
	Expiration pulumi.StringPtrOutput `pulumi:"expiration"`
	// The value to be checked against.
	Input DevicePostureRuleInputTypePtrOutput `pulumi:"input"`
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayOutput `pulumi:"matches"`
	// The name of the device posture rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
	Schedule pulumi.StringPtrOutput `pulumi:"schedule"`
	// The type of device posture rule.
	// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDevicePostureRule registers a new resource with the given unique name, arguments, and options.
func NewDevicePostureRule(ctx *pulumi.Context,
	name string, args *DevicePostureRuleArgs, opts ...pulumi.ResourceOption) (*DevicePostureRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/devicePostureRule:DevicePostureRule"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePostureRule
	err := ctx.RegisterResource("cloudflare:index/devicePostureRule:DevicePostureRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePostureRule gets an existing DevicePostureRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePostureRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePostureRuleState, opts ...pulumi.ResourceOption) (*DevicePostureRule, error) {
	var resource DevicePostureRule
	err := ctx.ReadResource("cloudflare:index/devicePostureRule:DevicePostureRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePostureRule resources.
type devicePostureRuleState struct {
	AccountId *string `pulumi:"accountId"`
	// The description of the device posture rule.
	Description *string `pulumi:"description"`
	// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
	Expiration *string `pulumi:"expiration"`
	// The value to be checked against.
	Input *DevicePostureRuleInputType `pulumi:"input"`
	// The conditions that the client must match to run the rule.
	Matches []DevicePostureRuleMatch `pulumi:"matches"`
	// The name of the device posture rule.
	Name *string `pulumi:"name"`
	// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
	Schedule *string `pulumi:"schedule"`
	// The type of device posture rule.
	// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
	Type *string `pulumi:"type"`
}

type DevicePostureRuleState struct {
	AccountId pulumi.StringPtrInput
	// The description of the device posture rule.
	Description pulumi.StringPtrInput
	// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
	Expiration pulumi.StringPtrInput
	// The value to be checked against.
	Input DevicePostureRuleInputTypePtrInput
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayInput
	// The name of the device posture rule.
	Name pulumi.StringPtrInput
	// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
	Schedule pulumi.StringPtrInput
	// The type of device posture rule.
	// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
	Type pulumi.StringPtrInput
}

func (DevicePostureRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureRuleState)(nil)).Elem()
}

type devicePostureRuleArgs struct {
	AccountId string `pulumi:"accountId"`
	// The description of the device posture rule.
	Description *string `pulumi:"description"`
	// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
	Expiration *string `pulumi:"expiration"`
	// The value to be checked against.
	Input *DevicePostureRuleInputType `pulumi:"input"`
	// The conditions that the client must match to run the rule.
	Matches []DevicePostureRuleMatch `pulumi:"matches"`
	// The name of the device posture rule.
	Name string `pulumi:"name"`
	// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
	Schedule *string `pulumi:"schedule"`
	// The type of device posture rule.
	// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DevicePostureRule resource.
type DevicePostureRuleArgs struct {
	AccountId pulumi.StringInput
	// The description of the device posture rule.
	Description pulumi.StringPtrInput
	// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
	Expiration pulumi.StringPtrInput
	// The value to be checked against.
	Input DevicePostureRuleInputTypePtrInput
	// The conditions that the client must match to run the rule.
	Matches DevicePostureRuleMatchArrayInput
	// The name of the device posture rule.
	Name pulumi.StringInput
	// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
	Schedule pulumi.StringPtrInput
	// The type of device posture rule.
	// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
	Type pulumi.StringInput
}

func (DevicePostureRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureRuleArgs)(nil)).Elem()
}

type DevicePostureRuleInput interface {
	pulumi.Input

	ToDevicePostureRuleOutput() DevicePostureRuleOutput
	ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput
}

func (*DevicePostureRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureRule)(nil)).Elem()
}

func (i *DevicePostureRule) ToDevicePostureRuleOutput() DevicePostureRuleOutput {
	return i.ToDevicePostureRuleOutputWithContext(context.Background())
}

func (i *DevicePostureRule) ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleOutput)
}

// DevicePostureRuleArrayInput is an input type that accepts DevicePostureRuleArray and DevicePostureRuleArrayOutput values.
// You can construct a concrete instance of `DevicePostureRuleArrayInput` via:
//
//	DevicePostureRuleArray{ DevicePostureRuleArgs{...} }
type DevicePostureRuleArrayInput interface {
	pulumi.Input

	ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput
	ToDevicePostureRuleArrayOutputWithContext(context.Context) DevicePostureRuleArrayOutput
}

type DevicePostureRuleArray []DevicePostureRuleInput

func (DevicePostureRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureRule)(nil)).Elem()
}

func (i DevicePostureRuleArray) ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput {
	return i.ToDevicePostureRuleArrayOutputWithContext(context.Background())
}

func (i DevicePostureRuleArray) ToDevicePostureRuleArrayOutputWithContext(ctx context.Context) DevicePostureRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleArrayOutput)
}

// DevicePostureRuleMapInput is an input type that accepts DevicePostureRuleMap and DevicePostureRuleMapOutput values.
// You can construct a concrete instance of `DevicePostureRuleMapInput` via:
//
//	DevicePostureRuleMap{ "key": DevicePostureRuleArgs{...} }
type DevicePostureRuleMapInput interface {
	pulumi.Input

	ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput
	ToDevicePostureRuleMapOutputWithContext(context.Context) DevicePostureRuleMapOutput
}

type DevicePostureRuleMap map[string]DevicePostureRuleInput

func (DevicePostureRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureRule)(nil)).Elem()
}

func (i DevicePostureRuleMap) ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput {
	return i.ToDevicePostureRuleMapOutputWithContext(context.Background())
}

func (i DevicePostureRuleMap) ToDevicePostureRuleMapOutputWithContext(ctx context.Context) DevicePostureRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureRuleMapOutput)
}

type DevicePostureRuleOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleOutput) ToDevicePostureRuleOutput() DevicePostureRuleOutput {
	return o
}

func (o DevicePostureRuleOutput) ToDevicePostureRuleOutputWithContext(ctx context.Context) DevicePostureRuleOutput {
	return o
}

func (o DevicePostureRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The description of the device posture rule.
func (o DevicePostureRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Sets the expiration time for a posture check result. If empty, the result remains valid until it is overwritten by new data from the WARP client.
func (o DevicePostureRuleOutput) Expiration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Expiration }).(pulumi.StringPtrOutput)
}

// The value to be checked against.
func (o DevicePostureRuleOutput) Input() DevicePostureRuleInputTypePtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) DevicePostureRuleInputTypePtrOutput { return v.Input }).(DevicePostureRuleInputTypePtrOutput)
}

// The conditions that the client must match to run the rule.
func (o DevicePostureRuleOutput) Matches() DevicePostureRuleMatchArrayOutput {
	return o.ApplyT(func(v *DevicePostureRule) DevicePostureRuleMatchArrayOutput { return v.Matches }).(DevicePostureRuleMatchArrayOutput)
}

// The name of the device posture rule.
func (o DevicePostureRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Polling frequency for the WARP client posture check. Default: `5m` (poll every five minutes). Minimum: `1m`.
func (o DevicePostureRuleOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringPtrOutput { return v.Schedule }).(pulumi.StringPtrOutput)
}

// The type of device posture rule.
// Available values: "file", "application", "tanium", "gateway", "warp", "disk*encryption", "serial*number", "sentinelone", "carbonblack", "firewall", "os*version", "domain*joined", "client*certificate", "client*certificate*v2", "unique*client*id", "kolide", "tanium*s2s", "crowdstrike*s2s", "intune", "workspace*one", "sentinelone*s2s", "custom*s2s".
func (o DevicePostureRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DevicePostureRuleArrayOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleArrayOutput) ToDevicePostureRuleArrayOutput() DevicePostureRuleArrayOutput {
	return o
}

func (o DevicePostureRuleArrayOutput) ToDevicePostureRuleArrayOutputWithContext(ctx context.Context) DevicePostureRuleArrayOutput {
	return o
}

func (o DevicePostureRuleArrayOutput) Index(i pulumi.IntInput) DevicePostureRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePostureRule {
		return vs[0].([]*DevicePostureRule)[vs[1].(int)]
	}).(DevicePostureRuleOutput)
}

type DevicePostureRuleMapOutput struct{ *pulumi.OutputState }

func (DevicePostureRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureRule)(nil)).Elem()
}

func (o DevicePostureRuleMapOutput) ToDevicePostureRuleMapOutput() DevicePostureRuleMapOutput {
	return o
}

func (o DevicePostureRuleMapOutput) ToDevicePostureRuleMapOutputWithContext(ctx context.Context) DevicePostureRuleMapOutput {
	return o
}

func (o DevicePostureRuleMapOutput) MapIndex(k pulumi.StringInput) DevicePostureRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePostureRule {
		return vs[0].(map[string]*DevicePostureRule)[vs[1].(string)]
	}).(DevicePostureRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleInput)(nil)).Elem(), &DevicePostureRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleArrayInput)(nil)).Elem(), DevicePostureRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureRuleMapInput)(nil)).Elem(), DevicePostureRuleMap{})
	pulumi.RegisterOutputType(DevicePostureRuleOutput{})
	pulumi.RegisterOutputType(DevicePostureRuleArrayOutput{})
	pulumi.RegisterOutputType(DevicePostureRuleMapOutput{})
}
