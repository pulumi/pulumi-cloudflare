// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewArgoSmartRouting(ctx, "example_argo_smart_routing", &cloudflare.ArgoSmartRoutingArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Value:  pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/argoSmartRouting:ArgoSmartRouting example '<zone_id>'
// ```
type ArgoSmartRouting struct {
	pulumi.CustomResourceState

	// Enables Argo Smart Routing.
	// Available values: "on", "off".
	Value pulumi.StringOutput `pulumi:"value"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewArgoSmartRouting registers a new resource with the given unique name, arguments, and options.
func NewArgoSmartRouting(ctx *pulumi.Context,
	name string, args *ArgoSmartRoutingArgs, opts ...pulumi.ResourceOption) (*ArgoSmartRouting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ArgoSmartRouting
	err := ctx.RegisterResource("cloudflare:index/argoSmartRouting:ArgoSmartRouting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArgoSmartRouting gets an existing ArgoSmartRouting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArgoSmartRouting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArgoSmartRoutingState, opts ...pulumi.ResourceOption) (*ArgoSmartRouting, error) {
	var resource ArgoSmartRouting
	err := ctx.ReadResource("cloudflare:index/argoSmartRouting:ArgoSmartRouting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArgoSmartRouting resources.
type argoSmartRoutingState struct {
	// Enables Argo Smart Routing.
	// Available values: "on", "off".
	Value *string `pulumi:"value"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type ArgoSmartRoutingState struct {
	// Enables Argo Smart Routing.
	// Available values: "on", "off".
	Value pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (ArgoSmartRoutingState) ElementType() reflect.Type {
	return reflect.TypeOf((*argoSmartRoutingState)(nil)).Elem()
}

type argoSmartRoutingArgs struct {
	// Enables Argo Smart Routing.
	// Available values: "on", "off".
	Value string `pulumi:"value"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ArgoSmartRouting resource.
type ArgoSmartRoutingArgs struct {
	// Enables Argo Smart Routing.
	// Available values: "on", "off".
	Value pulumi.StringInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (ArgoSmartRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argoSmartRoutingArgs)(nil)).Elem()
}

type ArgoSmartRoutingInput interface {
	pulumi.Input

	ToArgoSmartRoutingOutput() ArgoSmartRoutingOutput
	ToArgoSmartRoutingOutputWithContext(ctx context.Context) ArgoSmartRoutingOutput
}

func (*ArgoSmartRouting) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoSmartRouting)(nil)).Elem()
}

func (i *ArgoSmartRouting) ToArgoSmartRoutingOutput() ArgoSmartRoutingOutput {
	return i.ToArgoSmartRoutingOutputWithContext(context.Background())
}

func (i *ArgoSmartRouting) ToArgoSmartRoutingOutputWithContext(ctx context.Context) ArgoSmartRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoSmartRoutingOutput)
}

// ArgoSmartRoutingArrayInput is an input type that accepts ArgoSmartRoutingArray and ArgoSmartRoutingArrayOutput values.
// You can construct a concrete instance of `ArgoSmartRoutingArrayInput` via:
//
//	ArgoSmartRoutingArray{ ArgoSmartRoutingArgs{...} }
type ArgoSmartRoutingArrayInput interface {
	pulumi.Input

	ToArgoSmartRoutingArrayOutput() ArgoSmartRoutingArrayOutput
	ToArgoSmartRoutingArrayOutputWithContext(context.Context) ArgoSmartRoutingArrayOutput
}

type ArgoSmartRoutingArray []ArgoSmartRoutingInput

func (ArgoSmartRoutingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoSmartRouting)(nil)).Elem()
}

func (i ArgoSmartRoutingArray) ToArgoSmartRoutingArrayOutput() ArgoSmartRoutingArrayOutput {
	return i.ToArgoSmartRoutingArrayOutputWithContext(context.Background())
}

func (i ArgoSmartRoutingArray) ToArgoSmartRoutingArrayOutputWithContext(ctx context.Context) ArgoSmartRoutingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoSmartRoutingArrayOutput)
}

// ArgoSmartRoutingMapInput is an input type that accepts ArgoSmartRoutingMap and ArgoSmartRoutingMapOutput values.
// You can construct a concrete instance of `ArgoSmartRoutingMapInput` via:
//
//	ArgoSmartRoutingMap{ "key": ArgoSmartRoutingArgs{...} }
type ArgoSmartRoutingMapInput interface {
	pulumi.Input

	ToArgoSmartRoutingMapOutput() ArgoSmartRoutingMapOutput
	ToArgoSmartRoutingMapOutputWithContext(context.Context) ArgoSmartRoutingMapOutput
}

type ArgoSmartRoutingMap map[string]ArgoSmartRoutingInput

func (ArgoSmartRoutingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoSmartRouting)(nil)).Elem()
}

func (i ArgoSmartRoutingMap) ToArgoSmartRoutingMapOutput() ArgoSmartRoutingMapOutput {
	return i.ToArgoSmartRoutingMapOutputWithContext(context.Background())
}

func (i ArgoSmartRoutingMap) ToArgoSmartRoutingMapOutputWithContext(ctx context.Context) ArgoSmartRoutingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoSmartRoutingMapOutput)
}

type ArgoSmartRoutingOutput struct{ *pulumi.OutputState }

func (ArgoSmartRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoSmartRouting)(nil)).Elem()
}

func (o ArgoSmartRoutingOutput) ToArgoSmartRoutingOutput() ArgoSmartRoutingOutput {
	return o
}

func (o ArgoSmartRoutingOutput) ToArgoSmartRoutingOutputWithContext(ctx context.Context) ArgoSmartRoutingOutput {
	return o
}

// Enables Argo Smart Routing.
// Available values: "on", "off".
func (o ArgoSmartRoutingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ArgoSmartRouting) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Identifier
func (o ArgoSmartRoutingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArgoSmartRouting) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ArgoSmartRoutingArrayOutput struct{ *pulumi.OutputState }

func (ArgoSmartRoutingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoSmartRouting)(nil)).Elem()
}

func (o ArgoSmartRoutingArrayOutput) ToArgoSmartRoutingArrayOutput() ArgoSmartRoutingArrayOutput {
	return o
}

func (o ArgoSmartRoutingArrayOutput) ToArgoSmartRoutingArrayOutputWithContext(ctx context.Context) ArgoSmartRoutingArrayOutput {
	return o
}

func (o ArgoSmartRoutingArrayOutput) Index(i pulumi.IntInput) ArgoSmartRoutingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ArgoSmartRouting {
		return vs[0].([]*ArgoSmartRouting)[vs[1].(int)]
	}).(ArgoSmartRoutingOutput)
}

type ArgoSmartRoutingMapOutput struct{ *pulumi.OutputState }

func (ArgoSmartRoutingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoSmartRouting)(nil)).Elem()
}

func (o ArgoSmartRoutingMapOutput) ToArgoSmartRoutingMapOutput() ArgoSmartRoutingMapOutput {
	return o
}

func (o ArgoSmartRoutingMapOutput) ToArgoSmartRoutingMapOutputWithContext(ctx context.Context) ArgoSmartRoutingMapOutput {
	return o
}

func (o ArgoSmartRoutingMapOutput) MapIndex(k pulumi.StringInput) ArgoSmartRoutingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ArgoSmartRouting {
		return vs[0].(map[string]*ArgoSmartRouting)[vs[1].(string)]
	}).(ArgoSmartRoutingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoSmartRoutingInput)(nil)).Elem(), &ArgoSmartRouting{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoSmartRoutingArrayInput)(nil)).Elem(), ArgoSmartRoutingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoSmartRoutingMapInput)(nil)).Elem(), ArgoSmartRoutingMap{})
	pulumi.RegisterOutputType(ArgoSmartRoutingOutput{})
	pulumi.RegisterOutputType(ArgoSmartRoutingArrayOutput{})
	pulumi.RegisterOutputType(ArgoSmartRoutingMapOutput{})
}
