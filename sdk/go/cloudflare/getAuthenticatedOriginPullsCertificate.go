// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupAuthenticatedOriginPullsCertificate(ctx, &cloudflare.LookupAuthenticatedOriginPullsCertificateArgs{
//				ZoneId:        "023e105f4ecef8ad9ca31a8372d0c353",
//				CertificateId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuthenticatedOriginPullsCertificate(ctx *pulumi.Context, args *LookupAuthenticatedOriginPullsCertificateArgs, opts ...pulumi.InvokeOption) (*LookupAuthenticatedOriginPullsCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthenticatedOriginPullsCertificateResult
	err := ctx.Invoke("cloudflare:index/getAuthenticatedOriginPullsCertificate:getAuthenticatedOriginPullsCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthenticatedOriginPullsCertificate.
type LookupAuthenticatedOriginPullsCertificateArgs struct {
	// Identifier
	CertificateId string `pulumi:"certificateId"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getAuthenticatedOriginPullsCertificate.
type LookupAuthenticatedOriginPullsCertificateResult struct {
	// The zone's leaf certificate.
	Certificate string `pulumi:"certificate"`
	// Identifier
	CertificateId string `pulumi:"certificateId"`
	// Indicates whether zone-level authenticated origin pulls is enabled.
	Enabled bool `pulumi:"enabled"`
	// When the certificate from the authority expires.
	ExpiresOn string `pulumi:"expiresOn"`
	// Identifier
	Id string `pulumi:"id"`
	// The certificate authority that issued the certificate.
	Issuer string `pulumi:"issuer"`
	// The zone's private key.
	PrivateKey string `pulumi:"privateKey"`
	// The type of hash used for the certificate.
	Signature string `pulumi:"signature"`
	// Status of the certificate activation.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status string `pulumi:"status"`
	// This is the time the certificate was uploaded.
	UploadedOn string `pulumi:"uploadedOn"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupAuthenticatedOriginPullsCertificateOutput(ctx *pulumi.Context, args LookupAuthenticatedOriginPullsCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupAuthenticatedOriginPullsCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAuthenticatedOriginPullsCertificateResultOutput, error) {
			args := v.(LookupAuthenticatedOriginPullsCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAuthenticatedOriginPullsCertificate:getAuthenticatedOriginPullsCertificate", args, LookupAuthenticatedOriginPullsCertificateResultOutput{}, options).(LookupAuthenticatedOriginPullsCertificateResultOutput), nil
		}).(LookupAuthenticatedOriginPullsCertificateResultOutput)
}

// A collection of arguments for invoking getAuthenticatedOriginPullsCertificate.
type LookupAuthenticatedOriginPullsCertificateOutputArgs struct {
	// Identifier
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupAuthenticatedOriginPullsCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatedOriginPullsCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getAuthenticatedOriginPullsCertificate.
type LookupAuthenticatedOriginPullsCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupAuthenticatedOriginPullsCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatedOriginPullsCertificateResult)(nil)).Elem()
}

func (o LookupAuthenticatedOriginPullsCertificateResultOutput) ToLookupAuthenticatedOriginPullsCertificateResultOutput() LookupAuthenticatedOriginPullsCertificateResultOutput {
	return o
}

func (o LookupAuthenticatedOriginPullsCertificateResultOutput) ToLookupAuthenticatedOriginPullsCertificateResultOutputWithContext(ctx context.Context) LookupAuthenticatedOriginPullsCertificateResultOutput {
	return o
}

// The zone's leaf certificate.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Identifier
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// Indicates whether zone-level authenticated origin pulls is enabled.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// When the certificate from the authority expires.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

// Identifier
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// The zone's private key.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// The type of hash used for the certificate.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.Signature }).(pulumi.StringOutput)
}

// Status of the certificate activation.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.Status }).(pulumi.StringOutput)
}

// This is the time the certificate was uploaded.
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) UploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.UploadedOn }).(pulumi.StringOutput)
}

// Identifier
func (o LookupAuthenticatedOriginPullsCertificateResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsCertificateResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthenticatedOriginPullsCertificateResultOutput{})
}
