// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type ZoneDnsSettings struct {
	pulumi.CustomResourceState

	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames pulumi.BoolPtrOutput `pulumi:"flattenAllCnames"`
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns pulumi.BoolPtrOutput `pulumi:"foundationDns"`
	// Settings for this internal zone.
	InternalDns ZoneDnsSettingsInternalDnsOutput `pulumi:"internalDns"`
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider pulumi.BoolPtrOutput `pulumi:"multiProvider"`
	// Settings determining the nameservers through which the zone should be available.
	Nameservers ZoneDnsSettingsNameserversOutput `pulumi:"nameservers"`
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl pulumi.Float64PtrOutput `pulumi:"nsTtl"`
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides pulumi.BoolPtrOutput `pulumi:"secondaryOverrides"`
	// Components of the zone's SOA record.
	Soa ZoneDnsSettingsSoaOutput `pulumi:"soa"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode pulumi.StringPtrOutput `pulumi:"zoneMode"`
}

// NewZoneDnsSettings registers a new resource with the given unique name, arguments, and options.
func NewZoneDnsSettings(ctx *pulumi.Context,
	name string, args *ZoneDnsSettingsArgs, opts ...pulumi.ResourceOption) (*ZoneDnsSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneDnsSettings
	err := ctx.RegisterResource("cloudflare:index/zoneDnsSettings:ZoneDnsSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneDnsSettings gets an existing ZoneDnsSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneDnsSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneDnsSettingsState, opts ...pulumi.ResourceOption) (*ZoneDnsSettings, error) {
	var resource ZoneDnsSettings
	err := ctx.ReadResource("cloudflare:index/zoneDnsSettings:ZoneDnsSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneDnsSettings resources.
type zoneDnsSettingsState struct {
	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames *bool `pulumi:"flattenAllCnames"`
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns *bool `pulumi:"foundationDns"`
	// Settings for this internal zone.
	InternalDns *ZoneDnsSettingsInternalDns `pulumi:"internalDns"`
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider *bool `pulumi:"multiProvider"`
	// Settings determining the nameservers through which the zone should be available.
	Nameservers *ZoneDnsSettingsNameservers `pulumi:"nameservers"`
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl *float64 `pulumi:"nsTtl"`
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides *bool `pulumi:"secondaryOverrides"`
	// Components of the zone's SOA record.
	Soa *ZoneDnsSettingsSoa `pulumi:"soa"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode *string `pulumi:"zoneMode"`
}

type ZoneDnsSettingsState struct {
	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames pulumi.BoolPtrInput
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns pulumi.BoolPtrInput
	// Settings for this internal zone.
	InternalDns ZoneDnsSettingsInternalDnsPtrInput
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider pulumi.BoolPtrInput
	// Settings determining the nameservers through which the zone should be available.
	Nameservers ZoneDnsSettingsNameserversPtrInput
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl pulumi.Float64PtrInput
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides pulumi.BoolPtrInput
	// Components of the zone's SOA record.
	Soa ZoneDnsSettingsSoaPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode pulumi.StringPtrInput
}

func (ZoneDnsSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneDnsSettingsState)(nil)).Elem()
}

type zoneDnsSettingsArgs struct {
	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames *bool `pulumi:"flattenAllCnames"`
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns *bool `pulumi:"foundationDns"`
	// Settings for this internal zone.
	InternalDns *ZoneDnsSettingsInternalDns `pulumi:"internalDns"`
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider *bool `pulumi:"multiProvider"`
	// Settings determining the nameservers through which the zone should be available.
	Nameservers *ZoneDnsSettingsNameservers `pulumi:"nameservers"`
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl *float64 `pulumi:"nsTtl"`
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides *bool `pulumi:"secondaryOverrides"`
	// Components of the zone's SOA record.
	Soa *ZoneDnsSettingsSoa `pulumi:"soa"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode *string `pulumi:"zoneMode"`
}

// The set of arguments for constructing a ZoneDnsSettings resource.
type ZoneDnsSettingsArgs struct {
	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames pulumi.BoolPtrInput
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns pulumi.BoolPtrInput
	// Settings for this internal zone.
	InternalDns ZoneDnsSettingsInternalDnsPtrInput
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider pulumi.BoolPtrInput
	// Settings determining the nameservers through which the zone should be available.
	Nameservers ZoneDnsSettingsNameserversPtrInput
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl pulumi.Float64PtrInput
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides pulumi.BoolPtrInput
	// Components of the zone's SOA record.
	Soa ZoneDnsSettingsSoaPtrInput
	// Identifier
	ZoneId pulumi.StringInput
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode pulumi.StringPtrInput
}

func (ZoneDnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneDnsSettingsArgs)(nil)).Elem()
}

type ZoneDnsSettingsInput interface {
	pulumi.Input

	ToZoneDnsSettingsOutput() ZoneDnsSettingsOutput
	ToZoneDnsSettingsOutputWithContext(ctx context.Context) ZoneDnsSettingsOutput
}

func (*ZoneDnsSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneDnsSettings)(nil)).Elem()
}

func (i *ZoneDnsSettings) ToZoneDnsSettingsOutput() ZoneDnsSettingsOutput {
	return i.ToZoneDnsSettingsOutputWithContext(context.Background())
}

func (i *ZoneDnsSettings) ToZoneDnsSettingsOutputWithContext(ctx context.Context) ZoneDnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnsSettingsOutput)
}

// ZoneDnsSettingsArrayInput is an input type that accepts ZoneDnsSettingsArray and ZoneDnsSettingsArrayOutput values.
// You can construct a concrete instance of `ZoneDnsSettingsArrayInput` via:
//
//	ZoneDnsSettingsArray{ ZoneDnsSettingsArgs{...} }
type ZoneDnsSettingsArrayInput interface {
	pulumi.Input

	ToZoneDnsSettingsArrayOutput() ZoneDnsSettingsArrayOutput
	ToZoneDnsSettingsArrayOutputWithContext(context.Context) ZoneDnsSettingsArrayOutput
}

type ZoneDnsSettingsArray []ZoneDnsSettingsInput

func (ZoneDnsSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneDnsSettings)(nil)).Elem()
}

func (i ZoneDnsSettingsArray) ToZoneDnsSettingsArrayOutput() ZoneDnsSettingsArrayOutput {
	return i.ToZoneDnsSettingsArrayOutputWithContext(context.Background())
}

func (i ZoneDnsSettingsArray) ToZoneDnsSettingsArrayOutputWithContext(ctx context.Context) ZoneDnsSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnsSettingsArrayOutput)
}

// ZoneDnsSettingsMapInput is an input type that accepts ZoneDnsSettingsMap and ZoneDnsSettingsMapOutput values.
// You can construct a concrete instance of `ZoneDnsSettingsMapInput` via:
//
//	ZoneDnsSettingsMap{ "key": ZoneDnsSettingsArgs{...} }
type ZoneDnsSettingsMapInput interface {
	pulumi.Input

	ToZoneDnsSettingsMapOutput() ZoneDnsSettingsMapOutput
	ToZoneDnsSettingsMapOutputWithContext(context.Context) ZoneDnsSettingsMapOutput
}

type ZoneDnsSettingsMap map[string]ZoneDnsSettingsInput

func (ZoneDnsSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneDnsSettings)(nil)).Elem()
}

func (i ZoneDnsSettingsMap) ToZoneDnsSettingsMapOutput() ZoneDnsSettingsMapOutput {
	return i.ToZoneDnsSettingsMapOutputWithContext(context.Background())
}

func (i ZoneDnsSettingsMap) ToZoneDnsSettingsMapOutputWithContext(ctx context.Context) ZoneDnsSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnsSettingsMapOutput)
}

type ZoneDnsSettingsOutput struct{ *pulumi.OutputState }

func (ZoneDnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneDnsSettings)(nil)).Elem()
}

func (o ZoneDnsSettingsOutput) ToZoneDnsSettingsOutput() ZoneDnsSettingsOutput {
	return o
}

func (o ZoneDnsSettingsOutput) ToZoneDnsSettingsOutputWithContext(ctx context.Context) ZoneDnsSettingsOutput {
	return o
}

// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
func (o ZoneDnsSettingsOutput) FlattenAllCnames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.BoolPtrOutput { return v.FlattenAllCnames }).(pulumi.BoolPtrOutput)
}

// Whether to enable Foundation DNS Advanced Nameservers on the zone.
func (o ZoneDnsSettingsOutput) FoundationDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.BoolPtrOutput { return v.FoundationDns }).(pulumi.BoolPtrOutput)
}

// Settings for this internal zone.
func (o ZoneDnsSettingsOutput) InternalDns() ZoneDnsSettingsInternalDnsOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) ZoneDnsSettingsInternalDnsOutput { return v.InternalDns }).(ZoneDnsSettingsInternalDnsOutput)
}

// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
func (o ZoneDnsSettingsOutput) MultiProvider() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.BoolPtrOutput { return v.MultiProvider }).(pulumi.BoolPtrOutput)
}

// Settings determining the nameservers through which the zone should be available.
func (o ZoneDnsSettingsOutput) Nameservers() ZoneDnsSettingsNameserversOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) ZoneDnsSettingsNameserversOutput { return v.Nameservers }).(ZoneDnsSettingsNameserversOutput)
}

// The time to live (TTL) of the zone's nameserver (NS) records.
func (o ZoneDnsSettingsOutput) NsTtl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.Float64PtrOutput { return v.NsTtl }).(pulumi.Float64PtrOutput)
}

// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
func (o ZoneDnsSettingsOutput) SecondaryOverrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.BoolPtrOutput { return v.SecondaryOverrides }).(pulumi.BoolPtrOutput)
}

// Components of the zone's SOA record.
func (o ZoneDnsSettingsOutput) Soa() ZoneDnsSettingsSoaOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) ZoneDnsSettingsSoaOutput { return v.Soa }).(ZoneDnsSettingsSoaOutput)
}

// Identifier
func (o ZoneDnsSettingsOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// Whether the zone mode is a regular or CDN/DNS only zone.
// Available values: "standard", "cdn*only", "dns*only".
func (o ZoneDnsSettingsOutput) ZoneMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneDnsSettings) pulumi.StringPtrOutput { return v.ZoneMode }).(pulumi.StringPtrOutput)
}

type ZoneDnsSettingsArrayOutput struct{ *pulumi.OutputState }

func (ZoneDnsSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneDnsSettings)(nil)).Elem()
}

func (o ZoneDnsSettingsArrayOutput) ToZoneDnsSettingsArrayOutput() ZoneDnsSettingsArrayOutput {
	return o
}

func (o ZoneDnsSettingsArrayOutput) ToZoneDnsSettingsArrayOutputWithContext(ctx context.Context) ZoneDnsSettingsArrayOutput {
	return o
}

func (o ZoneDnsSettingsArrayOutput) Index(i pulumi.IntInput) ZoneDnsSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneDnsSettings {
		return vs[0].([]*ZoneDnsSettings)[vs[1].(int)]
	}).(ZoneDnsSettingsOutput)
}

type ZoneDnsSettingsMapOutput struct{ *pulumi.OutputState }

func (ZoneDnsSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneDnsSettings)(nil)).Elem()
}

func (o ZoneDnsSettingsMapOutput) ToZoneDnsSettingsMapOutput() ZoneDnsSettingsMapOutput {
	return o
}

func (o ZoneDnsSettingsMapOutput) ToZoneDnsSettingsMapOutputWithContext(ctx context.Context) ZoneDnsSettingsMapOutput {
	return o
}

func (o ZoneDnsSettingsMapOutput) MapIndex(k pulumi.StringInput) ZoneDnsSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneDnsSettings {
		return vs[0].(map[string]*ZoneDnsSettings)[vs[1].(string)]
	}).(ZoneDnsSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnsSettingsInput)(nil)).Elem(), &ZoneDnsSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnsSettingsArrayInput)(nil)).Elem(), ZoneDnsSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnsSettingsMapInput)(nil)).Elem(), ZoneDnsSettingsMap{})
	pulumi.RegisterOutputType(ZoneDnsSettingsOutput{})
	pulumi.RegisterOutputType(ZoneDnsSettingsArrayOutput{})
	pulumi.RegisterOutputType(ZoneDnsSettingsMapOutput{})
}
