// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupDnsZoneTransfersIncoming(ctx, &cloudflare.LookupDnsZoneTransfersIncomingArgs{
//				ZoneId: "269d8f4853475ca241c4e730be286b20",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsZoneTransfersIncoming(ctx *pulumi.Context, args *LookupDnsZoneTransfersIncomingArgs, opts ...pulumi.InvokeOption) (*LookupDnsZoneTransfersIncomingResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsZoneTransfersIncomingResult
	err := ctx.Invoke("cloudflare:index/getDnsZoneTransfersIncoming:getDnsZoneTransfersIncoming", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsZoneTransfersIncoming.
type LookupDnsZoneTransfersIncomingArgs struct {
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getDnsZoneTransfersIncoming.
type LookupDnsZoneTransfersIncomingResult struct {
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds float64 `pulumi:"autoRefreshSeconds"`
	// The time for a specific event.
	CheckedTime string `pulumi:"checkedTime"`
	// The time for a specific event.
	CreatedTime string `pulumi:"createdTime"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The time for a specific event.
	ModifiedTime string `pulumi:"modifiedTime"`
	// Zone name.
	Name string `pulumi:"name"`
	// A list of peer tags.
	Peers []string `pulumi:"peers"`
	// The serial number of the SOA for the given zone.
	SoaSerial float64 `pulumi:"soaSerial"`
	ZoneId    string  `pulumi:"zoneId"`
}

func LookupDnsZoneTransfersIncomingOutput(ctx *pulumi.Context, args LookupDnsZoneTransfersIncomingOutputArgs, opts ...pulumi.InvokeOption) LookupDnsZoneTransfersIncomingResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsZoneTransfersIncomingResultOutput, error) {
			args := v.(LookupDnsZoneTransfersIncomingArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getDnsZoneTransfersIncoming:getDnsZoneTransfersIncoming", args, LookupDnsZoneTransfersIncomingResultOutput{}, options).(LookupDnsZoneTransfersIncomingResultOutput), nil
		}).(LookupDnsZoneTransfersIncomingResultOutput)
}

// A collection of arguments for invoking getDnsZoneTransfersIncoming.
type LookupDnsZoneTransfersIncomingOutputArgs struct {
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupDnsZoneTransfersIncomingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersIncomingArgs)(nil)).Elem()
}

// A collection of values returned by getDnsZoneTransfersIncoming.
type LookupDnsZoneTransfersIncomingResultOutput struct{ *pulumi.OutputState }

func (LookupDnsZoneTransfersIncomingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersIncomingResult)(nil)).Elem()
}

func (o LookupDnsZoneTransfersIncomingResultOutput) ToLookupDnsZoneTransfersIncomingResultOutput() LookupDnsZoneTransfersIncomingResultOutput {
	return o
}

func (o LookupDnsZoneTransfersIncomingResultOutput) ToLookupDnsZoneTransfersIncomingResultOutputWithContext(ctx context.Context) LookupDnsZoneTransfersIncomingResultOutput {
	return o
}

// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
// Not applicable for primary zones.
func (o LookupDnsZoneTransfersIncomingResultOutput) AutoRefreshSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) float64 { return v.AutoRefreshSeconds }).(pulumi.Float64Output)
}

// The time for a specific event.
func (o LookupDnsZoneTransfersIncomingResultOutput) CheckedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.CheckedTime }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o LookupDnsZoneTransfersIncomingResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupDnsZoneTransfersIncomingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.Id }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o LookupDnsZoneTransfersIncomingResultOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Zone name.
func (o LookupDnsZoneTransfersIncomingResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of peer tags.
func (o LookupDnsZoneTransfersIncomingResultOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) []string { return v.Peers }).(pulumi.StringArrayOutput)
}

// The serial number of the SOA for the given zone.
func (o LookupDnsZoneTransfersIncomingResultOutput) SoaSerial() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) float64 { return v.SoaSerial }).(pulumi.Float64Output)
}

func (o LookupDnsZoneTransfersIncomingResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersIncomingResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsZoneTransfersIncomingResultOutput{})
}
