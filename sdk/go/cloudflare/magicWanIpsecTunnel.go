// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicWanIpsecTunnel(ctx, "example_magic_wan_ipsec_tunnel", &cloudflare.MagicWanIpsecTunnelArgs{
//				AccountId:          pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				CloudflareEndpoint: pulumi.String("203.0.113.1"),
//				InterfaceAddress:   pulumi.String("192.0.2.0/31"),
//				Name:               pulumi.String("IPsec_1"),
//				CustomerEndpoint:   pulumi.String("203.0.113.1"),
//				Description:        pulumi.String("Tunnel for ISP X"),
//				HealthCheck: &cloudflare.MagicWanIpsecTunnelHealthCheckArgs{
//					Direction: pulumi.String("bidirectional"),
//					Enabled:   pulumi.Bool(true),
//					Rate:      pulumi.String("low"),
//					Target: &cloudflare.MagicWanIpsecTunnelHealthCheckTargetArgs{
//						Saved: pulumi.String("203.0.113.1"),
//					},
//					Type: pulumi.String("request"),
//				},
//				Psk:              pulumi.String("O3bwKSjnaoCxDoUxjcq4Rk8ZKkezQUiy"),
//				ReplayProtection: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MagicWanIpsecTunnel struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringOutput `pulumi:"cloudflareEndpoint"`
	// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
	CustomerEndpoint pulumi.StringPtrOutput `pulumi:"customerEndpoint"`
	// An optional description forthe IPsec tunnel.
	Description pulumi.StringPtrOutput               `pulumi:"description"`
	HealthCheck MagicWanIpsecTunnelHealthCheckOutput `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress pulumi.StringOutput                  `pulumi:"interfaceAddress"`
	IpsecTunnel      MagicWanIpsecTunnelIpsecTunnelOutput `pulumi:"ipsecTunnel"`
	// Identifier
	IpsecTunnelId       pulumi.StringPtrOutput                       `pulumi:"ipsecTunnelId"`
	IpsecTunnels        MagicWanIpsecTunnelIpsecTunnelArrayOutput    `pulumi:"ipsecTunnels"`
	Modified            pulumi.BoolOutput                            `pulumi:"modified"`
	ModifiedIpsecTunnel MagicWanIpsecTunnelModifiedIpsecTunnelOutput `pulumi:"modifiedIpsecTunnel"`
	// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
	Name pulumi.StringOutput `pulumi:"name"`
	// A randomly generated or provided string for use in the IPsec tunnel.
	Psk pulumi.StringPtrOutput `pulumi:"psk"`
	// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
	ReplayProtection pulumi.BoolOutput `pulumi:"replayProtection"`
}

// NewMagicWanIpsecTunnel registers a new resource with the given unique name, arguments, and options.
func NewMagicWanIpsecTunnel(ctx *pulumi.Context,
	name string, args *MagicWanIpsecTunnelArgs, opts ...pulumi.ResourceOption) (*MagicWanIpsecTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.CloudflareEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CloudflareEndpoint'")
	}
	if args.InterfaceAddress == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceAddress'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/ipsecTunnel:IpsecTunnel"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicWanIpsecTunnel
	err := ctx.RegisterResource("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicWanIpsecTunnel gets an existing MagicWanIpsecTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicWanIpsecTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicWanIpsecTunnelState, opts ...pulumi.ResourceOption) (*MagicWanIpsecTunnel, error) {
	var resource MagicWanIpsecTunnel
	err := ctx.ReadResource("cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicWanIpsecTunnel resources.
type magicWanIpsecTunnelState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint *string `pulumi:"cloudflareEndpoint"`
	// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
	CustomerEndpoint *string `pulumi:"customerEndpoint"`
	// An optional description forthe IPsec tunnel.
	Description *string                         `pulumi:"description"`
	HealthCheck *MagicWanIpsecTunnelHealthCheck `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress *string                         `pulumi:"interfaceAddress"`
	IpsecTunnel      *MagicWanIpsecTunnelIpsecTunnel `pulumi:"ipsecTunnel"`
	// Identifier
	IpsecTunnelId       *string                                 `pulumi:"ipsecTunnelId"`
	IpsecTunnels        []MagicWanIpsecTunnelIpsecTunnel        `pulumi:"ipsecTunnels"`
	Modified            *bool                                   `pulumi:"modified"`
	ModifiedIpsecTunnel *MagicWanIpsecTunnelModifiedIpsecTunnel `pulumi:"modifiedIpsecTunnel"`
	// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
	Name *string `pulumi:"name"`
	// A randomly generated or provided string for use in the IPsec tunnel.
	Psk *string `pulumi:"psk"`
	// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
	ReplayProtection *bool `pulumi:"replayProtection"`
}

type MagicWanIpsecTunnelState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// The IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringPtrInput
	// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
	CustomerEndpoint pulumi.StringPtrInput
	// An optional description forthe IPsec tunnel.
	Description pulumi.StringPtrInput
	HealthCheck MagicWanIpsecTunnelHealthCheckPtrInput
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress pulumi.StringPtrInput
	IpsecTunnel      MagicWanIpsecTunnelIpsecTunnelPtrInput
	// Identifier
	IpsecTunnelId       pulumi.StringPtrInput
	IpsecTunnels        MagicWanIpsecTunnelIpsecTunnelArrayInput
	Modified            pulumi.BoolPtrInput
	ModifiedIpsecTunnel MagicWanIpsecTunnelModifiedIpsecTunnelPtrInput
	// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
	Name pulumi.StringPtrInput
	// A randomly generated or provided string for use in the IPsec tunnel.
	Psk pulumi.StringPtrInput
	// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
	ReplayProtection pulumi.BoolPtrInput
}

func (MagicWanIpsecTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanIpsecTunnelState)(nil)).Elem()
}

type magicWanIpsecTunnelArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint string `pulumi:"cloudflareEndpoint"`
	// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
	CustomerEndpoint *string `pulumi:"customerEndpoint"`
	// An optional description forthe IPsec tunnel.
	Description *string                         `pulumi:"description"`
	HealthCheck *MagicWanIpsecTunnelHealthCheck `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress string `pulumi:"interfaceAddress"`
	// Identifier
	IpsecTunnelId *string `pulumi:"ipsecTunnelId"`
	// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
	Name string `pulumi:"name"`
	// A randomly generated or provided string for use in the IPsec tunnel.
	Psk *string `pulumi:"psk"`
	// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
	ReplayProtection *bool `pulumi:"replayProtection"`
}

// The set of arguments for constructing a MagicWanIpsecTunnel resource.
type MagicWanIpsecTunnelArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// The IP address assigned to the Cloudflare side of the IPsec tunnel.
	CloudflareEndpoint pulumi.StringInput
	// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
	CustomerEndpoint pulumi.StringPtrInput
	// An optional description forthe IPsec tunnel.
	Description pulumi.StringPtrInput
	HealthCheck MagicWanIpsecTunnelHealthCheckPtrInput
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress pulumi.StringInput
	// Identifier
	IpsecTunnelId pulumi.StringPtrInput
	// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
	Name pulumi.StringInput
	// A randomly generated or provided string for use in the IPsec tunnel.
	Psk pulumi.StringPtrInput
	// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
	ReplayProtection pulumi.BoolPtrInput
}

func (MagicWanIpsecTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanIpsecTunnelArgs)(nil)).Elem()
}

type MagicWanIpsecTunnelInput interface {
	pulumi.Input

	ToMagicWanIpsecTunnelOutput() MagicWanIpsecTunnelOutput
	ToMagicWanIpsecTunnelOutputWithContext(ctx context.Context) MagicWanIpsecTunnelOutput
}

func (*MagicWanIpsecTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanIpsecTunnel)(nil)).Elem()
}

func (i *MagicWanIpsecTunnel) ToMagicWanIpsecTunnelOutput() MagicWanIpsecTunnelOutput {
	return i.ToMagicWanIpsecTunnelOutputWithContext(context.Background())
}

func (i *MagicWanIpsecTunnel) ToMagicWanIpsecTunnelOutputWithContext(ctx context.Context) MagicWanIpsecTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanIpsecTunnelOutput)
}

// MagicWanIpsecTunnelArrayInput is an input type that accepts MagicWanIpsecTunnelArray and MagicWanIpsecTunnelArrayOutput values.
// You can construct a concrete instance of `MagicWanIpsecTunnelArrayInput` via:
//
//	MagicWanIpsecTunnelArray{ MagicWanIpsecTunnelArgs{...} }
type MagicWanIpsecTunnelArrayInput interface {
	pulumi.Input

	ToMagicWanIpsecTunnelArrayOutput() MagicWanIpsecTunnelArrayOutput
	ToMagicWanIpsecTunnelArrayOutputWithContext(context.Context) MagicWanIpsecTunnelArrayOutput
}

type MagicWanIpsecTunnelArray []MagicWanIpsecTunnelInput

func (MagicWanIpsecTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanIpsecTunnel)(nil)).Elem()
}

func (i MagicWanIpsecTunnelArray) ToMagicWanIpsecTunnelArrayOutput() MagicWanIpsecTunnelArrayOutput {
	return i.ToMagicWanIpsecTunnelArrayOutputWithContext(context.Background())
}

func (i MagicWanIpsecTunnelArray) ToMagicWanIpsecTunnelArrayOutputWithContext(ctx context.Context) MagicWanIpsecTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanIpsecTunnelArrayOutput)
}

// MagicWanIpsecTunnelMapInput is an input type that accepts MagicWanIpsecTunnelMap and MagicWanIpsecTunnelMapOutput values.
// You can construct a concrete instance of `MagicWanIpsecTunnelMapInput` via:
//
//	MagicWanIpsecTunnelMap{ "key": MagicWanIpsecTunnelArgs{...} }
type MagicWanIpsecTunnelMapInput interface {
	pulumi.Input

	ToMagicWanIpsecTunnelMapOutput() MagicWanIpsecTunnelMapOutput
	ToMagicWanIpsecTunnelMapOutputWithContext(context.Context) MagicWanIpsecTunnelMapOutput
}

type MagicWanIpsecTunnelMap map[string]MagicWanIpsecTunnelInput

func (MagicWanIpsecTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanIpsecTunnel)(nil)).Elem()
}

func (i MagicWanIpsecTunnelMap) ToMagicWanIpsecTunnelMapOutput() MagicWanIpsecTunnelMapOutput {
	return i.ToMagicWanIpsecTunnelMapOutputWithContext(context.Background())
}

func (i MagicWanIpsecTunnelMap) ToMagicWanIpsecTunnelMapOutputWithContext(ctx context.Context) MagicWanIpsecTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanIpsecTunnelMapOutput)
}

type MagicWanIpsecTunnelOutput struct{ *pulumi.OutputState }

func (MagicWanIpsecTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanIpsecTunnel)(nil)).Elem()
}

func (o MagicWanIpsecTunnelOutput) ToMagicWanIpsecTunnelOutput() MagicWanIpsecTunnelOutput {
	return o
}

func (o MagicWanIpsecTunnelOutput) ToMagicWanIpsecTunnelOutputWithContext(ctx context.Context) MagicWanIpsecTunnelOutput {
	return o
}

// Identifier
func (o MagicWanIpsecTunnelOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The IP address assigned to the Cloudflare side of the IPsec tunnel.
func (o MagicWanIpsecTunnelOutput) CloudflareEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringOutput { return v.CloudflareEndpoint }).(pulumi.StringOutput)
}

// The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
func (o MagicWanIpsecTunnelOutput) CustomerEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringPtrOutput { return v.CustomerEndpoint }).(pulumi.StringPtrOutput)
}

// An optional description forthe IPsec tunnel.
func (o MagicWanIpsecTunnelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MagicWanIpsecTunnelOutput) HealthCheck() MagicWanIpsecTunnelHealthCheckOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) MagicWanIpsecTunnelHealthCheckOutput { return v.HealthCheck }).(MagicWanIpsecTunnelHealthCheckOutput)
}

// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
func (o MagicWanIpsecTunnelOutput) InterfaceAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringOutput { return v.InterfaceAddress }).(pulumi.StringOutput)
}

func (o MagicWanIpsecTunnelOutput) IpsecTunnel() MagicWanIpsecTunnelIpsecTunnelOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) MagicWanIpsecTunnelIpsecTunnelOutput { return v.IpsecTunnel }).(MagicWanIpsecTunnelIpsecTunnelOutput)
}

// Identifier
func (o MagicWanIpsecTunnelOutput) IpsecTunnelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringPtrOutput { return v.IpsecTunnelId }).(pulumi.StringPtrOutput)
}

func (o MagicWanIpsecTunnelOutput) IpsecTunnels() MagicWanIpsecTunnelIpsecTunnelArrayOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) MagicWanIpsecTunnelIpsecTunnelArrayOutput { return v.IpsecTunnels }).(MagicWanIpsecTunnelIpsecTunnelArrayOutput)
}

func (o MagicWanIpsecTunnelOutput) Modified() pulumi.BoolOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.BoolOutput { return v.Modified }).(pulumi.BoolOutput)
}

func (o MagicWanIpsecTunnelOutput) ModifiedIpsecTunnel() MagicWanIpsecTunnelModifiedIpsecTunnelOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) MagicWanIpsecTunnelModifiedIpsecTunnelOutput {
		return v.ModifiedIpsecTunnel
	}).(MagicWanIpsecTunnelModifiedIpsecTunnelOutput)
}

// The name of the IPsec tunnel. The name cannot share a name with other tunnels.
func (o MagicWanIpsecTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A randomly generated or provided string for use in the IPsec tunnel.
func (o MagicWanIpsecTunnelOutput) Psk() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.StringPtrOutput { return v.Psk }).(pulumi.StringPtrOutput)
}

// If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
func (o MagicWanIpsecTunnelOutput) ReplayProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MagicWanIpsecTunnel) pulumi.BoolOutput { return v.ReplayProtection }).(pulumi.BoolOutput)
}

type MagicWanIpsecTunnelArrayOutput struct{ *pulumi.OutputState }

func (MagicWanIpsecTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanIpsecTunnel)(nil)).Elem()
}

func (o MagicWanIpsecTunnelArrayOutput) ToMagicWanIpsecTunnelArrayOutput() MagicWanIpsecTunnelArrayOutput {
	return o
}

func (o MagicWanIpsecTunnelArrayOutput) ToMagicWanIpsecTunnelArrayOutputWithContext(ctx context.Context) MagicWanIpsecTunnelArrayOutput {
	return o
}

func (o MagicWanIpsecTunnelArrayOutput) Index(i pulumi.IntInput) MagicWanIpsecTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicWanIpsecTunnel {
		return vs[0].([]*MagicWanIpsecTunnel)[vs[1].(int)]
	}).(MagicWanIpsecTunnelOutput)
}

type MagicWanIpsecTunnelMapOutput struct{ *pulumi.OutputState }

func (MagicWanIpsecTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanIpsecTunnel)(nil)).Elem()
}

func (o MagicWanIpsecTunnelMapOutput) ToMagicWanIpsecTunnelMapOutput() MagicWanIpsecTunnelMapOutput {
	return o
}

func (o MagicWanIpsecTunnelMapOutput) ToMagicWanIpsecTunnelMapOutputWithContext(ctx context.Context) MagicWanIpsecTunnelMapOutput {
	return o
}

func (o MagicWanIpsecTunnelMapOutput) MapIndex(k pulumi.StringInput) MagicWanIpsecTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicWanIpsecTunnel {
		return vs[0].(map[string]*MagicWanIpsecTunnel)[vs[1].(string)]
	}).(MagicWanIpsecTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanIpsecTunnelInput)(nil)).Elem(), &MagicWanIpsecTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanIpsecTunnelArrayInput)(nil)).Elem(), MagicWanIpsecTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanIpsecTunnelMapInput)(nil)).Elem(), MagicWanIpsecTunnelMap{})
	pulumi.RegisterOutputType(MagicWanIpsecTunnelOutput{})
	pulumi.RegisterOutputType(MagicWanIpsecTunnelArrayOutput{})
	pulumi.RegisterOutputType(MagicWanIpsecTunnelMapOutput{})
}
