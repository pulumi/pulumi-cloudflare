// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewCertificatePack(ctx, "example_certificate_pack", &cloudflare.CertificatePackArgs{
//				ZoneId:               pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				CertificateAuthority: pulumi.String("google"),
//				Hosts: pulumi.StringArray{
//					pulumi.String("example.com"),
//					pulumi.String("*.example.com"),
//					pulumi.String("www.example.com"),
//				},
//				Type:               pulumi.String("advanced"),
//				ValidationMethod:   pulumi.String("txt"),
//				ValidityDays:       pulumi.Int(14),
//				CloudflareBranding: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/certificatePack:CertificatePack example '<zone_id>/<certificate_pack_id>'
// ```
//
// While supported, importing isn't recommended and it is advised to replace the
//
// certificate entirely instead.
type CertificatePack struct {
	pulumi.CustomResourceState

	// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
	CertificateAuthority pulumi.StringOutput `pulumi:"certificateAuthority"`
	// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
	CloudflareBranding pulumi.BoolPtrOutput `pulumi:"cloudflareBranding"`
	// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// Status of certificate pack.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of certificate pack.
	Type pulumi.StringOutput `pulumi:"type"`
	// Validation Method selected for the order.
	ValidationMethod pulumi.StringOutput `pulumi:"validationMethod"`
	// Validity Days selected for the order.
	ValidityDays pulumi.IntOutput `pulumi:"validityDays"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCertificatePack registers a new resource with the given unique name, arguments, and options.
func NewCertificatePack(ctx *pulumi.Context,
	name string, args *CertificatePackArgs, opts ...pulumi.ResourceOption) (*CertificatePack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateAuthority == nil {
		return nil, errors.New("invalid value for required argument 'CertificateAuthority'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ValidationMethod == nil {
		return nil, errors.New("invalid value for required argument 'ValidationMethod'")
	}
	if args.ValidityDays == nil {
		return nil, errors.New("invalid value for required argument 'ValidityDays'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificatePack
	err := ctx.RegisterResource("cloudflare:index/certificatePack:CertificatePack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificatePack gets an existing CertificatePack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificatePack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificatePackState, opts ...pulumi.ResourceOption) (*CertificatePack, error) {
	var resource CertificatePack
	err := ctx.ReadResource("cloudflare:index/certificatePack:CertificatePack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificatePack resources.
type certificatePackState struct {
	// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
	CloudflareBranding *bool `pulumi:"cloudflareBranding"`
	// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
	Hosts []string `pulumi:"hosts"`
	// Status of certificate pack.
	Status *string `pulumi:"status"`
	// Type of certificate pack.
	Type *string `pulumi:"type"`
	// Validation Method selected for the order.
	ValidationMethod *string `pulumi:"validationMethod"`
	// Validity Days selected for the order.
	ValidityDays *int `pulumi:"validityDays"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type CertificatePackState struct {
	// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
	CertificateAuthority pulumi.StringPtrInput
	// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
	CloudflareBranding pulumi.BoolPtrInput
	// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
	Hosts pulumi.StringArrayInput
	// Status of certificate pack.
	Status pulumi.StringPtrInput
	// Type of certificate pack.
	Type pulumi.StringPtrInput
	// Validation Method selected for the order.
	ValidationMethod pulumi.StringPtrInput
	// Validity Days selected for the order.
	ValidityDays pulumi.IntPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (CertificatePackState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePackState)(nil)).Elem()
}

type certificatePackArgs struct {
	// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
	CertificateAuthority string `pulumi:"certificateAuthority"`
	// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
	CloudflareBranding *bool `pulumi:"cloudflareBranding"`
	// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
	Hosts []string `pulumi:"hosts"`
	// Type of certificate pack.
	Type string `pulumi:"type"`
	// Validation Method selected for the order.
	ValidationMethod string `pulumi:"validationMethod"`
	// Validity Days selected for the order.
	ValidityDays int `pulumi:"validityDays"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CertificatePack resource.
type CertificatePackArgs struct {
	// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
	CertificateAuthority pulumi.StringInput
	// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
	CloudflareBranding pulumi.BoolPtrInput
	// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
	Hosts pulumi.StringArrayInput
	// Type of certificate pack.
	Type pulumi.StringInput
	// Validation Method selected for the order.
	ValidationMethod pulumi.StringInput
	// Validity Days selected for the order.
	ValidityDays pulumi.IntInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (CertificatePackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificatePackArgs)(nil)).Elem()
}

type CertificatePackInput interface {
	pulumi.Input

	ToCertificatePackOutput() CertificatePackOutput
	ToCertificatePackOutputWithContext(ctx context.Context) CertificatePackOutput
}

func (*CertificatePack) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePack)(nil)).Elem()
}

func (i *CertificatePack) ToCertificatePackOutput() CertificatePackOutput {
	return i.ToCertificatePackOutputWithContext(context.Background())
}

func (i *CertificatePack) ToCertificatePackOutputWithContext(ctx context.Context) CertificatePackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePackOutput)
}

// CertificatePackArrayInput is an input type that accepts CertificatePackArray and CertificatePackArrayOutput values.
// You can construct a concrete instance of `CertificatePackArrayInput` via:
//
//	CertificatePackArray{ CertificatePackArgs{...} }
type CertificatePackArrayInput interface {
	pulumi.Input

	ToCertificatePackArrayOutput() CertificatePackArrayOutput
	ToCertificatePackArrayOutputWithContext(context.Context) CertificatePackArrayOutput
}

type CertificatePackArray []CertificatePackInput

func (CertificatePackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePack)(nil)).Elem()
}

func (i CertificatePackArray) ToCertificatePackArrayOutput() CertificatePackArrayOutput {
	return i.ToCertificatePackArrayOutputWithContext(context.Background())
}

func (i CertificatePackArray) ToCertificatePackArrayOutputWithContext(ctx context.Context) CertificatePackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePackArrayOutput)
}

// CertificatePackMapInput is an input type that accepts CertificatePackMap and CertificatePackMapOutput values.
// You can construct a concrete instance of `CertificatePackMapInput` via:
//
//	CertificatePackMap{ "key": CertificatePackArgs{...} }
type CertificatePackMapInput interface {
	pulumi.Input

	ToCertificatePackMapOutput() CertificatePackMapOutput
	ToCertificatePackMapOutputWithContext(context.Context) CertificatePackMapOutput
}

type CertificatePackMap map[string]CertificatePackInput

func (CertificatePackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePack)(nil)).Elem()
}

func (i CertificatePackMap) ToCertificatePackMapOutput() CertificatePackMapOutput {
	return i.ToCertificatePackMapOutputWithContext(context.Background())
}

func (i CertificatePackMap) ToCertificatePackMapOutputWithContext(ctx context.Context) CertificatePackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePackMapOutput)
}

type CertificatePackOutput struct{ *pulumi.OutputState }

func (CertificatePackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificatePack)(nil)).Elem()
}

func (o CertificatePackOutput) ToCertificatePackOutput() CertificatePackOutput {
	return o
}

func (o CertificatePackOutput) ToCertificatePackOutputWithContext(ctx context.Context) CertificatePackOutput {
	return o
}

// Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
func (o CertificatePackOutput) CertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringOutput { return v.CertificateAuthority }).(pulumi.StringOutput)
}

// Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
func (o CertificatePackOutput) CloudflareBranding() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.BoolPtrOutput { return v.CloudflareBranding }).(pulumi.BoolPtrOutput)
}

// Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
func (o CertificatePackOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Status of certificate pack.
func (o CertificatePackOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of certificate pack.
func (o CertificatePackOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Validation Method selected for the order.
func (o CertificatePackOutput) ValidationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringOutput { return v.ValidationMethod }).(pulumi.StringOutput)
}

// Validity Days selected for the order.
func (o CertificatePackOutput) ValidityDays() pulumi.IntOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.IntOutput { return v.ValidityDays }).(pulumi.IntOutput)
}

// Identifier
func (o CertificatePackOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificatePack) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CertificatePackArrayOutput struct{ *pulumi.OutputState }

func (CertificatePackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificatePack)(nil)).Elem()
}

func (o CertificatePackArrayOutput) ToCertificatePackArrayOutput() CertificatePackArrayOutput {
	return o
}

func (o CertificatePackArrayOutput) ToCertificatePackArrayOutputWithContext(ctx context.Context) CertificatePackArrayOutput {
	return o
}

func (o CertificatePackArrayOutput) Index(i pulumi.IntInput) CertificatePackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificatePack {
		return vs[0].([]*CertificatePack)[vs[1].(int)]
	}).(CertificatePackOutput)
}

type CertificatePackMapOutput struct{ *pulumi.OutputState }

func (CertificatePackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificatePack)(nil)).Elem()
}

func (o CertificatePackMapOutput) ToCertificatePackMapOutput() CertificatePackMapOutput {
	return o
}

func (o CertificatePackMapOutput) ToCertificatePackMapOutputWithContext(ctx context.Context) CertificatePackMapOutput {
	return o
}

func (o CertificatePackMapOutput) MapIndex(k pulumi.StringInput) CertificatePackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificatePack {
		return vs[0].(map[string]*CertificatePack)[vs[1].(string)]
	}).(CertificatePackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePackInput)(nil)).Elem(), &CertificatePack{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePackArrayInput)(nil)).Elem(), CertificatePackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatePackMapInput)(nil)).Elem(), CertificatePackMap{})
	pulumi.RegisterOutputType(CertificatePackOutput{})
	pulumi.RegisterOutputType(CertificatePackArrayOutput{})
	pulumi.RegisterOutputType(CertificatePackMapOutput{})
}
