// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.GetAccountApiTokenPermissionGroups(ctx, &cloudflare.GetAccountApiTokenPermissionGroupsArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Name:      pulumi.StringRef("Account%20Settings%20Write"),
//				Scope:     pulumi.StringRef("com.cloudflare.api.account.zone"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAccountApiTokenPermissionGroups(ctx *pulumi.Context, args *GetAccountApiTokenPermissionGroupsArgs, opts ...pulumi.InvokeOption) (*GetAccountApiTokenPermissionGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAccountApiTokenPermissionGroupsResult
	err := ctx.Invoke("cloudflare:index/getAccountApiTokenPermissionGroups:getAccountApiTokenPermissionGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccountApiTokenPermissionGroups.
type GetAccountApiTokenPermissionGroupsArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name *string `pulumi:"name"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getAccountApiTokenPermissionGroups.
type GetAccountApiTokenPermissionGroupsResult struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name *string `pulumi:"name"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope *string `pulumi:"scope"`
}

func GetAccountApiTokenPermissionGroupsOutput(ctx *pulumi.Context, args GetAccountApiTokenPermissionGroupsOutputArgs, opts ...pulumi.InvokeOption) GetAccountApiTokenPermissionGroupsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAccountApiTokenPermissionGroupsResultOutput, error) {
			args := v.(GetAccountApiTokenPermissionGroupsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAccountApiTokenPermissionGroups:getAccountApiTokenPermissionGroups", args, GetAccountApiTokenPermissionGroupsResultOutput{}, options).(GetAccountApiTokenPermissionGroupsResultOutput), nil
		}).(GetAccountApiTokenPermissionGroupsResultOutput)
}

// A collection of arguments for invoking getAccountApiTokenPermissionGroups.
type GetAccountApiTokenPermissionGroupsOutputArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (GetAccountApiTokenPermissionGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountApiTokenPermissionGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getAccountApiTokenPermissionGroups.
type GetAccountApiTokenPermissionGroupsResultOutput struct{ *pulumi.OutputState }

func (GetAccountApiTokenPermissionGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountApiTokenPermissionGroupsResult)(nil)).Elem()
}

func (o GetAccountApiTokenPermissionGroupsResultOutput) ToGetAccountApiTokenPermissionGroupsResultOutput() GetAccountApiTokenPermissionGroupsResultOutput {
	return o
}

func (o GetAccountApiTokenPermissionGroupsResultOutput) ToGetAccountApiTokenPermissionGroupsResultOutputWithContext(ctx context.Context) GetAccountApiTokenPermissionGroupsResultOutput {
	return o
}

// Account identifier tag.
func (o GetAccountApiTokenPermissionGroupsResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountApiTokenPermissionGroupsResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAccountApiTokenPermissionGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountApiTokenPermissionGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filter by the name of the permission group.
// The value must be URL-encoded.
func (o GetAccountApiTokenPermissionGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountApiTokenPermissionGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Filter by the scope of the permission group.
// The value must be URL-encoded.
func (o GetAccountApiTokenPermissionGroupsResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountApiTokenPermissionGroupsResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAccountApiTokenPermissionGroupsResultOutput{})
}
