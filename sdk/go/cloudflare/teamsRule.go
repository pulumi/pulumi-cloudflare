// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/teamsRule:TeamsRule example '<account_id>/<rule_id>'
// ```
//
// Deprecated: cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy
type TeamsRule struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    pulumi.StringOutput `pulumi:"action"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Date of deletion, if any.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// The description of the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The wirefilter expression used for device posture check matching.
	DevicePosture pulumi.StringOutput `pulumi:"devicePosture"`
	// True if the rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's `schedule` configuration, if any.
	Expiration TeamsRuleExpirationOutput `pulumi:"expiration"`
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters pulumi.StringArrayOutput `pulumi:"filters"`
	// The wirefilter expression used for identity matching.
	Identity pulumi.StringOutput `pulumi:"identity"`
	// The name of the rule.
	Name       pulumi.StringOutput `pulumi:"name"`
	Precedence pulumi.IntPtrOutput `pulumi:"precedence"`
	// Additional settings that modify the rule's action.
	RuleSettings TeamsRuleRuleSettingsOutput `pulumi:"ruleSettings"`
	// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
	Schedule TeamsRuleSchedulePtrOutput `pulumi:"schedule"`
	// The wirefilter expression used for traffic matching.
	Traffic   pulumi.StringOutput `pulumi:"traffic"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// version number of the rule
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTeamsRule registers a new resource with the given unique name, arguments, and options.
func NewTeamsRule(ctx *pulumi.Context,
	name string, args *TeamsRuleArgs, opts ...pulumi.ResourceOption) (*TeamsRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/teamsRule:TeamsRule"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamsRule
	err := ctx.RegisterResource("cloudflare:index/teamsRule:TeamsRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamsRule gets an existing TeamsRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamsRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamsRuleState, opts ...pulumi.ResourceOption) (*TeamsRule, error) {
	var resource TeamsRule
	err := ctx.ReadResource("cloudflare:index/teamsRule:TeamsRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamsRule resources.
type teamsRuleState struct {
	AccountId *string `pulumi:"accountId"`
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    *string `pulumi:"action"`
	CreatedAt *string `pulumi:"createdAt"`
	// Date of deletion, if any.
	DeletedAt *string `pulumi:"deletedAt"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The wirefilter expression used for device posture check matching.
	DevicePosture *string `pulumi:"devicePosture"`
	// True if the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's `schedule` configuration, if any.
	Expiration *TeamsRuleExpiration `pulumi:"expiration"`
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters []string `pulumi:"filters"`
	// The wirefilter expression used for identity matching.
	Identity *string `pulumi:"identity"`
	// The name of the rule.
	Name       *string `pulumi:"name"`
	Precedence *int    `pulumi:"precedence"`
	// Additional settings that modify the rule's action.
	RuleSettings *TeamsRuleRuleSettings `pulumi:"ruleSettings"`
	// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
	Schedule *TeamsRuleSchedule `pulumi:"schedule"`
	// The wirefilter expression used for traffic matching.
	Traffic   *string `pulumi:"traffic"`
	UpdatedAt *string `pulumi:"updatedAt"`
	// version number of the rule
	Version *int `pulumi:"version"`
}

type TeamsRuleState struct {
	AccountId pulumi.StringPtrInput
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	// Date of deletion, if any.
	DeletedAt pulumi.StringPtrInput
	// The description of the rule.
	Description pulumi.StringPtrInput
	// The wirefilter expression used for device posture check matching.
	DevicePosture pulumi.StringPtrInput
	// True if the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's `schedule` configuration, if any.
	Expiration TeamsRuleExpirationPtrInput
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters pulumi.StringArrayInput
	// The wirefilter expression used for identity matching.
	Identity pulumi.StringPtrInput
	// The name of the rule.
	Name       pulumi.StringPtrInput
	Precedence pulumi.IntPtrInput
	// Additional settings that modify the rule's action.
	RuleSettings TeamsRuleRuleSettingsPtrInput
	// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
	Schedule TeamsRuleSchedulePtrInput
	// The wirefilter expression used for traffic matching.
	Traffic   pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
	// version number of the rule
	Version pulumi.IntPtrInput
}

func (TeamsRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsRuleState)(nil)).Elem()
}

type teamsRuleArgs struct {
	AccountId string `pulumi:"accountId"`
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action string `pulumi:"action"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// The wirefilter expression used for device posture check matching.
	DevicePosture *string `pulumi:"devicePosture"`
	// True if the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's `schedule` configuration, if any.
	Expiration *TeamsRuleExpiration `pulumi:"expiration"`
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters []string `pulumi:"filters"`
	// The wirefilter expression used for identity matching.
	Identity *string `pulumi:"identity"`
	// The name of the rule.
	Name       string `pulumi:"name"`
	Precedence *int   `pulumi:"precedence"`
	// Additional settings that modify the rule's action.
	RuleSettings *TeamsRuleRuleSettings `pulumi:"ruleSettings"`
	// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
	Schedule *TeamsRuleSchedule `pulumi:"schedule"`
	// The wirefilter expression used for traffic matching.
	Traffic *string `pulumi:"traffic"`
}

// The set of arguments for constructing a TeamsRule resource.
type TeamsRuleArgs struct {
	AccountId pulumi.StringInput
	// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action pulumi.StringInput
	// The description of the rule.
	Description pulumi.StringPtrInput
	// The wirefilter expression used for device posture check matching.
	DevicePosture pulumi.StringPtrInput
	// True if the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// The expiration time stamp and default duration of a DNS policy. Takes
	// precedence over the policy's `schedule` configuration, if any.
	Expiration TeamsRuleExpirationPtrInput
	// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters pulumi.StringArrayInput
	// The wirefilter expression used for identity matching.
	Identity pulumi.StringPtrInput
	// The name of the rule.
	Name       pulumi.StringInput
	Precedence pulumi.IntPtrInput
	// Additional settings that modify the rule's action.
	RuleSettings TeamsRuleRuleSettingsPtrInput
	// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
	Schedule TeamsRuleSchedulePtrInput
	// The wirefilter expression used for traffic matching.
	Traffic pulumi.StringPtrInput
}

func (TeamsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsRuleArgs)(nil)).Elem()
}

type TeamsRuleInput interface {
	pulumi.Input

	ToTeamsRuleOutput() TeamsRuleOutput
	ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput
}

func (*TeamsRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsRule)(nil)).Elem()
}

func (i *TeamsRule) ToTeamsRuleOutput() TeamsRuleOutput {
	return i.ToTeamsRuleOutputWithContext(context.Background())
}

func (i *TeamsRule) ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleOutput)
}

// TeamsRuleArrayInput is an input type that accepts TeamsRuleArray and TeamsRuleArrayOutput values.
// You can construct a concrete instance of `TeamsRuleArrayInput` via:
//
//	TeamsRuleArray{ TeamsRuleArgs{...} }
type TeamsRuleArrayInput interface {
	pulumi.Input

	ToTeamsRuleArrayOutput() TeamsRuleArrayOutput
	ToTeamsRuleArrayOutputWithContext(context.Context) TeamsRuleArrayOutput
}

type TeamsRuleArray []TeamsRuleInput

func (TeamsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsRule)(nil)).Elem()
}

func (i TeamsRuleArray) ToTeamsRuleArrayOutput() TeamsRuleArrayOutput {
	return i.ToTeamsRuleArrayOutputWithContext(context.Background())
}

func (i TeamsRuleArray) ToTeamsRuleArrayOutputWithContext(ctx context.Context) TeamsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleArrayOutput)
}

// TeamsRuleMapInput is an input type that accepts TeamsRuleMap and TeamsRuleMapOutput values.
// You can construct a concrete instance of `TeamsRuleMapInput` via:
//
//	TeamsRuleMap{ "key": TeamsRuleArgs{...} }
type TeamsRuleMapInput interface {
	pulumi.Input

	ToTeamsRuleMapOutput() TeamsRuleMapOutput
	ToTeamsRuleMapOutputWithContext(context.Context) TeamsRuleMapOutput
}

type TeamsRuleMap map[string]TeamsRuleInput

func (TeamsRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsRule)(nil)).Elem()
}

func (i TeamsRuleMap) ToTeamsRuleMapOutput() TeamsRuleMapOutput {
	return i.ToTeamsRuleMapOutputWithContext(context.Background())
}

func (i TeamsRuleMap) ToTeamsRuleMapOutputWithContext(ctx context.Context) TeamsRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleMapOutput)
}

type TeamsRuleOutput struct{ *pulumi.OutputState }

func (TeamsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsRule)(nil)).Elem()
}

func (o TeamsRuleOutput) ToTeamsRuleOutput() TeamsRuleOutput {
	return o
}

func (o TeamsRuleOutput) ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput {
	return o
}

func (o TeamsRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
func (o TeamsRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Date of deletion, if any.
func (o TeamsRuleOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// The description of the rule.
func (o TeamsRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The wirefilter expression used for device posture check matching.
func (o TeamsRuleOutput) DevicePosture() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.DevicePosture }).(pulumi.StringOutput)
}

// True if the rule is enabled.
func (o TeamsRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The expiration time stamp and default duration of a DNS policy. Takes
// precedence over the policy's `schedule` configuration, if any.
func (o TeamsRuleOutput) Expiration() TeamsRuleExpirationOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleExpirationOutput { return v.Expiration }).(TeamsRuleExpirationOutput)
}

// The protocol or layer to evaluate the traffic, identity, and device posture expressions.
func (o TeamsRuleOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringArrayOutput { return v.Filters }).(pulumi.StringArrayOutput)
}

// The wirefilter expression used for identity matching.
func (o TeamsRuleOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// The name of the rule.
func (o TeamsRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) Precedence() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.IntPtrOutput { return v.Precedence }).(pulumi.IntPtrOutput)
}

// Additional settings that modify the rule's action.
func (o TeamsRuleOutput) RuleSettings() TeamsRuleRuleSettingsOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleRuleSettingsOutput { return v.RuleSettings }).(TeamsRuleRuleSettingsOutput)
}

// The schedule for activating DNS policies. This does not apply to HTTP or network policies.
func (o TeamsRuleOutput) Schedule() TeamsRuleSchedulePtrOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleSchedulePtrOutput { return v.Schedule }).(TeamsRuleSchedulePtrOutput)
}

// The wirefilter expression used for traffic matching.
func (o TeamsRuleOutput) Traffic() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Traffic }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// version number of the rule
func (o TeamsRuleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TeamsRuleArrayOutput struct{ *pulumi.OutputState }

func (TeamsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsRule)(nil)).Elem()
}

func (o TeamsRuleArrayOutput) ToTeamsRuleArrayOutput() TeamsRuleArrayOutput {
	return o
}

func (o TeamsRuleArrayOutput) ToTeamsRuleArrayOutputWithContext(ctx context.Context) TeamsRuleArrayOutput {
	return o
}

func (o TeamsRuleArrayOutput) Index(i pulumi.IntInput) TeamsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamsRule {
		return vs[0].([]*TeamsRule)[vs[1].(int)]
	}).(TeamsRuleOutput)
}

type TeamsRuleMapOutput struct{ *pulumi.OutputState }

func (TeamsRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsRule)(nil)).Elem()
}

func (o TeamsRuleMapOutput) ToTeamsRuleMapOutput() TeamsRuleMapOutput {
	return o
}

func (o TeamsRuleMapOutput) ToTeamsRuleMapOutputWithContext(ctx context.Context) TeamsRuleMapOutput {
	return o
}

func (o TeamsRuleMapOutput) MapIndex(k pulumi.StringInput) TeamsRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamsRule {
		return vs[0].(map[string]*TeamsRule)[vs[1].(string)]
	}).(TeamsRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleInput)(nil)).Elem(), &TeamsRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleArrayInput)(nil)).Elem(), TeamsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleMapInput)(nil)).Elem(), TeamsRuleMap{})
	pulumi.RegisterOutputType(TeamsRuleOutput{})
	pulumi.RegisterOutputType(TeamsRuleArrayOutput{})
	pulumi.RegisterOutputType(TeamsRuleMapOutput{})
}
