// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustGatewayPolicy(ctx, "example_zero_trust_gateway_policy", &cloudflare.ZeroTrustGatewayPolicyArgs{
//				AccountId:     pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Action:        pulumi.String("allow"),
//				Name:          pulumi.String("block bad websites"),
//				Description:   pulumi.String("Block bad websites based on their host name."),
//				DevicePosture: pulumi.String("any(device_posture.checks.passed[*] in {\"1308749e-fcfb-4ebc-b051-fe022b632644\"})"),
//				Enabled:       pulumi.Bool(true),
//				Expiration: &cloudflare.ZeroTrustGatewayPolicyExpirationArgs{
//					Expires_at: "2014-01-01T05:20:20Z",
//					Duration:   pulumi.Int(10),
//				},
//				Filters: pulumi.StringArray{
//					pulumi.String("http"),
//				},
//				Identity:   pulumi.String("any(identity.groups.name[*] in {\"finance\"})"),
//				Precedence: pulumi.Int(0),
//				RuleSettings: &cloudflare.ZeroTrustGatewayPolicyRuleSettingsArgs{
//					Add_headers: map[string]interface{}{
//						"my-Next-Header": []string{
//							"foo",
//							"bar",
//						},
//						"x-Custom-Header-Name": []string{
//							"somecustomvalue",
//						},
//					},
//					Allow_child_bypass: false,
//					Audit_ssh: map[string]interface{}{
//						"commandLogging": false,
//					},
//					Biso_admin_controls: map[string]interface{}{
//						"copy":     "remote_only",
//						"dcp":      true,
//						"dd":       true,
//						"dk":       true,
//						"download": "enabled",
//						"dp":       false,
//						"du":       true,
//						"keyboard": "enabled",
//						"paste":    "enabled",
//						"printing": "enabled",
//						"upload":   "enabled",
//						"version":  "v1",
//					},
//					Block_page: map[string]interface{}{
//						"targetUri":      "https://example.com",
//						"includeContext": true,
//					},
//					Block_page_enabled: true,
//					Block_reason:       "This website is a security risk",
//					Bypass_parent_rule: false,
//					Check_session: map[string]interface{}{
//						"duration": "300s",
//						"enforce":  true,
//					},
//					Dns_resolvers: map[string]interface{}{
//						"ipv4": []map[string]interface{}{
//							map[string]interface{}{
//								"ip":                         "2.2.2.2",
//								"port":                       5053,
//								"routeThroughPrivateNetwork": true,
//								"vnetId":                     "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
//							},
//						},
//						"ipv6": []map[string]interface{}{
//							map[string]interface{}{
//								"ip":                         "2001:DB8::",
//								"port":                       5053,
//								"routeThroughPrivateNetwork": true,
//								"vnetId":                     "f174e90a-fafe-4643-bbbc-4a0ed4fc8415",
//							},
//						},
//					},
//					Egress: &cloudflare.ZeroTrustGatewayPolicyRuleSettingsEgressArgs{
//						Ipv4:         pulumi.String("192.0.2.2"),
//						Ipv4Fallback: pulumi.String("192.0.2.3"),
//						Ipv6:         pulumi.String("2001:DB8::/64"),
//					},
//					Ignore_cname_category_matches:      true,
//					Insecure_disable_dnssec_validation: false,
//					Ip_categories:                      true,
//					Ip_indicator_feeds:                 true,
//					L4override: &cloudflare.ZeroTrustGatewayPolicyRuleSettingsL4overrideArgs{
//						Ip:   pulumi.String("1.1.1.1"),
//						Port: pulumi.Int(0),
//					},
//					Notification_settings: map[string]interface{}{
//						"enabled":        true,
//						"includeContext": true,
//						"msg":            "msg",
//						"supportUrl":     "support_url",
//					},
//					Override_host: "example.com",
//					Override_ips: []string{
//						"1.1.1.1",
//						"2.2.2.2",
//					},
//					Payload_log: map[string]interface{}{
//						"enabled": true,
//					},
//					Quarantine: &cloudflare.ZeroTrustGatewayPolicyRuleSettingsQuarantineArgs{
//						FileTypes: pulumi.StringArray{
//							pulumi.String("exe"),
//						},
//					},
//					Redirect: &cloudflare.ZeroTrustGatewayPolicyRuleSettingsRedirectArgs{
//						TargetUri:            pulumi.String("https://example.com"),
//						IncludeContext:       pulumi.Bool(true),
//						PreservePathAndQuery: pulumi.Bool(true),
//					},
//					Resolve_dns_internally: map[string]interface{}{
//						"fallback": "none",
//						"viewId":   "view_id",
//					},
//					Resolve_dns_through_cloudflare: true,
//					Untrusted_cert: map[string]interface{}{
//						"action": "error",
//					},
//				},
//				Schedule: &cloudflare.ZeroTrustGatewayPolicyScheduleArgs{
//					Fri:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Mon:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Sat:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Sun:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Thu:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Time_zone: "America/New York",
//					Tue:       pulumi.String("08:00-12:30,13:30-17:00"),
//					Wed:       pulumi.String("08:00-12:30,13:30-17:00"),
//				},
//				Traffic: pulumi.String("http.request.uri matches \".*a/partial/uri.*\" and http.request.host in $01302951-49f9-47c9-a400-0297e60b6a10"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/teamsRule:TeamsRule example '<account_id>/<rule_id>'
// ```
//
// Deprecated: cloudflare.index/teamsrule.TeamsRule has been deprecated in favor of cloudflare.index/zerotrustgatewaypolicy.ZeroTrustGatewayPolicy
type TeamsRule struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    pulumi.StringOutput `pulumi:"action"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicate the date of deletion, if any.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Specify the rule description.
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	DevicePosture pulumi.StringOutput    `pulumi:"devicePosture"`
	// Specify whether the rule is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
	Expiration TeamsRuleExpirationOutput `pulumi:"expiration"`
	// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters  pulumi.StringArrayOutput `pulumi:"filters"`
	Identity pulumi.StringOutput      `pulumi:"identity"`
	// Specify the rule name.
	Name       pulumi.StringOutput `pulumi:"name"`
	Precedence pulumi.IntOutput    `pulumi:"precedence"`
	// Indicate that this rule is shared via the Orgs API and read only.
	ReadOnly     pulumi.BoolOutput           `pulumi:"readOnly"`
	RuleSettings TeamsRuleRuleSettingsOutput `pulumi:"ruleSettings"`
	// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
	Schedule TeamsRuleScheduleOutput `pulumi:"schedule"`
	// Indicate that this rule is sharable via the Orgs API.
	Sharable pulumi.BoolOutput `pulumi:"sharable"`
	// Provide the account tag of the account that created the rule.
	SourceAccount pulumi.StringOutput `pulumi:"sourceAccount"`
	Traffic       pulumi.StringOutput `pulumi:"traffic"`
	UpdatedAt     pulumi.StringOutput `pulumi:"updatedAt"`
	// Indicate the version number of the rule(read-only).
	Version pulumi.IntOutput `pulumi:"version"`
	// Indicate a warning for a misconfigured rule, if any.
	WarningStatus pulumi.StringOutput `pulumi:"warningStatus"`
}

// NewTeamsRule registers a new resource with the given unique name, arguments, and options.
func NewTeamsRule(ctx *pulumi.Context,
	name string, args *TeamsRuleArgs, opts ...pulumi.ResourceOption) (*TeamsRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/teamsRule:TeamsRule"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamsRule
	err := ctx.RegisterResource("cloudflare:index/teamsRule:TeamsRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamsRule gets an existing TeamsRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamsRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamsRuleState, opts ...pulumi.ResourceOption) (*TeamsRule, error) {
	var resource TeamsRule
	err := ctx.ReadResource("cloudflare:index/teamsRule:TeamsRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamsRule resources.
type teamsRuleState struct {
	AccountId *string `pulumi:"accountId"`
	// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    *string `pulumi:"action"`
	CreatedAt *string `pulumi:"createdAt"`
	// Indicate the date of deletion, if any.
	DeletedAt *string `pulumi:"deletedAt"`
	// Specify the rule description.
	Description   *string `pulumi:"description"`
	DevicePosture *string `pulumi:"devicePosture"`
	// Specify whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
	Expiration *TeamsRuleExpiration `pulumi:"expiration"`
	// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters  []string `pulumi:"filters"`
	Identity *string  `pulumi:"identity"`
	// Specify the rule name.
	Name       *string `pulumi:"name"`
	Precedence *int    `pulumi:"precedence"`
	// Indicate that this rule is shared via the Orgs API and read only.
	ReadOnly     *bool                  `pulumi:"readOnly"`
	RuleSettings *TeamsRuleRuleSettings `pulumi:"ruleSettings"`
	// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
	Schedule *TeamsRuleSchedule `pulumi:"schedule"`
	// Indicate that this rule is sharable via the Orgs API.
	Sharable *bool `pulumi:"sharable"`
	// Provide the account tag of the account that created the rule.
	SourceAccount *string `pulumi:"sourceAccount"`
	Traffic       *string `pulumi:"traffic"`
	UpdatedAt     *string `pulumi:"updatedAt"`
	// Indicate the version number of the rule(read-only).
	Version *int `pulumi:"version"`
	// Indicate a warning for a misconfigured rule, if any.
	WarningStatus *string `pulumi:"warningStatus"`
}

type TeamsRuleState struct {
	AccountId pulumi.StringPtrInput
	// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action    pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	// Indicate the date of deletion, if any.
	DeletedAt pulumi.StringPtrInput
	// Specify the rule description.
	Description   pulumi.StringPtrInput
	DevicePosture pulumi.StringPtrInput
	// Specify whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
	Expiration TeamsRuleExpirationPtrInput
	// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters  pulumi.StringArrayInput
	Identity pulumi.StringPtrInput
	// Specify the rule name.
	Name       pulumi.StringPtrInput
	Precedence pulumi.IntPtrInput
	// Indicate that this rule is shared via the Orgs API and read only.
	ReadOnly     pulumi.BoolPtrInput
	RuleSettings TeamsRuleRuleSettingsPtrInput
	// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
	Schedule TeamsRuleSchedulePtrInput
	// Indicate that this rule is sharable via the Orgs API.
	Sharable pulumi.BoolPtrInput
	// Provide the account tag of the account that created the rule.
	SourceAccount pulumi.StringPtrInput
	Traffic       pulumi.StringPtrInput
	UpdatedAt     pulumi.StringPtrInput
	// Indicate the version number of the rule(read-only).
	Version pulumi.IntPtrInput
	// Indicate a warning for a misconfigured rule, if any.
	WarningStatus pulumi.StringPtrInput
}

func (TeamsRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsRuleState)(nil)).Elem()
}

type teamsRuleArgs struct {
	AccountId string `pulumi:"accountId"`
	// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action string `pulumi:"action"`
	// Specify the rule description.
	Description   *string `pulumi:"description"`
	DevicePosture *string `pulumi:"devicePosture"`
	// Specify whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
	Expiration *TeamsRuleExpiration `pulumi:"expiration"`
	// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters  []string `pulumi:"filters"`
	Identity *string  `pulumi:"identity"`
	// Specify the rule name.
	Name         string                 `pulumi:"name"`
	Precedence   *int                   `pulumi:"precedence"`
	RuleSettings *TeamsRuleRuleSettings `pulumi:"ruleSettings"`
	// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
	Schedule *TeamsRuleSchedule `pulumi:"schedule"`
	Traffic  *string            `pulumi:"traffic"`
}

// The set of arguments for constructing a TeamsRule resource.
type TeamsRuleArgs struct {
	AccountId pulumi.StringInput
	// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
	// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
	Action pulumi.StringInput
	// Specify the rule description.
	Description   pulumi.StringPtrInput
	DevicePosture pulumi.StringPtrInput
	// Specify whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
	Expiration TeamsRuleExpirationPtrInput
	// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
	Filters  pulumi.StringArrayInput
	Identity pulumi.StringPtrInput
	// Specify the rule name.
	Name         pulumi.StringInput
	Precedence   pulumi.IntPtrInput
	RuleSettings TeamsRuleRuleSettingsPtrInput
	// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
	Schedule TeamsRuleSchedulePtrInput
	Traffic  pulumi.StringPtrInput
}

func (TeamsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsRuleArgs)(nil)).Elem()
}

type TeamsRuleInput interface {
	pulumi.Input

	ToTeamsRuleOutput() TeamsRuleOutput
	ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput
}

func (*TeamsRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsRule)(nil)).Elem()
}

func (i *TeamsRule) ToTeamsRuleOutput() TeamsRuleOutput {
	return i.ToTeamsRuleOutputWithContext(context.Background())
}

func (i *TeamsRule) ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleOutput)
}

// TeamsRuleArrayInput is an input type that accepts TeamsRuleArray and TeamsRuleArrayOutput values.
// You can construct a concrete instance of `TeamsRuleArrayInput` via:
//
//	TeamsRuleArray{ TeamsRuleArgs{...} }
type TeamsRuleArrayInput interface {
	pulumi.Input

	ToTeamsRuleArrayOutput() TeamsRuleArrayOutput
	ToTeamsRuleArrayOutputWithContext(context.Context) TeamsRuleArrayOutput
}

type TeamsRuleArray []TeamsRuleInput

func (TeamsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsRule)(nil)).Elem()
}

func (i TeamsRuleArray) ToTeamsRuleArrayOutput() TeamsRuleArrayOutput {
	return i.ToTeamsRuleArrayOutputWithContext(context.Background())
}

func (i TeamsRuleArray) ToTeamsRuleArrayOutputWithContext(ctx context.Context) TeamsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleArrayOutput)
}

// TeamsRuleMapInput is an input type that accepts TeamsRuleMap and TeamsRuleMapOutput values.
// You can construct a concrete instance of `TeamsRuleMapInput` via:
//
//	TeamsRuleMap{ "key": TeamsRuleArgs{...} }
type TeamsRuleMapInput interface {
	pulumi.Input

	ToTeamsRuleMapOutput() TeamsRuleMapOutput
	ToTeamsRuleMapOutputWithContext(context.Context) TeamsRuleMapOutput
}

type TeamsRuleMap map[string]TeamsRuleInput

func (TeamsRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsRule)(nil)).Elem()
}

func (i TeamsRuleMap) ToTeamsRuleMapOutput() TeamsRuleMapOutput {
	return i.ToTeamsRuleMapOutputWithContext(context.Background())
}

func (i TeamsRuleMap) ToTeamsRuleMapOutputWithContext(ctx context.Context) TeamsRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsRuleMapOutput)
}

type TeamsRuleOutput struct{ *pulumi.OutputState }

func (TeamsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsRule)(nil)).Elem()
}

func (o TeamsRuleOutput) ToTeamsRuleOutput() TeamsRuleOutput {
	return o
}

func (o TeamsRuleOutput) ToTeamsRuleOutputWithContext(ctx context.Context) TeamsRuleOutput {
	return o
}

func (o TeamsRuleOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Specify the action to perform when the associated traffic, identity, and device posture expressions either absent or evaluate to `true`.
// Available values: "on", "off", "allow", "block", "scan", "noscan", "safesearch", "ytrestricted", "isolate", "noisolate", "override", "l4Override", "egress", "resolve", "quarantine", "redirect".
func (o TeamsRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicate the date of deletion, if any.
func (o TeamsRuleOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Specify the rule description.
func (o TeamsRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TeamsRuleOutput) DevicePosture() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.DevicePosture }).(pulumi.StringOutput)
}

// Specify whether the rule is enabled.
func (o TeamsRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Defines the expiration time stamp and default duration of a DNS policy. Takes precedence over the policy's `schedule` configuration, if any. This  does not apply to HTTP or network policies. Settable only for `dns` rules.
func (o TeamsRuleOutput) Expiration() TeamsRuleExpirationOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleExpirationOutput { return v.Expiration }).(TeamsRuleExpirationOutput)
}

// Specify the protocol or layer to evaluate the traffic, identity, and device posture expressions.
func (o TeamsRuleOutput) Filters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringArrayOutput { return v.Filters }).(pulumi.StringArrayOutput)
}

func (o TeamsRuleOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Identity }).(pulumi.StringOutput)
}

// Specify the rule name.
func (o TeamsRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) Precedence() pulumi.IntOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.IntOutput { return v.Precedence }).(pulumi.IntOutput)
}

// Indicate that this rule is shared via the Orgs API and read only.
func (o TeamsRuleOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.BoolOutput { return v.ReadOnly }).(pulumi.BoolOutput)
}

func (o TeamsRuleOutput) RuleSettings() TeamsRuleRuleSettingsOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleRuleSettingsOutput { return v.RuleSettings }).(TeamsRuleRuleSettingsOutput)
}

// Defines the schedule for activating DNS policies. Settable only for `dns` and `dnsResolver` rules.
func (o TeamsRuleOutput) Schedule() TeamsRuleScheduleOutput {
	return o.ApplyT(func(v *TeamsRule) TeamsRuleScheduleOutput { return v.Schedule }).(TeamsRuleScheduleOutput)
}

// Indicate that this rule is sharable via the Orgs API.
func (o TeamsRuleOutput) Sharable() pulumi.BoolOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.BoolOutput { return v.Sharable }).(pulumi.BoolOutput)
}

// Provide the account tag of the account that created the rule.
func (o TeamsRuleOutput) SourceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.SourceAccount }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) Traffic() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.Traffic }).(pulumi.StringOutput)
}

func (o TeamsRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Indicate the version number of the rule(read-only).
func (o TeamsRuleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Indicate a warning for a misconfigured rule, if any.
func (o TeamsRuleOutput) WarningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsRule) pulumi.StringOutput { return v.WarningStatus }).(pulumi.StringOutput)
}

type TeamsRuleArrayOutput struct{ *pulumi.OutputState }

func (TeamsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsRule)(nil)).Elem()
}

func (o TeamsRuleArrayOutput) ToTeamsRuleArrayOutput() TeamsRuleArrayOutput {
	return o
}

func (o TeamsRuleArrayOutput) ToTeamsRuleArrayOutputWithContext(ctx context.Context) TeamsRuleArrayOutput {
	return o
}

func (o TeamsRuleArrayOutput) Index(i pulumi.IntInput) TeamsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamsRule {
		return vs[0].([]*TeamsRule)[vs[1].(int)]
	}).(TeamsRuleOutput)
}

type TeamsRuleMapOutput struct{ *pulumi.OutputState }

func (TeamsRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsRule)(nil)).Elem()
}

func (o TeamsRuleMapOutput) ToTeamsRuleMapOutput() TeamsRuleMapOutput {
	return o
}

func (o TeamsRuleMapOutput) ToTeamsRuleMapOutputWithContext(ctx context.Context) TeamsRuleMapOutput {
	return o
}

func (o TeamsRuleMapOutput) MapIndex(k pulumi.StringInput) TeamsRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamsRule {
		return vs[0].(map[string]*TeamsRule)[vs[1].(string)]
	}).(TeamsRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleInput)(nil)).Elem(), &TeamsRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleArrayInput)(nil)).Elem(), TeamsRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsRuleMapInput)(nil)).Elem(), TeamsRuleMap{})
	pulumi.RegisterOutputType(TeamsRuleOutput{})
	pulumi.RegisterOutputType(TeamsRuleArrayOutput{})
	pulumi.RegisterOutputType(TeamsRuleMapOutput{})
}
