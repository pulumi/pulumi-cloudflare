// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewAuthenticatedOriginPullsCertificate(ctx, "example_authenticated_origin_pulls_certificate", &cloudflare.AuthenticatedOriginPullsCertificateArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Certificate: pulumi.String(`  -----BEGIN CERTIFICATE-----
//	  MIIDtTCCAp2gAwIBAgIJAMHAwfXZ5/PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
//	  BAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX
//	  aWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF
//	  MQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50
//	  ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
//	  CgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1
//	  CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB
//	  KwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5
//	  0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI
//	  dZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2
//	  izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4
//	  9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI
//	  GKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV
//	  BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF
//	  MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2
//	  2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP
//	  Mlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG
//	  SvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq
//	  2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw
//	  YbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=
//	  -----END CERTIFICATE-----
//
// `),
//
//				PrivateKey: pulumi.String(`  -----BEGIN RSA PRIVATE KEY-----
//	  MIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG
//	  dtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn
//	  abIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid
//	  tnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py
//	  FxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE
//	  ewooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb
//	  HBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/
//	  axiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb
//	  +ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g
//	  +j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv
//	  KLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7
//	  9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo
//	  /WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu
//	  iacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9
//	  N2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe
//	  VAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB
//	  vULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U
//	  lySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR
//	  9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7
//	  mEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX
//	  dFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe
//	  PG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS
//	  fhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W
//	  qu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T
//	  lv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi
//	  -----END RSA PRIVATE KEY-----
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AuthenticatedOriginPullsCertificate struct {
	pulumi.CustomResourceState

	// The zone's leaf certificate.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Identifier.
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// Indicates whether zone-level authenticated origin pulls is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// When the certificate from the authority expires.
	ExpiresOn pulumi.StringOutput `pulumi:"expiresOn"`
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The zone's private key.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The type of hash used for the certificate.
	Signature pulumi.StringOutput `pulumi:"signature"`
	// Status of the certificate activation.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status pulumi.StringOutput `pulumi:"status"`
	// This is the time the certificate was uploaded.
	UploadedOn pulumi.StringOutput `pulumi:"uploadedOn"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAuthenticatedOriginPullsCertificate registers a new resource with the given unique name, arguments, and options.
func NewAuthenticatedOriginPullsCertificate(ctx *pulumi.Context,
	name string, args *AuthenticatedOriginPullsCertificateArgs, opts ...pulumi.ResourceOption) (*AuthenticatedOriginPullsCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthenticatedOriginPullsCertificate
	err := ctx.RegisterResource("cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticatedOriginPullsCertificate gets an existing AuthenticatedOriginPullsCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticatedOriginPullsCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticatedOriginPullsCertificateState, opts ...pulumi.ResourceOption) (*AuthenticatedOriginPullsCertificate, error) {
	var resource AuthenticatedOriginPullsCertificate
	err := ctx.ReadResource("cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticatedOriginPullsCertificate resources.
type authenticatedOriginPullsCertificateState struct {
	// The zone's leaf certificate.
	Certificate *string `pulumi:"certificate"`
	// Identifier.
	CertificateId *string `pulumi:"certificateId"`
	// Indicates whether zone-level authenticated origin pulls is enabled.
	Enabled *bool `pulumi:"enabled"`
	// When the certificate from the authority expires.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The certificate authority that issued the certificate.
	Issuer *string `pulumi:"issuer"`
	// The zone's private key.
	PrivateKey *string `pulumi:"privateKey"`
	// The type of hash used for the certificate.
	Signature *string `pulumi:"signature"`
	// Status of the certificate activation.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status *string `pulumi:"status"`
	// This is the time the certificate was uploaded.
	UploadedOn *string `pulumi:"uploadedOn"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type AuthenticatedOriginPullsCertificateState struct {
	// The zone's leaf certificate.
	Certificate pulumi.StringPtrInput
	// Identifier.
	CertificateId pulumi.StringPtrInput
	// Indicates whether zone-level authenticated origin pulls is enabled.
	Enabled pulumi.BoolPtrInput
	// When the certificate from the authority expires.
	ExpiresOn pulumi.StringPtrInput
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringPtrInput
	// The zone's private key.
	PrivateKey pulumi.StringPtrInput
	// The type of hash used for the certificate.
	Signature pulumi.StringPtrInput
	// Status of the certificate activation.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status pulumi.StringPtrInput
	// This is the time the certificate was uploaded.
	UploadedOn pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (AuthenticatedOriginPullsCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatedOriginPullsCertificateState)(nil)).Elem()
}

type authenticatedOriginPullsCertificateArgs struct {
	// The zone's leaf certificate.
	Certificate string `pulumi:"certificate"`
	// The zone's private key.
	PrivateKey string `pulumi:"privateKey"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AuthenticatedOriginPullsCertificate resource.
type AuthenticatedOriginPullsCertificateArgs struct {
	// The zone's leaf certificate.
	Certificate pulumi.StringInput
	// The zone's private key.
	PrivateKey pulumi.StringInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (AuthenticatedOriginPullsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatedOriginPullsCertificateArgs)(nil)).Elem()
}

type AuthenticatedOriginPullsCertificateInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsCertificateOutput() AuthenticatedOriginPullsCertificateOutput
	ToAuthenticatedOriginPullsCertificateOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateOutput
}

func (*AuthenticatedOriginPullsCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (i *AuthenticatedOriginPullsCertificate) ToAuthenticatedOriginPullsCertificateOutput() AuthenticatedOriginPullsCertificateOutput {
	return i.ToAuthenticatedOriginPullsCertificateOutputWithContext(context.Background())
}

func (i *AuthenticatedOriginPullsCertificate) ToAuthenticatedOriginPullsCertificateOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsCertificateOutput)
}

// AuthenticatedOriginPullsCertificateArrayInput is an input type that accepts AuthenticatedOriginPullsCertificateArray and AuthenticatedOriginPullsCertificateArrayOutput values.
// You can construct a concrete instance of `AuthenticatedOriginPullsCertificateArrayInput` via:
//
//	AuthenticatedOriginPullsCertificateArray{ AuthenticatedOriginPullsCertificateArgs{...} }
type AuthenticatedOriginPullsCertificateArrayInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsCertificateArrayOutput() AuthenticatedOriginPullsCertificateArrayOutput
	ToAuthenticatedOriginPullsCertificateArrayOutputWithContext(context.Context) AuthenticatedOriginPullsCertificateArrayOutput
}

type AuthenticatedOriginPullsCertificateArray []AuthenticatedOriginPullsCertificateInput

func (AuthenticatedOriginPullsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (i AuthenticatedOriginPullsCertificateArray) ToAuthenticatedOriginPullsCertificateArrayOutput() AuthenticatedOriginPullsCertificateArrayOutput {
	return i.ToAuthenticatedOriginPullsCertificateArrayOutputWithContext(context.Background())
}

func (i AuthenticatedOriginPullsCertificateArray) ToAuthenticatedOriginPullsCertificateArrayOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsCertificateArrayOutput)
}

// AuthenticatedOriginPullsCertificateMapInput is an input type that accepts AuthenticatedOriginPullsCertificateMap and AuthenticatedOriginPullsCertificateMapOutput values.
// You can construct a concrete instance of `AuthenticatedOriginPullsCertificateMapInput` via:
//
//	AuthenticatedOriginPullsCertificateMap{ "key": AuthenticatedOriginPullsCertificateArgs{...} }
type AuthenticatedOriginPullsCertificateMapInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsCertificateMapOutput() AuthenticatedOriginPullsCertificateMapOutput
	ToAuthenticatedOriginPullsCertificateMapOutputWithContext(context.Context) AuthenticatedOriginPullsCertificateMapOutput
}

type AuthenticatedOriginPullsCertificateMap map[string]AuthenticatedOriginPullsCertificateInput

func (AuthenticatedOriginPullsCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (i AuthenticatedOriginPullsCertificateMap) ToAuthenticatedOriginPullsCertificateMapOutput() AuthenticatedOriginPullsCertificateMapOutput {
	return i.ToAuthenticatedOriginPullsCertificateMapOutputWithContext(context.Background())
}

func (i AuthenticatedOriginPullsCertificateMap) ToAuthenticatedOriginPullsCertificateMapOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsCertificateMapOutput)
}

type AuthenticatedOriginPullsCertificateOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (o AuthenticatedOriginPullsCertificateOutput) ToAuthenticatedOriginPullsCertificateOutput() AuthenticatedOriginPullsCertificateOutput {
	return o
}

func (o AuthenticatedOriginPullsCertificateOutput) ToAuthenticatedOriginPullsCertificateOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateOutput {
	return o
}

// The zone's leaf certificate.
func (o AuthenticatedOriginPullsCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Identifier.
func (o AuthenticatedOriginPullsCertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// Indicates whether zone-level authenticated origin pulls is enabled.
func (o AuthenticatedOriginPullsCertificateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// When the certificate from the authority expires.
func (o AuthenticatedOriginPullsCertificateOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.ExpiresOn }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o AuthenticatedOriginPullsCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// The zone's private key.
func (o AuthenticatedOriginPullsCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The type of hash used for the certificate.
func (o AuthenticatedOriginPullsCertificateOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.Signature }).(pulumi.StringOutput)
}

// Status of the certificate activation.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o AuthenticatedOriginPullsCertificateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// This is the time the certificate was uploaded.
func (o AuthenticatedOriginPullsCertificateOutput) UploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.UploadedOn }).(pulumi.StringOutput)
}

// Identifier.
func (o AuthenticatedOriginPullsCertificateOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPullsCertificate) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type AuthenticatedOriginPullsCertificateArrayOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (o AuthenticatedOriginPullsCertificateArrayOutput) ToAuthenticatedOriginPullsCertificateArrayOutput() AuthenticatedOriginPullsCertificateArrayOutput {
	return o
}

func (o AuthenticatedOriginPullsCertificateArrayOutput) ToAuthenticatedOriginPullsCertificateArrayOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateArrayOutput {
	return o
}

func (o AuthenticatedOriginPullsCertificateArrayOutput) Index(i pulumi.IntInput) AuthenticatedOriginPullsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticatedOriginPullsCertificate {
		return vs[0].([]*AuthenticatedOriginPullsCertificate)[vs[1].(int)]
	}).(AuthenticatedOriginPullsCertificateOutput)
}

type AuthenticatedOriginPullsCertificateMapOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticatedOriginPullsCertificate)(nil)).Elem()
}

func (o AuthenticatedOriginPullsCertificateMapOutput) ToAuthenticatedOriginPullsCertificateMapOutput() AuthenticatedOriginPullsCertificateMapOutput {
	return o
}

func (o AuthenticatedOriginPullsCertificateMapOutput) ToAuthenticatedOriginPullsCertificateMapOutputWithContext(ctx context.Context) AuthenticatedOriginPullsCertificateMapOutput {
	return o
}

func (o AuthenticatedOriginPullsCertificateMapOutput) MapIndex(k pulumi.StringInput) AuthenticatedOriginPullsCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticatedOriginPullsCertificate {
		return vs[0].(map[string]*AuthenticatedOriginPullsCertificate)[vs[1].(string)]
	}).(AuthenticatedOriginPullsCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsCertificateInput)(nil)).Elem(), &AuthenticatedOriginPullsCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsCertificateArrayInput)(nil)).Elem(), AuthenticatedOriginPullsCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsCertificateMapInput)(nil)).Elem(), AuthenticatedOriginPullsCertificateMap{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsCertificateOutput{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsCertificateArrayOutput{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsCertificateMapOutput{})
}
