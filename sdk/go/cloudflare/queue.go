// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewQueue(ctx, "example_queue", &cloudflare.QueueArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				QueueName: pulumi.String("example-queue"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/queue:Queue example '<account_id>/<queue_id>'
// ```
type Queue struct {
	pulumi.CustomResourceState

	// A Resource identifier.
	AccountId           pulumi.StringOutput          `pulumi:"accountId"`
	Consumers           QueueConsumerTypeArrayOutput `pulumi:"consumers"`
	ConsumersTotalCount pulumi.Float64Output         `pulumi:"consumersTotalCount"`
	CreatedOn           pulumi.StringOutput          `pulumi:"createdOn"`
	ModifiedOn          pulumi.StringOutput          `pulumi:"modifiedOn"`
	Producers           QueueProducerArrayOutput     `pulumi:"producers"`
	ProducersTotalCount pulumi.Float64Output         `pulumi:"producersTotalCount"`
	QueueId             pulumi.StringOutput          `pulumi:"queueId"`
	QueueName           pulumi.StringOutput          `pulumi:"queueName"`
	Settings            QueueSettingsOutput          `pulumi:"settings"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.QueueName == nil {
		return nil, errors.New("invalid value for required argument 'QueueName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("cloudflare:index/queue:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("cloudflare:index/queue:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
	// A Resource identifier.
	AccountId           *string             `pulumi:"accountId"`
	Consumers           []QueueConsumerType `pulumi:"consumers"`
	ConsumersTotalCount *float64            `pulumi:"consumersTotalCount"`
	CreatedOn           *string             `pulumi:"createdOn"`
	ModifiedOn          *string             `pulumi:"modifiedOn"`
	Producers           []QueueProducer     `pulumi:"producers"`
	ProducersTotalCount *float64            `pulumi:"producersTotalCount"`
	QueueId             *string             `pulumi:"queueId"`
	QueueName           *string             `pulumi:"queueName"`
	Settings            *QueueSettings      `pulumi:"settings"`
}

type QueueState struct {
	// A Resource identifier.
	AccountId           pulumi.StringPtrInput
	Consumers           QueueConsumerTypeArrayInput
	ConsumersTotalCount pulumi.Float64PtrInput
	CreatedOn           pulumi.StringPtrInput
	ModifiedOn          pulumi.StringPtrInput
	Producers           QueueProducerArrayInput
	ProducersTotalCount pulumi.Float64PtrInput
	QueueId             pulumi.StringPtrInput
	QueueName           pulumi.StringPtrInput
	Settings            QueueSettingsPtrInput
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	// A Resource identifier.
	AccountId string         `pulumi:"accountId"`
	QueueName string         `pulumi:"queueName"`
	Settings  *QueueSettings `pulumi:"settings"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// A Resource identifier.
	AccountId pulumi.StringInput
	QueueName pulumi.StringInput
	Settings  QueueSettingsPtrInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

// QueueArrayInput is an input type that accepts QueueArray and QueueArrayOutput values.
// You can construct a concrete instance of `QueueArrayInput` via:
//
//	QueueArray{ QueueArgs{...} }
type QueueArrayInput interface {
	pulumi.Input

	ToQueueArrayOutput() QueueArrayOutput
	ToQueueArrayOutputWithContext(context.Context) QueueArrayOutput
}

type QueueArray []QueueInput

func (QueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (i QueueArray) ToQueueArrayOutput() QueueArrayOutput {
	return i.ToQueueArrayOutputWithContext(context.Background())
}

func (i QueueArray) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueArrayOutput)
}

// QueueMapInput is an input type that accepts QueueMap and QueueMapOutput values.
// You can construct a concrete instance of `QueueMapInput` via:
//
//	QueueMap{ "key": QueueArgs{...} }
type QueueMapInput interface {
	pulumi.Input

	ToQueueMapOutput() QueueMapOutput
	ToQueueMapOutputWithContext(context.Context) QueueMapOutput
}

type QueueMap map[string]QueueInput

func (QueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (i QueueMap) ToQueueMapOutput() QueueMapOutput {
	return i.ToQueueMapOutputWithContext(context.Background())
}

func (i QueueMap) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueMapOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

// A Resource identifier.
func (o QueueOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o QueueOutput) Consumers() QueueConsumerTypeArrayOutput {
	return o.ApplyT(func(v *Queue) QueueConsumerTypeArrayOutput { return v.Consumers }).(QueueConsumerTypeArrayOutput)
}

func (o QueueOutput) ConsumersTotalCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Queue) pulumi.Float64Output { return v.ConsumersTotalCount }).(pulumi.Float64Output)
}

func (o QueueOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o QueueOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o QueueOutput) Producers() QueueProducerArrayOutput {
	return o.ApplyT(func(v *Queue) QueueProducerArrayOutput { return v.Producers }).(QueueProducerArrayOutput)
}

func (o QueueOutput) ProducersTotalCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Queue) pulumi.Float64Output { return v.ProducersTotalCount }).(pulumi.Float64Output)
}

func (o QueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueId }).(pulumi.StringOutput)
}

func (o QueueOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.QueueName }).(pulumi.StringOutput)
}

func (o QueueOutput) Settings() QueueSettingsOutput {
	return o.ApplyT(func(v *Queue) QueueSettingsOutput { return v.Settings }).(QueueSettingsOutput)
}

type QueueArrayOutput struct{ *pulumi.OutputState }

func (QueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (o QueueArrayOutput) ToQueueArrayOutput() QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) Index(i pulumi.IntInput) QueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].([]*Queue)[vs[1].(int)]
	}).(QueueOutput)
}

type QueueMapOutput struct{ *pulumi.OutputState }

func (QueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (o QueueMapOutput) ToQueueMapOutput() QueueMapOutput {
	return o
}

func (o QueueMapOutput) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return o
}

func (o QueueMapOutput) MapIndex(k pulumi.StringInput) QueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].(map[string]*Queue)[vs[1].(string)]
	}).(QueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueArrayInput)(nil)).Elem(), QueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueMapInput)(nil)).Elem(), QueueMap{})
	pulumi.RegisterOutputType(QueueOutput{})
	pulumi.RegisterOutputType(QueueArrayOutput{})
	pulumi.RegisterOutputType(QueueMapOutput{})
}
