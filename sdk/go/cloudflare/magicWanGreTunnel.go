// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicWanGreTunnel(ctx, "example_magic_wan_gre_tunnel", &cloudflare.MagicWanGreTunnelArgs{
//				AccountId:             pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				CloudflareGreEndpoint: pulumi.String("203.0.113.1"),
//				CustomerGreEndpoint:   pulumi.String("203.0.113.1"),
//				InterfaceAddress:      pulumi.String("192.0.2.0/31"),
//				Name:                  pulumi.String("GRE_1"),
//				Description:           pulumi.String("Tunnel for ISP X"),
//				HealthCheck: &cloudflare.MagicWanGreTunnelHealthCheckArgs{
//					Direction: pulumi.String("bidirectional"),
//					Enabled:   pulumi.Bool(true),
//					Rate:      pulumi.String("low"),
//					Target: &cloudflare.MagicWanGreTunnelHealthCheckTargetArgs{
//						Saved: pulumi.String("203.0.113.1"),
//					},
//					Type: pulumi.String("request"),
//				},
//				Mtu: pulumi.Int(0),
//				Ttl: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example '<account_id>/<gre_tunnel_id>'
// ```
type MagicWanGreTunnel struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint pulumi.StringOutput `pulumi:"cloudflareGreEndpoint"`
	// The date and time the tunnel was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint pulumi.StringOutput `pulumi:"customerGreEndpoint"`
	// An optional description of the GRE tunnel.
	Description pulumi.StringPtrOutput             `pulumi:"description"`
	GreTunnel   MagicWanGreTunnelGreTunnelOutput   `pulumi:"greTunnel"`
	HealthCheck MagicWanGreTunnelHealthCheckOutput `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress  pulumi.StringOutput                      `pulumi:"interfaceAddress"`
	Modified          pulumi.BoolOutput                        `pulumi:"modified"`
	ModifiedGreTunnel MagicWanGreTunnelModifiedGreTunnelOutput `pulumi:"modifiedGreTunnel"`
	// The date and time the tunnel was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu pulumi.IntOutput `pulumi:"mtu"`
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewMagicWanGreTunnel registers a new resource with the given unique name, arguments, and options.
func NewMagicWanGreTunnel(ctx *pulumi.Context,
	name string, args *MagicWanGreTunnelArgs, opts ...pulumi.ResourceOption) (*MagicWanGreTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.CloudflareGreEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CloudflareGreEndpoint'")
	}
	if args.CustomerGreEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGreEndpoint'")
	}
	if args.InterfaceAddress == nil {
		return nil, errors.New("invalid value for required argument 'InterfaceAddress'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/greTunnel:GreTunnel"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicWanGreTunnel
	err := ctx.RegisterResource("cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicWanGreTunnel gets an existing MagicWanGreTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicWanGreTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicWanGreTunnelState, opts ...pulumi.ResourceOption) (*MagicWanGreTunnel, error) {
	var resource MagicWanGreTunnel
	err := ctx.ReadResource("cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicWanGreTunnel resources.
type magicWanGreTunnelState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint *string `pulumi:"cloudflareGreEndpoint"`
	// The date and time the tunnel was created.
	CreatedOn *string `pulumi:"createdOn"`
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint *string `pulumi:"customerGreEndpoint"`
	// An optional description of the GRE tunnel.
	Description *string                       `pulumi:"description"`
	GreTunnel   *MagicWanGreTunnelGreTunnel   `pulumi:"greTunnel"`
	HealthCheck *MagicWanGreTunnelHealthCheck `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress  *string                             `pulumi:"interfaceAddress"`
	Modified          *bool                               `pulumi:"modified"`
	ModifiedGreTunnel *MagicWanGreTunnelModifiedGreTunnel `pulumi:"modifiedGreTunnel"`
	// The date and time the tunnel was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *int `pulumi:"mtu"`
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name *string `pulumi:"name"`
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	Ttl *int `pulumi:"ttl"`
}

type MagicWanGreTunnelState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint pulumi.StringPtrInput
	// The date and time the tunnel was created.
	CreatedOn pulumi.StringPtrInput
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint pulumi.StringPtrInput
	// An optional description of the GRE tunnel.
	Description pulumi.StringPtrInput
	GreTunnel   MagicWanGreTunnelGreTunnelPtrInput
	HealthCheck MagicWanGreTunnelHealthCheckPtrInput
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress  pulumi.StringPtrInput
	Modified          pulumi.BoolPtrInput
	ModifiedGreTunnel MagicWanGreTunnelModifiedGreTunnelPtrInput
	// The date and time the tunnel was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu pulumi.IntPtrInput
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name pulumi.StringPtrInput
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	Ttl pulumi.IntPtrInput
}

func (MagicWanGreTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanGreTunnelState)(nil)).Elem()
}

type magicWanGreTunnelArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint string `pulumi:"cloudflareGreEndpoint"`
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint string `pulumi:"customerGreEndpoint"`
	// An optional description of the GRE tunnel.
	Description *string                       `pulumi:"description"`
	HealthCheck *MagicWanGreTunnelHealthCheck `pulumi:"healthCheck"`
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress string `pulumi:"interfaceAddress"`
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu *int `pulumi:"mtu"`
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name string `pulumi:"name"`
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a MagicWanGreTunnel resource.
type MagicWanGreTunnelArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// The IP address assigned to the Cloudflare side of the GRE tunnel.
	CloudflareGreEndpoint pulumi.StringInput
	// The IP address assigned to the customer side of the GRE tunnel.
	CustomerGreEndpoint pulumi.StringInput
	// An optional description of the GRE tunnel.
	Description pulumi.StringPtrInput
	HealthCheck MagicWanGreTunnelHealthCheckPtrInput
	// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
	InterfaceAddress pulumi.StringInput
	// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
	Mtu pulumi.IntPtrInput
	// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
	Name pulumi.StringInput
	// Time To Live (TTL) in number of hops of the GRE tunnel.
	Ttl pulumi.IntPtrInput
}

func (MagicWanGreTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicWanGreTunnelArgs)(nil)).Elem()
}

type MagicWanGreTunnelInput interface {
	pulumi.Input

	ToMagicWanGreTunnelOutput() MagicWanGreTunnelOutput
	ToMagicWanGreTunnelOutputWithContext(ctx context.Context) MagicWanGreTunnelOutput
}

func (*MagicWanGreTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanGreTunnel)(nil)).Elem()
}

func (i *MagicWanGreTunnel) ToMagicWanGreTunnelOutput() MagicWanGreTunnelOutput {
	return i.ToMagicWanGreTunnelOutputWithContext(context.Background())
}

func (i *MagicWanGreTunnel) ToMagicWanGreTunnelOutputWithContext(ctx context.Context) MagicWanGreTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanGreTunnelOutput)
}

// MagicWanGreTunnelArrayInput is an input type that accepts MagicWanGreTunnelArray and MagicWanGreTunnelArrayOutput values.
// You can construct a concrete instance of `MagicWanGreTunnelArrayInput` via:
//
//	MagicWanGreTunnelArray{ MagicWanGreTunnelArgs{...} }
type MagicWanGreTunnelArrayInput interface {
	pulumi.Input

	ToMagicWanGreTunnelArrayOutput() MagicWanGreTunnelArrayOutput
	ToMagicWanGreTunnelArrayOutputWithContext(context.Context) MagicWanGreTunnelArrayOutput
}

type MagicWanGreTunnelArray []MagicWanGreTunnelInput

func (MagicWanGreTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanGreTunnel)(nil)).Elem()
}

func (i MagicWanGreTunnelArray) ToMagicWanGreTunnelArrayOutput() MagicWanGreTunnelArrayOutput {
	return i.ToMagicWanGreTunnelArrayOutputWithContext(context.Background())
}

func (i MagicWanGreTunnelArray) ToMagicWanGreTunnelArrayOutputWithContext(ctx context.Context) MagicWanGreTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanGreTunnelArrayOutput)
}

// MagicWanGreTunnelMapInput is an input type that accepts MagicWanGreTunnelMap and MagicWanGreTunnelMapOutput values.
// You can construct a concrete instance of `MagicWanGreTunnelMapInput` via:
//
//	MagicWanGreTunnelMap{ "key": MagicWanGreTunnelArgs{...} }
type MagicWanGreTunnelMapInput interface {
	pulumi.Input

	ToMagicWanGreTunnelMapOutput() MagicWanGreTunnelMapOutput
	ToMagicWanGreTunnelMapOutputWithContext(context.Context) MagicWanGreTunnelMapOutput
}

type MagicWanGreTunnelMap map[string]MagicWanGreTunnelInput

func (MagicWanGreTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanGreTunnel)(nil)).Elem()
}

func (i MagicWanGreTunnelMap) ToMagicWanGreTunnelMapOutput() MagicWanGreTunnelMapOutput {
	return i.ToMagicWanGreTunnelMapOutputWithContext(context.Background())
}

func (i MagicWanGreTunnelMap) ToMagicWanGreTunnelMapOutputWithContext(ctx context.Context) MagicWanGreTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicWanGreTunnelMapOutput)
}

type MagicWanGreTunnelOutput struct{ *pulumi.OutputState }

func (MagicWanGreTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicWanGreTunnel)(nil)).Elem()
}

func (o MagicWanGreTunnelOutput) ToMagicWanGreTunnelOutput() MagicWanGreTunnelOutput {
	return o
}

func (o MagicWanGreTunnelOutput) ToMagicWanGreTunnelOutputWithContext(ctx context.Context) MagicWanGreTunnelOutput {
	return o
}

// Identifier
func (o MagicWanGreTunnelOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The IP address assigned to the Cloudflare side of the GRE tunnel.
func (o MagicWanGreTunnelOutput) CloudflareGreEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.CloudflareGreEndpoint }).(pulumi.StringOutput)
}

// The date and time the tunnel was created.
func (o MagicWanGreTunnelOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// The IP address assigned to the customer side of the GRE tunnel.
func (o MagicWanGreTunnelOutput) CustomerGreEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.CustomerGreEndpoint }).(pulumi.StringOutput)
}

// An optional description of the GRE tunnel.
func (o MagicWanGreTunnelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MagicWanGreTunnelOutput) GreTunnel() MagicWanGreTunnelGreTunnelOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) MagicWanGreTunnelGreTunnelOutput { return v.GreTunnel }).(MagicWanGreTunnelGreTunnelOutput)
}

func (o MagicWanGreTunnelOutput) HealthCheck() MagicWanGreTunnelHealthCheckOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) MagicWanGreTunnelHealthCheckOutput { return v.HealthCheck }).(MagicWanGreTunnelHealthCheckOutput)
}

// A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
func (o MagicWanGreTunnelOutput) InterfaceAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.InterfaceAddress }).(pulumi.StringOutput)
}

func (o MagicWanGreTunnelOutput) Modified() pulumi.BoolOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.BoolOutput { return v.Modified }).(pulumi.BoolOutput)
}

func (o MagicWanGreTunnelOutput) ModifiedGreTunnel() MagicWanGreTunnelModifiedGreTunnelOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) MagicWanGreTunnelModifiedGreTunnelOutput { return v.ModifiedGreTunnel }).(MagicWanGreTunnelModifiedGreTunnelOutput)
}

// The date and time the tunnel was last modified.
func (o MagicWanGreTunnelOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
func (o MagicWanGreTunnelOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.IntOutput { return v.Mtu }).(pulumi.IntOutput)
}

// The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
func (o MagicWanGreTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time To Live (TTL) in number of hops of the GRE tunnel.
func (o MagicWanGreTunnelOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *MagicWanGreTunnel) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

type MagicWanGreTunnelArrayOutput struct{ *pulumi.OutputState }

func (MagicWanGreTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicWanGreTunnel)(nil)).Elem()
}

func (o MagicWanGreTunnelArrayOutput) ToMagicWanGreTunnelArrayOutput() MagicWanGreTunnelArrayOutput {
	return o
}

func (o MagicWanGreTunnelArrayOutput) ToMagicWanGreTunnelArrayOutputWithContext(ctx context.Context) MagicWanGreTunnelArrayOutput {
	return o
}

func (o MagicWanGreTunnelArrayOutput) Index(i pulumi.IntInput) MagicWanGreTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicWanGreTunnel {
		return vs[0].([]*MagicWanGreTunnel)[vs[1].(int)]
	}).(MagicWanGreTunnelOutput)
}

type MagicWanGreTunnelMapOutput struct{ *pulumi.OutputState }

func (MagicWanGreTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicWanGreTunnel)(nil)).Elem()
}

func (o MagicWanGreTunnelMapOutput) ToMagicWanGreTunnelMapOutput() MagicWanGreTunnelMapOutput {
	return o
}

func (o MagicWanGreTunnelMapOutput) ToMagicWanGreTunnelMapOutputWithContext(ctx context.Context) MagicWanGreTunnelMapOutput {
	return o
}

func (o MagicWanGreTunnelMapOutput) MapIndex(k pulumi.StringInput) MagicWanGreTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicWanGreTunnel {
		return vs[0].(map[string]*MagicWanGreTunnel)[vs[1].(string)]
	}).(MagicWanGreTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanGreTunnelInput)(nil)).Elem(), &MagicWanGreTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanGreTunnelArrayInput)(nil)).Elem(), MagicWanGreTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicWanGreTunnelMapInput)(nil)).Elem(), MagicWanGreTunnelMap{})
	pulumi.RegisterOutputType(MagicWanGreTunnelOutput{})
	pulumi.RegisterOutputType(MagicWanGreTunnelArrayOutput{})
	pulumi.RegisterOutputType(MagicWanGreTunnelMapOutput{})
}
