// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewArgoTieredCaching(ctx, "example_argo_tiered_caching", &cloudflare.ArgoTieredCachingArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Value:  pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/argoTieredCaching:ArgoTieredCaching example '<zone_id>'
// ```
type ArgoTieredCaching struct {
	pulumi.CustomResourceState

	// Whether the setting is editable
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// Last time this setting was modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Enables Tiered Caching.
	// Available values: "on", "off".
	Value pulumi.StringOutput `pulumi:"value"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewArgoTieredCaching registers a new resource with the given unique name, arguments, and options.
func NewArgoTieredCaching(ctx *pulumi.Context,
	name string, args *ArgoTieredCachingArgs, opts ...pulumi.ResourceOption) (*ArgoTieredCaching, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ArgoTieredCaching
	err := ctx.RegisterResource("cloudflare:index/argoTieredCaching:ArgoTieredCaching", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArgoTieredCaching gets an existing ArgoTieredCaching resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArgoTieredCaching(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArgoTieredCachingState, opts ...pulumi.ResourceOption) (*ArgoTieredCaching, error) {
	var resource ArgoTieredCaching
	err := ctx.ReadResource("cloudflare:index/argoTieredCaching:ArgoTieredCaching", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArgoTieredCaching resources.
type argoTieredCachingState struct {
	// Whether the setting is editable
	Editable *bool `pulumi:"editable"`
	// Last time this setting was modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Enables Tiered Caching.
	// Available values: "on", "off".
	Value *string `pulumi:"value"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type ArgoTieredCachingState struct {
	// Whether the setting is editable
	Editable pulumi.BoolPtrInput
	// Last time this setting was modified.
	ModifiedOn pulumi.StringPtrInput
	// Enables Tiered Caching.
	// Available values: "on", "off".
	Value pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (ArgoTieredCachingState) ElementType() reflect.Type {
	return reflect.TypeOf((*argoTieredCachingState)(nil)).Elem()
}

type argoTieredCachingArgs struct {
	// Enables Tiered Caching.
	// Available values: "on", "off".
	Value string `pulumi:"value"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ArgoTieredCaching resource.
type ArgoTieredCachingArgs struct {
	// Enables Tiered Caching.
	// Available values: "on", "off".
	Value pulumi.StringInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (ArgoTieredCachingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argoTieredCachingArgs)(nil)).Elem()
}

type ArgoTieredCachingInput interface {
	pulumi.Input

	ToArgoTieredCachingOutput() ArgoTieredCachingOutput
	ToArgoTieredCachingOutputWithContext(ctx context.Context) ArgoTieredCachingOutput
}

func (*ArgoTieredCaching) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoTieredCaching)(nil)).Elem()
}

func (i *ArgoTieredCaching) ToArgoTieredCachingOutput() ArgoTieredCachingOutput {
	return i.ToArgoTieredCachingOutputWithContext(context.Background())
}

func (i *ArgoTieredCaching) ToArgoTieredCachingOutputWithContext(ctx context.Context) ArgoTieredCachingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoTieredCachingOutput)
}

// ArgoTieredCachingArrayInput is an input type that accepts ArgoTieredCachingArray and ArgoTieredCachingArrayOutput values.
// You can construct a concrete instance of `ArgoTieredCachingArrayInput` via:
//
//	ArgoTieredCachingArray{ ArgoTieredCachingArgs{...} }
type ArgoTieredCachingArrayInput interface {
	pulumi.Input

	ToArgoTieredCachingArrayOutput() ArgoTieredCachingArrayOutput
	ToArgoTieredCachingArrayOutputWithContext(context.Context) ArgoTieredCachingArrayOutput
}

type ArgoTieredCachingArray []ArgoTieredCachingInput

func (ArgoTieredCachingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoTieredCaching)(nil)).Elem()
}

func (i ArgoTieredCachingArray) ToArgoTieredCachingArrayOutput() ArgoTieredCachingArrayOutput {
	return i.ToArgoTieredCachingArrayOutputWithContext(context.Background())
}

func (i ArgoTieredCachingArray) ToArgoTieredCachingArrayOutputWithContext(ctx context.Context) ArgoTieredCachingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoTieredCachingArrayOutput)
}

// ArgoTieredCachingMapInput is an input type that accepts ArgoTieredCachingMap and ArgoTieredCachingMapOutput values.
// You can construct a concrete instance of `ArgoTieredCachingMapInput` via:
//
//	ArgoTieredCachingMap{ "key": ArgoTieredCachingArgs{...} }
type ArgoTieredCachingMapInput interface {
	pulumi.Input

	ToArgoTieredCachingMapOutput() ArgoTieredCachingMapOutput
	ToArgoTieredCachingMapOutputWithContext(context.Context) ArgoTieredCachingMapOutput
}

type ArgoTieredCachingMap map[string]ArgoTieredCachingInput

func (ArgoTieredCachingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoTieredCaching)(nil)).Elem()
}

func (i ArgoTieredCachingMap) ToArgoTieredCachingMapOutput() ArgoTieredCachingMapOutput {
	return i.ToArgoTieredCachingMapOutputWithContext(context.Background())
}

func (i ArgoTieredCachingMap) ToArgoTieredCachingMapOutputWithContext(ctx context.Context) ArgoTieredCachingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoTieredCachingMapOutput)
}

type ArgoTieredCachingOutput struct{ *pulumi.OutputState }

func (ArgoTieredCachingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoTieredCaching)(nil)).Elem()
}

func (o ArgoTieredCachingOutput) ToArgoTieredCachingOutput() ArgoTieredCachingOutput {
	return o
}

func (o ArgoTieredCachingOutput) ToArgoTieredCachingOutputWithContext(ctx context.Context) ArgoTieredCachingOutput {
	return o
}

// Whether the setting is editable
func (o ArgoTieredCachingOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ArgoTieredCaching) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// Last time this setting was modified.
func (o ArgoTieredCachingOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *ArgoTieredCaching) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Enables Tiered Caching.
// Available values: "on", "off".
func (o ArgoTieredCachingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ArgoTieredCaching) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Identifier
func (o ArgoTieredCachingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ArgoTieredCaching) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ArgoTieredCachingArrayOutput struct{ *pulumi.OutputState }

func (ArgoTieredCachingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoTieredCaching)(nil)).Elem()
}

func (o ArgoTieredCachingArrayOutput) ToArgoTieredCachingArrayOutput() ArgoTieredCachingArrayOutput {
	return o
}

func (o ArgoTieredCachingArrayOutput) ToArgoTieredCachingArrayOutputWithContext(ctx context.Context) ArgoTieredCachingArrayOutput {
	return o
}

func (o ArgoTieredCachingArrayOutput) Index(i pulumi.IntInput) ArgoTieredCachingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ArgoTieredCaching {
		return vs[0].([]*ArgoTieredCaching)[vs[1].(int)]
	}).(ArgoTieredCachingOutput)
}

type ArgoTieredCachingMapOutput struct{ *pulumi.OutputState }

func (ArgoTieredCachingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoTieredCaching)(nil)).Elem()
}

func (o ArgoTieredCachingMapOutput) ToArgoTieredCachingMapOutput() ArgoTieredCachingMapOutput {
	return o
}

func (o ArgoTieredCachingMapOutput) ToArgoTieredCachingMapOutputWithContext(ctx context.Context) ArgoTieredCachingMapOutput {
	return o
}

func (o ArgoTieredCachingMapOutput) MapIndex(k pulumi.StringInput) ArgoTieredCachingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ArgoTieredCaching {
		return vs[0].(map[string]*ArgoTieredCaching)[vs[1].(string)]
	}).(ArgoTieredCachingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoTieredCachingInput)(nil)).Elem(), &ArgoTieredCaching{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoTieredCachingArrayInput)(nil)).Elem(), ArgoTieredCachingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoTieredCachingMapInput)(nil)).Elem(), ArgoTieredCachingMap{})
	pulumi.RegisterOutputType(ArgoTieredCachingOutput{})
	pulumi.RegisterOutputType(ArgoTieredCachingArrayOutput{})
	pulumi.RegisterOutputType(ArgoTieredCachingMapOutput{})
}
