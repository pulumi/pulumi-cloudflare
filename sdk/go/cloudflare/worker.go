// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorker(ctx, "example_worker", &cloudflare.WorkerArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Name:      pulumi.String("my-worker"),
//				Logpush:   pulumi.Bool(true),
//				Observability: &cloudflare.WorkerObservabilityArgs{
//					Enabled:            pulumi.Bool(true),
//					Head_sampling_rate: 1,
//					Logs: &cloudflare.WorkerObservabilityLogsArgs{
//						Enabled:          pulumi.Bool(true),
//						HeadSamplingRate: pulumi.Float64(1),
//						InvocationLogs:   pulumi.Bool(true),
//					},
//				},
//				Subdomain: &cloudflare.WorkerSubdomainArgs{
//					Enabled:          pulumi.Bool(true),
//					Previews_enabled: true,
//				},
//				Tags: pulumi.StringArray{
//					pulumi.String("my-team"),
//					pulumi.String("my-public-api"),
//				},
//				TailConsumers: cloudflare.WorkerTailConsumerArray{
//					&cloudflare.WorkerTailConsumerArgs{
//						Name: pulumi.String("my-tail-consumer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/worker:Worker example '<account_id>/<worker_id>'
// ```
type Worker struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// When the Worker was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Whether logpush is enabled for the Worker.
	Logpush pulumi.BoolOutput `pulumi:"logpush"`
	// Name of the Worker.
	Name pulumi.StringOutput `pulumi:"name"`
	// Observability settings for the Worker.
	Observability WorkerObservabilityOutput `pulumi:"observability"`
	// Subdomain settings for the Worker.
	Subdomain WorkerSubdomainOutput `pulumi:"subdomain"`
	// Tags associated with the Worker.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Other Workers that should consume logs from the Worker.
	TailConsumers WorkerTailConsumerArrayOutput `pulumi:"tailConsumers"`
	// When the Worker was most recently updated.
	UpdatedOn pulumi.StringOutput `pulumi:"updatedOn"`
}

// NewWorker registers a new resource with the given unique name, arguments, and options.
func NewWorker(ctx *pulumi.Context,
	name string, args *WorkerArgs, opts ...pulumi.ResourceOption) (*Worker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Worker
	err := ctx.RegisterResource("cloudflare:index/worker:Worker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorker gets an existing Worker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerState, opts ...pulumi.ResourceOption) (*Worker, error) {
	var resource Worker
	err := ctx.ReadResource("cloudflare:index/worker:Worker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Worker resources.
type workerState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// When the Worker was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Whether logpush is enabled for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the Worker.
	Name *string `pulumi:"name"`
	// Observability settings for the Worker.
	Observability *WorkerObservability `pulumi:"observability"`
	// Subdomain settings for the Worker.
	Subdomain *WorkerSubdomain `pulumi:"subdomain"`
	// Tags associated with the Worker.
	Tags []string `pulumi:"tags"`
	// Other Workers that should consume logs from the Worker.
	TailConsumers []WorkerTailConsumer `pulumi:"tailConsumers"`
	// When the Worker was most recently updated.
	UpdatedOn *string `pulumi:"updatedOn"`
}

type WorkerState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// When the Worker was created.
	CreatedOn pulumi.StringPtrInput
	// Whether logpush is enabled for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the Worker.
	Name pulumi.StringPtrInput
	// Observability settings for the Worker.
	Observability WorkerObservabilityPtrInput
	// Subdomain settings for the Worker.
	Subdomain WorkerSubdomainPtrInput
	// Tags associated with the Worker.
	Tags pulumi.StringArrayInput
	// Other Workers that should consume logs from the Worker.
	TailConsumers WorkerTailConsumerArrayInput
	// When the Worker was most recently updated.
	UpdatedOn pulumi.StringPtrInput
}

func (WorkerState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerState)(nil)).Elem()
}

type workerArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Whether logpush is enabled for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the Worker.
	Name string `pulumi:"name"`
	// Observability settings for the Worker.
	Observability *WorkerObservability `pulumi:"observability"`
	// Subdomain settings for the Worker.
	Subdomain *WorkerSubdomain `pulumi:"subdomain"`
	// Tags associated with the Worker.
	Tags []string `pulumi:"tags"`
	// Other Workers that should consume logs from the Worker.
	TailConsumers []WorkerTailConsumer `pulumi:"tailConsumers"`
}

// The set of arguments for constructing a Worker resource.
type WorkerArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Whether logpush is enabled for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the Worker.
	Name pulumi.StringInput
	// Observability settings for the Worker.
	Observability WorkerObservabilityPtrInput
	// Subdomain settings for the Worker.
	Subdomain WorkerSubdomainPtrInput
	// Tags associated with the Worker.
	Tags pulumi.StringArrayInput
	// Other Workers that should consume logs from the Worker.
	TailConsumers WorkerTailConsumerArrayInput
}

func (WorkerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerArgs)(nil)).Elem()
}

type WorkerInput interface {
	pulumi.Input

	ToWorkerOutput() WorkerOutput
	ToWorkerOutputWithContext(ctx context.Context) WorkerOutput
}

func (*Worker) ElementType() reflect.Type {
	return reflect.TypeOf((**Worker)(nil)).Elem()
}

func (i *Worker) ToWorkerOutput() WorkerOutput {
	return i.ToWorkerOutputWithContext(context.Background())
}

func (i *Worker) ToWorkerOutputWithContext(ctx context.Context) WorkerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerOutput)
}

// WorkerArrayInput is an input type that accepts WorkerArray and WorkerArrayOutput values.
// You can construct a concrete instance of `WorkerArrayInput` via:
//
//	WorkerArray{ WorkerArgs{...} }
type WorkerArrayInput interface {
	pulumi.Input

	ToWorkerArrayOutput() WorkerArrayOutput
	ToWorkerArrayOutputWithContext(context.Context) WorkerArrayOutput
}

type WorkerArray []WorkerInput

func (WorkerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Worker)(nil)).Elem()
}

func (i WorkerArray) ToWorkerArrayOutput() WorkerArrayOutput {
	return i.ToWorkerArrayOutputWithContext(context.Background())
}

func (i WorkerArray) ToWorkerArrayOutputWithContext(ctx context.Context) WorkerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerArrayOutput)
}

// WorkerMapInput is an input type that accepts WorkerMap and WorkerMapOutput values.
// You can construct a concrete instance of `WorkerMapInput` via:
//
//	WorkerMap{ "key": WorkerArgs{...} }
type WorkerMapInput interface {
	pulumi.Input

	ToWorkerMapOutput() WorkerMapOutput
	ToWorkerMapOutputWithContext(context.Context) WorkerMapOutput
}

type WorkerMap map[string]WorkerInput

func (WorkerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Worker)(nil)).Elem()
}

func (i WorkerMap) ToWorkerMapOutput() WorkerMapOutput {
	return i.ToWorkerMapOutputWithContext(context.Background())
}

func (i WorkerMap) ToWorkerMapOutputWithContext(ctx context.Context) WorkerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerMapOutput)
}

type WorkerOutput struct{ *pulumi.OutputState }

func (WorkerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Worker)(nil)).Elem()
}

func (o WorkerOutput) ToWorkerOutput() WorkerOutput {
	return o
}

func (o WorkerOutput) ToWorkerOutputWithContext(ctx context.Context) WorkerOutput {
	return o
}

// Identifier.
func (o WorkerOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// When the Worker was created.
func (o WorkerOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Whether logpush is enabled for the Worker.
func (o WorkerOutput) Logpush() pulumi.BoolOutput {
	return o.ApplyT(func(v *Worker) pulumi.BoolOutput { return v.Logpush }).(pulumi.BoolOutput)
}

// Name of the Worker.
func (o WorkerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Observability settings for the Worker.
func (o WorkerOutput) Observability() WorkerObservabilityOutput {
	return o.ApplyT(func(v *Worker) WorkerObservabilityOutput { return v.Observability }).(WorkerObservabilityOutput)
}

// Subdomain settings for the Worker.
func (o WorkerOutput) Subdomain() WorkerSubdomainOutput {
	return o.ApplyT(func(v *Worker) WorkerSubdomainOutput { return v.Subdomain }).(WorkerSubdomainOutput)
}

// Tags associated with the Worker.
func (o WorkerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Other Workers that should consume logs from the Worker.
func (o WorkerOutput) TailConsumers() WorkerTailConsumerArrayOutput {
	return o.ApplyT(func(v *Worker) WorkerTailConsumerArrayOutput { return v.TailConsumers }).(WorkerTailConsumerArrayOutput)
}

// When the Worker was most recently updated.
func (o WorkerOutput) UpdatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Worker) pulumi.StringOutput { return v.UpdatedOn }).(pulumi.StringOutput)
}

type WorkerArrayOutput struct{ *pulumi.OutputState }

func (WorkerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Worker)(nil)).Elem()
}

func (o WorkerArrayOutput) ToWorkerArrayOutput() WorkerArrayOutput {
	return o
}

func (o WorkerArrayOutput) ToWorkerArrayOutputWithContext(ctx context.Context) WorkerArrayOutput {
	return o
}

func (o WorkerArrayOutput) Index(i pulumi.IntInput) WorkerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Worker {
		return vs[0].([]*Worker)[vs[1].(int)]
	}).(WorkerOutput)
}

type WorkerMapOutput struct{ *pulumi.OutputState }

func (WorkerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Worker)(nil)).Elem()
}

func (o WorkerMapOutput) ToWorkerMapOutput() WorkerMapOutput {
	return o
}

func (o WorkerMapOutput) ToWorkerMapOutputWithContext(ctx context.Context) WorkerMapOutput {
	return o
}

func (o WorkerMapOutput) MapIndex(k pulumi.StringInput) WorkerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Worker {
		return vs[0].(map[string]*Worker)[vs[1].(string)]
	}).(WorkerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerInput)(nil)).Elem(), &Worker{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerArrayInput)(nil)).Elem(), WorkerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerMapInput)(nil)).Elem(), WorkerMap{})
	pulumi.RegisterOutputType(WorkerOutput{})
	pulumi.RegisterOutputType(WorkerArrayOutput{})
	pulumi.RegisterOutputType(WorkerMapOutput{})
}
