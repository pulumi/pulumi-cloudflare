// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkersForPlatformsScriptSecret(ctx, "example_workers_for_platforms_script_secret", &cloudflare.WorkersForPlatformsScriptSecretArgs{
//				AccountId:         pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				DispatchNamespace: pulumi.String("my-dispatch-namespace"),
//				ScriptName:        pulumi.String("this-is_my_script-01"),
//				Name:              pulumi.String("MY_SECRET"),
//				Text:              pulumi.String("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"),
//				Type:              pulumi.String("secret_text"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workerSecret:WorkerSecret example '<account_id>/<dispatch_namespace>/<script_name>/<secret_name>'
// ```
//
// Deprecated: cloudflare.index/workersecret.WorkerSecret has been deprecated in favor of cloudflare.index/workerssecret.WorkersSecret
type WorkerSecret struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringOutput `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// The value of the secret.
	Text pulumi.StringPtrOutput `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewWorkerSecret registers a new resource with the given unique name, arguments, and options.
func NewWorkerSecret(ctx *pulumi.Context,
	name string, args *WorkerSecretArgs, opts ...pulumi.ResourceOption) (*WorkerSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.DispatchNamespace == nil {
		return nil, errors.New("invalid value for required argument 'DispatchNamespace'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/workersSecret:WorkersSecret"),
		},
	})
	opts = append(opts, aliases)
	if args.Text != nil {
		args.Text = pulumi.ToSecret(args.Text).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"text",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerSecret
	err := ctx.RegisterResource("cloudflare:index/workerSecret:WorkerSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerSecret gets an existing WorkerSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerSecretState, opts ...pulumi.ResourceOption) (*WorkerSecret, error) {
	var resource WorkerSecret
	err := ctx.ReadResource("cloudflare:index/workerSecret:WorkerSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerSecret resources.
type workerSecretState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace *string `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name *string `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `pulumi:"scriptName"`
	// The value of the secret.
	Text *string `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type *string `pulumi:"type"`
}

type WorkerSecretState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringPtrInput
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringPtrInput
	// The value of the secret.
	Text pulumi.StringPtrInput
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrInput
}

func (WorkerSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerSecretState)(nil)).Elem()
}

type workerSecretArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace string `pulumi:"dispatchNamespace"`
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name string `pulumi:"name"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
	// The value of the secret.
	Text *string `pulumi:"text"`
	// The type of secret to put.
	// Available values: "secretText".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a WorkerSecret resource.
type WorkerSecretArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace pulumi.StringInput
	// The name of this secret, this is what will be used to access it inside the Worker.
	Name pulumi.StringInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
	// The value of the secret.
	Text pulumi.StringPtrInput
	// The type of secret to put.
	// Available values: "secretText".
	Type pulumi.StringPtrInput
}

func (WorkerSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerSecretArgs)(nil)).Elem()
}

type WorkerSecretInput interface {
	pulumi.Input

	ToWorkerSecretOutput() WorkerSecretOutput
	ToWorkerSecretOutputWithContext(ctx context.Context) WorkerSecretOutput
}

func (*WorkerSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerSecret)(nil)).Elem()
}

func (i *WorkerSecret) ToWorkerSecretOutput() WorkerSecretOutput {
	return i.ToWorkerSecretOutputWithContext(context.Background())
}

func (i *WorkerSecret) ToWorkerSecretOutputWithContext(ctx context.Context) WorkerSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSecretOutput)
}

// WorkerSecretArrayInput is an input type that accepts WorkerSecretArray and WorkerSecretArrayOutput values.
// You can construct a concrete instance of `WorkerSecretArrayInput` via:
//
//	WorkerSecretArray{ WorkerSecretArgs{...} }
type WorkerSecretArrayInput interface {
	pulumi.Input

	ToWorkerSecretArrayOutput() WorkerSecretArrayOutput
	ToWorkerSecretArrayOutputWithContext(context.Context) WorkerSecretArrayOutput
}

type WorkerSecretArray []WorkerSecretInput

func (WorkerSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerSecret)(nil)).Elem()
}

func (i WorkerSecretArray) ToWorkerSecretArrayOutput() WorkerSecretArrayOutput {
	return i.ToWorkerSecretArrayOutputWithContext(context.Background())
}

func (i WorkerSecretArray) ToWorkerSecretArrayOutputWithContext(ctx context.Context) WorkerSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSecretArrayOutput)
}

// WorkerSecretMapInput is an input type that accepts WorkerSecretMap and WorkerSecretMapOutput values.
// You can construct a concrete instance of `WorkerSecretMapInput` via:
//
//	WorkerSecretMap{ "key": WorkerSecretArgs{...} }
type WorkerSecretMapInput interface {
	pulumi.Input

	ToWorkerSecretMapOutput() WorkerSecretMapOutput
	ToWorkerSecretMapOutputWithContext(context.Context) WorkerSecretMapOutput
}

type WorkerSecretMap map[string]WorkerSecretInput

func (WorkerSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerSecret)(nil)).Elem()
}

func (i WorkerSecretMap) ToWorkerSecretMapOutput() WorkerSecretMapOutput {
	return i.ToWorkerSecretMapOutputWithContext(context.Background())
}

func (i WorkerSecretMap) ToWorkerSecretMapOutputWithContext(ctx context.Context) WorkerSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSecretMapOutput)
}

type WorkerSecretOutput struct{ *pulumi.OutputState }

func (WorkerSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerSecret)(nil)).Elem()
}

func (o WorkerSecretOutput) ToWorkerSecretOutput() WorkerSecretOutput {
	return o
}

func (o WorkerSecretOutput) ToWorkerSecretOutputWithContext(ctx context.Context) WorkerSecretOutput {
	return o
}

// Identifier.
func (o WorkerSecretOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the Workers for Platforms dispatch namespace.
func (o WorkerSecretOutput) DispatchNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringOutput { return v.DispatchNamespace }).(pulumi.StringOutput)
}

// The name of this secret, this is what will be used to access it inside the Worker.
func (o WorkerSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkerSecretOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

// The value of the secret.
func (o WorkerSecretOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringPtrOutput { return v.Text }).(pulumi.StringPtrOutput)
}

// The type of secret to put.
// Available values: "secretText".
func (o WorkerSecretOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSecret) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type WorkerSecretArrayOutput struct{ *pulumi.OutputState }

func (WorkerSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerSecret)(nil)).Elem()
}

func (o WorkerSecretArrayOutput) ToWorkerSecretArrayOutput() WorkerSecretArrayOutput {
	return o
}

func (o WorkerSecretArrayOutput) ToWorkerSecretArrayOutputWithContext(ctx context.Context) WorkerSecretArrayOutput {
	return o
}

func (o WorkerSecretArrayOutput) Index(i pulumi.IntInput) WorkerSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerSecret {
		return vs[0].([]*WorkerSecret)[vs[1].(int)]
	}).(WorkerSecretOutput)
}

type WorkerSecretMapOutput struct{ *pulumi.OutputState }

func (WorkerSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerSecret)(nil)).Elem()
}

func (o WorkerSecretMapOutput) ToWorkerSecretMapOutput() WorkerSecretMapOutput {
	return o
}

func (o WorkerSecretMapOutput) ToWorkerSecretMapOutputWithContext(ctx context.Context) WorkerSecretMapOutput {
	return o
}

func (o WorkerSecretMapOutput) MapIndex(k pulumi.StringInput) WorkerSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerSecret {
		return vs[0].(map[string]*WorkerSecret)[vs[1].(string)]
	}).(WorkerSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerSecretInput)(nil)).Elem(), &WorkerSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerSecretArrayInput)(nil)).Elem(), WorkerSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerSecretMapInput)(nil)).Elem(), WorkerSecretMap{})
	pulumi.RegisterOutputType(WorkerSecretOutput{})
	pulumi.RegisterOutputType(WorkerSecretArrayOutput{})
	pulumi.RegisterOutputType(WorkerSecretMapOutput{})
}
