// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupImage(ctx, &cloudflare.LookupImageArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				ImageId:   "image_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("cloudflare:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Image unique identifier.
	ImageId string `pulumi:"imageId"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Can set the creator field with an internal user ID.
	Creator string `pulumi:"creator"`
	// Image file name.
	Filename string `pulumi:"filename"`
	// Image unique identifier.
	Id string `pulumi:"id"`
	// Image unique identifier.
	ImageId string `pulumi:"imageId"`
	// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	Meta string `pulumi:"meta"`
	// Indicates whether the image can be a accessed only using it's UID. If set to true, a signed token needs to be generated with a signing key to view the image.
	RequireSignedUrls bool `pulumi:"requireSignedUrls"`
	// When the media item was uploaded.
	Uploaded string `pulumi:"uploaded"`
	// Object specifying available variants for an image.
	Variants []string `pulumi:"variants"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupImageResultOutput, error) {
			args := v.(LookupImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getImage:getImage", args, LookupImageResultOutput{}, options).(LookupImageResultOutput), nil
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Image unique identifier.
	ImageId pulumi.StringInput `pulumi:"imageId"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

// Account identifier tag.
func (o LookupImageResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Can set the creator field with an internal user ID.
func (o LookupImageResultOutput) Creator() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Creator }).(pulumi.StringOutput)
}

// Image file name.
func (o LookupImageResultOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Filename }).(pulumi.StringOutput)
}

// Image unique identifier.
func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Image unique identifier.
func (o LookupImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
func (o LookupImageResultOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Meta }).(pulumi.StringOutput)
}

// Indicates whether the image can be a accessed only using it's UID. If set to true, a signed token needs to be generated with a signing key to view the image.
func (o LookupImageResultOutput) RequireSignedUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageResult) bool { return v.RequireSignedUrls }).(pulumi.BoolOutput)
}

// When the media item was uploaded.
func (o LookupImageResultOutput) Uploaded() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Uploaded }).(pulumi.StringOutput)
}

// Object specifying available variants for an image.
func (o LookupImageResultOutput) Variants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []string { return v.Variants }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}
