// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupUrlNormalizationSettings(ctx, &cloudflare.LookupUrlNormalizationSettingsArgs{
//				ZoneId: "9f1839b6152d298aca64c4e906b6d074",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUrlNormalizationSettings(ctx *pulumi.Context, args *LookupUrlNormalizationSettingsArgs, opts ...pulumi.InvokeOption) (*LookupUrlNormalizationSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUrlNormalizationSettingsResult
	err := ctx.Invoke("cloudflare:index/getUrlNormalizationSettings:getUrlNormalizationSettings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUrlNormalizationSettings.
type LookupUrlNormalizationSettingsArgs struct {
	// The unique ID of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getUrlNormalizationSettings.
type LookupUrlNormalizationSettingsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The scope of the URL normalization.
	// Available values: "incoming", "both".
	Scope string `pulumi:"scope"`
	// The type of URL normalization performed by Cloudflare.
	// Available values: "cloudflare", "rfc3986".
	Type string `pulumi:"type"`
	// The unique ID of the zone.
	ZoneId string `pulumi:"zoneId"`
}

func LookupUrlNormalizationSettingsOutput(ctx *pulumi.Context, args LookupUrlNormalizationSettingsOutputArgs, opts ...pulumi.InvokeOption) LookupUrlNormalizationSettingsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUrlNormalizationSettingsResultOutput, error) {
			args := v.(LookupUrlNormalizationSettingsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getUrlNormalizationSettings:getUrlNormalizationSettings", args, LookupUrlNormalizationSettingsResultOutput{}, options).(LookupUrlNormalizationSettingsResultOutput), nil
		}).(LookupUrlNormalizationSettingsResultOutput)
}

// A collection of arguments for invoking getUrlNormalizationSettings.
type LookupUrlNormalizationSettingsOutputArgs struct {
	// The unique ID of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupUrlNormalizationSettingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUrlNormalizationSettingsArgs)(nil)).Elem()
}

// A collection of values returned by getUrlNormalizationSettings.
type LookupUrlNormalizationSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupUrlNormalizationSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUrlNormalizationSettingsResult)(nil)).Elem()
}

func (o LookupUrlNormalizationSettingsResultOutput) ToLookupUrlNormalizationSettingsResultOutput() LookupUrlNormalizationSettingsResultOutput {
	return o
}

func (o LookupUrlNormalizationSettingsResultOutput) ToLookupUrlNormalizationSettingsResultOutputWithContext(ctx context.Context) LookupUrlNormalizationSettingsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUrlNormalizationSettingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUrlNormalizationSettingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The scope of the URL normalization.
// Available values: "incoming", "both".
func (o LookupUrlNormalizationSettingsResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUrlNormalizationSettingsResult) string { return v.Scope }).(pulumi.StringOutput)
}

// The type of URL normalization performed by Cloudflare.
// Available values: "cloudflare", "rfc3986".
func (o LookupUrlNormalizationSettingsResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUrlNormalizationSettingsResult) string { return v.Type }).(pulumi.StringOutput)
}

// The unique ID of the zone.
func (o LookupUrlNormalizationSettingsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUrlNormalizationSettingsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUrlNormalizationSettingsResultOutput{})
}
