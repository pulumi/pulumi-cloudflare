// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare WAF rule group resource for a particular zone. This can be used to configure firewall behaviour for pre-defined firewall groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v3/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWafGroup(ctx, "honeyPot", &cloudflare.WafGroupArgs{
//				GroupId: pulumi.String("de677e5818985db1285d0e80225f06e5"),
//				Mode:    pulumi.String("on"),
//				ZoneId:  pulumi.String("ae36f999674d196762efcc5abb06b345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WAF Rule Groups can be imported using a composite ID formed of zone ID and the WAF Rule Group ID, e.g.
//
// ```sh
//
//	$ pulumi import cloudflare:index/wafGroup:WafGroup honey_pot ae36f999674d196762efcc5abb06b345/de677e5818985db1285d0e80225f06e5
//
// ```
type WafGroup struct {
	pulumi.CustomResourceState

	// The WAF Rule Group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The mode of the group, can be one of ["on", "off"].
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The ID of the WAF Rule Package that contains the group.
	PackageId pulumi.StringOutput `pulumi:"packageId"`
	// The DNS zone ID to apply to.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewWafGroup registers a new resource with the given unique name, arguments, and options.
func NewWafGroup(ctx *pulumi.Context,
	name string, args *WafGroupArgs, opts ...pulumi.ResourceOption) (*WafGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource WafGroup
	err := ctx.RegisterResource("cloudflare:index/wafGroup:WafGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWafGroup gets an existing WafGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWafGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WafGroupState, opts ...pulumi.ResourceOption) (*WafGroup, error) {
	var resource WafGroup
	err := ctx.ReadResource("cloudflare:index/wafGroup:WafGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WafGroup resources.
type wafGroupState struct {
	// The WAF Rule Group ID.
	GroupId *string `pulumi:"groupId"`
	// The mode of the group, can be one of ["on", "off"].
	Mode *string `pulumi:"mode"`
	// The ID of the WAF Rule Package that contains the group.
	PackageId *string `pulumi:"packageId"`
	// The DNS zone ID to apply to.
	ZoneId *string `pulumi:"zoneId"`
}

type WafGroupState struct {
	// The WAF Rule Group ID.
	GroupId pulumi.StringPtrInput
	// The mode of the group, can be one of ["on", "off"].
	Mode pulumi.StringPtrInput
	// The ID of the WAF Rule Package that contains the group.
	PackageId pulumi.StringPtrInput
	// The DNS zone ID to apply to.
	ZoneId pulumi.StringPtrInput
}

func (WafGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*wafGroupState)(nil)).Elem()
}

type wafGroupArgs struct {
	// The WAF Rule Group ID.
	GroupId string `pulumi:"groupId"`
	// The mode of the group, can be one of ["on", "off"].
	Mode *string `pulumi:"mode"`
	// The ID of the WAF Rule Package that contains the group.
	PackageId *string `pulumi:"packageId"`
	// The DNS zone ID to apply to.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a WafGroup resource.
type WafGroupArgs struct {
	// The WAF Rule Group ID.
	GroupId pulumi.StringInput
	// The mode of the group, can be one of ["on", "off"].
	Mode pulumi.StringPtrInput
	// The ID of the WAF Rule Package that contains the group.
	PackageId pulumi.StringPtrInput
	// The DNS zone ID to apply to.
	ZoneId pulumi.StringInput
}

func (WafGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wafGroupArgs)(nil)).Elem()
}

type WafGroupInput interface {
	pulumi.Input

	ToWafGroupOutput() WafGroupOutput
	ToWafGroupOutputWithContext(ctx context.Context) WafGroupOutput
}

func (*WafGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WafGroup)(nil)).Elem()
}

func (i *WafGroup) ToWafGroupOutput() WafGroupOutput {
	return i.ToWafGroupOutputWithContext(context.Background())
}

func (i *WafGroup) ToWafGroupOutputWithContext(ctx context.Context) WafGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafGroupOutput)
}

// WafGroupArrayInput is an input type that accepts WafGroupArray and WafGroupArrayOutput values.
// You can construct a concrete instance of `WafGroupArrayInput` via:
//
//	WafGroupArray{ WafGroupArgs{...} }
type WafGroupArrayInput interface {
	pulumi.Input

	ToWafGroupArrayOutput() WafGroupArrayOutput
	ToWafGroupArrayOutputWithContext(context.Context) WafGroupArrayOutput
}

type WafGroupArray []WafGroupInput

func (WafGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafGroup)(nil)).Elem()
}

func (i WafGroupArray) ToWafGroupArrayOutput() WafGroupArrayOutput {
	return i.ToWafGroupArrayOutputWithContext(context.Background())
}

func (i WafGroupArray) ToWafGroupArrayOutputWithContext(ctx context.Context) WafGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafGroupArrayOutput)
}

// WafGroupMapInput is an input type that accepts WafGroupMap and WafGroupMapOutput values.
// You can construct a concrete instance of `WafGroupMapInput` via:
//
//	WafGroupMap{ "key": WafGroupArgs{...} }
type WafGroupMapInput interface {
	pulumi.Input

	ToWafGroupMapOutput() WafGroupMapOutput
	ToWafGroupMapOutputWithContext(context.Context) WafGroupMapOutput
}

type WafGroupMap map[string]WafGroupInput

func (WafGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafGroup)(nil)).Elem()
}

func (i WafGroupMap) ToWafGroupMapOutput() WafGroupMapOutput {
	return i.ToWafGroupMapOutputWithContext(context.Background())
}

func (i WafGroupMap) ToWafGroupMapOutputWithContext(ctx context.Context) WafGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WafGroupMapOutput)
}

type WafGroupOutput struct{ *pulumi.OutputState }

func (WafGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WafGroup)(nil)).Elem()
}

func (o WafGroupOutput) ToWafGroupOutput() WafGroupOutput {
	return o
}

func (o WafGroupOutput) ToWafGroupOutputWithContext(ctx context.Context) WafGroupOutput {
	return o
}

// The WAF Rule Group ID.
func (o WafGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *WafGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The mode of the group, can be one of ["on", "off"].
func (o WafGroupOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WafGroup) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The ID of the WAF Rule Package that contains the group.
func (o WafGroupOutput) PackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *WafGroup) pulumi.StringOutput { return v.PackageId }).(pulumi.StringOutput)
}

// The DNS zone ID to apply to.
func (o WafGroupOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *WafGroup) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type WafGroupArrayOutput struct{ *pulumi.OutputState }

func (WafGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WafGroup)(nil)).Elem()
}

func (o WafGroupArrayOutput) ToWafGroupArrayOutput() WafGroupArrayOutput {
	return o
}

func (o WafGroupArrayOutput) ToWafGroupArrayOutputWithContext(ctx context.Context) WafGroupArrayOutput {
	return o
}

func (o WafGroupArrayOutput) Index(i pulumi.IntInput) WafGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WafGroup {
		return vs[0].([]*WafGroup)[vs[1].(int)]
	}).(WafGroupOutput)
}

type WafGroupMapOutput struct{ *pulumi.OutputState }

func (WafGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WafGroup)(nil)).Elem()
}

func (o WafGroupMapOutput) ToWafGroupMapOutput() WafGroupMapOutput {
	return o
}

func (o WafGroupMapOutput) ToWafGroupMapOutputWithContext(ctx context.Context) WafGroupMapOutput {
	return o
}

func (o WafGroupMapOutput) MapIndex(k pulumi.StringInput) WafGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WafGroup {
		return vs[0].(map[string]*WafGroup)[vs[1].(string)]
	}).(WafGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WafGroupInput)(nil)).Elem(), &WafGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafGroupArrayInput)(nil)).Elem(), WafGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WafGroupMapInput)(nil)).Elem(), WafGroupMap{})
	pulumi.RegisterOutputType(WafGroupOutput{})
	pulumi.RegisterOutputType(WafGroupArrayOutput{})
	pulumi.RegisterOutputType(WafGroupMapOutput{})
}
