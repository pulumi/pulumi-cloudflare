// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewTurnstileWidget(ctx, "example_turnstile_widget", &cloudflare.TurnstileWidgetArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Domains: pulumi.StringArray{
//					pulumi.String("203.0.113.1"),
//					pulumi.String("cloudflare.com"),
//					pulumi.String("blog.example.com"),
//				},
//				Mode:           pulumi.String("non-interactive"),
//				Name:           pulumi.String("blog.cloudflare.com login form"),
//				BotFightMode:   pulumi.Bool(false),
//				ClearanceLevel: pulumi.String("no_clearance"),
//				EphemeralId:    pulumi.Bool(false),
//				Offlabel:       pulumi.Bool(false),
//				Region:         pulumi.String("world"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/turnstileWidget:TurnstileWidget example '<account_id>/<sitekey>'
// ```
type TurnstileWidget struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode pulumi.BoolOutput `pulumi:"botFightMode"`
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel pulumi.StringPtrOutput `pulumi:"clearanceLevel"`
	// When the widget was created.
	CreatedOn pulumi.StringOutput      `pulumi:"createdOn"`
	Domains   pulumi.StringArrayOutput `pulumi:"domains"`
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId pulumi.BoolPtrOutput `pulumi:"ephemeralId"`
	// Widget Mode
	Mode pulumi.StringOutput `pulumi:"mode"`
	// When the widget was modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name pulumi.StringOutput `pulumi:"name"`
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel pulumi.BoolOutput `pulumi:"offlabel"`
	// Region where this widget can be used.
	Region pulumi.StringOutput `pulumi:"region"`
	// Secret key for this widget.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// Widget item identifier tag.
	Sitekey pulumi.StringOutput `pulumi:"sitekey"`
}

// NewTurnstileWidget registers a new resource with the given unique name, arguments, and options.
func NewTurnstileWidget(ctx *pulumi.Context,
	name string, args *TurnstileWidgetArgs, opts ...pulumi.ResourceOption) (*TurnstileWidget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TurnstileWidget
	err := ctx.RegisterResource("cloudflare:index/turnstileWidget:TurnstileWidget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTurnstileWidget gets an existing TurnstileWidget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTurnstileWidget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TurnstileWidgetState, opts ...pulumi.ResourceOption) (*TurnstileWidget, error) {
	var resource TurnstileWidget
	err := ctx.ReadResource("cloudflare:index/turnstileWidget:TurnstileWidget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TurnstileWidget resources.
type turnstileWidgetState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode *bool `pulumi:"botFightMode"`
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel *string `pulumi:"clearanceLevel"`
	// When the widget was created.
	CreatedOn *string  `pulumi:"createdOn"`
	Domains   []string `pulumi:"domains"`
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId *bool `pulumi:"ephemeralId"`
	// Widget Mode
	Mode *string `pulumi:"mode"`
	// When the widget was modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name *string `pulumi:"name"`
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel *bool `pulumi:"offlabel"`
	// Region where this widget can be used.
	Region *string `pulumi:"region"`
	// Secret key for this widget.
	Secret *string `pulumi:"secret"`
	// Widget item identifier tag.
	Sitekey *string `pulumi:"sitekey"`
}

type TurnstileWidgetState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode pulumi.BoolPtrInput
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel pulumi.StringPtrInput
	// When the widget was created.
	CreatedOn pulumi.StringPtrInput
	Domains   pulumi.StringArrayInput
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId pulumi.BoolPtrInput
	// Widget Mode
	Mode pulumi.StringPtrInput
	// When the widget was modified.
	ModifiedOn pulumi.StringPtrInput
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name pulumi.StringPtrInput
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel pulumi.BoolPtrInput
	// Region where this widget can be used.
	Region pulumi.StringPtrInput
	// Secret key for this widget.
	Secret pulumi.StringPtrInput
	// Widget item identifier tag.
	Sitekey pulumi.StringPtrInput
}

func (TurnstileWidgetState) ElementType() reflect.Type {
	return reflect.TypeOf((*turnstileWidgetState)(nil)).Elem()
}

type turnstileWidgetArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode *bool `pulumi:"botFightMode"`
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel *string  `pulumi:"clearanceLevel"`
	Domains        []string `pulumi:"domains"`
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId *bool `pulumi:"ephemeralId"`
	// Widget Mode
	Mode string `pulumi:"mode"`
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name string `pulumi:"name"`
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel *bool `pulumi:"offlabel"`
	// Region where this widget can be used.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a TurnstileWidget resource.
type TurnstileWidgetArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// If bot*fight*mode is set to `true`, Cloudflare issues computationally
	// expensive challenges in response to malicious bots (ENT only).
	BotFightMode pulumi.BoolPtrInput
	// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
	// this setting can determine the clearance level to be set
	ClearanceLevel pulumi.StringPtrInput
	Domains        pulumi.StringArrayInput
	// Return the Ephemeral ID in /siteverify (ENT only).
	EphemeralId pulumi.BoolPtrInput
	// Widget Mode
	Mode pulumi.StringInput
	// Human readable widget name. Not unique. Cloudflare suggests that you
	// set this to a meaningful string to make it easier to identify your
	// widget, and where it is used.
	Name pulumi.StringInput
	// Do not show any Cloudflare branding on the widget (ENT only).
	Offlabel pulumi.BoolPtrInput
	// Region where this widget can be used.
	Region pulumi.StringPtrInput
}

func (TurnstileWidgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*turnstileWidgetArgs)(nil)).Elem()
}

type TurnstileWidgetInput interface {
	pulumi.Input

	ToTurnstileWidgetOutput() TurnstileWidgetOutput
	ToTurnstileWidgetOutputWithContext(ctx context.Context) TurnstileWidgetOutput
}

func (*TurnstileWidget) ElementType() reflect.Type {
	return reflect.TypeOf((**TurnstileWidget)(nil)).Elem()
}

func (i *TurnstileWidget) ToTurnstileWidgetOutput() TurnstileWidgetOutput {
	return i.ToTurnstileWidgetOutputWithContext(context.Background())
}

func (i *TurnstileWidget) ToTurnstileWidgetOutputWithContext(ctx context.Context) TurnstileWidgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurnstileWidgetOutput)
}

// TurnstileWidgetArrayInput is an input type that accepts TurnstileWidgetArray and TurnstileWidgetArrayOutput values.
// You can construct a concrete instance of `TurnstileWidgetArrayInput` via:
//
//	TurnstileWidgetArray{ TurnstileWidgetArgs{...} }
type TurnstileWidgetArrayInput interface {
	pulumi.Input

	ToTurnstileWidgetArrayOutput() TurnstileWidgetArrayOutput
	ToTurnstileWidgetArrayOutputWithContext(context.Context) TurnstileWidgetArrayOutput
}

type TurnstileWidgetArray []TurnstileWidgetInput

func (TurnstileWidgetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TurnstileWidget)(nil)).Elem()
}

func (i TurnstileWidgetArray) ToTurnstileWidgetArrayOutput() TurnstileWidgetArrayOutput {
	return i.ToTurnstileWidgetArrayOutputWithContext(context.Background())
}

func (i TurnstileWidgetArray) ToTurnstileWidgetArrayOutputWithContext(ctx context.Context) TurnstileWidgetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurnstileWidgetArrayOutput)
}

// TurnstileWidgetMapInput is an input type that accepts TurnstileWidgetMap and TurnstileWidgetMapOutput values.
// You can construct a concrete instance of `TurnstileWidgetMapInput` via:
//
//	TurnstileWidgetMap{ "key": TurnstileWidgetArgs{...} }
type TurnstileWidgetMapInput interface {
	pulumi.Input

	ToTurnstileWidgetMapOutput() TurnstileWidgetMapOutput
	ToTurnstileWidgetMapOutputWithContext(context.Context) TurnstileWidgetMapOutput
}

type TurnstileWidgetMap map[string]TurnstileWidgetInput

func (TurnstileWidgetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TurnstileWidget)(nil)).Elem()
}

func (i TurnstileWidgetMap) ToTurnstileWidgetMapOutput() TurnstileWidgetMapOutput {
	return i.ToTurnstileWidgetMapOutputWithContext(context.Background())
}

func (i TurnstileWidgetMap) ToTurnstileWidgetMapOutputWithContext(ctx context.Context) TurnstileWidgetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurnstileWidgetMapOutput)
}

type TurnstileWidgetOutput struct{ *pulumi.OutputState }

func (TurnstileWidgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TurnstileWidget)(nil)).Elem()
}

func (o TurnstileWidgetOutput) ToTurnstileWidgetOutput() TurnstileWidgetOutput {
	return o
}

func (o TurnstileWidgetOutput) ToTurnstileWidgetOutputWithContext(ctx context.Context) TurnstileWidgetOutput {
	return o
}

// Identifier
func (o TurnstileWidgetOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// If bot*fight*mode is set to `true`, Cloudflare issues computationally
// expensive challenges in response to malicious bots (ENT only).
func (o TurnstileWidgetOutput) BotFightMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.BoolOutput { return v.BotFightMode }).(pulumi.BoolOutput)
}

// If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
// this setting can determine the clearance level to be set
func (o TurnstileWidgetOutput) ClearanceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringPtrOutput { return v.ClearanceLevel }).(pulumi.StringPtrOutput)
}

// When the widget was created.
func (o TurnstileWidgetOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o TurnstileWidgetOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// Return the Ephemeral ID in /siteverify (ENT only).
func (o TurnstileWidgetOutput) EphemeralId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.BoolPtrOutput { return v.EphemeralId }).(pulumi.BoolPtrOutput)
}

// Widget Mode
func (o TurnstileWidgetOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// When the widget was modified.
func (o TurnstileWidgetOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Human readable widget name. Not unique. Cloudflare suggests that you
// set this to a meaningful string to make it easier to identify your
// widget, and where it is used.
func (o TurnstileWidgetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Do not show any Cloudflare branding on the widget (ENT only).
func (o TurnstileWidgetOutput) Offlabel() pulumi.BoolOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.BoolOutput { return v.Offlabel }).(pulumi.BoolOutput)
}

// Region where this widget can be used.
func (o TurnstileWidgetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Secret key for this widget.
func (o TurnstileWidgetOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// Widget item identifier tag.
func (o TurnstileWidgetOutput) Sitekey() pulumi.StringOutput {
	return o.ApplyT(func(v *TurnstileWidget) pulumi.StringOutput { return v.Sitekey }).(pulumi.StringOutput)
}

type TurnstileWidgetArrayOutput struct{ *pulumi.OutputState }

func (TurnstileWidgetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TurnstileWidget)(nil)).Elem()
}

func (o TurnstileWidgetArrayOutput) ToTurnstileWidgetArrayOutput() TurnstileWidgetArrayOutput {
	return o
}

func (o TurnstileWidgetArrayOutput) ToTurnstileWidgetArrayOutputWithContext(ctx context.Context) TurnstileWidgetArrayOutput {
	return o
}

func (o TurnstileWidgetArrayOutput) Index(i pulumi.IntInput) TurnstileWidgetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TurnstileWidget {
		return vs[0].([]*TurnstileWidget)[vs[1].(int)]
	}).(TurnstileWidgetOutput)
}

type TurnstileWidgetMapOutput struct{ *pulumi.OutputState }

func (TurnstileWidgetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TurnstileWidget)(nil)).Elem()
}

func (o TurnstileWidgetMapOutput) ToTurnstileWidgetMapOutput() TurnstileWidgetMapOutput {
	return o
}

func (o TurnstileWidgetMapOutput) ToTurnstileWidgetMapOutputWithContext(ctx context.Context) TurnstileWidgetMapOutput {
	return o
}

func (o TurnstileWidgetMapOutput) MapIndex(k pulumi.StringInput) TurnstileWidgetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TurnstileWidget {
		return vs[0].(map[string]*TurnstileWidget)[vs[1].(string)]
	}).(TurnstileWidgetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TurnstileWidgetInput)(nil)).Elem(), &TurnstileWidget{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurnstileWidgetArrayInput)(nil)).Elem(), TurnstileWidgetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurnstileWidgetMapInput)(nil)).Elem(), TurnstileWidgetMap{})
	pulumi.RegisterOutputType(TurnstileWidgetOutput{})
	pulumi.RegisterOutputType(TurnstileWidgetArrayOutput{})
	pulumi.RegisterOutputType(TurnstileWidgetMapOutput{})
}
