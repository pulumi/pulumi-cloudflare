// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZoneCacheVariants struct {
	pulumi.CustomResourceState

	Avifs  pulumi.StringArrayOutput `pulumi:"avifs"`
	Bmps   pulumi.StringArrayOutput `pulumi:"bmps"`
	Gifs   pulumi.StringArrayOutput `pulumi:"gifs"`
	Jp2s   pulumi.StringArrayOutput `pulumi:"jp2s"`
	Jpegs  pulumi.StringArrayOutput `pulumi:"jpegs"`
	Jpg2s  pulumi.StringArrayOutput `pulumi:"jpg2s"`
	Jpgs   pulumi.StringArrayOutput `pulumi:"jpgs"`
	Pngs   pulumi.StringArrayOutput `pulumi:"pngs"`
	Tiffs  pulumi.StringArrayOutput `pulumi:"tiffs"`
	Tifs   pulumi.StringArrayOutput `pulumi:"tifs"`
	Webps  pulumi.StringArrayOutput `pulumi:"webps"`
	ZoneId pulumi.StringOutput      `pulumi:"zoneId"`
}

// NewZoneCacheVariants registers a new resource with the given unique name, arguments, and options.
func NewZoneCacheVariants(ctx *pulumi.Context,
	name string, args *ZoneCacheVariantsArgs, opts ...pulumi.ResourceOption) (*ZoneCacheVariants, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource ZoneCacheVariants
	err := ctx.RegisterResource("cloudflare:index/zoneCacheVariants:ZoneCacheVariants", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneCacheVariants gets an existing ZoneCacheVariants resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneCacheVariants(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneCacheVariantsState, opts ...pulumi.ResourceOption) (*ZoneCacheVariants, error) {
	var resource ZoneCacheVariants
	err := ctx.ReadResource("cloudflare:index/zoneCacheVariants:ZoneCacheVariants", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneCacheVariants resources.
type zoneCacheVariantsState struct {
	Avifs  []string `pulumi:"avifs"`
	Bmps   []string `pulumi:"bmps"`
	Gifs   []string `pulumi:"gifs"`
	Jp2s   []string `pulumi:"jp2s"`
	Jpegs  []string `pulumi:"jpegs"`
	Jpg2s  []string `pulumi:"jpg2s"`
	Jpgs   []string `pulumi:"jpgs"`
	Pngs   []string `pulumi:"pngs"`
	Tiffs  []string `pulumi:"tiffs"`
	Tifs   []string `pulumi:"tifs"`
	Webps  []string `pulumi:"webps"`
	ZoneId *string  `pulumi:"zoneId"`
}

type ZoneCacheVariantsState struct {
	Avifs  pulumi.StringArrayInput
	Bmps   pulumi.StringArrayInput
	Gifs   pulumi.StringArrayInput
	Jp2s   pulumi.StringArrayInput
	Jpegs  pulumi.StringArrayInput
	Jpg2s  pulumi.StringArrayInput
	Jpgs   pulumi.StringArrayInput
	Pngs   pulumi.StringArrayInput
	Tiffs  pulumi.StringArrayInput
	Tifs   pulumi.StringArrayInput
	Webps  pulumi.StringArrayInput
	ZoneId pulumi.StringPtrInput
}

func (ZoneCacheVariantsState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneCacheVariantsState)(nil)).Elem()
}

type zoneCacheVariantsArgs struct {
	Avifs  []string `pulumi:"avifs"`
	Bmps   []string `pulumi:"bmps"`
	Gifs   []string `pulumi:"gifs"`
	Jp2s   []string `pulumi:"jp2s"`
	Jpegs  []string `pulumi:"jpegs"`
	Jpg2s  []string `pulumi:"jpg2s"`
	Jpgs   []string `pulumi:"jpgs"`
	Pngs   []string `pulumi:"pngs"`
	Tiffs  []string `pulumi:"tiffs"`
	Tifs   []string `pulumi:"tifs"`
	Webps  []string `pulumi:"webps"`
	ZoneId string   `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneCacheVariants resource.
type ZoneCacheVariantsArgs struct {
	Avifs  pulumi.StringArrayInput
	Bmps   pulumi.StringArrayInput
	Gifs   pulumi.StringArrayInput
	Jp2s   pulumi.StringArrayInput
	Jpegs  pulumi.StringArrayInput
	Jpg2s  pulumi.StringArrayInput
	Jpgs   pulumi.StringArrayInput
	Pngs   pulumi.StringArrayInput
	Tiffs  pulumi.StringArrayInput
	Tifs   pulumi.StringArrayInput
	Webps  pulumi.StringArrayInput
	ZoneId pulumi.StringInput
}

func (ZoneCacheVariantsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneCacheVariantsArgs)(nil)).Elem()
}

type ZoneCacheVariantsInput interface {
	pulumi.Input

	ToZoneCacheVariantsOutput() ZoneCacheVariantsOutput
	ToZoneCacheVariantsOutputWithContext(ctx context.Context) ZoneCacheVariantsOutput
}

func (*ZoneCacheVariants) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneCacheVariants)(nil)).Elem()
}

func (i *ZoneCacheVariants) ToZoneCacheVariantsOutput() ZoneCacheVariantsOutput {
	return i.ToZoneCacheVariantsOutputWithContext(context.Background())
}

func (i *ZoneCacheVariants) ToZoneCacheVariantsOutputWithContext(ctx context.Context) ZoneCacheVariantsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheVariantsOutput)
}

// ZoneCacheVariantsArrayInput is an input type that accepts ZoneCacheVariantsArray and ZoneCacheVariantsArrayOutput values.
// You can construct a concrete instance of `ZoneCacheVariantsArrayInput` via:
//
//          ZoneCacheVariantsArray{ ZoneCacheVariantsArgs{...} }
type ZoneCacheVariantsArrayInput interface {
	pulumi.Input

	ToZoneCacheVariantsArrayOutput() ZoneCacheVariantsArrayOutput
	ToZoneCacheVariantsArrayOutputWithContext(context.Context) ZoneCacheVariantsArrayOutput
}

type ZoneCacheVariantsArray []ZoneCacheVariantsInput

func (ZoneCacheVariantsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneCacheVariants)(nil)).Elem()
}

func (i ZoneCacheVariantsArray) ToZoneCacheVariantsArrayOutput() ZoneCacheVariantsArrayOutput {
	return i.ToZoneCacheVariantsArrayOutputWithContext(context.Background())
}

func (i ZoneCacheVariantsArray) ToZoneCacheVariantsArrayOutputWithContext(ctx context.Context) ZoneCacheVariantsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheVariantsArrayOutput)
}

// ZoneCacheVariantsMapInput is an input type that accepts ZoneCacheVariantsMap and ZoneCacheVariantsMapOutput values.
// You can construct a concrete instance of `ZoneCacheVariantsMapInput` via:
//
//          ZoneCacheVariantsMap{ "key": ZoneCacheVariantsArgs{...} }
type ZoneCacheVariantsMapInput interface {
	pulumi.Input

	ToZoneCacheVariantsMapOutput() ZoneCacheVariantsMapOutput
	ToZoneCacheVariantsMapOutputWithContext(context.Context) ZoneCacheVariantsMapOutput
}

type ZoneCacheVariantsMap map[string]ZoneCacheVariantsInput

func (ZoneCacheVariantsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneCacheVariants)(nil)).Elem()
}

func (i ZoneCacheVariantsMap) ToZoneCacheVariantsMapOutput() ZoneCacheVariantsMapOutput {
	return i.ToZoneCacheVariantsMapOutputWithContext(context.Background())
}

func (i ZoneCacheVariantsMap) ToZoneCacheVariantsMapOutputWithContext(ctx context.Context) ZoneCacheVariantsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheVariantsMapOutput)
}

type ZoneCacheVariantsOutput struct{ *pulumi.OutputState }

func (ZoneCacheVariantsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneCacheVariants)(nil)).Elem()
}

func (o ZoneCacheVariantsOutput) ToZoneCacheVariantsOutput() ZoneCacheVariantsOutput {
	return o
}

func (o ZoneCacheVariantsOutput) ToZoneCacheVariantsOutputWithContext(ctx context.Context) ZoneCacheVariantsOutput {
	return o
}

type ZoneCacheVariantsArrayOutput struct{ *pulumi.OutputState }

func (ZoneCacheVariantsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneCacheVariants)(nil)).Elem()
}

func (o ZoneCacheVariantsArrayOutput) ToZoneCacheVariantsArrayOutput() ZoneCacheVariantsArrayOutput {
	return o
}

func (o ZoneCacheVariantsArrayOutput) ToZoneCacheVariantsArrayOutputWithContext(ctx context.Context) ZoneCacheVariantsArrayOutput {
	return o
}

func (o ZoneCacheVariantsArrayOutput) Index(i pulumi.IntInput) ZoneCacheVariantsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneCacheVariants {
		return vs[0].([]*ZoneCacheVariants)[vs[1].(int)]
	}).(ZoneCacheVariantsOutput)
}

type ZoneCacheVariantsMapOutput struct{ *pulumi.OutputState }

func (ZoneCacheVariantsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneCacheVariants)(nil)).Elem()
}

func (o ZoneCacheVariantsMapOutput) ToZoneCacheVariantsMapOutput() ZoneCacheVariantsMapOutput {
	return o
}

func (o ZoneCacheVariantsMapOutput) ToZoneCacheVariantsMapOutputWithContext(ctx context.Context) ZoneCacheVariantsMapOutput {
	return o
}

func (o ZoneCacheVariantsMapOutput) MapIndex(k pulumi.StringInput) ZoneCacheVariantsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneCacheVariants {
		return vs[0].(map[string]*ZoneCacheVariants)[vs[1].(string)]
	}).(ZoneCacheVariantsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheVariantsInput)(nil)).Elem(), &ZoneCacheVariants{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheVariantsArrayInput)(nil)).Elem(), ZoneCacheVariantsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheVariantsMapInput)(nil)).Elem(), ZoneCacheVariantsMap{})
	pulumi.RegisterOutputType(ZoneCacheVariantsOutput{})
	pulumi.RegisterOutputType(ZoneCacheVariantsArrayOutput{})
	pulumi.RegisterOutputType(ZoneCacheVariantsMapOutput{})
}
