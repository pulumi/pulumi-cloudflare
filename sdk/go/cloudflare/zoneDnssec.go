// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZoneDnssec(ctx, "example_zone_dnssec", &cloudflare.ZoneDnssecArgs{
//				ZoneId:            pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				DnssecMultiSigner: pulumi.Bool(false),
//				DnssecPresigned:   pulumi.Bool(true),
//				Status:            pulumi.String("active"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zoneDnssec:ZoneDnssec example '<zone_id>'
// ```
type ZoneDnssec struct {
	pulumi.CustomResourceState

	// Algorithm key code.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// Digest hash.
	Digest pulumi.StringOutput `pulumi:"digest"`
	// Type of digest algorithm.
	DigestAlgorithm pulumi.StringOutput `pulumi:"digestAlgorithm"`
	// Coded type for digest algorithm.
	DigestType pulumi.StringOutput `pulumi:"digestType"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	DnssecMultiSigner pulumi.BoolPtrOutput `pulumi:"dnssecMultiSigner"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
	// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
	// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
	// details.
	DnssecPresigned pulumi.BoolPtrOutput `pulumi:"dnssecPresigned"`
	// Full DS record.
	Ds pulumi.StringOutput `pulumi:"ds"`
	// Flag for DNSSEC record.
	Flags pulumi.Float64Output `pulumi:"flags"`
	// Code for key tag.
	KeyTag pulumi.Float64Output `pulumi:"keyTag"`
	// Algorithm key type.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// When DNSSEC was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Public key for DS record.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneDnssec registers a new resource with the given unique name, arguments, and options.
func NewZoneDnssec(ctx *pulumi.Context,
	name string, args *ZoneDnssecArgs, opts ...pulumi.ResourceOption) (*ZoneDnssec, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneDnssec
	err := ctx.RegisterResource("cloudflare:index/zoneDnssec:ZoneDnssec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneDnssec gets an existing ZoneDnssec resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneDnssec(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneDnssecState, opts ...pulumi.ResourceOption) (*ZoneDnssec, error) {
	var resource ZoneDnssec
	err := ctx.ReadResource("cloudflare:index/zoneDnssec:ZoneDnssec", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneDnssec resources.
type zoneDnssecState struct {
	// Algorithm key code.
	Algorithm *string `pulumi:"algorithm"`
	// Digest hash.
	Digest *string `pulumi:"digest"`
	// Type of digest algorithm.
	DigestAlgorithm *string `pulumi:"digestAlgorithm"`
	// Coded type for digest algorithm.
	DigestType *string `pulumi:"digestType"`
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	DnssecMultiSigner *bool `pulumi:"dnssecMultiSigner"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
	// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
	// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
	// details.
	DnssecPresigned *bool `pulumi:"dnssecPresigned"`
	// Full DS record.
	Ds *string `pulumi:"ds"`
	// Flag for DNSSEC record.
	Flags *float64 `pulumi:"flags"`
	// Code for key tag.
	KeyTag *float64 `pulumi:"keyTag"`
	// Algorithm key type.
	KeyType *string `pulumi:"keyType"`
	// When DNSSEC was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Public key for DS record.
	PublicKey *string `pulumi:"publicKey"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneDnssecState struct {
	// Algorithm key code.
	Algorithm pulumi.StringPtrInput
	// Digest hash.
	Digest pulumi.StringPtrInput
	// Type of digest algorithm.
	DigestAlgorithm pulumi.StringPtrInput
	// Coded type for digest algorithm.
	DigestType pulumi.StringPtrInput
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	DnssecMultiSigner pulumi.BoolPtrInput
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
	// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
	// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
	// details.
	DnssecPresigned pulumi.BoolPtrInput
	// Full DS record.
	Ds pulumi.StringPtrInput
	// Flag for DNSSEC record.
	Flags pulumi.Float64PtrInput
	// Code for key tag.
	KeyTag pulumi.Float64PtrInput
	// Algorithm key type.
	KeyType pulumi.StringPtrInput
	// When DNSSEC was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Public key for DS record.
	PublicKey pulumi.StringPtrInput
	// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
	Status pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (ZoneDnssecState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneDnssecState)(nil)).Elem()
}

type zoneDnssecArgs struct {
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	DnssecMultiSigner *bool `pulumi:"dnssecMultiSigner"`
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
	// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
	// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
	// details.
	DnssecPresigned *bool `pulumi:"dnssecPresigned"`
	// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
	Status *string `pulumi:"status"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneDnssec resource.
type ZoneDnssecArgs struct {
	// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
	// providers to serve a DNSSEC-signed zone at the same time.
	// This is required for DNSKEY records (except those automatically
	// generated by Cloudflare) to be added to the zone.
	DnssecMultiSigner pulumi.BoolPtrInput
	// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
	// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
	// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
	// details.
	DnssecPresigned pulumi.BoolPtrInput
	// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
	Status pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (ZoneDnssecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneDnssecArgs)(nil)).Elem()
}

type ZoneDnssecInput interface {
	pulumi.Input

	ToZoneDnssecOutput() ZoneDnssecOutput
	ToZoneDnssecOutputWithContext(ctx context.Context) ZoneDnssecOutput
}

func (*ZoneDnssec) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneDnssec)(nil)).Elem()
}

func (i *ZoneDnssec) ToZoneDnssecOutput() ZoneDnssecOutput {
	return i.ToZoneDnssecOutputWithContext(context.Background())
}

func (i *ZoneDnssec) ToZoneDnssecOutputWithContext(ctx context.Context) ZoneDnssecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnssecOutput)
}

// ZoneDnssecArrayInput is an input type that accepts ZoneDnssecArray and ZoneDnssecArrayOutput values.
// You can construct a concrete instance of `ZoneDnssecArrayInput` via:
//
//	ZoneDnssecArray{ ZoneDnssecArgs{...} }
type ZoneDnssecArrayInput interface {
	pulumi.Input

	ToZoneDnssecArrayOutput() ZoneDnssecArrayOutput
	ToZoneDnssecArrayOutputWithContext(context.Context) ZoneDnssecArrayOutput
}

type ZoneDnssecArray []ZoneDnssecInput

func (ZoneDnssecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneDnssec)(nil)).Elem()
}

func (i ZoneDnssecArray) ToZoneDnssecArrayOutput() ZoneDnssecArrayOutput {
	return i.ToZoneDnssecArrayOutputWithContext(context.Background())
}

func (i ZoneDnssecArray) ToZoneDnssecArrayOutputWithContext(ctx context.Context) ZoneDnssecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnssecArrayOutput)
}

// ZoneDnssecMapInput is an input type that accepts ZoneDnssecMap and ZoneDnssecMapOutput values.
// You can construct a concrete instance of `ZoneDnssecMapInput` via:
//
//	ZoneDnssecMap{ "key": ZoneDnssecArgs{...} }
type ZoneDnssecMapInput interface {
	pulumi.Input

	ToZoneDnssecMapOutput() ZoneDnssecMapOutput
	ToZoneDnssecMapOutputWithContext(context.Context) ZoneDnssecMapOutput
}

type ZoneDnssecMap map[string]ZoneDnssecInput

func (ZoneDnssecMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneDnssec)(nil)).Elem()
}

func (i ZoneDnssecMap) ToZoneDnssecMapOutput() ZoneDnssecMapOutput {
	return i.ToZoneDnssecMapOutputWithContext(context.Background())
}

func (i ZoneDnssecMap) ToZoneDnssecMapOutputWithContext(ctx context.Context) ZoneDnssecMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneDnssecMapOutput)
}

type ZoneDnssecOutput struct{ *pulumi.OutputState }

func (ZoneDnssecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneDnssec)(nil)).Elem()
}

func (o ZoneDnssecOutput) ToZoneDnssecOutput() ZoneDnssecOutput {
	return o
}

func (o ZoneDnssecOutput) ToZoneDnssecOutputWithContext(ctx context.Context) ZoneDnssecOutput {
	return o
}

// Algorithm key code.
func (o ZoneDnssecOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// Digest hash.
func (o ZoneDnssecOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.Digest }).(pulumi.StringOutput)
}

// Type of digest algorithm.
func (o ZoneDnssecOutput) DigestAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.DigestAlgorithm }).(pulumi.StringOutput)
}

// Coded type for digest algorithm.
func (o ZoneDnssecOutput) DigestType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.DigestType }).(pulumi.StringOutput)
}

// If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
// providers to serve a DNSSEC-signed zone at the same time.
// This is required for DNSKEY records (except those automatically
// generated by Cloudflare) to be added to the zone.
func (o ZoneDnssecOutput) DnssecMultiSigner() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.BoolPtrOutput { return v.DnssecMultiSigner }).(pulumi.BoolPtrOutput)
}

// If true, allows Cloudflare to transfer in a DNSSEC-signed zone including signatures from an external provider, without
// requiring Cloudflare to sign any records on the fly. Note that this feature has some limitations. See [Cloudflare as
// Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for
// details.
func (o ZoneDnssecOutput) DnssecPresigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.BoolPtrOutput { return v.DnssecPresigned }).(pulumi.BoolPtrOutput)
}

// Full DS record.
func (o ZoneDnssecOutput) Ds() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.Ds }).(pulumi.StringOutput)
}

// Flag for DNSSEC record.
func (o ZoneDnssecOutput) Flags() pulumi.Float64Output {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.Float64Output { return v.Flags }).(pulumi.Float64Output)
}

// Code for key tag.
func (o ZoneDnssecOutput) KeyTag() pulumi.Float64Output {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.Float64Output { return v.KeyTag }).(pulumi.Float64Output)
}

// Algorithm key type.
func (o ZoneDnssecOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// When DNSSEC was last modified.
func (o ZoneDnssecOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Public key for DS record.
func (o ZoneDnssecOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Status of DNSSEC, based on user-desired state and presence of necessary records. Available values: "active", "disabled".
func (o ZoneDnssecOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Identifier.
func (o ZoneDnssecOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneDnssec) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneDnssecArrayOutput struct{ *pulumi.OutputState }

func (ZoneDnssecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneDnssec)(nil)).Elem()
}

func (o ZoneDnssecArrayOutput) ToZoneDnssecArrayOutput() ZoneDnssecArrayOutput {
	return o
}

func (o ZoneDnssecArrayOutput) ToZoneDnssecArrayOutputWithContext(ctx context.Context) ZoneDnssecArrayOutput {
	return o
}

func (o ZoneDnssecArrayOutput) Index(i pulumi.IntInput) ZoneDnssecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneDnssec {
		return vs[0].([]*ZoneDnssec)[vs[1].(int)]
	}).(ZoneDnssecOutput)
}

type ZoneDnssecMapOutput struct{ *pulumi.OutputState }

func (ZoneDnssecMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneDnssec)(nil)).Elem()
}

func (o ZoneDnssecMapOutput) ToZoneDnssecMapOutput() ZoneDnssecMapOutput {
	return o
}

func (o ZoneDnssecMapOutput) ToZoneDnssecMapOutputWithContext(ctx context.Context) ZoneDnssecMapOutput {
	return o
}

func (o ZoneDnssecMapOutput) MapIndex(k pulumi.StringInput) ZoneDnssecOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneDnssec {
		return vs[0].(map[string]*ZoneDnssec)[vs[1].(string)]
	}).(ZoneDnssecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnssecInput)(nil)).Elem(), &ZoneDnssec{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnssecArrayInput)(nil)).Elem(), ZoneDnssecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneDnssecMapInput)(nil)).Elem(), ZoneDnssecMap{})
	pulumi.RegisterOutputType(ZoneDnssecOutput{})
	pulumi.RegisterOutputType(ZoneDnssecArrayOutput{})
	pulumi.RegisterOutputType(ZoneDnssecMapOutput{})
}
