// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Content Scanning resource to be used for managing the status of the Content Scanning feature within a specific zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enable Content Scanning
//			_, err := cloudflare.NewContentScanning(ctx, "example", &cloudflare.ContentScanningArgs{
//				ZoneId:  pulumi.String("399c6f4950c01a5a141b99ff7fbcbd8b"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/contentScanning:ContentScanning example <zone_id>
// ```
type ContentScanning struct {
	pulumi.CustomResourceState

	// State of the Content Scanning feature
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewContentScanning registers a new resource with the given unique name, arguments, and options.
func NewContentScanning(ctx *pulumi.Context,
	name string, args *ContentScanningArgs, opts ...pulumi.ResourceOption) (*ContentScanning, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContentScanning
	err := ctx.RegisterResource("cloudflare:index/contentScanning:ContentScanning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentScanning gets an existing ContentScanning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentScanning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentScanningState, opts ...pulumi.ResourceOption) (*ContentScanning, error) {
	var resource ContentScanning
	err := ctx.ReadResource("cloudflare:index/contentScanning:ContentScanning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentScanning resources.
type contentScanningState struct {
	// State of the Content Scanning feature
	Enabled *bool `pulumi:"enabled"`
	// The zone identifier to target for the resource.
	ZoneId *string `pulumi:"zoneId"`
}

type ContentScanningState struct {
	// State of the Content Scanning feature
	Enabled pulumi.BoolPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringPtrInput
}

func (ContentScanningState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentScanningState)(nil)).Elem()
}

type contentScanningArgs struct {
	// State of the Content Scanning feature
	Enabled bool `pulumi:"enabled"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ContentScanning resource.
type ContentScanningArgs struct {
	// State of the Content Scanning feature
	Enabled pulumi.BoolInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput
}

func (ContentScanningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentScanningArgs)(nil)).Elem()
}

type ContentScanningInput interface {
	pulumi.Input

	ToContentScanningOutput() ContentScanningOutput
	ToContentScanningOutputWithContext(ctx context.Context) ContentScanningOutput
}

func (*ContentScanning) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentScanning)(nil)).Elem()
}

func (i *ContentScanning) ToContentScanningOutput() ContentScanningOutput {
	return i.ToContentScanningOutputWithContext(context.Background())
}

func (i *ContentScanning) ToContentScanningOutputWithContext(ctx context.Context) ContentScanningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningOutput)
}

// ContentScanningArrayInput is an input type that accepts ContentScanningArray and ContentScanningArrayOutput values.
// You can construct a concrete instance of `ContentScanningArrayInput` via:
//
//	ContentScanningArray{ ContentScanningArgs{...} }
type ContentScanningArrayInput interface {
	pulumi.Input

	ToContentScanningArrayOutput() ContentScanningArrayOutput
	ToContentScanningArrayOutputWithContext(context.Context) ContentScanningArrayOutput
}

type ContentScanningArray []ContentScanningInput

func (ContentScanningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentScanning)(nil)).Elem()
}

func (i ContentScanningArray) ToContentScanningArrayOutput() ContentScanningArrayOutput {
	return i.ToContentScanningArrayOutputWithContext(context.Background())
}

func (i ContentScanningArray) ToContentScanningArrayOutputWithContext(ctx context.Context) ContentScanningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningArrayOutput)
}

// ContentScanningMapInput is an input type that accepts ContentScanningMap and ContentScanningMapOutput values.
// You can construct a concrete instance of `ContentScanningMapInput` via:
//
//	ContentScanningMap{ "key": ContentScanningArgs{...} }
type ContentScanningMapInput interface {
	pulumi.Input

	ToContentScanningMapOutput() ContentScanningMapOutput
	ToContentScanningMapOutputWithContext(context.Context) ContentScanningMapOutput
}

type ContentScanningMap map[string]ContentScanningInput

func (ContentScanningMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentScanning)(nil)).Elem()
}

func (i ContentScanningMap) ToContentScanningMapOutput() ContentScanningMapOutput {
	return i.ToContentScanningMapOutputWithContext(context.Background())
}

func (i ContentScanningMap) ToContentScanningMapOutputWithContext(ctx context.Context) ContentScanningMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningMapOutput)
}

type ContentScanningOutput struct{ *pulumi.OutputState }

func (ContentScanningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentScanning)(nil)).Elem()
}

func (o ContentScanningOutput) ToContentScanningOutput() ContentScanningOutput {
	return o
}

func (o ContentScanningOutput) ToContentScanningOutputWithContext(ctx context.Context) ContentScanningOutput {
	return o
}

// State of the Content Scanning feature
func (o ContentScanningOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ContentScanning) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The zone identifier to target for the resource.
func (o ContentScanningOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentScanning) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ContentScanningArrayOutput struct{ *pulumi.OutputState }

func (ContentScanningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentScanning)(nil)).Elem()
}

func (o ContentScanningArrayOutput) ToContentScanningArrayOutput() ContentScanningArrayOutput {
	return o
}

func (o ContentScanningArrayOutput) ToContentScanningArrayOutputWithContext(ctx context.Context) ContentScanningArrayOutput {
	return o
}

func (o ContentScanningArrayOutput) Index(i pulumi.IntInput) ContentScanningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentScanning {
		return vs[0].([]*ContentScanning)[vs[1].(int)]
	}).(ContentScanningOutput)
}

type ContentScanningMapOutput struct{ *pulumi.OutputState }

func (ContentScanningMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentScanning)(nil)).Elem()
}

func (o ContentScanningMapOutput) ToContentScanningMapOutput() ContentScanningMapOutput {
	return o
}

func (o ContentScanningMapOutput) ToContentScanningMapOutputWithContext(ctx context.Context) ContentScanningMapOutput {
	return o
}

func (o ContentScanningMapOutput) MapIndex(k pulumi.StringInput) ContentScanningOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentScanning {
		return vs[0].(map[string]*ContentScanning)[vs[1].(string)]
	}).(ContentScanningOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningInput)(nil)).Elem(), &ContentScanning{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningArrayInput)(nil)).Elem(), ContentScanningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningMapInput)(nil)).Elem(), ContentScanningMap{})
	pulumi.RegisterOutputType(ContentScanningOutput{})
	pulumi.RegisterOutputType(ContentScanningArrayOutput{})
	pulumi.RegisterOutputType(ContentScanningMapOutput{})
}
