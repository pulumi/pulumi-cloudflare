// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> This resource is no longer recommended. Please use the `Worker`, `WorkerVersion`, and `WorkersDeployment` resources instead. See how to use them in the [developer documentation](https://developers.cloudflare.com/workers/platform/infrastructure-as-code/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFilesha256, err := std.Filesha256(ctx, &std.Filesha256Args{
//				Input: "worker.js",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewWorkersScript(ctx, "example_workers_script", &cloudflare.WorkersScriptArgs{
//				AccountId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				ScriptName: pulumi.String("this-is_my_script-01"),
//				Assets: &cloudflare.WorkersScriptAssetsArgs{
//					Config: &cloudflare.WorkersScriptAssetsConfigArgs{
//						Headers: pulumi.String(`        /dashboard/*
//	        X-Frame-Options: DENY
//
//	        /static/*
//	        Access-Control-Allow-Origin: *
//
// `),
//
//						Redirects:        pulumi.String("        /foo /bar 301\n        /news/* /blog/:splat\n"),
//						HtmlHandling:     pulumi.String("auto-trailing-slash"),
//						NotFoundHandling: pulumi.String("none"),
//						RunWorkerFirst:   pulumi.Bool(false),
//					},
//					Jwt: pulumi.String("jwt"),
//				},
//				Bindings: cloudflare.WorkersScriptBindingArray{
//					&cloudflare.WorkersScriptBindingArgs{
//						Name: pulumi.String("MY_ENV_VAR"),
//						Text: pulumi.String("my_data"),
//						Type: pulumi.String("plain_text"),
//					},
//				},
//				CompatibilityDate: pulumi.String("2021-01-01"),
//				CompatibilityFlags: pulumi.StringArray{
//					pulumi.String("nodejs_compat"),
//				},
//				ContentFile:   pulumi.String("worker.js"),
//				ContentSha256: pulumi.String(invokeFilesha256.Result),
//				KeepAssets:    pulumi.Bool(false),
//				KeepBindings: pulumi.StringArray{
//					pulumi.String("kv_namespace"),
//				},
//				Limits: &cloudflare.WorkersScriptLimitsArgs{
//					Cpu_ms: 50,
//				},
//				Logpush:    pulumi.Bool(false),
//				MainModule: pulumi.String("worker.js"),
//				Migrations: map[string]interface{}{
//					"deleted_classes": []string{
//						"string",
//					},
//					"new_classes": []string{
//						"string",
//					},
//					"new_sqlite_classes": []string{
//						"string",
//					},
//					"new_tag": "v2",
//					"old_tag": "v1",
//					"renamed_classes": []map[string]interface{}{
//						map[string]interface{}{
//							"from": "from",
//							"to":   "to",
//						},
//					},
//					"transferred_classes": []map[string]interface{}{
//						map[string]interface{}{
//							"from":       "from",
//							"fromScript": "from_script",
//							"to":         "to",
//						},
//					},
//				},
//				Observability: &cloudflare.WorkersScriptObservabilityArgs{
//					Enabled:            pulumi.Bool(true),
//					Head_sampling_rate: 0.1,
//					Logs: &cloudflare.WorkersScriptObservabilityLogsArgs{
//						Enabled:        pulumi.Bool(true),
//						InvocationLogs: pulumi.Bool(true),
//						Destinations: pulumi.StringArray{
//							pulumi.String("cloudflare"),
//						},
//						HeadSamplingRate: pulumi.Float64(0.1),
//						Persist:          pulumi.Bool(true),
//					},
//				},
//				Placement: &cloudflare.WorkersScriptPlacementArgs{
//					Mode: pulumi.String("smart"),
//				},
//				TailConsumers: cloudflare.WorkersScriptTailConsumerArray{
//					&cloudflare.WorkersScriptTailConsumerArgs{
//						Service:     pulumi.String("my-log-consumer"),
//						Environment: pulumi.String("production"),
//						Namespace:   pulumi.String("my-namespace"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workerScript:WorkerScript example '<account_id>/<script_name>'
// ```
//
// Deprecated: cloudflare.index/workerscript.WorkerScript has been deprecated in favor of cloudflare.index/workersscript.WorkersScript
type WorkerScript struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Configuration for assets within a Worker.
	Assets WorkerScriptAssetsPtrOutput `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerScriptBindingArrayOutput `pulumi:"bindings"`
	// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrOutput `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringOutput `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayOutput `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
	ContentFile pulumi.StringPtrOutput `pulumi:"contentFile"`
	// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
	ContentSha256 pulumi.StringPtrOutput `pulumi:"contentSha256"`
	// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// When the script was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The names of handlers exported as part of the default export.
	Handlers pulumi.StringArrayOutput `pulumi:"handlers"`
	// Whether a Worker contains assets.
	HasAssets pulumi.BoolOutput `pulumi:"hasAssets"`
	// Whether a Worker contains modules.
	HasModules pulumi.BoolOutput `pulumi:"hasModules"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrOutput `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayOutput `pulumi:"keepBindings"`
	// The client most recently used to deploy this Worker.
	LastDeployedFrom pulumi.StringOutput `pulumi:"lastDeployedFrom"`
	// Limits to apply for this Worker.
	Limits WorkerScriptLimitsPtrOutput `pulumi:"limits"`
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolOutput `pulumi:"logpush"`
	// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrOutput `pulumi:"mainModule"`
	// The tag of the Durable Object migration that was most recently applied for this Worker.
	MigrationTag pulumi.StringOutput `pulumi:"migrationTag"`
	// When the script was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Named exports, such as Durable Object class implementations and named entrypoints.
	NamedHandlers WorkerScriptNamedHandlerArrayOutput `pulumi:"namedHandlers"`
	// Observability settings for the Worker.
	Observability WorkerScriptObservabilityPtrOutput `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkerScriptPlacementOutput `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName    pulumi.StringOutput `pulumi:"scriptName"`
	StartupTimeMs pulumi.IntOutput    `pulumi:"startupTimeMs"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkerScriptTailConsumerArrayOutput `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard", "bundled", "unbound".
	UsageModel pulumi.StringOutput `pulumi:"usageModel"`
}

// NewWorkerScript registers a new resource with the given unique name, arguments, and options.
func NewWorkerScript(ctx *pulumi.Context,
	name string, args *WorkerScriptArgs, opts ...pulumi.ResourceOption) (*WorkerScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/workerScript:WorkerScript"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkerScript
	err := ctx.RegisterResource("cloudflare:index/workerScript:WorkerScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerScript gets an existing WorkerScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerScriptState, opts ...pulumi.ResourceOption) (*WorkerScript, error) {
	var resource WorkerScript
	err := ctx.ReadResource("cloudflare:index/workerScript:WorkerScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerScript resources.
type workerScriptState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// Configuration for assets within a Worker.
	Assets *WorkerScriptAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkerScriptBinding `pulumi:"bindings"`
	// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
	Content *string `pulumi:"content"`
	// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
	ContentFile *string `pulumi:"contentFile"`
	// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
	ContentSha256 *string `pulumi:"contentSha256"`
	// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
	ContentType *string `pulumi:"contentType"`
	// When the script was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag *string `pulumi:"etag"`
	// The names of handlers exported as part of the default export.
	Handlers []string `pulumi:"handlers"`
	// Whether a Worker contains assets.
	HasAssets *bool `pulumi:"hasAssets"`
	// Whether a Worker contains modules.
	HasModules *bool `pulumi:"hasModules"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings []string `pulumi:"keepBindings"`
	// The client most recently used to deploy this Worker.
	LastDeployedFrom *string `pulumi:"lastDeployedFrom"`
	// Limits to apply for this Worker.
	Limits *WorkerScriptLimits `pulumi:"limits"`
	// Whether Logpush is turned on for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `pulumi:"mainModule"`
	// The tag of the Durable Object migration that was most recently applied for this Worker.
	MigrationTag *string `pulumi:"migrationTag"`
	// When the script was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Named exports, such as Durable Object class implementations and named entrypoints.
	NamedHandlers []WorkerScriptNamedHandler `pulumi:"namedHandlers"`
	// Observability settings for the Worker.
	Observability *WorkerScriptObservability `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement *WorkerScriptPlacement `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName    *string `pulumi:"scriptName"`
	StartupTimeMs *int    `pulumi:"startupTimeMs"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers []WorkerScriptTailConsumer `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard", "bundled", "unbound".
	UsageModel *string `pulumi:"usageModel"`
}

type WorkerScriptState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// Configuration for assets within a Worker.
	Assets WorkerScriptAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerScriptBindingArrayInput
	// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
	Content pulumi.StringPtrInput
	// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
	ContentFile pulumi.StringPtrInput
	// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
	ContentSha256 pulumi.StringPtrInput
	// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
	ContentType pulumi.StringPtrInput
	// When the script was created.
	CreatedOn pulumi.StringPtrInput
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag pulumi.StringPtrInput
	// The names of handlers exported as part of the default export.
	Handlers pulumi.StringArrayInput
	// Whether a Worker contains assets.
	HasAssets pulumi.BoolPtrInput
	// Whether a Worker contains modules.
	HasModules pulumi.BoolPtrInput
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrInput
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayInput
	// The client most recently used to deploy this Worker.
	LastDeployedFrom pulumi.StringPtrInput
	// Limits to apply for this Worker.
	Limits WorkerScriptLimitsPtrInput
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrInput
	// The tag of the Durable Object migration that was most recently applied for this Worker.
	MigrationTag pulumi.StringPtrInput
	// When the script was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Named exports, such as Durable Object class implementations and named entrypoints.
	NamedHandlers WorkerScriptNamedHandlerArrayInput
	// Observability settings for the Worker.
	Observability WorkerScriptObservabilityPtrInput
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkerScriptPlacementPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName    pulumi.StringPtrInput
	StartupTimeMs pulumi.IntPtrInput
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkerScriptTailConsumerArrayInput
	// Usage model for the Worker invocations.
	// Available values: "standard", "bundled", "unbound".
	UsageModel pulumi.StringPtrInput
}

func (WorkerScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerScriptState)(nil)).Elem()
}

type workerScriptArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Configuration for assets within a Worker.
	Assets *WorkerScriptAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkerScriptBinding `pulumi:"bindings"`
	// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
	Content *string `pulumi:"content"`
	// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
	ContentFile *string `pulumi:"contentFile"`
	// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
	ContentSha256 *string `pulumi:"contentSha256"`
	// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
	ContentType *string `pulumi:"contentType"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings []string `pulumi:"keepBindings"`
	// Limits to apply for this Worker.
	Limits *WorkerScriptLimits `pulumi:"limits"`
	// Whether Logpush is turned on for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `pulumi:"mainModule"`
	// Observability settings for the Worker.
	Observability *WorkerScriptObservability `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement *WorkerScriptPlacement `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers []WorkerScriptTailConsumer `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard", "bundled", "unbound".
	UsageModel *string `pulumi:"usageModel"`
}

// The set of arguments for constructing a WorkerScript resource.
type WorkerScriptArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// Configuration for assets within a Worker.
	Assets WorkerScriptAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkerScriptBindingArrayInput
	// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
	Content pulumi.StringPtrInput
	// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
	ContentFile pulumi.StringPtrInput
	// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
	ContentSha256 pulumi.StringPtrInput
	// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
	ContentType pulumi.StringPtrInput
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrInput
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayInput
	// Limits to apply for this Worker.
	Limits WorkerScriptLimitsPtrInput
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrInput
	// Observability settings for the Worker.
	Observability WorkerScriptObservabilityPtrInput
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkerScriptPlacementPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkerScriptTailConsumerArrayInput
	// Usage model for the Worker invocations.
	// Available values: "standard", "bundled", "unbound".
	UsageModel pulumi.StringPtrInput
}

func (WorkerScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerScriptArgs)(nil)).Elem()
}

type WorkerScriptInput interface {
	pulumi.Input

	ToWorkerScriptOutput() WorkerScriptOutput
	ToWorkerScriptOutputWithContext(ctx context.Context) WorkerScriptOutput
}

func (*WorkerScript) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerScript)(nil)).Elem()
}

func (i *WorkerScript) ToWorkerScriptOutput() WorkerScriptOutput {
	return i.ToWorkerScriptOutputWithContext(context.Background())
}

func (i *WorkerScript) ToWorkerScriptOutputWithContext(ctx context.Context) WorkerScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerScriptOutput)
}

// WorkerScriptArrayInput is an input type that accepts WorkerScriptArray and WorkerScriptArrayOutput values.
// You can construct a concrete instance of `WorkerScriptArrayInput` via:
//
//	WorkerScriptArray{ WorkerScriptArgs{...} }
type WorkerScriptArrayInput interface {
	pulumi.Input

	ToWorkerScriptArrayOutput() WorkerScriptArrayOutput
	ToWorkerScriptArrayOutputWithContext(context.Context) WorkerScriptArrayOutput
}

type WorkerScriptArray []WorkerScriptInput

func (WorkerScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerScript)(nil)).Elem()
}

func (i WorkerScriptArray) ToWorkerScriptArrayOutput() WorkerScriptArrayOutput {
	return i.ToWorkerScriptArrayOutputWithContext(context.Background())
}

func (i WorkerScriptArray) ToWorkerScriptArrayOutputWithContext(ctx context.Context) WorkerScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerScriptArrayOutput)
}

// WorkerScriptMapInput is an input type that accepts WorkerScriptMap and WorkerScriptMapOutput values.
// You can construct a concrete instance of `WorkerScriptMapInput` via:
//
//	WorkerScriptMap{ "key": WorkerScriptArgs{...} }
type WorkerScriptMapInput interface {
	pulumi.Input

	ToWorkerScriptMapOutput() WorkerScriptMapOutput
	ToWorkerScriptMapOutputWithContext(context.Context) WorkerScriptMapOutput
}

type WorkerScriptMap map[string]WorkerScriptInput

func (WorkerScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerScript)(nil)).Elem()
}

func (i WorkerScriptMap) ToWorkerScriptMapOutput() WorkerScriptMapOutput {
	return i.ToWorkerScriptMapOutputWithContext(context.Background())
}

func (i WorkerScriptMap) ToWorkerScriptMapOutputWithContext(ctx context.Context) WorkerScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerScriptMapOutput)
}

type WorkerScriptOutput struct{ *pulumi.OutputState }

func (WorkerScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerScript)(nil)).Elem()
}

func (o WorkerScriptOutput) ToWorkerScriptOutput() WorkerScriptOutput {
	return o
}

func (o WorkerScriptOutput) ToWorkerScriptOutputWithContext(ctx context.Context) WorkerScriptOutput {
	return o
}

// Identifier.
func (o WorkerScriptOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Configuration for assets within a Worker.
func (o WorkerScriptOutput) Assets() WorkerScriptAssetsPtrOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptAssetsPtrOutput { return v.Assets }).(WorkerScriptAssetsPtrOutput)
}

// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
func (o WorkerScriptOutput) Bindings() WorkerScriptBindingArrayOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptBindingArrayOutput { return v.Bindings }).(WorkerScriptBindingArrayOutput)
}

// Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
func (o WorkerScriptOutput) BodyPart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.BodyPart }).(pulumi.StringPtrOutput)
}

// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
func (o WorkerScriptOutput) CompatibilityDate() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.CompatibilityDate }).(pulumi.StringOutput)
}

// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
func (o WorkerScriptOutput) CompatibilityFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringArrayOutput { return v.CompatibilityFlags }).(pulumi.StringArrayOutput)
}

// Module or Service Worker contents of the Worker. Conflicts with `contentFile`.
func (o WorkerScriptOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `contentSha256`.
func (o WorkerScriptOutput) ContentFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.ContentFile }).(pulumi.StringPtrOutput)
}

// SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `contentFile` is specified.
func (o WorkerScriptOutput) ContentSha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.ContentSha256 }).(pulumi.StringPtrOutput)
}

// Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. "text/x-python").
func (o WorkerScriptOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

// When the script was created.
func (o WorkerScriptOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Hashed script content, can be used in a If-None-Match header when updating.
func (o WorkerScriptOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The names of handlers exported as part of the default export.
func (o WorkerScriptOutput) Handlers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringArrayOutput { return v.Handlers }).(pulumi.StringArrayOutput)
}

// Whether a Worker contains assets.
func (o WorkerScriptOutput) HasAssets() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.BoolOutput { return v.HasAssets }).(pulumi.BoolOutput)
}

// Whether a Worker contains modules.
func (o WorkerScriptOutput) HasModules() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.BoolOutput { return v.HasModules }).(pulumi.BoolOutput)
}

// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
func (o WorkerScriptOutput) KeepAssets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.BoolPtrOutput { return v.KeepAssets }).(pulumi.BoolPtrOutput)
}

// List of binding types to keep from previous_upload.
func (o WorkerScriptOutput) KeepBindings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringArrayOutput { return v.KeepBindings }).(pulumi.StringArrayOutput)
}

// The client most recently used to deploy this Worker.
func (o WorkerScriptOutput) LastDeployedFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.LastDeployedFrom }).(pulumi.StringOutput)
}

// Limits to apply for this Worker.
func (o WorkerScriptOutput) Limits() WorkerScriptLimitsPtrOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptLimitsPtrOutput { return v.Limits }).(WorkerScriptLimitsPtrOutput)
}

// Whether Logpush is turned on for the Worker.
func (o WorkerScriptOutput) Logpush() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.BoolOutput { return v.Logpush }).(pulumi.BoolOutput)
}

// Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
func (o WorkerScriptOutput) MainModule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringPtrOutput { return v.MainModule }).(pulumi.StringPtrOutput)
}

// The tag of the Durable Object migration that was most recently applied for this Worker.
func (o WorkerScriptOutput) MigrationTag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.MigrationTag }).(pulumi.StringOutput)
}

// When the script was last modified.
func (o WorkerScriptOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Named exports, such as Durable Object class implementations and named entrypoints.
func (o WorkerScriptOutput) NamedHandlers() WorkerScriptNamedHandlerArrayOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptNamedHandlerArrayOutput { return v.NamedHandlers }).(WorkerScriptNamedHandlerArrayOutput)
}

// Observability settings for the Worker.
func (o WorkerScriptOutput) Observability() WorkerScriptObservabilityPtrOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptObservabilityPtrOutput { return v.Observability }).(WorkerScriptObservabilityPtrOutput)
}

// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
func (o WorkerScriptOutput) Placement() WorkerScriptPlacementOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptPlacementOutput { return v.Placement }).(WorkerScriptPlacementOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkerScriptOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

func (o WorkerScriptOutput) StartupTimeMs() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.IntOutput { return v.StartupTimeMs }).(pulumi.IntOutput)
}

// List of Workers that will consume logs from the attached Worker.
func (o WorkerScriptOutput) TailConsumers() WorkerScriptTailConsumerArrayOutput {
	return o.ApplyT(func(v *WorkerScript) WorkerScriptTailConsumerArrayOutput { return v.TailConsumers }).(WorkerScriptTailConsumerArrayOutput)
}

// Usage model for the Worker invocations.
// Available values: "standard", "bundled", "unbound".
func (o WorkerScriptOutput) UsageModel() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkerScript) pulumi.StringOutput { return v.UsageModel }).(pulumi.StringOutput)
}

type WorkerScriptArrayOutput struct{ *pulumi.OutputState }

func (WorkerScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkerScript)(nil)).Elem()
}

func (o WorkerScriptArrayOutput) ToWorkerScriptArrayOutput() WorkerScriptArrayOutput {
	return o
}

func (o WorkerScriptArrayOutput) ToWorkerScriptArrayOutputWithContext(ctx context.Context) WorkerScriptArrayOutput {
	return o
}

func (o WorkerScriptArrayOutput) Index(i pulumi.IntInput) WorkerScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkerScript {
		return vs[0].([]*WorkerScript)[vs[1].(int)]
	}).(WorkerScriptOutput)
}

type WorkerScriptMapOutput struct{ *pulumi.OutputState }

func (WorkerScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkerScript)(nil)).Elem()
}

func (o WorkerScriptMapOutput) ToWorkerScriptMapOutput() WorkerScriptMapOutput {
	return o
}

func (o WorkerScriptMapOutput) ToWorkerScriptMapOutputWithContext(ctx context.Context) WorkerScriptMapOutput {
	return o
}

func (o WorkerScriptMapOutput) MapIndex(k pulumi.StringInput) WorkerScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkerScript {
		return vs[0].(map[string]*WorkerScript)[vs[1].(string)]
	}).(WorkerScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerScriptInput)(nil)).Elem(), &WorkerScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerScriptArrayInput)(nil)).Elem(), WorkerScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerScriptMapInput)(nil)).Elem(), WorkerScriptMap{})
	pulumi.RegisterOutputType(WorkerScriptOutput{})
	pulumi.RegisterOutputType(WorkerScriptArrayOutput{})
	pulumi.RegisterOutputType(WorkerScriptMapOutput{})
}
