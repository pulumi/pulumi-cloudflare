// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Magic Firewall is a network-level firewall to protect networks that are onboarded to Cloudflare's Magic Transit. This resource
// creates a root ruleset on the account level and contains one or more rules. Rules can be crafted in Wireshark syntax and
// are evaluated in order, with the first rule having the highest priority.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicFirewallRuleset(ctx, "example", &cloudflare.MagicFirewallRulesetArgs{
//				AccountId:   pulumi.String("d41d8cd98f00b204e9800998ecf8427e"),
//				Description: pulumi.String("Global mitigations"),
//				Name:        pulumi.String("Magic Transit Ruleset"),
//				Rules: pulumi.StringMapArray{
//					pulumi.StringMap{
//						"action":      pulumi.String("allow"),
//						"description": pulumi.String("Allow TCP Ephemeral Ports"),
//						"enabled":     pulumi.String("true"),
//						"expression":  pulumi.String("tcp.dstport in { 32768..65535 }"),
//					},
//					pulumi.StringMap{
//						"action":      pulumi.String("block"),
//						"description": pulumi.String("Block all"),
//						"enabled":     pulumi.String("true"),
//						"expression":  pulumi.String("ip.len >= 0"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # An existing Magic Firewall Ruleset can be imported using the account ID and ruleset ID
//
// ```sh
//
//	$ pulumi import cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset example d41d8cd98f00b204e9800998ecf8427e/cb029e245cfdd66dc8d2e570d5dd3322
//
// ```
type MagicFirewallRuleset struct {
	pulumi.CustomResourceState

	// The ID of the account where the ruleset is being created.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A note that can be used to annotate the rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the ruleset.
	Name  pulumi.StringOutput         `pulumi:"name"`
	Rules pulumi.StringMapArrayOutput `pulumi:"rules"`
}

// NewMagicFirewallRuleset registers a new resource with the given unique name, arguments, and options.
func NewMagicFirewallRuleset(ctx *pulumi.Context,
	name string, args *MagicFirewallRulesetArgs, opts ...pulumi.ResourceOption) (*MagicFirewallRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicFirewallRuleset
	err := ctx.RegisterResource("cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicFirewallRuleset gets an existing MagicFirewallRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicFirewallRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicFirewallRulesetState, opts ...pulumi.ResourceOption) (*MagicFirewallRuleset, error) {
	var resource MagicFirewallRuleset
	err := ctx.ReadResource("cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicFirewallRuleset resources.
type magicFirewallRulesetState struct {
	// The ID of the account where the ruleset is being created.
	AccountId *string `pulumi:"accountId"`
	// A note that can be used to annotate the rule.
	Description *string `pulumi:"description"`
	// The name of the ruleset.
	Name  *string             `pulumi:"name"`
	Rules []map[string]string `pulumi:"rules"`
}

type MagicFirewallRulesetState struct {
	// The ID of the account where the ruleset is being created.
	AccountId pulumi.StringPtrInput
	// A note that can be used to annotate the rule.
	Description pulumi.StringPtrInput
	// The name of the ruleset.
	Name  pulumi.StringPtrInput
	Rules pulumi.StringMapArrayInput
}

func (MagicFirewallRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicFirewallRulesetState)(nil)).Elem()
}

type magicFirewallRulesetArgs struct {
	// The ID of the account where the ruleset is being created.
	AccountId string `pulumi:"accountId"`
	// A note that can be used to annotate the rule.
	Description *string `pulumi:"description"`
	// The name of the ruleset.
	Name  string              `pulumi:"name"`
	Rules []map[string]string `pulumi:"rules"`
}

// The set of arguments for constructing a MagicFirewallRuleset resource.
type MagicFirewallRulesetArgs struct {
	// The ID of the account where the ruleset is being created.
	AccountId pulumi.StringInput
	// A note that can be used to annotate the rule.
	Description pulumi.StringPtrInput
	// The name of the ruleset.
	Name  pulumi.StringInput
	Rules pulumi.StringMapArrayInput
}

func (MagicFirewallRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicFirewallRulesetArgs)(nil)).Elem()
}

type MagicFirewallRulesetInput interface {
	pulumi.Input

	ToMagicFirewallRulesetOutput() MagicFirewallRulesetOutput
	ToMagicFirewallRulesetOutputWithContext(ctx context.Context) MagicFirewallRulesetOutput
}

func (*MagicFirewallRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicFirewallRuleset)(nil)).Elem()
}

func (i *MagicFirewallRuleset) ToMagicFirewallRulesetOutput() MagicFirewallRulesetOutput {
	return i.ToMagicFirewallRulesetOutputWithContext(context.Background())
}

func (i *MagicFirewallRuleset) ToMagicFirewallRulesetOutputWithContext(ctx context.Context) MagicFirewallRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicFirewallRulesetOutput)
}

// MagicFirewallRulesetArrayInput is an input type that accepts MagicFirewallRulesetArray and MagicFirewallRulesetArrayOutput values.
// You can construct a concrete instance of `MagicFirewallRulesetArrayInput` via:
//
//	MagicFirewallRulesetArray{ MagicFirewallRulesetArgs{...} }
type MagicFirewallRulesetArrayInput interface {
	pulumi.Input

	ToMagicFirewallRulesetArrayOutput() MagicFirewallRulesetArrayOutput
	ToMagicFirewallRulesetArrayOutputWithContext(context.Context) MagicFirewallRulesetArrayOutput
}

type MagicFirewallRulesetArray []MagicFirewallRulesetInput

func (MagicFirewallRulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicFirewallRuleset)(nil)).Elem()
}

func (i MagicFirewallRulesetArray) ToMagicFirewallRulesetArrayOutput() MagicFirewallRulesetArrayOutput {
	return i.ToMagicFirewallRulesetArrayOutputWithContext(context.Background())
}

func (i MagicFirewallRulesetArray) ToMagicFirewallRulesetArrayOutputWithContext(ctx context.Context) MagicFirewallRulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicFirewallRulesetArrayOutput)
}

// MagicFirewallRulesetMapInput is an input type that accepts MagicFirewallRulesetMap and MagicFirewallRulesetMapOutput values.
// You can construct a concrete instance of `MagicFirewallRulesetMapInput` via:
//
//	MagicFirewallRulesetMap{ "key": MagicFirewallRulesetArgs{...} }
type MagicFirewallRulesetMapInput interface {
	pulumi.Input

	ToMagicFirewallRulesetMapOutput() MagicFirewallRulesetMapOutput
	ToMagicFirewallRulesetMapOutputWithContext(context.Context) MagicFirewallRulesetMapOutput
}

type MagicFirewallRulesetMap map[string]MagicFirewallRulesetInput

func (MagicFirewallRulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicFirewallRuleset)(nil)).Elem()
}

func (i MagicFirewallRulesetMap) ToMagicFirewallRulesetMapOutput() MagicFirewallRulesetMapOutput {
	return i.ToMagicFirewallRulesetMapOutputWithContext(context.Background())
}

func (i MagicFirewallRulesetMap) ToMagicFirewallRulesetMapOutputWithContext(ctx context.Context) MagicFirewallRulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicFirewallRulesetMapOutput)
}

type MagicFirewallRulesetOutput struct{ *pulumi.OutputState }

func (MagicFirewallRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicFirewallRuleset)(nil)).Elem()
}

func (o MagicFirewallRulesetOutput) ToMagicFirewallRulesetOutput() MagicFirewallRulesetOutput {
	return o
}

func (o MagicFirewallRulesetOutput) ToMagicFirewallRulesetOutputWithContext(ctx context.Context) MagicFirewallRulesetOutput {
	return o
}

// The ID of the account where the ruleset is being created.
func (o MagicFirewallRulesetOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicFirewallRuleset) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A note that can be used to annotate the rule.
func (o MagicFirewallRulesetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicFirewallRuleset) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the ruleset.
func (o MagicFirewallRulesetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicFirewallRuleset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MagicFirewallRulesetOutput) Rules() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *MagicFirewallRuleset) pulumi.StringMapArrayOutput { return v.Rules }).(pulumi.StringMapArrayOutput)
}

type MagicFirewallRulesetArrayOutput struct{ *pulumi.OutputState }

func (MagicFirewallRulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicFirewallRuleset)(nil)).Elem()
}

func (o MagicFirewallRulesetArrayOutput) ToMagicFirewallRulesetArrayOutput() MagicFirewallRulesetArrayOutput {
	return o
}

func (o MagicFirewallRulesetArrayOutput) ToMagicFirewallRulesetArrayOutputWithContext(ctx context.Context) MagicFirewallRulesetArrayOutput {
	return o
}

func (o MagicFirewallRulesetArrayOutput) Index(i pulumi.IntInput) MagicFirewallRulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicFirewallRuleset {
		return vs[0].([]*MagicFirewallRuleset)[vs[1].(int)]
	}).(MagicFirewallRulesetOutput)
}

type MagicFirewallRulesetMapOutput struct{ *pulumi.OutputState }

func (MagicFirewallRulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicFirewallRuleset)(nil)).Elem()
}

func (o MagicFirewallRulesetMapOutput) ToMagicFirewallRulesetMapOutput() MagicFirewallRulesetMapOutput {
	return o
}

func (o MagicFirewallRulesetMapOutput) ToMagicFirewallRulesetMapOutputWithContext(ctx context.Context) MagicFirewallRulesetMapOutput {
	return o
}

func (o MagicFirewallRulesetMapOutput) MapIndex(k pulumi.StringInput) MagicFirewallRulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicFirewallRuleset {
		return vs[0].(map[string]*MagicFirewallRuleset)[vs[1].(string)]
	}).(MagicFirewallRulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicFirewallRulesetInput)(nil)).Elem(), &MagicFirewallRuleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicFirewallRulesetArrayInput)(nil)).Elem(), MagicFirewallRulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicFirewallRulesetMapInput)(nil)).Elem(), MagicFirewallRulesetMap{})
	pulumi.RegisterOutputType(MagicFirewallRulesetOutput{})
	pulumi.RegisterOutputType(MagicFirewallRulesetArrayOutput{})
	pulumi.RegisterOutputType(MagicFirewallRulesetMapOutput{})
}
