// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupSchemaValidationSchemas(ctx, &cloudflare.LookupSchemaValidationSchemasArgs{
//				ZoneId:     "023e105f4ecef8ad9ca31a8372d0c353",
//				SchemaId:   pulumi.StringRef("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//				OmitSource: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSchemaValidationSchemas(ctx *pulumi.Context, args *LookupSchemaValidationSchemasArgs, opts ...pulumi.InvokeOption) (*LookupSchemaValidationSchemasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSchemaValidationSchemasResult
	err := ctx.Invoke("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaValidationSchemas.
type LookupSchemaValidationSchemasArgs struct {
	Filter *GetSchemaValidationSchemasFilter `pulumi:"filter"`
	// Omit the source-files of schemas and only retrieve their meta-data.
	OmitSource *bool `pulumi:"omitSource"`
	// UUID.
	SchemaId *string `pulumi:"schemaId"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getSchemaValidationSchemas.
type LookupSchemaValidationSchemasResult struct {
	CreatedAt string                            `pulumi:"createdAt"`
	Filter    *GetSchemaValidationSchemasFilter `pulumi:"filter"`
	// UUID.
	Id string `pulumi:"id"`
	// The kind of the schema
	// Available values: "openapiV3".
	Kind string `pulumi:"kind"`
	// A human-readable name for the schema
	Name string `pulumi:"name"`
	// Omit the source-files of schemas and only retrieve their meta-data.
	OmitSource bool `pulumi:"omitSource"`
	// UUID.
	SchemaId string `pulumi:"schemaId"`
	// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
	Source string `pulumi:"source"`
	// An indicator if this schema is enabled
	ValidationEnabled bool `pulumi:"validationEnabled"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupSchemaValidationSchemasOutput(ctx *pulumi.Context, args LookupSchemaValidationSchemasOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaValidationSchemasResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSchemaValidationSchemasResultOutput, error) {
			args := v.(LookupSchemaValidationSchemasArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getSchemaValidationSchemas:getSchemaValidationSchemas", args, LookupSchemaValidationSchemasResultOutput{}, options).(LookupSchemaValidationSchemasResultOutput), nil
		}).(LookupSchemaValidationSchemasResultOutput)
}

// A collection of arguments for invoking getSchemaValidationSchemas.
type LookupSchemaValidationSchemasOutputArgs struct {
	Filter GetSchemaValidationSchemasFilterPtrInput `pulumi:"filter"`
	// Omit the source-files of schemas and only retrieve their meta-data.
	OmitSource pulumi.BoolPtrInput `pulumi:"omitSource"`
	// UUID.
	SchemaId pulumi.StringPtrInput `pulumi:"schemaId"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupSchemaValidationSchemasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaValidationSchemasArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaValidationSchemas.
type LookupSchemaValidationSchemasResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaValidationSchemasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaValidationSchemasResult)(nil)).Elem()
}

func (o LookupSchemaValidationSchemasResultOutput) ToLookupSchemaValidationSchemasResultOutput() LookupSchemaValidationSchemasResultOutput {
	return o
}

func (o LookupSchemaValidationSchemasResultOutput) ToLookupSchemaValidationSchemasResultOutputWithContext(ctx context.Context) LookupSchemaValidationSchemasResultOutput {
	return o
}

func (o LookupSchemaValidationSchemasResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupSchemaValidationSchemasResultOutput) Filter() GetSchemaValidationSchemasFilterPtrOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) *GetSchemaValidationSchemasFilter { return v.Filter }).(GetSchemaValidationSchemasFilterPtrOutput)
}

// UUID.
func (o LookupSchemaValidationSchemasResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of the schema
// Available values: "openapiV3".
func (o LookupSchemaValidationSchemasResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.Kind }).(pulumi.StringOutput)
}

// A human-readable name for the schema
func (o LookupSchemaValidationSchemasResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.Name }).(pulumi.StringOutput)
}

// Omit the source-files of schemas and only retrieve their meta-data.
func (o LookupSchemaValidationSchemasResultOutput) OmitSource() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) bool { return v.OmitSource }).(pulumi.BoolOutput)
}

// UUID.
func (o LookupSchemaValidationSchemasResultOutput) SchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.SchemaId }).(pulumi.StringOutput)
}

// The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
func (o LookupSchemaValidationSchemasResultOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.Source }).(pulumi.StringOutput)
}

// An indicator if this schema is enabled
func (o LookupSchemaValidationSchemasResultOutput) ValidationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) bool { return v.ValidationEnabled }).(pulumi.BoolOutput)
}

// Identifier.
func (o LookupSchemaValidationSchemasResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaValidationSchemasResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaValidationSchemasResultOutput{})
}
