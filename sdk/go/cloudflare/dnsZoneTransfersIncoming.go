// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDnsZoneTransfersIncoming(ctx, "example_dns_zone_transfers_incoming", &cloudflare.DnsZoneTransfersIncomingArgs{
//				ZoneId:             pulumi.String("269d8f4853475ca241c4e730be286b20"),
//				AutoRefreshSeconds: pulumi.Float64(86400),
//				Name:               pulumi.String("www.example.com."),
//				Peers: pulumi.StringArray{
//					pulumi.String("23ff594956f20c2a721606e94745a8aa"),
//					pulumi.String("00920f38ce07c2e2f4df50b1f61d4194"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming example '<zone_id>'
// ```
type DnsZoneTransfersIncoming struct {
	pulumi.CustomResourceState

	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds pulumi.Float64Output `pulumi:"autoRefreshSeconds"`
	// The time for a specific event.
	CheckedTime pulumi.StringOutput `pulumi:"checkedTime"`
	// The time for a specific event.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The time for a specific event.
	ModifiedTime pulumi.StringOutput `pulumi:"modifiedTime"`
	// Zone name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of peer tags.
	Peers pulumi.StringArrayOutput `pulumi:"peers"`
	// The serial number of the SOA for the given zone.
	SoaSerial pulumi.Float64Output `pulumi:"soaSerial"`
	ZoneId    pulumi.StringOutput  `pulumi:"zoneId"`
}

// NewDnsZoneTransfersIncoming registers a new resource with the given unique name, arguments, and options.
func NewDnsZoneTransfersIncoming(ctx *pulumi.Context,
	name string, args *DnsZoneTransfersIncomingArgs, opts ...pulumi.ResourceOption) (*DnsZoneTransfersIncoming, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoRefreshSeconds == nil {
		return nil, errors.New("invalid value for required argument 'AutoRefreshSeconds'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Peers == nil {
		return nil, errors.New("invalid value for required argument 'Peers'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZoneTransfersIncoming
	err := ctx.RegisterResource("cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZoneTransfersIncoming gets an existing DnsZoneTransfersIncoming resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZoneTransfersIncoming(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneTransfersIncomingState, opts ...pulumi.ResourceOption) (*DnsZoneTransfersIncoming, error) {
	var resource DnsZoneTransfersIncoming
	err := ctx.ReadResource("cloudflare:index/dnsZoneTransfersIncoming:DnsZoneTransfersIncoming", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZoneTransfersIncoming resources.
type dnsZoneTransfersIncomingState struct {
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds *float64 `pulumi:"autoRefreshSeconds"`
	// The time for a specific event.
	CheckedTime *string `pulumi:"checkedTime"`
	// The time for a specific event.
	CreatedTime *string `pulumi:"createdTime"`
	// The time for a specific event.
	ModifiedTime *string `pulumi:"modifiedTime"`
	// Zone name.
	Name *string `pulumi:"name"`
	// A list of peer tags.
	Peers []string `pulumi:"peers"`
	// The serial number of the SOA for the given zone.
	SoaSerial *float64 `pulumi:"soaSerial"`
	ZoneId    *string  `pulumi:"zoneId"`
}

type DnsZoneTransfersIncomingState struct {
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds pulumi.Float64PtrInput
	// The time for a specific event.
	CheckedTime pulumi.StringPtrInput
	// The time for a specific event.
	CreatedTime pulumi.StringPtrInput
	// The time for a specific event.
	ModifiedTime pulumi.StringPtrInput
	// Zone name.
	Name pulumi.StringPtrInput
	// A list of peer tags.
	Peers pulumi.StringArrayInput
	// The serial number of the SOA for the given zone.
	SoaSerial pulumi.Float64PtrInput
	ZoneId    pulumi.StringPtrInput
}

func (DnsZoneTransfersIncomingState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersIncomingState)(nil)).Elem()
}

type dnsZoneTransfersIncomingArgs struct {
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds float64 `pulumi:"autoRefreshSeconds"`
	// Zone name.
	Name string `pulumi:"name"`
	// A list of peer tags.
	Peers  []string `pulumi:"peers"`
	ZoneId string   `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsZoneTransfersIncoming resource.
type DnsZoneTransfersIncomingArgs struct {
	// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
	// Not applicable for primary zones.
	AutoRefreshSeconds pulumi.Float64Input
	// Zone name.
	Name pulumi.StringInput
	// A list of peer tags.
	Peers  pulumi.StringArrayInput
	ZoneId pulumi.StringInput
}

func (DnsZoneTransfersIncomingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersIncomingArgs)(nil)).Elem()
}

type DnsZoneTransfersIncomingInput interface {
	pulumi.Input

	ToDnsZoneTransfersIncomingOutput() DnsZoneTransfersIncomingOutput
	ToDnsZoneTransfersIncomingOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingOutput
}

func (*DnsZoneTransfersIncoming) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersIncoming)(nil)).Elem()
}

func (i *DnsZoneTransfersIncoming) ToDnsZoneTransfersIncomingOutput() DnsZoneTransfersIncomingOutput {
	return i.ToDnsZoneTransfersIncomingOutputWithContext(context.Background())
}

func (i *DnsZoneTransfersIncoming) ToDnsZoneTransfersIncomingOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersIncomingOutput)
}

// DnsZoneTransfersIncomingArrayInput is an input type that accepts DnsZoneTransfersIncomingArray and DnsZoneTransfersIncomingArrayOutput values.
// You can construct a concrete instance of `DnsZoneTransfersIncomingArrayInput` via:
//
//	DnsZoneTransfersIncomingArray{ DnsZoneTransfersIncomingArgs{...} }
type DnsZoneTransfersIncomingArrayInput interface {
	pulumi.Input

	ToDnsZoneTransfersIncomingArrayOutput() DnsZoneTransfersIncomingArrayOutput
	ToDnsZoneTransfersIncomingArrayOutputWithContext(context.Context) DnsZoneTransfersIncomingArrayOutput
}

type DnsZoneTransfersIncomingArray []DnsZoneTransfersIncomingInput

func (DnsZoneTransfersIncomingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersIncoming)(nil)).Elem()
}

func (i DnsZoneTransfersIncomingArray) ToDnsZoneTransfersIncomingArrayOutput() DnsZoneTransfersIncomingArrayOutput {
	return i.ToDnsZoneTransfersIncomingArrayOutputWithContext(context.Background())
}

func (i DnsZoneTransfersIncomingArray) ToDnsZoneTransfersIncomingArrayOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersIncomingArrayOutput)
}

// DnsZoneTransfersIncomingMapInput is an input type that accepts DnsZoneTransfersIncomingMap and DnsZoneTransfersIncomingMapOutput values.
// You can construct a concrete instance of `DnsZoneTransfersIncomingMapInput` via:
//
//	DnsZoneTransfersIncomingMap{ "key": DnsZoneTransfersIncomingArgs{...} }
type DnsZoneTransfersIncomingMapInput interface {
	pulumi.Input

	ToDnsZoneTransfersIncomingMapOutput() DnsZoneTransfersIncomingMapOutput
	ToDnsZoneTransfersIncomingMapOutputWithContext(context.Context) DnsZoneTransfersIncomingMapOutput
}

type DnsZoneTransfersIncomingMap map[string]DnsZoneTransfersIncomingInput

func (DnsZoneTransfersIncomingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersIncoming)(nil)).Elem()
}

func (i DnsZoneTransfersIncomingMap) ToDnsZoneTransfersIncomingMapOutput() DnsZoneTransfersIncomingMapOutput {
	return i.ToDnsZoneTransfersIncomingMapOutputWithContext(context.Background())
}

func (i DnsZoneTransfersIncomingMap) ToDnsZoneTransfersIncomingMapOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersIncomingMapOutput)
}

type DnsZoneTransfersIncomingOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersIncomingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersIncoming)(nil)).Elem()
}

func (o DnsZoneTransfersIncomingOutput) ToDnsZoneTransfersIncomingOutput() DnsZoneTransfersIncomingOutput {
	return o
}

func (o DnsZoneTransfersIncomingOutput) ToDnsZoneTransfersIncomingOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingOutput {
	return o
}

// How often should a secondary zone auto refresh regardless of DNS NOTIFY.
// Not applicable for primary zones.
func (o DnsZoneTransfersIncomingOutput) AutoRefreshSeconds() pulumi.Float64Output {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.Float64Output { return v.AutoRefreshSeconds }).(pulumi.Float64Output)
}

// The time for a specific event.
func (o DnsZoneTransfersIncomingOutput) CheckedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringOutput { return v.CheckedTime }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o DnsZoneTransfersIncomingOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The time for a specific event.
func (o DnsZoneTransfersIncomingOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringOutput { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Zone name.
func (o DnsZoneTransfersIncomingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of peer tags.
func (o DnsZoneTransfersIncomingOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringArrayOutput { return v.Peers }).(pulumi.StringArrayOutput)
}

// The serial number of the SOA for the given zone.
func (o DnsZoneTransfersIncomingOutput) SoaSerial() pulumi.Float64Output {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.Float64Output { return v.SoaSerial }).(pulumi.Float64Output)
}

func (o DnsZoneTransfersIncomingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersIncoming) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsZoneTransfersIncomingArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersIncomingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersIncoming)(nil)).Elem()
}

func (o DnsZoneTransfersIncomingArrayOutput) ToDnsZoneTransfersIncomingArrayOutput() DnsZoneTransfersIncomingArrayOutput {
	return o
}

func (o DnsZoneTransfersIncomingArrayOutput) ToDnsZoneTransfersIncomingArrayOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingArrayOutput {
	return o
}

func (o DnsZoneTransfersIncomingArrayOutput) Index(i pulumi.IntInput) DnsZoneTransfersIncomingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZoneTransfersIncoming {
		return vs[0].([]*DnsZoneTransfersIncoming)[vs[1].(int)]
	}).(DnsZoneTransfersIncomingOutput)
}

type DnsZoneTransfersIncomingMapOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersIncomingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersIncoming)(nil)).Elem()
}

func (o DnsZoneTransfersIncomingMapOutput) ToDnsZoneTransfersIncomingMapOutput() DnsZoneTransfersIncomingMapOutput {
	return o
}

func (o DnsZoneTransfersIncomingMapOutput) ToDnsZoneTransfersIncomingMapOutputWithContext(ctx context.Context) DnsZoneTransfersIncomingMapOutput {
	return o
}

func (o DnsZoneTransfersIncomingMapOutput) MapIndex(k pulumi.StringInput) DnsZoneTransfersIncomingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZoneTransfersIncoming {
		return vs[0].(map[string]*DnsZoneTransfersIncoming)[vs[1].(string)]
	}).(DnsZoneTransfersIncomingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersIncomingInput)(nil)).Elem(), &DnsZoneTransfersIncoming{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersIncomingArrayInput)(nil)).Elem(), DnsZoneTransfersIncomingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersIncomingMapInput)(nil)).Elem(), DnsZoneTransfersIncomingMap{})
	pulumi.RegisterOutputType(DnsZoneTransfersIncomingOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersIncomingArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersIncomingMapOutput{})
}
