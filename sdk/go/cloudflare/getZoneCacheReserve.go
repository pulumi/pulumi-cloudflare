// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare data source to look up Cache Reserve
// status for a given zone.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZoneCacheReserve(ctx, &cloudflare.LookupZoneCacheReserveArgs{
//				ZoneId: "0da42c8d2132a9ddaf714f9e7c920711",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupZoneCacheReserve(ctx *pulumi.Context, args *LookupZoneCacheReserveArgs, opts ...pulumi.InvokeOption) (*LookupZoneCacheReserveResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneCacheReserveResult
	err := ctx.Invoke("cloudflare:index/getZoneCacheReserve:getZoneCacheReserve", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneCacheReserve.
type LookupZoneCacheReserveArgs struct {
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneCacheReserve.
type LookupZoneCacheReserveResult struct {
	// The status of Cache Reserve support.
	Enabled bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

func LookupZoneCacheReserveOutput(ctx *pulumi.Context, args LookupZoneCacheReserveOutputArgs, opts ...pulumi.InvokeOption) LookupZoneCacheReserveResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZoneCacheReserveResult, error) {
			args := v.(LookupZoneCacheReserveArgs)
			r, err := LookupZoneCacheReserve(ctx, &args, opts...)
			var s LookupZoneCacheReserveResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZoneCacheReserveResultOutput)
}

// A collection of arguments for invoking getZoneCacheReserve.
type LookupZoneCacheReserveOutputArgs struct {
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneCacheReserveOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneCacheReserveArgs)(nil)).Elem()
}

// A collection of values returned by getZoneCacheReserve.
type LookupZoneCacheReserveResultOutput struct{ *pulumi.OutputState }

func (LookupZoneCacheReserveResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneCacheReserveResult)(nil)).Elem()
}

func (o LookupZoneCacheReserveResultOutput) ToLookupZoneCacheReserveResultOutput() LookupZoneCacheReserveResultOutput {
	return o
}

func (o LookupZoneCacheReserveResultOutput) ToLookupZoneCacheReserveResultOutputWithContext(ctx context.Context) LookupZoneCacheReserveResultOutput {
	return o
}

// The status of Cache Reserve support.
func (o LookupZoneCacheReserveResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneCacheReserveResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZoneCacheReserveResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneCacheReserveResult) string { return v.Id }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource.
func (o LookupZoneCacheReserveResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneCacheReserveResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneCacheReserveResultOutput{})
}
