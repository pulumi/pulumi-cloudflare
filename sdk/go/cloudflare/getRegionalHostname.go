// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupRegionalHostname(ctx, &cloudflare.LookupRegionalHostnameArgs{
//				ZoneId:   "023e105f4ecef8ad9ca31a8372d0c353",
//				Hostname: pulumi.StringRef("foo.example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRegionalHostname(ctx *pulumi.Context, args *LookupRegionalHostnameArgs, opts ...pulumi.InvokeOption) (*LookupRegionalHostnameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegionalHostnameResult
	err := ctx.Invoke("cloudflare:index/getRegionalHostname:getRegionalHostname", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegionalHostname.
type LookupRegionalHostnameArgs struct {
	// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
	Hostname *string `pulumi:"hostname"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getRegionalHostname.
type LookupRegionalHostnameResult struct {
	// When the regional hostname was created
	CreatedOn string `pulumi:"createdOn"`
	// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
	Hostname string `pulumi:"hostname"`
	// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
	Id string `pulumi:"id"`
	// Identifying key for the region
	RegionKey string `pulumi:"regionKey"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupRegionalHostnameOutput(ctx *pulumi.Context, args LookupRegionalHostnameOutputArgs, opts ...pulumi.InvokeOption) LookupRegionalHostnameResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegionalHostnameResultOutput, error) {
			args := v.(LookupRegionalHostnameArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getRegionalHostname:getRegionalHostname", args, LookupRegionalHostnameResultOutput{}, options).(LookupRegionalHostnameResultOutput), nil
		}).(LookupRegionalHostnameResultOutput)
}

// A collection of arguments for invoking getRegionalHostname.
type LookupRegionalHostnameOutputArgs struct {
	// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupRegionalHostnameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionalHostnameArgs)(nil)).Elem()
}

// A collection of values returned by getRegionalHostname.
type LookupRegionalHostnameResultOutput struct{ *pulumi.OutputState }

func (LookupRegionalHostnameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegionalHostnameResult)(nil)).Elem()
}

func (o LookupRegionalHostnameResultOutput) ToLookupRegionalHostnameResultOutput() LookupRegionalHostnameResultOutput {
	return o
}

func (o LookupRegionalHostnameResultOutput) ToLookupRegionalHostnameResultOutputWithContext(ctx context.Context) LookupRegionalHostnameResultOutput {
	return o
}

// When the regional hostname was created
func (o LookupRegionalHostnameResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalHostnameResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
func (o LookupRegionalHostnameResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalHostnameResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
func (o LookupRegionalHostnameResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalHostnameResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifying key for the region
func (o LookupRegionalHostnameResultOutput) RegionKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalHostnameResult) string { return v.RegionKey }).(pulumi.StringOutput)
}

// Identifier
func (o LookupRegionalHostnameResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegionalHostnameResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegionalHostnameResultOutput{})
}
