// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to lookup a single [Access Application](https://developers.cloudflare.com/cloudflare-one/applications/)
func LookupAccessApplication(ctx *pulumi.Context, args *LookupAccessApplicationArgs, opts ...pulumi.InvokeOption) (*LookupAccessApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccessApplicationResult
	err := ctx.Invoke("cloudflare:index/getAccessApplication:getAccessApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessApplication.
type LookupAccessApplicationArgs struct {
	// The account identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	AccountId *string `pulumi:"accountId"`
	// The primary hostname and path that Access will secure. Must provide only one of `name`, `domain`.
	Domain *string `pulumi:"domain"`
	// Friendly name of the Access Application. Must provide only one of `name`, `domain`.
	Name *string `pulumi:"name"`
	// The zone identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getAccessApplication.
type LookupAccessApplicationResult struct {
	// The account identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	AccountId *string `pulumi:"accountId"`
	// Application Audience (AUD) Tag of the application.
	Aud string `pulumi:"aud"`
	// The primary hostname and path that Access will secure. Must provide only one of `name`, `domain`.
	Domain string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Friendly name of the Access Application. Must provide only one of `name`, `domain`.
	Name string `pulumi:"name"`
	// The zone identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

func LookupAccessApplicationOutput(ctx *pulumi.Context, args LookupAccessApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupAccessApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessApplicationResult, error) {
			args := v.(LookupAccessApplicationArgs)
			r, err := LookupAccessApplication(ctx, &args, opts...)
			var s LookupAccessApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAccessApplicationResultOutput)
}

// A collection of arguments for invoking getAccessApplication.
type LookupAccessApplicationOutputArgs struct {
	// The account identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The primary hostname and path that Access will secure. Must provide only one of `name`, `domain`.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Friendly name of the Access Application. Must provide only one of `name`, `domain`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The zone identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (LookupAccessApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessApplicationArgs)(nil)).Elem()
}

// A collection of values returned by getAccessApplication.
type LookupAccessApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupAccessApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessApplicationResult)(nil)).Elem()
}

func (o LookupAccessApplicationResultOutput) ToLookupAccessApplicationResultOutput() LookupAccessApplicationResultOutput {
	return o
}

func (o LookupAccessApplicationResultOutput) ToLookupAccessApplicationResultOutputWithContext(ctx context.Context) LookupAccessApplicationResultOutput {
	return o
}

// The account identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
func (o LookupAccessApplicationResultOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Application Audience (AUD) Tag of the application.
func (o LookupAccessApplicationResultOutput) Aud() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) string { return v.Aud }).(pulumi.StringOutput)
}

// The primary hostname and path that Access will secure. Must provide only one of `name`, `domain`.
func (o LookupAccessApplicationResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) string { return v.Domain }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessApplicationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Friendly name of the Access Application. Must provide only one of `name`, `domain`.
func (o LookupAccessApplicationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource. Must provide only one of `zoneId`, `accountId`.
func (o LookupAccessApplicationResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccessApplicationResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessApplicationResultOutput{})
}
