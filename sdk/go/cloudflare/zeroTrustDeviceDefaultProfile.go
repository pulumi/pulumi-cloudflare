// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustDeviceDefaultProfile(ctx, "example_zero_trust_device_default_profile", &cloudflare.ZeroTrustDeviceDefaultProfileArgs{
//				AccountId:           pulumi.String("699d98642c564d2e855e9661899b7252"),
//				AllowModeSwitch:     pulumi.Bool(true),
//				AllowUpdates:        pulumi.Bool(true),
//				AllowedToLeave:      pulumi.Bool(true),
//				AutoConnect:         pulumi.Float64(0),
//				CaptivePortal:       pulumi.Float64(180),
//				DisableAutoFallback: pulumi.Bool(true),
//				Excludes: cloudflare.ZeroTrustDeviceDefaultProfileExcludeArray{
//					&cloudflare.ZeroTrustDeviceDefaultProfileExcludeArgs{
//						Address:     pulumi.String("192.0.2.0/24"),
//						Description: pulumi.String("Exclude testing domains from the tunnel"),
//						Host:        pulumi.String("*.example.com"),
//					},
//				},
//				ExcludeOfficeIps: pulumi.Bool(true),
//				Includes: cloudflare.ZeroTrustDeviceDefaultProfileIncludeArray{
//					&cloudflare.ZeroTrustDeviceDefaultProfileIncludeArgs{
//						Address:     pulumi.String("192.0.2.0/24"),
//						Description: pulumi.String("Exclude testing domains from the tunnel"),
//						Host:        pulumi.String("*.example.com"),
//					},
//				},
//				RegisterInterfaceIpWithDns: pulumi.Bool(true),
//				ServiceModeV2: &cloudflare.ZeroTrustDeviceDefaultProfileServiceModeV2Args{
//					Mode: pulumi.String("proxy"),
//					Port: pulumi.Float64(3000),
//				},
//				SupportUrl:     pulumi.String("https://1.1.1.1/help"),
//				SwitchLocked:   pulumi.Bool(true),
//				TunnelProtocol: pulumi.String("wireguard"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustDeviceDefaultProfile:ZeroTrustDeviceDefaultProfile example '<account_id>'
// ```
type ZeroTrustDeviceDefaultProfile struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether to allow the user to switch WARP between modes.
	AllowModeSwitch pulumi.BoolPtrOutput `pulumi:"allowModeSwitch"`
	// Whether to receive update notifications when a new version of the client is available.
	AllowUpdates pulumi.BoolPtrOutput `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization.
	AllowedToLeave pulumi.BoolPtrOutput `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.Float64PtrOutput `pulumi:"autoConnect"`
	// Turn on the captive portal after the specified amount of time.
	CaptivePortal pulumi.Float64PtrOutput `pulumi:"captivePortal"`
	// Whether the policy will be applied to matching devices.
	Default pulumi.BoolOutput `pulumi:"default"`
	// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
	DisableAutoFallback pulumi.BoolPtrOutput `pulumi:"disableAutoFallback"`
	// Whether the policy will be applied to matching devices.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Whether to add Microsoft IPs to Split Tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrOutput `pulumi:"excludeOfficeIps"`
	// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Excludes        ZeroTrustDeviceDefaultProfileExcludeArrayOutput        `pulumi:"excludes"`
	FallbackDomains ZeroTrustDeviceDefaultProfileFallbackDomainArrayOutput `pulumi:"fallbackDomains"`
	GatewayUniqueId pulumi.StringOutput                                    `pulumi:"gatewayUniqueId"`
	// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Includes ZeroTrustDeviceDefaultProfileIncludeArrayOutput `pulumi:"includes"`
	// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
	RegisterInterfaceIpWithDns pulumi.BoolPtrOutput                             `pulumi:"registerInterfaceIpWithDns"`
	ServiceModeV2              ZeroTrustDeviceDefaultProfileServiceModeV2Output `pulumi:"serviceModeV2"`
	// The URL to launch when the Send Feedback button is clicked.
	SupportUrl pulumi.StringPtrOutput `pulumi:"supportUrl"`
	// Whether to allow the user to turn off the WARP switch and disconnect the client.
	SwitchLocked pulumi.BoolPtrOutput `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use.
	TunnelProtocol pulumi.StringPtrOutput `pulumi:"tunnelProtocol"`
}

// NewZeroTrustDeviceDefaultProfile registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustDeviceDefaultProfile(ctx *pulumi.Context,
	name string, args *ZeroTrustDeviceDefaultProfileArgs, opts ...pulumi.ResourceOption) (*ZeroTrustDeviceDefaultProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy"),
		},
		{
			Type: pulumi.String("cloudflare:index/splitTunnel:SplitTunnel"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustDeviceDefaultProfile
	err := ctx.RegisterResource("cloudflare:index/zeroTrustDeviceDefaultProfile:ZeroTrustDeviceDefaultProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustDeviceDefaultProfile gets an existing ZeroTrustDeviceDefaultProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustDeviceDefaultProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustDeviceDefaultProfileState, opts ...pulumi.ResourceOption) (*ZeroTrustDeviceDefaultProfile, error) {
	var resource ZeroTrustDeviceDefaultProfile
	err := ctx.ReadResource("cloudflare:index/zeroTrustDeviceDefaultProfile:ZeroTrustDeviceDefaultProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustDeviceDefaultProfile resources.
type zeroTrustDeviceDefaultProfileState struct {
	AccountId *string `pulumi:"accountId"`
	// Whether to allow the user to switch WARP between modes.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to receive update notifications when a new version of the client is available.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect *float64 `pulumi:"autoConnect"`
	// Turn on the captive portal after the specified amount of time.
	CaptivePortal *float64 `pulumi:"captivePortal"`
	// Whether the policy will be applied to matching devices.
	Default *bool `pulumi:"default"`
	// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether the policy will be applied to matching devices.
	Enabled *bool `pulumi:"enabled"`
	// Whether to add Microsoft IPs to Split Tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Excludes        []ZeroTrustDeviceDefaultProfileExclude        `pulumi:"excludes"`
	FallbackDomains []ZeroTrustDeviceDefaultProfileFallbackDomain `pulumi:"fallbackDomains"`
	GatewayUniqueId *string                                       `pulumi:"gatewayUniqueId"`
	// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Includes []ZeroTrustDeviceDefaultProfileInclude `pulumi:"includes"`
	// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
	RegisterInterfaceIpWithDns *bool                                       `pulumi:"registerInterfaceIpWithDns"`
	ServiceModeV2              *ZeroTrustDeviceDefaultProfileServiceModeV2 `pulumi:"serviceModeV2"`
	// The URL to launch when the Send Feedback button is clicked.
	SupportUrl *string `pulumi:"supportUrl"`
	// Whether to allow the user to turn off the WARP switch and disconnect the client.
	SwitchLocked *bool `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
}

type ZeroTrustDeviceDefaultProfileState struct {
	AccountId pulumi.StringPtrInput
	// Whether to allow the user to switch WARP between modes.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to receive update notifications when a new version of the client is available.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.Float64PtrInput
	// Turn on the captive portal after the specified amount of time.
	CaptivePortal pulumi.Float64PtrInput
	// Whether the policy will be applied to matching devices.
	Default pulumi.BoolPtrInput
	// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether the policy will be applied to matching devices.
	Enabled pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to Split Tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Excludes        ZeroTrustDeviceDefaultProfileExcludeArrayInput
	FallbackDomains ZeroTrustDeviceDefaultProfileFallbackDomainArrayInput
	GatewayUniqueId pulumi.StringPtrInput
	// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Includes ZeroTrustDeviceDefaultProfileIncludeArrayInput
	// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
	RegisterInterfaceIpWithDns pulumi.BoolPtrInput
	ServiceModeV2              ZeroTrustDeviceDefaultProfileServiceModeV2PtrInput
	// The URL to launch when the Send Feedback button is clicked.
	SupportUrl pulumi.StringPtrInput
	// Whether to allow the user to turn off the WARP switch and disconnect the client.
	SwitchLocked pulumi.BoolPtrInput
	// Determines which tunnel protocol to use.
	TunnelProtocol pulumi.StringPtrInput
}

func (ZeroTrustDeviceDefaultProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDeviceDefaultProfileState)(nil)).Elem()
}

type zeroTrustDeviceDefaultProfileArgs struct {
	AccountId string `pulumi:"accountId"`
	// Whether to allow the user to switch WARP between modes.
	AllowModeSwitch *bool `pulumi:"allowModeSwitch"`
	// Whether to receive update notifications when a new version of the client is available.
	AllowUpdates *bool `pulumi:"allowUpdates"`
	// Whether to allow devices to leave the organization.
	AllowedToLeave *bool `pulumi:"allowedToLeave"`
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect *float64 `pulumi:"autoConnect"`
	// Turn on the captive portal after the specified amount of time.
	CaptivePortal *float64 `pulumi:"captivePortal"`
	// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
	DisableAutoFallback *bool `pulumi:"disableAutoFallback"`
	// Whether to add Microsoft IPs to Split Tunnel exclusions.
	ExcludeOfficeIps *bool `pulumi:"excludeOfficeIps"`
	// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Excludes []ZeroTrustDeviceDefaultProfileExclude `pulumi:"excludes"`
	// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Includes []ZeroTrustDeviceDefaultProfileInclude `pulumi:"includes"`
	// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
	RegisterInterfaceIpWithDns *bool                                       `pulumi:"registerInterfaceIpWithDns"`
	ServiceModeV2              *ZeroTrustDeviceDefaultProfileServiceModeV2 `pulumi:"serviceModeV2"`
	// The URL to launch when the Send Feedback button is clicked.
	SupportUrl *string `pulumi:"supportUrl"`
	// Whether to allow the user to turn off the WARP switch and disconnect the client.
	SwitchLocked *bool `pulumi:"switchLocked"`
	// Determines which tunnel protocol to use.
	TunnelProtocol *string `pulumi:"tunnelProtocol"`
}

// The set of arguments for constructing a ZeroTrustDeviceDefaultProfile resource.
type ZeroTrustDeviceDefaultProfileArgs struct {
	AccountId pulumi.StringInput
	// Whether to allow the user to switch WARP between modes.
	AllowModeSwitch pulumi.BoolPtrInput
	// Whether to receive update notifications when a new version of the client is available.
	AllowUpdates pulumi.BoolPtrInput
	// Whether to allow devices to leave the organization.
	AllowedToLeave pulumi.BoolPtrInput
	// The amount of time in seconds to reconnect after having been disabled.
	AutoConnect pulumi.Float64PtrInput
	// Turn on the captive portal after the specified amount of time.
	CaptivePortal pulumi.Float64PtrInput
	// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
	DisableAutoFallback pulumi.BoolPtrInput
	// Whether to add Microsoft IPs to Split Tunnel exclusions.
	ExcludeOfficeIps pulumi.BoolPtrInput
	// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Excludes ZeroTrustDeviceDefaultProfileExcludeArrayInput
	// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
	Includes ZeroTrustDeviceDefaultProfileIncludeArrayInput
	// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
	RegisterInterfaceIpWithDns pulumi.BoolPtrInput
	ServiceModeV2              ZeroTrustDeviceDefaultProfileServiceModeV2PtrInput
	// The URL to launch when the Send Feedback button is clicked.
	SupportUrl pulumi.StringPtrInput
	// Whether to allow the user to turn off the WARP switch and disconnect the client.
	SwitchLocked pulumi.BoolPtrInput
	// Determines which tunnel protocol to use.
	TunnelProtocol pulumi.StringPtrInput
}

func (ZeroTrustDeviceDefaultProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDeviceDefaultProfileArgs)(nil)).Elem()
}

type ZeroTrustDeviceDefaultProfileInput interface {
	pulumi.Input

	ToZeroTrustDeviceDefaultProfileOutput() ZeroTrustDeviceDefaultProfileOutput
	ToZeroTrustDeviceDefaultProfileOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileOutput
}

func (*ZeroTrustDeviceDefaultProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (i *ZeroTrustDeviceDefaultProfile) ToZeroTrustDeviceDefaultProfileOutput() ZeroTrustDeviceDefaultProfileOutput {
	return i.ToZeroTrustDeviceDefaultProfileOutputWithContext(context.Background())
}

func (i *ZeroTrustDeviceDefaultProfile) ToZeroTrustDeviceDefaultProfileOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceDefaultProfileOutput)
}

// ZeroTrustDeviceDefaultProfileArrayInput is an input type that accepts ZeroTrustDeviceDefaultProfileArray and ZeroTrustDeviceDefaultProfileArrayOutput values.
// You can construct a concrete instance of `ZeroTrustDeviceDefaultProfileArrayInput` via:
//
//	ZeroTrustDeviceDefaultProfileArray{ ZeroTrustDeviceDefaultProfileArgs{...} }
type ZeroTrustDeviceDefaultProfileArrayInput interface {
	pulumi.Input

	ToZeroTrustDeviceDefaultProfileArrayOutput() ZeroTrustDeviceDefaultProfileArrayOutput
	ToZeroTrustDeviceDefaultProfileArrayOutputWithContext(context.Context) ZeroTrustDeviceDefaultProfileArrayOutput
}

type ZeroTrustDeviceDefaultProfileArray []ZeroTrustDeviceDefaultProfileInput

func (ZeroTrustDeviceDefaultProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (i ZeroTrustDeviceDefaultProfileArray) ToZeroTrustDeviceDefaultProfileArrayOutput() ZeroTrustDeviceDefaultProfileArrayOutput {
	return i.ToZeroTrustDeviceDefaultProfileArrayOutputWithContext(context.Background())
}

func (i ZeroTrustDeviceDefaultProfileArray) ToZeroTrustDeviceDefaultProfileArrayOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceDefaultProfileArrayOutput)
}

// ZeroTrustDeviceDefaultProfileMapInput is an input type that accepts ZeroTrustDeviceDefaultProfileMap and ZeroTrustDeviceDefaultProfileMapOutput values.
// You can construct a concrete instance of `ZeroTrustDeviceDefaultProfileMapInput` via:
//
//	ZeroTrustDeviceDefaultProfileMap{ "key": ZeroTrustDeviceDefaultProfileArgs{...} }
type ZeroTrustDeviceDefaultProfileMapInput interface {
	pulumi.Input

	ToZeroTrustDeviceDefaultProfileMapOutput() ZeroTrustDeviceDefaultProfileMapOutput
	ToZeroTrustDeviceDefaultProfileMapOutputWithContext(context.Context) ZeroTrustDeviceDefaultProfileMapOutput
}

type ZeroTrustDeviceDefaultProfileMap map[string]ZeroTrustDeviceDefaultProfileInput

func (ZeroTrustDeviceDefaultProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (i ZeroTrustDeviceDefaultProfileMap) ToZeroTrustDeviceDefaultProfileMapOutput() ZeroTrustDeviceDefaultProfileMapOutput {
	return i.ToZeroTrustDeviceDefaultProfileMapOutputWithContext(context.Background())
}

func (i ZeroTrustDeviceDefaultProfileMap) ToZeroTrustDeviceDefaultProfileMapOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDeviceDefaultProfileMapOutput)
}

type ZeroTrustDeviceDefaultProfileOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceDefaultProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (o ZeroTrustDeviceDefaultProfileOutput) ToZeroTrustDeviceDefaultProfileOutput() ZeroTrustDeviceDefaultProfileOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileOutput) ToZeroTrustDeviceDefaultProfileOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether to allow the user to switch WARP between modes.
func (o ZeroTrustDeviceDefaultProfileOutput) AllowModeSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.AllowModeSwitch }).(pulumi.BoolPtrOutput)
}

// Whether to receive update notifications when a new version of the client is available.
func (o ZeroTrustDeviceDefaultProfileOutput) AllowUpdates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.AllowUpdates }).(pulumi.BoolPtrOutput)
}

// Whether to allow devices to leave the organization.
func (o ZeroTrustDeviceDefaultProfileOutput) AllowedToLeave() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.AllowedToLeave }).(pulumi.BoolPtrOutput)
}

// The amount of time in seconds to reconnect after having been disabled.
func (o ZeroTrustDeviceDefaultProfileOutput) AutoConnect() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.Float64PtrOutput { return v.AutoConnect }).(pulumi.Float64PtrOutput)
}

// Turn on the captive portal after the specified amount of time.
func (o ZeroTrustDeviceDefaultProfileOutput) CaptivePortal() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.Float64PtrOutput { return v.CaptivePortal }).(pulumi.Float64PtrOutput)
}

// Whether the policy will be applied to matching devices.
func (o ZeroTrustDeviceDefaultProfileOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
func (o ZeroTrustDeviceDefaultProfileOutput) DisableAutoFallback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.DisableAutoFallback }).(pulumi.BoolPtrOutput)
}

// Whether the policy will be applied to matching devices.
func (o ZeroTrustDeviceDefaultProfileOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Whether to add Microsoft IPs to Split Tunnel exclusions.
func (o ZeroTrustDeviceDefaultProfileOutput) ExcludeOfficeIps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.ExcludeOfficeIps }).(pulumi.BoolPtrOutput)
}

// List of routes excluded in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
func (o ZeroTrustDeviceDefaultProfileOutput) Excludes() ZeroTrustDeviceDefaultProfileExcludeArrayOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) ZeroTrustDeviceDefaultProfileExcludeArrayOutput {
		return v.Excludes
	}).(ZeroTrustDeviceDefaultProfileExcludeArrayOutput)
}

func (o ZeroTrustDeviceDefaultProfileOutput) FallbackDomains() ZeroTrustDeviceDefaultProfileFallbackDomainArrayOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) ZeroTrustDeviceDefaultProfileFallbackDomainArrayOutput {
		return v.FallbackDomains
	}).(ZeroTrustDeviceDefaultProfileFallbackDomainArrayOutput)
}

func (o ZeroTrustDeviceDefaultProfileOutput) GatewayUniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.StringOutput { return v.GatewayUniqueId }).(pulumi.StringOutput)
}

// List of routes included in the WARP client's tunnel. Both 'exclude' and 'include' cannot be set in the same request.
func (o ZeroTrustDeviceDefaultProfileOutput) Includes() ZeroTrustDeviceDefaultProfileIncludeArrayOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) ZeroTrustDeviceDefaultProfileIncludeArrayOutput {
		return v.Includes
	}).(ZeroTrustDeviceDefaultProfileIncludeArrayOutput)
}

// Determines if the operating system will register WARP's local interface IP with your on-premises DNS server.
func (o ZeroTrustDeviceDefaultProfileOutput) RegisterInterfaceIpWithDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.RegisterInterfaceIpWithDns }).(pulumi.BoolPtrOutput)
}

func (o ZeroTrustDeviceDefaultProfileOutput) ServiceModeV2() ZeroTrustDeviceDefaultProfileServiceModeV2Output {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) ZeroTrustDeviceDefaultProfileServiceModeV2Output {
		return v.ServiceModeV2
	}).(ZeroTrustDeviceDefaultProfileServiceModeV2Output)
}

// The URL to launch when the Send Feedback button is clicked.
func (o ZeroTrustDeviceDefaultProfileOutput) SupportUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.StringPtrOutput { return v.SupportUrl }).(pulumi.StringPtrOutput)
}

// Whether to allow the user to turn off the WARP switch and disconnect the client.
func (o ZeroTrustDeviceDefaultProfileOutput) SwitchLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.BoolPtrOutput { return v.SwitchLocked }).(pulumi.BoolPtrOutput)
}

// Determines which tunnel protocol to use.
func (o ZeroTrustDeviceDefaultProfileOutput) TunnelProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDeviceDefaultProfile) pulumi.StringPtrOutput { return v.TunnelProtocol }).(pulumi.StringPtrOutput)
}

type ZeroTrustDeviceDefaultProfileArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceDefaultProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (o ZeroTrustDeviceDefaultProfileArrayOutput) ToZeroTrustDeviceDefaultProfileArrayOutput() ZeroTrustDeviceDefaultProfileArrayOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileArrayOutput) ToZeroTrustDeviceDefaultProfileArrayOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileArrayOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileArrayOutput) Index(i pulumi.IntInput) ZeroTrustDeviceDefaultProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustDeviceDefaultProfile {
		return vs[0].([]*ZeroTrustDeviceDefaultProfile)[vs[1].(int)]
	}).(ZeroTrustDeviceDefaultProfileOutput)
}

type ZeroTrustDeviceDefaultProfileMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustDeviceDefaultProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDeviceDefaultProfile)(nil)).Elem()
}

func (o ZeroTrustDeviceDefaultProfileMapOutput) ToZeroTrustDeviceDefaultProfileMapOutput() ZeroTrustDeviceDefaultProfileMapOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileMapOutput) ToZeroTrustDeviceDefaultProfileMapOutputWithContext(ctx context.Context) ZeroTrustDeviceDefaultProfileMapOutput {
	return o
}

func (o ZeroTrustDeviceDefaultProfileMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustDeviceDefaultProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustDeviceDefaultProfile {
		return vs[0].(map[string]*ZeroTrustDeviceDefaultProfile)[vs[1].(string)]
	}).(ZeroTrustDeviceDefaultProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceDefaultProfileInput)(nil)).Elem(), &ZeroTrustDeviceDefaultProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceDefaultProfileArrayInput)(nil)).Elem(), ZeroTrustDeviceDefaultProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDeviceDefaultProfileMapInput)(nil)).Elem(), ZeroTrustDeviceDefaultProfileMap{})
	pulumi.RegisterOutputType(ZeroTrustDeviceDefaultProfileOutput{})
	pulumi.RegisterOutputType(ZeroTrustDeviceDefaultProfileArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustDeviceDefaultProfileMapOutput{})
}
