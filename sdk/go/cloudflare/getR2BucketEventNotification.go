// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupR2BucketEventNotification(ctx, &cloudflare.LookupR2BucketEventNotificationArgs{
//				AccountId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				BucketName: "example-bucket",
//				QueueId:    "queue_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupR2BucketEventNotification(ctx *pulumi.Context, args *LookupR2BucketEventNotificationArgs, opts ...pulumi.InvokeOption) (*LookupR2BucketEventNotificationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupR2BucketEventNotificationResult
	err := ctx.Invoke("cloudflare:index/getR2BucketEventNotification:getR2BucketEventNotification", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getR2BucketEventNotification.
type LookupR2BucketEventNotificationArgs struct {
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// Queue ID.
	QueueId string `pulumi:"queueId"`
}

// A collection of values returned by getR2BucketEventNotification.
type LookupR2BucketEventNotificationResult struct {
	// Transition to abort ongoing multipart uploads.
	AbortMultipartUploadsTransition GetR2BucketEventNotificationAbortMultipartUploadsTransition `pulumi:"abortMultipartUploadsTransition"`
	// Account ID.
	AccountId string `pulumi:"accountId"`
	// Name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// Conditions that apply to all transitions of this rule.
	Conditions GetR2BucketEventNotificationConditions `pulumi:"conditions"`
	// Transition to delete objects.
	DeleteObjectsTransition GetR2BucketEventNotificationDeleteObjectsTransition `pulumi:"deleteObjectsTransition"`
	// Whether or not this rule is in effect.
	Enabled bool `pulumi:"enabled"`
	// Unique identifier for this rule.
	Id string `pulumi:"id"`
	// Queue ID.
	QueueId string `pulumi:"queueId"`
	// Transitions to change the storage class of objects.
	StorageClassTransitions []GetR2BucketEventNotificationStorageClassTransition `pulumi:"storageClassTransitions"`
}

func LookupR2BucketEventNotificationOutput(ctx *pulumi.Context, args LookupR2BucketEventNotificationOutputArgs, opts ...pulumi.InvokeOption) LookupR2BucketEventNotificationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupR2BucketEventNotificationResultOutput, error) {
			args := v.(LookupR2BucketEventNotificationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getR2BucketEventNotification:getR2BucketEventNotification", args, LookupR2BucketEventNotificationResultOutput{}, options).(LookupR2BucketEventNotificationResultOutput), nil
		}).(LookupR2BucketEventNotificationResultOutput)
}

// A collection of arguments for invoking getR2BucketEventNotification.
type LookupR2BucketEventNotificationOutputArgs struct {
	// Account ID.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Name of the bucket.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Queue ID.
	QueueId pulumi.StringInput `pulumi:"queueId"`
}

func (LookupR2BucketEventNotificationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketEventNotificationArgs)(nil)).Elem()
}

// A collection of values returned by getR2BucketEventNotification.
type LookupR2BucketEventNotificationResultOutput struct{ *pulumi.OutputState }

func (LookupR2BucketEventNotificationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupR2BucketEventNotificationResult)(nil)).Elem()
}

func (o LookupR2BucketEventNotificationResultOutput) ToLookupR2BucketEventNotificationResultOutput() LookupR2BucketEventNotificationResultOutput {
	return o
}

func (o LookupR2BucketEventNotificationResultOutput) ToLookupR2BucketEventNotificationResultOutputWithContext(ctx context.Context) LookupR2BucketEventNotificationResultOutput {
	return o
}

// Transition to abort ongoing multipart uploads.
func (o LookupR2BucketEventNotificationResultOutput) AbortMultipartUploadsTransition() GetR2BucketEventNotificationAbortMultipartUploadsTransitionOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) GetR2BucketEventNotificationAbortMultipartUploadsTransition {
		return v.AbortMultipartUploadsTransition
	}).(GetR2BucketEventNotificationAbortMultipartUploadsTransitionOutput)
}

// Account ID.
func (o LookupR2BucketEventNotificationResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Name of the bucket.
func (o LookupR2BucketEventNotificationResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Conditions that apply to all transitions of this rule.
func (o LookupR2BucketEventNotificationResultOutput) Conditions() GetR2BucketEventNotificationConditionsOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) GetR2BucketEventNotificationConditions {
		return v.Conditions
	}).(GetR2BucketEventNotificationConditionsOutput)
}

// Transition to delete objects.
func (o LookupR2BucketEventNotificationResultOutput) DeleteObjectsTransition() GetR2BucketEventNotificationDeleteObjectsTransitionOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) GetR2BucketEventNotificationDeleteObjectsTransition {
		return v.DeleteObjectsTransition
	}).(GetR2BucketEventNotificationDeleteObjectsTransitionOutput)
}

// Whether or not this rule is in effect.
func (o LookupR2BucketEventNotificationResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Unique identifier for this rule.
func (o LookupR2BucketEventNotificationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Queue ID.
func (o LookupR2BucketEventNotificationResultOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) string { return v.QueueId }).(pulumi.StringOutput)
}

// Transitions to change the storage class of objects.
func (o LookupR2BucketEventNotificationResultOutput) StorageClassTransitions() GetR2BucketEventNotificationStorageClassTransitionArrayOutput {
	return o.ApplyT(func(v LookupR2BucketEventNotificationResult) []GetR2BucketEventNotificationStorageClassTransition {
		return v.StorageClassTransitions
	}).(GetR2BucketEventNotificationStorageClassTransitionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupR2BucketEventNotificationResultOutput{})
}
