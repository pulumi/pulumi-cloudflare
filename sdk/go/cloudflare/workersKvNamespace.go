// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkersKvNamespace(ctx, "example_workers_kv_namespace", &cloudflare.WorkersKvNamespaceArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Title:     pulumi.String("My Own Namespace"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersKvNamespace:WorkersKvNamespace example '<account_id>/<namespace_id>'
// ```
type WorkersKvNamespace struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// True if new beta namespace, with additional preview features.
	Beta pulumi.BoolOutput `pulumi:"beta"`
	// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
	SupportsUrlEncoding pulumi.BoolOutput `pulumi:"supportsUrlEncoding"`
	// A human-readable string name for a Namespace.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewWorkersKvNamespace registers a new resource with the given unique name, arguments, and options.
func NewWorkersKvNamespace(ctx *pulumi.Context,
	name string, args *WorkersKvNamespaceArgs, opts ...pulumi.ResourceOption) (*WorkersKvNamespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersKvNamespace
	err := ctx.RegisterResource("cloudflare:index/workersKvNamespace:WorkersKvNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersKvNamespace gets an existing WorkersKvNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersKvNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersKvNamespaceState, opts ...pulumi.ResourceOption) (*WorkersKvNamespace, error) {
	var resource WorkersKvNamespace
	err := ctx.ReadResource("cloudflare:index/workersKvNamespace:WorkersKvNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersKvNamespace resources.
type workersKvNamespaceState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// True if new beta namespace, with additional preview features.
	Beta *bool `pulumi:"beta"`
	// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
	SupportsUrlEncoding *bool `pulumi:"supportsUrlEncoding"`
	// A human-readable string name for a Namespace.
	Title *string `pulumi:"title"`
}

type WorkersKvNamespaceState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// True if new beta namespace, with additional preview features.
	Beta pulumi.BoolPtrInput
	// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
	SupportsUrlEncoding pulumi.BoolPtrInput
	// A human-readable string name for a Namespace.
	Title pulumi.StringPtrInput
}

func (WorkersKvNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersKvNamespaceState)(nil)).Elem()
}

type workersKvNamespaceArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// A human-readable string name for a Namespace.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a WorkersKvNamespace resource.
type WorkersKvNamespaceArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// A human-readable string name for a Namespace.
	Title pulumi.StringInput
}

func (WorkersKvNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersKvNamespaceArgs)(nil)).Elem()
}

type WorkersKvNamespaceInput interface {
	pulumi.Input

	ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput
	ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput
}

func (*WorkersKvNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersKvNamespace)(nil)).Elem()
}

func (i *WorkersKvNamespace) ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput {
	return i.ToWorkersKvNamespaceOutputWithContext(context.Background())
}

func (i *WorkersKvNamespace) ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersKvNamespaceOutput)
}

// WorkersKvNamespaceArrayInput is an input type that accepts WorkersKvNamespaceArray and WorkersKvNamespaceArrayOutput values.
// You can construct a concrete instance of `WorkersKvNamespaceArrayInput` via:
//
//	WorkersKvNamespaceArray{ WorkersKvNamespaceArgs{...} }
type WorkersKvNamespaceArrayInput interface {
	pulumi.Input

	ToWorkersKvNamespaceArrayOutput() WorkersKvNamespaceArrayOutput
	ToWorkersKvNamespaceArrayOutputWithContext(context.Context) WorkersKvNamespaceArrayOutput
}

type WorkersKvNamespaceArray []WorkersKvNamespaceInput

func (WorkersKvNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersKvNamespace)(nil)).Elem()
}

func (i WorkersKvNamespaceArray) ToWorkersKvNamespaceArrayOutput() WorkersKvNamespaceArrayOutput {
	return i.ToWorkersKvNamespaceArrayOutputWithContext(context.Background())
}

func (i WorkersKvNamespaceArray) ToWorkersKvNamespaceArrayOutputWithContext(ctx context.Context) WorkersKvNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersKvNamespaceArrayOutput)
}

// WorkersKvNamespaceMapInput is an input type that accepts WorkersKvNamespaceMap and WorkersKvNamespaceMapOutput values.
// You can construct a concrete instance of `WorkersKvNamespaceMapInput` via:
//
//	WorkersKvNamespaceMap{ "key": WorkersKvNamespaceArgs{...} }
type WorkersKvNamespaceMapInput interface {
	pulumi.Input

	ToWorkersKvNamespaceMapOutput() WorkersKvNamespaceMapOutput
	ToWorkersKvNamespaceMapOutputWithContext(context.Context) WorkersKvNamespaceMapOutput
}

type WorkersKvNamespaceMap map[string]WorkersKvNamespaceInput

func (WorkersKvNamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersKvNamespace)(nil)).Elem()
}

func (i WorkersKvNamespaceMap) ToWorkersKvNamespaceMapOutput() WorkersKvNamespaceMapOutput {
	return i.ToWorkersKvNamespaceMapOutputWithContext(context.Background())
}

func (i WorkersKvNamespaceMap) ToWorkersKvNamespaceMapOutputWithContext(ctx context.Context) WorkersKvNamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersKvNamespaceMapOutput)
}

type WorkersKvNamespaceOutput struct{ *pulumi.OutputState }

func (WorkersKvNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersKvNamespace)(nil)).Elem()
}

func (o WorkersKvNamespaceOutput) ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput {
	return o
}

func (o WorkersKvNamespaceOutput) ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput {
	return o
}

// Identifier.
func (o WorkersKvNamespaceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersKvNamespace) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// True if new beta namespace, with additional preview features.
func (o WorkersKvNamespaceOutput) Beta() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersKvNamespace) pulumi.BoolOutput { return v.Beta }).(pulumi.BoolOutput)
}

// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
func (o WorkersKvNamespaceOutput) SupportsUrlEncoding() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersKvNamespace) pulumi.BoolOutput { return v.SupportsUrlEncoding }).(pulumi.BoolOutput)
}

// A human-readable string name for a Namespace.
func (o WorkersKvNamespaceOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersKvNamespace) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type WorkersKvNamespaceArrayOutput struct{ *pulumi.OutputState }

func (WorkersKvNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersKvNamespace)(nil)).Elem()
}

func (o WorkersKvNamespaceArrayOutput) ToWorkersKvNamespaceArrayOutput() WorkersKvNamespaceArrayOutput {
	return o
}

func (o WorkersKvNamespaceArrayOutput) ToWorkersKvNamespaceArrayOutputWithContext(ctx context.Context) WorkersKvNamespaceArrayOutput {
	return o
}

func (o WorkersKvNamespaceArrayOutput) Index(i pulumi.IntInput) WorkersKvNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersKvNamespace {
		return vs[0].([]*WorkersKvNamespace)[vs[1].(int)]
	}).(WorkersKvNamespaceOutput)
}

type WorkersKvNamespaceMapOutput struct{ *pulumi.OutputState }

func (WorkersKvNamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersKvNamespace)(nil)).Elem()
}

func (o WorkersKvNamespaceMapOutput) ToWorkersKvNamespaceMapOutput() WorkersKvNamespaceMapOutput {
	return o
}

func (o WorkersKvNamespaceMapOutput) ToWorkersKvNamespaceMapOutputWithContext(ctx context.Context) WorkersKvNamespaceMapOutput {
	return o
}

func (o WorkersKvNamespaceMapOutput) MapIndex(k pulumi.StringInput) WorkersKvNamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersKvNamespace {
		return vs[0].(map[string]*WorkersKvNamespace)[vs[1].(string)]
	}).(WorkersKvNamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersKvNamespaceInput)(nil)).Elem(), &WorkersKvNamespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersKvNamespaceArrayInput)(nil)).Elem(), WorkersKvNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersKvNamespaceMapInput)(nil)).Elem(), WorkersKvNamespaceMap{})
	pulumi.RegisterOutputType(WorkersKvNamespaceOutput{})
	pulumi.RegisterOutputType(WorkersKvNamespaceArrayOutput{})
	pulumi.RegisterOutputType(WorkersKvNamespaceMapOutput{})
}
