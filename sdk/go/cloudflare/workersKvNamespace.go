// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Workers KV Namespace
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v2/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewWorkersKvNamespace(ctx, "example", &cloudflare.WorkersKvNamespaceArgs{
// 			Title: pulumi.String("test-namespace"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Workers KV Namespace settings can be imported using it's ID
//
// ```sh
//  $ pulumi import cloudflare:index/workersKvNamespace:WorkersKvNamespace example beaeb6716c9443eaa4deef11763ccca6
// ```
//
//  where- `beaeb6716c9443eaa4deef11763ccca6` is the ID of the namespace
type WorkersKvNamespace struct {
	pulumi.CustomResourceState

	// The name of the namespace you wish to create.
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewWorkersKvNamespace registers a new resource with the given unique name, arguments, and options.
func NewWorkersKvNamespace(ctx *pulumi.Context,
	name string, args *WorkersKvNamespaceArgs, opts ...pulumi.ResourceOption) (*WorkersKvNamespace, error) {
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	if args == nil {
		args = &WorkersKvNamespaceArgs{}
	}
	var resource WorkersKvNamespace
	err := ctx.RegisterResource("cloudflare:index/workersKvNamespace:WorkersKvNamespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersKvNamespace gets an existing WorkersKvNamespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersKvNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersKvNamespaceState, opts ...pulumi.ResourceOption) (*WorkersKvNamespace, error) {
	var resource WorkersKvNamespace
	err := ctx.ReadResource("cloudflare:index/workersKvNamespace:WorkersKvNamespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersKvNamespace resources.
type workersKvNamespaceState struct {
	// The name of the namespace you wish to create.
	Title *string `pulumi:"title"`
}

type WorkersKvNamespaceState struct {
	// The name of the namespace you wish to create.
	Title pulumi.StringPtrInput
}

func (WorkersKvNamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersKvNamespaceState)(nil)).Elem()
}

type workersKvNamespaceArgs struct {
	// The name of the namespace you wish to create.
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a WorkersKvNamespace resource.
type WorkersKvNamespaceArgs struct {
	// The name of the namespace you wish to create.
	Title pulumi.StringInput
}

func (WorkersKvNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersKvNamespaceArgs)(nil)).Elem()
}

type WorkersKvNamespaceInput interface {
	pulumi.Input

	ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput
	ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput
}

func (WorkersKvNamespace) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkersKvNamespace)(nil)).Elem()
}

func (i WorkersKvNamespace) ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput {
	return i.ToWorkersKvNamespaceOutputWithContext(context.Background())
}

func (i WorkersKvNamespace) ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersKvNamespaceOutput)
}

type WorkersKvNamespaceOutput struct {
	*pulumi.OutputState
}

func (WorkersKvNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkersKvNamespaceOutput)(nil)).Elem()
}

func (o WorkersKvNamespaceOutput) ToWorkersKvNamespaceOutput() WorkersKvNamespaceOutput {
	return o
}

func (o WorkersKvNamespaceOutput) ToWorkersKvNamespaceOutputWithContext(ctx context.Context) WorkersKvNamespaceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkersKvNamespaceOutput{})
}
