// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type DnsSettings struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId    pulumi.StringPtrOutput        `pulumi:"accountId"`
	ZoneDefaults DnsSettingsZoneDefaultsOutput `pulumi:"zoneDefaults"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewDnsSettings registers a new resource with the given unique name, arguments, and options.
func NewDnsSettings(ctx *pulumi.Context,
	name string, args *DnsSettingsArgs, opts ...pulumi.ResourceOption) (*DnsSettings, error) {
	if args == nil {
		args = &DnsSettingsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsSettings
	err := ctx.RegisterResource("cloudflare:index/dnsSettings:DnsSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSettings gets an existing DnsSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSettingsState, opts ...pulumi.ResourceOption) (*DnsSettings, error) {
	var resource DnsSettings
	err := ctx.ReadResource("cloudflare:index/dnsSettings:DnsSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSettings resources.
type dnsSettingsState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId    *string                  `pulumi:"accountId"`
	ZoneDefaults *DnsSettingsZoneDefaults `pulumi:"zoneDefaults"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsSettingsState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId    pulumi.StringPtrInput
	ZoneDefaults DnsSettingsZoneDefaultsPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (DnsSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSettingsState)(nil)).Elem()
}

type dnsSettingsArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId    *string                  `pulumi:"accountId"`
	ZoneDefaults *DnsSettingsZoneDefaults `pulumi:"zoneDefaults"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsSettings resource.
type DnsSettingsArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId    pulumi.StringPtrInput
	ZoneDefaults DnsSettingsZoneDefaultsPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (DnsSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSettingsArgs)(nil)).Elem()
}

type DnsSettingsInput interface {
	pulumi.Input

	ToDnsSettingsOutput() DnsSettingsOutput
	ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput
}

func (*DnsSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (i *DnsSettings) ToDnsSettingsOutput() DnsSettingsOutput {
	return i.ToDnsSettingsOutputWithContext(context.Background())
}

func (i *DnsSettings) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsOutput)
}

// DnsSettingsArrayInput is an input type that accepts DnsSettingsArray and DnsSettingsArrayOutput values.
// You can construct a concrete instance of `DnsSettingsArrayInput` via:
//
//	DnsSettingsArray{ DnsSettingsArgs{...} }
type DnsSettingsArrayInput interface {
	pulumi.Input

	ToDnsSettingsArrayOutput() DnsSettingsArrayOutput
	ToDnsSettingsArrayOutputWithContext(context.Context) DnsSettingsArrayOutput
}

type DnsSettingsArray []DnsSettingsInput

func (DnsSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSettings)(nil)).Elem()
}

func (i DnsSettingsArray) ToDnsSettingsArrayOutput() DnsSettingsArrayOutput {
	return i.ToDnsSettingsArrayOutputWithContext(context.Background())
}

func (i DnsSettingsArray) ToDnsSettingsArrayOutputWithContext(ctx context.Context) DnsSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsArrayOutput)
}

// DnsSettingsMapInput is an input type that accepts DnsSettingsMap and DnsSettingsMapOutput values.
// You can construct a concrete instance of `DnsSettingsMapInput` via:
//
//	DnsSettingsMap{ "key": DnsSettingsArgs{...} }
type DnsSettingsMapInput interface {
	pulumi.Input

	ToDnsSettingsMapOutput() DnsSettingsMapOutput
	ToDnsSettingsMapOutputWithContext(context.Context) DnsSettingsMapOutput
}

type DnsSettingsMap map[string]DnsSettingsInput

func (DnsSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSettings)(nil)).Elem()
}

func (i DnsSettingsMap) ToDnsSettingsMapOutput() DnsSettingsMapOutput {
	return i.ToDnsSettingsMapOutputWithContext(context.Background())
}

func (i DnsSettingsMap) ToDnsSettingsMapOutputWithContext(ctx context.Context) DnsSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSettingsMapOutput)
}

type DnsSettingsOutput struct{ *pulumi.OutputState }

func (DnsSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSettings)(nil)).Elem()
}

func (o DnsSettingsOutput) ToDnsSettingsOutput() DnsSettingsOutput {
	return o
}

func (o DnsSettingsOutput) ToDnsSettingsOutputWithContext(ctx context.Context) DnsSettingsOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o DnsSettingsOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSettings) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o DnsSettingsOutput) ZoneDefaults() DnsSettingsZoneDefaultsOutput {
	return o.ApplyT(func(v *DnsSettings) DnsSettingsZoneDefaultsOutput { return v.ZoneDefaults }).(DnsSettingsZoneDefaultsOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o DnsSettingsOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSettings) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type DnsSettingsArrayOutput struct{ *pulumi.OutputState }

func (DnsSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSettings)(nil)).Elem()
}

func (o DnsSettingsArrayOutput) ToDnsSettingsArrayOutput() DnsSettingsArrayOutput {
	return o
}

func (o DnsSettingsArrayOutput) ToDnsSettingsArrayOutputWithContext(ctx context.Context) DnsSettingsArrayOutput {
	return o
}

func (o DnsSettingsArrayOutput) Index(i pulumi.IntInput) DnsSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsSettings {
		return vs[0].([]*DnsSettings)[vs[1].(int)]
	}).(DnsSettingsOutput)
}

type DnsSettingsMapOutput struct{ *pulumi.OutputState }

func (DnsSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSettings)(nil)).Elem()
}

func (o DnsSettingsMapOutput) ToDnsSettingsMapOutput() DnsSettingsMapOutput {
	return o
}

func (o DnsSettingsMapOutput) ToDnsSettingsMapOutputWithContext(ctx context.Context) DnsSettingsMapOutput {
	return o
}

func (o DnsSettingsMapOutput) MapIndex(k pulumi.StringInput) DnsSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsSettings {
		return vs[0].(map[string]*DnsSettings)[vs[1].(string)]
	}).(DnsSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSettingsInput)(nil)).Elem(), &DnsSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSettingsArrayInput)(nil)).Elem(), DnsSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSettingsMapInput)(nil)).Elem(), DnsSettingsMap{})
	pulumi.RegisterOutputType(DnsSettingsOutput{})
	pulumi.RegisterOutputType(DnsSettingsArrayOutput{})
	pulumi.RegisterOutputType(DnsSettingsMapOutput{})
}
