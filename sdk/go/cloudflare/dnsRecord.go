// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/dnsRecord:DnsRecord example '<zone_id>/<dns_record_id>'
// ```
type DnsRecord struct {
	pulumi.CustomResourceState

	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn pulumi.StringOutput `pulumi:"commentModifiedOn"`
	// A valid IPv4 address.
	Content pulumi.StringOutput `pulumi:"content"`
	// When the record was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Components of a CAA record.
	Data DnsRecordDataOutput `pulumi:"data"`
	// Extra Cloudflare-specific information about the record.
	Meta pulumi.StringOutput `pulumi:"meta"`
	// When the record was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringOutput `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrOutput `pulumi:"priority"`
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable pulumi.BoolOutput `pulumi:"proxiable"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolOutput `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings DnsRecordSettingsOutput `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn pulumi.StringOutput `pulumi:"tagsModifiedOn"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64Output `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsRecord registers a new resource with the given unique name, arguments, and options.
func NewDnsRecord(ctx *pulumi.Context,
	name string, args *DnsRecordArgs, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/record:Record"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsRecord
	err := ctx.RegisterResource("cloudflare:index/dnsRecord:DnsRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRecord gets an existing DnsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRecordState, opts ...pulumi.ResourceOption) (*DnsRecord, error) {
	var resource DnsRecord
	err := ctx.ReadResource("cloudflare:index/dnsRecord:DnsRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRecord resources.
type dnsRecordState struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `pulumi:"comment"`
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn *string `pulumi:"commentModifiedOn"`
	// A valid IPv4 address.
	Content *string `pulumi:"content"`
	// When the record was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Components of a CAA record.
	Data *DnsRecordData `pulumi:"data"`
	// Extra Cloudflare-specific information about the record.
	Meta *string `pulumi:"meta"`
	// When the record was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name *string `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority *float64 `pulumi:"priority"`
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable *bool `pulumi:"proxiable"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied *bool `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings *DnsRecordSettings `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags []string `pulumi:"tags"`
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn *string `pulumi:"tagsModifiedOn"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl *float64 `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type DnsRecordState struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringPtrInput
	// When the record comment was last modified. Omitted if there is no comment.
	CommentModifiedOn pulumi.StringPtrInput
	// A valid IPv4 address.
	Content pulumi.StringPtrInput
	// When the record was created.
	CreatedOn pulumi.StringPtrInput
	// Components of a CAA record.
	Data DnsRecordDataPtrInput
	// Extra Cloudflare-specific information about the record.
	Meta pulumi.StringPtrInput
	// When the record was last modified.
	ModifiedOn pulumi.StringPtrInput
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringPtrInput
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrInput
	// Whether the record can be proxied by Cloudflare or not.
	Proxiable pulumi.BoolPtrInput
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolPtrInput
	// Settings for the DNS record.
	Settings DnsRecordSettingsPtrInput
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayInput
	// When the record tags were last modified. Omitted if there are no tags.
	TagsModifiedOn pulumi.StringPtrInput
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64PtrInput
	// Record type.
	// Available values: "A".
	Type pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (DnsRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordState)(nil)).Elem()
}

type dnsRecordArgs struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment *string `pulumi:"comment"`
	// A valid IPv4 address.
	Content *string `pulumi:"content"`
	// Components of a CAA record.
	Data *DnsRecordData `pulumi:"data"`
	// DNS record name (or @ for the zone apex) in Punycode.
	Name string `pulumi:"name"`
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority *float64 `pulumi:"priority"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied *bool `pulumi:"proxied"`
	// Settings for the DNS record.
	Settings *DnsRecordSettings `pulumi:"settings"`
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags []string `pulumi:"tags"`
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl float64 `pulumi:"ttl"`
	// Record type.
	// Available values: "A".
	Type string `pulumi:"type"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsRecord resource.
type DnsRecordArgs struct {
	// Comments or notes about the DNS record. This field has no effect on DNS responses.
	Comment pulumi.StringPtrInput
	// A valid IPv4 address.
	Content pulumi.StringPtrInput
	// Components of a CAA record.
	Data DnsRecordDataPtrInput
	// DNS record name (or @ for the zone apex) in Punycode.
	Name pulumi.StringInput
	// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
	Priority pulumi.Float64PtrInput
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolPtrInput
	// Settings for the DNS record.
	Settings DnsRecordSettingsPtrInput
	// Custom tags for the DNS record. This field has no effect on DNS responses.
	Tags pulumi.StringArrayInput
	// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
	Ttl pulumi.Float64Input
	// Record type.
	// Available values: "A".
	Type pulumi.StringInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (DnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordArgs)(nil)).Elem()
}

type DnsRecordInput interface {
	pulumi.Input

	ToDnsRecordOutput() DnsRecordOutput
	ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput
}

func (*DnsRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (i *DnsRecord) ToDnsRecordOutput() DnsRecordOutput {
	return i.ToDnsRecordOutputWithContext(context.Background())
}

func (i *DnsRecord) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordOutput)
}

// DnsRecordArrayInput is an input type that accepts DnsRecordArray and DnsRecordArrayOutput values.
// You can construct a concrete instance of `DnsRecordArrayInput` via:
//
//	DnsRecordArray{ DnsRecordArgs{...} }
type DnsRecordArrayInput interface {
	pulumi.Input

	ToDnsRecordArrayOutput() DnsRecordArrayOutput
	ToDnsRecordArrayOutputWithContext(context.Context) DnsRecordArrayOutput
}

type DnsRecordArray []DnsRecordInput

func (DnsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordArray) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return i.ToDnsRecordArrayOutputWithContext(context.Background())
}

func (i DnsRecordArray) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordArrayOutput)
}

// DnsRecordMapInput is an input type that accepts DnsRecordMap and DnsRecordMapOutput values.
// You can construct a concrete instance of `DnsRecordMapInput` via:
//
//	DnsRecordMap{ "key": DnsRecordArgs{...} }
type DnsRecordMapInput interface {
	pulumi.Input

	ToDnsRecordMapOutput() DnsRecordMapOutput
	ToDnsRecordMapOutputWithContext(context.Context) DnsRecordMapOutput
}

type DnsRecordMap map[string]DnsRecordInput

func (DnsRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (i DnsRecordMap) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return i.ToDnsRecordMapOutputWithContext(context.Background())
}

func (i DnsRecordMap) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordMapOutput)
}

type DnsRecordOutput struct{ *pulumi.OutputState }

func (DnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecord)(nil)).Elem()
}

func (o DnsRecordOutput) ToDnsRecordOutput() DnsRecordOutput {
	return o
}

func (o DnsRecordOutput) ToDnsRecordOutputWithContext(ctx context.Context) DnsRecordOutput {
	return o
}

// Comments or notes about the DNS record. This field has no effect on DNS responses.
func (o DnsRecordOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// When the record comment was last modified. Omitted if there is no comment.
func (o DnsRecordOutput) CommentModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.CommentModifiedOn }).(pulumi.StringOutput)
}

// A valid IPv4 address.
func (o DnsRecordOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// When the record was created.
func (o DnsRecordOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Components of a CAA record.
func (o DnsRecordOutput) Data() DnsRecordDataOutput {
	return o.ApplyT(func(v *DnsRecord) DnsRecordDataOutput { return v.Data }).(DnsRecordDataOutput)
}

// Extra Cloudflare-specific information about the record.
func (o DnsRecordOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Meta }).(pulumi.StringOutput)
}

// When the record was last modified.
func (o DnsRecordOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// DNS record name (or @ for the zone apex) in Punycode.
func (o DnsRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
func (o DnsRecordOutput) Priority() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.Float64PtrOutput { return v.Priority }).(pulumi.Float64PtrOutput)
}

// Whether the record can be proxied by Cloudflare or not.
func (o DnsRecordOutput) Proxiable() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.BoolOutput { return v.Proxiable }).(pulumi.BoolOutput)
}

// Whether the record is receiving the performance and security benefits of Cloudflare.
func (o DnsRecordOutput) Proxied() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.BoolOutput { return v.Proxied }).(pulumi.BoolOutput)
}

// Settings for the DNS record.
func (o DnsRecordOutput) Settings() DnsRecordSettingsOutput {
	return o.ApplyT(func(v *DnsRecord) DnsRecordSettingsOutput { return v.Settings }).(DnsRecordSettingsOutput)
}

// Custom tags for the DNS record. This field has no effect on DNS responses.
func (o DnsRecordOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When the record tags were last modified. Omitted if there are no tags.
func (o DnsRecordOutput) TagsModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.TagsModifiedOn }).(pulumi.StringOutput)
}

// Time To Live (TTL) of the DNS record in seconds. Setting to 1 means 'automatic'. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
func (o DnsRecordOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v *DnsRecord) pulumi.Float64Output { return v.Ttl }).(pulumi.Float64Output)
}

// Record type.
// Available values: "A".
func (o DnsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifier
func (o DnsRecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecord) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutput() DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) ToDnsRecordArrayOutputWithContext(ctx context.Context) DnsRecordArrayOutput {
	return o
}

func (o DnsRecordArrayOutput) Index(i pulumi.IntInput) DnsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].([]*DnsRecord)[vs[1].(int)]
	}).(DnsRecordOutput)
}

type DnsRecordMapOutput struct{ *pulumi.OutputState }

func (DnsRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecord)(nil)).Elem()
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutput() DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) ToDnsRecordMapOutputWithContext(ctx context.Context) DnsRecordMapOutput {
	return o
}

func (o DnsRecordMapOutput) MapIndex(k pulumi.StringInput) DnsRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsRecord {
		return vs[0].(map[string]*DnsRecord)[vs[1].(string)]
	}).(DnsRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordInput)(nil)).Elem(), &DnsRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordArrayInput)(nil)).Elem(), DnsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordMapInput)(nil)).Elem(), DnsRecordMap{})
	pulumi.RegisterOutputType(DnsRecordOutput{})
	pulumi.RegisterOutputType(DnsRecordArrayOutput{})
	pulumi.RegisterOutputType(DnsRecordMapOutput{})
}
