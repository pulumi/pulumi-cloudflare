// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupSpectrumApplication(ctx, &cloudflare.LookupSpectrumApplicationArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//				AppId:  "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSpectrumApplication(ctx *pulumi.Context, args *LookupSpectrumApplicationArgs, opts ...pulumi.InvokeOption) (*LookupSpectrumApplicationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSpectrumApplicationResult
	err := ctx.Invoke("cloudflare:index/getSpectrumApplication:getSpectrumApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSpectrumApplication.
type LookupSpectrumApplicationArgs struct {
	// Identifier
	AppId string `pulumi:"appId"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getSpectrumApplication.
type LookupSpectrumApplicationResult struct {
	// Identifier
	AppId string `pulumi:"appId"`
	// Enables Argo Smart Routing for this application.
	// Notes: Only available for TCP applications with trafficType set to "direct".
	ArgoSmartRouting bool `pulumi:"argoSmartRouting"`
	// When the Application was created.
	CreatedOn string `pulumi:"createdOn"`
	// The name and type of DNS record for the Spectrum application.
	Dns GetSpectrumApplicationDns `pulumi:"dns"`
	// The anycast edge IP configuration for the hostname of this application.
	EdgeIps GetSpectrumApplicationEdgeIps `pulumi:"edgeIps"`
	// App identifier.
	Id string `pulumi:"id"`
	// Enables IP Access Rules for this application.
	// Notes: Only available for TCP applications.
	IpFirewall bool `pulumi:"ipFirewall"`
	// When the Application was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
	OriginDirects []string `pulumi:"originDirects"`
	// The name and type of DNS record for the Spectrum application.
	OriginDns GetSpectrumApplicationOriginDns `pulumi:"originDns"`
	// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
	// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
	OriginPort interface{} `pulumi:"originPort"`
	// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
	Protocol string `pulumi:"protocol"`
	// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
	ProxyProtocol string `pulumi:"proxyProtocol"`
	// The type of TLS termination associated with the application.
	Tls string `pulumi:"tls"`
	// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
	TrafficType string `pulumi:"trafficType"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupSpectrumApplicationOutput(ctx *pulumi.Context, args LookupSpectrumApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupSpectrumApplicationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSpectrumApplicationResultOutput, error) {
			args := v.(LookupSpectrumApplicationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getSpectrumApplication:getSpectrumApplication", args, LookupSpectrumApplicationResultOutput{}, options).(LookupSpectrumApplicationResultOutput), nil
		}).(LookupSpectrumApplicationResultOutput)
}

// A collection of arguments for invoking getSpectrumApplication.
type LookupSpectrumApplicationOutputArgs struct {
	// Identifier
	AppId pulumi.StringInput `pulumi:"appId"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupSpectrumApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpectrumApplicationArgs)(nil)).Elem()
}

// A collection of values returned by getSpectrumApplication.
type LookupSpectrumApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupSpectrumApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSpectrumApplicationResult)(nil)).Elem()
}

func (o LookupSpectrumApplicationResultOutput) ToLookupSpectrumApplicationResultOutput() LookupSpectrumApplicationResultOutput {
	return o
}

func (o LookupSpectrumApplicationResultOutput) ToLookupSpectrumApplicationResultOutputWithContext(ctx context.Context) LookupSpectrumApplicationResultOutput {
	return o
}

// Identifier
func (o LookupSpectrumApplicationResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.AppId }).(pulumi.StringOutput)
}

// Enables Argo Smart Routing for this application.
// Notes: Only available for TCP applications with trafficType set to "direct".
func (o LookupSpectrumApplicationResultOutput) ArgoSmartRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) bool { return v.ArgoSmartRouting }).(pulumi.BoolOutput)
}

// When the Application was created.
func (o LookupSpectrumApplicationResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The name and type of DNS record for the Spectrum application.
func (o LookupSpectrumApplicationResultOutput) Dns() GetSpectrumApplicationDnsOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) GetSpectrumApplicationDns { return v.Dns }).(GetSpectrumApplicationDnsOutput)
}

// The anycast edge IP configuration for the hostname of this application.
func (o LookupSpectrumApplicationResultOutput) EdgeIps() GetSpectrumApplicationEdgeIpsOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) GetSpectrumApplicationEdgeIps { return v.EdgeIps }).(GetSpectrumApplicationEdgeIpsOutput)
}

// App identifier.
func (o LookupSpectrumApplicationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enables IP Access Rules for this application.
// Notes: Only available for TCP applications.
func (o LookupSpectrumApplicationResultOutput) IpFirewall() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) bool { return v.IpFirewall }).(pulumi.BoolOutput)
}

// When the Application was last modified.
func (o LookupSpectrumApplicationResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
func (o LookupSpectrumApplicationResultOutput) OriginDirects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) []string { return v.OriginDirects }).(pulumi.StringArrayOutput)
}

// The name and type of DNS record for the Spectrum application.
func (o LookupSpectrumApplicationResultOutput) OriginDns() GetSpectrumApplicationOriginDnsOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) GetSpectrumApplicationOriginDns { return v.OriginDns }).(GetSpectrumApplicationOriginDnsOutput)
}

// The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `"1000-2000"`.
// Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the "protocol" field.
func (o LookupSpectrumApplicationResultOutput) OriginPort() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) interface{} { return v.OriginPort }).(pulumi.AnyOutput)
}

// The port configuration at Cloudflare's edge. May specify a single port, for example `"tcp/1000"`, or a range of ports, for example `"tcp/1000-2000"`.
func (o LookupSpectrumApplicationResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
func (o LookupSpectrumApplicationResultOutput) ProxyProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.ProxyProtocol }).(pulumi.StringOutput)
}

// The type of TLS termination associated with the application.
func (o LookupSpectrumApplicationResultOutput) Tls() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.Tls }).(pulumi.StringOutput)
}

// Determines how data travels from the edge to your origin. When set to "direct", Spectrum will send traffic directly to your origin, and the application's type is derived from the `protocol`. When set to "http" or "https", Spectrum will apply Cloudflare's HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
func (o LookupSpectrumApplicationResultOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.TrafficType }).(pulumi.StringOutput)
}

// Identifier
func (o LookupSpectrumApplicationResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSpectrumApplicationResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSpectrumApplicationResultOutput{})
}
