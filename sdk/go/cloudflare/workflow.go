// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewWorkflow(ctx, "example_workflow", &cloudflare.WorkflowArgs{
//				AccountId:    pulumi.String("account_id"),
//				WorkflowName: pulumi.String("x"),
//				ClassName:    pulumi.String("x"),
//				ScriptName:   pulumi.String("x"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workflow:Workflow example '<account_id>/<workflow_name>'
// ```
type Workflow struct {
	pulumi.CustomResourceState

	AccountId         pulumi.StringOutput     `pulumi:"accountId"`
	ClassName         pulumi.StringOutput     `pulumi:"className"`
	CreatedOn         pulumi.StringOutput     `pulumi:"createdOn"`
	Instances         WorkflowInstancesOutput `pulumi:"instances"`
	IsDeleted         pulumi.Float64Output    `pulumi:"isDeleted"`
	ModifiedOn        pulumi.StringOutput     `pulumi:"modifiedOn"`
	Name              pulumi.StringOutput     `pulumi:"name"`
	ScriptName        pulumi.StringOutput     `pulumi:"scriptName"`
	TerminatorRunning pulumi.Float64Output    `pulumi:"terminatorRunning"`
	TriggeredOn       pulumi.StringOutput     `pulumi:"triggeredOn"`
	VersionId         pulumi.StringOutput     `pulumi:"versionId"`
	WorkflowName      pulumi.StringOutput     `pulumi:"workflowName"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ClassName == nil {
		return nil, errors.New("invalid value for required argument 'ClassName'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	if args.WorkflowName == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("cloudflare:index/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("cloudflare:index/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	AccountId         *string            `pulumi:"accountId"`
	ClassName         *string            `pulumi:"className"`
	CreatedOn         *string            `pulumi:"createdOn"`
	Instances         *WorkflowInstances `pulumi:"instances"`
	IsDeleted         *float64           `pulumi:"isDeleted"`
	ModifiedOn        *string            `pulumi:"modifiedOn"`
	Name              *string            `pulumi:"name"`
	ScriptName        *string            `pulumi:"scriptName"`
	TerminatorRunning *float64           `pulumi:"terminatorRunning"`
	TriggeredOn       *string            `pulumi:"triggeredOn"`
	VersionId         *string            `pulumi:"versionId"`
	WorkflowName      *string            `pulumi:"workflowName"`
}

type WorkflowState struct {
	AccountId         pulumi.StringPtrInput
	ClassName         pulumi.StringPtrInput
	CreatedOn         pulumi.StringPtrInput
	Instances         WorkflowInstancesPtrInput
	IsDeleted         pulumi.Float64PtrInput
	ModifiedOn        pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	ScriptName        pulumi.StringPtrInput
	TerminatorRunning pulumi.Float64PtrInput
	TriggeredOn       pulumi.StringPtrInput
	VersionId         pulumi.StringPtrInput
	WorkflowName      pulumi.StringPtrInput
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	AccountId    string `pulumi:"accountId"`
	ClassName    string `pulumi:"className"`
	ScriptName   string `pulumi:"scriptName"`
	WorkflowName string `pulumi:"workflowName"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	AccountId    pulumi.StringInput
	ClassName    pulumi.StringInput
	ScriptName   pulumi.StringInput
	WorkflowName pulumi.StringInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

// WorkflowArrayInput is an input type that accepts WorkflowArray and WorkflowArrayOutput values.
// You can construct a concrete instance of `WorkflowArrayInput` via:
//
//	WorkflowArray{ WorkflowArgs{...} }
type WorkflowArrayInput interface {
	pulumi.Input

	ToWorkflowArrayOutput() WorkflowArrayOutput
	ToWorkflowArrayOutputWithContext(context.Context) WorkflowArrayOutput
}

type WorkflowArray []WorkflowInput

func (WorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (i WorkflowArray) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return i.ToWorkflowArrayOutputWithContext(context.Background())
}

func (i WorkflowArray) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowArrayOutput)
}

// WorkflowMapInput is an input type that accepts WorkflowMap and WorkflowMapOutput values.
// You can construct a concrete instance of `WorkflowMapInput` via:
//
//	WorkflowMap{ "key": WorkflowArgs{...} }
type WorkflowMapInput interface {
	pulumi.Input

	ToWorkflowMapOutput() WorkflowMapOutput
	ToWorkflowMapOutputWithContext(context.Context) WorkflowMapOutput
}

type WorkflowMap map[string]WorkflowInput

func (WorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (i WorkflowMap) ToWorkflowMapOutput() WorkflowMapOutput {
	return i.ToWorkflowMapOutputWithContext(context.Background())
}

func (i WorkflowMap) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowMapOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

func (o WorkflowOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o WorkflowOutput) ClassName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.ClassName }).(pulumi.StringOutput)
}

func (o WorkflowOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

func (o WorkflowOutput) Instances() WorkflowInstancesOutput {
	return o.ApplyT(func(v *Workflow) WorkflowInstancesOutput { return v.Instances }).(WorkflowInstancesOutput)
}

func (o WorkflowOutput) IsDeleted() pulumi.Float64Output {
	return o.ApplyT(func(v *Workflow) pulumi.Float64Output { return v.IsDeleted }).(pulumi.Float64Output)
}

func (o WorkflowOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o WorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkflowOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

func (o WorkflowOutput) TerminatorRunning() pulumi.Float64Output {
	return o.ApplyT(func(v *Workflow) pulumi.Float64Output { return v.TerminatorRunning }).(pulumi.Float64Output)
}

func (o WorkflowOutput) TriggeredOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.TriggeredOn }).(pulumi.StringOutput)
}

func (o WorkflowOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

func (o WorkflowOutput) WorkflowName() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.WorkflowName }).(pulumi.StringOutput)
}

type WorkflowArrayOutput struct{ *pulumi.OutputState }

func (WorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) Index(i pulumi.IntInput) WorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].([]*Workflow)[vs[1].(int)]
	}).(WorkflowOutput)
}

type WorkflowMapOutput struct{ *pulumi.OutputState }

func (WorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (o WorkflowMapOutput) ToWorkflowMapOutput() WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) MapIndex(k pulumi.StringInput) WorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].(map[string]*Workflow)[vs[1].(string)]
	}).(WorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowArrayInput)(nil)).Elem(), WorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowMapInput)(nil)).Elem(), WorkflowMap{})
	pulumi.RegisterOutputType(WorkflowOutput{})
	pulumi.RegisterOutputType(WorkflowArrayOutput{})
	pulumi.RegisterOutputType(WorkflowMapOutput{})
}
