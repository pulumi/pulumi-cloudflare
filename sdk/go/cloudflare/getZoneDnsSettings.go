// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZoneDnsSettings(ctx, &cloudflare.LookupZoneDnsSettingsArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZoneDnsSettings(ctx *pulumi.Context, args *LookupZoneDnsSettingsArgs, opts ...pulumi.InvokeOption) (*LookupZoneDnsSettingsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneDnsSettingsResult
	err := ctx.Invoke("cloudflare:index/getZoneDnsSettings:getZoneDnsSettings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneDnsSettings.
type LookupZoneDnsSettingsArgs struct {
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneDnsSettings.
type LookupZoneDnsSettingsResult struct {
	// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
	FlattenAllCnames bool `pulumi:"flattenAllCnames"`
	// Whether to enable Foundation DNS Advanced Nameservers on the zone.
	FoundationDns bool `pulumi:"foundationDns"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Settings for this internal zone.
	InternalDns GetZoneDnsSettingsInternalDns `pulumi:"internalDns"`
	// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
	MultiProvider bool `pulumi:"multiProvider"`
	// Settings determining the nameservers through which the zone should be available.
	Nameservers GetZoneDnsSettingsNameservers `pulumi:"nameservers"`
	// The time to live (TTL) of the zone's nameserver (NS) records.
	NsTtl float64 `pulumi:"nsTtl"`
	// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
	SecondaryOverrides bool `pulumi:"secondaryOverrides"`
	// Components of the zone's SOA record.
	Soa GetZoneDnsSettingsSoa `pulumi:"soa"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
	// Whether the zone mode is a regular or CDN/DNS only zone.
	// Available values: "standard", "cdn*only", "dns*only".
	ZoneMode string `pulumi:"zoneMode"`
}

func LookupZoneDnsSettingsOutput(ctx *pulumi.Context, args LookupZoneDnsSettingsOutputArgs, opts ...pulumi.InvokeOption) LookupZoneDnsSettingsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZoneDnsSettingsResultOutput, error) {
			args := v.(LookupZoneDnsSettingsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZoneDnsSettings:getZoneDnsSettings", args, LookupZoneDnsSettingsResultOutput{}, options).(LookupZoneDnsSettingsResultOutput), nil
		}).(LookupZoneDnsSettingsResultOutput)
}

// A collection of arguments for invoking getZoneDnsSettings.
type LookupZoneDnsSettingsOutputArgs struct {
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneDnsSettingsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneDnsSettingsArgs)(nil)).Elem()
}

// A collection of values returned by getZoneDnsSettings.
type LookupZoneDnsSettingsResultOutput struct{ *pulumi.OutputState }

func (LookupZoneDnsSettingsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneDnsSettingsResult)(nil)).Elem()
}

func (o LookupZoneDnsSettingsResultOutput) ToLookupZoneDnsSettingsResultOutput() LookupZoneDnsSettingsResultOutput {
	return o
}

func (o LookupZoneDnsSettingsResultOutput) ToLookupZoneDnsSettingsResultOutputWithContext(ctx context.Context) LookupZoneDnsSettingsResultOutput {
	return o
}

// Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
func (o LookupZoneDnsSettingsResultOutput) FlattenAllCnames() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) bool { return v.FlattenAllCnames }).(pulumi.BoolOutput)
}

// Whether to enable Foundation DNS Advanced Nameservers on the zone.
func (o LookupZoneDnsSettingsResultOutput) FoundationDns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) bool { return v.FoundationDns }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZoneDnsSettingsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Settings for this internal zone.
func (o LookupZoneDnsSettingsResultOutput) InternalDns() GetZoneDnsSettingsInternalDnsOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) GetZoneDnsSettingsInternalDns { return v.InternalDns }).(GetZoneDnsSettingsInternalDnsOutput)
}

// Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
func (o LookupZoneDnsSettingsResultOutput) MultiProvider() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) bool { return v.MultiProvider }).(pulumi.BoolOutput)
}

// Settings determining the nameservers through which the zone should be available.
func (o LookupZoneDnsSettingsResultOutput) Nameservers() GetZoneDnsSettingsNameserversOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) GetZoneDnsSettingsNameservers { return v.Nameservers }).(GetZoneDnsSettingsNameserversOutput)
}

// The time to live (TTL) of the zone's nameserver (NS) records.
func (o LookupZoneDnsSettingsResultOutput) NsTtl() pulumi.Float64Output {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) float64 { return v.NsTtl }).(pulumi.Float64Output)
}

// Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
func (o LookupZoneDnsSettingsResultOutput) SecondaryOverrides() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) bool { return v.SecondaryOverrides }).(pulumi.BoolOutput)
}

// Components of the zone's SOA record.
func (o LookupZoneDnsSettingsResultOutput) Soa() GetZoneDnsSettingsSoaOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) GetZoneDnsSettingsSoa { return v.Soa }).(GetZoneDnsSettingsSoaOutput)
}

// Identifier.
func (o LookupZoneDnsSettingsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

// Whether the zone mode is a regular or CDN/DNS only zone.
// Available values: "standard", "cdn*only", "dns*only".
func (o LookupZoneDnsSettingsResultOutput) ZoneMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneDnsSettingsResult) string { return v.ZoneMode }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneDnsSettingsResultOutput{})
}
