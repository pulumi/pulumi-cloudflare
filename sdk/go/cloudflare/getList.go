// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to lookup a [List](https://developers.cloudflare.com/api/operations/lists-get-lists).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupList(ctx, &cloudflare.LookupListArgs{
//				AccountId: "f037e56e89293a057740de681ac9abbe",
//				Name:      "list_name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupList(ctx *pulumi.Context, args *LookupListArgs, opts ...pulumi.InvokeOption) (*LookupListResult, error) {
	var rv LookupListResult
	err := ctx.Invoke("cloudflare:index/getList:getList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getList.
type LookupListArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// The list name to target for the resource.
	Name string `pulumi:"name"`
}

// A collection of values returned by getList.
type LookupListResult struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// List description.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List kind.
	Kind string `pulumi:"kind"`
	// The list name to target for the resource.
	Name string `pulumi:"name"`
	// Number of items in list.
	Numitems int `pulumi:"numitems"`
}

func LookupListOutput(ctx *pulumi.Context, args LookupListOutputArgs, opts ...pulumi.InvokeOption) LookupListResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupListResult, error) {
			args := v.(LookupListArgs)
			r, err := LookupList(ctx, &args, opts...)
			var s LookupListResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupListResultOutput)
}

// A collection of arguments for invoking getList.
type LookupListOutputArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The list name to target for the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListArgs)(nil)).Elem()
}

// A collection of values returned by getList.
type LookupListResultOutput struct{ *pulumi.OutputState }

func (LookupListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListResult)(nil)).Elem()
}

func (o LookupListResultOutput) ToLookupListResultOutput() LookupListResultOutput {
	return o
}

func (o LookupListResultOutput) ToLookupListResultOutputWithContext(ctx context.Context) LookupListResultOutput {
	return o
}

// The account identifier to target for the resource.
func (o LookupListResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// List description.
func (o LookupListResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListResult) string { return v.Id }).(pulumi.StringOutput)
}

// List kind.
func (o LookupListResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The list name to target for the resource.
func (o LookupListResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListResult) string { return v.Name }).(pulumi.StringOutput)
}

// Number of items in list.
func (o LookupListResultOutput) Numitems() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListResult) int { return v.Numitems }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListResultOutput{})
}
