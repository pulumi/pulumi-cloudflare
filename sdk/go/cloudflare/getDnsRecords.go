// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupDnsRecords(ctx, &cloudflare.LookupDnsRecordsArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Comment: cloudflare.GetDnsRecordsComment{
//					Absent:     pulumi.StringRef("absent"),
//					Contains:   pulumi.StringRef("ello, worl"),
//					Endswith:   pulumi.StringRef("o, world"),
//					Exact:      pulumi.StringRef("Hello, world"),
//					Present:    pulumi.StringRef("present"),
//					Startswith: pulumi.StringRef("Hello, w"),
//				},
//				Content: cloudflare.GetDnsRecordsContent{
//					Contains:   pulumi.StringRef("7.0.0."),
//					Endswith:   pulumi.StringRef(".0.1"),
//					Exact:      pulumi.StringRef("127.0.0.1"),
//					Startswith: pulumi.StringRef("127.0."),
//				},
//				Name: cloudflare.GetDnsRecordsName{
//					Contains:   pulumi.StringRef("w.example."),
//					Endswith:   pulumi.StringRef(".example.com"),
//					Exact:      pulumi.StringRef("www.example.com"),
//					Startswith: pulumi.StringRef("www.example"),
//				},
//				Search: pulumi.StringRef("www.cloudflare.com"),
//				Tag: cloudflare.GetDnsRecordsTag{
//					Absent:     pulumi.StringRef("important"),
//					Contains:   pulumi.StringRef("greeting:ello, worl"),
//					Endswith:   pulumi.StringRef("greeting:o, world"),
//					Exact:      pulumi.StringRef("greeting:Hello, world"),
//					Present:    pulumi.StringRef("important"),
//					Startswith: pulumi.StringRef("greeting:Hello, w"),
//				},
//				Type: pulumi.StringRef("A"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsRecords(ctx *pulumi.Context, args *LookupDnsRecordsArgs, opts ...pulumi.InvokeOption) (*LookupDnsRecordsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsRecordsResult
	err := ctx.Invoke("cloudflare:index/getDnsRecords:getDnsRecords", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsRecords.
type LookupDnsRecordsArgs struct {
	Comment *GetDnsRecordsComment `pulumi:"comment"`
	Content *GetDnsRecordsContent `pulumi:"content"`
	// Direction to order DNS records in.
	Direction *string `pulumi:"direction"`
	// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.
	Match *string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int               `pulumi:"maxItems"`
	Name     *GetDnsRecordsName `pulumi:"name"`
	// Field to order DNS records by.
	Order *string `pulumi:"order"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied *bool `pulumi:"proxied"`
	// Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.
	Search *string           `pulumi:"search"`
	Tag    *GetDnsRecordsTag `pulumi:"tag"`
	// Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.
	TagMatch *string `pulumi:"tagMatch"`
	// Record type.
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getDnsRecords.
type LookupDnsRecordsResult struct {
	Comment *GetDnsRecordsComment `pulumi:"comment"`
	Content *GetDnsRecordsContent `pulumi:"content"`
	// Direction to order DNS records in.
	Direction string `pulumi:"direction"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.
	Match string `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems *int               `pulumi:"maxItems"`
	Name     *GetDnsRecordsName `pulumi:"name"`
	// Field to order DNS records by.
	Order string `pulumi:"order"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied bool `pulumi:"proxied"`
	// The items returned by the data source
	Results []GetDnsRecordsResult `pulumi:"results"`
	// Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.
	Search *string           `pulumi:"search"`
	Tag    *GetDnsRecordsTag `pulumi:"tag"`
	// Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.
	TagMatch string `pulumi:"tagMatch"`
	// Record type.
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupDnsRecordsOutput(ctx *pulumi.Context, args LookupDnsRecordsOutputArgs, opts ...pulumi.InvokeOption) LookupDnsRecordsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsRecordsResultOutput, error) {
			args := v.(LookupDnsRecordsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getDnsRecords:getDnsRecords", args, LookupDnsRecordsResultOutput{}, options).(LookupDnsRecordsResultOutput), nil
		}).(LookupDnsRecordsResultOutput)
}

// A collection of arguments for invoking getDnsRecords.
type LookupDnsRecordsOutputArgs struct {
	Comment GetDnsRecordsCommentPtrInput `pulumi:"comment"`
	Content GetDnsRecordsContentPtrInput `pulumi:"content"`
	// Direction to order DNS records in.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput        `pulumi:"maxItems"`
	Name     GetDnsRecordsNamePtrInput `pulumi:"name"`
	// Field to order DNS records by.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// Whether the record is receiving the performance and security benefits of Cloudflare.
	Proxied pulumi.BoolPtrInput `pulumi:"proxied"`
	// Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.
	Search pulumi.StringPtrInput    `pulumi:"search"`
	Tag    GetDnsRecordsTagPtrInput `pulumi:"tag"`
	// Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.
	TagMatch pulumi.StringPtrInput `pulumi:"tagMatch"`
	// Record type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupDnsRecordsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordsArgs)(nil)).Elem()
}

// A collection of values returned by getDnsRecords.
type LookupDnsRecordsResultOutput struct{ *pulumi.OutputState }

func (LookupDnsRecordsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsRecordsResult)(nil)).Elem()
}

func (o LookupDnsRecordsResultOutput) ToLookupDnsRecordsResultOutput() LookupDnsRecordsResultOutput {
	return o
}

func (o LookupDnsRecordsResultOutput) ToLookupDnsRecordsResultOutputWithContext(ctx context.Context) LookupDnsRecordsResultOutput {
	return o
}

func (o LookupDnsRecordsResultOutput) Comment() GetDnsRecordsCommentPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *GetDnsRecordsComment { return v.Comment }).(GetDnsRecordsCommentPtrOutput)
}

func (o LookupDnsRecordsResultOutput) Content() GetDnsRecordsContentPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *GetDnsRecordsContent { return v.Content }).(GetDnsRecordsContentPtrOutput)
}

// Direction to order DNS records in.
func (o LookupDnsRecordsResultOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.Direction }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsRecordsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead. Note that the interaction between tag filters is controlled by the `tag-match` parameter instead.
func (o LookupDnsRecordsResultOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.Match }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupDnsRecordsResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

func (o LookupDnsRecordsResultOutput) Name() GetDnsRecordsNamePtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *GetDnsRecordsName { return v.Name }).(GetDnsRecordsNamePtrOutput)
}

// Field to order DNS records by.
func (o LookupDnsRecordsResultOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.Order }).(pulumi.StringOutput)
}

// Whether the record is receiving the performance and security benefits of Cloudflare.
func (o LookupDnsRecordsResultOutput) Proxied() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) bool { return v.Proxied }).(pulumi.BoolOutput)
}

// The items returned by the data source
func (o LookupDnsRecordsResultOutput) Results() GetDnsRecordsResultArrayOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) []GetDnsRecordsResult { return v.Results }).(GetDnsRecordsResultArrayOutput)
}

// Allows searching in multiple properties of a DNS record simultaneously. This parameter is intended for human users, not automation. Its exact behavior is intentionally left unspecified and is subject to change in the future. This parameter works independently of the `match` setting. For automated searches, please use the other available parameters.
func (o LookupDnsRecordsResultOutput) Search() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *string { return v.Search }).(pulumi.StringPtrOutput)
}

func (o LookupDnsRecordsResultOutput) Tag() GetDnsRecordsTagPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *GetDnsRecordsTag { return v.Tag }).(GetDnsRecordsTagPtrOutput)
}

// Whether to match all tag search requirements or at least one (any). If set to `all`, acts like a logical AND between tag filters. If set to `any`, acts like a logical OR instead. Note that the regular `match` parameter is still used to combine the resulting condition with other filters that aren't related to tags.
func (o LookupDnsRecordsResultOutput) TagMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.TagMatch }).(pulumi.StringOutput)
}

// Record type.
func (o LookupDnsRecordsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Identifier
func (o LookupDnsRecordsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsRecordsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsRecordsResultOutput{})
}
