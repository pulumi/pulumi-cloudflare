// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWorker(ctx, &cloudflare.LookupWorkerArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				WorkerId:  pulumi.StringRef("worker_id"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorker(ctx *pulumi.Context, args *LookupWorkerArgs, opts ...pulumi.InvokeOption) (*LookupWorkerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkerResult
	err := ctx.Invoke("cloudflare:index/getWorker:getWorker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorker.
type LookupWorkerArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId *string `pulumi:"workerId"`
}

// A collection of values returned by getWorker.
type LookupWorkerResult struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// When the Worker was created.
	CreatedOn string `pulumi:"createdOn"`
	// Identifier for the Worker, which can be ID or name.
	Id string `pulumi:"id"`
	// Whether logpush is enabled for the Worker.
	Logpush bool `pulumi:"logpush"`
	// Name of the Worker.
	Name string `pulumi:"name"`
	// Observability settings for the Worker.
	Observability GetWorkerObservability `pulumi:"observability"`
	// Subdomain settings for the Worker.
	Subdomain GetWorkerSubdomain `pulumi:"subdomain"`
	// Tags associated with the Worker.
	Tags []string `pulumi:"tags"`
	// Other Workers that should consume logs from the Worker.
	TailConsumers []GetWorkerTailConsumer `pulumi:"tailConsumers"`
	// When the Worker was most recently updated.
	UpdatedOn string `pulumi:"updatedOn"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId *string `pulumi:"workerId"`
}

func LookupWorkerOutput(ctx *pulumi.Context, args LookupWorkerOutputArgs, opts ...pulumi.InvokeOption) LookupWorkerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkerResultOutput, error) {
			args := v.(LookupWorkerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWorker:getWorker", args, LookupWorkerResultOutput{}, options).(LookupWorkerResultOutput), nil
		}).(LookupWorkerResultOutput)
}

// A collection of arguments for invoking getWorker.
type LookupWorkerOutputArgs struct {
	// Identifier.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier for the Worker, which can be ID or name.
	WorkerId pulumi.StringPtrInput `pulumi:"workerId"`
}

func (LookupWorkerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkerArgs)(nil)).Elem()
}

// A collection of values returned by getWorker.
type LookupWorkerResultOutput struct{ *pulumi.OutputState }

func (LookupWorkerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkerResult)(nil)).Elem()
}

func (o LookupWorkerResultOutput) ToLookupWorkerResultOutput() LookupWorkerResultOutput {
	return o
}

func (o LookupWorkerResultOutput) ToLookupWorkerResultOutputWithContext(ctx context.Context) LookupWorkerResultOutput {
	return o
}

// Identifier.
func (o LookupWorkerResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// When the Worker was created.
func (o LookupWorkerResultOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerResult) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// Identifier for the Worker, which can be ID or name.
func (o LookupWorkerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether logpush is enabled for the Worker.
func (o LookupWorkerResultOutput) Logpush() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkerResult) bool { return v.Logpush }).(pulumi.BoolOutput)
}

// Name of the Worker.
func (o LookupWorkerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Observability settings for the Worker.
func (o LookupWorkerResultOutput) Observability() GetWorkerObservabilityOutput {
	return o.ApplyT(func(v LookupWorkerResult) GetWorkerObservability { return v.Observability }).(GetWorkerObservabilityOutput)
}

// Subdomain settings for the Worker.
func (o LookupWorkerResultOutput) Subdomain() GetWorkerSubdomainOutput {
	return o.ApplyT(func(v LookupWorkerResult) GetWorkerSubdomain { return v.Subdomain }).(GetWorkerSubdomainOutput)
}

// Tags associated with the Worker.
func (o LookupWorkerResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupWorkerResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Other Workers that should consume logs from the Worker.
func (o LookupWorkerResultOutput) TailConsumers() GetWorkerTailConsumerArrayOutput {
	return o.ApplyT(func(v LookupWorkerResult) []GetWorkerTailConsumer { return v.TailConsumers }).(GetWorkerTailConsumerArrayOutput)
}

// When the Worker was most recently updated.
func (o LookupWorkerResultOutput) UpdatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkerResult) string { return v.UpdatedOn }).(pulumi.StringOutput)
}

// Identifier for the Worker, which can be ID or name.
func (o LookupWorkerResultOutput) WorkerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkerResult) *string { return v.WorkerId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkerResultOutput{})
}
