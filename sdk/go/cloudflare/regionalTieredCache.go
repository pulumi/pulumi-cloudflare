// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Instructs Cloudflare to check a regional hub data center on the way to your upper tier.
// This can help improve performance for smart and custom tiered cache topologies.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewRegionalTieredCache(ctx, "example", &cloudflare.RegionalTieredCacheArgs{
//				Value:  pulumi.String("on"),
//				ZoneId: pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/regionalTieredCache:RegionalTieredCache example <zone_id>
//
// ```
type RegionalTieredCache struct {
	pulumi.CustomResourceState

	// Value of the Regional Tiered Cache zone setting.
	Value pulumi.StringOutput `pulumi:"value"`
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewRegionalTieredCache registers a new resource with the given unique name, arguments, and options.
func NewRegionalTieredCache(ctx *pulumi.Context,
	name string, args *RegionalTieredCacheArgs, opts ...pulumi.ResourceOption) (*RegionalTieredCache, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionalTieredCache
	err := ctx.RegisterResource("cloudflare:index/regionalTieredCache:RegionalTieredCache", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionalTieredCache gets an existing RegionalTieredCache resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionalTieredCache(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionalTieredCacheState, opts ...pulumi.ResourceOption) (*RegionalTieredCache, error) {
	var resource RegionalTieredCache
	err := ctx.ReadResource("cloudflare:index/regionalTieredCache:RegionalTieredCache", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionalTieredCache resources.
type regionalTieredCacheState struct {
	// Value of the Regional Tiered Cache zone setting.
	Value *string `pulumi:"value"`
	// The zone identifier to target for the resource.
	ZoneId *string `pulumi:"zoneId"`
}

type RegionalTieredCacheState struct {
	// Value of the Regional Tiered Cache zone setting.
	Value pulumi.StringPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringPtrInput
}

func (RegionalTieredCacheState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalTieredCacheState)(nil)).Elem()
}

type regionalTieredCacheArgs struct {
	// Value of the Regional Tiered Cache zone setting.
	Value string `pulumi:"value"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a RegionalTieredCache resource.
type RegionalTieredCacheArgs struct {
	// Value of the Regional Tiered Cache zone setting.
	Value pulumi.StringInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput
}

func (RegionalTieredCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionalTieredCacheArgs)(nil)).Elem()
}

type RegionalTieredCacheInput interface {
	pulumi.Input

	ToRegionalTieredCacheOutput() RegionalTieredCacheOutput
	ToRegionalTieredCacheOutputWithContext(ctx context.Context) RegionalTieredCacheOutput
}

func (*RegionalTieredCache) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalTieredCache)(nil)).Elem()
}

func (i *RegionalTieredCache) ToRegionalTieredCacheOutput() RegionalTieredCacheOutput {
	return i.ToRegionalTieredCacheOutputWithContext(context.Background())
}

func (i *RegionalTieredCache) ToRegionalTieredCacheOutputWithContext(ctx context.Context) RegionalTieredCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalTieredCacheOutput)
}

// RegionalTieredCacheArrayInput is an input type that accepts RegionalTieredCacheArray and RegionalTieredCacheArrayOutput values.
// You can construct a concrete instance of `RegionalTieredCacheArrayInput` via:
//
//	RegionalTieredCacheArray{ RegionalTieredCacheArgs{...} }
type RegionalTieredCacheArrayInput interface {
	pulumi.Input

	ToRegionalTieredCacheArrayOutput() RegionalTieredCacheArrayOutput
	ToRegionalTieredCacheArrayOutputWithContext(context.Context) RegionalTieredCacheArrayOutput
}

type RegionalTieredCacheArray []RegionalTieredCacheInput

func (RegionalTieredCacheArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalTieredCache)(nil)).Elem()
}

func (i RegionalTieredCacheArray) ToRegionalTieredCacheArrayOutput() RegionalTieredCacheArrayOutput {
	return i.ToRegionalTieredCacheArrayOutputWithContext(context.Background())
}

func (i RegionalTieredCacheArray) ToRegionalTieredCacheArrayOutputWithContext(ctx context.Context) RegionalTieredCacheArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalTieredCacheArrayOutput)
}

// RegionalTieredCacheMapInput is an input type that accepts RegionalTieredCacheMap and RegionalTieredCacheMapOutput values.
// You can construct a concrete instance of `RegionalTieredCacheMapInput` via:
//
//	RegionalTieredCacheMap{ "key": RegionalTieredCacheArgs{...} }
type RegionalTieredCacheMapInput interface {
	pulumi.Input

	ToRegionalTieredCacheMapOutput() RegionalTieredCacheMapOutput
	ToRegionalTieredCacheMapOutputWithContext(context.Context) RegionalTieredCacheMapOutput
}

type RegionalTieredCacheMap map[string]RegionalTieredCacheInput

func (RegionalTieredCacheMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalTieredCache)(nil)).Elem()
}

func (i RegionalTieredCacheMap) ToRegionalTieredCacheMapOutput() RegionalTieredCacheMapOutput {
	return i.ToRegionalTieredCacheMapOutputWithContext(context.Background())
}

func (i RegionalTieredCacheMap) ToRegionalTieredCacheMapOutputWithContext(ctx context.Context) RegionalTieredCacheMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionalTieredCacheMapOutput)
}

type RegionalTieredCacheOutput struct{ *pulumi.OutputState }

func (RegionalTieredCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionalTieredCache)(nil)).Elem()
}

func (o RegionalTieredCacheOutput) ToRegionalTieredCacheOutput() RegionalTieredCacheOutput {
	return o
}

func (o RegionalTieredCacheOutput) ToRegionalTieredCacheOutputWithContext(ctx context.Context) RegionalTieredCacheOutput {
	return o
}

// Value of the Regional Tiered Cache zone setting.
func (o RegionalTieredCacheOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalTieredCache) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource.
func (o RegionalTieredCacheOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionalTieredCache) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type RegionalTieredCacheArrayOutput struct{ *pulumi.OutputState }

func (RegionalTieredCacheArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionalTieredCache)(nil)).Elem()
}

func (o RegionalTieredCacheArrayOutput) ToRegionalTieredCacheArrayOutput() RegionalTieredCacheArrayOutput {
	return o
}

func (o RegionalTieredCacheArrayOutput) ToRegionalTieredCacheArrayOutputWithContext(ctx context.Context) RegionalTieredCacheArrayOutput {
	return o
}

func (o RegionalTieredCacheArrayOutput) Index(i pulumi.IntInput) RegionalTieredCacheOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionalTieredCache {
		return vs[0].([]*RegionalTieredCache)[vs[1].(int)]
	}).(RegionalTieredCacheOutput)
}

type RegionalTieredCacheMapOutput struct{ *pulumi.OutputState }

func (RegionalTieredCacheMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionalTieredCache)(nil)).Elem()
}

func (o RegionalTieredCacheMapOutput) ToRegionalTieredCacheMapOutput() RegionalTieredCacheMapOutput {
	return o
}

func (o RegionalTieredCacheMapOutput) ToRegionalTieredCacheMapOutputWithContext(ctx context.Context) RegionalTieredCacheMapOutput {
	return o
}

func (o RegionalTieredCacheMapOutput) MapIndex(k pulumi.StringInput) RegionalTieredCacheOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionalTieredCache {
		return vs[0].(map[string]*RegionalTieredCache)[vs[1].(string)]
	}).(RegionalTieredCacheOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalTieredCacheInput)(nil)).Elem(), &RegionalTieredCache{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalTieredCacheArrayInput)(nil)).Elem(), RegionalTieredCacheArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionalTieredCacheMapInput)(nil)).Elem(), RegionalTieredCacheMap{})
	pulumi.RegisterOutputType(RegionalTieredCacheOutput{})
	pulumi.RegisterOutputType(RegionalTieredCacheArrayOutput{})
	pulumi.RegisterOutputType(RegionalTieredCacheMapOutput{})
}
