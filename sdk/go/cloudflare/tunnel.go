// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Tunnel exposes applications running on your local web server on any
// network with an internet connection without manually adding DNS
// records or configuring a firewall or router.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewTunnel(ctx, "example", &cloudflare.TunnelArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("my-tunnel"),
//				Secret:    pulumi.String("AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/tunnel:Tunnel example <account_id>/<tunnel_id>
//
// ```
type Tunnel struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Usable CNAME for accessing the Tunnel.
	Cname pulumi.StringOutput `pulumi:"cname"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
	ConfigSrc pulumi.StringPtrOutput `pulumi:"configSrc"`
	// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringOutput `pulumi:"name"`
	// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
	Secret pulumi.StringOutput `pulumi:"secret"`
	// Token used by a connector to authenticate and run the tunnel.
	TunnelToken pulumi.StringOutput `pulumi:"tunnelToken"`
}

// NewTunnel registers a new resource with the given unique name, arguments, and options.
func NewTunnel(ctx *pulumi.Context,
	name string, args *TunnelArgs, opts ...pulumi.ResourceOption) (*Tunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Secret == nil {
		return nil, errors.New("invalid value for required argument 'Secret'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
		"tunnelToken",
	})
	opts = append(opts, secrets)
	var resource Tunnel
	err := ctx.RegisterResource("cloudflare:index/tunnel:Tunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnel gets an existing Tunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelState, opts ...pulumi.ResourceOption) (*Tunnel, error) {
	var resource Tunnel
	err := ctx.ReadResource("cloudflare:index/tunnel:Tunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tunnel resources.
type tunnelState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// Usable CNAME for accessing the Tunnel.
	Cname *string `pulumi:"cname"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
	ConfigSrc *string `pulumi:"configSrc"`
	// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
	Name *string `pulumi:"name"`
	// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
	Secret *string `pulumi:"secret"`
	// Token used by a connector to authenticate and run the tunnel.
	TunnelToken *string `pulumi:"tunnelToken"`
}

type TunnelState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// Usable CNAME for accessing the Tunnel.
	Cname pulumi.StringPtrInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
	ConfigSrc pulumi.StringPtrInput
	// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringPtrInput
	// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
	Secret pulumi.StringPtrInput
	// Token used by a connector to authenticate and run the tunnel.
	TunnelToken pulumi.StringPtrInput
}

func (TunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelState)(nil)).Elem()
}

type tunnelArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
	ConfigSrc *string `pulumi:"configSrc"`
	// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
	// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
	Secret string `pulumi:"secret"`
}

// The set of arguments for constructing a Tunnel resource.
type TunnelArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
	ConfigSrc pulumi.StringPtrInput
	// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringInput
	// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
	Secret pulumi.StringInput
}

func (TunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelArgs)(nil)).Elem()
}

type TunnelInput interface {
	pulumi.Input

	ToTunnelOutput() TunnelOutput
	ToTunnelOutputWithContext(ctx context.Context) TunnelOutput
}

func (*Tunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**Tunnel)(nil)).Elem()
}

func (i *Tunnel) ToTunnelOutput() TunnelOutput {
	return i.ToTunnelOutputWithContext(context.Background())
}

func (i *Tunnel) ToTunnelOutputWithContext(ctx context.Context) TunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelOutput)
}

// TunnelArrayInput is an input type that accepts TunnelArray and TunnelArrayOutput values.
// You can construct a concrete instance of `TunnelArrayInput` via:
//
//	TunnelArray{ TunnelArgs{...} }
type TunnelArrayInput interface {
	pulumi.Input

	ToTunnelArrayOutput() TunnelArrayOutput
	ToTunnelArrayOutputWithContext(context.Context) TunnelArrayOutput
}

type TunnelArray []TunnelInput

func (TunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tunnel)(nil)).Elem()
}

func (i TunnelArray) ToTunnelArrayOutput() TunnelArrayOutput {
	return i.ToTunnelArrayOutputWithContext(context.Background())
}

func (i TunnelArray) ToTunnelArrayOutputWithContext(ctx context.Context) TunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelArrayOutput)
}

// TunnelMapInput is an input type that accepts TunnelMap and TunnelMapOutput values.
// You can construct a concrete instance of `TunnelMapInput` via:
//
//	TunnelMap{ "key": TunnelArgs{...} }
type TunnelMapInput interface {
	pulumi.Input

	ToTunnelMapOutput() TunnelMapOutput
	ToTunnelMapOutputWithContext(context.Context) TunnelMapOutput
}

type TunnelMap map[string]TunnelInput

func (TunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tunnel)(nil)).Elem()
}

func (i TunnelMap) ToTunnelMapOutput() TunnelMapOutput {
	return i.ToTunnelMapOutputWithContext(context.Background())
}

func (i TunnelMap) ToTunnelMapOutputWithContext(ctx context.Context) TunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelMapOutput)
}

type TunnelOutput struct{ *pulumi.OutputState }

func (TunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tunnel)(nil)).Elem()
}

func (o TunnelOutput) ToTunnelOutput() TunnelOutput {
	return o
}

func (o TunnelOutput) ToTunnelOutputWithContext(ctx context.Context) TunnelOutput {
	return o
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o TunnelOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Usable CNAME for accessing the Tunnel.
func (o TunnelOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Cname }).(pulumi.StringOutput)
}

// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard or using tunnel*config, tunnel*route or tunnel*virtual*network resources. Available values: `local`, `cloudflare`. **Modifying this attribute will force creation of a new resource.**
func (o TunnelOutput) ConfigSrc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringPtrOutput { return v.ConfigSrc }).(pulumi.StringPtrOutput)
}

// A user-friendly name chosen when the tunnel is created. **Modifying this attribute will force creation of a new resource.**
func (o TunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel's password. Anyone wishing to run the tunnel needs this password. **Modifying this attribute will force creation of a new resource.**
func (o TunnelOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// Token used by a connector to authenticate and run the tunnel.
func (o TunnelOutput) TunnelToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.TunnelToken }).(pulumi.StringOutput)
}

type TunnelArrayOutput struct{ *pulumi.OutputState }

func (TunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tunnel)(nil)).Elem()
}

func (o TunnelArrayOutput) ToTunnelArrayOutput() TunnelArrayOutput {
	return o
}

func (o TunnelArrayOutput) ToTunnelArrayOutputWithContext(ctx context.Context) TunnelArrayOutput {
	return o
}

func (o TunnelArrayOutput) Index(i pulumi.IntInput) TunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tunnel {
		return vs[0].([]*Tunnel)[vs[1].(int)]
	}).(TunnelOutput)
}

type TunnelMapOutput struct{ *pulumi.OutputState }

func (TunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tunnel)(nil)).Elem()
}

func (o TunnelMapOutput) ToTunnelMapOutput() TunnelMapOutput {
	return o
}

func (o TunnelMapOutput) ToTunnelMapOutputWithContext(ctx context.Context) TunnelMapOutput {
	return o
}

func (o TunnelMapOutput) MapIndex(k pulumi.StringInput) TunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tunnel {
		return vs[0].(map[string]*Tunnel)[vs[1].(string)]
	}).(TunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelInput)(nil)).Elem(), &Tunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelArrayInput)(nil)).Elem(), TunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelMapInput)(nil)).Elem(), TunnelMap{})
	pulumi.RegisterOutputType(TunnelOutput{})
	pulumi.RegisterOutputType(TunnelArrayOutput{})
	pulumi.RegisterOutputType(TunnelMapOutput{})
}
