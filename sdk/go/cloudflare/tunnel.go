// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustTunnelCloudflared(ctx, "example_zero_trust_tunnel_cloudflared", &cloudflare.ZeroTrustTunnelCloudflaredArgs{
//				AccountId:    pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Name:         pulumi.String("blog"),
//				ConfigSrc:    pulumi.String("cloudflare"),
//				TunnelSecret: pulumi.String("AQIDBAUGBwgBAgMEBQYHCAECAwQFBgcIAQIDBAUGBwg="),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/tunnel:Tunnel example '<account_id>/<tunnel_id>'
// ```
//
// Deprecated: cloudflare.index/tunnel.Tunnel has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflared.ZeroTrustTunnelCloudflared
type Tunnel struct {
	pulumi.CustomResourceState

	// Cloudflare account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag pulumi.StringOutput `pulumi:"accountTag"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringOutput `pulumi:"configSrc"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections TunnelConnectionArrayOutput `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringOutput `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringOutput `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolOutput `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringOutput `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrOutput `pulumi:"tunnelSecret"`
}

// NewTunnel registers a new resource with the given unique name, arguments, and options.
func NewTunnel(ctx *pulumi.Context,
	name string, args *TunnelArgs, opts ...pulumi.ResourceOption) (*Tunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/tunnel:Tunnel"),
		},
	})
	opts = append(opts, aliases)
	if args.TunnelSecret != nil {
		args.TunnelSecret = pulumi.ToSecret(args.TunnelSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tunnelSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tunnel
	err := ctx.RegisterResource("cloudflare:index/tunnel:Tunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnel gets an existing Tunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelState, opts ...pulumi.ResourceOption) (*Tunnel, error) {
	var resource Tunnel
	err := ctx.ReadResource("cloudflare:index/tunnel:Tunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tunnel resources.
type tunnelState struct {
	// Cloudflare account ID
	AccountId *string `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag *string `pulumi:"accountTag"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc *string `pulumi:"configSrc"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections []TunnelConnection `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt *string `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt *string `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata *string `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name *string `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig *bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status *string `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType *string `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

type TunnelState struct {
	// Cloudflare account ID
	AccountId pulumi.StringPtrInput
	// Cloudflare account ID
	AccountTag pulumi.StringPtrInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringPtrInput
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	Connections TunnelConnectionArrayInput
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringPtrInput
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringPtrInput
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringPtrInput
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringPtrInput
	// Metadata associated with the tunnel.
	Metadata pulumi.StringPtrInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringPtrInput
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolPtrInput
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringPtrInput
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringPtrInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (TunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelState)(nil)).Elem()
}

type tunnelArgs struct {
	// Cloudflare account ID
	AccountId string `pulumi:"accountId"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc *string `pulumi:"configSrc"`
	// A user-friendly name for a tunnel.
	Name string `pulumi:"name"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

// The set of arguments for constructing a Tunnel resource.
type TunnelArgs struct {
	// Cloudflare account ID
	AccountId pulumi.StringInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	ConfigSrc pulumi.StringPtrInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (TunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelArgs)(nil)).Elem()
}

type TunnelInput interface {
	pulumi.Input

	ToTunnelOutput() TunnelOutput
	ToTunnelOutputWithContext(ctx context.Context) TunnelOutput
}

func (*Tunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**Tunnel)(nil)).Elem()
}

func (i *Tunnel) ToTunnelOutput() TunnelOutput {
	return i.ToTunnelOutputWithContext(context.Background())
}

func (i *Tunnel) ToTunnelOutputWithContext(ctx context.Context) TunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelOutput)
}

// TunnelArrayInput is an input type that accepts TunnelArray and TunnelArrayOutput values.
// You can construct a concrete instance of `TunnelArrayInput` via:
//
//	TunnelArray{ TunnelArgs{...} }
type TunnelArrayInput interface {
	pulumi.Input

	ToTunnelArrayOutput() TunnelArrayOutput
	ToTunnelArrayOutputWithContext(context.Context) TunnelArrayOutput
}

type TunnelArray []TunnelInput

func (TunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tunnel)(nil)).Elem()
}

func (i TunnelArray) ToTunnelArrayOutput() TunnelArrayOutput {
	return i.ToTunnelArrayOutputWithContext(context.Background())
}

func (i TunnelArray) ToTunnelArrayOutputWithContext(ctx context.Context) TunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelArrayOutput)
}

// TunnelMapInput is an input type that accepts TunnelMap and TunnelMapOutput values.
// You can construct a concrete instance of `TunnelMapInput` via:
//
//	TunnelMap{ "key": TunnelArgs{...} }
type TunnelMapInput interface {
	pulumi.Input

	ToTunnelMapOutput() TunnelMapOutput
	ToTunnelMapOutputWithContext(context.Context) TunnelMapOutput
}

type TunnelMap map[string]TunnelInput

func (TunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tunnel)(nil)).Elem()
}

func (i TunnelMap) ToTunnelMapOutput() TunnelMapOutput {
	return i.ToTunnelMapOutputWithContext(context.Background())
}

func (i TunnelMap) ToTunnelMapOutputWithContext(ctx context.Context) TunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelMapOutput)
}

type TunnelOutput struct{ *pulumi.OutputState }

func (TunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tunnel)(nil)).Elem()
}

func (o TunnelOutput) ToTunnelOutput() TunnelOutput {
	return o
}

func (o TunnelOutput) ToTunnelOutputWithContext(ctx context.Context) TunnelOutput {
	return o
}

// Cloudflare account ID
func (o TunnelOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Cloudflare account ID
func (o TunnelOutput) AccountTag() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.AccountTag }).(pulumi.StringOutput)
}

// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
// Available values: "local", "cloudflare".
func (o TunnelOutput) ConfigSrc() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.ConfigSrc }).(pulumi.StringOutput)
}

// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
func (o TunnelOutput) Connections() TunnelConnectionArrayOutput {
	return o.ApplyT(func(v *Tunnel) TunnelConnectionArrayOutput { return v.Connections }).(TunnelConnectionArrayOutput)
}

// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
func (o TunnelOutput) ConnsActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.ConnsActiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
func (o TunnelOutput) ConnsInactiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.ConnsInactiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was created.
func (o TunnelOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
func (o TunnelOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Metadata associated with the tunnel.
func (o TunnelOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// A user-friendly name for a tunnel.
func (o TunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
func (o TunnelOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.BoolOutput { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
// Available values: "inactive", "degraded", "healthy", "down".
func (o TunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of tunnel.
// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
func (o TunnelOutput) TunType() pulumi.StringOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringOutput { return v.TunType }).(pulumi.StringOutput)
}

// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
func (o TunnelOutput) TunnelSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tunnel) pulumi.StringPtrOutput { return v.TunnelSecret }).(pulumi.StringPtrOutput)
}

type TunnelArrayOutput struct{ *pulumi.OutputState }

func (TunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tunnel)(nil)).Elem()
}

func (o TunnelArrayOutput) ToTunnelArrayOutput() TunnelArrayOutput {
	return o
}

func (o TunnelArrayOutput) ToTunnelArrayOutputWithContext(ctx context.Context) TunnelArrayOutput {
	return o
}

func (o TunnelArrayOutput) Index(i pulumi.IntInput) TunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tunnel {
		return vs[0].([]*Tunnel)[vs[1].(int)]
	}).(TunnelOutput)
}

type TunnelMapOutput struct{ *pulumi.OutputState }

func (TunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tunnel)(nil)).Elem()
}

func (o TunnelMapOutput) ToTunnelMapOutput() TunnelMapOutput {
	return o
}

func (o TunnelMapOutput) ToTunnelMapOutputWithContext(ctx context.Context) TunnelMapOutput {
	return o
}

func (o TunnelMapOutput) MapIndex(k pulumi.StringInput) TunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tunnel {
		return vs[0].(map[string]*Tunnel)[vs[1].(string)]
	}).(TunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelInput)(nil)).Elem(), &Tunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelArrayInput)(nil)).Elem(), TunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelMapInput)(nil)).Elem(), TunnelMap{})
	pulumi.RegisterOutputType(TunnelOutput{})
	pulumi.RegisterOutputType(TunnelArrayOutput{})
	pulumi.RegisterOutputType(TunnelMapOutput{})
}
