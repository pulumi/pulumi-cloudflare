// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWorkersRoute(ctx, &cloudflare.LookupWorkersRouteArgs{
//				ZoneId:  "023e105f4ecef8ad9ca31a8372d0c353",
//				RouteId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkersRoute(ctx *pulumi.Context, args *LookupWorkersRouteArgs, opts ...pulumi.InvokeOption) (*LookupWorkersRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkersRouteResult
	err := ctx.Invoke("cloudflare:index/getWorkersRoute:getWorkersRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkersRoute.
type LookupWorkersRouteArgs struct {
	// Identifier.
	RouteId *string `pulumi:"routeId"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getWorkersRoute.
type LookupWorkersRouteResult struct {
	// Identifier.
	Id string `pulumi:"id"`
	// Pattern to match incoming requests against. [Learn more](https://developers.cloudflare.com/workers/configuration/routing/routes/#matching-behavior).
	Pattern string `pulumi:"pattern"`
	// Identifier.
	RouteId *string `pulumi:"routeId"`
	// Name of the script to run if the route matches.
	Script string `pulumi:"script"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupWorkersRouteOutput(ctx *pulumi.Context, args LookupWorkersRouteOutputArgs, opts ...pulumi.InvokeOption) LookupWorkersRouteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkersRouteResultOutput, error) {
			args := v.(LookupWorkersRouteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWorkersRoute:getWorkersRoute", args, LookupWorkersRouteResultOutput{}, options).(LookupWorkersRouteResultOutput), nil
		}).(LookupWorkersRouteResultOutput)
}

// A collection of arguments for invoking getWorkersRoute.
type LookupWorkersRouteOutputArgs struct {
	// Identifier.
	RouteId pulumi.StringPtrInput `pulumi:"routeId"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupWorkersRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersRouteArgs)(nil)).Elem()
}

// A collection of values returned by getWorkersRoute.
type LookupWorkersRouteResultOutput struct{ *pulumi.OutputState }

func (LookupWorkersRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersRouteResult)(nil)).Elem()
}

func (o LookupWorkersRouteResultOutput) ToLookupWorkersRouteResultOutput() LookupWorkersRouteResultOutput {
	return o
}

func (o LookupWorkersRouteResultOutput) ToLookupWorkersRouteResultOutputWithContext(ctx context.Context) LookupWorkersRouteResultOutput {
	return o
}

// Identifier.
func (o LookupWorkersRouteResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersRouteResult) string { return v.Id }).(pulumi.StringOutput)
}

// Pattern to match incoming requests against. [Learn more](https://developers.cloudflare.com/workers/configuration/routing/routes/#matching-behavior).
func (o LookupWorkersRouteResultOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersRouteResult) string { return v.Pattern }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupWorkersRouteResultOutput) RouteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkersRouteResult) *string { return v.RouteId }).(pulumi.StringPtrOutput)
}

// Name of the script to run if the route matches.
func (o LookupWorkersRouteResultOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersRouteResult) string { return v.Script }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupWorkersRouteResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersRouteResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkersRouteResultOutput{})
}
