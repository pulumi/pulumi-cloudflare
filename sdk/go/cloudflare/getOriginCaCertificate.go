// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupOriginCaCertificate(ctx, &cloudflare.LookupOriginCaCertificateArgs{
//				CertificateId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOriginCaCertificate(ctx *pulumi.Context, args *LookupOriginCaCertificateArgs, opts ...pulumi.InvokeOption) (*LookupOriginCaCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOriginCaCertificateResult
	err := ctx.Invoke("cloudflare:index/getOriginCaCertificate:getOriginCaCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOriginCaCertificate.
type LookupOriginCaCertificateArgs struct {
	// Identifier.
	CertificateId *string                       `pulumi:"certificateId"`
	Filter        *GetOriginCaCertificateFilter `pulumi:"filter"`
}

// A collection of values returned by getOriginCaCertificate.
type LookupOriginCaCertificateResult struct {
	// The Origin CA certificate. Will be newline-encoded.
	Certificate string `pulumi:"certificate"`
	// Identifier.
	CertificateId *string `pulumi:"certificateId"`
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr string `pulumi:"csr"`
	// When the certificate will expire.
	ExpiresOn string                        `pulumi:"expiresOn"`
	Filter    *GetOriginCaCertificateFilter `pulumi:"filter"`
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames []string `pulumi:"hostnames"`
	// Identifier.
	Id string `pulumi:"id"`
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType string `pulumi:"requestType"`
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity float64 `pulumi:"requestedValidity"`
}

func LookupOriginCaCertificateOutput(ctx *pulumi.Context, args LookupOriginCaCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupOriginCaCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupOriginCaCertificateResultOutput, error) {
			args := v.(LookupOriginCaCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getOriginCaCertificate:getOriginCaCertificate", args, LookupOriginCaCertificateResultOutput{}, options).(LookupOriginCaCertificateResultOutput), nil
		}).(LookupOriginCaCertificateResultOutput)
}

// A collection of arguments for invoking getOriginCaCertificate.
type LookupOriginCaCertificateOutputArgs struct {
	// Identifier.
	CertificateId pulumi.StringPtrInput                `pulumi:"certificateId"`
	Filter        GetOriginCaCertificateFilterPtrInput `pulumi:"filter"`
}

func (LookupOriginCaCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOriginCaCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getOriginCaCertificate.
type LookupOriginCaCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupOriginCaCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOriginCaCertificateResult)(nil)).Elem()
}

func (o LookupOriginCaCertificateResultOutput) ToLookupOriginCaCertificateResultOutput() LookupOriginCaCertificateResultOutput {
	return o
}

func (o LookupOriginCaCertificateResultOutput) ToLookupOriginCaCertificateResultOutputWithContext(ctx context.Context) LookupOriginCaCertificateResultOutput {
	return o
}

// The Origin CA certificate. Will be newline-encoded.
func (o LookupOriginCaCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupOriginCaCertificateResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// The Certificate Signing Request (CSR). Must be newline-encoded.
func (o LookupOriginCaCertificateResultOutput) Csr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) string { return v.Csr }).(pulumi.StringOutput)
}

// When the certificate will expire.
func (o LookupOriginCaCertificateResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

func (o LookupOriginCaCertificateResultOutput) Filter() GetOriginCaCertificateFilterPtrOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) *GetOriginCaCertificateFilter { return v.Filter }).(GetOriginCaCertificateFilterPtrOutput)
}

// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
func (o LookupOriginCaCertificateResultOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// Identifier.
func (o LookupOriginCaCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
func (o LookupOriginCaCertificateResultOutput) RequestType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) string { return v.RequestType }).(pulumi.StringOutput)
}

// The number of days for which the certificate should be valid.
// Available values: 7, 30, 90, 365, 730, 1095, 5475.
func (o LookupOriginCaCertificateResultOutput) RequestedValidity() pulumi.Float64Output {
	return o.ApplyT(func(v LookupOriginCaCertificateResult) float64 { return v.RequestedValidity }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(LookupOriginCaCertificateResultOutput{})
}
