// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupNotificationPolicy(ctx, &cloudflare.LookupNotificationPolicyArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				PolicyId:  pulumi.StringRef("0da2b59e-f118-439d-8097-bdfb215203c9"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNotificationPolicy(ctx *pulumi.Context, args *LookupNotificationPolicyArgs, opts ...pulumi.InvokeOption) (*LookupNotificationPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNotificationPolicyResult
	err := ctx.Invoke("cloudflare:index/getNotificationPolicy:getNotificationPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotificationPolicy.
type LookupNotificationPolicyArgs struct {
	// The account id
	AccountId string `pulumi:"accountId"`
	// The unique identifier of a notification policy
	PolicyId *string `pulumi:"policyId"`
}

// A collection of values returned by getNotificationPolicy.
type LookupNotificationPolicyResult struct {
	// The account id
	AccountId string `pulumi:"accountId"`
	// Optional specification of how often to re-alert from the same incident, not support on all alert types.
	AlertInterval string `pulumi:"alertInterval"`
	// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
	// Available values: "access*custom*certificate*expiration*type", "advanced*ddos*attack*l4*alert", "advanced*ddos*attack*l7*alert", "advanced*http*alert*error", "bgp*hijack*notification", "billing*usage*alert", "block*notification*block*removed", "block*notification*new*block", "block*notification*review*rejected", "bot*traffic*basic*alert", "brand*protection*alert", "brand*protection*digest", "clickhouse*alert*fw*anomaly", "clickhouse*alert*fw*ent*anomaly", "cloudforce*one*request*notification", "custom*analytics", "custom*bot*detection*alert", "custom*ssl*certificate*event*type", "dedicated*ssl*certificate*event*type", "device*connectivity*anomaly*alert", "dos*attack*l4", "dos*attack*l7", "expiring*service*token*alert", "failing*logpush*job*disabled*alert", "fbm*auto*advertisement", "fbm*dosd*attack", "fbm*volumetric*attack", "health*check*status*notification", "hostname*aop*custom*certificate*expiration*type", "http*alert*edge*error", "http*alert*origin*error", "image*notification", "image*resizing*notification", "incident*alert", "load*balancing*health*alert", "load*balancing*pool*enablement*alert", "logo*match*alert", "magic*tunnel*health*check*event", "magic*wan*tunnel*health", "maintenance*event*notification", "mtls*certificate*store*certificate*expiration*type", "pages*event*alert", "radar*notification", "real*origin*monitoring", "scriptmonitor*alert*new*code*change*detections", "scriptmonitor*alert*new*hosts", "scriptmonitor*alert*new*malicious*hosts", "scriptmonitor*alert*new*malicious*scripts", "scriptmonitor*alert*new*malicious*url", "scriptmonitor*alert*new*max*length*resource*url", "scriptmonitor*alert*new*resources", "secondary*dns*all*primaries*failing", "secondary*dns*primaries*failing", "secondary*dns*warning", "secondary*dns*zone*successfully*updated", "secondary*dns*zone*validation*warning", "security*insights*alert", "sentinel*alert", "stream*live*notifications", "synthetic*test*latency*alert", "synthetic*test*low*availability*alert", "traffic*anomalies*alert", "tunnel*health*event", "tunnel*update*event", "universal*ssl*event*type", "web*analytics*metrics*update", "zone*aop*custom*certificate*expiration*type".
	AlertType string `pulumi:"alertType"`
	Created   string `pulumi:"created"`
	// Optional description for the Notification policy.
	Description string `pulumi:"description"`
	// Whether or not the Notification policy is enabled.
	Enabled bool `pulumi:"enabled"`
	// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
	Filters GetNotificationPolicyFilters `pulumi:"filters"`
	// The unique identifier of a notification policy
	Id string `pulumi:"id"`
	// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
	Mechanisms GetNotificationPolicyMechanisms `pulumi:"mechanisms"`
	Modified   string                          `pulumi:"modified"`
	// Name of the policy.
	Name string `pulumi:"name"`
	// The unique identifier of a notification policy
	PolicyId *string `pulumi:"policyId"`
}

func LookupNotificationPolicyOutput(ctx *pulumi.Context, args LookupNotificationPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupNotificationPolicyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNotificationPolicyResultOutput, error) {
			args := v.(LookupNotificationPolicyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getNotificationPolicy:getNotificationPolicy", args, LookupNotificationPolicyResultOutput{}, options).(LookupNotificationPolicyResultOutput), nil
		}).(LookupNotificationPolicyResultOutput)
}

// A collection of arguments for invoking getNotificationPolicy.
type LookupNotificationPolicyOutputArgs struct {
	// The account id
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The unique identifier of a notification policy
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
}

func (LookupNotificationPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getNotificationPolicy.
type LookupNotificationPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupNotificationPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNotificationPolicyResult)(nil)).Elem()
}

func (o LookupNotificationPolicyResultOutput) ToLookupNotificationPolicyResultOutput() LookupNotificationPolicyResultOutput {
	return o
}

func (o LookupNotificationPolicyResultOutput) ToLookupNotificationPolicyResultOutputWithContext(ctx context.Context) LookupNotificationPolicyResultOutput {
	return o
}

// The account id
func (o LookupNotificationPolicyResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Optional specification of how often to re-alert from the same incident, not support on all alert types.
func (o LookupNotificationPolicyResultOutput) AlertInterval() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.AlertInterval }).(pulumi.StringOutput)
}

// Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
// Available values: "access*custom*certificate*expiration*type", "advanced*ddos*attack*l4*alert", "advanced*ddos*attack*l7*alert", "advanced*http*alert*error", "bgp*hijack*notification", "billing*usage*alert", "block*notification*block*removed", "block*notification*new*block", "block*notification*review*rejected", "bot*traffic*basic*alert", "brand*protection*alert", "brand*protection*digest", "clickhouse*alert*fw*anomaly", "clickhouse*alert*fw*ent*anomaly", "cloudforce*one*request*notification", "custom*analytics", "custom*bot*detection*alert", "custom*ssl*certificate*event*type", "dedicated*ssl*certificate*event*type", "device*connectivity*anomaly*alert", "dos*attack*l4", "dos*attack*l7", "expiring*service*token*alert", "failing*logpush*job*disabled*alert", "fbm*auto*advertisement", "fbm*dosd*attack", "fbm*volumetric*attack", "health*check*status*notification", "hostname*aop*custom*certificate*expiration*type", "http*alert*edge*error", "http*alert*origin*error", "image*notification", "image*resizing*notification", "incident*alert", "load*balancing*health*alert", "load*balancing*pool*enablement*alert", "logo*match*alert", "magic*tunnel*health*check*event", "magic*wan*tunnel*health", "maintenance*event*notification", "mtls*certificate*store*certificate*expiration*type", "pages*event*alert", "radar*notification", "real*origin*monitoring", "scriptmonitor*alert*new*code*change*detections", "scriptmonitor*alert*new*hosts", "scriptmonitor*alert*new*malicious*hosts", "scriptmonitor*alert*new*malicious*scripts", "scriptmonitor*alert*new*malicious*url", "scriptmonitor*alert*new*max*length*resource*url", "scriptmonitor*alert*new*resources", "secondary*dns*all*primaries*failing", "secondary*dns*primaries*failing", "secondary*dns*warning", "secondary*dns*zone*successfully*updated", "secondary*dns*zone*validation*warning", "security*insights*alert", "sentinel*alert", "stream*live*notifications", "synthetic*test*latency*alert", "synthetic*test*low*availability*alert", "traffic*anomalies*alert", "tunnel*health*event", "tunnel*update*event", "universal*ssl*event*type", "web*analytics*metrics*update", "zone*aop*custom*certificate*expiration*type".
func (o LookupNotificationPolicyResultOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.AlertType }).(pulumi.StringOutput)
}

func (o LookupNotificationPolicyResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.Created }).(pulumi.StringOutput)
}

// Optional description for the Notification policy.
func (o LookupNotificationPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Whether or not the Notification policy is enabled.
func (o LookupNotificationPolicyResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
func (o LookupNotificationPolicyResultOutput) Filters() GetNotificationPolicyFiltersOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) GetNotificationPolicyFilters { return v.Filters }).(GetNotificationPolicyFiltersOutput)
}

// The unique identifier of a notification policy
func (o LookupNotificationPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
func (o LookupNotificationPolicyResultOutput) Mechanisms() GetNotificationPolicyMechanismsOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) GetNotificationPolicyMechanisms { return v.Mechanisms }).(GetNotificationPolicyMechanismsOutput)
}

func (o LookupNotificationPolicyResultOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.Modified }).(pulumi.StringOutput)
}

// Name of the policy.
func (o LookupNotificationPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier of a notification policy
func (o LookupNotificationPolicyResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNotificationPolicyResult) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNotificationPolicyResultOutput{})
}
