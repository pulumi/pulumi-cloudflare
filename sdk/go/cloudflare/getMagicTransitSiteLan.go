// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupMagicTransitSiteLan(ctx *pulumi.Context, args *LookupMagicTransitSiteLanArgs, opts ...pulumi.InvokeOption) (*LookupMagicTransitSiteLanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMagicTransitSiteLanResult
	err := ctx.Invoke("cloudflare:index/getMagicTransitSiteLan:getMagicTransitSiteLan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMagicTransitSiteLan.
type LookupMagicTransitSiteLanArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Identifier
<<<<<<< HEAD
	LanId string `pulumi:"lanId"`
=======
	LanId *string `pulumi:"lanId"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

// A collection of values returned by getMagicTransitSiteLan.
type LookupMagicTransitSiteLanResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
	HaLink bool `pulumi:"haLink"`
	// Identifier
	Id string `pulumi:"id"`
	// Identifier
<<<<<<< HEAD
	LanId         string                               `pulumi:"lanId"`
=======
	LanId         *string                              `pulumi:"lanId"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	Name          string                               `pulumi:"name"`
	Nat           GetMagicTransitSiteLanNat            `pulumi:"nat"`
	Physport      int                                  `pulumi:"physport"`
	RoutedSubnets []GetMagicTransitSiteLanRoutedSubnet `pulumi:"routedSubnets"`
	// Identifier
	SiteId string `pulumi:"siteId"`
	// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
	StaticAddressing GetMagicTransitSiteLanStaticAddressing `pulumi:"staticAddressing"`
	// VLAN port number.
	VlanTag int `pulumi:"vlanTag"`
}

func LookupMagicTransitSiteLanOutput(ctx *pulumi.Context, args LookupMagicTransitSiteLanOutputArgs, opts ...pulumi.InvokeOption) LookupMagicTransitSiteLanResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMagicTransitSiteLanResultOutput, error) {
			args := v.(LookupMagicTransitSiteLanArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getMagicTransitSiteLan:getMagicTransitSiteLan", args, LookupMagicTransitSiteLanResultOutput{}, options).(LookupMagicTransitSiteLanResultOutput), nil
		}).(LookupMagicTransitSiteLanResultOutput)
}

// A collection of arguments for invoking getMagicTransitSiteLan.
type LookupMagicTransitSiteLanOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier
<<<<<<< HEAD
	LanId pulumi.StringInput `pulumi:"lanId"`
=======
	LanId pulumi.StringPtrInput `pulumi:"lanId"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

func (LookupMagicTransitSiteLanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteLanArgs)(nil)).Elem()
}

// A collection of values returned by getMagicTransitSiteLan.
type LookupMagicTransitSiteLanResultOutput struct{ *pulumi.OutputState }

func (LookupMagicTransitSiteLanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteLanResult)(nil)).Elem()
}

func (o LookupMagicTransitSiteLanResultOutput) ToLookupMagicTransitSiteLanResultOutput() LookupMagicTransitSiteLanResultOutput {
	return o
}

func (o LookupMagicTransitSiteLanResultOutput) ToLookupMagicTransitSiteLanResultOutputWithContext(ctx context.Context) LookupMagicTransitSiteLanResultOutput {
	return o
}

// Identifier
func (o LookupMagicTransitSiteLanResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
func (o LookupMagicTransitSiteLanResultOutput) HaLink() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) bool { return v.HaLink }).(pulumi.BoolOutput)
}

// Identifier
func (o LookupMagicTransitSiteLanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) string { return v.Id }).(pulumi.StringOutput)
}

// Identifier
<<<<<<< HEAD
func (o LookupMagicTransitSiteLanResultOutput) LanId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) string { return v.LanId }).(pulumi.StringOutput)
=======
func (o LookupMagicTransitSiteLanResultOutput) LanId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) *string { return v.LanId }).(pulumi.StringPtrOutput)
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

func (o LookupMagicTransitSiteLanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMagicTransitSiteLanResultOutput) Nat() GetMagicTransitSiteLanNatOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) GetMagicTransitSiteLanNat { return v.Nat }).(GetMagicTransitSiteLanNatOutput)
}

func (o LookupMagicTransitSiteLanResultOutput) Physport() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) int { return v.Physport }).(pulumi.IntOutput)
}

func (o LookupMagicTransitSiteLanResultOutput) RoutedSubnets() GetMagicTransitSiteLanRoutedSubnetArrayOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) []GetMagicTransitSiteLanRoutedSubnet { return v.RoutedSubnets }).(GetMagicTransitSiteLanRoutedSubnetArrayOutput)
}

// Identifier
func (o LookupMagicTransitSiteLanResultOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) string { return v.SiteId }).(pulumi.StringOutput)
}

// If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
func (o LookupMagicTransitSiteLanResultOutput) StaticAddressing() GetMagicTransitSiteLanStaticAddressingOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) GetMagicTransitSiteLanStaticAddressing {
		return v.StaticAddressing
	}).(GetMagicTransitSiteLanStaticAddressingOutput)
}

// VLAN port number.
func (o LookupMagicTransitSiteLanResultOutput) VlanTag() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteLanResult) int { return v.VlanTag }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMagicTransitSiteLanResultOutput{})
}
