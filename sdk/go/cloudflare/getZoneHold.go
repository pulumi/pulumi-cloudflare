// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZoneHold(ctx, &cloudflare.LookupZoneHoldArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZoneHold(ctx *pulumi.Context, args *LookupZoneHoldArgs, opts ...pulumi.InvokeOption) (*LookupZoneHoldResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZoneHoldResult
	err := ctx.Invoke("cloudflare:index/getZoneHold:getZoneHold", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZoneHold.
type LookupZoneHoldArgs struct {
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getZoneHold.
type LookupZoneHoldResult struct {
	Hold      bool   `pulumi:"hold"`
	HoldAfter string `pulumi:"holdAfter"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	IncludeSubdomains string `pulumi:"includeSubdomains"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupZoneHoldOutput(ctx *pulumi.Context, args LookupZoneHoldOutputArgs, opts ...pulumi.InvokeOption) LookupZoneHoldResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZoneHoldResultOutput, error) {
			args := v.(LookupZoneHoldArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZoneHold:getZoneHold", args, LookupZoneHoldResultOutput{}, options).(LookupZoneHoldResultOutput), nil
		}).(LookupZoneHoldResultOutput)
}

// A collection of arguments for invoking getZoneHold.
type LookupZoneHoldOutputArgs struct {
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupZoneHoldOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneHoldArgs)(nil)).Elem()
}

// A collection of values returned by getZoneHold.
type LookupZoneHoldResultOutput struct{ *pulumi.OutputState }

func (LookupZoneHoldResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZoneHoldResult)(nil)).Elem()
}

func (o LookupZoneHoldResultOutput) ToLookupZoneHoldResultOutput() LookupZoneHoldResultOutput {
	return o
}

func (o LookupZoneHoldResultOutput) ToLookupZoneHoldResultOutputWithContext(ctx context.Context) LookupZoneHoldResultOutput {
	return o
}

func (o LookupZoneHoldResultOutput) Hold() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZoneHoldResult) bool { return v.Hold }).(pulumi.BoolOutput)
}

func (o LookupZoneHoldResultOutput) HoldAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneHoldResult) string { return v.HoldAfter }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupZoneHoldResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneHoldResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupZoneHoldResultOutput) IncludeSubdomains() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneHoldResult) string { return v.IncludeSubdomains }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupZoneHoldResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZoneHoldResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZoneHoldResultOutput{})
}
