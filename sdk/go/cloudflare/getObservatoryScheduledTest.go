// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupObservatoryScheduledTest(ctx *pulumi.Context, args *LookupObservatoryScheduledTestArgs, opts ...pulumi.InvokeOption) (*LookupObservatoryScheduledTestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupObservatoryScheduledTestResult
	err := ctx.Invoke("cloudflare:index/getObservatoryScheduledTest:getObservatoryScheduledTest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getObservatoryScheduledTest.
type LookupObservatoryScheduledTestArgs struct {
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getObservatoryScheduledTest.
type LookupObservatoryScheduledTestResult struct {
	// The frequency of the test.
	Frequency string `pulumi:"frequency"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A test region.
	Region string `pulumi:"region"`
	// A URL.
	Url string `pulumi:"url"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupObservatoryScheduledTestOutput(ctx *pulumi.Context, args LookupObservatoryScheduledTestOutputArgs, opts ...pulumi.InvokeOption) LookupObservatoryScheduledTestResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupObservatoryScheduledTestResultOutput, error) {
			args := v.(LookupObservatoryScheduledTestArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getObservatoryScheduledTest:getObservatoryScheduledTest", args, LookupObservatoryScheduledTestResultOutput{}, options).(LookupObservatoryScheduledTestResultOutput), nil
		}).(LookupObservatoryScheduledTestResultOutput)
}

// A collection of arguments for invoking getObservatoryScheduledTest.
type LookupObservatoryScheduledTestOutputArgs struct {
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupObservatoryScheduledTestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservatoryScheduledTestArgs)(nil)).Elem()
}

// A collection of values returned by getObservatoryScheduledTest.
type LookupObservatoryScheduledTestResultOutput struct{ *pulumi.OutputState }

func (LookupObservatoryScheduledTestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObservatoryScheduledTestResult)(nil)).Elem()
}

func (o LookupObservatoryScheduledTestResultOutput) ToLookupObservatoryScheduledTestResultOutput() LookupObservatoryScheduledTestResultOutput {
	return o
}

func (o LookupObservatoryScheduledTestResultOutput) ToLookupObservatoryScheduledTestResultOutputWithContext(ctx context.Context) LookupObservatoryScheduledTestResultOutput {
	return o
}

// The frequency of the test.
func (o LookupObservatoryScheduledTestResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservatoryScheduledTestResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupObservatoryScheduledTestResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservatoryScheduledTestResult) string { return v.Id }).(pulumi.StringOutput)
}

// A test region.
func (o LookupObservatoryScheduledTestResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservatoryScheduledTestResult) string { return v.Region }).(pulumi.StringOutput)
}

// A URL.
func (o LookupObservatoryScheduledTestResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservatoryScheduledTestResult) string { return v.Url }).(pulumi.StringOutput)
}

// Identifier
func (o LookupObservatoryScheduledTestResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObservatoryScheduledTestResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupObservatoryScheduledTestResultOutput{})
}
