// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewSnippetRules(ctx, "example_snippet_rules", &cloudflare.SnippetRulesArgs{
//				ZoneId: pulumi.String("9f1839b6152d298aca64c4e906b6d074"),
//				Rules: cloudflare.SnippetRulesRuleArray{
//					&cloudflare.SnippetRulesRuleArgs{
//						Expression:   pulumi.String("ip.src eq 1.1.1.1"),
//						Snippet_name: "my_snippet",
//						Description:  pulumi.String("Execute my_snippet when IP address is 1.1.1.1."),
//						Enabled:      pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SnippetRules struct {
	pulumi.CustomResourceState

	// A list of snippet rules.
	Rules SnippetRulesRuleArrayOutput `pulumi:"rules"`
	// The unique ID of the zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSnippetRules registers a new resource with the given unique name, arguments, and options.
func NewSnippetRules(ctx *pulumi.Context,
	name string, args *SnippetRulesArgs, opts ...pulumi.ResourceOption) (*SnippetRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnippetRules
	err := ctx.RegisterResource("cloudflare:index/snippetRules:SnippetRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnippetRules gets an existing SnippetRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnippetRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnippetRulesState, opts ...pulumi.ResourceOption) (*SnippetRules, error) {
	var resource SnippetRules
	err := ctx.ReadResource("cloudflare:index/snippetRules:SnippetRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnippetRules resources.
type snippetRulesState struct {
	// A list of snippet rules.
	Rules []SnippetRulesRule `pulumi:"rules"`
	// The unique ID of the zone.
	ZoneId *string `pulumi:"zoneId"`
}

type SnippetRulesState struct {
	// A list of snippet rules.
	Rules SnippetRulesRuleArrayInput
	// The unique ID of the zone.
	ZoneId pulumi.StringPtrInput
}

func (SnippetRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*snippetRulesState)(nil)).Elem()
}

type snippetRulesArgs struct {
	// A list of snippet rules.
	Rules []SnippetRulesRule `pulumi:"rules"`
	// The unique ID of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a SnippetRules resource.
type SnippetRulesArgs struct {
	// A list of snippet rules.
	Rules SnippetRulesRuleArrayInput
	// The unique ID of the zone.
	ZoneId pulumi.StringInput
}

func (SnippetRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snippetRulesArgs)(nil)).Elem()
}

type SnippetRulesInput interface {
	pulumi.Input

	ToSnippetRulesOutput() SnippetRulesOutput
	ToSnippetRulesOutputWithContext(ctx context.Context) SnippetRulesOutput
}

func (*SnippetRules) ElementType() reflect.Type {
	return reflect.TypeOf((**SnippetRules)(nil)).Elem()
}

func (i *SnippetRules) ToSnippetRulesOutput() SnippetRulesOutput {
	return i.ToSnippetRulesOutputWithContext(context.Background())
}

func (i *SnippetRules) ToSnippetRulesOutputWithContext(ctx context.Context) SnippetRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetRulesOutput)
}

// SnippetRulesArrayInput is an input type that accepts SnippetRulesArray and SnippetRulesArrayOutput values.
// You can construct a concrete instance of `SnippetRulesArrayInput` via:
//
//	SnippetRulesArray{ SnippetRulesArgs{...} }
type SnippetRulesArrayInput interface {
	pulumi.Input

	ToSnippetRulesArrayOutput() SnippetRulesArrayOutput
	ToSnippetRulesArrayOutputWithContext(context.Context) SnippetRulesArrayOutput
}

type SnippetRulesArray []SnippetRulesInput

func (SnippetRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnippetRules)(nil)).Elem()
}

func (i SnippetRulesArray) ToSnippetRulesArrayOutput() SnippetRulesArrayOutput {
	return i.ToSnippetRulesArrayOutputWithContext(context.Background())
}

func (i SnippetRulesArray) ToSnippetRulesArrayOutputWithContext(ctx context.Context) SnippetRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetRulesArrayOutput)
}

// SnippetRulesMapInput is an input type that accepts SnippetRulesMap and SnippetRulesMapOutput values.
// You can construct a concrete instance of `SnippetRulesMapInput` via:
//
//	SnippetRulesMap{ "key": SnippetRulesArgs{...} }
type SnippetRulesMapInput interface {
	pulumi.Input

	ToSnippetRulesMapOutput() SnippetRulesMapOutput
	ToSnippetRulesMapOutputWithContext(context.Context) SnippetRulesMapOutput
}

type SnippetRulesMap map[string]SnippetRulesInput

func (SnippetRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnippetRules)(nil)).Elem()
}

func (i SnippetRulesMap) ToSnippetRulesMapOutput() SnippetRulesMapOutput {
	return i.ToSnippetRulesMapOutputWithContext(context.Background())
}

func (i SnippetRulesMap) ToSnippetRulesMapOutputWithContext(ctx context.Context) SnippetRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetRulesMapOutput)
}

type SnippetRulesOutput struct{ *pulumi.OutputState }

func (SnippetRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnippetRules)(nil)).Elem()
}

func (o SnippetRulesOutput) ToSnippetRulesOutput() SnippetRulesOutput {
	return o
}

func (o SnippetRulesOutput) ToSnippetRulesOutputWithContext(ctx context.Context) SnippetRulesOutput {
	return o
}

// A list of snippet rules.
func (o SnippetRulesOutput) Rules() SnippetRulesRuleArrayOutput {
	return o.ApplyT(func(v *SnippetRules) SnippetRulesRuleArrayOutput { return v.Rules }).(SnippetRulesRuleArrayOutput)
}

// The unique ID of the zone.
func (o SnippetRulesOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnippetRules) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SnippetRulesArrayOutput struct{ *pulumi.OutputState }

func (SnippetRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnippetRules)(nil)).Elem()
}

func (o SnippetRulesArrayOutput) ToSnippetRulesArrayOutput() SnippetRulesArrayOutput {
	return o
}

func (o SnippetRulesArrayOutput) ToSnippetRulesArrayOutputWithContext(ctx context.Context) SnippetRulesArrayOutput {
	return o
}

func (o SnippetRulesArrayOutput) Index(i pulumi.IntInput) SnippetRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnippetRules {
		return vs[0].([]*SnippetRules)[vs[1].(int)]
	}).(SnippetRulesOutput)
}

type SnippetRulesMapOutput struct{ *pulumi.OutputState }

func (SnippetRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnippetRules)(nil)).Elem()
}

func (o SnippetRulesMapOutput) ToSnippetRulesMapOutput() SnippetRulesMapOutput {
	return o
}

func (o SnippetRulesMapOutput) ToSnippetRulesMapOutputWithContext(ctx context.Context) SnippetRulesMapOutput {
	return o
}

func (o SnippetRulesMapOutput) MapIndex(k pulumi.StringInput) SnippetRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnippetRules {
		return vs[0].(map[string]*SnippetRules)[vs[1].(string)]
	}).(SnippetRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetRulesInput)(nil)).Elem(), &SnippetRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetRulesArrayInput)(nil)).Elem(), SnippetRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetRulesMapInput)(nil)).Elem(), SnippetRulesMap{})
	pulumi.RegisterOutputType(SnippetRulesOutput{})
	pulumi.RegisterOutputType(SnippetRulesArrayOutput{})
	pulumi.RegisterOutputType(SnippetRulesMapOutput{})
}
