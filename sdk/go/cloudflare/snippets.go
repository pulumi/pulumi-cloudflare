// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Snippets struct {
	pulumi.CustomResourceState

	// Creation time of the snippet
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Content files of uploaded snippet
	Files    pulumi.StringPtrOutput    `pulumi:"files"`
	Metadata SnippetsMetadataPtrOutput `pulumi:"metadata"`
	// Modification time of the snippet
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Snippet identifying name
	SnippetName pulumi.StringOutput `pulumi:"snippetName"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSnippets registers a new resource with the given unique name, arguments, and options.
func NewSnippets(ctx *pulumi.Context,
	name string, args *SnippetsArgs, opts ...pulumi.ResourceOption) (*Snippets, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SnippetName == nil {
		return nil, errors.New("invalid value for required argument 'SnippetName'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snippets
	err := ctx.RegisterResource("cloudflare:index/snippets:Snippets", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnippets gets an existing Snippets resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnippets(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnippetsState, opts ...pulumi.ResourceOption) (*Snippets, error) {
	var resource Snippets
	err := ctx.ReadResource("cloudflare:index/snippets:Snippets", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snippets resources.
type snippetsState struct {
	// Creation time of the snippet
	CreatedOn *string `pulumi:"createdOn"`
	// Content files of uploaded snippet
	Files    *string           `pulumi:"files"`
	Metadata *SnippetsMetadata `pulumi:"metadata"`
	// Modification time of the snippet
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Snippet identifying name
	SnippetName *string `pulumi:"snippetName"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type SnippetsState struct {
	// Creation time of the snippet
	CreatedOn pulumi.StringPtrInput
	// Content files of uploaded snippet
	Files    pulumi.StringPtrInput
	Metadata SnippetsMetadataPtrInput
	// Modification time of the snippet
	ModifiedOn pulumi.StringPtrInput
	// Snippet identifying name
	SnippetName pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (SnippetsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snippetsState)(nil)).Elem()
}

type snippetsArgs struct {
	// Content files of uploaded snippet
	Files    *string           `pulumi:"files"`
	Metadata *SnippetsMetadata `pulumi:"metadata"`
	// Snippet identifying name
	SnippetName string `pulumi:"snippetName"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Snippets resource.
type SnippetsArgs struct {
	// Content files of uploaded snippet
	Files    pulumi.StringPtrInput
	Metadata SnippetsMetadataPtrInput
	// Snippet identifying name
	SnippetName pulumi.StringInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (SnippetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snippetsArgs)(nil)).Elem()
}

type SnippetsInput interface {
	pulumi.Input

	ToSnippetsOutput() SnippetsOutput
	ToSnippetsOutputWithContext(ctx context.Context) SnippetsOutput
}

func (*Snippets) ElementType() reflect.Type {
	return reflect.TypeOf((**Snippets)(nil)).Elem()
}

func (i *Snippets) ToSnippetsOutput() SnippetsOutput {
	return i.ToSnippetsOutputWithContext(context.Background())
}

func (i *Snippets) ToSnippetsOutputWithContext(ctx context.Context) SnippetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetsOutput)
}

// SnippetsArrayInput is an input type that accepts SnippetsArray and SnippetsArrayOutput values.
// You can construct a concrete instance of `SnippetsArrayInput` via:
//
//	SnippetsArray{ SnippetsArgs{...} }
type SnippetsArrayInput interface {
	pulumi.Input

	ToSnippetsArrayOutput() SnippetsArrayOutput
	ToSnippetsArrayOutputWithContext(context.Context) SnippetsArrayOutput
}

type SnippetsArray []SnippetsInput

func (SnippetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snippets)(nil)).Elem()
}

func (i SnippetsArray) ToSnippetsArrayOutput() SnippetsArrayOutput {
	return i.ToSnippetsArrayOutputWithContext(context.Background())
}

func (i SnippetsArray) ToSnippetsArrayOutputWithContext(ctx context.Context) SnippetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetsArrayOutput)
}

// SnippetsMapInput is an input type that accepts SnippetsMap and SnippetsMapOutput values.
// You can construct a concrete instance of `SnippetsMapInput` via:
//
//	SnippetsMap{ "key": SnippetsArgs{...} }
type SnippetsMapInput interface {
	pulumi.Input

	ToSnippetsMapOutput() SnippetsMapOutput
	ToSnippetsMapOutputWithContext(context.Context) SnippetsMapOutput
}

type SnippetsMap map[string]SnippetsInput

func (SnippetsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snippets)(nil)).Elem()
}

func (i SnippetsMap) ToSnippetsMapOutput() SnippetsMapOutput {
	return i.ToSnippetsMapOutputWithContext(context.Background())
}

func (i SnippetsMap) ToSnippetsMapOutputWithContext(ctx context.Context) SnippetsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnippetsMapOutput)
}

type SnippetsOutput struct{ *pulumi.OutputState }

func (SnippetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snippets)(nil)).Elem()
}

func (o SnippetsOutput) ToSnippetsOutput() SnippetsOutput {
	return o
}

func (o SnippetsOutput) ToSnippetsOutputWithContext(ctx context.Context) SnippetsOutput {
	return o
}

// Creation time of the snippet
func (o SnippetsOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Snippets) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Content files of uploaded snippet
func (o SnippetsOutput) Files() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snippets) pulumi.StringPtrOutput { return v.Files }).(pulumi.StringPtrOutput)
}

func (o SnippetsOutput) Metadata() SnippetsMetadataPtrOutput {
	return o.ApplyT(func(v *Snippets) SnippetsMetadataPtrOutput { return v.Metadata }).(SnippetsMetadataPtrOutput)
}

// Modification time of the snippet
func (o SnippetsOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Snippets) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Snippet identifying name
func (o SnippetsOutput) SnippetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snippets) pulumi.StringOutput { return v.SnippetName }).(pulumi.StringOutput)
}

// Identifier
func (o SnippetsOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snippets) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SnippetsArrayOutput struct{ *pulumi.OutputState }

func (SnippetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snippets)(nil)).Elem()
}

func (o SnippetsArrayOutput) ToSnippetsArrayOutput() SnippetsArrayOutput {
	return o
}

func (o SnippetsArrayOutput) ToSnippetsArrayOutputWithContext(ctx context.Context) SnippetsArrayOutput {
	return o
}

func (o SnippetsArrayOutput) Index(i pulumi.IntInput) SnippetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snippets {
		return vs[0].([]*Snippets)[vs[1].(int)]
	}).(SnippetsOutput)
}

type SnippetsMapOutput struct{ *pulumi.OutputState }

func (SnippetsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snippets)(nil)).Elem()
}

func (o SnippetsMapOutput) ToSnippetsMapOutput() SnippetsMapOutput {
	return o
}

func (o SnippetsMapOutput) ToSnippetsMapOutputWithContext(ctx context.Context) SnippetsMapOutput {
	return o
}

func (o SnippetsMapOutput) MapIndex(k pulumi.StringInput) SnippetsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snippets {
		return vs[0].(map[string]*Snippets)[vs[1].(string)]
	}).(SnippetsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetsInput)(nil)).Elem(), &Snippets{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetsArrayInput)(nil)).Elem(), SnippetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnippetsMapInput)(nil)).Elem(), SnippetsMap{})
	pulumi.RegisterOutputType(SnippetsOutput{})
	pulumi.RegisterOutputType(SnippetsArrayOutput{})
	pulumi.RegisterOutputType(SnippetsMapOutput{})
}
