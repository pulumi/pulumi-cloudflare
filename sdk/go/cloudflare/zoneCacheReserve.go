// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZoneCacheReserve(ctx, "example_zone_cache_reserve", &cloudflare.ZoneCacheReserveArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Value:  pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zoneCacheReserve:ZoneCacheReserve example '<zone_id>'
// ```
type ZoneCacheReserve struct {
	pulumi.CustomResourceState

	// Whether the setting is editable
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// Last time this setting was modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Value of the Cache Reserve zone setting.
	// Available values: "on", "off".
	Value pulumi.StringOutput `pulumi:"value"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneCacheReserve registers a new resource with the given unique name, arguments, and options.
func NewZoneCacheReserve(ctx *pulumi.Context,
	name string, args *ZoneCacheReserveArgs, opts ...pulumi.ResourceOption) (*ZoneCacheReserve, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneCacheReserve
	err := ctx.RegisterResource("cloudflare:index/zoneCacheReserve:ZoneCacheReserve", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneCacheReserve gets an existing ZoneCacheReserve resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneCacheReserve(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneCacheReserveState, opts ...pulumi.ResourceOption) (*ZoneCacheReserve, error) {
	var resource ZoneCacheReserve
	err := ctx.ReadResource("cloudflare:index/zoneCacheReserve:ZoneCacheReserve", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneCacheReserve resources.
type zoneCacheReserveState struct {
	// Whether the setting is editable
	Editable *bool `pulumi:"editable"`
	// Last time this setting was modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Value of the Cache Reserve zone setting.
	// Available values: "on", "off".
	Value *string `pulumi:"value"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneCacheReserveState struct {
	// Whether the setting is editable
	Editable pulumi.BoolPtrInput
	// Last time this setting was modified.
	ModifiedOn pulumi.StringPtrInput
	// Value of the Cache Reserve zone setting.
	// Available values: "on", "off".
	Value pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (ZoneCacheReserveState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneCacheReserveState)(nil)).Elem()
}

type zoneCacheReserveArgs struct {
	// Value of the Cache Reserve zone setting.
	// Available values: "on", "off".
	Value *string `pulumi:"value"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneCacheReserve resource.
type ZoneCacheReserveArgs struct {
	// Value of the Cache Reserve zone setting.
	// Available values: "on", "off".
	Value pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (ZoneCacheReserveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneCacheReserveArgs)(nil)).Elem()
}

type ZoneCacheReserveInput interface {
	pulumi.Input

	ToZoneCacheReserveOutput() ZoneCacheReserveOutput
	ToZoneCacheReserveOutputWithContext(ctx context.Context) ZoneCacheReserveOutput
}

func (*ZoneCacheReserve) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneCacheReserve)(nil)).Elem()
}

func (i *ZoneCacheReserve) ToZoneCacheReserveOutput() ZoneCacheReserveOutput {
	return i.ToZoneCacheReserveOutputWithContext(context.Background())
}

func (i *ZoneCacheReserve) ToZoneCacheReserveOutputWithContext(ctx context.Context) ZoneCacheReserveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheReserveOutput)
}

// ZoneCacheReserveArrayInput is an input type that accepts ZoneCacheReserveArray and ZoneCacheReserveArrayOutput values.
// You can construct a concrete instance of `ZoneCacheReserveArrayInput` via:
//
//	ZoneCacheReserveArray{ ZoneCacheReserveArgs{...} }
type ZoneCacheReserveArrayInput interface {
	pulumi.Input

	ToZoneCacheReserveArrayOutput() ZoneCacheReserveArrayOutput
	ToZoneCacheReserveArrayOutputWithContext(context.Context) ZoneCacheReserveArrayOutput
}

type ZoneCacheReserveArray []ZoneCacheReserveInput

func (ZoneCacheReserveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneCacheReserve)(nil)).Elem()
}

func (i ZoneCacheReserveArray) ToZoneCacheReserveArrayOutput() ZoneCacheReserveArrayOutput {
	return i.ToZoneCacheReserveArrayOutputWithContext(context.Background())
}

func (i ZoneCacheReserveArray) ToZoneCacheReserveArrayOutputWithContext(ctx context.Context) ZoneCacheReserveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheReserveArrayOutput)
}

// ZoneCacheReserveMapInput is an input type that accepts ZoneCacheReserveMap and ZoneCacheReserveMapOutput values.
// You can construct a concrete instance of `ZoneCacheReserveMapInput` via:
//
//	ZoneCacheReserveMap{ "key": ZoneCacheReserveArgs{...} }
type ZoneCacheReserveMapInput interface {
	pulumi.Input

	ToZoneCacheReserveMapOutput() ZoneCacheReserveMapOutput
	ToZoneCacheReserveMapOutputWithContext(context.Context) ZoneCacheReserveMapOutput
}

type ZoneCacheReserveMap map[string]ZoneCacheReserveInput

func (ZoneCacheReserveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneCacheReserve)(nil)).Elem()
}

func (i ZoneCacheReserveMap) ToZoneCacheReserveMapOutput() ZoneCacheReserveMapOutput {
	return i.ToZoneCacheReserveMapOutputWithContext(context.Background())
}

func (i ZoneCacheReserveMap) ToZoneCacheReserveMapOutputWithContext(ctx context.Context) ZoneCacheReserveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneCacheReserveMapOutput)
}

type ZoneCacheReserveOutput struct{ *pulumi.OutputState }

func (ZoneCacheReserveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneCacheReserve)(nil)).Elem()
}

func (o ZoneCacheReserveOutput) ToZoneCacheReserveOutput() ZoneCacheReserveOutput {
	return o
}

func (o ZoneCacheReserveOutput) ToZoneCacheReserveOutputWithContext(ctx context.Context) ZoneCacheReserveOutput {
	return o
}

// Whether the setting is editable
func (o ZoneCacheReserveOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZoneCacheReserve) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// Last time this setting was modified.
func (o ZoneCacheReserveOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneCacheReserve) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Value of the Cache Reserve zone setting.
// Available values: "on", "off".
func (o ZoneCacheReserveOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneCacheReserve) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// Identifier
func (o ZoneCacheReserveOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneCacheReserve) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneCacheReserveArrayOutput struct{ *pulumi.OutputState }

func (ZoneCacheReserveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneCacheReserve)(nil)).Elem()
}

func (o ZoneCacheReserveArrayOutput) ToZoneCacheReserveArrayOutput() ZoneCacheReserveArrayOutput {
	return o
}

func (o ZoneCacheReserveArrayOutput) ToZoneCacheReserveArrayOutputWithContext(ctx context.Context) ZoneCacheReserveArrayOutput {
	return o
}

func (o ZoneCacheReserveArrayOutput) Index(i pulumi.IntInput) ZoneCacheReserveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneCacheReserve {
		return vs[0].([]*ZoneCacheReserve)[vs[1].(int)]
	}).(ZoneCacheReserveOutput)
}

type ZoneCacheReserveMapOutput struct{ *pulumi.OutputState }

func (ZoneCacheReserveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneCacheReserve)(nil)).Elem()
}

func (o ZoneCacheReserveMapOutput) ToZoneCacheReserveMapOutput() ZoneCacheReserveMapOutput {
	return o
}

func (o ZoneCacheReserveMapOutput) ToZoneCacheReserveMapOutputWithContext(ctx context.Context) ZoneCacheReserveMapOutput {
	return o
}

func (o ZoneCacheReserveMapOutput) MapIndex(k pulumi.StringInput) ZoneCacheReserveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneCacheReserve {
		return vs[0].(map[string]*ZoneCacheReserve)[vs[1].(string)]
	}).(ZoneCacheReserveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheReserveInput)(nil)).Elem(), &ZoneCacheReserve{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheReserveArrayInput)(nil)).Elem(), ZoneCacheReserveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneCacheReserveMapInput)(nil)).Elem(), ZoneCacheReserveMap{})
	pulumi.RegisterOutputType(ZoneCacheReserveOutput{})
	pulumi.RegisterOutputType(ZoneCacheReserveArrayOutput{})
	pulumi.RegisterOutputType(ZoneCacheReserveMapOutput{})
}
