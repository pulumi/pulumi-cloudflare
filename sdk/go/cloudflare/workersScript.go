// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare worker script resource. In order for a script to be active, you'll also need to setup a `WorkerRoute`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myNamespace, err := cloudflare.NewWorkersKvNamespace(ctx, "my_namespace", &cloudflare.WorkersKvNamespaceArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Title:     pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "script.js",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			invokeFilebase641, err := std.Filebase64(ctx, &std.Filebase64Args{
//				Input: "example.wasm",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Sets the script with the name "script_1"
//			_, err = cloudflare.NewWorkersScript(ctx, "my_script", &cloudflare.WorkersScriptArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("script_1"),
//				Content:   pulumi.String(invokeFile.Result),
//				KvNamespaceBindings: cloudflare.WorkersScriptKvNamespaceBindingArray{
//					&cloudflare.WorkersScriptKvNamespaceBindingArgs{
//						Name:        pulumi.String("MY_EXAMPLE_KV_NAMESPACE"),
//						NamespaceId: myNamespace.ID(),
//					},
//				},
//				PlainTextBindings: cloudflare.WorkersScriptPlainTextBindingArray{
//					&cloudflare.WorkersScriptPlainTextBindingArgs{
//						Name: pulumi.String("MY_EXAMPLE_PLAIN_TEXT"),
//						Text: pulumi.String("foobar"),
//					},
//				},
//				SecretTextBindings: cloudflare.WorkersScriptSecretTextBindingArray{
//					&cloudflare.WorkersScriptSecretTextBindingArgs{
//						Name: pulumi.String("MY_EXAMPLE_SECRET_TEXT"),
//						Text: pulumi.Any(secretFooValue),
//					},
//				},
//				WebassemblyBindings: cloudflare.WorkersScriptWebassemblyBindingArray{
//					&cloudflare.WorkersScriptWebassemblyBindingArgs{
//						Name:   pulumi.String("MY_EXAMPLE_WASM"),
//						Module: pulumi.String(invokeFilebase641.Result),
//					},
//				},
//				ServiceBindings: cloudflare.WorkersScriptServiceBindingArray{
//					&cloudflare.WorkersScriptServiceBindingArgs{
//						Name:        pulumi.String("MY_SERVICE_BINDING"),
//						Service:     pulumi.String("MY_SERVICE"),
//						Environment: pulumi.String("production"),
//					},
//				},
//				R2BucketBindings: cloudflare.WorkersScriptR2BucketBindingArray{
//					&cloudflare.WorkersScriptR2BucketBindingArgs{
//						Name:       pulumi.String("MY_BUCKET"),
//						BucketName: pulumi.String("MY_BUCKET_NAME"),
//					},
//				},
//				AnalyticsEngineBindings: cloudflare.WorkersScriptAnalyticsEngineBindingArray{
//					&cloudflare.WorkersScriptAnalyticsEngineBindingArgs{
//						Name:    pulumi.String("MY_DATASET"),
//						Dataset: pulumi.String("dataset1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersScript:WorkersScript example <account_id>/<script_name>
// ```
type WorkersScript struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId               pulumi.StringOutput                            `pulumi:"accountId"`
	AnalyticsEngineBindings WorkersScriptAnalyticsEngineBindingArrayOutput `pulumi:"analyticsEngineBindings"`
	// The date to use for the compatibility flag.
	CompatibilityDate pulumi.StringPtrOutput `pulumi:"compatibilityDate"`
	// Compatibility flags used for Worker Scripts.
	CompatibilityFlags pulumi.StringArrayOutput `pulumi:"compatibilityFlags"`
	// The script content.
	Content            pulumi.StringOutput                       `pulumi:"content"`
	D1DatabaseBindings WorkersScriptD1DatabaseBindingArrayOutput `pulumi:"d1DatabaseBindings"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace   pulumi.StringPtrOutput                     `pulumi:"dispatchNamespace"`
	KvNamespaceBindings WorkersScriptKvNamespaceBindingArrayOutput `pulumi:"kvNamespaceBindings"`
	// Enabling allows Worker events to be sent to a defined Logpush destination.
	Logpush pulumi.BoolPtrOutput `pulumi:"logpush"`
	// Whether to upload Worker as a module.
	Module pulumi.BoolPtrOutput `pulumi:"module"`
	// The name for the script. **Modifying this attribute will force creation of a new resource.**
	Name                pulumi.StringOutput                        `pulumi:"name"`
	Placements          WorkersScriptPlacementArrayOutput          `pulumi:"placements"`
	PlainTextBindings   WorkersScriptPlainTextBindingArrayOutput   `pulumi:"plainTextBindings"`
	QueueBindings       WorkersScriptQueueBindingArrayOutput       `pulumi:"queueBindings"`
	R2BucketBindings    WorkersScriptR2BucketBindingArrayOutput    `pulumi:"r2BucketBindings"`
	SecretTextBindings  WorkersScriptSecretTextBindingArrayOutput  `pulumi:"secretTextBindings"`
	ServiceBindings     WorkersScriptServiceBindingArrayOutput     `pulumi:"serviceBindings"`
	Tags                pulumi.StringArrayOutput                   `pulumi:"tags"`
	WebassemblyBindings WorkersScriptWebassemblyBindingArrayOutput `pulumi:"webassemblyBindings"`
}

// NewWorkersScript registers a new resource with the given unique name, arguments, and options.
func NewWorkersScript(ctx *pulumi.Context,
	name string, args *WorkersScriptArgs, opts ...pulumi.ResourceOption) (*WorkersScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersScript
	err := ctx.RegisterResource("cloudflare:index/workersScript:WorkersScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersScript gets an existing WorkersScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersScriptState, opts ...pulumi.ResourceOption) (*WorkersScript, error) {
	var resource WorkersScript
	err := ctx.ReadResource("cloudflare:index/workersScript:WorkersScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersScript resources.
type workersScriptState struct {
	// The account identifier to target for the resource.
	AccountId               *string                               `pulumi:"accountId"`
	AnalyticsEngineBindings []WorkersScriptAnalyticsEngineBinding `pulumi:"analyticsEngineBindings"`
	// The date to use for the compatibility flag.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Compatibility flags used for Worker Scripts.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// The script content.
	Content            *string                          `pulumi:"content"`
	D1DatabaseBindings []WorkersScriptD1DatabaseBinding `pulumi:"d1DatabaseBindings"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace   *string                           `pulumi:"dispatchNamespace"`
	KvNamespaceBindings []WorkersScriptKvNamespaceBinding `pulumi:"kvNamespaceBindings"`
	// Enabling allows Worker events to be sent to a defined Logpush destination.
	Logpush *bool `pulumi:"logpush"`
	// Whether to upload Worker as a module.
	Module *bool `pulumi:"module"`
	// The name for the script. **Modifying this attribute will force creation of a new resource.**
	Name                *string                           `pulumi:"name"`
	Placements          []WorkersScriptPlacement          `pulumi:"placements"`
	PlainTextBindings   []WorkersScriptPlainTextBinding   `pulumi:"plainTextBindings"`
	QueueBindings       []WorkersScriptQueueBinding       `pulumi:"queueBindings"`
	R2BucketBindings    []WorkersScriptR2BucketBinding    `pulumi:"r2BucketBindings"`
	SecretTextBindings  []WorkersScriptSecretTextBinding  `pulumi:"secretTextBindings"`
	ServiceBindings     []WorkersScriptServiceBinding     `pulumi:"serviceBindings"`
	Tags                []string                          `pulumi:"tags"`
	WebassemblyBindings []WorkersScriptWebassemblyBinding `pulumi:"webassemblyBindings"`
}

type WorkersScriptState struct {
	// The account identifier to target for the resource.
	AccountId               pulumi.StringPtrInput
	AnalyticsEngineBindings WorkersScriptAnalyticsEngineBindingArrayInput
	// The date to use for the compatibility flag.
	CompatibilityDate pulumi.StringPtrInput
	// Compatibility flags used for Worker Scripts.
	CompatibilityFlags pulumi.StringArrayInput
	// The script content.
	Content            pulumi.StringPtrInput
	D1DatabaseBindings WorkersScriptD1DatabaseBindingArrayInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace   pulumi.StringPtrInput
	KvNamespaceBindings WorkersScriptKvNamespaceBindingArrayInput
	// Enabling allows Worker events to be sent to a defined Logpush destination.
	Logpush pulumi.BoolPtrInput
	// Whether to upload Worker as a module.
	Module pulumi.BoolPtrInput
	// The name for the script. **Modifying this attribute will force creation of a new resource.**
	Name                pulumi.StringPtrInput
	Placements          WorkersScriptPlacementArrayInput
	PlainTextBindings   WorkersScriptPlainTextBindingArrayInput
	QueueBindings       WorkersScriptQueueBindingArrayInput
	R2BucketBindings    WorkersScriptR2BucketBindingArrayInput
	SecretTextBindings  WorkersScriptSecretTextBindingArrayInput
	ServiceBindings     WorkersScriptServiceBindingArrayInput
	Tags                pulumi.StringArrayInput
	WebassemblyBindings WorkersScriptWebassemblyBindingArrayInput
}

func (WorkersScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptState)(nil)).Elem()
}

type workersScriptArgs struct {
	// The account identifier to target for the resource.
	AccountId               string                                `pulumi:"accountId"`
	AnalyticsEngineBindings []WorkersScriptAnalyticsEngineBinding `pulumi:"analyticsEngineBindings"`
	// The date to use for the compatibility flag.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Compatibility flags used for Worker Scripts.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// The script content.
	Content            string                           `pulumi:"content"`
	D1DatabaseBindings []WorkersScriptD1DatabaseBinding `pulumi:"d1DatabaseBindings"`
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace   *string                           `pulumi:"dispatchNamespace"`
	KvNamespaceBindings []WorkersScriptKvNamespaceBinding `pulumi:"kvNamespaceBindings"`
	// Enabling allows Worker events to be sent to a defined Logpush destination.
	Logpush *bool `pulumi:"logpush"`
	// Whether to upload Worker as a module.
	Module *bool `pulumi:"module"`
	// The name for the script. **Modifying this attribute will force creation of a new resource.**
	Name                string                            `pulumi:"name"`
	Placements          []WorkersScriptPlacement          `pulumi:"placements"`
	PlainTextBindings   []WorkersScriptPlainTextBinding   `pulumi:"plainTextBindings"`
	QueueBindings       []WorkersScriptQueueBinding       `pulumi:"queueBindings"`
	R2BucketBindings    []WorkersScriptR2BucketBinding    `pulumi:"r2BucketBindings"`
	SecretTextBindings  []WorkersScriptSecretTextBinding  `pulumi:"secretTextBindings"`
	ServiceBindings     []WorkersScriptServiceBinding     `pulumi:"serviceBindings"`
	Tags                []string                          `pulumi:"tags"`
	WebassemblyBindings []WorkersScriptWebassemblyBinding `pulumi:"webassemblyBindings"`
}

// The set of arguments for constructing a WorkersScript resource.
type WorkersScriptArgs struct {
	// The account identifier to target for the resource.
	AccountId               pulumi.StringInput
	AnalyticsEngineBindings WorkersScriptAnalyticsEngineBindingArrayInput
	// The date to use for the compatibility flag.
	CompatibilityDate pulumi.StringPtrInput
	// Compatibility flags used for Worker Scripts.
	CompatibilityFlags pulumi.StringArrayInput
	// The script content.
	Content            pulumi.StringInput
	D1DatabaseBindings WorkersScriptD1DatabaseBindingArrayInput
	// Name of the Workers for Platforms dispatch namespace.
	DispatchNamespace   pulumi.StringPtrInput
	KvNamespaceBindings WorkersScriptKvNamespaceBindingArrayInput
	// Enabling allows Worker events to be sent to a defined Logpush destination.
	Logpush pulumi.BoolPtrInput
	// Whether to upload Worker as a module.
	Module pulumi.BoolPtrInput
	// The name for the script. **Modifying this attribute will force creation of a new resource.**
	Name                pulumi.StringInput
	Placements          WorkersScriptPlacementArrayInput
	PlainTextBindings   WorkersScriptPlainTextBindingArrayInput
	QueueBindings       WorkersScriptQueueBindingArrayInput
	R2BucketBindings    WorkersScriptR2BucketBindingArrayInput
	SecretTextBindings  WorkersScriptSecretTextBindingArrayInput
	ServiceBindings     WorkersScriptServiceBindingArrayInput
	Tags                pulumi.StringArrayInput
	WebassemblyBindings WorkersScriptWebassemblyBindingArrayInput
}

func (WorkersScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptArgs)(nil)).Elem()
}

type WorkersScriptInput interface {
	pulumi.Input

	ToWorkersScriptOutput() WorkersScriptOutput
	ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput
}

func (*WorkersScript) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScript)(nil)).Elem()
}

func (i *WorkersScript) ToWorkersScriptOutput() WorkersScriptOutput {
	return i.ToWorkersScriptOutputWithContext(context.Background())
}

func (i *WorkersScript) ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptOutput)
}

// WorkersScriptArrayInput is an input type that accepts WorkersScriptArray and WorkersScriptArrayOutput values.
// You can construct a concrete instance of `WorkersScriptArrayInput` via:
//
//	WorkersScriptArray{ WorkersScriptArgs{...} }
type WorkersScriptArrayInput interface {
	pulumi.Input

	ToWorkersScriptArrayOutput() WorkersScriptArrayOutput
	ToWorkersScriptArrayOutputWithContext(context.Context) WorkersScriptArrayOutput
}

type WorkersScriptArray []WorkersScriptInput

func (WorkersScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScript)(nil)).Elem()
}

func (i WorkersScriptArray) ToWorkersScriptArrayOutput() WorkersScriptArrayOutput {
	return i.ToWorkersScriptArrayOutputWithContext(context.Background())
}

func (i WorkersScriptArray) ToWorkersScriptArrayOutputWithContext(ctx context.Context) WorkersScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptArrayOutput)
}

// WorkersScriptMapInput is an input type that accepts WorkersScriptMap and WorkersScriptMapOutput values.
// You can construct a concrete instance of `WorkersScriptMapInput` via:
//
//	WorkersScriptMap{ "key": WorkersScriptArgs{...} }
type WorkersScriptMapInput interface {
	pulumi.Input

	ToWorkersScriptMapOutput() WorkersScriptMapOutput
	ToWorkersScriptMapOutputWithContext(context.Context) WorkersScriptMapOutput
}

type WorkersScriptMap map[string]WorkersScriptInput

func (WorkersScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScript)(nil)).Elem()
}

func (i WorkersScriptMap) ToWorkersScriptMapOutput() WorkersScriptMapOutput {
	return i.ToWorkersScriptMapOutputWithContext(context.Background())
}

func (i WorkersScriptMap) ToWorkersScriptMapOutputWithContext(ctx context.Context) WorkersScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptMapOutput)
}

type WorkersScriptOutput struct{ *pulumi.OutputState }

func (WorkersScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScript)(nil)).Elem()
}

func (o WorkersScriptOutput) ToWorkersScriptOutput() WorkersScriptOutput {
	return o
}

func (o WorkersScriptOutput) ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput {
	return o
}

// The account identifier to target for the resource.
func (o WorkersScriptOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o WorkersScriptOutput) AnalyticsEngineBindings() WorkersScriptAnalyticsEngineBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptAnalyticsEngineBindingArrayOutput {
		return v.AnalyticsEngineBindings
	}).(WorkersScriptAnalyticsEngineBindingArrayOutput)
}

// The date to use for the compatibility flag.
func (o WorkersScriptOutput) CompatibilityDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringPtrOutput { return v.CompatibilityDate }).(pulumi.StringPtrOutput)
}

// Compatibility flags used for Worker Scripts.
func (o WorkersScriptOutput) CompatibilityFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringArrayOutput { return v.CompatibilityFlags }).(pulumi.StringArrayOutput)
}

// The script content.
func (o WorkersScriptOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o WorkersScriptOutput) D1DatabaseBindings() WorkersScriptD1DatabaseBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptD1DatabaseBindingArrayOutput { return v.D1DatabaseBindings }).(WorkersScriptD1DatabaseBindingArrayOutput)
}

// Name of the Workers for Platforms dispatch namespace.
func (o WorkersScriptOutput) DispatchNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringPtrOutput { return v.DispatchNamespace }).(pulumi.StringPtrOutput)
}

func (o WorkersScriptOutput) KvNamespaceBindings() WorkersScriptKvNamespaceBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptKvNamespaceBindingArrayOutput { return v.KvNamespaceBindings }).(WorkersScriptKvNamespaceBindingArrayOutput)
}

// Enabling allows Worker events to be sent to a defined Logpush destination.
func (o WorkersScriptOutput) Logpush() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolPtrOutput { return v.Logpush }).(pulumi.BoolPtrOutput)
}

// Whether to upload Worker as a module.
func (o WorkersScriptOutput) Module() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolPtrOutput { return v.Module }).(pulumi.BoolPtrOutput)
}

// The name for the script. **Modifying this attribute will force creation of a new resource.**
func (o WorkersScriptOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WorkersScriptOutput) Placements() WorkersScriptPlacementArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptPlacementArrayOutput { return v.Placements }).(WorkersScriptPlacementArrayOutput)
}

func (o WorkersScriptOutput) PlainTextBindings() WorkersScriptPlainTextBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptPlainTextBindingArrayOutput { return v.PlainTextBindings }).(WorkersScriptPlainTextBindingArrayOutput)
}

func (o WorkersScriptOutput) QueueBindings() WorkersScriptQueueBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptQueueBindingArrayOutput { return v.QueueBindings }).(WorkersScriptQueueBindingArrayOutput)
}

func (o WorkersScriptOutput) R2BucketBindings() WorkersScriptR2BucketBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptR2BucketBindingArrayOutput { return v.R2BucketBindings }).(WorkersScriptR2BucketBindingArrayOutput)
}

func (o WorkersScriptOutput) SecretTextBindings() WorkersScriptSecretTextBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptSecretTextBindingArrayOutput { return v.SecretTextBindings }).(WorkersScriptSecretTextBindingArrayOutput)
}

func (o WorkersScriptOutput) ServiceBindings() WorkersScriptServiceBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptServiceBindingArrayOutput { return v.ServiceBindings }).(WorkersScriptServiceBindingArrayOutput)
}

func (o WorkersScriptOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o WorkersScriptOutput) WebassemblyBindings() WorkersScriptWebassemblyBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptWebassemblyBindingArrayOutput { return v.WebassemblyBindings }).(WorkersScriptWebassemblyBindingArrayOutput)
}

type WorkersScriptArrayOutput struct{ *pulumi.OutputState }

func (WorkersScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScript)(nil)).Elem()
}

func (o WorkersScriptArrayOutput) ToWorkersScriptArrayOutput() WorkersScriptArrayOutput {
	return o
}

func (o WorkersScriptArrayOutput) ToWorkersScriptArrayOutputWithContext(ctx context.Context) WorkersScriptArrayOutput {
	return o
}

func (o WorkersScriptArrayOutput) Index(i pulumi.IntInput) WorkersScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersScript {
		return vs[0].([]*WorkersScript)[vs[1].(int)]
	}).(WorkersScriptOutput)
}

type WorkersScriptMapOutput struct{ *pulumi.OutputState }

func (WorkersScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScript)(nil)).Elem()
}

func (o WorkersScriptMapOutput) ToWorkersScriptMapOutput() WorkersScriptMapOutput {
	return o
}

func (o WorkersScriptMapOutput) ToWorkersScriptMapOutputWithContext(ctx context.Context) WorkersScriptMapOutput {
	return o
}

func (o WorkersScriptMapOutput) MapIndex(k pulumi.StringInput) WorkersScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersScript {
		return vs[0].(map[string]*WorkersScript)[vs[1].(string)]
	}).(WorkersScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptInput)(nil)).Elem(), &WorkersScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptArrayInput)(nil)).Elem(), WorkersScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptMapInput)(nil)).Elem(), WorkersScriptMap{})
	pulumi.RegisterOutputType(WorkersScriptOutput{})
	pulumi.RegisterOutputType(WorkersScriptArrayOutput{})
	pulumi.RegisterOutputType(WorkersScriptMapOutput{})
}
