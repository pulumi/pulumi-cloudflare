// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersScript:WorkersScript example '<account_id>/<script_name>'
// ```
type WorkersScript struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Configuration for assets within a Worker
	Assets WorkersScriptAssetsPtrOutput `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkersScriptBindingArrayOutput `pulumi:"bindings"`
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrOutput `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrOutput `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayOutput `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker.
	Content pulumi.StringOutput `pulumi:"content"`
	// When the script was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Whether a Worker contains assets.
	HasAssets pulumi.BoolOutput `pulumi:"hasAssets"`
	// Whether a Worker contains modules.
	HasModules pulumi.BoolOutput `pulumi:"hasModules"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrOutput `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayOutput `pulumi:"keepBindings"`
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolOutput `pulumi:"logpush"`
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrOutput `pulumi:"mainModule"`
	// Migrations to apply for Durable Objects associated with this Worker.
	Migrations WorkersScriptMigrationsOutput `pulumi:"migrations"`
	// When the script was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Observability settings for the Worker.
	Observability WorkersScriptObservabilityOutput `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkersScriptPlacementOutput `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName    pulumi.StringOutput `pulumi:"scriptName"`
	StartupTimeMs pulumi.IntOutput    `pulumi:"startupTimeMs"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkersScriptTailConsumerArrayOutput `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard".
	UsageModel pulumi.StringOutput `pulumi:"usageModel"`
}

// NewWorkersScript registers a new resource with the given unique name, arguments, and options.
func NewWorkersScript(ctx *pulumi.Context,
	name string, args *WorkersScriptArgs, opts ...pulumi.ResourceOption) (*WorkersScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/workerScript:WorkerScript"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersScript
	err := ctx.RegisterResource("cloudflare:index/workersScript:WorkersScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersScript gets an existing WorkersScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersScriptState, opts ...pulumi.ResourceOption) (*WorkersScript, error) {
	var resource WorkersScript
	err := ctx.ReadResource("cloudflare:index/workersScript:WorkersScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersScript resources.
type workersScriptState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// Configuration for assets within a Worker
	Assets *WorkersScriptAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkersScriptBinding `pulumi:"bindings"`
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker.
	Content *string `pulumi:"content"`
	// When the script was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag *string `pulumi:"etag"`
	// Whether a Worker contains assets.
	HasAssets *bool `pulumi:"hasAssets"`
	// Whether a Worker contains modules.
	HasModules *bool `pulumi:"hasModules"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings []string `pulumi:"keepBindings"`
	// Whether Logpush is turned on for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `pulumi:"mainModule"`
	// Migrations to apply for Durable Objects associated with this Worker.
	Migrations *WorkersScriptMigrations `pulumi:"migrations"`
	// When the script was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Observability settings for the Worker.
	Observability *WorkersScriptObservability `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement *WorkersScriptPlacement `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName    *string `pulumi:"scriptName"`
	StartupTimeMs *int    `pulumi:"startupTimeMs"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers []WorkersScriptTailConsumer `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard".
	UsageModel *string `pulumi:"usageModel"`
}

type WorkersScriptState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// Configuration for assets within a Worker
	Assets WorkersScriptAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkersScriptBindingArrayInput
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// Module or Service Worker contents of the Worker.
	Content pulumi.StringPtrInput
	// When the script was created.
	CreatedOn pulumi.StringPtrInput
	// Hashed script content, can be used in a If-None-Match header when updating.
	Etag pulumi.StringPtrInput
	// Whether a Worker contains assets.
	HasAssets pulumi.BoolPtrInput
	// Whether a Worker contains modules.
	HasModules pulumi.BoolPtrInput
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrInput
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayInput
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrInput
	// Migrations to apply for Durable Objects associated with this Worker.
	Migrations WorkersScriptMigrationsPtrInput
	// When the script was last modified.
	ModifiedOn pulumi.StringPtrInput
	// Observability settings for the Worker.
	Observability WorkersScriptObservabilityPtrInput
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkersScriptPlacementPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName    pulumi.StringPtrInput
	StartupTimeMs pulumi.IntPtrInput
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkersScriptTailConsumerArrayInput
	// Usage model for the Worker invocations.
	// Available values: "standard".
	UsageModel pulumi.StringPtrInput
}

func (WorkersScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptState)(nil)).Elem()
}

type workersScriptArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Configuration for assets within a Worker
	Assets *WorkersScriptAssets `pulumi:"assets"`
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings []WorkersScriptBinding `pulumi:"bindings"`
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart *string `pulumi:"bodyPart"`
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate *string `pulumi:"compatibilityDate"`
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags []string `pulumi:"compatibilityFlags"`
	// Module or Service Worker contents of the Worker.
	Content string `pulumi:"content"`
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets *bool `pulumi:"keepAssets"`
	// List of binding types to keep from previous_upload.
	KeepBindings []string `pulumi:"keepBindings"`
	// Whether Logpush is turned on for the Worker.
	Logpush *bool `pulumi:"logpush"`
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule *string `pulumi:"mainModule"`
	// Migrations to apply for Durable Objects associated with this Worker.
	Migrations *WorkersScriptMigrations `pulumi:"migrations"`
	// Observability settings for the Worker.
	Observability *WorkersScriptObservability `pulumi:"observability"`
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement *WorkersScriptPlacement `pulumi:"placement"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers []WorkersScriptTailConsumer `pulumi:"tailConsumers"`
	// Usage model for the Worker invocations.
	// Available values: "standard".
	UsageModel *string `pulumi:"usageModel"`
}

// The set of arguments for constructing a WorkersScript resource.
type WorkersScriptArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// Configuration for assets within a Worker
	Assets WorkersScriptAssetsPtrInput
	// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
	Bindings WorkersScriptBindingArrayInput
	// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
	BodyPart pulumi.StringPtrInput
	// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
	CompatibilityDate pulumi.StringPtrInput
	// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
	CompatibilityFlags pulumi.StringArrayInput
	// Module or Service Worker contents of the Worker.
	Content pulumi.StringInput
	// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
	KeepAssets pulumi.BoolPtrInput
	// List of binding types to keep from previous_upload.
	KeepBindings pulumi.StringArrayInput
	// Whether Logpush is turned on for the Worker.
	Logpush pulumi.BoolPtrInput
	// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
	MainModule pulumi.StringPtrInput
	// Migrations to apply for Durable Objects associated with this Worker.
	Migrations WorkersScriptMigrationsPtrInput
	// Observability settings for the Worker.
	Observability WorkersScriptObservabilityPtrInput
	// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
	Placement WorkersScriptPlacementPtrInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
	// List of Workers that will consume logs from the attached Worker.
	TailConsumers WorkersScriptTailConsumerArrayInput
	// Usage model for the Worker invocations.
	// Available values: "standard".
	UsageModel pulumi.StringPtrInput
}

func (WorkersScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersScriptArgs)(nil)).Elem()
}

type WorkersScriptInput interface {
	pulumi.Input

	ToWorkersScriptOutput() WorkersScriptOutput
	ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput
}

func (*WorkersScript) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScript)(nil)).Elem()
}

func (i *WorkersScript) ToWorkersScriptOutput() WorkersScriptOutput {
	return i.ToWorkersScriptOutputWithContext(context.Background())
}

func (i *WorkersScript) ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptOutput)
}

// WorkersScriptArrayInput is an input type that accepts WorkersScriptArray and WorkersScriptArrayOutput values.
// You can construct a concrete instance of `WorkersScriptArrayInput` via:
//
//	WorkersScriptArray{ WorkersScriptArgs{...} }
type WorkersScriptArrayInput interface {
	pulumi.Input

	ToWorkersScriptArrayOutput() WorkersScriptArrayOutput
	ToWorkersScriptArrayOutputWithContext(context.Context) WorkersScriptArrayOutput
}

type WorkersScriptArray []WorkersScriptInput

func (WorkersScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScript)(nil)).Elem()
}

func (i WorkersScriptArray) ToWorkersScriptArrayOutput() WorkersScriptArrayOutput {
	return i.ToWorkersScriptArrayOutputWithContext(context.Background())
}

func (i WorkersScriptArray) ToWorkersScriptArrayOutputWithContext(ctx context.Context) WorkersScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptArrayOutput)
}

// WorkersScriptMapInput is an input type that accepts WorkersScriptMap and WorkersScriptMapOutput values.
// You can construct a concrete instance of `WorkersScriptMapInput` via:
//
//	WorkersScriptMap{ "key": WorkersScriptArgs{...} }
type WorkersScriptMapInput interface {
	pulumi.Input

	ToWorkersScriptMapOutput() WorkersScriptMapOutput
	ToWorkersScriptMapOutputWithContext(context.Context) WorkersScriptMapOutput
}

type WorkersScriptMap map[string]WorkersScriptInput

func (WorkersScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScript)(nil)).Elem()
}

func (i WorkersScriptMap) ToWorkersScriptMapOutput() WorkersScriptMapOutput {
	return i.ToWorkersScriptMapOutputWithContext(context.Background())
}

func (i WorkersScriptMap) ToWorkersScriptMapOutputWithContext(ctx context.Context) WorkersScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersScriptMapOutput)
}

type WorkersScriptOutput struct{ *pulumi.OutputState }

func (WorkersScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersScript)(nil)).Elem()
}

func (o WorkersScriptOutput) ToWorkersScriptOutput() WorkersScriptOutput {
	return o
}

func (o WorkersScriptOutput) ToWorkersScriptOutputWithContext(ctx context.Context) WorkersScriptOutput {
	return o
}

// Identifier
func (o WorkersScriptOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Configuration for assets within a Worker
func (o WorkersScriptOutput) Assets() WorkersScriptAssetsPtrOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptAssetsPtrOutput { return v.Assets }).(WorkersScriptAssetsPtrOutput)
}

// List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
func (o WorkersScriptOutput) Bindings() WorkersScriptBindingArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptBindingArrayOutput { return v.Bindings }).(WorkersScriptBindingArrayOutput)
}

// Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
func (o WorkersScriptOutput) BodyPart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringPtrOutput { return v.BodyPart }).(pulumi.StringPtrOutput)
}

// Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
func (o WorkersScriptOutput) CompatibilityDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringPtrOutput { return v.CompatibilityDate }).(pulumi.StringPtrOutput)
}

// Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibilityDate`.
func (o WorkersScriptOutput) CompatibilityFlags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringArrayOutput { return v.CompatibilityFlags }).(pulumi.StringArrayOutput)
}

// Module or Service Worker contents of the Worker.
func (o WorkersScriptOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// When the script was created.
func (o WorkersScriptOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Hashed script content, can be used in a If-None-Match header when updating.
func (o WorkersScriptOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Whether a Worker contains assets.
func (o WorkersScriptOutput) HasAssets() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolOutput { return v.HasAssets }).(pulumi.BoolOutput)
}

// Whether a Worker contains modules.
func (o WorkersScriptOutput) HasModules() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolOutput { return v.HasModules }).(pulumi.BoolOutput)
}

// Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
func (o WorkersScriptOutput) KeepAssets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolPtrOutput { return v.KeepAssets }).(pulumi.BoolPtrOutput)
}

// List of binding types to keep from previous_upload.
func (o WorkersScriptOutput) KeepBindings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringArrayOutput { return v.KeepBindings }).(pulumi.StringArrayOutput)
}

// Whether Logpush is turned on for the Worker.
func (o WorkersScriptOutput) Logpush() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.BoolOutput { return v.Logpush }).(pulumi.BoolOutput)
}

// Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
func (o WorkersScriptOutput) MainModule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringPtrOutput { return v.MainModule }).(pulumi.StringPtrOutput)
}

// Migrations to apply for Durable Objects associated with this Worker.
func (o WorkersScriptOutput) Migrations() WorkersScriptMigrationsOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptMigrationsOutput { return v.Migrations }).(WorkersScriptMigrationsOutput)
}

// When the script was last modified.
func (o WorkersScriptOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Observability settings for the Worker.
func (o WorkersScriptOutput) Observability() WorkersScriptObservabilityOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptObservabilityOutput { return v.Observability }).(WorkersScriptObservabilityOutput)
}

// Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
func (o WorkersScriptOutput) Placement() WorkersScriptPlacementOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptPlacementOutput { return v.Placement }).(WorkersScriptPlacementOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkersScriptOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

func (o WorkersScriptOutput) StartupTimeMs() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.IntOutput { return v.StartupTimeMs }).(pulumi.IntOutput)
}

// List of Workers that will consume logs from the attached Worker.
func (o WorkersScriptOutput) TailConsumers() WorkersScriptTailConsumerArrayOutput {
	return o.ApplyT(func(v *WorkersScript) WorkersScriptTailConsumerArrayOutput { return v.TailConsumers }).(WorkersScriptTailConsumerArrayOutput)
}

// Usage model for the Worker invocations.
// Available values: "standard".
func (o WorkersScriptOutput) UsageModel() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersScript) pulumi.StringOutput { return v.UsageModel }).(pulumi.StringOutput)
}

type WorkersScriptArrayOutput struct{ *pulumi.OutputState }

func (WorkersScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersScript)(nil)).Elem()
}

func (o WorkersScriptArrayOutput) ToWorkersScriptArrayOutput() WorkersScriptArrayOutput {
	return o
}

func (o WorkersScriptArrayOutput) ToWorkersScriptArrayOutputWithContext(ctx context.Context) WorkersScriptArrayOutput {
	return o
}

func (o WorkersScriptArrayOutput) Index(i pulumi.IntInput) WorkersScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersScript {
		return vs[0].([]*WorkersScript)[vs[1].(int)]
	}).(WorkersScriptOutput)
}

type WorkersScriptMapOutput struct{ *pulumi.OutputState }

func (WorkersScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersScript)(nil)).Elem()
}

func (o WorkersScriptMapOutput) ToWorkersScriptMapOutput() WorkersScriptMapOutput {
	return o
}

func (o WorkersScriptMapOutput) ToWorkersScriptMapOutputWithContext(ctx context.Context) WorkersScriptMapOutput {
	return o
}

func (o WorkersScriptMapOutput) MapIndex(k pulumi.StringInput) WorkersScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersScript {
		return vs[0].(map[string]*WorkersScript)[vs[1].(string)]
	}).(WorkersScriptOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptInput)(nil)).Elem(), &WorkersScript{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptArrayInput)(nil)).Elem(), WorkersScriptArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersScriptMapInput)(nil)).Elem(), WorkersScriptMap{})
	pulumi.RegisterOutputType(WorkersScriptOutput{})
	pulumi.RegisterOutputType(WorkersScriptArrayOutput{})
	pulumi.RegisterOutputType(WorkersScriptMapOutput{})
}
