// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example '<account_id>/<pool_id>'
// ```
type LoadBalancerPool struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions pulumi.StringArrayOutput `pulumi:"checkRegions"`
	CreatedOn    pulumi.StringOutput      `pulumi:"createdOn"`
	// A human-readable description of the pool.
	Description pulumi.StringOutput `pulumi:"description"`
	// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	DisabledAt pulumi.StringOutput `pulumi:"disabledAt"`
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude pulumi.Float64PtrOutput `pulumi:"latitude"`
	// Configures load shedding policies and percentages for the pool.
	LoadShedding LoadBalancerPoolLoadSheddingOutput `pulumi:"loadShedding"`
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude pulumi.Float64PtrOutput `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins pulumi.IntOutput    `pulumi:"minimumOrigins"`
	ModifiedOn     pulumi.StringOutput `pulumi:"modifiedOn"`
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor pulumi.StringPtrOutput `pulumi:"monitor"`
	// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks pulumi.StringArrayOutput `pulumi:"networks"`
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringOutput `pulumi:"notificationEmail"`
	// Filter pool and origin health notifications by resource type or health status. Use null to reset.
	NotificationFilter LoadBalancerPoolNotificationFilterOutput `pulumi:"notificationFilter"`
	// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
	OriginSteering LoadBalancerPoolOriginSteeringOutput `pulumi:"originSteering"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayOutput `pulumi:"origins"`
}

// NewLoadBalancerPool registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerPool(ctx *pulumi.Context,
	name string, args *LoadBalancerPoolArgs, opts ...pulumi.ResourceOption) (*LoadBalancerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Origins == nil {
		return nil, errors.New("invalid value for required argument 'Origins'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancerPool
	err := ctx.RegisterResource("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerPool gets an existing LoadBalancerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerPoolState, opts ...pulumi.ResourceOption) (*LoadBalancerPool, error) {
	var resource LoadBalancerPool
	err := ctx.ReadResource("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerPool resources.
type loadBalancerPoolState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions []string `pulumi:"checkRegions"`
	CreatedOn    *string  `pulumi:"createdOn"`
	// A human-readable description of the pool.
	Description *string `pulumi:"description"`
	// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	DisabledAt *string `pulumi:"disabledAt"`
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled *bool `pulumi:"enabled"`
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude *float64 `pulumi:"latitude"`
	// Configures load shedding policies and percentages for the pool.
	LoadShedding *LoadBalancerPoolLoadShedding `pulumi:"loadShedding"`
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude *float64 `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins *int    `pulumi:"minimumOrigins"`
	ModifiedOn     *string `pulumi:"modifiedOn"`
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor *string `pulumi:"monitor"`
	// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	Name *string `pulumi:"name"`
	// List of networks where Load Balancer or Pool is enabled.
	Networks []string `pulumi:"networks"`
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `pulumi:"notificationEmail"`
	// Filter pool and origin health notifications by resource type or health status. Use null to reset.
	NotificationFilter *LoadBalancerPoolNotificationFilter `pulumi:"notificationFilter"`
	// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
	OriginSteering *LoadBalancerPoolOriginSteering `pulumi:"originSteering"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins []LoadBalancerPoolOrigin `pulumi:"origins"`
}

type LoadBalancerPoolState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions pulumi.StringArrayInput
	CreatedOn    pulumi.StringPtrInput
	// A human-readable description of the pool.
	Description pulumi.StringPtrInput
	// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
	DisabledAt pulumi.StringPtrInput
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled pulumi.BoolPtrInput
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude pulumi.Float64PtrInput
	// Configures load shedding policies and percentages for the pool.
	LoadShedding LoadBalancerPoolLoadSheddingPtrInput
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude pulumi.Float64PtrInput
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins pulumi.IntPtrInput
	ModifiedOn     pulumi.StringPtrInput
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor pulumi.StringPtrInput
	// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	Name pulumi.StringPtrInput
	// List of networks where Load Balancer or Pool is enabled.
	Networks pulumi.StringArrayInput
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringPtrInput
	// Filter pool and origin health notifications by resource type or health status. Use null to reset.
	NotificationFilter LoadBalancerPoolNotificationFilterPtrInput
	// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
	OriginSteering LoadBalancerPoolOriginSteeringPtrInput
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayInput
}

func (LoadBalancerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPoolState)(nil)).Elem()
}

type loadBalancerPoolArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions []string `pulumi:"checkRegions"`
	// A human-readable description of the pool.
	Description *string `pulumi:"description"`
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled *bool `pulumi:"enabled"`
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude *float64 `pulumi:"latitude"`
	// Configures load shedding policies and percentages for the pool.
	LoadShedding *LoadBalancerPoolLoadShedding `pulumi:"loadShedding"`
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude *float64 `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins *int `pulumi:"minimumOrigins"`
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor *string `pulumi:"monitor"`
	// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	Name string `pulumi:"name"`
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `pulumi:"notificationEmail"`
	// Filter pool and origin health notifications by resource type or health status. Use null to reset.
	NotificationFilter *LoadBalancerPoolNotificationFilter `pulumi:"notificationFilter"`
	// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
	OriginSteering *LoadBalancerPoolOriginSteering `pulumi:"originSteering"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins []LoadBalancerPoolOrigin `pulumi:"origins"`
}

// The set of arguments for constructing a LoadBalancerPool resource.
type LoadBalancerPoolArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// A list of regions from which to run health checks. Null means every Cloudflare data center.
	CheckRegions pulumi.StringArrayInput
	// A human-readable description of the pool.
	Description pulumi.StringPtrInput
	// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
	Enabled pulumi.BoolPtrInput
	// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
	Latitude pulumi.Float64PtrInput
	// Configures load shedding policies and percentages for the pool.
	LoadShedding LoadBalancerPoolLoadSheddingPtrInput
	// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
	Longitude pulumi.Float64PtrInput
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
	MinimumOrigins pulumi.IntPtrInput
	// The ID of the Monitor to use for checking the health of origins within this pool.
	Monitor pulumi.StringPtrInput
	// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
	Name pulumi.StringInput
	// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringPtrInput
	// Filter pool and origin health notifications by resource type or health status. Use null to reset.
	NotificationFilter LoadBalancerPoolNotificationFilterPtrInput
	// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
	OriginSteering LoadBalancerPoolOriginSteeringPtrInput
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayInput
}

func (LoadBalancerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPoolArgs)(nil)).Elem()
}

type LoadBalancerPoolInput interface {
	pulumi.Input

	ToLoadBalancerPoolOutput() LoadBalancerPoolOutput
	ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput
}

func (*LoadBalancerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPool)(nil)).Elem()
}

func (i *LoadBalancerPool) ToLoadBalancerPoolOutput() LoadBalancerPoolOutput {
	return i.ToLoadBalancerPoolOutputWithContext(context.Background())
}

func (i *LoadBalancerPool) ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolOutput)
}

// LoadBalancerPoolArrayInput is an input type that accepts LoadBalancerPoolArray and LoadBalancerPoolArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPoolArrayInput` via:
//
//	LoadBalancerPoolArray{ LoadBalancerPoolArgs{...} }
type LoadBalancerPoolArrayInput interface {
	pulumi.Input

	ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput
	ToLoadBalancerPoolArrayOutputWithContext(context.Context) LoadBalancerPoolArrayOutput
}

type LoadBalancerPoolArray []LoadBalancerPoolInput

func (LoadBalancerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerPool)(nil)).Elem()
}

func (i LoadBalancerPoolArray) ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput {
	return i.ToLoadBalancerPoolArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPoolArray) ToLoadBalancerPoolArrayOutputWithContext(ctx context.Context) LoadBalancerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolArrayOutput)
}

// LoadBalancerPoolMapInput is an input type that accepts LoadBalancerPoolMap and LoadBalancerPoolMapOutput values.
// You can construct a concrete instance of `LoadBalancerPoolMapInput` via:
//
//	LoadBalancerPoolMap{ "key": LoadBalancerPoolArgs{...} }
type LoadBalancerPoolMapInput interface {
	pulumi.Input

	ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput
	ToLoadBalancerPoolMapOutputWithContext(context.Context) LoadBalancerPoolMapOutput
}

type LoadBalancerPoolMap map[string]LoadBalancerPoolInput

func (LoadBalancerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerPool)(nil)).Elem()
}

func (i LoadBalancerPoolMap) ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput {
	return i.ToLoadBalancerPoolMapOutputWithContext(context.Background())
}

func (i LoadBalancerPoolMap) ToLoadBalancerPoolMapOutputWithContext(ctx context.Context) LoadBalancerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolMapOutput)
}

type LoadBalancerPoolOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolOutput) ToLoadBalancerPoolOutput() LoadBalancerPoolOutput {
	return o
}

func (o LoadBalancerPoolOutput) ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput {
	return o
}

// Identifier
func (o LoadBalancerPoolOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A list of regions from which to run health checks. Null means every Cloudflare data center.
func (o LoadBalancerPoolOutput) CheckRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringArrayOutput { return v.CheckRegions }).(pulumi.StringArrayOutput)
}

func (o LoadBalancerPoolOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// A human-readable description of the pool.
func (o LoadBalancerPoolOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
func (o LoadBalancerPoolOutput) DisabledAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.DisabledAt }).(pulumi.StringOutput)
}

// Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
func (o LoadBalancerPoolOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
func (o LoadBalancerPoolOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.Float64PtrOutput { return v.Latitude }).(pulumi.Float64PtrOutput)
}

// Configures load shedding policies and percentages for the pool.
func (o LoadBalancerPoolOutput) LoadShedding() LoadBalancerPoolLoadSheddingOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolLoadSheddingOutput { return v.LoadShedding }).(LoadBalancerPoolLoadSheddingOutput)
}

// The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
func (o LoadBalancerPoolOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.Float64PtrOutput { return v.Longitude }).(pulumi.Float64PtrOutput)
}

// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
func (o LoadBalancerPoolOutput) MinimumOrigins() pulumi.IntOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.IntOutput { return v.MinimumOrigins }).(pulumi.IntOutput)
}

func (o LoadBalancerPoolOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The ID of the Monitor to use for checking the health of origins within this pool.
func (o LoadBalancerPoolOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringPtrOutput { return v.Monitor }).(pulumi.StringPtrOutput)
}

// A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
func (o LoadBalancerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of networks where Load Balancer or Pool is enabled.
func (o LoadBalancerPoolOutput) Networks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringArrayOutput { return v.Networks }).(pulumi.StringArrayOutput)
}

// This field is now deprecated. It has been moved to Cloudflare's Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
func (o LoadBalancerPoolOutput) NotificationEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.NotificationEmail }).(pulumi.StringOutput)
}

// Filter pool and origin health notifications by resource type or health status. Use null to reset.
func (o LoadBalancerPoolOutput) NotificationFilter() LoadBalancerPoolNotificationFilterOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolNotificationFilterOutput { return v.NotificationFilter }).(LoadBalancerPoolNotificationFilterOutput)
}

// Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
func (o LoadBalancerPoolOutput) OriginSteering() LoadBalancerPoolOriginSteeringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolOriginSteeringOutput { return v.OriginSteering }).(LoadBalancerPoolOriginSteeringOutput)
}

// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
func (o LoadBalancerPoolOutput) Origins() LoadBalancerPoolOriginArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolOriginArrayOutput { return v.Origins }).(LoadBalancerPoolOriginArrayOutput)
}

type LoadBalancerPoolArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolArrayOutput) ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput {
	return o
}

func (o LoadBalancerPoolArrayOutput) ToLoadBalancerPoolArrayOutputWithContext(ctx context.Context) LoadBalancerPoolArrayOutput {
	return o
}

func (o LoadBalancerPoolArrayOutput) Index(i pulumi.IntInput) LoadBalancerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancerPool {
		return vs[0].([]*LoadBalancerPool)[vs[1].(int)]
	}).(LoadBalancerPoolOutput)
}

type LoadBalancerPoolMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolMapOutput) ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput {
	return o
}

func (o LoadBalancerPoolMapOutput) ToLoadBalancerPoolMapOutputWithContext(ctx context.Context) LoadBalancerPoolMapOutput {
	return o
}

func (o LoadBalancerPoolMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancerPool {
		return vs[0].(map[string]*LoadBalancerPool)[vs[1].(string)]
	}).(LoadBalancerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolInput)(nil)).Elem(), &LoadBalancerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolArrayInput)(nil)).Elem(), LoadBalancerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolMapInput)(nil)).Elem(), LoadBalancerPoolMap{})
	pulumi.RegisterOutputType(LoadBalancerPoolOutput{})
	pulumi.RegisterOutputType(LoadBalancerPoolArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPoolMapOutput{})
}
