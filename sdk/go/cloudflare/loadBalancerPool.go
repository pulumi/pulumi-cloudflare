// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Load Balancer pool resource. This provides a
// pool of origins that can be used by a Cloudflare Load Balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v3/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewLoadBalancerPool(ctx, "example", &cloudflare.LoadBalancerPoolArgs{
//				AccountId:   pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Description: pulumi.String("example load balancer pool"),
//				Enabled:     pulumi.Bool(false),
//				Latitude:    pulumi.Float64(55),
//				LoadSheddings: cloudflare.LoadBalancerPoolLoadSheddingArray{
//					&cloudflare.LoadBalancerPoolLoadSheddingArgs{
//						DefaultPercent: pulumi.Float64(55),
//						DefaultPolicy:  pulumi.String("random"),
//						SessionPercent: pulumi.Float64(12),
//						SessionPolicy:  pulumi.String("hash"),
//					},
//				},
//				Longitude:         -12,
//				MinimumOrigins:    pulumi.Int(1),
//				Name:              pulumi.String("example-pool"),
//				NotificationEmail: pulumi.String("someone@example.com"),
//				OriginSteerings: cloudflare.LoadBalancerPoolOriginSteeringArray{
//					&cloudflare.LoadBalancerPoolOriginSteeringArgs{
//						Policy: pulumi.String("random"),
//					},
//				},
//				Origins: cloudflare.LoadBalancerPoolOriginArray{
//					&cloudflare.LoadBalancerPoolOriginArgs{
//						Address: pulumi.String("192.0.2.1"),
//						Enabled: pulumi.Bool(false),
//						Headers: cloudflare.LoadBalancerPoolOriginHeaderArray{
//							&cloudflare.LoadBalancerPoolOriginHeaderArgs{
//								Header: pulumi.String("Host"),
//								Values: pulumi.StringArray{
//									pulumi.String("example-1"),
//								},
//							},
//						},
//						Name: pulumi.String("example-1"),
//					},
//					&cloudflare.LoadBalancerPoolOriginArgs{
//						Address: pulumi.String("192.0.2.2"),
//						Headers: cloudflare.LoadBalancerPoolOriginHeaderArray{
//							&cloudflare.LoadBalancerPoolOriginHeaderArgs{
//								Header: pulumi.String("Host"),
//								Values: pulumi.StringArray{
//									pulumi.String("example-2"),
//								},
//							},
//						},
//						Name: pulumi.String("example-2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadBalancerPool struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
	CheckRegions pulumi.StringArrayOutput `pulumi:"checkRegions"`
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Free text description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The latitude this pool is physically located at; used for proximity steering.
	Latitude pulumi.Float64PtrOutput `pulumi:"latitude"`
	// Setting for controlling load shedding for this pool.
	LoadSheddings LoadBalancerPoolLoadSheddingArrayOutput `pulumi:"loadSheddings"`
	// The longitude this pool is physically located at; used for proximity steering.
	Longitude pulumi.Float64PtrOutput `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
	MinimumOrigins pulumi.IntPtrOutput `pulumi:"minimumOrigins"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// The ID of the Monitor to use for health checking origins within this pool.
	Monitor pulumi.StringPtrOutput `pulumi:"monitor"`
	// A short name (tag) for the pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringPtrOutput `pulumi:"notificationEmail"`
	// Set an origin steering policy to control origin selection within a pool.
	OriginSteerings LoadBalancerPoolOriginSteeringArrayOutput `pulumi:"originSteerings"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayOutput `pulumi:"origins"`
}

// NewLoadBalancerPool registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerPool(ctx *pulumi.Context,
	name string, args *LoadBalancerPoolArgs, opts ...pulumi.ResourceOption) (*LoadBalancerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Origins == nil {
		return nil, errors.New("invalid value for required argument 'Origins'")
	}
	var resource LoadBalancerPool
	err := ctx.RegisterResource("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerPool gets an existing LoadBalancerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerPoolState, opts ...pulumi.ResourceOption) (*LoadBalancerPool, error) {
	var resource LoadBalancerPool
	err := ctx.ReadResource("cloudflare:index/loadBalancerPool:LoadBalancerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerPool resources.
type loadBalancerPoolState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
	CheckRegions []string `pulumi:"checkRegions"`
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn *string `pulumi:"createdOn"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The latitude this pool is physically located at; used for proximity steering.
	Latitude *float64 `pulumi:"latitude"`
	// Setting for controlling load shedding for this pool.
	LoadSheddings []LoadBalancerPoolLoadShedding `pulumi:"loadSheddings"`
	// The longitude this pool is physically located at; used for proximity steering.
	Longitude *float64 `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
	MinimumOrigins *int `pulumi:"minimumOrigins"`
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// The ID of the Monitor to use for health checking origins within this pool.
	Monitor *string `pulumi:"monitor"`
	// A short name (tag) for the pool.
	Name *string `pulumi:"name"`
	// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `pulumi:"notificationEmail"`
	// Set an origin steering policy to control origin selection within a pool.
	OriginSteerings []LoadBalancerPoolOriginSteering `pulumi:"originSteerings"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins []LoadBalancerPoolOrigin `pulumi:"origins"`
}

type LoadBalancerPoolState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
	CheckRegions pulumi.StringArrayInput
	// The RFC3339 timestamp of when the load balancer was created.
	CreatedOn pulumi.StringPtrInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The latitude this pool is physically located at; used for proximity steering.
	Latitude pulumi.Float64PtrInput
	// Setting for controlling load shedding for this pool.
	LoadSheddings LoadBalancerPoolLoadSheddingArrayInput
	// The longitude this pool is physically located at; used for proximity steering.
	Longitude pulumi.Float64PtrInput
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
	MinimumOrigins pulumi.IntPtrInput
	// The RFC3339 timestamp of when the load balancer was last modified.
	ModifiedOn pulumi.StringPtrInput
	// The ID of the Monitor to use for health checking origins within this pool.
	Monitor pulumi.StringPtrInput
	// A short name (tag) for the pool.
	Name pulumi.StringPtrInput
	// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringPtrInput
	// Set an origin steering policy to control origin selection within a pool.
	OriginSteerings LoadBalancerPoolOriginSteeringArrayInput
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayInput
}

func (LoadBalancerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPoolState)(nil)).Elem()
}

type loadBalancerPoolArgs struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
	CheckRegions []string `pulumi:"checkRegions"`
	// Free text description.
	Description *string `pulumi:"description"`
	// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The latitude this pool is physically located at; used for proximity steering.
	Latitude *float64 `pulumi:"latitude"`
	// Setting for controlling load shedding for this pool.
	LoadSheddings []LoadBalancerPoolLoadShedding `pulumi:"loadSheddings"`
	// The longitude this pool is physically located at; used for proximity steering.
	Longitude *float64 `pulumi:"longitude"`
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
	MinimumOrigins *int `pulumi:"minimumOrigins"`
	// The ID of the Monitor to use for health checking origins within this pool.
	Monitor *string `pulumi:"monitor"`
	// A short name (tag) for the pool.
	Name string `pulumi:"name"`
	// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail *string `pulumi:"notificationEmail"`
	// Set an origin steering policy to control origin selection within a pool.
	OriginSteerings []LoadBalancerPoolOriginSteering `pulumi:"originSteerings"`
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins []LoadBalancerPoolOrigin `pulumi:"origins"`
}

// The set of arguments for constructing a LoadBalancerPool resource.
type LoadBalancerPoolArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
	CheckRegions pulumi.StringArrayInput
	// Free text description.
	Description pulumi.StringPtrInput
	// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// The latitude this pool is physically located at; used for proximity steering.
	Latitude pulumi.Float64PtrInput
	// Setting for controlling load shedding for this pool.
	LoadSheddings LoadBalancerPoolLoadSheddingArrayInput
	// The longitude this pool is physically located at; used for proximity steering.
	Longitude pulumi.Float64PtrInput
	// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
	MinimumOrigins pulumi.IntPtrInput
	// The ID of the Monitor to use for health checking origins within this pool.
	Monitor pulumi.StringPtrInput
	// A short name (tag) for the pool.
	Name pulumi.StringInput
	// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
	NotificationEmail pulumi.StringPtrInput
	// Set an origin steering policy to control origin selection within a pool.
	OriginSteerings LoadBalancerPoolOriginSteeringArrayInput
	// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
	Origins LoadBalancerPoolOriginArrayInput
}

func (LoadBalancerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerPoolArgs)(nil)).Elem()
}

type LoadBalancerPoolInput interface {
	pulumi.Input

	ToLoadBalancerPoolOutput() LoadBalancerPoolOutput
	ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput
}

func (*LoadBalancerPool) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPool)(nil)).Elem()
}

func (i *LoadBalancerPool) ToLoadBalancerPoolOutput() LoadBalancerPoolOutput {
	return i.ToLoadBalancerPoolOutputWithContext(context.Background())
}

func (i *LoadBalancerPool) ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolOutput)
}

// LoadBalancerPoolArrayInput is an input type that accepts LoadBalancerPoolArray and LoadBalancerPoolArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPoolArrayInput` via:
//
//	LoadBalancerPoolArray{ LoadBalancerPoolArgs{...} }
type LoadBalancerPoolArrayInput interface {
	pulumi.Input

	ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput
	ToLoadBalancerPoolArrayOutputWithContext(context.Context) LoadBalancerPoolArrayOutput
}

type LoadBalancerPoolArray []LoadBalancerPoolInput

func (LoadBalancerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerPool)(nil)).Elem()
}

func (i LoadBalancerPoolArray) ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput {
	return i.ToLoadBalancerPoolArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPoolArray) ToLoadBalancerPoolArrayOutputWithContext(ctx context.Context) LoadBalancerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolArrayOutput)
}

// LoadBalancerPoolMapInput is an input type that accepts LoadBalancerPoolMap and LoadBalancerPoolMapOutput values.
// You can construct a concrete instance of `LoadBalancerPoolMapInput` via:
//
//	LoadBalancerPoolMap{ "key": LoadBalancerPoolArgs{...} }
type LoadBalancerPoolMapInput interface {
	pulumi.Input

	ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput
	ToLoadBalancerPoolMapOutputWithContext(context.Context) LoadBalancerPoolMapOutput
}

type LoadBalancerPoolMap map[string]LoadBalancerPoolInput

func (LoadBalancerPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerPool)(nil)).Elem()
}

func (i LoadBalancerPoolMap) ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput {
	return i.ToLoadBalancerPoolMapOutputWithContext(context.Background())
}

func (i LoadBalancerPoolMap) ToLoadBalancerPoolMapOutputWithContext(ctx context.Context) LoadBalancerPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPoolMapOutput)
}

type LoadBalancerPoolOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolOutput) ToLoadBalancerPoolOutput() LoadBalancerPoolOutput {
	return o
}

func (o LoadBalancerPoolOutput) ToLoadBalancerPoolOutputWithContext(ctx context.Context) LoadBalancerPoolOutput {
	return o
}

// The account identifier to target for the resource.
func (o LoadBalancerPoolOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
func (o LoadBalancerPoolOutput) CheckRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringArrayOutput { return v.CheckRegions }).(pulumi.StringArrayOutput)
}

// The RFC3339 timestamp of when the load balancer was created.
func (o LoadBalancerPoolOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Free text description.
func (o LoadBalancerPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
func (o LoadBalancerPoolOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The latitude this pool is physically located at; used for proximity steering.
func (o LoadBalancerPoolOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.Float64PtrOutput { return v.Latitude }).(pulumi.Float64PtrOutput)
}

// Setting for controlling load shedding for this pool.
func (o LoadBalancerPoolOutput) LoadSheddings() LoadBalancerPoolLoadSheddingArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolLoadSheddingArrayOutput { return v.LoadSheddings }).(LoadBalancerPoolLoadSheddingArrayOutput)
}

// The longitude this pool is physically located at; used for proximity steering.
func (o LoadBalancerPoolOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.Float64PtrOutput { return v.Longitude }).(pulumi.Float64PtrOutput)
}

// The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
func (o LoadBalancerPoolOutput) MinimumOrigins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.IntPtrOutput { return v.MinimumOrigins }).(pulumi.IntPtrOutput)
}

// The RFC3339 timestamp of when the load balancer was last modified.
func (o LoadBalancerPoolOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The ID of the Monitor to use for health checking origins within this pool.
func (o LoadBalancerPoolOutput) Monitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringPtrOutput { return v.Monitor }).(pulumi.StringPtrOutput)
}

// A short name (tag) for the pool.
func (o LoadBalancerPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
func (o LoadBalancerPoolOutput) NotificationEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPool) pulumi.StringPtrOutput { return v.NotificationEmail }).(pulumi.StringPtrOutput)
}

// Set an origin steering policy to control origin selection within a pool.
func (o LoadBalancerPoolOutput) OriginSteerings() LoadBalancerPoolOriginSteeringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolOriginSteeringArrayOutput { return v.OriginSteerings }).(LoadBalancerPoolOriginSteeringArrayOutput)
}

// The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
func (o LoadBalancerPoolOutput) Origins() LoadBalancerPoolOriginArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPool) LoadBalancerPoolOriginArrayOutput { return v.Origins }).(LoadBalancerPoolOriginArrayOutput)
}

type LoadBalancerPoolArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolArrayOutput) ToLoadBalancerPoolArrayOutput() LoadBalancerPoolArrayOutput {
	return o
}

func (o LoadBalancerPoolArrayOutput) ToLoadBalancerPoolArrayOutputWithContext(ctx context.Context) LoadBalancerPoolArrayOutput {
	return o
}

func (o LoadBalancerPoolArrayOutput) Index(i pulumi.IntInput) LoadBalancerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancerPool {
		return vs[0].([]*LoadBalancerPool)[vs[1].(int)]
	}).(LoadBalancerPoolOutput)
}

type LoadBalancerPoolMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerPool)(nil)).Elem()
}

func (o LoadBalancerPoolMapOutput) ToLoadBalancerPoolMapOutput() LoadBalancerPoolMapOutput {
	return o
}

func (o LoadBalancerPoolMapOutput) ToLoadBalancerPoolMapOutputWithContext(ctx context.Context) LoadBalancerPoolMapOutput {
	return o
}

func (o LoadBalancerPoolMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancerPool {
		return vs[0].(map[string]*LoadBalancerPool)[vs[1].(string)]
	}).(LoadBalancerPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolInput)(nil)).Elem(), &LoadBalancerPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolArrayInput)(nil)).Elem(), LoadBalancerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPoolMapInput)(nil)).Elem(), LoadBalancerPoolMap{})
	pulumi.RegisterOutputType(LoadBalancerPoolOutput{})
	pulumi.RegisterOutputType(LoadBalancerPoolArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPoolMapOutput{})
}
