// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupAccountApiTokenPermissionGroupsList(ctx, &cloudflare.LookupAccountApiTokenPermissionGroupsListArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				Name:      pulumi.StringRef("Account%20Settings%20Write"),
//				Scope:     pulumi.StringRef("com.cloudflare.api.account.zone"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAccountApiTokenPermissionGroupsList(ctx *pulumi.Context, args *LookupAccountApiTokenPermissionGroupsListArgs, opts ...pulumi.InvokeOption) (*LookupAccountApiTokenPermissionGroupsListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAccountApiTokenPermissionGroupsListResult
	err := ctx.Invoke("cloudflare:index/getAccountApiTokenPermissionGroupsList:getAccountApiTokenPermissionGroupsList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccountApiTokenPermissionGroupsList.
type LookupAccountApiTokenPermissionGroupsListArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name *string `pulumi:"name"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope *string `pulumi:"scope"`
}

// A collection of values returned by getAccountApiTokenPermissionGroupsList.
type LookupAccountApiTokenPermissionGroupsListResult struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name *string `pulumi:"name"`
	// The items returned by the data source
	Results []GetAccountApiTokenPermissionGroupsListResult `pulumi:"results"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope *string `pulumi:"scope"`
}

func LookupAccountApiTokenPermissionGroupsListOutput(ctx *pulumi.Context, args LookupAccountApiTokenPermissionGroupsListOutputArgs, opts ...pulumi.InvokeOption) LookupAccountApiTokenPermissionGroupsListResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAccountApiTokenPermissionGroupsListResultOutput, error) {
			args := v.(LookupAccountApiTokenPermissionGroupsListArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAccountApiTokenPermissionGroupsList:getAccountApiTokenPermissionGroupsList", args, LookupAccountApiTokenPermissionGroupsListResultOutput{}, options).(LookupAccountApiTokenPermissionGroupsListResultOutput), nil
		}).(LookupAccountApiTokenPermissionGroupsListResultOutput)
}

// A collection of arguments for invoking getAccountApiTokenPermissionGroupsList.
type LookupAccountApiTokenPermissionGroupsListOutputArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// Filter by the name of the permission group.
	// The value must be URL-encoded.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Filter by the scope of the permission group.
	// The value must be URL-encoded.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (LookupAccountApiTokenPermissionGroupsListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountApiTokenPermissionGroupsListArgs)(nil)).Elem()
}

// A collection of values returned by getAccountApiTokenPermissionGroupsList.
type LookupAccountApiTokenPermissionGroupsListResultOutput struct{ *pulumi.OutputState }

func (LookupAccountApiTokenPermissionGroupsListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccountApiTokenPermissionGroupsListResult)(nil)).Elem()
}

func (o LookupAccountApiTokenPermissionGroupsListResultOutput) ToLookupAccountApiTokenPermissionGroupsListResultOutput() LookupAccountApiTokenPermissionGroupsListResultOutput {
	return o
}

func (o LookupAccountApiTokenPermissionGroupsListResultOutput) ToLookupAccountApiTokenPermissionGroupsListResultOutputWithContext(ctx context.Context) LookupAccountApiTokenPermissionGroupsListResultOutput {
	return o
}

// Account identifier tag.
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) string { return v.Id }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// Filter by the name of the permission group.
// The value must be URL-encoded.
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The items returned by the data source
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) Results() GetAccountApiTokenPermissionGroupsListResultArrayOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) []GetAccountApiTokenPermissionGroupsListResult {
		return v.Results
	}).(GetAccountApiTokenPermissionGroupsListResultArrayOutput)
}

// Filter by the scope of the permission group.
// The value must be URL-encoded.
func (o LookupAccountApiTokenPermissionGroupsListResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAccountApiTokenPermissionGroupsListResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccountApiTokenPermissionGroupsListResultOutput{})
}
