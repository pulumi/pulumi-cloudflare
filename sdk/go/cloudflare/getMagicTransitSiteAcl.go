// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupMagicTransitSiteAcl(ctx, &cloudflare.LookupMagicTransitSiteAclArgs{
//				AccountId: "023e105f4ecef8ad9ca31a8372d0c353",
//				SiteId:    "023e105f4ecef8ad9ca31a8372d0c353",
//				AclId:     pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMagicTransitSiteAcl(ctx *pulumi.Context, args *LookupMagicTransitSiteAclArgs, opts ...pulumi.InvokeOption) (*LookupMagicTransitSiteAclResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMagicTransitSiteAclResult
	err := ctx.Invoke("cloudflare:index/getMagicTransitSiteAcl:getMagicTransitSiteAcl", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMagicTransitSiteAcl.
type LookupMagicTransitSiteAclArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Identifier
	AclId *string `pulumi:"aclId"`
	// Identifier
	SiteId string `pulumi:"siteId"`
}

// A collection of values returned by getMagicTransitSiteAcl.
type LookupMagicTransitSiteAclResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Identifier
	AclId *string `pulumi:"aclId"`
	// Description for the ACL.
	Description string `pulumi:"description"`
	// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
	ForwardLocally bool `pulumi:"forwardLocally"`
	// Identifier
	Id   string                     `pulumi:"id"`
	Lan1 GetMagicTransitSiteAclLan1 `pulumi:"lan1"`
	Lan2 GetMagicTransitSiteAclLan2 `pulumi:"lan2"`
	// The name of the ACL.
	Name      string   `pulumi:"name"`
	Protocols []string `pulumi:"protocols"`
	// Identifier
	SiteId string `pulumi:"siteId"`
	// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
	Unidirectional bool `pulumi:"unidirectional"`
}

func LookupMagicTransitSiteAclOutput(ctx *pulumi.Context, args LookupMagicTransitSiteAclOutputArgs, opts ...pulumi.InvokeOption) LookupMagicTransitSiteAclResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMagicTransitSiteAclResultOutput, error) {
			args := v.(LookupMagicTransitSiteAclArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getMagicTransitSiteAcl:getMagicTransitSiteAcl", args, LookupMagicTransitSiteAclResultOutput{}, options).(LookupMagicTransitSiteAclResultOutput), nil
		}).(LookupMagicTransitSiteAclResultOutput)
}

// A collection of arguments for invoking getMagicTransitSiteAcl.
type LookupMagicTransitSiteAclOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier
	AclId pulumi.StringPtrInput `pulumi:"aclId"`
	// Identifier
	SiteId pulumi.StringInput `pulumi:"siteId"`
}

func (LookupMagicTransitSiteAclOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteAclArgs)(nil)).Elem()
}

// A collection of values returned by getMagicTransitSiteAcl.
type LookupMagicTransitSiteAclResultOutput struct{ *pulumi.OutputState }

func (LookupMagicTransitSiteAclResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMagicTransitSiteAclResult)(nil)).Elem()
}

func (o LookupMagicTransitSiteAclResultOutput) ToLookupMagicTransitSiteAclResultOutput() LookupMagicTransitSiteAclResultOutput {
	return o
}

func (o LookupMagicTransitSiteAclResultOutput) ToLookupMagicTransitSiteAclResultOutputWithContext(ctx context.Context) LookupMagicTransitSiteAclResultOutput {
	return o
}

// Identifier
func (o LookupMagicTransitSiteAclResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Identifier
func (o LookupMagicTransitSiteAclResultOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// Description for the ACL.
func (o LookupMagicTransitSiteAclResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) string { return v.Description }).(pulumi.StringOutput)
}

// The desired forwarding action for this ACL policy. If set to "false", the policy will forward traffic to Cloudflare. If set to "true", the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
func (o LookupMagicTransitSiteAclResultOutput) ForwardLocally() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) bool { return v.ForwardLocally }).(pulumi.BoolOutput)
}

// Identifier
func (o LookupMagicTransitSiteAclResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMagicTransitSiteAclResultOutput) Lan1() GetMagicTransitSiteAclLan1Output {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) GetMagicTransitSiteAclLan1 { return v.Lan1 }).(GetMagicTransitSiteAclLan1Output)
}

func (o LookupMagicTransitSiteAclResultOutput) Lan2() GetMagicTransitSiteAclLan2Output {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) GetMagicTransitSiteAclLan2 { return v.Lan2 }).(GetMagicTransitSiteAclLan2Output)
}

// The name of the ACL.
func (o LookupMagicTransitSiteAclResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMagicTransitSiteAclResultOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Identifier
func (o LookupMagicTransitSiteAclResultOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) string { return v.SiteId }).(pulumi.StringOutput)
}

// The desired traffic direction for this ACL policy. If set to "false", the policy will allow bidirectional traffic. If set to "true", the policy will only allow traffic in one direction. If not included in request, will default to false.
func (o LookupMagicTransitSiteAclResultOutput) Unidirectional() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMagicTransitSiteAclResult) bool { return v.Unidirectional }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMagicTransitSiteAclResultOutput{})
}
