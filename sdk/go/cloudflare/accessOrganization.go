// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Deprecated: cloudflare.index/accessorganization.AccessOrganization has been deprecated in favor of cloudflare.index/zerotrustorganization.ZeroTrustOrganization
type AccessOrganization struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
	AllowAuthenticateViaWarp pulumi.BoolOutput `pulumi:"allowAuthenticateViaWarp"`
	// The unique subdomain assigned to your Zero Trust organization.
	AuthDomain pulumi.StringPtrOutput `pulumi:"authDomain"`
	// When set to `true`, users skip the identity provider selection step during login.
	AutoRedirectToIdentity pulumi.BoolOutput                      `pulumi:"autoRedirectToIdentity"`
	CustomPages            AccessOrganizationCustomPagesPtrOutput `pulumi:"customPages"`
	IsUiReadOnly           pulumi.BoolOutput                      `pulumi:"isUiReadOnly"`
	LoginDesign            AccessOrganizationLoginDesignPtrOutput `pulumi:"loginDesign"`
	// The name of your Zero Trust organization.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
	SessionDuration pulumi.StringPtrOutput `pulumi:"sessionDuration"`
	// A description of the reason why the UI read only field is being toggled.
	UiReadOnlyToggleReason pulumi.StringPtrOutput `pulumi:"uiReadOnlyToggleReason"`
	// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
	UserSeatExpirationInactiveTime pulumi.StringPtrOutput `pulumi:"userSeatExpirationInactiveTime"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
	WarpAuthSessionDuration pulumi.StringPtrOutput `pulumi:"warpAuthSessionDuration"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewAccessOrganization registers a new resource with the given unique name, arguments, and options.
func NewAccessOrganization(ctx *pulumi.Context,
	name string, args *AccessOrganizationArgs, opts ...pulumi.ResourceOption) (*AccessOrganization, error) {
	if args == nil {
		args = &AccessOrganizationArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/accessOrganization:AccessOrganization"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessOrganization
	err := ctx.RegisterResource("cloudflare:index/accessOrganization:AccessOrganization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessOrganization gets an existing AccessOrganization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessOrganizationState, opts ...pulumi.ResourceOption) (*AccessOrganization, error) {
	var resource AccessOrganization
	err := ctx.ReadResource("cloudflare:index/accessOrganization:AccessOrganization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessOrganization resources.
type accessOrganizationState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
	AllowAuthenticateViaWarp *bool `pulumi:"allowAuthenticateViaWarp"`
	// The unique subdomain assigned to your Zero Trust organization.
	AuthDomain *string `pulumi:"authDomain"`
	// When set to `true`, users skip the identity provider selection step during login.
	AutoRedirectToIdentity *bool                          `pulumi:"autoRedirectToIdentity"`
	CustomPages            *AccessOrganizationCustomPages `pulumi:"customPages"`
	IsUiReadOnly           *bool                          `pulumi:"isUiReadOnly"`
	LoginDesign            *AccessOrganizationLoginDesign `pulumi:"loginDesign"`
	// The name of your Zero Trust organization.
	Name *string `pulumi:"name"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
	SessionDuration *string `pulumi:"sessionDuration"`
	// A description of the reason why the UI read only field is being toggled.
	UiReadOnlyToggleReason *string `pulumi:"uiReadOnlyToggleReason"`
	// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
	UserSeatExpirationInactiveTime *string `pulumi:"userSeatExpirationInactiveTime"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
	WarpAuthSessionDuration *string `pulumi:"warpAuthSessionDuration"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessOrganizationState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
	AllowAuthenticateViaWarp pulumi.BoolPtrInput
	// The unique subdomain assigned to your Zero Trust organization.
	AuthDomain pulumi.StringPtrInput
	// When set to `true`, users skip the identity provider selection step during login.
	AutoRedirectToIdentity pulumi.BoolPtrInput
	CustomPages            AccessOrganizationCustomPagesPtrInput
	IsUiReadOnly           pulumi.BoolPtrInput
	LoginDesign            AccessOrganizationLoginDesignPtrInput
	// The name of your Zero Trust organization.
	Name pulumi.StringPtrInput
	// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
	SessionDuration pulumi.StringPtrInput
	// A description of the reason why the UI read only field is being toggled.
	UiReadOnlyToggleReason pulumi.StringPtrInput
	// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
	UserSeatExpirationInactiveTime pulumi.StringPtrInput
	// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
	WarpAuthSessionDuration pulumi.StringPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessOrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessOrganizationState)(nil)).Elem()
}

type accessOrganizationArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
	AllowAuthenticateViaWarp *bool `pulumi:"allowAuthenticateViaWarp"`
	// The unique subdomain assigned to your Zero Trust organization.
	AuthDomain *string `pulumi:"authDomain"`
	// When set to `true`, users skip the identity provider selection step during login.
	AutoRedirectToIdentity *bool                          `pulumi:"autoRedirectToIdentity"`
	CustomPages            *AccessOrganizationCustomPages `pulumi:"customPages"`
	IsUiReadOnly           *bool                          `pulumi:"isUiReadOnly"`
	LoginDesign            *AccessOrganizationLoginDesign `pulumi:"loginDesign"`
	// The name of your Zero Trust organization.
	Name *string `pulumi:"name"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
	SessionDuration *string `pulumi:"sessionDuration"`
	// A description of the reason why the UI read only field is being toggled.
	UiReadOnlyToggleReason *string `pulumi:"uiReadOnlyToggleReason"`
	// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
	UserSeatExpirationInactiveTime *string `pulumi:"userSeatExpirationInactiveTime"`
	// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
	WarpAuthSessionDuration *string `pulumi:"warpAuthSessionDuration"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessOrganization resource.
type AccessOrganizationArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
	AllowAuthenticateViaWarp pulumi.BoolPtrInput
	// The unique subdomain assigned to your Zero Trust organization.
	AuthDomain pulumi.StringPtrInput
	// When set to `true`, users skip the identity provider selection step during login.
	AutoRedirectToIdentity pulumi.BoolPtrInput
	CustomPages            AccessOrganizationCustomPagesPtrInput
	IsUiReadOnly           pulumi.BoolPtrInput
	LoginDesign            AccessOrganizationLoginDesignPtrInput
	// The name of your Zero Trust organization.
	Name pulumi.StringPtrInput
	// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
	SessionDuration pulumi.StringPtrInput
	// A description of the reason why the UI read only field is being toggled.
	UiReadOnlyToggleReason pulumi.StringPtrInput
	// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
	UserSeatExpirationInactiveTime pulumi.StringPtrInput
	// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
	WarpAuthSessionDuration pulumi.StringPtrInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessOrganizationArgs)(nil)).Elem()
}

type AccessOrganizationInput interface {
	pulumi.Input

	ToAccessOrganizationOutput() AccessOrganizationOutput
	ToAccessOrganizationOutputWithContext(ctx context.Context) AccessOrganizationOutput
}

func (*AccessOrganization) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessOrganization)(nil)).Elem()
}

func (i *AccessOrganization) ToAccessOrganizationOutput() AccessOrganizationOutput {
	return i.ToAccessOrganizationOutputWithContext(context.Background())
}

func (i *AccessOrganization) ToAccessOrganizationOutputWithContext(ctx context.Context) AccessOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessOrganizationOutput)
}

// AccessOrganizationArrayInput is an input type that accepts AccessOrganizationArray and AccessOrganizationArrayOutput values.
// You can construct a concrete instance of `AccessOrganizationArrayInput` via:
//
//	AccessOrganizationArray{ AccessOrganizationArgs{...} }
type AccessOrganizationArrayInput interface {
	pulumi.Input

	ToAccessOrganizationArrayOutput() AccessOrganizationArrayOutput
	ToAccessOrganizationArrayOutputWithContext(context.Context) AccessOrganizationArrayOutput
}

type AccessOrganizationArray []AccessOrganizationInput

func (AccessOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessOrganization)(nil)).Elem()
}

func (i AccessOrganizationArray) ToAccessOrganizationArrayOutput() AccessOrganizationArrayOutput {
	return i.ToAccessOrganizationArrayOutputWithContext(context.Background())
}

func (i AccessOrganizationArray) ToAccessOrganizationArrayOutputWithContext(ctx context.Context) AccessOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessOrganizationArrayOutput)
}

// AccessOrganizationMapInput is an input type that accepts AccessOrganizationMap and AccessOrganizationMapOutput values.
// You can construct a concrete instance of `AccessOrganizationMapInput` via:
//
//	AccessOrganizationMap{ "key": AccessOrganizationArgs{...} }
type AccessOrganizationMapInput interface {
	pulumi.Input

	ToAccessOrganizationMapOutput() AccessOrganizationMapOutput
	ToAccessOrganizationMapOutputWithContext(context.Context) AccessOrganizationMapOutput
}

type AccessOrganizationMap map[string]AccessOrganizationInput

func (AccessOrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessOrganization)(nil)).Elem()
}

func (i AccessOrganizationMap) ToAccessOrganizationMapOutput() AccessOrganizationMapOutput {
	return i.ToAccessOrganizationMapOutputWithContext(context.Background())
}

func (i AccessOrganizationMap) ToAccessOrganizationMapOutputWithContext(ctx context.Context) AccessOrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessOrganizationMapOutput)
}

type AccessOrganizationOutput struct{ *pulumi.OutputState }

func (AccessOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessOrganization)(nil)).Elem()
}

func (o AccessOrganizationOutput) ToAccessOrganizationOutput() AccessOrganizationOutput {
	return o
}

func (o AccessOrganizationOutput) ToAccessOrganizationOutputWithContext(ctx context.Context) AccessOrganizationOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o AccessOrganizationOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
func (o AccessOrganizationOutput) AllowAuthenticateViaWarp() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.BoolOutput { return v.AllowAuthenticateViaWarp }).(pulumi.BoolOutput)
}

// The unique subdomain assigned to your Zero Trust organization.
func (o AccessOrganizationOutput) AuthDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.AuthDomain }).(pulumi.StringPtrOutput)
}

// When set to `true`, users skip the identity provider selection step during login.
func (o AccessOrganizationOutput) AutoRedirectToIdentity() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.BoolOutput { return v.AutoRedirectToIdentity }).(pulumi.BoolOutput)
}

func (o AccessOrganizationOutput) CustomPages() AccessOrganizationCustomPagesPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) AccessOrganizationCustomPagesPtrOutput { return v.CustomPages }).(AccessOrganizationCustomPagesPtrOutput)
}

func (o AccessOrganizationOutput) IsUiReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.BoolOutput { return v.IsUiReadOnly }).(pulumi.BoolOutput)
}

func (o AccessOrganizationOutput) LoginDesign() AccessOrganizationLoginDesignPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) AccessOrganizationLoginDesignPtrOutput { return v.LoginDesign }).(AccessOrganizationLoginDesignPtrOutput)
}

// The name of your Zero Trust organization.
func (o AccessOrganizationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
func (o AccessOrganizationOutput) SessionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.SessionDuration }).(pulumi.StringPtrOutput)
}

// A description of the reason why the UI read only field is being toggled.
func (o AccessOrganizationOutput) UiReadOnlyToggleReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.UiReadOnlyToggleReason }).(pulumi.StringPtrOutput)
}

// The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
func (o AccessOrganizationOutput) UserSeatExpirationInactiveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.UserSeatExpirationInactiveTime }).(pulumi.StringPtrOutput)
}

// The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
func (o AccessOrganizationOutput) WarpAuthSessionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.WarpAuthSessionDuration }).(pulumi.StringPtrOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o AccessOrganizationOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessOrganization) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type AccessOrganizationArrayOutput struct{ *pulumi.OutputState }

func (AccessOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessOrganization)(nil)).Elem()
}

func (o AccessOrganizationArrayOutput) ToAccessOrganizationArrayOutput() AccessOrganizationArrayOutput {
	return o
}

func (o AccessOrganizationArrayOutput) ToAccessOrganizationArrayOutputWithContext(ctx context.Context) AccessOrganizationArrayOutput {
	return o
}

func (o AccessOrganizationArrayOutput) Index(i pulumi.IntInput) AccessOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessOrganization {
		return vs[0].([]*AccessOrganization)[vs[1].(int)]
	}).(AccessOrganizationOutput)
}

type AccessOrganizationMapOutput struct{ *pulumi.OutputState }

func (AccessOrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessOrganization)(nil)).Elem()
}

func (o AccessOrganizationMapOutput) ToAccessOrganizationMapOutput() AccessOrganizationMapOutput {
	return o
}

func (o AccessOrganizationMapOutput) ToAccessOrganizationMapOutputWithContext(ctx context.Context) AccessOrganizationMapOutput {
	return o
}

func (o AccessOrganizationMapOutput) MapIndex(k pulumi.StringInput) AccessOrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessOrganization {
		return vs[0].(map[string]*AccessOrganization)[vs[1].(string)]
	}).(AccessOrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessOrganizationInput)(nil)).Elem(), &AccessOrganization{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessOrganizationArrayInput)(nil)).Elem(), AccessOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessOrganizationMapInput)(nil)).Elem(), AccessOrganizationMap{})
	pulumi.RegisterOutputType(AccessOrganizationOutput{})
	pulumi.RegisterOutputType(AccessOrganizationArrayOutput{})
	pulumi.RegisterOutputType(AccessOrganizationMapOutput{})
}
