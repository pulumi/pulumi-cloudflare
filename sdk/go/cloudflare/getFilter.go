// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupFilter(ctx, &cloudflare.LookupFilterArgs{
//				ZoneId:   "023e105f4ecef8ad9ca31a8372d0c353",
//				FilterId: pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b61"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFilter(ctx *pulumi.Context, args *LookupFilterArgs, opts ...pulumi.InvokeOption) (*LookupFilterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFilterResult
	err := ctx.Invoke("cloudflare:index/getFilter:getFilter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFilter.
type LookupFilterArgs struct {
	Filter *GetFilterFilter `pulumi:"filter"`
	// The unique identifier of the filter.
	FilterId *string `pulumi:"filterId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getFilter.
type LookupFilterResult struct {
	// An informative summary of the filter.
	Description string `pulumi:"description"`
	// The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
	Expression string           `pulumi:"expression"`
	Filter     *GetFilterFilter `pulumi:"filter"`
	// The unique identifier of the filter.
	FilterId *string `pulumi:"filterId"`
	// The unique identifier of the filter.
	Id string `pulumi:"id"`
	// When true, indicates that the filter is currently paused.
	Paused bool `pulumi:"paused"`
	// A short reference tag. Allows you to select related filters.
	Ref string `pulumi:"ref"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupFilterOutput(ctx *pulumi.Context, args LookupFilterOutputArgs, opts ...pulumi.InvokeOption) LookupFilterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFilterResultOutput, error) {
			args := v.(LookupFilterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getFilter:getFilter", args, LookupFilterResultOutput{}, options).(LookupFilterResultOutput), nil
		}).(LookupFilterResultOutput)
}

// A collection of arguments for invoking getFilter.
type LookupFilterOutputArgs struct {
	Filter GetFilterFilterPtrInput `pulumi:"filter"`
	// The unique identifier of the filter.
	FilterId pulumi.StringPtrInput `pulumi:"filterId"`
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupFilterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFilterArgs)(nil)).Elem()
}

// A collection of values returned by getFilter.
type LookupFilterResultOutput struct{ *pulumi.OutputState }

func (LookupFilterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFilterResult)(nil)).Elem()
}

func (o LookupFilterResultOutput) ToLookupFilterResultOutput() LookupFilterResultOutput {
	return o
}

func (o LookupFilterResultOutput) ToLookupFilterResultOutputWithContext(ctx context.Context) LookupFilterResultOutput {
	return o
}

// An informative summary of the filter.
func (o LookupFilterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFilterResult) string { return v.Description }).(pulumi.StringOutput)
}

// The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
func (o LookupFilterResultOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFilterResult) string { return v.Expression }).(pulumi.StringOutput)
}

func (o LookupFilterResultOutput) Filter() GetFilterFilterPtrOutput {
	return o.ApplyT(func(v LookupFilterResult) *GetFilterFilter { return v.Filter }).(GetFilterFilterPtrOutput)
}

// The unique identifier of the filter.
func (o LookupFilterResultOutput) FilterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFilterResult) *string { return v.FilterId }).(pulumi.StringPtrOutput)
}

// The unique identifier of the filter.
func (o LookupFilterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFilterResult) string { return v.Id }).(pulumi.StringOutput)
}

// When true, indicates that the filter is currently paused.
func (o LookupFilterResultOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFilterResult) bool { return v.Paused }).(pulumi.BoolOutput)
}

// A short reference tag. Allows you to select related filters.
func (o LookupFilterResultOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFilterResult) string { return v.Ref }).(pulumi.StringOutput)
}

// Defines an identifier.
func (o LookupFilterResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFilterResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFilterResultOutput{})
}
