// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/hyperdriveConfig:HyperdriveConfig example '<account_id>/<hyperdrive_id>'
// ```
type HyperdriveConfig struct {
	pulumi.CustomResourceState

	// Define configurations using a unique string identifier.
	AccountId pulumi.StringOutput              `pulumi:"accountId"`
	Caching   HyperdriveConfigCachingPtrOutput `pulumi:"caching"`
	// Defines the creation time of the Hyperdrive configuration.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Defines the last modified time of the Hyperdrive configuration.
	ModifiedOn pulumi.StringOutput           `pulumi:"modifiedOn"`
	Mtls       HyperdriveConfigMtlsPtrOutput `pulumi:"mtls"`
	Name       pulumi.StringOutput           `pulumi:"name"`
	Origin     HyperdriveConfigOriginOutput  `pulumi:"origin"`
	// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
	OriginConnectionLimit pulumi.IntPtrOutput `pulumi:"originConnectionLimit"`
}

// NewHyperdriveConfig registers a new resource with the given unique name, arguments, and options.
func NewHyperdriveConfig(ctx *pulumi.Context,
	name string, args *HyperdriveConfigArgs, opts ...pulumi.ResourceOption) (*HyperdriveConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Origin == nil {
		return nil, errors.New("invalid value for required argument 'Origin'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HyperdriveConfig
	err := ctx.RegisterResource("cloudflare:index/hyperdriveConfig:HyperdriveConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHyperdriveConfig gets an existing HyperdriveConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHyperdriveConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HyperdriveConfigState, opts ...pulumi.ResourceOption) (*HyperdriveConfig, error) {
	var resource HyperdriveConfig
	err := ctx.ReadResource("cloudflare:index/hyperdriveConfig:HyperdriveConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HyperdriveConfig resources.
type hyperdriveConfigState struct {
	// Define configurations using a unique string identifier.
	AccountId *string                  `pulumi:"accountId"`
	Caching   *HyperdriveConfigCaching `pulumi:"caching"`
	// Defines the creation time of the Hyperdrive configuration.
	CreatedOn *string `pulumi:"createdOn"`
	// Defines the last modified time of the Hyperdrive configuration.
	ModifiedOn *string                 `pulumi:"modifiedOn"`
	Mtls       *HyperdriveConfigMtls   `pulumi:"mtls"`
	Name       *string                 `pulumi:"name"`
	Origin     *HyperdriveConfigOrigin `pulumi:"origin"`
	// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
	OriginConnectionLimit *int `pulumi:"originConnectionLimit"`
}

type HyperdriveConfigState struct {
	// Define configurations using a unique string identifier.
	AccountId pulumi.StringPtrInput
	Caching   HyperdriveConfigCachingPtrInput
	// Defines the creation time of the Hyperdrive configuration.
	CreatedOn pulumi.StringPtrInput
	// Defines the last modified time of the Hyperdrive configuration.
	ModifiedOn pulumi.StringPtrInput
	Mtls       HyperdriveConfigMtlsPtrInput
	Name       pulumi.StringPtrInput
	Origin     HyperdriveConfigOriginPtrInput
	// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
	OriginConnectionLimit pulumi.IntPtrInput
}

func (HyperdriveConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperdriveConfigState)(nil)).Elem()
}

type hyperdriveConfigArgs struct {
	// Define configurations using a unique string identifier.
	AccountId string                   `pulumi:"accountId"`
	Caching   *HyperdriveConfigCaching `pulumi:"caching"`
	Mtls      *HyperdriveConfigMtls    `pulumi:"mtls"`
	Name      string                   `pulumi:"name"`
	Origin    HyperdriveConfigOrigin   `pulumi:"origin"`
	// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
	OriginConnectionLimit *int `pulumi:"originConnectionLimit"`
}

// The set of arguments for constructing a HyperdriveConfig resource.
type HyperdriveConfigArgs struct {
	// Define configurations using a unique string identifier.
	AccountId pulumi.StringInput
	Caching   HyperdriveConfigCachingPtrInput
	Mtls      HyperdriveConfigMtlsPtrInput
	Name      pulumi.StringInput
	Origin    HyperdriveConfigOriginInput
	// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
	OriginConnectionLimit pulumi.IntPtrInput
}

func (HyperdriveConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperdriveConfigArgs)(nil)).Elem()
}

type HyperdriveConfigInput interface {
	pulumi.Input

	ToHyperdriveConfigOutput() HyperdriveConfigOutput
	ToHyperdriveConfigOutputWithContext(ctx context.Context) HyperdriveConfigOutput
}

func (*HyperdriveConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperdriveConfig)(nil)).Elem()
}

func (i *HyperdriveConfig) ToHyperdriveConfigOutput() HyperdriveConfigOutput {
	return i.ToHyperdriveConfigOutputWithContext(context.Background())
}

func (i *HyperdriveConfig) ToHyperdriveConfigOutputWithContext(ctx context.Context) HyperdriveConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperdriveConfigOutput)
}

// HyperdriveConfigArrayInput is an input type that accepts HyperdriveConfigArray and HyperdriveConfigArrayOutput values.
// You can construct a concrete instance of `HyperdriveConfigArrayInput` via:
//
//	HyperdriveConfigArray{ HyperdriveConfigArgs{...} }
type HyperdriveConfigArrayInput interface {
	pulumi.Input

	ToHyperdriveConfigArrayOutput() HyperdriveConfigArrayOutput
	ToHyperdriveConfigArrayOutputWithContext(context.Context) HyperdriveConfigArrayOutput
}

type HyperdriveConfigArray []HyperdriveConfigInput

func (HyperdriveConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HyperdriveConfig)(nil)).Elem()
}

func (i HyperdriveConfigArray) ToHyperdriveConfigArrayOutput() HyperdriveConfigArrayOutput {
	return i.ToHyperdriveConfigArrayOutputWithContext(context.Background())
}

func (i HyperdriveConfigArray) ToHyperdriveConfigArrayOutputWithContext(ctx context.Context) HyperdriveConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperdriveConfigArrayOutput)
}

// HyperdriveConfigMapInput is an input type that accepts HyperdriveConfigMap and HyperdriveConfigMapOutput values.
// You can construct a concrete instance of `HyperdriveConfigMapInput` via:
//
//	HyperdriveConfigMap{ "key": HyperdriveConfigArgs{...} }
type HyperdriveConfigMapInput interface {
	pulumi.Input

	ToHyperdriveConfigMapOutput() HyperdriveConfigMapOutput
	ToHyperdriveConfigMapOutputWithContext(context.Context) HyperdriveConfigMapOutput
}

type HyperdriveConfigMap map[string]HyperdriveConfigInput

func (HyperdriveConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HyperdriveConfig)(nil)).Elem()
}

func (i HyperdriveConfigMap) ToHyperdriveConfigMapOutput() HyperdriveConfigMapOutput {
	return i.ToHyperdriveConfigMapOutputWithContext(context.Background())
}

func (i HyperdriveConfigMap) ToHyperdriveConfigMapOutputWithContext(ctx context.Context) HyperdriveConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperdriveConfigMapOutput)
}

type HyperdriveConfigOutput struct{ *pulumi.OutputState }

func (HyperdriveConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperdriveConfig)(nil)).Elem()
}

func (o HyperdriveConfigOutput) ToHyperdriveConfigOutput() HyperdriveConfigOutput {
	return o
}

func (o HyperdriveConfigOutput) ToHyperdriveConfigOutputWithContext(ctx context.Context) HyperdriveConfigOutput {
	return o
}

// Define configurations using a unique string identifier.
func (o HyperdriveConfigOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperdriveConfig) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o HyperdriveConfigOutput) Caching() HyperdriveConfigCachingPtrOutput {
	return o.ApplyT(func(v *HyperdriveConfig) HyperdriveConfigCachingPtrOutput { return v.Caching }).(HyperdriveConfigCachingPtrOutput)
}

// Defines the creation time of the Hyperdrive configuration.
func (o HyperdriveConfigOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperdriveConfig) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Defines the last modified time of the Hyperdrive configuration.
func (o HyperdriveConfigOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperdriveConfig) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o HyperdriveConfigOutput) Mtls() HyperdriveConfigMtlsPtrOutput {
	return o.ApplyT(func(v *HyperdriveConfig) HyperdriveConfigMtlsPtrOutput { return v.Mtls }).(HyperdriveConfigMtlsPtrOutput)
}

func (o HyperdriveConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperdriveConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o HyperdriveConfigOutput) Origin() HyperdriveConfigOriginOutput {
	return o.ApplyT(func(v *HyperdriveConfig) HyperdriveConfigOriginOutput { return v.Origin }).(HyperdriveConfigOriginOutput)
}

// The (soft) maximum number of connections the Hyperdrive is allowed to make to the origin database.
func (o HyperdriveConfigOutput) OriginConnectionLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HyperdriveConfig) pulumi.IntPtrOutput { return v.OriginConnectionLimit }).(pulumi.IntPtrOutput)
}

type HyperdriveConfigArrayOutput struct{ *pulumi.OutputState }

func (HyperdriveConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HyperdriveConfig)(nil)).Elem()
}

func (o HyperdriveConfigArrayOutput) ToHyperdriveConfigArrayOutput() HyperdriveConfigArrayOutput {
	return o
}

func (o HyperdriveConfigArrayOutput) ToHyperdriveConfigArrayOutputWithContext(ctx context.Context) HyperdriveConfigArrayOutput {
	return o
}

func (o HyperdriveConfigArrayOutput) Index(i pulumi.IntInput) HyperdriveConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HyperdriveConfig {
		return vs[0].([]*HyperdriveConfig)[vs[1].(int)]
	}).(HyperdriveConfigOutput)
}

type HyperdriveConfigMapOutput struct{ *pulumi.OutputState }

func (HyperdriveConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HyperdriveConfig)(nil)).Elem()
}

func (o HyperdriveConfigMapOutput) ToHyperdriveConfigMapOutput() HyperdriveConfigMapOutput {
	return o
}

func (o HyperdriveConfigMapOutput) ToHyperdriveConfigMapOutputWithContext(ctx context.Context) HyperdriveConfigMapOutput {
	return o
}

func (o HyperdriveConfigMapOutput) MapIndex(k pulumi.StringInput) HyperdriveConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HyperdriveConfig {
		return vs[0].(map[string]*HyperdriveConfig)[vs[1].(string)]
	}).(HyperdriveConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HyperdriveConfigInput)(nil)).Elem(), &HyperdriveConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*HyperdriveConfigArrayInput)(nil)).Elem(), HyperdriveConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HyperdriveConfigMapInput)(nil)).Elem(), HyperdriveConfigMap{})
	pulumi.RegisterOutputType(HyperdriveConfigOutput{})
	pulumi.RegisterOutputType(HyperdriveConfigArrayOutput{})
	pulumi.RegisterOutputType(HyperdriveConfigMapOutput{})
}
