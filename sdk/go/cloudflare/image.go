// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewImage(ctx, "example_image", &cloudflare.ImageArgs{
//				AccountId:         pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				File:              pulumi.String{},
//				Metadata:          pulumi.String{},
//				RequireSignedUrls: pulumi.Bool(true),
//				Url:               pulumi.String("https://example.com/path/to/logo.png"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/image:Image example '<account_id>/<image_id>'
// ```
type Image struct {
	pulumi.CustomResourceState

	// Account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// An image binary data. Only needed when type is uploading a file.
	File pulumi.StringPtrOutput `pulumi:"file"`
	// Image file name.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	Meta pulumi.StringOutput `pulumi:"meta"`
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls pulumi.BoolOutput `pulumi:"requireSignedUrls"`
	// When the media item was uploaded.
	Uploaded pulumi.StringOutput `pulumi:"uploaded"`
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// Object specifying available variants for an image.
	Variants pulumi.StringArrayOutput `pulumi:"variants"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("cloudflare:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("cloudflare:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// Account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// An image binary data. Only needed when type is uploading a file.
	File *string `pulumi:"file"`
	// Image file name.
	Filename *string `pulumi:"filename"`
	// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	Meta *string `pulumi:"meta"`
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata *string `pulumi:"metadata"`
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls *bool `pulumi:"requireSignedUrls"`
	// When the media item was uploaded.
	Uploaded *string `pulumi:"uploaded"`
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	Url *string `pulumi:"url"`
	// Object specifying available variants for an image.
	Variants []string `pulumi:"variants"`
}

type ImageState struct {
	// Account identifier tag.
	AccountId pulumi.StringPtrInput
	// An image binary data. Only needed when type is uploading a file.
	File pulumi.StringPtrInput
	// Image file name.
	Filename pulumi.StringPtrInput
	// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
	Meta pulumi.StringPtrInput
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata pulumi.StringPtrInput
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls pulumi.BoolPtrInput
	// When the media item was uploaded.
	Uploaded pulumi.StringPtrInput
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	Url pulumi.StringPtrInput
	// Object specifying available variants for an image.
	Variants pulumi.StringArrayInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// An image binary data. Only needed when type is uploading a file.
	File *string `pulumi:"file"`
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata *string `pulumi:"metadata"`
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls *bool `pulumi:"requireSignedUrls"`
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput
	// An image binary data. Only needed when type is uploading a file.
	File pulumi.StringPtrInput
	// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
	Metadata pulumi.StringPtrInput
	// Indicates whether the image requires a signature token for the access.
	RequireSignedUrls pulumi.BoolPtrInput
	// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
	Url pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// Account identifier tag.
func (o ImageOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// An image binary data. Only needed when type is uploading a file.
func (o ImageOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.File }).(pulumi.StringPtrOutput)
}

// Image file name.
func (o ImageOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
func (o ImageOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Meta }).(pulumi.StringOutput)
}

// User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
func (o ImageOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Indicates whether the image requires a signature token for the access.
func (o ImageOutput) RequireSignedUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.RequireSignedUrls }).(pulumi.BoolOutput)
}

// When the media item was uploaded.
func (o ImageOutput) Uploaded() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Uploaded }).(pulumi.StringOutput)
}

// A URL to fetch an image from origin. Only needed when type is uploading from a URL.
func (o ImageOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// Object specifying available variants for an image.
func (o ImageOutput) Variants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.Variants }).(pulumi.StringArrayOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
