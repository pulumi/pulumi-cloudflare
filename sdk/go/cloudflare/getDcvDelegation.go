// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve the DCV Delegation unique identifier for a zone.
func GetDcvDelegation(ctx *pulumi.Context, args *GetDcvDelegationArgs, opts ...pulumi.InvokeOption) (*GetDcvDelegationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDcvDelegationResult
	err := ctx.Invoke("cloudflare:index/getDcvDelegation:getDcvDelegation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDcvDelegation.
type GetDcvDelegationArgs struct {
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getDcvDelegation.
type GetDcvDelegationResult struct {
	// The DCV Delegation hostname
	Hostname string `pulumi:"hostname"`
	// The DCV Delegation unique identifier
	Id string `pulumi:"id"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

func GetDcvDelegationOutput(ctx *pulumi.Context, args GetDcvDelegationOutputArgs, opts ...pulumi.InvokeOption) GetDcvDelegationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDcvDelegationResultOutput, error) {
			args := v.(GetDcvDelegationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetDcvDelegationResult
			secret, err := ctx.InvokePackageRaw("cloudflare:index/getDcvDelegation:getDcvDelegation", args, &rv, "", opts...)
			if err != nil {
				return GetDcvDelegationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetDcvDelegationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetDcvDelegationResultOutput), nil
			}
			return output, nil
		}).(GetDcvDelegationResultOutput)
}

// A collection of arguments for invoking getDcvDelegation.
type GetDcvDelegationOutputArgs struct {
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetDcvDelegationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDcvDelegationArgs)(nil)).Elem()
}

// A collection of values returned by getDcvDelegation.
type GetDcvDelegationResultOutput struct{ *pulumi.OutputState }

func (GetDcvDelegationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDcvDelegationResult)(nil)).Elem()
}

func (o GetDcvDelegationResultOutput) ToGetDcvDelegationResultOutput() GetDcvDelegationResultOutput {
	return o
}

func (o GetDcvDelegationResultOutput) ToGetDcvDelegationResultOutputWithContext(ctx context.Context) GetDcvDelegationResultOutput {
	return o
}

// The DCV Delegation hostname
func (o GetDcvDelegationResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcvDelegationResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The DCV Delegation unique identifier
func (o GetDcvDelegationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcvDelegationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource.
func (o GetDcvDelegationResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcvDelegationResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDcvDelegationResultOutput{})
}
