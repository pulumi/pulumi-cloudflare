// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the cloudflare package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// Configure API client to always use that account
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Configure the base path used by the API client
	ApiBasePath pulumi.StringPtrOutput `pulumi:"apiBasePath"`
	// Configure the hostname used by the API client
	ApiHostname pulumi.StringPtrOutput `pulumi:"apiHostname"`
	// The API key for operations.
	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// The API Token for operations.
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// A special Cloudflare API key good for a restricted set of endpoints
	ApiUserServiceKey pulumi.StringPtrOutput `pulumi:"apiUserServiceKey"`
	// A registered Cloudflare email address
	Email pulumi.StringPtrOutput `pulumi:"email"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.ApiClientLogging == nil {
		args.ApiClientLogging = pulumi.BoolPtr(getEnvOrDefault(false, parseEnvBool, "CLOUDFLARE_API_CLIENT_LOGGING").(bool))
	}
	if args.MaxBackoff == nil {
		args.MaxBackoff = pulumi.IntPtr(getEnvOrDefault(30, parseEnvInt, "CLOUDFLARE_MAX_BACKOFF").(int))
	}
	if args.MinBackoff == nil {
		args.MinBackoff = pulumi.IntPtr(getEnvOrDefault(1, parseEnvInt, "CLOUDFLARE_MIN_BACKOFF").(int))
	}
	if args.Retries == nil {
		args.Retries = pulumi.IntPtr(getEnvOrDefault(3, parseEnvInt, "CLOUDFLARE_RETRIES").(int))
	}
	if args.Rps == nil {
		args.Rps = pulumi.IntPtr(getEnvOrDefault(4, parseEnvInt, "CLOUDFLARE_RPS").(int))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:cloudflare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Configure API client to always use that account
	AccountId *string `pulumi:"accountId"`
	// Configure the base path used by the API client
	ApiBasePath *string `pulumi:"apiBasePath"`
	// Whether to print logs from the API client (using the default log library logger)
	ApiClientLogging *bool `pulumi:"apiClientLogging"`
	// Configure the hostname used by the API client
	ApiHostname *string `pulumi:"apiHostname"`
	// The API key for operations.
	ApiKey *string `pulumi:"apiKey"`
	// The API Token for operations.
	ApiToken *string `pulumi:"apiToken"`
	// A special Cloudflare API key good for a restricted set of endpoints
	ApiUserServiceKey *string `pulumi:"apiUserServiceKey"`
	// A registered Cloudflare email address
	Email *string `pulumi:"email"`
	// Maximum backoff period in seconds after failed API calls
	MaxBackoff *int `pulumi:"maxBackoff"`
	// Minimum backoff period in seconds after failed API calls
	MinBackoff *int `pulumi:"minBackoff"`
	// Maximum number of retries to perform when an API request fails
	Retries *int `pulumi:"retries"`
	// RPS limit to apply when making calls to the API
	Rps *int `pulumi:"rps"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Configure API client to always use that account
	AccountId pulumi.StringPtrInput
	// Configure the base path used by the API client
	ApiBasePath pulumi.StringPtrInput
	// Whether to print logs from the API client (using the default log library logger)
	ApiClientLogging pulumi.BoolPtrInput
	// Configure the hostname used by the API client
	ApiHostname pulumi.StringPtrInput
	// The API key for operations.
	ApiKey pulumi.StringPtrInput
	// The API Token for operations.
	ApiToken pulumi.StringPtrInput
	// A special Cloudflare API key good for a restricted set of endpoints
	ApiUserServiceKey pulumi.StringPtrInput
	// A registered Cloudflare email address
	Email pulumi.StringPtrInput
	// Maximum backoff period in seconds after failed API calls
	MaxBackoff pulumi.IntPtrInput
	// Minimum backoff period in seconds after failed API calls
	MinBackoff pulumi.IntPtrInput
	// Maximum number of retries to perform when an API request fails
	Retries pulumi.IntPtrInput
	// RPS limit to apply when making calls to the API
	Rps pulumi.IntPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *Provider) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderPtrInput interface {
	pulumi.Input

	ToProviderPtrOutput() ProviderPtrOutput
	ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput
}

type providerPtrType ProviderArgs

func (*providerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (i *providerPtrType) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *providerPtrType) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o.ToProviderPtrOutputWithContext(context.Background())
}

func (o ProviderOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Provider) *Provider {
		return &v
	}).(ProviderPtrOutput)
}

type ProviderPtrOutput struct{ *pulumi.OutputState }

func (ProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (o ProviderPtrOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) Elem() ProviderOutput {
	return o.ApplyT(func(v *Provider) Provider {
		if v != nil {
			return *v
		}
		var ret Provider
		return ret
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderPtrInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderPtrOutput{})
}
