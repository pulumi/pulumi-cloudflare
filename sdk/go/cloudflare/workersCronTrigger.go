// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Worker Cron Triggers allow users to map a cron expression to a Worker script
// using a `ScheduledEvent` listener that enables Workers to be executed on a
// schedule. Worker Cron Triggers are ideal for running periodic jobs for
// maintenance or calling third-party APIs to collect up-to-date data.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi-std/sdk/go/std"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			invokeFile, err := std.File(ctx, &std.FileArgs{
//				Input: "path/to/my.js",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleScript, err := cloudflare.NewWorkersScript(ctx, "example_script", &cloudflare.WorkersScriptArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("example-script"),
//				Content:   pulumi.String(invokeFile.Result),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewWorkersCronTrigger(ctx, "example_trigger", &cloudflare.WorkersCronTriggerArgs{
//				AccountId:  pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				ScriptName: exampleScript.Name,
//				Schedules: pulumi.StringArray{
//					pulumi.String("*/5 * * * *"),
//					pulumi.String("10 7 * * mon-fri"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersCronTrigger:WorkersCronTrigger example <account_id>/<script_name>
// ```
type WorkersCronTrigger struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Cron expressions to execute the Worker script.
	Schedules pulumi.StringArrayOutput `pulumi:"schedules"`
	// Worker script to target for the schedules.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
}

// NewWorkersCronTrigger registers a new resource with the given unique name, arguments, and options.
func NewWorkersCronTrigger(ctx *pulumi.Context,
	name string, args *WorkersCronTriggerArgs, opts ...pulumi.ResourceOption) (*WorkersCronTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Schedules == nil {
		return nil, errors.New("invalid value for required argument 'Schedules'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersCronTrigger
	err := ctx.RegisterResource("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersCronTrigger gets an existing WorkersCronTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersCronTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersCronTriggerState, opts ...pulumi.ResourceOption) (*WorkersCronTrigger, error) {
	var resource WorkersCronTrigger
	err := ctx.ReadResource("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersCronTrigger resources.
type workersCronTriggerState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// Cron expressions to execute the Worker script.
	Schedules []string `pulumi:"schedules"`
	// Worker script to target for the schedules.
	ScriptName *string `pulumi:"scriptName"`
}

type WorkersCronTriggerState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// Cron expressions to execute the Worker script.
	Schedules pulumi.StringArrayInput
	// Worker script to target for the schedules.
	ScriptName pulumi.StringPtrInput
}

func (WorkersCronTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersCronTriggerState)(nil)).Elem()
}

type workersCronTriggerArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// Cron expressions to execute the Worker script.
	Schedules []string `pulumi:"schedules"`
	// Worker script to target for the schedules.
	ScriptName string `pulumi:"scriptName"`
}

// The set of arguments for constructing a WorkersCronTrigger resource.
type WorkersCronTriggerArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// Cron expressions to execute the Worker script.
	Schedules pulumi.StringArrayInput
	// Worker script to target for the schedules.
	ScriptName pulumi.StringInput
}

func (WorkersCronTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersCronTriggerArgs)(nil)).Elem()
}

type WorkersCronTriggerInput interface {
	pulumi.Input

	ToWorkersCronTriggerOutput() WorkersCronTriggerOutput
	ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput
}

func (*WorkersCronTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersCronTrigger)(nil)).Elem()
}

func (i *WorkersCronTrigger) ToWorkersCronTriggerOutput() WorkersCronTriggerOutput {
	return i.ToWorkersCronTriggerOutputWithContext(context.Background())
}

func (i *WorkersCronTrigger) ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerOutput)
}

// WorkersCronTriggerArrayInput is an input type that accepts WorkersCronTriggerArray and WorkersCronTriggerArrayOutput values.
// You can construct a concrete instance of `WorkersCronTriggerArrayInput` via:
//
//	WorkersCronTriggerArray{ WorkersCronTriggerArgs{...} }
type WorkersCronTriggerArrayInput interface {
	pulumi.Input

	ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput
	ToWorkersCronTriggerArrayOutputWithContext(context.Context) WorkersCronTriggerArrayOutput
}

type WorkersCronTriggerArray []WorkersCronTriggerInput

func (WorkersCronTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersCronTrigger)(nil)).Elem()
}

func (i WorkersCronTriggerArray) ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput {
	return i.ToWorkersCronTriggerArrayOutputWithContext(context.Background())
}

func (i WorkersCronTriggerArray) ToWorkersCronTriggerArrayOutputWithContext(ctx context.Context) WorkersCronTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerArrayOutput)
}

// WorkersCronTriggerMapInput is an input type that accepts WorkersCronTriggerMap and WorkersCronTriggerMapOutput values.
// You can construct a concrete instance of `WorkersCronTriggerMapInput` via:
//
//	WorkersCronTriggerMap{ "key": WorkersCronTriggerArgs{...} }
type WorkersCronTriggerMapInput interface {
	pulumi.Input

	ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput
	ToWorkersCronTriggerMapOutputWithContext(context.Context) WorkersCronTriggerMapOutput
}

type WorkersCronTriggerMap map[string]WorkersCronTriggerInput

func (WorkersCronTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersCronTrigger)(nil)).Elem()
}

func (i WorkersCronTriggerMap) ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput {
	return i.ToWorkersCronTriggerMapOutputWithContext(context.Background())
}

func (i WorkersCronTriggerMap) ToWorkersCronTriggerMapOutputWithContext(ctx context.Context) WorkersCronTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerMapOutput)
}

type WorkersCronTriggerOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerOutput) ToWorkersCronTriggerOutput() WorkersCronTriggerOutput {
	return o
}

func (o WorkersCronTriggerOutput) ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput {
	return o
}

// The account identifier to target for the resource.
func (o WorkersCronTriggerOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Cron expressions to execute the Worker script.
func (o WorkersCronTriggerOutput) Schedules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) pulumi.StringArrayOutput { return v.Schedules }).(pulumi.StringArrayOutput)
}

// Worker script to target for the schedules.
func (o WorkersCronTriggerOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

type WorkersCronTriggerArrayOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerArrayOutput) ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput {
	return o
}

func (o WorkersCronTriggerArrayOutput) ToWorkersCronTriggerArrayOutputWithContext(ctx context.Context) WorkersCronTriggerArrayOutput {
	return o
}

func (o WorkersCronTriggerArrayOutput) Index(i pulumi.IntInput) WorkersCronTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersCronTrigger {
		return vs[0].([]*WorkersCronTrigger)[vs[1].(int)]
	}).(WorkersCronTriggerOutput)
}

type WorkersCronTriggerMapOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerMapOutput) ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput {
	return o
}

func (o WorkersCronTriggerMapOutput) ToWorkersCronTriggerMapOutputWithContext(ctx context.Context) WorkersCronTriggerMapOutput {
	return o
}

func (o WorkersCronTriggerMapOutput) MapIndex(k pulumi.StringInput) WorkersCronTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersCronTrigger {
		return vs[0].(map[string]*WorkersCronTrigger)[vs[1].(string)]
	}).(WorkersCronTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerInput)(nil)).Elem(), &WorkersCronTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerArrayInput)(nil)).Elem(), WorkersCronTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerMapInput)(nil)).Elem(), WorkersCronTriggerMap{})
	pulumi.RegisterOutputType(WorkersCronTriggerOutput{})
	pulumi.RegisterOutputType(WorkersCronTriggerArrayOutput{})
	pulumi.RegisterOutputType(WorkersCronTriggerMapOutput{})
}
