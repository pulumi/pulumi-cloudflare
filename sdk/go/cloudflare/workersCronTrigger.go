// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/workersCronTrigger:WorkersCronTrigger example '<account_id>/<script_name>'
// ```
type WorkersCronTrigger struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput                   `pulumi:"accountId"`
	Schedules WorkersCronTriggerScheduleArrayOutput `pulumi:"schedules"`
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
}

// NewWorkersCronTrigger registers a new resource with the given unique name, arguments, and options.
func NewWorkersCronTrigger(ctx *pulumi.Context,
	name string, args *WorkersCronTriggerArgs, opts ...pulumi.ResourceOption) (*WorkersCronTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Schedules == nil {
		return nil, errors.New("invalid value for required argument 'Schedules'")
	}
	if args.ScriptName == nil {
		return nil, errors.New("invalid value for required argument 'ScriptName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/workerCronTrigger:WorkerCronTrigger"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkersCronTrigger
	err := ctx.RegisterResource("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkersCronTrigger gets an existing WorkersCronTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkersCronTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkersCronTriggerState, opts ...pulumi.ResourceOption) (*WorkersCronTrigger, error) {
	var resource WorkersCronTrigger
	err := ctx.ReadResource("cloudflare:index/workersCronTrigger:WorkersCronTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkersCronTrigger resources.
type workersCronTriggerState struct {
	// Identifier
	AccountId *string                      `pulumi:"accountId"`
	Schedules []WorkersCronTriggerSchedule `pulumi:"schedules"`
	// Name of the script, used in URLs and route configuration.
	ScriptName *string `pulumi:"scriptName"`
}

type WorkersCronTriggerState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	Schedules WorkersCronTriggerScheduleArrayInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringPtrInput
}

func (WorkersCronTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*workersCronTriggerState)(nil)).Elem()
}

type workersCronTriggerArgs struct {
	// Identifier
	AccountId string                       `pulumi:"accountId"`
	Schedules []WorkersCronTriggerSchedule `pulumi:"schedules"`
	// Name of the script, used in URLs and route configuration.
	ScriptName string `pulumi:"scriptName"`
}

// The set of arguments for constructing a WorkersCronTrigger resource.
type WorkersCronTriggerArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	Schedules WorkersCronTriggerScheduleArrayInput
	// Name of the script, used in URLs and route configuration.
	ScriptName pulumi.StringInput
}

func (WorkersCronTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workersCronTriggerArgs)(nil)).Elem()
}

type WorkersCronTriggerInput interface {
	pulumi.Input

	ToWorkersCronTriggerOutput() WorkersCronTriggerOutput
	ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput
}

func (*WorkersCronTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersCronTrigger)(nil)).Elem()
}

func (i *WorkersCronTrigger) ToWorkersCronTriggerOutput() WorkersCronTriggerOutput {
	return i.ToWorkersCronTriggerOutputWithContext(context.Background())
}

func (i *WorkersCronTrigger) ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerOutput)
}

// WorkersCronTriggerArrayInput is an input type that accepts WorkersCronTriggerArray and WorkersCronTriggerArrayOutput values.
// You can construct a concrete instance of `WorkersCronTriggerArrayInput` via:
//
//	WorkersCronTriggerArray{ WorkersCronTriggerArgs{...} }
type WorkersCronTriggerArrayInput interface {
	pulumi.Input

	ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput
	ToWorkersCronTriggerArrayOutputWithContext(context.Context) WorkersCronTriggerArrayOutput
}

type WorkersCronTriggerArray []WorkersCronTriggerInput

func (WorkersCronTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersCronTrigger)(nil)).Elem()
}

func (i WorkersCronTriggerArray) ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput {
	return i.ToWorkersCronTriggerArrayOutputWithContext(context.Background())
}

func (i WorkersCronTriggerArray) ToWorkersCronTriggerArrayOutputWithContext(ctx context.Context) WorkersCronTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerArrayOutput)
}

// WorkersCronTriggerMapInput is an input type that accepts WorkersCronTriggerMap and WorkersCronTriggerMapOutput values.
// You can construct a concrete instance of `WorkersCronTriggerMapInput` via:
//
//	WorkersCronTriggerMap{ "key": WorkersCronTriggerArgs{...} }
type WorkersCronTriggerMapInput interface {
	pulumi.Input

	ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput
	ToWorkersCronTriggerMapOutputWithContext(context.Context) WorkersCronTriggerMapOutput
}

type WorkersCronTriggerMap map[string]WorkersCronTriggerInput

func (WorkersCronTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersCronTrigger)(nil)).Elem()
}

func (i WorkersCronTriggerMap) ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput {
	return i.ToWorkersCronTriggerMapOutputWithContext(context.Background())
}

func (i WorkersCronTriggerMap) ToWorkersCronTriggerMapOutputWithContext(ctx context.Context) WorkersCronTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkersCronTriggerMapOutput)
}

type WorkersCronTriggerOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerOutput) ToWorkersCronTriggerOutput() WorkersCronTriggerOutput {
	return o
}

func (o WorkersCronTriggerOutput) ToWorkersCronTriggerOutputWithContext(ctx context.Context) WorkersCronTriggerOutput {
	return o
}

// Identifier
func (o WorkersCronTriggerOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o WorkersCronTriggerOutput) Schedules() WorkersCronTriggerScheduleArrayOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) WorkersCronTriggerScheduleArrayOutput { return v.Schedules }).(WorkersCronTriggerScheduleArrayOutput)
}

// Name of the script, used in URLs and route configuration.
func (o WorkersCronTriggerOutput) ScriptName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkersCronTrigger) pulumi.StringOutput { return v.ScriptName }).(pulumi.StringOutput)
}

type WorkersCronTriggerArrayOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerArrayOutput) ToWorkersCronTriggerArrayOutput() WorkersCronTriggerArrayOutput {
	return o
}

func (o WorkersCronTriggerArrayOutput) ToWorkersCronTriggerArrayOutputWithContext(ctx context.Context) WorkersCronTriggerArrayOutput {
	return o
}

func (o WorkersCronTriggerArrayOutput) Index(i pulumi.IntInput) WorkersCronTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkersCronTrigger {
		return vs[0].([]*WorkersCronTrigger)[vs[1].(int)]
	}).(WorkersCronTriggerOutput)
}

type WorkersCronTriggerMapOutput struct{ *pulumi.OutputState }

func (WorkersCronTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkersCronTrigger)(nil)).Elem()
}

func (o WorkersCronTriggerMapOutput) ToWorkersCronTriggerMapOutput() WorkersCronTriggerMapOutput {
	return o
}

func (o WorkersCronTriggerMapOutput) ToWorkersCronTriggerMapOutputWithContext(ctx context.Context) WorkersCronTriggerMapOutput {
	return o
}

func (o WorkersCronTriggerMapOutput) MapIndex(k pulumi.StringInput) WorkersCronTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkersCronTrigger {
		return vs[0].(map[string]*WorkersCronTrigger)[vs[1].(string)]
	}).(WorkersCronTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerInput)(nil)).Elem(), &WorkersCronTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerArrayInput)(nil)).Elem(), WorkersCronTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkersCronTriggerMapInput)(nil)).Elem(), WorkersCronTriggerMap{})
	pulumi.RegisterOutputType(WorkersCronTriggerOutput{})
	pulumi.RegisterOutputType(WorkersCronTriggerArrayOutput{})
	pulumi.RegisterOutputType(WorkersCronTriggerMapOutput{})
}
