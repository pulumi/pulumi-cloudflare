// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewImageVariant(ctx, "example_image_variant", &cloudflare.ImageVariantArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Id:        "hero",
//				Options: &cloudflare.ImageVariantOptionsArgs{
//					Fit:      pulumi.String("scale-down"),
//					Height:   pulumi.Float64(768),
//					Metadata: pulumi.String("none"),
//					Width:    pulumi.Float64(1366),
//				},
//				NeverRequireSignedUrls: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/imageVariant:ImageVariant example '<account_id>/<variant_id>'
// ```
type ImageVariant struct {
	pulumi.CustomResourceState

	// Account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls pulumi.BoolOutput `pulumi:"neverRequireSignedUrls"`
	// Allows you to define image resizing sizes for different use cases.
	Options ImageVariantOptionsOutput `pulumi:"options"`
	Variant ImageVariantVariantOutput `pulumi:"variant"`
}

// NewImageVariant registers a new resource with the given unique name, arguments, and options.
func NewImageVariant(ctx *pulumi.Context,
	name string, args *ImageVariantArgs, opts ...pulumi.ResourceOption) (*ImageVariant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Options == nil {
		return nil, errors.New("invalid value for required argument 'Options'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageVariant
	err := ctx.RegisterResource("cloudflare:index/imageVariant:ImageVariant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageVariant gets an existing ImageVariant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageVariant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageVariantState, opts ...pulumi.ResourceOption) (*ImageVariant, error) {
	var resource ImageVariant
	err := ctx.ReadResource("cloudflare:index/imageVariant:ImageVariant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageVariant resources.
type imageVariantState struct {
	// Account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls *bool `pulumi:"neverRequireSignedUrls"`
	// Allows you to define image resizing sizes for different use cases.
	Options *ImageVariantOptions `pulumi:"options"`
	Variant *ImageVariantVariant `pulumi:"variant"`
}

type ImageVariantState struct {
	// Account identifier tag.
	AccountId pulumi.StringPtrInput
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls pulumi.BoolPtrInput
	// Allows you to define image resizing sizes for different use cases.
	Options ImageVariantOptionsPtrInput
	Variant ImageVariantVariantPtrInput
}

func (ImageVariantState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageVariantState)(nil)).Elem()
}

type imageVariantArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls *bool `pulumi:"neverRequireSignedUrls"`
	// Allows you to define image resizing sizes for different use cases.
	Options ImageVariantOptions `pulumi:"options"`
}

// The set of arguments for constructing a ImageVariant resource.
type ImageVariantArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput
	// Indicates whether the variant can access an image without a signature, regardless of image access control.
	NeverRequireSignedUrls pulumi.BoolPtrInput
	// Allows you to define image resizing sizes for different use cases.
	Options ImageVariantOptionsInput
}

func (ImageVariantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageVariantArgs)(nil)).Elem()
}

type ImageVariantInput interface {
	pulumi.Input

	ToImageVariantOutput() ImageVariantOutput
	ToImageVariantOutputWithContext(ctx context.Context) ImageVariantOutput
}

func (*ImageVariant) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVariant)(nil)).Elem()
}

func (i *ImageVariant) ToImageVariantOutput() ImageVariantOutput {
	return i.ToImageVariantOutputWithContext(context.Background())
}

func (i *ImageVariant) ToImageVariantOutputWithContext(ctx context.Context) ImageVariantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVariantOutput)
}

// ImageVariantArrayInput is an input type that accepts ImageVariantArray and ImageVariantArrayOutput values.
// You can construct a concrete instance of `ImageVariantArrayInput` via:
//
//	ImageVariantArray{ ImageVariantArgs{...} }
type ImageVariantArrayInput interface {
	pulumi.Input

	ToImageVariantArrayOutput() ImageVariantArrayOutput
	ToImageVariantArrayOutputWithContext(context.Context) ImageVariantArrayOutput
}

type ImageVariantArray []ImageVariantInput

func (ImageVariantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageVariant)(nil)).Elem()
}

func (i ImageVariantArray) ToImageVariantArrayOutput() ImageVariantArrayOutput {
	return i.ToImageVariantArrayOutputWithContext(context.Background())
}

func (i ImageVariantArray) ToImageVariantArrayOutputWithContext(ctx context.Context) ImageVariantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVariantArrayOutput)
}

// ImageVariantMapInput is an input type that accepts ImageVariantMap and ImageVariantMapOutput values.
// You can construct a concrete instance of `ImageVariantMapInput` via:
//
//	ImageVariantMap{ "key": ImageVariantArgs{...} }
type ImageVariantMapInput interface {
	pulumi.Input

	ToImageVariantMapOutput() ImageVariantMapOutput
	ToImageVariantMapOutputWithContext(context.Context) ImageVariantMapOutput
}

type ImageVariantMap map[string]ImageVariantInput

func (ImageVariantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageVariant)(nil)).Elem()
}

func (i ImageVariantMap) ToImageVariantMapOutput() ImageVariantMapOutput {
	return i.ToImageVariantMapOutputWithContext(context.Background())
}

func (i ImageVariantMap) ToImageVariantMapOutputWithContext(ctx context.Context) ImageVariantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVariantMapOutput)
}

type ImageVariantOutput struct{ *pulumi.OutputState }

func (ImageVariantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVariant)(nil)).Elem()
}

func (o ImageVariantOutput) ToImageVariantOutput() ImageVariantOutput {
	return o
}

func (o ImageVariantOutput) ToImageVariantOutputWithContext(ctx context.Context) ImageVariantOutput {
	return o
}

// Account identifier tag.
func (o ImageVariantOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageVariant) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Indicates whether the variant can access an image without a signature, regardless of image access control.
func (o ImageVariantOutput) NeverRequireSignedUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImageVariant) pulumi.BoolOutput { return v.NeverRequireSignedUrls }).(pulumi.BoolOutput)
}

// Allows you to define image resizing sizes for different use cases.
func (o ImageVariantOutput) Options() ImageVariantOptionsOutput {
	return o.ApplyT(func(v *ImageVariant) ImageVariantOptionsOutput { return v.Options }).(ImageVariantOptionsOutput)
}

func (o ImageVariantOutput) Variant() ImageVariantVariantOutput {
	return o.ApplyT(func(v *ImageVariant) ImageVariantVariantOutput { return v.Variant }).(ImageVariantVariantOutput)
}

type ImageVariantArrayOutput struct{ *pulumi.OutputState }

func (ImageVariantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageVariant)(nil)).Elem()
}

func (o ImageVariantArrayOutput) ToImageVariantArrayOutput() ImageVariantArrayOutput {
	return o
}

func (o ImageVariantArrayOutput) ToImageVariantArrayOutputWithContext(ctx context.Context) ImageVariantArrayOutput {
	return o
}

func (o ImageVariantArrayOutput) Index(i pulumi.IntInput) ImageVariantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageVariant {
		return vs[0].([]*ImageVariant)[vs[1].(int)]
	}).(ImageVariantOutput)
}

type ImageVariantMapOutput struct{ *pulumi.OutputState }

func (ImageVariantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageVariant)(nil)).Elem()
}

func (o ImageVariantMapOutput) ToImageVariantMapOutput() ImageVariantMapOutput {
	return o
}

func (o ImageVariantMapOutput) ToImageVariantMapOutputWithContext(ctx context.Context) ImageVariantMapOutput {
	return o
}

func (o ImageVariantMapOutput) MapIndex(k pulumi.StringInput) ImageVariantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageVariant {
		return vs[0].(map[string]*ImageVariant)[vs[1].(string)]
	}).(ImageVariantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageVariantInput)(nil)).Elem(), &ImageVariant{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageVariantArrayInput)(nil)).Elem(), ImageVariantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageVariantMapInput)(nil)).Elem(), ImageVariantMap{})
	pulumi.RegisterOutputType(ImageVariantOutput{})
	pulumi.RegisterOutputType(ImageVariantArrayOutput{})
	pulumi.RegisterOutputType(ImageVariantMapOutput{})
}
