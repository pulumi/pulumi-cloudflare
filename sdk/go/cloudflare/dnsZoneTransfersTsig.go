// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDnsZoneTransfersTsig(ctx, "example_dns_zone_transfers_tsig", &cloudflare.DnsZoneTransfersTsigArgs{
//				AccountId: pulumi.String("01a7362d577a6c3019a474fd6f485823"),
//				Algo:      pulumi.String("hmac-sha512."),
//				Name:      pulumi.String("tsig.customer.cf."),
//				Secret:    pulumi.String("caf79a7804b04337c9c66ccd7bef9190a1e1679b5dd03d8aa10f7ad45e1a9dab92b417896c15d4d007c7c14194538d2a5d0feffdecc5a7f0e1c570cfa700837c"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig example '<account_id>/<tsig_id>'
// ```
type DnsZoneTransfersTsig struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// TSIG algorithm.
	Algo pulumi.StringOutput `pulumi:"algo"`
	// TSIG key name.
	Name pulumi.StringOutput `pulumi:"name"`
	// TSIG secret.
	Secret pulumi.StringOutput `pulumi:"secret"`
}

// NewDnsZoneTransfersTsig registers a new resource with the given unique name, arguments, and options.
func NewDnsZoneTransfersTsig(ctx *pulumi.Context,
	name string, args *DnsZoneTransfersTsigArgs, opts ...pulumi.ResourceOption) (*DnsZoneTransfersTsig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Algo == nil {
		return nil, errors.New("invalid value for required argument 'Algo'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Secret == nil {
		return nil, errors.New("invalid value for required argument 'Secret'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZoneTransfersTsig
	err := ctx.RegisterResource("cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZoneTransfersTsig gets an existing DnsZoneTransfersTsig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZoneTransfersTsig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneTransfersTsigState, opts ...pulumi.ResourceOption) (*DnsZoneTransfersTsig, error) {
	var resource DnsZoneTransfersTsig
	err := ctx.ReadResource("cloudflare:index/dnsZoneTransfersTsig:DnsZoneTransfersTsig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZoneTransfersTsig resources.
type dnsZoneTransfersTsigState struct {
	AccountId *string `pulumi:"accountId"`
	// TSIG algorithm.
	Algo *string `pulumi:"algo"`
	// TSIG key name.
	Name *string `pulumi:"name"`
	// TSIG secret.
	Secret *string `pulumi:"secret"`
}

type DnsZoneTransfersTsigState struct {
	AccountId pulumi.StringPtrInput
	// TSIG algorithm.
	Algo pulumi.StringPtrInput
	// TSIG key name.
	Name pulumi.StringPtrInput
	// TSIG secret.
	Secret pulumi.StringPtrInput
}

func (DnsZoneTransfersTsigState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersTsigState)(nil)).Elem()
}

type dnsZoneTransfersTsigArgs struct {
	AccountId string `pulumi:"accountId"`
	// TSIG algorithm.
	Algo string `pulumi:"algo"`
	// TSIG key name.
	Name string `pulumi:"name"`
	// TSIG secret.
	Secret string `pulumi:"secret"`
}

// The set of arguments for constructing a DnsZoneTransfersTsig resource.
type DnsZoneTransfersTsigArgs struct {
	AccountId pulumi.StringInput
	// TSIG algorithm.
	Algo pulumi.StringInput
	// TSIG key name.
	Name pulumi.StringInput
	// TSIG secret.
	Secret pulumi.StringInput
}

func (DnsZoneTransfersTsigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersTsigArgs)(nil)).Elem()
}

type DnsZoneTransfersTsigInput interface {
	pulumi.Input

	ToDnsZoneTransfersTsigOutput() DnsZoneTransfersTsigOutput
	ToDnsZoneTransfersTsigOutputWithContext(ctx context.Context) DnsZoneTransfersTsigOutput
}

func (*DnsZoneTransfersTsig) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersTsig)(nil)).Elem()
}

func (i *DnsZoneTransfersTsig) ToDnsZoneTransfersTsigOutput() DnsZoneTransfersTsigOutput {
	return i.ToDnsZoneTransfersTsigOutputWithContext(context.Background())
}

func (i *DnsZoneTransfersTsig) ToDnsZoneTransfersTsigOutputWithContext(ctx context.Context) DnsZoneTransfersTsigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersTsigOutput)
}

// DnsZoneTransfersTsigArrayInput is an input type that accepts DnsZoneTransfersTsigArray and DnsZoneTransfersTsigArrayOutput values.
// You can construct a concrete instance of `DnsZoneTransfersTsigArrayInput` via:
//
//	DnsZoneTransfersTsigArray{ DnsZoneTransfersTsigArgs{...} }
type DnsZoneTransfersTsigArrayInput interface {
	pulumi.Input

	ToDnsZoneTransfersTsigArrayOutput() DnsZoneTransfersTsigArrayOutput
	ToDnsZoneTransfersTsigArrayOutputWithContext(context.Context) DnsZoneTransfersTsigArrayOutput
}

type DnsZoneTransfersTsigArray []DnsZoneTransfersTsigInput

func (DnsZoneTransfersTsigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersTsig)(nil)).Elem()
}

func (i DnsZoneTransfersTsigArray) ToDnsZoneTransfersTsigArrayOutput() DnsZoneTransfersTsigArrayOutput {
	return i.ToDnsZoneTransfersTsigArrayOutputWithContext(context.Background())
}

func (i DnsZoneTransfersTsigArray) ToDnsZoneTransfersTsigArrayOutputWithContext(ctx context.Context) DnsZoneTransfersTsigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersTsigArrayOutput)
}

// DnsZoneTransfersTsigMapInput is an input type that accepts DnsZoneTransfersTsigMap and DnsZoneTransfersTsigMapOutput values.
// You can construct a concrete instance of `DnsZoneTransfersTsigMapInput` via:
//
//	DnsZoneTransfersTsigMap{ "key": DnsZoneTransfersTsigArgs{...} }
type DnsZoneTransfersTsigMapInput interface {
	pulumi.Input

	ToDnsZoneTransfersTsigMapOutput() DnsZoneTransfersTsigMapOutput
	ToDnsZoneTransfersTsigMapOutputWithContext(context.Context) DnsZoneTransfersTsigMapOutput
}

type DnsZoneTransfersTsigMap map[string]DnsZoneTransfersTsigInput

func (DnsZoneTransfersTsigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersTsig)(nil)).Elem()
}

func (i DnsZoneTransfersTsigMap) ToDnsZoneTransfersTsigMapOutput() DnsZoneTransfersTsigMapOutput {
	return i.ToDnsZoneTransfersTsigMapOutputWithContext(context.Background())
}

func (i DnsZoneTransfersTsigMap) ToDnsZoneTransfersTsigMapOutputWithContext(ctx context.Context) DnsZoneTransfersTsigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersTsigMapOutput)
}

type DnsZoneTransfersTsigOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersTsigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersTsig)(nil)).Elem()
}

func (o DnsZoneTransfersTsigOutput) ToDnsZoneTransfersTsigOutput() DnsZoneTransfersTsigOutput {
	return o
}

func (o DnsZoneTransfersTsigOutput) ToDnsZoneTransfersTsigOutputWithContext(ctx context.Context) DnsZoneTransfersTsigOutput {
	return o
}

func (o DnsZoneTransfersTsigOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersTsig) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// TSIG algorithm.
func (o DnsZoneTransfersTsigOutput) Algo() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersTsig) pulumi.StringOutput { return v.Algo }).(pulumi.StringOutput)
}

// TSIG key name.
func (o DnsZoneTransfersTsigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersTsig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// TSIG secret.
func (o DnsZoneTransfersTsigOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersTsig) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

type DnsZoneTransfersTsigArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersTsigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersTsig)(nil)).Elem()
}

func (o DnsZoneTransfersTsigArrayOutput) ToDnsZoneTransfersTsigArrayOutput() DnsZoneTransfersTsigArrayOutput {
	return o
}

func (o DnsZoneTransfersTsigArrayOutput) ToDnsZoneTransfersTsigArrayOutputWithContext(ctx context.Context) DnsZoneTransfersTsigArrayOutput {
	return o
}

func (o DnsZoneTransfersTsigArrayOutput) Index(i pulumi.IntInput) DnsZoneTransfersTsigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZoneTransfersTsig {
		return vs[0].([]*DnsZoneTransfersTsig)[vs[1].(int)]
	}).(DnsZoneTransfersTsigOutput)
}

type DnsZoneTransfersTsigMapOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersTsigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersTsig)(nil)).Elem()
}

func (o DnsZoneTransfersTsigMapOutput) ToDnsZoneTransfersTsigMapOutput() DnsZoneTransfersTsigMapOutput {
	return o
}

func (o DnsZoneTransfersTsigMapOutput) ToDnsZoneTransfersTsigMapOutputWithContext(ctx context.Context) DnsZoneTransfersTsigMapOutput {
	return o
}

func (o DnsZoneTransfersTsigMapOutput) MapIndex(k pulumi.StringInput) DnsZoneTransfersTsigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZoneTransfersTsig {
		return vs[0].(map[string]*DnsZoneTransfersTsig)[vs[1].(string)]
	}).(DnsZoneTransfersTsigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersTsigInput)(nil)).Elem(), &DnsZoneTransfersTsig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersTsigArrayInput)(nil)).Elem(), DnsZoneTransfersTsigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersTsigMapInput)(nil)).Elem(), DnsZoneTransfersTsigMap{})
	pulumi.RegisterOutputType(DnsZoneTransfersTsigOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersTsigArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersTsigMapOutput{})
}
