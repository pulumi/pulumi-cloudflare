// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupStreamLiveInput(ctx, &cloudflare.LookupStreamLiveInputArgs{
//				AccountId:           "023e105f4ecef8ad9ca31a8372d0c353",
//				LiveInputIdentifier: "66be4bf738797e01e1fca35a7bdecdcd",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStreamLiveInput(ctx *pulumi.Context, args *LookupStreamLiveInputArgs, opts ...pulumi.InvokeOption) (*LookupStreamLiveInputResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamLiveInputResult
	err := ctx.Invoke("cloudflare:index/getStreamLiveInput:getStreamLiveInput", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamLiveInput.
type LookupStreamLiveInputArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// A unique identifier for a live input.
	LiveInputIdentifier string `pulumi:"liveInputIdentifier"`
}

// A collection of values returned by getStreamLiveInput.
type LookupStreamLiveInputResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// The date and time the live input was created.
	Created string `pulumi:"created"`
	// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
	DeleteRecordingAfterDays float64 `pulumi:"deleteRecordingAfterDays"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A unique identifier for a live input.
	LiveInputIdentifier string `pulumi:"liveInputIdentifier"`
	// A user modifiable key-value store used to reference other systems of record for managing live inputs.
	Meta string `pulumi:"meta"`
	// The date and time the live input was last modified.
	Modified string `pulumi:"modified"`
	// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
	Recording GetStreamLiveInputRecording `pulumi:"recording"`
	// Details for streaming to an live input using RTMPS.
	Rtmps GetStreamLiveInputRtmps `pulumi:"rtmps"`
	// Details for playback from an live input using RTMPS.
	RtmpsPlayback GetStreamLiveInputRtmpsPlayback `pulumi:"rtmpsPlayback"`
	// Details for streaming to a live input using SRT.
	Srt GetStreamLiveInputSrt `pulumi:"srt"`
	// Details for playback from an live input using SRT.
	SrtPlayback GetStreamLiveInputSrtPlayback `pulumi:"srtPlayback"`
	// The connection status of a live input.
	Status string `pulumi:"status"`
	// A unique identifier for a live input.
	Uid string `pulumi:"uid"`
	// Details for streaming to a live input using WebRTC.
	WebRtc GetStreamLiveInputWebRtc `pulumi:"webRtc"`
	// Details for playback from a live input using WebRTC.
	WebRtcPlayback GetStreamLiveInputWebRtcPlayback `pulumi:"webRtcPlayback"`
}

func LookupStreamLiveInputOutput(ctx *pulumi.Context, args LookupStreamLiveInputOutputArgs, opts ...pulumi.InvokeOption) LookupStreamLiveInputResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamLiveInputResultOutput, error) {
			args := v.(LookupStreamLiveInputArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getStreamLiveInput:getStreamLiveInput", args, LookupStreamLiveInputResultOutput{}, options).(LookupStreamLiveInputResultOutput), nil
		}).(LookupStreamLiveInputResultOutput)
}

// A collection of arguments for invoking getStreamLiveInput.
type LookupStreamLiveInputOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// A unique identifier for a live input.
	LiveInputIdentifier pulumi.StringInput `pulumi:"liveInputIdentifier"`
}

func (LookupStreamLiveInputOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamLiveInputArgs)(nil)).Elem()
}

// A collection of values returned by getStreamLiveInput.
type LookupStreamLiveInputResultOutput struct{ *pulumi.OutputState }

func (LookupStreamLiveInputResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamLiveInputResult)(nil)).Elem()
}

func (o LookupStreamLiveInputResultOutput) ToLookupStreamLiveInputResultOutput() LookupStreamLiveInputResultOutput {
	return o
}

func (o LookupStreamLiveInputResultOutput) ToLookupStreamLiveInputResultOutputWithContext(ctx context.Context) LookupStreamLiveInputResultOutput {
	return o
}

// Identifier
func (o LookupStreamLiveInputResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The date and time the live input was created.
func (o LookupStreamLiveInputResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Created }).(pulumi.StringOutput)
}

// Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
func (o LookupStreamLiveInputResultOutput) DeleteRecordingAfterDays() pulumi.Float64Output {
	return o.ApplyT(func(v LookupStreamLiveInputResult) float64 { return v.DeleteRecordingAfterDays }).(pulumi.Float64Output)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStreamLiveInputResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Id }).(pulumi.StringOutput)
}

// A unique identifier for a live input.
func (o LookupStreamLiveInputResultOutput) LiveInputIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.LiveInputIdentifier }).(pulumi.StringOutput)
}

// A user modifiable key-value store used to reference other systems of record for managing live inputs.
func (o LookupStreamLiveInputResultOutput) Meta() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Meta }).(pulumi.StringOutput)
}

// The date and time the live input was last modified.
func (o LookupStreamLiveInputResultOutput) Modified() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Modified }).(pulumi.StringOutput)
}

// Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
func (o LookupStreamLiveInputResultOutput) Recording() GetStreamLiveInputRecordingOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputRecording { return v.Recording }).(GetStreamLiveInputRecordingOutput)
}

// Details for streaming to an live input using RTMPS.
func (o LookupStreamLiveInputResultOutput) Rtmps() GetStreamLiveInputRtmpsOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputRtmps { return v.Rtmps }).(GetStreamLiveInputRtmpsOutput)
}

// Details for playback from an live input using RTMPS.
func (o LookupStreamLiveInputResultOutput) RtmpsPlayback() GetStreamLiveInputRtmpsPlaybackOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputRtmpsPlayback { return v.RtmpsPlayback }).(GetStreamLiveInputRtmpsPlaybackOutput)
}

// Details for streaming to a live input using SRT.
func (o LookupStreamLiveInputResultOutput) Srt() GetStreamLiveInputSrtOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputSrt { return v.Srt }).(GetStreamLiveInputSrtOutput)
}

// Details for playback from an live input using SRT.
func (o LookupStreamLiveInputResultOutput) SrtPlayback() GetStreamLiveInputSrtPlaybackOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputSrtPlayback { return v.SrtPlayback }).(GetStreamLiveInputSrtPlaybackOutput)
}

// The connection status of a live input.
func (o LookupStreamLiveInputResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Status }).(pulumi.StringOutput)
}

// A unique identifier for a live input.
func (o LookupStreamLiveInputResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Details for streaming to a live input using WebRTC.
func (o LookupStreamLiveInputResultOutput) WebRtc() GetStreamLiveInputWebRtcOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputWebRtc { return v.WebRtc }).(GetStreamLiveInputWebRtcOutput)
}

// Details for playback from a live input using WebRTC.
func (o LookupStreamLiveInputResultOutput) WebRtcPlayback() GetStreamLiveInputWebRtcPlaybackOutput {
	return o.ApplyT(func(v LookupStreamLiveInputResult) GetStreamLiveInputWebRtcPlayback { return v.WebRtcPlayback }).(GetStreamLiveInputWebRtcPlaybackOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamLiveInputResultOutput{})
}
