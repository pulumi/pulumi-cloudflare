// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Access Identity Provider resource. Identity
// Providers are used as an authentication or authorisation source
// within Access.
//
// > It's required that an `accountId` or `zoneId` is provided and in
//
//	most cases using either is fine. However, if you're using a scoped
//	access token, you must provide the argument that matches the token's
//	scope. For example, an access token that is scoped to the "example.com"
//	zone needs to use the `zoneId` argument.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// one time pin
//			_, err := cloudflare.NewZeroTrustAccessIdentityProvider(ctx, "pin_login", &cloudflare.ZeroTrustAccessIdentityProviderArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("PIN login"),
//				Type:      pulumi.String("onetimepin"),
//			})
//			if err != nil {
//				return err
//			}
//			// oauth
//			_, err = cloudflare.NewZeroTrustAccessIdentityProvider(ctx, "github_oauth", &cloudflare.ZeroTrustAccessIdentityProviderArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("GitHub OAuth"),
//				Type:      pulumi.String("github"),
//				Configs: cloudflare.ZeroTrustAccessIdentityProviderConfigArray{
//					&cloudflare.ZeroTrustAccessIdentityProviderConfigArgs{
//						ClientId:     pulumi.String("example"),
//						ClientSecret: pulumi.String("secret_key"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// saml
//			_, err = cloudflare.NewZeroTrustAccessIdentityProvider(ctx, "jumpcloud_saml", &cloudflare.ZeroTrustAccessIdentityProviderArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("JumpCloud SAML"),
//				Type:      pulumi.String("saml"),
//				Configs: cloudflare.ZeroTrustAccessIdentityProviderConfigArray{
//					&cloudflare.ZeroTrustAccessIdentityProviderConfigArgs{
//						IssuerUrl:    pulumi.String("jumpcloud"),
//						SsoTargetUrl: pulumi.String("https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess"),
//						Attributes: pulumi.StringArray{
//							pulumi.String("email"),
//							pulumi.String("username"),
//						},
//						SignRequest:   pulumi.Bool(false),
//						IdpPublicCert: pulumi.String("MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg\nuTnQyuOqPuHbnN83d/2l1NSYKCbHt24o"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// okta
//			_, err = cloudflare.NewZeroTrustAccessIdentityProvider(ctx, "okta", &cloudflare.ZeroTrustAccessIdentityProviderArgs{
//				AccountId: pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:      pulumi.String("Okta"),
//				Type:      pulumi.String("okta"),
//				Configs: cloudflare.ZeroTrustAccessIdentityProviderConfigArray{
//					&cloudflare.ZeroTrustAccessIdentityProviderConfigArgs{
//						ClientId:     pulumi.String("example"),
//						ClientSecret: pulumi.String("secret_key"),
//						ApiToken:     pulumi.String("okta_api_token"),
//						OktaAccount:  pulumi.String("https://example.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider example <account_id>/<identity_provider_id>
// ```
type ZeroTrustAccessIdentityProvider struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Configs ZeroTrustAccessIdentityProviderConfigArrayOutput `pulumi:"configs"`
	// Friendly name of the Access Identity Provider configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration for SCIM settings for a given IDP.
	ScimConfigs ZeroTrustAccessIdentityProviderScimConfigArrayOutput `pulumi:"scimConfigs"`
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewZeroTrustAccessIdentityProvider registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustAccessIdentityProvider(ctx *pulumi.Context,
	name string, args *ZeroTrustAccessIdentityProviderArgs, opts ...pulumi.ResourceOption) (*ZeroTrustAccessIdentityProvider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustAccessIdentityProvider
	err := ctx.RegisterResource("cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustAccessIdentityProvider gets an existing ZeroTrustAccessIdentityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustAccessIdentityProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustAccessIdentityProviderState, opts ...pulumi.ResourceOption) (*ZeroTrustAccessIdentityProvider, error) {
	var resource ZeroTrustAccessIdentityProvider
	err := ctx.ReadResource("cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustAccessIdentityProvider resources.
type zeroTrustAccessIdentityProviderState struct {
	// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Configs []ZeroTrustAccessIdentityProviderConfig `pulumi:"configs"`
	// Friendly name of the Access Identity Provider configuration.
	Name *string `pulumi:"name"`
	// Configuration for SCIM settings for a given IDP.
	ScimConfigs []ZeroTrustAccessIdentityProviderScimConfig `pulumi:"scimConfigs"`
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type *string `pulumi:"type"`
	// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
	ZoneId *string `pulumi:"zoneId"`
}

type ZeroTrustAccessIdentityProviderState struct {
	// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Configs ZeroTrustAccessIdentityProviderConfigArrayInput
	// Friendly name of the Access Identity Provider configuration.
	Name pulumi.StringPtrInput
	// Configuration for SCIM settings for a given IDP.
	ScimConfigs ZeroTrustAccessIdentityProviderScimConfigArrayInput
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type pulumi.StringPtrInput
	// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrInput
}

func (ZeroTrustAccessIdentityProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustAccessIdentityProviderState)(nil)).Elem()
}

type zeroTrustAccessIdentityProviderArgs struct {
	// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Configs []ZeroTrustAccessIdentityProviderConfig `pulumi:"configs"`
	// Friendly name of the Access Identity Provider configuration.
	Name string `pulumi:"name"`
	// Configuration for SCIM settings for a given IDP.
	ScimConfigs []ZeroTrustAccessIdentityProviderScimConfig `pulumi:"scimConfigs"`
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type string `pulumi:"type"`
	// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZeroTrustAccessIdentityProvider resource.
type ZeroTrustAccessIdentityProviderArgs struct {
	// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
	Configs ZeroTrustAccessIdentityProviderConfigArrayInput
	// Friendly name of the Access Identity Provider configuration.
	Name pulumi.StringInput
	// Configuration for SCIM settings for a given IDP.
	ScimConfigs ZeroTrustAccessIdentityProviderScimConfigArrayInput
	// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
	Type pulumi.StringInput
	// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrInput
}

func (ZeroTrustAccessIdentityProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustAccessIdentityProviderArgs)(nil)).Elem()
}

type ZeroTrustAccessIdentityProviderInput interface {
	pulumi.Input

	ToZeroTrustAccessIdentityProviderOutput() ZeroTrustAccessIdentityProviderOutput
	ToZeroTrustAccessIdentityProviderOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderOutput
}

func (*ZeroTrustAccessIdentityProvider) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (i *ZeroTrustAccessIdentityProvider) ToZeroTrustAccessIdentityProviderOutput() ZeroTrustAccessIdentityProviderOutput {
	return i.ToZeroTrustAccessIdentityProviderOutputWithContext(context.Background())
}

func (i *ZeroTrustAccessIdentityProvider) ToZeroTrustAccessIdentityProviderOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessIdentityProviderOutput)
}

// ZeroTrustAccessIdentityProviderArrayInput is an input type that accepts ZeroTrustAccessIdentityProviderArray and ZeroTrustAccessIdentityProviderArrayOutput values.
// You can construct a concrete instance of `ZeroTrustAccessIdentityProviderArrayInput` via:
//
//	ZeroTrustAccessIdentityProviderArray{ ZeroTrustAccessIdentityProviderArgs{...} }
type ZeroTrustAccessIdentityProviderArrayInput interface {
	pulumi.Input

	ToZeroTrustAccessIdentityProviderArrayOutput() ZeroTrustAccessIdentityProviderArrayOutput
	ToZeroTrustAccessIdentityProviderArrayOutputWithContext(context.Context) ZeroTrustAccessIdentityProviderArrayOutput
}

type ZeroTrustAccessIdentityProviderArray []ZeroTrustAccessIdentityProviderInput

func (ZeroTrustAccessIdentityProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (i ZeroTrustAccessIdentityProviderArray) ToZeroTrustAccessIdentityProviderArrayOutput() ZeroTrustAccessIdentityProviderArrayOutput {
	return i.ToZeroTrustAccessIdentityProviderArrayOutputWithContext(context.Background())
}

func (i ZeroTrustAccessIdentityProviderArray) ToZeroTrustAccessIdentityProviderArrayOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessIdentityProviderArrayOutput)
}

// ZeroTrustAccessIdentityProviderMapInput is an input type that accepts ZeroTrustAccessIdentityProviderMap and ZeroTrustAccessIdentityProviderMapOutput values.
// You can construct a concrete instance of `ZeroTrustAccessIdentityProviderMapInput` via:
//
//	ZeroTrustAccessIdentityProviderMap{ "key": ZeroTrustAccessIdentityProviderArgs{...} }
type ZeroTrustAccessIdentityProviderMapInput interface {
	pulumi.Input

	ToZeroTrustAccessIdentityProviderMapOutput() ZeroTrustAccessIdentityProviderMapOutput
	ToZeroTrustAccessIdentityProviderMapOutputWithContext(context.Context) ZeroTrustAccessIdentityProviderMapOutput
}

type ZeroTrustAccessIdentityProviderMap map[string]ZeroTrustAccessIdentityProviderInput

func (ZeroTrustAccessIdentityProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (i ZeroTrustAccessIdentityProviderMap) ToZeroTrustAccessIdentityProviderMapOutput() ZeroTrustAccessIdentityProviderMapOutput {
	return i.ToZeroTrustAccessIdentityProviderMapOutputWithContext(context.Background())
}

func (i ZeroTrustAccessIdentityProviderMap) ToZeroTrustAccessIdentityProviderMapOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessIdentityProviderMapOutput)
}

type ZeroTrustAccessIdentityProviderOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessIdentityProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (o ZeroTrustAccessIdentityProviderOutput) ToZeroTrustAccessIdentityProviderOutput() ZeroTrustAccessIdentityProviderOutput {
	return o
}

func (o ZeroTrustAccessIdentityProviderOutput) ToZeroTrustAccessIdentityProviderOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderOutput {
	return o
}

// The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
func (o ZeroTrustAccessIdentityProviderOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
func (o ZeroTrustAccessIdentityProviderOutput) Configs() ZeroTrustAccessIdentityProviderConfigArrayOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) ZeroTrustAccessIdentityProviderConfigArrayOutput {
		return v.Configs
	}).(ZeroTrustAccessIdentityProviderConfigArrayOutput)
}

// Friendly name of the Access Identity Provider configuration.
func (o ZeroTrustAccessIdentityProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configuration for SCIM settings for a given IDP.
func (o ZeroTrustAccessIdentityProviderOutput) ScimConfigs() ZeroTrustAccessIdentityProviderScimConfigArrayOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) ZeroTrustAccessIdentityProviderScimConfigArrayOutput {
		return v.ScimConfigs
	}).(ZeroTrustAccessIdentityProviderScimConfigArrayOutput)
}

// The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
func (o ZeroTrustAccessIdentityProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
func (o ZeroTrustAccessIdentityProviderOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustAccessIdentityProvider) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type ZeroTrustAccessIdentityProviderArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessIdentityProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (o ZeroTrustAccessIdentityProviderArrayOutput) ToZeroTrustAccessIdentityProviderArrayOutput() ZeroTrustAccessIdentityProviderArrayOutput {
	return o
}

func (o ZeroTrustAccessIdentityProviderArrayOutput) ToZeroTrustAccessIdentityProviderArrayOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderArrayOutput {
	return o
}

func (o ZeroTrustAccessIdentityProviderArrayOutput) Index(i pulumi.IntInput) ZeroTrustAccessIdentityProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustAccessIdentityProvider {
		return vs[0].([]*ZeroTrustAccessIdentityProvider)[vs[1].(int)]
	}).(ZeroTrustAccessIdentityProviderOutput)
}

type ZeroTrustAccessIdentityProviderMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessIdentityProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustAccessIdentityProvider)(nil)).Elem()
}

func (o ZeroTrustAccessIdentityProviderMapOutput) ToZeroTrustAccessIdentityProviderMapOutput() ZeroTrustAccessIdentityProviderMapOutput {
	return o
}

func (o ZeroTrustAccessIdentityProviderMapOutput) ToZeroTrustAccessIdentityProviderMapOutputWithContext(ctx context.Context) ZeroTrustAccessIdentityProviderMapOutput {
	return o
}

func (o ZeroTrustAccessIdentityProviderMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustAccessIdentityProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustAccessIdentityProvider {
		return vs[0].(map[string]*ZeroTrustAccessIdentityProvider)[vs[1].(string)]
	}).(ZeroTrustAccessIdentityProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessIdentityProviderInput)(nil)).Elem(), &ZeroTrustAccessIdentityProvider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessIdentityProviderArrayInput)(nil)).Elem(), ZeroTrustAccessIdentityProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessIdentityProviderMapInput)(nil)).Elem(), ZeroTrustAccessIdentityProviderMap{})
	pulumi.RegisterOutputType(ZeroTrustAccessIdentityProviderOutput{})
	pulumi.RegisterOutputType(ZeroTrustAccessIdentityProviderArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustAccessIdentityProviderMapOutput{})
}
