// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zoneSetting:ZoneSetting example '<zone_id>/<setting_id>'
// ```
type ZoneSetting struct {
	pulumi.CustomResourceState

	// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
	Editable pulumi.BoolOutput `pulumi:"editable"`
	// last time this setting was modified.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// Setting name
	SettingId pulumi.StringOutput `pulumi:"settingId"`
	// Value of the zone setting.
	// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
	TimeRemaining pulumi.Float64Output `pulumi:"timeRemaining"`
	// Current value of the zone setting.
	Value pulumi.AnyOutput `pulumi:"value"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneSetting registers a new resource with the given unique name, arguments, and options.
func NewZoneSetting(ctx *pulumi.Context,
	name string, args *ZoneSettingArgs, opts ...pulumi.ResourceOption) (*ZoneSetting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingId == nil {
		return nil, errors.New("invalid value for required argument 'SettingId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneSetting
	err := ctx.RegisterResource("cloudflare:index/zoneSetting:ZoneSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneSetting gets an existing ZoneSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneSettingState, opts ...pulumi.ResourceOption) (*ZoneSetting, error) {
	var resource ZoneSetting
	err := ctx.ReadResource("cloudflare:index/zoneSetting:ZoneSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneSetting resources.
type zoneSettingState struct {
	// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
	Editable *bool `pulumi:"editable"`
	// last time this setting was modified.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// Setting name
	SettingId *string `pulumi:"settingId"`
	// Value of the zone setting.
	// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
	TimeRemaining *float64 `pulumi:"timeRemaining"`
	// Current value of the zone setting.
	Value interface{} `pulumi:"value"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneSettingState struct {
	// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
	Editable pulumi.BoolPtrInput
	// last time this setting was modified.
	ModifiedOn pulumi.StringPtrInput
	// Setting name
	SettingId pulumi.StringPtrInput
	// Value of the zone setting.
	// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
	TimeRemaining pulumi.Float64PtrInput
	// Current value of the zone setting.
	Value pulumi.Input
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (ZoneSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSettingState)(nil)).Elem()
}

type zoneSettingArgs struct {
	// Setting name
	SettingId string `pulumi:"settingId"`
	// Current value of the zone setting.
	Value interface{} `pulumi:"value"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneSetting resource.
type ZoneSettingArgs struct {
	// Setting name
	SettingId pulumi.StringInput
	// Current value of the zone setting.
	Value pulumi.Input
	// Identifier
	ZoneId pulumi.StringInput
}

func (ZoneSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneSettingArgs)(nil)).Elem()
}

type ZoneSettingInput interface {
	pulumi.Input

	ToZoneSettingOutput() ZoneSettingOutput
	ToZoneSettingOutputWithContext(ctx context.Context) ZoneSettingOutput
}

func (*ZoneSetting) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSetting)(nil)).Elem()
}

func (i *ZoneSetting) ToZoneSettingOutput() ZoneSettingOutput {
	return i.ToZoneSettingOutputWithContext(context.Background())
}

func (i *ZoneSetting) ToZoneSettingOutputWithContext(ctx context.Context) ZoneSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSettingOutput)
}

// ZoneSettingArrayInput is an input type that accepts ZoneSettingArray and ZoneSettingArrayOutput values.
// You can construct a concrete instance of `ZoneSettingArrayInput` via:
//
//	ZoneSettingArray{ ZoneSettingArgs{...} }
type ZoneSettingArrayInput interface {
	pulumi.Input

	ToZoneSettingArrayOutput() ZoneSettingArrayOutput
	ToZoneSettingArrayOutputWithContext(context.Context) ZoneSettingArrayOutput
}

type ZoneSettingArray []ZoneSettingInput

func (ZoneSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSetting)(nil)).Elem()
}

func (i ZoneSettingArray) ToZoneSettingArrayOutput() ZoneSettingArrayOutput {
	return i.ToZoneSettingArrayOutputWithContext(context.Background())
}

func (i ZoneSettingArray) ToZoneSettingArrayOutputWithContext(ctx context.Context) ZoneSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSettingArrayOutput)
}

// ZoneSettingMapInput is an input type that accepts ZoneSettingMap and ZoneSettingMapOutput values.
// You can construct a concrete instance of `ZoneSettingMapInput` via:
//
//	ZoneSettingMap{ "key": ZoneSettingArgs{...} }
type ZoneSettingMapInput interface {
	pulumi.Input

	ToZoneSettingMapOutput() ZoneSettingMapOutput
	ToZoneSettingMapOutputWithContext(context.Context) ZoneSettingMapOutput
}

type ZoneSettingMap map[string]ZoneSettingInput

func (ZoneSettingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSetting)(nil)).Elem()
}

func (i ZoneSettingMap) ToZoneSettingMapOutput() ZoneSettingMapOutput {
	return i.ToZoneSettingMapOutputWithContext(context.Background())
}

func (i ZoneSettingMap) ToZoneSettingMapOutputWithContext(ctx context.Context) ZoneSettingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneSettingMapOutput)
}

type ZoneSettingOutput struct{ *pulumi.OutputState }

func (ZoneSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneSetting)(nil)).Elem()
}

func (o ZoneSettingOutput) ToZoneSettingOutput() ZoneSettingOutput {
	return o
}

func (o ZoneSettingOutput) ToZoneSettingOutputWithContext(ctx context.Context) ZoneSettingOutput {
	return o
}

// Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
func (o ZoneSettingOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZoneSetting) pulumi.BoolOutput { return v.Editable }).(pulumi.BoolOutput)
}

// last time this setting was modified.
func (o ZoneSettingOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSetting) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Setting name
func (o ZoneSettingOutput) SettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSetting) pulumi.StringOutput { return v.SettingId }).(pulumi.StringOutput)
}

// Value of the zone setting.
// Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
func (o ZoneSettingOutput) TimeRemaining() pulumi.Float64Output {
	return o.ApplyT(func(v *ZoneSetting) pulumi.Float64Output { return v.TimeRemaining }).(pulumi.Float64Output)
}

// Current value of the zone setting.
func (o ZoneSettingOutput) Value() pulumi.AnyOutput {
	return o.ApplyT(func(v *ZoneSetting) pulumi.AnyOutput { return v.Value }).(pulumi.AnyOutput)
}

// Identifier
func (o ZoneSettingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneSetting) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneSettingArrayOutput struct{ *pulumi.OutputState }

func (ZoneSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneSetting)(nil)).Elem()
}

func (o ZoneSettingArrayOutput) ToZoneSettingArrayOutput() ZoneSettingArrayOutput {
	return o
}

func (o ZoneSettingArrayOutput) ToZoneSettingArrayOutputWithContext(ctx context.Context) ZoneSettingArrayOutput {
	return o
}

func (o ZoneSettingArrayOutput) Index(i pulumi.IntInput) ZoneSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneSetting {
		return vs[0].([]*ZoneSetting)[vs[1].(int)]
	}).(ZoneSettingOutput)
}

type ZoneSettingMapOutput struct{ *pulumi.OutputState }

func (ZoneSettingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneSetting)(nil)).Elem()
}

func (o ZoneSettingMapOutput) ToZoneSettingMapOutput() ZoneSettingMapOutput {
	return o
}

func (o ZoneSettingMapOutput) ToZoneSettingMapOutputWithContext(ctx context.Context) ZoneSettingMapOutput {
	return o
}

func (o ZoneSettingMapOutput) MapIndex(k pulumi.StringInput) ZoneSettingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneSetting {
		return vs[0].(map[string]*ZoneSetting)[vs[1].(string)]
	}).(ZoneSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSettingInput)(nil)).Elem(), &ZoneSetting{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSettingArrayInput)(nil)).Elem(), ZoneSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneSettingMapInput)(nil)).Elem(), ZoneSettingMap{})
	pulumi.RegisterOutputType(ZoneSettingOutput{})
	pulumi.RegisterOutputType(ZoneSettingArrayOutput{})
	pulumi.RegisterOutputType(ZoneSettingMapOutput{})
}
