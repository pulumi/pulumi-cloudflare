// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewDnsZoneTransfersPeer(ctx, "example_dns_zone_transfers_peer", &cloudflare.DnsZoneTransfersPeerArgs{
//				AccountId: pulumi.String("01a7362d577a6c3019a474fd6f485823"),
//				Name:      pulumi.String("my-peer-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer example '<account_id>/<peer_id>'
// ```
type DnsZoneTransfersPeer struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip pulumi.StringPtrOutput `pulumi:"ip"`
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable pulumi.BoolPtrOutput `pulumi:"ixfrEnable"`
	// The name of the peer.
	Name pulumi.StringOutput `pulumi:"name"`
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port pulumi.Float64PtrOutput `pulumi:"port"`
	// TSIG authentication will be used for zone transfer if configured.
	TsigId pulumi.StringPtrOutput `pulumi:"tsigId"`
}

// NewDnsZoneTransfersPeer registers a new resource with the given unique name, arguments, and options.
func NewDnsZoneTransfersPeer(ctx *pulumi.Context,
	name string, args *DnsZoneTransfersPeerArgs, opts ...pulumi.ResourceOption) (*DnsZoneTransfersPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsZoneTransfersPeer
	err := ctx.RegisterResource("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZoneTransfersPeer gets an existing DnsZoneTransfersPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZoneTransfersPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneTransfersPeerState, opts ...pulumi.ResourceOption) (*DnsZoneTransfersPeer, error) {
	var resource DnsZoneTransfersPeer
	err := ctx.ReadResource("cloudflare:index/dnsZoneTransfersPeer:DnsZoneTransfersPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZoneTransfersPeer resources.
type dnsZoneTransfersPeerState struct {
	AccountId *string `pulumi:"accountId"`
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip *string `pulumi:"ip"`
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable *bool `pulumi:"ixfrEnable"`
	// The name of the peer.
	Name *string `pulumi:"name"`
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port *float64 `pulumi:"port"`
	// TSIG authentication will be used for zone transfer if configured.
	TsigId *string `pulumi:"tsigId"`
}

type DnsZoneTransfersPeerState struct {
	AccountId pulumi.StringPtrInput
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip pulumi.StringPtrInput
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable pulumi.BoolPtrInput
	// The name of the peer.
	Name pulumi.StringPtrInput
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port pulumi.Float64PtrInput
	// TSIG authentication will be used for zone transfer if configured.
	TsigId pulumi.StringPtrInput
}

func (DnsZoneTransfersPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersPeerState)(nil)).Elem()
}

type dnsZoneTransfersPeerArgs struct {
	AccountId string `pulumi:"accountId"`
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip *string `pulumi:"ip"`
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable *bool `pulumi:"ixfrEnable"`
	// The name of the peer.
	Name string `pulumi:"name"`
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port *float64 `pulumi:"port"`
	// TSIG authentication will be used for zone transfer if configured.
	TsigId *string `pulumi:"tsigId"`
}

// The set of arguments for constructing a DnsZoneTransfersPeer resource.
type DnsZoneTransfersPeerArgs struct {
	AccountId pulumi.StringInput
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip pulumi.StringPtrInput
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable pulumi.BoolPtrInput
	// The name of the peer.
	Name pulumi.StringInput
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port pulumi.Float64PtrInput
	// TSIG authentication will be used for zone transfer if configured.
	TsigId pulumi.StringPtrInput
}

func (DnsZoneTransfersPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneTransfersPeerArgs)(nil)).Elem()
}

type DnsZoneTransfersPeerInput interface {
	pulumi.Input

	ToDnsZoneTransfersPeerOutput() DnsZoneTransfersPeerOutput
	ToDnsZoneTransfersPeerOutputWithContext(ctx context.Context) DnsZoneTransfersPeerOutput
}

func (*DnsZoneTransfersPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersPeer)(nil)).Elem()
}

func (i *DnsZoneTransfersPeer) ToDnsZoneTransfersPeerOutput() DnsZoneTransfersPeerOutput {
	return i.ToDnsZoneTransfersPeerOutputWithContext(context.Background())
}

func (i *DnsZoneTransfersPeer) ToDnsZoneTransfersPeerOutputWithContext(ctx context.Context) DnsZoneTransfersPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersPeerOutput)
}

// DnsZoneTransfersPeerArrayInput is an input type that accepts DnsZoneTransfersPeerArray and DnsZoneTransfersPeerArrayOutput values.
// You can construct a concrete instance of `DnsZoneTransfersPeerArrayInput` via:
//
//	DnsZoneTransfersPeerArray{ DnsZoneTransfersPeerArgs{...} }
type DnsZoneTransfersPeerArrayInput interface {
	pulumi.Input

	ToDnsZoneTransfersPeerArrayOutput() DnsZoneTransfersPeerArrayOutput
	ToDnsZoneTransfersPeerArrayOutputWithContext(context.Context) DnsZoneTransfersPeerArrayOutput
}

type DnsZoneTransfersPeerArray []DnsZoneTransfersPeerInput

func (DnsZoneTransfersPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersPeer)(nil)).Elem()
}

func (i DnsZoneTransfersPeerArray) ToDnsZoneTransfersPeerArrayOutput() DnsZoneTransfersPeerArrayOutput {
	return i.ToDnsZoneTransfersPeerArrayOutputWithContext(context.Background())
}

func (i DnsZoneTransfersPeerArray) ToDnsZoneTransfersPeerArrayOutputWithContext(ctx context.Context) DnsZoneTransfersPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersPeerArrayOutput)
}

// DnsZoneTransfersPeerMapInput is an input type that accepts DnsZoneTransfersPeerMap and DnsZoneTransfersPeerMapOutput values.
// You can construct a concrete instance of `DnsZoneTransfersPeerMapInput` via:
//
//	DnsZoneTransfersPeerMap{ "key": DnsZoneTransfersPeerArgs{...} }
type DnsZoneTransfersPeerMapInput interface {
	pulumi.Input

	ToDnsZoneTransfersPeerMapOutput() DnsZoneTransfersPeerMapOutput
	ToDnsZoneTransfersPeerMapOutputWithContext(context.Context) DnsZoneTransfersPeerMapOutput
}

type DnsZoneTransfersPeerMap map[string]DnsZoneTransfersPeerInput

func (DnsZoneTransfersPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersPeer)(nil)).Elem()
}

func (i DnsZoneTransfersPeerMap) ToDnsZoneTransfersPeerMapOutput() DnsZoneTransfersPeerMapOutput {
	return i.ToDnsZoneTransfersPeerMapOutputWithContext(context.Background())
}

func (i DnsZoneTransfersPeerMap) ToDnsZoneTransfersPeerMapOutputWithContext(ctx context.Context) DnsZoneTransfersPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneTransfersPeerMapOutput)
}

type DnsZoneTransfersPeerOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZoneTransfersPeer)(nil)).Elem()
}

func (o DnsZoneTransfersPeerOutput) ToDnsZoneTransfersPeerOutput() DnsZoneTransfersPeerOutput {
	return o
}

func (o DnsZoneTransfersPeerOutput) ToDnsZoneTransfersPeerOutputWithContext(ctx context.Context) DnsZoneTransfersPeerOutput {
	return o
}

func (o DnsZoneTransfersPeerOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
func (o DnsZoneTransfersPeerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.StringPtrOutput { return v.Ip }).(pulumi.StringPtrOutput)
}

// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
func (o DnsZoneTransfersPeerOutput) IxfrEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.BoolPtrOutput { return v.IxfrEnable }).(pulumi.BoolPtrOutput)
}

// The name of the peer.
func (o DnsZoneTransfersPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
func (o DnsZoneTransfersPeerOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.Float64PtrOutput { return v.Port }).(pulumi.Float64PtrOutput)
}

// TSIG authentication will be used for zone transfer if configured.
func (o DnsZoneTransfersPeerOutput) TsigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsZoneTransfersPeer) pulumi.StringPtrOutput { return v.TsigId }).(pulumi.StringPtrOutput)
}

type DnsZoneTransfersPeerArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZoneTransfersPeer)(nil)).Elem()
}

func (o DnsZoneTransfersPeerArrayOutput) ToDnsZoneTransfersPeerArrayOutput() DnsZoneTransfersPeerArrayOutput {
	return o
}

func (o DnsZoneTransfersPeerArrayOutput) ToDnsZoneTransfersPeerArrayOutputWithContext(ctx context.Context) DnsZoneTransfersPeerArrayOutput {
	return o
}

func (o DnsZoneTransfersPeerArrayOutput) Index(i pulumi.IntInput) DnsZoneTransfersPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZoneTransfersPeer {
		return vs[0].([]*DnsZoneTransfersPeer)[vs[1].(int)]
	}).(DnsZoneTransfersPeerOutput)
}

type DnsZoneTransfersPeerMapOutput struct{ *pulumi.OutputState }

func (DnsZoneTransfersPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZoneTransfersPeer)(nil)).Elem()
}

func (o DnsZoneTransfersPeerMapOutput) ToDnsZoneTransfersPeerMapOutput() DnsZoneTransfersPeerMapOutput {
	return o
}

func (o DnsZoneTransfersPeerMapOutput) ToDnsZoneTransfersPeerMapOutputWithContext(ctx context.Context) DnsZoneTransfersPeerMapOutput {
	return o
}

func (o DnsZoneTransfersPeerMapOutput) MapIndex(k pulumi.StringInput) DnsZoneTransfersPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZoneTransfersPeer {
		return vs[0].(map[string]*DnsZoneTransfersPeer)[vs[1].(string)]
	}).(DnsZoneTransfersPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersPeerInput)(nil)).Elem(), &DnsZoneTransfersPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersPeerArrayInput)(nil)).Elem(), DnsZoneTransfersPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneTransfersPeerMapInput)(nil)).Elem(), DnsZoneTransfersPeerMap{})
	pulumi.RegisterOutputType(DnsZoneTransfersPeerOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersPeerArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneTransfersPeerMapOutput{})
}
