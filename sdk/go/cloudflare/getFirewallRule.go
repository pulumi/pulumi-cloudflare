// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupFirewallRule(ctx, &cloudflare.LookupFirewallRuleArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//				RuleId: pulumi.StringRef("372e67954025e0ba6aaa6d586b9e0b60"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFirewallRule(ctx *pulumi.Context, args *LookupFirewallRuleArgs, opts ...pulumi.InvokeOption) (*LookupFirewallRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFirewallRuleResult
	err := ctx.Invoke("cloudflare:index/getFirewallRule:getFirewallRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirewallRule.
type LookupFirewallRuleArgs struct {
	// The unique identifier of the firewall rule.
	RuleId *string `pulumi:"ruleId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getFirewallRule.
type LookupFirewallRuleResult struct {
	// The action to apply to a matched request. The `log` action is only available on an Enterprise plan.
	// Available values: "block", "challenge", "js*challenge", "managed*challenge", "allow", "log", "bypass".
	Action string `pulumi:"action"`
	// An informative summary of the firewall rule.
	Description string `pulumi:"description"`
	// The unique identifier of the firewall rule.
	Id string `pulumi:"id"`
	// When true, indicates that the firewall rule is currently paused.
	Paused bool `pulumi:"paused"`
	// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
	Priority float64  `pulumi:"priority"`
	Products []string `pulumi:"products"`
	// A short reference tag. Allows you to select related firewall rules.
	Ref string `pulumi:"ref"`
	// The unique identifier of the firewall rule.
	RuleId *string `pulumi:"ruleId"`
	// Defines an identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupFirewallRuleOutput(ctx *pulumi.Context, args LookupFirewallRuleOutputArgs, opts ...pulumi.InvokeOption) LookupFirewallRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFirewallRuleResultOutput, error) {
			args := v.(LookupFirewallRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getFirewallRule:getFirewallRule", args, LookupFirewallRuleResultOutput{}, options).(LookupFirewallRuleResultOutput), nil
		}).(LookupFirewallRuleResultOutput)
}

// A collection of arguments for invoking getFirewallRule.
type LookupFirewallRuleOutputArgs struct {
	// The unique identifier of the firewall rule.
	RuleId pulumi.StringPtrInput `pulumi:"ruleId"`
	// Defines an identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupFirewallRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallRuleArgs)(nil)).Elem()
}

// A collection of values returned by getFirewallRule.
type LookupFirewallRuleResultOutput struct{ *pulumi.OutputState }

func (LookupFirewallRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallRuleResult)(nil)).Elem()
}

func (o LookupFirewallRuleResultOutput) ToLookupFirewallRuleResultOutput() LookupFirewallRuleResultOutput {
	return o
}

func (o LookupFirewallRuleResultOutput) ToLookupFirewallRuleResultOutputWithContext(ctx context.Context) LookupFirewallRuleResultOutput {
	return o
}

// The action to apply to a matched request. The `log` action is only available on an Enterprise plan.
// Available values: "block", "challenge", "js*challenge", "managed*challenge", "allow", "log", "bypass".
func (o LookupFirewallRuleResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) string { return v.Action }).(pulumi.StringOutput)
}

// An informative summary of the firewall rule.
func (o LookupFirewallRuleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The unique identifier of the firewall rule.
func (o LookupFirewallRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// When true, indicates that the firewall rule is currently paused.
func (o LookupFirewallRuleResultOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) bool { return v.Paused }).(pulumi.BoolOutput)
}

// The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
func (o LookupFirewallRuleResultOutput) Priority() pulumi.Float64Output {
	return o.ApplyT(func(v LookupFirewallRuleResult) float64 { return v.Priority }).(pulumi.Float64Output)
}

func (o LookupFirewallRuleResultOutput) Products() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) []string { return v.Products }).(pulumi.StringArrayOutput)
}

// A short reference tag. Allows you to select related firewall rules.
func (o LookupFirewallRuleResultOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) string { return v.Ref }).(pulumi.StringOutput)
}

// The unique identifier of the firewall rule.
func (o LookupFirewallRuleResultOutput) RuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) *string { return v.RuleId }).(pulumi.StringPtrOutput)
}

// Defines an identifier.
func (o LookupFirewallRuleResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallRuleResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFirewallRuleResultOutput{})
}
