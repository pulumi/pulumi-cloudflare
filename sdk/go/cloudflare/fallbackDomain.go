// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Fallback Domain resource. Fallback domains are
// used to ignore DNS requests to a given list of domains. These DNS
// requests will be passed back to other DNS servers configured on
// existing network interfaces on the device.
//
// ## Import
//
// Fallback Domains for default device policies must use "default" as the policy ID.
//
// ```sh
//
//	$ pulumi import cloudflare:index/fallbackDomain:FallbackDomain example <account_id>/<policy_id>
//
// ```
type FallbackDomain struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput             `pulumi:"accountId"`
	Domains   FallbackDomainDomainArrayOutput `pulumi:"domains"`
	// The settings policy for which to configure this fallback domain policy.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
}

// NewFallbackDomain registers a new resource with the given unique name, arguments, and options.
func NewFallbackDomain(ctx *pulumi.Context,
	name string, args *FallbackDomainArgs, opts ...pulumi.ResourceOption) (*FallbackDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FallbackDomain
	err := ctx.RegisterResource("cloudflare:index/fallbackDomain:FallbackDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFallbackDomain gets an existing FallbackDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFallbackDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FallbackDomainState, opts ...pulumi.ResourceOption) (*FallbackDomain, error) {
	var resource FallbackDomain
	err := ctx.ReadResource("cloudflare:index/fallbackDomain:FallbackDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FallbackDomain resources.
type fallbackDomainState struct {
	// The account identifier to target for the resource.
	AccountId *string                `pulumi:"accountId"`
	Domains   []FallbackDomainDomain `pulumi:"domains"`
	// The settings policy for which to configure this fallback domain policy.
	PolicyId *string `pulumi:"policyId"`
}

type FallbackDomainState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	Domains   FallbackDomainDomainArrayInput
	// The settings policy for which to configure this fallback domain policy.
	PolicyId pulumi.StringPtrInput
}

func (FallbackDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*fallbackDomainState)(nil)).Elem()
}

type fallbackDomainArgs struct {
	// The account identifier to target for the resource.
	AccountId string                 `pulumi:"accountId"`
	Domains   []FallbackDomainDomain `pulumi:"domains"`
	// The settings policy for which to configure this fallback domain policy.
	PolicyId *string `pulumi:"policyId"`
}

// The set of arguments for constructing a FallbackDomain resource.
type FallbackDomainArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	Domains   FallbackDomainDomainArrayInput
	// The settings policy for which to configure this fallback domain policy.
	PolicyId pulumi.StringPtrInput
}

func (FallbackDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fallbackDomainArgs)(nil)).Elem()
}

type FallbackDomainInput interface {
	pulumi.Input

	ToFallbackDomainOutput() FallbackDomainOutput
	ToFallbackDomainOutputWithContext(ctx context.Context) FallbackDomainOutput
}

func (*FallbackDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**FallbackDomain)(nil)).Elem()
}

func (i *FallbackDomain) ToFallbackDomainOutput() FallbackDomainOutput {
	return i.ToFallbackDomainOutputWithContext(context.Background())
}

func (i *FallbackDomain) ToFallbackDomainOutputWithContext(ctx context.Context) FallbackDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FallbackDomainOutput)
}

// FallbackDomainArrayInput is an input type that accepts FallbackDomainArray and FallbackDomainArrayOutput values.
// You can construct a concrete instance of `FallbackDomainArrayInput` via:
//
//	FallbackDomainArray{ FallbackDomainArgs{...} }
type FallbackDomainArrayInput interface {
	pulumi.Input

	ToFallbackDomainArrayOutput() FallbackDomainArrayOutput
	ToFallbackDomainArrayOutputWithContext(context.Context) FallbackDomainArrayOutput
}

type FallbackDomainArray []FallbackDomainInput

func (FallbackDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FallbackDomain)(nil)).Elem()
}

func (i FallbackDomainArray) ToFallbackDomainArrayOutput() FallbackDomainArrayOutput {
	return i.ToFallbackDomainArrayOutputWithContext(context.Background())
}

func (i FallbackDomainArray) ToFallbackDomainArrayOutputWithContext(ctx context.Context) FallbackDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FallbackDomainArrayOutput)
}

// FallbackDomainMapInput is an input type that accepts FallbackDomainMap and FallbackDomainMapOutput values.
// You can construct a concrete instance of `FallbackDomainMapInput` via:
//
//	FallbackDomainMap{ "key": FallbackDomainArgs{...} }
type FallbackDomainMapInput interface {
	pulumi.Input

	ToFallbackDomainMapOutput() FallbackDomainMapOutput
	ToFallbackDomainMapOutputWithContext(context.Context) FallbackDomainMapOutput
}

type FallbackDomainMap map[string]FallbackDomainInput

func (FallbackDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FallbackDomain)(nil)).Elem()
}

func (i FallbackDomainMap) ToFallbackDomainMapOutput() FallbackDomainMapOutput {
	return i.ToFallbackDomainMapOutputWithContext(context.Background())
}

func (i FallbackDomainMap) ToFallbackDomainMapOutputWithContext(ctx context.Context) FallbackDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FallbackDomainMapOutput)
}

type FallbackDomainOutput struct{ *pulumi.OutputState }

func (FallbackDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FallbackDomain)(nil)).Elem()
}

func (o FallbackDomainOutput) ToFallbackDomainOutput() FallbackDomainOutput {
	return o
}

func (o FallbackDomainOutput) ToFallbackDomainOutputWithContext(ctx context.Context) FallbackDomainOutput {
	return o
}

// The account identifier to target for the resource.
func (o FallbackDomainOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *FallbackDomain) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o FallbackDomainOutput) Domains() FallbackDomainDomainArrayOutput {
	return o.ApplyT(func(v *FallbackDomain) FallbackDomainDomainArrayOutput { return v.Domains }).(FallbackDomainDomainArrayOutput)
}

// The settings policy for which to configure this fallback domain policy.
func (o FallbackDomainOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FallbackDomain) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

type FallbackDomainArrayOutput struct{ *pulumi.OutputState }

func (FallbackDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FallbackDomain)(nil)).Elem()
}

func (o FallbackDomainArrayOutput) ToFallbackDomainArrayOutput() FallbackDomainArrayOutput {
	return o
}

func (o FallbackDomainArrayOutput) ToFallbackDomainArrayOutputWithContext(ctx context.Context) FallbackDomainArrayOutput {
	return o
}

func (o FallbackDomainArrayOutput) Index(i pulumi.IntInput) FallbackDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FallbackDomain {
		return vs[0].([]*FallbackDomain)[vs[1].(int)]
	}).(FallbackDomainOutput)
}

type FallbackDomainMapOutput struct{ *pulumi.OutputState }

func (FallbackDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FallbackDomain)(nil)).Elem()
}

func (o FallbackDomainMapOutput) ToFallbackDomainMapOutput() FallbackDomainMapOutput {
	return o
}

func (o FallbackDomainMapOutput) ToFallbackDomainMapOutputWithContext(ctx context.Context) FallbackDomainMapOutput {
	return o
}

func (o FallbackDomainMapOutput) MapIndex(k pulumi.StringInput) FallbackDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FallbackDomain {
		return vs[0].(map[string]*FallbackDomain)[vs[1].(string)]
	}).(FallbackDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FallbackDomainInput)(nil)).Elem(), &FallbackDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*FallbackDomainArrayInput)(nil)).Elem(), FallbackDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FallbackDomainMapInput)(nil)).Elem(), FallbackDomainMap{})
	pulumi.RegisterOutputType(FallbackDomainOutput{})
	pulumi.RegisterOutputType(FallbackDomainArrayOutput{})
	pulumi.RegisterOutputType(FallbackDomainMapOutput{})
}
