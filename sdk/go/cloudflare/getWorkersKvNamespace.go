// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWorkersKvNamespace(ctx, &cloudflare.LookupWorkersKvNamespaceArgs{
//				AccountId:   "023e105f4ecef8ad9ca31a8372d0c353",
//				NamespaceId: pulumi.StringRef("0f2ac74b498b48028cb68387c421e279"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWorkersKvNamespace(ctx *pulumi.Context, args *LookupWorkersKvNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupWorkersKvNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWorkersKvNamespaceResult
	err := ctx.Invoke("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWorkersKvNamespace.
type LookupWorkersKvNamespaceArgs struct {
	// Identifier.
	AccountId string                       `pulumi:"accountId"`
	Filter    *GetWorkersKvNamespaceFilter `pulumi:"filter"`
	// Namespace identifier tag.
	NamespaceId *string `pulumi:"namespaceId"`
}

// A collection of values returned by getWorkersKvNamespace.
type LookupWorkersKvNamespaceResult struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// True if new beta namespace, with additional preview features.
	Beta   bool                         `pulumi:"beta"`
	Filter *GetWorkersKvNamespaceFilter `pulumi:"filter"`
	// Namespace identifier tag.
	Id string `pulumi:"id"`
	// Namespace identifier tag.
	NamespaceId *string `pulumi:"namespaceId"`
	// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
	SupportsUrlEncoding bool `pulumi:"supportsUrlEncoding"`
	// A human-readable string name for a Namespace.
	Title string `pulumi:"title"`
}

func LookupWorkersKvNamespaceOutput(ctx *pulumi.Context, args LookupWorkersKvNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupWorkersKvNamespaceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWorkersKvNamespaceResultOutput, error) {
			args := v.(LookupWorkersKvNamespaceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWorkersKvNamespace:getWorkersKvNamespace", args, LookupWorkersKvNamespaceResultOutput{}, options).(LookupWorkersKvNamespaceResultOutput), nil
		}).(LookupWorkersKvNamespaceResultOutput)
}

// A collection of arguments for invoking getWorkersKvNamespace.
type LookupWorkersKvNamespaceOutputArgs struct {
	// Identifier.
	AccountId pulumi.StringInput                  `pulumi:"accountId"`
	Filter    GetWorkersKvNamespaceFilterPtrInput `pulumi:"filter"`
	// Namespace identifier tag.
	NamespaceId pulumi.StringPtrInput `pulumi:"namespaceId"`
}

func (LookupWorkersKvNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersKvNamespaceArgs)(nil)).Elem()
}

// A collection of values returned by getWorkersKvNamespace.
type LookupWorkersKvNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupWorkersKvNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkersKvNamespaceResult)(nil)).Elem()
}

func (o LookupWorkersKvNamespaceResultOutput) ToLookupWorkersKvNamespaceResultOutput() LookupWorkersKvNamespaceResultOutput {
	return o
}

func (o LookupWorkersKvNamespaceResultOutput) ToLookupWorkersKvNamespaceResultOutputWithContext(ctx context.Context) LookupWorkersKvNamespaceResultOutput {
	return o
}

// Identifier.
func (o LookupWorkersKvNamespaceResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// True if new beta namespace, with additional preview features.
func (o LookupWorkersKvNamespaceResultOutput) Beta() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) bool { return v.Beta }).(pulumi.BoolOutput)
}

func (o LookupWorkersKvNamespaceResultOutput) Filter() GetWorkersKvNamespaceFilterPtrOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) *GetWorkersKvNamespaceFilter { return v.Filter }).(GetWorkersKvNamespaceFilterPtrOutput)
}

// Namespace identifier tag.
func (o LookupWorkersKvNamespaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Namespace identifier tag.
func (o LookupWorkersKvNamespaceResultOutput) NamespaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) *string { return v.NamespaceId }).(pulumi.StringPtrOutput)
}

// True if keys written on the URL will be URL-decoded before storing. For example, if set to "true", a key written on the URL as "%3F" will be stored as "?".
func (o LookupWorkersKvNamespaceResultOutput) SupportsUrlEncoding() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) bool { return v.SupportsUrlEncoding }).(pulumi.BoolOutput)
}

// A human-readable string name for a Namespace.
func (o LookupWorkersKvNamespaceResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkersKvNamespaceResult) string { return v.Title }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkersKvNamespaceResultOutput{})
}
