// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewAuthenticatedOriginPulls(ctx, "example_authenticated_origin_pulls", &cloudflare.AuthenticatedOriginPullsArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Configs: cloudflare.AuthenticatedOriginPullsConfigArray{
//					&cloudflare.AuthenticatedOriginPullsConfigArgs{
//						Cert_id:  "2458ce5a-0c35-4c7f-82c7-8e9487d3ff60",
//						Enabled:  pulumi.Bool(true),
//						Hostname: pulumi.String("app.example.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AuthenticatedOriginPulls struct {
	pulumi.CustomResourceState

	// Identifier.
	CertId pulumi.StringOutput `pulumi:"certId"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	CertStatus pulumi.StringOutput `pulumi:"certStatus"`
	// The time when the certificate was updated.
	CertUpdatedAt pulumi.StringOutput `pulumi:"certUpdatedAt"`
	// The time when the certificate was uploaded.
	CertUploadedOn pulumi.StringOutput `pulumi:"certUploadedOn"`
	// The hostname certificate.
	Certificate pulumi.StringOutput                       `pulumi:"certificate"`
	Configs     AuthenticatedOriginPullsConfigArrayOutput `pulumi:"configs"`
	// The time when the certificate was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The date when the certificate expires.
	ExpiresOn pulumi.StringOutput `pulumi:"expiresOn"`
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// The hostname certificate's private key.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The serial number on the uploaded certificate.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// The type of hash used for the certificate.
	Signature pulumi.StringOutput `pulumi:"signature"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status pulumi.StringOutput `pulumi:"status"`
	// The time when the certificate was updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAuthenticatedOriginPulls registers a new resource with the given unique name, arguments, and options.
func NewAuthenticatedOriginPulls(ctx *pulumi.Context,
	name string, args *AuthenticatedOriginPullsArgs, opts ...pulumi.ResourceOption) (*AuthenticatedOriginPulls, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configs == nil {
		return nil, errors.New("invalid value for required argument 'Configs'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuthenticatedOriginPulls
	err := ctx.RegisterResource("cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticatedOriginPulls gets an existing AuthenticatedOriginPulls resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticatedOriginPulls(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticatedOriginPullsState, opts ...pulumi.ResourceOption) (*AuthenticatedOriginPulls, error) {
	var resource AuthenticatedOriginPulls
	err := ctx.ReadResource("cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticatedOriginPulls resources.
type authenticatedOriginPullsState struct {
	// Identifier.
	CertId *string `pulumi:"certId"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	CertStatus *string `pulumi:"certStatus"`
	// The time when the certificate was updated.
	CertUpdatedAt *string `pulumi:"certUpdatedAt"`
	// The time when the certificate was uploaded.
	CertUploadedOn *string `pulumi:"certUploadedOn"`
	// The hostname certificate.
	Certificate *string                          `pulumi:"certificate"`
	Configs     []AuthenticatedOriginPullsConfig `pulumi:"configs"`
	// The time when the certificate was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
	Enabled *bool `pulumi:"enabled"`
	// The date when the certificate expires.
	ExpiresOn *string `pulumi:"expiresOn"`
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname *string `pulumi:"hostname"`
	// The certificate authority that issued the certificate.
	Issuer *string `pulumi:"issuer"`
	// The hostname certificate's private key.
	PrivateKey *string `pulumi:"privateKey"`
	// The serial number on the uploaded certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// The type of hash used for the certificate.
	Signature *string `pulumi:"signature"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status *string `pulumi:"status"`
	// The time when the certificate was updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type AuthenticatedOriginPullsState struct {
	// Identifier.
	CertId pulumi.StringPtrInput
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	CertStatus pulumi.StringPtrInput
	// The time when the certificate was updated.
	CertUpdatedAt pulumi.StringPtrInput
	// The time when the certificate was uploaded.
	CertUploadedOn pulumi.StringPtrInput
	// The hostname certificate.
	Certificate pulumi.StringPtrInput
	Configs     AuthenticatedOriginPullsConfigArrayInput
	// The time when the certificate was created.
	CreatedAt pulumi.StringPtrInput
	// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
	Enabled pulumi.BoolPtrInput
	// The date when the certificate expires.
	ExpiresOn pulumi.StringPtrInput
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname pulumi.StringPtrInput
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringPtrInput
	// The hostname certificate's private key.
	PrivateKey pulumi.StringPtrInput
	// The serial number on the uploaded certificate.
	SerialNumber pulumi.StringPtrInput
	// The type of hash used for the certificate.
	Signature pulumi.StringPtrInput
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status pulumi.StringPtrInput
	// The time when the certificate was updated.
	UpdatedAt pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (AuthenticatedOriginPullsState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatedOriginPullsState)(nil)).Elem()
}

type authenticatedOriginPullsArgs struct {
	Configs []AuthenticatedOriginPullsConfig `pulumi:"configs"`
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname *string `pulumi:"hostname"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AuthenticatedOriginPulls resource.
type AuthenticatedOriginPullsArgs struct {
	Configs AuthenticatedOriginPullsConfigArrayInput
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname pulumi.StringPtrInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (AuthenticatedOriginPullsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticatedOriginPullsArgs)(nil)).Elem()
}

type AuthenticatedOriginPullsInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsOutput() AuthenticatedOriginPullsOutput
	ToAuthenticatedOriginPullsOutputWithContext(ctx context.Context) AuthenticatedOriginPullsOutput
}

func (*AuthenticatedOriginPulls) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatedOriginPulls)(nil)).Elem()
}

func (i *AuthenticatedOriginPulls) ToAuthenticatedOriginPullsOutput() AuthenticatedOriginPullsOutput {
	return i.ToAuthenticatedOriginPullsOutputWithContext(context.Background())
}

func (i *AuthenticatedOriginPulls) ToAuthenticatedOriginPullsOutputWithContext(ctx context.Context) AuthenticatedOriginPullsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsOutput)
}

// AuthenticatedOriginPullsArrayInput is an input type that accepts AuthenticatedOriginPullsArray and AuthenticatedOriginPullsArrayOutput values.
// You can construct a concrete instance of `AuthenticatedOriginPullsArrayInput` via:
//
//	AuthenticatedOriginPullsArray{ AuthenticatedOriginPullsArgs{...} }
type AuthenticatedOriginPullsArrayInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsArrayOutput() AuthenticatedOriginPullsArrayOutput
	ToAuthenticatedOriginPullsArrayOutputWithContext(context.Context) AuthenticatedOriginPullsArrayOutput
}

type AuthenticatedOriginPullsArray []AuthenticatedOriginPullsInput

func (AuthenticatedOriginPullsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticatedOriginPulls)(nil)).Elem()
}

func (i AuthenticatedOriginPullsArray) ToAuthenticatedOriginPullsArrayOutput() AuthenticatedOriginPullsArrayOutput {
	return i.ToAuthenticatedOriginPullsArrayOutputWithContext(context.Background())
}

func (i AuthenticatedOriginPullsArray) ToAuthenticatedOriginPullsArrayOutputWithContext(ctx context.Context) AuthenticatedOriginPullsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsArrayOutput)
}

// AuthenticatedOriginPullsMapInput is an input type that accepts AuthenticatedOriginPullsMap and AuthenticatedOriginPullsMapOutput values.
// You can construct a concrete instance of `AuthenticatedOriginPullsMapInput` via:
//
//	AuthenticatedOriginPullsMap{ "key": AuthenticatedOriginPullsArgs{...} }
type AuthenticatedOriginPullsMapInput interface {
	pulumi.Input

	ToAuthenticatedOriginPullsMapOutput() AuthenticatedOriginPullsMapOutput
	ToAuthenticatedOriginPullsMapOutputWithContext(context.Context) AuthenticatedOriginPullsMapOutput
}

type AuthenticatedOriginPullsMap map[string]AuthenticatedOriginPullsInput

func (AuthenticatedOriginPullsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticatedOriginPulls)(nil)).Elem()
}

func (i AuthenticatedOriginPullsMap) ToAuthenticatedOriginPullsMapOutput() AuthenticatedOriginPullsMapOutput {
	return i.ToAuthenticatedOriginPullsMapOutputWithContext(context.Background())
}

func (i AuthenticatedOriginPullsMap) ToAuthenticatedOriginPullsMapOutputWithContext(ctx context.Context) AuthenticatedOriginPullsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticatedOriginPullsMapOutput)
}

type AuthenticatedOriginPullsOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticatedOriginPulls)(nil)).Elem()
}

func (o AuthenticatedOriginPullsOutput) ToAuthenticatedOriginPullsOutput() AuthenticatedOriginPullsOutput {
	return o
}

func (o AuthenticatedOriginPullsOutput) ToAuthenticatedOriginPullsOutputWithContext(ctx context.Context) AuthenticatedOriginPullsOutput {
	return o
}

// Identifier.
func (o AuthenticatedOriginPullsOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.CertId }).(pulumi.StringOutput)
}

// Status of the certificate or the association.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o AuthenticatedOriginPullsOutput) CertStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.CertStatus }).(pulumi.StringOutput)
}

// The time when the certificate was updated.
func (o AuthenticatedOriginPullsOutput) CertUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.CertUpdatedAt }).(pulumi.StringOutput)
}

// The time when the certificate was uploaded.
func (o AuthenticatedOriginPullsOutput) CertUploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.CertUploadedOn }).(pulumi.StringOutput)
}

// The hostname certificate.
func (o AuthenticatedOriginPullsOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o AuthenticatedOriginPullsOutput) Configs() AuthenticatedOriginPullsConfigArrayOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) AuthenticatedOriginPullsConfigArrayOutput { return v.Configs }).(AuthenticatedOriginPullsConfigArrayOutput)
}

// The time when the certificate was created.
func (o AuthenticatedOriginPullsOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
func (o AuthenticatedOriginPullsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The date when the certificate expires.
func (o AuthenticatedOriginPullsOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.ExpiresOn }).(pulumi.StringOutput)
}

// The hostname on the origin for which the client certificate uploaded will be used.
func (o AuthenticatedOriginPullsOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The certificate authority that issued the certificate.
func (o AuthenticatedOriginPullsOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// The hostname certificate's private key.
func (o AuthenticatedOriginPullsOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The serial number on the uploaded certificate.
func (o AuthenticatedOriginPullsOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// The type of hash used for the certificate.
func (o AuthenticatedOriginPullsOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.Signature }).(pulumi.StringOutput)
}

// Status of the certificate or the association.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o AuthenticatedOriginPullsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The time when the certificate was updated.
func (o AuthenticatedOriginPullsOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Identifier.
func (o AuthenticatedOriginPullsOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticatedOriginPulls) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type AuthenticatedOriginPullsArrayOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticatedOriginPulls)(nil)).Elem()
}

func (o AuthenticatedOriginPullsArrayOutput) ToAuthenticatedOriginPullsArrayOutput() AuthenticatedOriginPullsArrayOutput {
	return o
}

func (o AuthenticatedOriginPullsArrayOutput) ToAuthenticatedOriginPullsArrayOutputWithContext(ctx context.Context) AuthenticatedOriginPullsArrayOutput {
	return o
}

func (o AuthenticatedOriginPullsArrayOutput) Index(i pulumi.IntInput) AuthenticatedOriginPullsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticatedOriginPulls {
		return vs[0].([]*AuthenticatedOriginPulls)[vs[1].(int)]
	}).(AuthenticatedOriginPullsOutput)
}

type AuthenticatedOriginPullsMapOutput struct{ *pulumi.OutputState }

func (AuthenticatedOriginPullsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticatedOriginPulls)(nil)).Elem()
}

func (o AuthenticatedOriginPullsMapOutput) ToAuthenticatedOriginPullsMapOutput() AuthenticatedOriginPullsMapOutput {
	return o
}

func (o AuthenticatedOriginPullsMapOutput) ToAuthenticatedOriginPullsMapOutputWithContext(ctx context.Context) AuthenticatedOriginPullsMapOutput {
	return o
}

func (o AuthenticatedOriginPullsMapOutput) MapIndex(k pulumi.StringInput) AuthenticatedOriginPullsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticatedOriginPulls {
		return vs[0].(map[string]*AuthenticatedOriginPulls)[vs[1].(string)]
	}).(AuthenticatedOriginPullsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsInput)(nil)).Elem(), &AuthenticatedOriginPulls{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsArrayInput)(nil)).Elem(), AuthenticatedOriginPullsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticatedOriginPullsMapInput)(nil)).Elem(), AuthenticatedOriginPullsMap{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsOutput{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsArrayOutput{})
	pulumi.RegisterOutputType(AuthenticatedOriginPullsMapOutput{})
}
