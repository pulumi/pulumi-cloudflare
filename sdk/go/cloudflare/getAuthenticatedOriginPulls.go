// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupAuthenticatedOriginPulls(ctx, &cloudflare.LookupAuthenticatedOriginPullsArgs{
//				ZoneId:   "023e105f4ecef8ad9ca31a8372d0c353",
//				Hostname: "app.example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuthenticatedOriginPulls(ctx *pulumi.Context, args *LookupAuthenticatedOriginPullsArgs, opts ...pulumi.InvokeOption) (*LookupAuthenticatedOriginPullsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAuthenticatedOriginPullsResult
	err := ctx.Invoke("cloudflare:index/getAuthenticatedOriginPulls:getAuthenticatedOriginPulls", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuthenticatedOriginPulls.
type LookupAuthenticatedOriginPullsArgs struct {
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname string `pulumi:"hostname"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getAuthenticatedOriginPulls.
type LookupAuthenticatedOriginPullsResult struct {
	// Identifier.
	CertId string `pulumi:"certId"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	CertStatus string `pulumi:"certStatus"`
	// The time when the certificate was updated.
	CertUpdatedAt string `pulumi:"certUpdatedAt"`
	// The time when the certificate was uploaded.
	CertUploadedOn string `pulumi:"certUploadedOn"`
	// The hostname certificate.
	Certificate string `pulumi:"certificate"`
	// The time when the certificate was created.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
	Enabled bool `pulumi:"enabled"`
	// The date when the certificate expires.
	ExpiresOn string `pulumi:"expiresOn"`
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname string `pulumi:"hostname"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The certificate authority that issued the certificate.
	Issuer string `pulumi:"issuer"`
	// The serial number on the uploaded certificate.
	SerialNumber string `pulumi:"serialNumber"`
	// The type of hash used for the certificate.
	Signature string `pulumi:"signature"`
	// Status of the certificate or the association.
	// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
	Status string `pulumi:"status"`
	// The time when the certificate was updated.
	UpdatedAt string `pulumi:"updatedAt"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

func LookupAuthenticatedOriginPullsOutput(ctx *pulumi.Context, args LookupAuthenticatedOriginPullsOutputArgs, opts ...pulumi.InvokeOption) LookupAuthenticatedOriginPullsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAuthenticatedOriginPullsResultOutput, error) {
			args := v.(LookupAuthenticatedOriginPullsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getAuthenticatedOriginPulls:getAuthenticatedOriginPulls", args, LookupAuthenticatedOriginPullsResultOutput{}, options).(LookupAuthenticatedOriginPullsResultOutput), nil
		}).(LookupAuthenticatedOriginPullsResultOutput)
}

// A collection of arguments for invoking getAuthenticatedOriginPulls.
type LookupAuthenticatedOriginPullsOutputArgs struct {
	// The hostname on the origin for which the client certificate uploaded will be used.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Identifier.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupAuthenticatedOriginPullsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatedOriginPullsArgs)(nil)).Elem()
}

// A collection of values returned by getAuthenticatedOriginPulls.
type LookupAuthenticatedOriginPullsResultOutput struct{ *pulumi.OutputState }

func (LookupAuthenticatedOriginPullsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuthenticatedOriginPullsResult)(nil)).Elem()
}

func (o LookupAuthenticatedOriginPullsResultOutput) ToLookupAuthenticatedOriginPullsResultOutput() LookupAuthenticatedOriginPullsResultOutput {
	return o
}

func (o LookupAuthenticatedOriginPullsResultOutput) ToLookupAuthenticatedOriginPullsResultOutputWithContext(ctx context.Context) LookupAuthenticatedOriginPullsResultOutput {
	return o
}

// Identifier.
func (o LookupAuthenticatedOriginPullsResultOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.CertId }).(pulumi.StringOutput)
}

// Status of the certificate or the association.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o LookupAuthenticatedOriginPullsResultOutput) CertStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.CertStatus }).(pulumi.StringOutput)
}

// The time when the certificate was updated.
func (o LookupAuthenticatedOriginPullsResultOutput) CertUpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.CertUpdatedAt }).(pulumi.StringOutput)
}

// The time when the certificate was uploaded.
func (o LookupAuthenticatedOriginPullsResultOutput) CertUploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.CertUploadedOn }).(pulumi.StringOutput)
}

// The hostname certificate.
func (o LookupAuthenticatedOriginPullsResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// The time when the certificate was created.
func (o LookupAuthenticatedOriginPullsResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
func (o LookupAuthenticatedOriginPullsResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The date when the certificate expires.
func (o LookupAuthenticatedOriginPullsResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

// The hostname on the origin for which the client certificate uploaded will be used.
func (o LookupAuthenticatedOriginPullsResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAuthenticatedOriginPullsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o LookupAuthenticatedOriginPullsResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// The serial number on the uploaded certificate.
func (o LookupAuthenticatedOriginPullsResultOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The type of hash used for the certificate.
func (o LookupAuthenticatedOriginPullsResultOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Signature }).(pulumi.StringOutput)
}

// Status of the certificate or the association.
// Available values: "initializing", "pending*deployment", "pending*deletion", "active", "deleted", "deployment*timed*out", "deletion*timed*out".
func (o LookupAuthenticatedOriginPullsResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.Status }).(pulumi.StringOutput)
}

// The time when the certificate was updated.
func (o LookupAuthenticatedOriginPullsResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Identifier.
func (o LookupAuthenticatedOriginPullsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuthenticatedOriginPullsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuthenticatedOriginPullsResultOutput{})
}
