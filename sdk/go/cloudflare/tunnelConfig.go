// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/tunnelConfig:TunnelConfig example '<account_id>/<tunnel_id>'
// ```
//
// Deprecated: cloudflare.index/tunnelconfig.TunnelConfig has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredconfig.ZeroTrustTunnelCloudflaredConfig
type TunnelConfig struct {
	pulumi.CustomResourceState

	// Identifier.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The tunnel configuration and ingress rules.
	Config    TunnelConfigConfigOutput `pulumi:"config"`
	CreatedAt pulumi.StringOutput      `pulumi:"createdAt"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	Source pulumi.StringOutput `pulumi:"source"`
	// UUID of the tunnel.
	TunnelId pulumi.StringOutput `pulumi:"tunnelId"`
	// The version of the Tunnel Configuration.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTunnelConfig registers a new resource with the given unique name, arguments, and options.
func NewTunnelConfig(ctx *pulumi.Context,
	name string, args *TunnelConfigArgs, opts ...pulumi.ResourceOption) (*TunnelConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/tunnelConfig:TunnelConfig"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TunnelConfig
	err := ctx.RegisterResource("cloudflare:index/tunnelConfig:TunnelConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelConfig gets an existing TunnelConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelConfigState, opts ...pulumi.ResourceOption) (*TunnelConfig, error) {
	var resource TunnelConfig
	err := ctx.ReadResource("cloudflare:index/tunnelConfig:TunnelConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelConfig resources.
type tunnelConfigState struct {
	// Identifier.
	AccountId *string `pulumi:"accountId"`
	// The tunnel configuration and ingress rules.
	Config    *TunnelConfigConfig `pulumi:"config"`
	CreatedAt *string             `pulumi:"createdAt"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	Source *string `pulumi:"source"`
	// UUID of the tunnel.
	TunnelId *string `pulumi:"tunnelId"`
	// The version of the Tunnel Configuration.
	Version *int `pulumi:"version"`
}

type TunnelConfigState struct {
	// Identifier.
	AccountId pulumi.StringPtrInput
	// The tunnel configuration and ingress rules.
	Config    TunnelConfigConfigPtrInput
	CreatedAt pulumi.StringPtrInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	Source pulumi.StringPtrInput
	// UUID of the tunnel.
	TunnelId pulumi.StringPtrInput
	// The version of the Tunnel Configuration.
	Version pulumi.IntPtrInput
}

func (TunnelConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelConfigState)(nil)).Elem()
}

type tunnelConfigArgs struct {
	// Identifier.
	AccountId string `pulumi:"accountId"`
	// The tunnel configuration and ingress rules.
	Config *TunnelConfigConfig `pulumi:"config"`
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	Source *string `pulumi:"source"`
	// UUID of the tunnel.
	TunnelId string `pulumi:"tunnelId"`
}

// The set of arguments for constructing a TunnelConfig resource.
type TunnelConfigArgs struct {
	// Identifier.
	AccountId pulumi.StringInput
	// The tunnel configuration and ingress rules.
	Config TunnelConfigConfigPtrInput
	// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
	// Available values: "local", "cloudflare".
	Source pulumi.StringPtrInput
	// UUID of the tunnel.
	TunnelId pulumi.StringInput
}

func (TunnelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelConfigArgs)(nil)).Elem()
}

type TunnelConfigInput interface {
	pulumi.Input

	ToTunnelConfigOutput() TunnelConfigOutput
	ToTunnelConfigOutputWithContext(ctx context.Context) TunnelConfigOutput
}

func (*TunnelConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelConfig)(nil)).Elem()
}

func (i *TunnelConfig) ToTunnelConfigOutput() TunnelConfigOutput {
	return i.ToTunnelConfigOutputWithContext(context.Background())
}

func (i *TunnelConfig) ToTunnelConfigOutputWithContext(ctx context.Context) TunnelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelConfigOutput)
}

// TunnelConfigArrayInput is an input type that accepts TunnelConfigArray and TunnelConfigArrayOutput values.
// You can construct a concrete instance of `TunnelConfigArrayInput` via:
//
//	TunnelConfigArray{ TunnelConfigArgs{...} }
type TunnelConfigArrayInput interface {
	pulumi.Input

	ToTunnelConfigArrayOutput() TunnelConfigArrayOutput
	ToTunnelConfigArrayOutputWithContext(context.Context) TunnelConfigArrayOutput
}

type TunnelConfigArray []TunnelConfigInput

func (TunnelConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelConfig)(nil)).Elem()
}

func (i TunnelConfigArray) ToTunnelConfigArrayOutput() TunnelConfigArrayOutput {
	return i.ToTunnelConfigArrayOutputWithContext(context.Background())
}

func (i TunnelConfigArray) ToTunnelConfigArrayOutputWithContext(ctx context.Context) TunnelConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelConfigArrayOutput)
}

// TunnelConfigMapInput is an input type that accepts TunnelConfigMap and TunnelConfigMapOutput values.
// You can construct a concrete instance of `TunnelConfigMapInput` via:
//
//	TunnelConfigMap{ "key": TunnelConfigArgs{...} }
type TunnelConfigMapInput interface {
	pulumi.Input

	ToTunnelConfigMapOutput() TunnelConfigMapOutput
	ToTunnelConfigMapOutputWithContext(context.Context) TunnelConfigMapOutput
}

type TunnelConfigMap map[string]TunnelConfigInput

func (TunnelConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelConfig)(nil)).Elem()
}

func (i TunnelConfigMap) ToTunnelConfigMapOutput() TunnelConfigMapOutput {
	return i.ToTunnelConfigMapOutputWithContext(context.Background())
}

func (i TunnelConfigMap) ToTunnelConfigMapOutputWithContext(ctx context.Context) TunnelConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelConfigMapOutput)
}

type TunnelConfigOutput struct{ *pulumi.OutputState }

func (TunnelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelConfig)(nil)).Elem()
}

func (o TunnelConfigOutput) ToTunnelConfigOutput() TunnelConfigOutput {
	return o
}

func (o TunnelConfigOutput) ToTunnelConfigOutputWithContext(ctx context.Context) TunnelConfigOutput {
	return o
}

// Identifier.
func (o TunnelConfigOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelConfig) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The tunnel configuration and ingress rules.
func (o TunnelConfigOutput) Config() TunnelConfigConfigOutput {
	return o.ApplyT(func(v *TunnelConfig) TunnelConfigConfigOutput { return v.Config }).(TunnelConfigConfigOutput)
}

func (o TunnelConfigOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelConfig) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel's configuration on the Zero Trust dashboard.
// Available values: "local", "cloudflare".
func (o TunnelConfigOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelConfig) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

// UUID of the tunnel.
func (o TunnelConfigOutput) TunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelConfig) pulumi.StringOutput { return v.TunnelId }).(pulumi.StringOutput)
}

// The version of the Tunnel Configuration.
func (o TunnelConfigOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TunnelConfig) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TunnelConfigArrayOutput struct{ *pulumi.OutputState }

func (TunnelConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelConfig)(nil)).Elem()
}

func (o TunnelConfigArrayOutput) ToTunnelConfigArrayOutput() TunnelConfigArrayOutput {
	return o
}

func (o TunnelConfigArrayOutput) ToTunnelConfigArrayOutputWithContext(ctx context.Context) TunnelConfigArrayOutput {
	return o
}

func (o TunnelConfigArrayOutput) Index(i pulumi.IntInput) TunnelConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TunnelConfig {
		return vs[0].([]*TunnelConfig)[vs[1].(int)]
	}).(TunnelConfigOutput)
}

type TunnelConfigMapOutput struct{ *pulumi.OutputState }

func (TunnelConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelConfig)(nil)).Elem()
}

func (o TunnelConfigMapOutput) ToTunnelConfigMapOutput() TunnelConfigMapOutput {
	return o
}

func (o TunnelConfigMapOutput) ToTunnelConfigMapOutputWithContext(ctx context.Context) TunnelConfigMapOutput {
	return o
}

func (o TunnelConfigMapOutput) MapIndex(k pulumi.StringInput) TunnelConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TunnelConfig {
		return vs[0].(map[string]*TunnelConfig)[vs[1].(string)]
	}).(TunnelConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelConfigInput)(nil)).Elem(), &TunnelConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelConfigArrayInput)(nil)).Elem(), TunnelConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelConfigMapInput)(nil)).Elem(), TunnelConfigMap{})
	pulumi.RegisterOutputType(TunnelConfigOutput{})
	pulumi.RegisterOutputType(TunnelConfigArrayOutput{})
	pulumi.RegisterOutputType(TunnelConfigMapOutput{})
}
