// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicTransitSite(ctx, "example_magic_transit_site", &cloudflare.MagicTransitSiteArgs{
//				AccountId:   pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Name:        pulumi.String("site_1"),
//				ConnectorId: pulumi.String("ac60d3d0435248289d446cedd870bcf4"),
//				Description: pulumi.String("description"),
//				HaMode:      pulumi.Bool(true),
//				Location: &cloudflare.MagicTransitSiteLocationArgs{
//					Lat: pulumi.String("37.6192"),
//					Lon: pulumi.String("122.3816"),
//				},
//				SecondaryConnectorId: pulumi.String("8d67040d3835dbcf46ce29da440dc482"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/magicTransitSite:MagicTransitSite example '<account_id>/<site_id>'
// ```
type MagicTransitSite struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Magic Connector identifier tag.
	ConnectorId pulumi.StringPtrOutput `pulumi:"connectorId"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode pulumi.BoolPtrOutput `pulumi:"haMode"`
	// Location of site in latitude and longitude.
	Location MagicTransitSiteLocationPtrOutput `pulumi:"location"`
	// The name of the site.
	Name pulumi.StringOutput `pulumi:"name"`
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId pulumi.StringPtrOutput `pulumi:"secondaryConnectorId"`
}

// NewMagicTransitSite registers a new resource with the given unique name, arguments, and options.
func NewMagicTransitSite(ctx *pulumi.Context,
	name string, args *MagicTransitSiteArgs, opts ...pulumi.ResourceOption) (*MagicTransitSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MagicTransitSite
	err := ctx.RegisterResource("cloudflare:index/magicTransitSite:MagicTransitSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMagicTransitSite gets an existing MagicTransitSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMagicTransitSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MagicTransitSiteState, opts ...pulumi.ResourceOption) (*MagicTransitSite, error) {
	var resource MagicTransitSite
	err := ctx.ReadResource("cloudflare:index/magicTransitSite:MagicTransitSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MagicTransitSite resources.
type magicTransitSiteState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// Magic Connector identifier tag.
	ConnectorId *string `pulumi:"connectorId"`
	Description *string `pulumi:"description"`
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode *bool `pulumi:"haMode"`
	// Location of site in latitude and longitude.
	Location *MagicTransitSiteLocation `pulumi:"location"`
	// The name of the site.
	Name *string `pulumi:"name"`
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId *string `pulumi:"secondaryConnectorId"`
}

type MagicTransitSiteState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// Magic Connector identifier tag.
	ConnectorId pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode pulumi.BoolPtrInput
	// Location of site in latitude and longitude.
	Location MagicTransitSiteLocationPtrInput
	// The name of the site.
	Name pulumi.StringPtrInput
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId pulumi.StringPtrInput
}

func (MagicTransitSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*magicTransitSiteState)(nil)).Elem()
}

type magicTransitSiteArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Magic Connector identifier tag.
	ConnectorId *string `pulumi:"connectorId"`
	Description *string `pulumi:"description"`
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode *bool `pulumi:"haMode"`
	// Location of site in latitude and longitude.
	Location *MagicTransitSiteLocation `pulumi:"location"`
	// The name of the site.
	Name string `pulumi:"name"`
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId *string `pulumi:"secondaryConnectorId"`
}

// The set of arguments for constructing a MagicTransitSite resource.
type MagicTransitSiteArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// Magic Connector identifier tag.
	ConnectorId pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
	HaMode pulumi.BoolPtrInput
	// Location of site in latitude and longitude.
	Location MagicTransitSiteLocationPtrInput
	// The name of the site.
	Name pulumi.StringInput
	// Magic Connector identifier tag. Used when high availability mode is on.
	SecondaryConnectorId pulumi.StringPtrInput
}

func (MagicTransitSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*magicTransitSiteArgs)(nil)).Elem()
}

type MagicTransitSiteInput interface {
	pulumi.Input

	ToMagicTransitSiteOutput() MagicTransitSiteOutput
	ToMagicTransitSiteOutputWithContext(ctx context.Context) MagicTransitSiteOutput
}

func (*MagicTransitSite) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicTransitSite)(nil)).Elem()
}

func (i *MagicTransitSite) ToMagicTransitSiteOutput() MagicTransitSiteOutput {
	return i.ToMagicTransitSiteOutputWithContext(context.Background())
}

func (i *MagicTransitSite) ToMagicTransitSiteOutputWithContext(ctx context.Context) MagicTransitSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteOutput)
}

// MagicTransitSiteArrayInput is an input type that accepts MagicTransitSiteArray and MagicTransitSiteArrayOutput values.
// You can construct a concrete instance of `MagicTransitSiteArrayInput` via:
//
//	MagicTransitSiteArray{ MagicTransitSiteArgs{...} }
type MagicTransitSiteArrayInput interface {
	pulumi.Input

	ToMagicTransitSiteArrayOutput() MagicTransitSiteArrayOutput
	ToMagicTransitSiteArrayOutputWithContext(context.Context) MagicTransitSiteArrayOutput
}

type MagicTransitSiteArray []MagicTransitSiteInput

func (MagicTransitSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicTransitSite)(nil)).Elem()
}

func (i MagicTransitSiteArray) ToMagicTransitSiteArrayOutput() MagicTransitSiteArrayOutput {
	return i.ToMagicTransitSiteArrayOutputWithContext(context.Background())
}

func (i MagicTransitSiteArray) ToMagicTransitSiteArrayOutputWithContext(ctx context.Context) MagicTransitSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteArrayOutput)
}

// MagicTransitSiteMapInput is an input type that accepts MagicTransitSiteMap and MagicTransitSiteMapOutput values.
// You can construct a concrete instance of `MagicTransitSiteMapInput` via:
//
//	MagicTransitSiteMap{ "key": MagicTransitSiteArgs{...} }
type MagicTransitSiteMapInput interface {
	pulumi.Input

	ToMagicTransitSiteMapOutput() MagicTransitSiteMapOutput
	ToMagicTransitSiteMapOutputWithContext(context.Context) MagicTransitSiteMapOutput
}

type MagicTransitSiteMap map[string]MagicTransitSiteInput

func (MagicTransitSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicTransitSite)(nil)).Elem()
}

func (i MagicTransitSiteMap) ToMagicTransitSiteMapOutput() MagicTransitSiteMapOutput {
	return i.ToMagicTransitSiteMapOutputWithContext(context.Background())
}

func (i MagicTransitSiteMap) ToMagicTransitSiteMapOutputWithContext(ctx context.Context) MagicTransitSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MagicTransitSiteMapOutput)
}

type MagicTransitSiteOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MagicTransitSite)(nil)).Elem()
}

func (o MagicTransitSiteOutput) ToMagicTransitSiteOutput() MagicTransitSiteOutput {
	return o
}

func (o MagicTransitSiteOutput) ToMagicTransitSiteOutputWithContext(ctx context.Context) MagicTransitSiteOutput {
	return o
}

// Identifier
func (o MagicTransitSiteOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Magic Connector identifier tag.
func (o MagicTransitSiteOutput) ConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.StringPtrOutput { return v.ConnectorId }).(pulumi.StringPtrOutput)
}

func (o MagicTransitSiteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
func (o MagicTransitSiteOutput) HaMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.BoolPtrOutput { return v.HaMode }).(pulumi.BoolPtrOutput)
}

// Location of site in latitude and longitude.
func (o MagicTransitSiteOutput) Location() MagicTransitSiteLocationPtrOutput {
	return o.ApplyT(func(v *MagicTransitSite) MagicTransitSiteLocationPtrOutput { return v.Location }).(MagicTransitSiteLocationPtrOutput)
}

// The name of the site.
func (o MagicTransitSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Magic Connector identifier tag. Used when high availability mode is on.
func (o MagicTransitSiteOutput) SecondaryConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MagicTransitSite) pulumi.StringPtrOutput { return v.SecondaryConnectorId }).(pulumi.StringPtrOutput)
}

type MagicTransitSiteArrayOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MagicTransitSite)(nil)).Elem()
}

func (o MagicTransitSiteArrayOutput) ToMagicTransitSiteArrayOutput() MagicTransitSiteArrayOutput {
	return o
}

func (o MagicTransitSiteArrayOutput) ToMagicTransitSiteArrayOutputWithContext(ctx context.Context) MagicTransitSiteArrayOutput {
	return o
}

func (o MagicTransitSiteArrayOutput) Index(i pulumi.IntInput) MagicTransitSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MagicTransitSite {
		return vs[0].([]*MagicTransitSite)[vs[1].(int)]
	}).(MagicTransitSiteOutput)
}

type MagicTransitSiteMapOutput struct{ *pulumi.OutputState }

func (MagicTransitSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MagicTransitSite)(nil)).Elem()
}

func (o MagicTransitSiteMapOutput) ToMagicTransitSiteMapOutput() MagicTransitSiteMapOutput {
	return o
}

func (o MagicTransitSiteMapOutput) ToMagicTransitSiteMapOutputWithContext(ctx context.Context) MagicTransitSiteMapOutput {
	return o
}

func (o MagicTransitSiteMapOutput) MapIndex(k pulumi.StringInput) MagicTransitSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MagicTransitSite {
		return vs[0].(map[string]*MagicTransitSite)[vs[1].(string)]
	}).(MagicTransitSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteInput)(nil)).Elem(), &MagicTransitSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteArrayInput)(nil)).Elem(), MagicTransitSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MagicTransitSiteMapInput)(nil)).Elem(), MagicTransitSiteMap{})
	pulumi.RegisterOutputType(MagicTransitSiteOutput{})
	pulumi.RegisterOutputType(MagicTransitSiteArrayOutput{})
	pulumi.RegisterOutputType(MagicTransitSiteMapOutput{})
}
