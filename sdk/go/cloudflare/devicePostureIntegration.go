// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cloudflare Device Posture Integration resource. Device
// posture integrations configure third-party data providers for device
// posture rules.
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/devicePostureIntegration:DevicePostureIntegration example <account_id>/<device_posture_integration_id>
//
// ```
type DevicePostureIntegration struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The device posture integration's connection authorization parameters.
	Configs    DevicePostureIntegrationConfigArrayOutput `pulumi:"configs"`
	Identifier pulumi.StringPtrOutput                    `pulumi:"identifier"`
	// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
	Interval pulumi.StringPtrOutput `pulumi:"interval"`
	// Name of the device posture integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDevicePostureIntegration registers a new resource with the given unique name, arguments, and options.
func NewDevicePostureIntegration(ctx *pulumi.Context,
	name string, args *DevicePostureIntegrationArgs, opts ...pulumi.ResourceOption) (*DevicePostureIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePostureIntegration
	err := ctx.RegisterResource("cloudflare:index/devicePostureIntegration:DevicePostureIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePostureIntegration gets an existing DevicePostureIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePostureIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePostureIntegrationState, opts ...pulumi.ResourceOption) (*DevicePostureIntegration, error) {
	var resource DevicePostureIntegration
	err := ctx.ReadResource("cloudflare:index/devicePostureIntegration:DevicePostureIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePostureIntegration resources.
type devicePostureIntegrationState struct {
	// The account identifier to target for the resource.
	AccountId *string `pulumi:"accountId"`
	// The device posture integration's connection authorization parameters.
	Configs    []DevicePostureIntegrationConfig `pulumi:"configs"`
	Identifier *string                          `pulumi:"identifier"`
	// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
	Interval *string `pulumi:"interval"`
	// Name of the device posture integration.
	Name *string `pulumi:"name"`
	// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
	Type *string `pulumi:"type"`
}

type DevicePostureIntegrationState struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringPtrInput
	// The device posture integration's connection authorization parameters.
	Configs    DevicePostureIntegrationConfigArrayInput
	Identifier pulumi.StringPtrInput
	// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
	Interval pulumi.StringPtrInput
	// Name of the device posture integration.
	Name pulumi.StringPtrInput
	// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
	Type pulumi.StringPtrInput
}

func (DevicePostureIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureIntegrationState)(nil)).Elem()
}

type devicePostureIntegrationArgs struct {
	// The account identifier to target for the resource.
	AccountId string `pulumi:"accountId"`
	// The device posture integration's connection authorization parameters.
	Configs    []DevicePostureIntegrationConfig `pulumi:"configs"`
	Identifier *string                          `pulumi:"identifier"`
	// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
	Interval *string `pulumi:"interval"`
	// Name of the device posture integration.
	Name string `pulumi:"name"`
	// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DevicePostureIntegration resource.
type DevicePostureIntegrationArgs struct {
	// The account identifier to target for the resource.
	AccountId pulumi.StringInput
	// The device posture integration's connection authorization parameters.
	Configs    DevicePostureIntegrationConfigArrayInput
	Identifier pulumi.StringPtrInput
	// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
	Interval pulumi.StringPtrInput
	// Name of the device posture integration.
	Name pulumi.StringInput
	// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
	Type pulumi.StringInput
}

func (DevicePostureIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePostureIntegrationArgs)(nil)).Elem()
}

type DevicePostureIntegrationInput interface {
	pulumi.Input

	ToDevicePostureIntegrationOutput() DevicePostureIntegrationOutput
	ToDevicePostureIntegrationOutputWithContext(ctx context.Context) DevicePostureIntegrationOutput
}

func (*DevicePostureIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureIntegration)(nil)).Elem()
}

func (i *DevicePostureIntegration) ToDevicePostureIntegrationOutput() DevicePostureIntegrationOutput {
	return i.ToDevicePostureIntegrationOutputWithContext(context.Background())
}

func (i *DevicePostureIntegration) ToDevicePostureIntegrationOutputWithContext(ctx context.Context) DevicePostureIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureIntegrationOutput)
}

func (i *DevicePostureIntegration) ToOutput(ctx context.Context) pulumix.Output[*DevicePostureIntegration] {
	return pulumix.Output[*DevicePostureIntegration]{
		OutputState: i.ToDevicePostureIntegrationOutputWithContext(ctx).OutputState,
	}
}

// DevicePostureIntegrationArrayInput is an input type that accepts DevicePostureIntegrationArray and DevicePostureIntegrationArrayOutput values.
// You can construct a concrete instance of `DevicePostureIntegrationArrayInput` via:
//
//	DevicePostureIntegrationArray{ DevicePostureIntegrationArgs{...} }
type DevicePostureIntegrationArrayInput interface {
	pulumi.Input

	ToDevicePostureIntegrationArrayOutput() DevicePostureIntegrationArrayOutput
	ToDevicePostureIntegrationArrayOutputWithContext(context.Context) DevicePostureIntegrationArrayOutput
}

type DevicePostureIntegrationArray []DevicePostureIntegrationInput

func (DevicePostureIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureIntegration)(nil)).Elem()
}

func (i DevicePostureIntegrationArray) ToDevicePostureIntegrationArrayOutput() DevicePostureIntegrationArrayOutput {
	return i.ToDevicePostureIntegrationArrayOutputWithContext(context.Background())
}

func (i DevicePostureIntegrationArray) ToDevicePostureIntegrationArrayOutputWithContext(ctx context.Context) DevicePostureIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureIntegrationArrayOutput)
}

func (i DevicePostureIntegrationArray) ToOutput(ctx context.Context) pulumix.Output[[]*DevicePostureIntegration] {
	return pulumix.Output[[]*DevicePostureIntegration]{
		OutputState: i.ToDevicePostureIntegrationArrayOutputWithContext(ctx).OutputState,
	}
}

// DevicePostureIntegrationMapInput is an input type that accepts DevicePostureIntegrationMap and DevicePostureIntegrationMapOutput values.
// You can construct a concrete instance of `DevicePostureIntegrationMapInput` via:
//
//	DevicePostureIntegrationMap{ "key": DevicePostureIntegrationArgs{...} }
type DevicePostureIntegrationMapInput interface {
	pulumi.Input

	ToDevicePostureIntegrationMapOutput() DevicePostureIntegrationMapOutput
	ToDevicePostureIntegrationMapOutputWithContext(context.Context) DevicePostureIntegrationMapOutput
}

type DevicePostureIntegrationMap map[string]DevicePostureIntegrationInput

func (DevicePostureIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureIntegration)(nil)).Elem()
}

func (i DevicePostureIntegrationMap) ToDevicePostureIntegrationMapOutput() DevicePostureIntegrationMapOutput {
	return i.ToDevicePostureIntegrationMapOutputWithContext(context.Background())
}

func (i DevicePostureIntegrationMap) ToDevicePostureIntegrationMapOutputWithContext(ctx context.Context) DevicePostureIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePostureIntegrationMapOutput)
}

func (i DevicePostureIntegrationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DevicePostureIntegration] {
	return pulumix.Output[map[string]*DevicePostureIntegration]{
		OutputState: i.ToDevicePostureIntegrationMapOutputWithContext(ctx).OutputState,
	}
}

type DevicePostureIntegrationOutput struct{ *pulumi.OutputState }

func (DevicePostureIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePostureIntegration)(nil)).Elem()
}

func (o DevicePostureIntegrationOutput) ToDevicePostureIntegrationOutput() DevicePostureIntegrationOutput {
	return o
}

func (o DevicePostureIntegrationOutput) ToDevicePostureIntegrationOutputWithContext(ctx context.Context) DevicePostureIntegrationOutput {
	return o
}

func (o DevicePostureIntegrationOutput) ToOutput(ctx context.Context) pulumix.Output[*DevicePostureIntegration] {
	return pulumix.Output[*DevicePostureIntegration]{
		OutputState: o.OutputState,
	}
}

// The account identifier to target for the resource.
func (o DevicePostureIntegrationOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The device posture integration's connection authorization parameters.
func (o DevicePostureIntegrationOutput) Configs() DevicePostureIntegrationConfigArrayOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) DevicePostureIntegrationConfigArrayOutput { return v.Configs }).(DevicePostureIntegrationConfigArrayOutput)
}

func (o DevicePostureIntegrationOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) pulumi.StringPtrOutput { return v.Identifier }).(pulumi.StringPtrOutput)
}

// Indicates the frequency with which to poll the third-party API. Must be in the format `1h` or `30m`.
func (o DevicePostureIntegrationOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) pulumi.StringPtrOutput { return v.Interval }).(pulumi.StringPtrOutput)
}

// Name of the device posture integration.
func (o DevicePostureIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The device posture integration type. Available values: `workspaceOne`, `uptycs`, `crowdstrikeS2s`, `intune`, `kolide`, `sentineloneS2s`, `taniumS2s`.
func (o DevicePostureIntegrationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePostureIntegration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DevicePostureIntegrationArrayOutput struct{ *pulumi.OutputState }

func (DevicePostureIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePostureIntegration)(nil)).Elem()
}

func (o DevicePostureIntegrationArrayOutput) ToDevicePostureIntegrationArrayOutput() DevicePostureIntegrationArrayOutput {
	return o
}

func (o DevicePostureIntegrationArrayOutput) ToDevicePostureIntegrationArrayOutputWithContext(ctx context.Context) DevicePostureIntegrationArrayOutput {
	return o
}

func (o DevicePostureIntegrationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DevicePostureIntegration] {
	return pulumix.Output[[]*DevicePostureIntegration]{
		OutputState: o.OutputState,
	}
}

func (o DevicePostureIntegrationArrayOutput) Index(i pulumi.IntInput) DevicePostureIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePostureIntegration {
		return vs[0].([]*DevicePostureIntegration)[vs[1].(int)]
	}).(DevicePostureIntegrationOutput)
}

type DevicePostureIntegrationMapOutput struct{ *pulumi.OutputState }

func (DevicePostureIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePostureIntegration)(nil)).Elem()
}

func (o DevicePostureIntegrationMapOutput) ToDevicePostureIntegrationMapOutput() DevicePostureIntegrationMapOutput {
	return o
}

func (o DevicePostureIntegrationMapOutput) ToDevicePostureIntegrationMapOutputWithContext(ctx context.Context) DevicePostureIntegrationMapOutput {
	return o
}

func (o DevicePostureIntegrationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DevicePostureIntegration] {
	return pulumix.Output[map[string]*DevicePostureIntegration]{
		OutputState: o.OutputState,
	}
}

func (o DevicePostureIntegrationMapOutput) MapIndex(k pulumi.StringInput) DevicePostureIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePostureIntegration {
		return vs[0].(map[string]*DevicePostureIntegration)[vs[1].(string)]
	}).(DevicePostureIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureIntegrationInput)(nil)).Elem(), &DevicePostureIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureIntegrationArrayInput)(nil)).Elem(), DevicePostureIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePostureIntegrationMapInput)(nil)).Elem(), DevicePostureIntegrationMap{})
	pulumi.RegisterOutputType(DevicePostureIntegrationOutput{})
	pulumi.RegisterOutputType(DevicePostureIntegrationArrayOutput{})
	pulumi.RegisterOutputType(DevicePostureIntegrationMapOutput{})
}
