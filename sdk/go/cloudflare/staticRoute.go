// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewMagicWanStaticRoute(ctx, "example_magic_wan_static_route", &cloudflare.MagicWanStaticRouteArgs{
//				AccountId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: cloudflare.index/staticroute.StaticRoute has been deprecated in favor of cloudflare.index/magicwanstaticroute.MagicWanStaticRoute
type StaticRoute struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// An optional human provided description of the static route.
	Description   pulumi.StringPtrOutput         `pulumi:"description"`
	Modified      pulumi.BoolOutput              `pulumi:"modified"`
	ModifiedRoute StaticRouteModifiedRouteOutput `pulumi:"modifiedRoute"`
	// The next-hop IP Address for the static route.
	Nexthop pulumi.StringPtrOutput `pulumi:"nexthop"`
	// IP Prefix in Classless Inter-Domain Routing format.
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// Priority of the static route.
	Priority pulumi.IntPtrOutput    `pulumi:"priority"`
	Route    StaticRouteRouteOutput `pulumi:"route"`
	// Identifier
	RouteId pulumi.StringPtrOutput      `pulumi:"routeId"`
	Routes  StaticRouteRouteArrayOutput `pulumi:"routes"`
	// Used only for ECMP routes.
	Scope StaticRouteScopeOutput `pulumi:"scope"`
	// Optional weight of the ECMP scope - if provided.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewStaticRoute registers a new resource with the given unique name, arguments, and options.
func NewStaticRoute(ctx *pulumi.Context,
	name string, args *StaticRouteArgs, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/staticRoute:StaticRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticRoute
	err := ctx.RegisterResource("cloudflare:index/staticRoute:StaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticRoute gets an existing StaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticRouteState, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	var resource StaticRoute
	err := ctx.ReadResource("cloudflare:index/staticRoute:StaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticRoute resources.
type staticRouteState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// An optional human provided description of the static route.
	Description   *string                   `pulumi:"description"`
	Modified      *bool                     `pulumi:"modified"`
	ModifiedRoute *StaticRouteModifiedRoute `pulumi:"modifiedRoute"`
	// The next-hop IP Address for the static route.
	Nexthop *string `pulumi:"nexthop"`
	// IP Prefix in Classless Inter-Domain Routing format.
	Prefix *string `pulumi:"prefix"`
	// Priority of the static route.
	Priority *int              `pulumi:"priority"`
	Route    *StaticRouteRoute `pulumi:"route"`
	// Identifier
	RouteId *string            `pulumi:"routeId"`
	Routes  []StaticRouteRoute `pulumi:"routes"`
	// Used only for ECMP routes.
	Scope *StaticRouteScope `pulumi:"scope"`
	// Optional weight of the ECMP scope - if provided.
	Weight *int `pulumi:"weight"`
}

type StaticRouteState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// An optional human provided description of the static route.
	Description   pulumi.StringPtrInput
	Modified      pulumi.BoolPtrInput
	ModifiedRoute StaticRouteModifiedRoutePtrInput
	// The next-hop IP Address for the static route.
	Nexthop pulumi.StringPtrInput
	// IP Prefix in Classless Inter-Domain Routing format.
	Prefix pulumi.StringPtrInput
	// Priority of the static route.
	Priority pulumi.IntPtrInput
	Route    StaticRouteRoutePtrInput
	// Identifier
	RouteId pulumi.StringPtrInput
	Routes  StaticRouteRouteArrayInput
	// Used only for ECMP routes.
	Scope StaticRouteScopePtrInput
	// Optional weight of the ECMP scope - if provided.
	Weight pulumi.IntPtrInput
}

func (StaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteState)(nil)).Elem()
}

type staticRouteArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// An optional human provided description of the static route.
	Description *string `pulumi:"description"`
	// The next-hop IP Address for the static route.
	Nexthop *string `pulumi:"nexthop"`
	// IP Prefix in Classless Inter-Domain Routing format.
	Prefix *string `pulumi:"prefix"`
	// Priority of the static route.
	Priority *int              `pulumi:"priority"`
	Route    *StaticRouteRoute `pulumi:"route"`
	// Identifier
	RouteId *string            `pulumi:"routeId"`
	Routes  []StaticRouteRoute `pulumi:"routes"`
	// Used only for ECMP routes.
	Scope *StaticRouteScope `pulumi:"scope"`
	// Optional weight of the ECMP scope - if provided.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a StaticRoute resource.
type StaticRouteArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// An optional human provided description of the static route.
	Description pulumi.StringPtrInput
	// The next-hop IP Address for the static route.
	Nexthop pulumi.StringPtrInput
	// IP Prefix in Classless Inter-Domain Routing format.
	Prefix pulumi.StringPtrInput
	// Priority of the static route.
	Priority pulumi.IntPtrInput
	Route    StaticRouteRoutePtrInput
	// Identifier
	RouteId pulumi.StringPtrInput
	Routes  StaticRouteRouteArrayInput
	// Used only for ECMP routes.
	Scope StaticRouteScopePtrInput
	// Optional weight of the ECMP scope - if provided.
	Weight pulumi.IntPtrInput
}

func (StaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteArgs)(nil)).Elem()
}

type StaticRouteInput interface {
	pulumi.Input

	ToStaticRouteOutput() StaticRouteOutput
	ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput
}

func (*StaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (i *StaticRoute) ToStaticRouteOutput() StaticRouteOutput {
	return i.ToStaticRouteOutputWithContext(context.Background())
}

func (i *StaticRoute) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteOutput)
}

// StaticRouteArrayInput is an input type that accepts StaticRouteArray and StaticRouteArrayOutput values.
// You can construct a concrete instance of `StaticRouteArrayInput` via:
//
//	StaticRouteArray{ StaticRouteArgs{...} }
type StaticRouteArrayInput interface {
	pulumi.Input

	ToStaticRouteArrayOutput() StaticRouteArrayOutput
	ToStaticRouteArrayOutputWithContext(context.Context) StaticRouteArrayOutput
}

type StaticRouteArray []StaticRouteInput

func (StaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteArray) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return i.ToStaticRouteArrayOutputWithContext(context.Background())
}

func (i StaticRouteArray) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteArrayOutput)
}

// StaticRouteMapInput is an input type that accepts StaticRouteMap and StaticRouteMapOutput values.
// You can construct a concrete instance of `StaticRouteMapInput` via:
//
//	StaticRouteMap{ "key": StaticRouteArgs{...} }
type StaticRouteMapInput interface {
	pulumi.Input

	ToStaticRouteMapOutput() StaticRouteMapOutput
	ToStaticRouteMapOutputWithContext(context.Context) StaticRouteMapOutput
}

type StaticRouteMap map[string]StaticRouteInput

func (StaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteMap) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return i.ToStaticRouteMapOutputWithContext(context.Background())
}

func (i StaticRouteMap) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteMapOutput)
}

type StaticRouteOutput struct{ *pulumi.OutputState }

func (StaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (o StaticRouteOutput) ToStaticRouteOutput() StaticRouteOutput {
	return o
}

func (o StaticRouteOutput) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return o
}

// Identifier
func (o StaticRouteOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// An optional human provided description of the static route.
func (o StaticRouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o StaticRouteOutput) Modified() pulumi.BoolOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.BoolOutput { return v.Modified }).(pulumi.BoolOutput)
}

func (o StaticRouteOutput) ModifiedRoute() StaticRouteModifiedRouteOutput {
	return o.ApplyT(func(v *StaticRoute) StaticRouteModifiedRouteOutput { return v.ModifiedRoute }).(StaticRouteModifiedRouteOutput)
}

// The next-hop IP Address for the static route.
func (o StaticRouteOutput) Nexthop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.Nexthop }).(pulumi.StringPtrOutput)
}

// IP Prefix in Classless Inter-Domain Routing format.
func (o StaticRouteOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Priority of the static route.
func (o StaticRouteOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o StaticRouteOutput) Route() StaticRouteRouteOutput {
	return o.ApplyT(func(v *StaticRoute) StaticRouteRouteOutput { return v.Route }).(StaticRouteRouteOutput)
}

// Identifier
func (o StaticRouteOutput) RouteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.RouteId }).(pulumi.StringPtrOutput)
}

func (o StaticRouteOutput) Routes() StaticRouteRouteArrayOutput {
	return o.ApplyT(func(v *StaticRoute) StaticRouteRouteArrayOutput { return v.Routes }).(StaticRouteRouteArrayOutput)
}

// Used only for ECMP routes.
func (o StaticRouteOutput) Scope() StaticRouteScopeOutput {
	return o.ApplyT(func(v *StaticRoute) StaticRouteScopeOutput { return v.Scope }).(StaticRouteScopeOutput)
}

// Optional weight of the ECMP scope - if provided.
func (o StaticRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type StaticRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) Index(i pulumi.IntInput) StaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].([]*StaticRoute)[vs[1].(int)]
	}).(StaticRouteOutput)
}

type StaticRouteMapOutput struct{ *pulumi.OutputState }

func (StaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) MapIndex(k pulumi.StringInput) StaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].(map[string]*StaticRoute)[vs[1].(string)]
	}).(StaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteInput)(nil)).Elem(), &StaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteArrayInput)(nil)).Elem(), StaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteMapInput)(nil)).Elem(), StaticRouteMap{})
	pulumi.RegisterOutputType(StaticRouteOutput{})
	pulumi.RegisterOutputType(StaticRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteMapOutput{})
}
