// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare IP Firewall Access Rule resource. Access control can be applied on basis of IP addresses, IP ranges, AS numbers or countries.
//
// ## Import
//
// Records can be imported using a composite ID formed of access rule type, access rule type identifier and identifer value, e.g.
//
// ```sh
//  $ pulumi import cloudflare:index/accessRule:AccessRule default zone/cb029e245cfdd66dc8d2e570d5dd3322/d41d8cd98f00b204e9800998ecf8427e
// ```
//
//  where* `zone` - access rule type (`account`, `zone` or `user`) * `cb029e245cfdd66dc8d2e570d5dd3322` - access rule type ID (i.e the zone ID
//
//  or account ID you wish to target) * `d41d8cd98f00b204e9800998ecf8427e` - access rule ID as returned by
//
//  respective API endpoint for the type you are attempting to import.
type AccessRule struct {
	pulumi.CustomResourceState

	// Rule configuration to apply to a matched request. It's a complex value. See description below.
	Configuration AccessRuleConfigurationOutput `pulumi:"configuration"`
	// The action to apply to a matched request. Allowed values: "block", "challenge", "whitelist", "jsChallenge"
	Mode pulumi.StringOutput `pulumi:"mode"`
	// A personal note about the rule. Typically used as a reminder or explanation for the rule.
	Notes pulumi.StringPtrOutput `pulumi:"notes"`
	// The DNS zone to which the access rule should be added.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAccessRule registers a new resource with the given unique name, arguments, and options.
func NewAccessRule(ctx *pulumi.Context,
	name string, args *AccessRuleArgs, opts ...pulumi.ResourceOption) (*AccessRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	var resource AccessRule
	err := ctx.RegisterResource("cloudflare:index/accessRule:AccessRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessRule gets an existing AccessRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessRuleState, opts ...pulumi.ResourceOption) (*AccessRule, error) {
	var resource AccessRule
	err := ctx.ReadResource("cloudflare:index/accessRule:AccessRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessRule resources.
type accessRuleState struct {
	// Rule configuration to apply to a matched request. It's a complex value. See description below.
	Configuration *AccessRuleConfiguration `pulumi:"configuration"`
	// The action to apply to a matched request. Allowed values: "block", "challenge", "whitelist", "jsChallenge"
	Mode *string `pulumi:"mode"`
	// A personal note about the rule. Typically used as a reminder or explanation for the rule.
	Notes *string `pulumi:"notes"`
	// The DNS zone to which the access rule should be added.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessRuleState struct {
	// Rule configuration to apply to a matched request. It's a complex value. See description below.
	Configuration AccessRuleConfigurationPtrInput
	// The action to apply to a matched request. Allowed values: "block", "challenge", "whitelist", "jsChallenge"
	Mode pulumi.StringPtrInput
	// A personal note about the rule. Typically used as a reminder or explanation for the rule.
	Notes pulumi.StringPtrInput
	// The DNS zone to which the access rule should be added.
	ZoneId pulumi.StringPtrInput
}

func (AccessRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessRuleState)(nil)).Elem()
}

type accessRuleArgs struct {
	// Rule configuration to apply to a matched request. It's a complex value. See description below.
	Configuration AccessRuleConfiguration `pulumi:"configuration"`
	// The action to apply to a matched request. Allowed values: "block", "challenge", "whitelist", "jsChallenge"
	Mode string `pulumi:"mode"`
	// A personal note about the rule. Typically used as a reminder or explanation for the rule.
	Notes *string `pulumi:"notes"`
	// The DNS zone to which the access rule should be added.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessRule resource.
type AccessRuleArgs struct {
	// Rule configuration to apply to a matched request. It's a complex value. See description below.
	Configuration AccessRuleConfigurationInput
	// The action to apply to a matched request. Allowed values: "block", "challenge", "whitelist", "jsChallenge"
	Mode pulumi.StringInput
	// A personal note about the rule. Typically used as a reminder or explanation for the rule.
	Notes pulumi.StringPtrInput
	// The DNS zone to which the access rule should be added.
	ZoneId pulumi.StringPtrInput
}

func (AccessRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessRuleArgs)(nil)).Elem()
}

type AccessRuleInput interface {
	pulumi.Input

	ToAccessRuleOutput() AccessRuleOutput
	ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput
}

func (*AccessRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRule)(nil))
}

func (i *AccessRule) ToAccessRuleOutput() AccessRuleOutput {
	return i.ToAccessRuleOutputWithContext(context.Background())
}

func (i *AccessRule) ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRuleOutput)
}

func (i *AccessRule) ToAccessRulePtrOutput() AccessRulePtrOutput {
	return i.ToAccessRulePtrOutputWithContext(context.Background())
}

func (i *AccessRule) ToAccessRulePtrOutputWithContext(ctx context.Context) AccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRulePtrOutput)
}

type AccessRulePtrInput interface {
	pulumi.Input

	ToAccessRulePtrOutput() AccessRulePtrOutput
	ToAccessRulePtrOutputWithContext(ctx context.Context) AccessRulePtrOutput
}

type accessRulePtrType AccessRuleArgs

func (*accessRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessRule)(nil))
}

func (i *accessRulePtrType) ToAccessRulePtrOutput() AccessRulePtrOutput {
	return i.ToAccessRulePtrOutputWithContext(context.Background())
}

func (i *accessRulePtrType) ToAccessRulePtrOutputWithContext(ctx context.Context) AccessRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRulePtrOutput)
}

// AccessRuleArrayInput is an input type that accepts AccessRuleArray and AccessRuleArrayOutput values.
// You can construct a concrete instance of `AccessRuleArrayInput` via:
//
//          AccessRuleArray{ AccessRuleArgs{...} }
type AccessRuleArrayInput interface {
	pulumi.Input

	ToAccessRuleArrayOutput() AccessRuleArrayOutput
	ToAccessRuleArrayOutputWithContext(context.Context) AccessRuleArrayOutput
}

type AccessRuleArray []AccessRuleInput

func (AccessRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessRule)(nil)).Elem()
}

func (i AccessRuleArray) ToAccessRuleArrayOutput() AccessRuleArrayOutput {
	return i.ToAccessRuleArrayOutputWithContext(context.Background())
}

func (i AccessRuleArray) ToAccessRuleArrayOutputWithContext(ctx context.Context) AccessRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRuleArrayOutput)
}

// AccessRuleMapInput is an input type that accepts AccessRuleMap and AccessRuleMapOutput values.
// You can construct a concrete instance of `AccessRuleMapInput` via:
//
//          AccessRuleMap{ "key": AccessRuleArgs{...} }
type AccessRuleMapInput interface {
	pulumi.Input

	ToAccessRuleMapOutput() AccessRuleMapOutput
	ToAccessRuleMapOutputWithContext(context.Context) AccessRuleMapOutput
}

type AccessRuleMap map[string]AccessRuleInput

func (AccessRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessRule)(nil)).Elem()
}

func (i AccessRuleMap) ToAccessRuleMapOutput() AccessRuleMapOutput {
	return i.ToAccessRuleMapOutputWithContext(context.Background())
}

func (i AccessRuleMap) ToAccessRuleMapOutputWithContext(ctx context.Context) AccessRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessRuleMapOutput)
}

type AccessRuleOutput struct{ *pulumi.OutputState }

func (AccessRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessRule)(nil))
}

func (o AccessRuleOutput) ToAccessRuleOutput() AccessRuleOutput {
	return o
}

func (o AccessRuleOutput) ToAccessRuleOutputWithContext(ctx context.Context) AccessRuleOutput {
	return o
}

func (o AccessRuleOutput) ToAccessRulePtrOutput() AccessRulePtrOutput {
	return o.ToAccessRulePtrOutputWithContext(context.Background())
}

func (o AccessRuleOutput) ToAccessRulePtrOutputWithContext(ctx context.Context) AccessRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessRule) *AccessRule {
		return &v
	}).(AccessRulePtrOutput)
}

type AccessRulePtrOutput struct{ *pulumi.OutputState }

func (AccessRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessRule)(nil))
}

func (o AccessRulePtrOutput) ToAccessRulePtrOutput() AccessRulePtrOutput {
	return o
}

func (o AccessRulePtrOutput) ToAccessRulePtrOutputWithContext(ctx context.Context) AccessRulePtrOutput {
	return o
}

func (o AccessRulePtrOutput) Elem() AccessRuleOutput {
	return o.ApplyT(func(v *AccessRule) AccessRule {
		if v != nil {
			return *v
		}
		var ret AccessRule
		return ret
	}).(AccessRuleOutput)
}

type AccessRuleArrayOutput struct{ *pulumi.OutputState }

func (AccessRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessRule)(nil))
}

func (o AccessRuleArrayOutput) ToAccessRuleArrayOutput() AccessRuleArrayOutput {
	return o
}

func (o AccessRuleArrayOutput) ToAccessRuleArrayOutputWithContext(ctx context.Context) AccessRuleArrayOutput {
	return o
}

func (o AccessRuleArrayOutput) Index(i pulumi.IntInput) AccessRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessRule {
		return vs[0].([]AccessRule)[vs[1].(int)]
	}).(AccessRuleOutput)
}

type AccessRuleMapOutput struct{ *pulumi.OutputState }

func (AccessRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AccessRule)(nil))
}

func (o AccessRuleMapOutput) ToAccessRuleMapOutput() AccessRuleMapOutput {
	return o
}

func (o AccessRuleMapOutput) ToAccessRuleMapOutputWithContext(ctx context.Context) AccessRuleMapOutput {
	return o
}

func (o AccessRuleMapOutput) MapIndex(k pulumi.StringInput) AccessRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AccessRule {
		return vs[0].(map[string]AccessRule)[vs[1].(string)]
	}).(AccessRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRuleInput)(nil)).Elem(), &AccessRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRulePtrInput)(nil)).Elem(), &AccessRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRuleArrayInput)(nil)).Elem(), AccessRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessRuleMapInput)(nil)).Elem(), AccessRuleMap{})
	pulumi.RegisterOutputType(AccessRuleOutput{})
	pulumi.RegisterOutputType(AccessRulePtrOutput{})
	pulumi.RegisterOutputType(AccessRuleArrayOutput{})
	pulumi.RegisterOutputType(AccessRuleMapOutput{})
}
