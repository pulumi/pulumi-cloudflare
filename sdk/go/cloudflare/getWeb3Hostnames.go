// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupWeb3Hostnames(ctx, &cloudflare.LookupWeb3HostnamesArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupWeb3Hostnames(ctx *pulumi.Context, args *LookupWeb3HostnamesArgs, opts ...pulumi.InvokeOption) (*LookupWeb3HostnamesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupWeb3HostnamesResult
	err := ctx.Invoke("cloudflare:index/getWeb3Hostnames:getWeb3Hostnames", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWeb3Hostnames.
type LookupWeb3HostnamesArgs struct {
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// Specify the identifier of the hostname.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getWeb3Hostnames.
type LookupWeb3HostnamesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Max items to fetch, default: 1000
	MaxItems *int `pulumi:"maxItems"`
	// The items returned by the data source
	Results []GetWeb3HostnamesResult `pulumi:"results"`
	// Specify the identifier of the hostname.
	ZoneId string `pulumi:"zoneId"`
}

func LookupWeb3HostnamesOutput(ctx *pulumi.Context, args LookupWeb3HostnamesOutputArgs, opts ...pulumi.InvokeOption) LookupWeb3HostnamesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupWeb3HostnamesResultOutput, error) {
			args := v.(LookupWeb3HostnamesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getWeb3Hostnames:getWeb3Hostnames", args, LookupWeb3HostnamesResultOutput{}, options).(LookupWeb3HostnamesResultOutput), nil
		}).(LookupWeb3HostnamesResultOutput)
}

// A collection of arguments for invoking getWeb3Hostnames.
type LookupWeb3HostnamesOutputArgs struct {
	// Max items to fetch, default: 1000
	MaxItems pulumi.IntPtrInput `pulumi:"maxItems"`
	// Specify the identifier of the hostname.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupWeb3HostnamesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWeb3HostnamesArgs)(nil)).Elem()
}

// A collection of values returned by getWeb3Hostnames.
type LookupWeb3HostnamesResultOutput struct{ *pulumi.OutputState }

func (LookupWeb3HostnamesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWeb3HostnamesResult)(nil)).Elem()
}

func (o LookupWeb3HostnamesResultOutput) ToLookupWeb3HostnamesResultOutput() LookupWeb3HostnamesResultOutput {
	return o
}

func (o LookupWeb3HostnamesResultOutput) ToLookupWeb3HostnamesResultOutputWithContext(ctx context.Context) LookupWeb3HostnamesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupWeb3HostnamesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnamesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Max items to fetch, default: 1000
func (o LookupWeb3HostnamesResultOutput) MaxItems() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupWeb3HostnamesResult) *int { return v.MaxItems }).(pulumi.IntPtrOutput)
}

// The items returned by the data source
func (o LookupWeb3HostnamesResultOutput) Results() GetWeb3HostnamesResultArrayOutput {
	return o.ApplyT(func(v LookupWeb3HostnamesResult) []GetWeb3HostnamesResult { return v.Results }).(GetWeb3HostnamesResultArrayOutput)
}

// Specify the identifier of the hostname.
func (o LookupWeb3HostnamesResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWeb3HostnamesResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWeb3HostnamesResultOutput{})
}
