// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZoneHold(ctx, "example_zone_hold", &cloudflare.ZoneHoldArgs{
//				ZoneId: pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zoneHold:ZoneHold example '<zone_id>'
// ```
type ZoneHold struct {
	pulumi.CustomResourceState

	Hold pulumi.BoolOutput `pulumi:"hold"`
	// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
	// then automatically re-enabled by the system at the time specified
	// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
	// no effect on an existing, enabled hold. Providing an empty string will set its value
	// to the current time.
	HoldAfter pulumi.StringOutput `pulumi:"holdAfter"`
	// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
	// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
	// 'example.com' and include_subdomains=true will block 'example.com',
	// 'staging.example.com', 'api.staging.example.com', etc.
	IncludeSubdomains pulumi.BoolOutput `pulumi:"includeSubdomains"`
	// Identifier.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneHold registers a new resource with the given unique name, arguments, and options.
func NewZoneHold(ctx *pulumi.Context,
	name string, args *ZoneHoldArgs, opts ...pulumi.ResourceOption) (*ZoneHold, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneHold
	err := ctx.RegisterResource("cloudflare:index/zoneHold:ZoneHold", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneHold gets an existing ZoneHold resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneHold(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneHoldState, opts ...pulumi.ResourceOption) (*ZoneHold, error) {
	var resource ZoneHold
	err := ctx.ReadResource("cloudflare:index/zoneHold:ZoneHold", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneHold resources.
type zoneHoldState struct {
	Hold *bool `pulumi:"hold"`
	// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
	// then automatically re-enabled by the system at the time specified
	// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
	// no effect on an existing, enabled hold. Providing an empty string will set its value
	// to the current time.
	HoldAfter *string `pulumi:"holdAfter"`
	// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
	// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
	// 'example.com' and include_subdomains=true will block 'example.com',
	// 'staging.example.com', 'api.staging.example.com', etc.
	IncludeSubdomains *bool `pulumi:"includeSubdomains"`
	// Identifier.
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneHoldState struct {
	Hold pulumi.BoolPtrInput
	// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
	// then automatically re-enabled by the system at the time specified
	// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
	// no effect on an existing, enabled hold. Providing an empty string will set its value
	// to the current time.
	HoldAfter pulumi.StringPtrInput
	// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
	// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
	// 'example.com' and include_subdomains=true will block 'example.com',
	// 'staging.example.com', 'api.staging.example.com', etc.
	IncludeSubdomains pulumi.BoolPtrInput
	// Identifier.
	ZoneId pulumi.StringPtrInput
}

func (ZoneHoldState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneHoldState)(nil)).Elem()
}

type zoneHoldArgs struct {
	// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
	// then automatically re-enabled by the system at the time specified
	// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
	// no effect on an existing, enabled hold. Providing an empty string will set its value
	// to the current time.
	HoldAfter *string `pulumi:"holdAfter"`
	// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
	// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
	// 'example.com' and include_subdomains=true will block 'example.com',
	// 'staging.example.com', 'api.staging.example.com', etc.
	IncludeSubdomains *bool `pulumi:"includeSubdomains"`
	// Identifier.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneHold resource.
type ZoneHoldArgs struct {
	// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
	// then automatically re-enabled by the system at the time specified
	// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
	// no effect on an existing, enabled hold. Providing an empty string will set its value
	// to the current time.
	HoldAfter pulumi.StringPtrInput
	// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
	// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
	// 'example.com' and include_subdomains=true will block 'example.com',
	// 'staging.example.com', 'api.staging.example.com', etc.
	IncludeSubdomains pulumi.BoolPtrInput
	// Identifier.
	ZoneId pulumi.StringInput
}

func (ZoneHoldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneHoldArgs)(nil)).Elem()
}

type ZoneHoldInput interface {
	pulumi.Input

	ToZoneHoldOutput() ZoneHoldOutput
	ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput
}

func (*ZoneHold) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneHold)(nil)).Elem()
}

func (i *ZoneHold) ToZoneHoldOutput() ZoneHoldOutput {
	return i.ToZoneHoldOutputWithContext(context.Background())
}

func (i *ZoneHold) ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldOutput)
}

// ZoneHoldArrayInput is an input type that accepts ZoneHoldArray and ZoneHoldArrayOutput values.
// You can construct a concrete instance of `ZoneHoldArrayInput` via:
//
//	ZoneHoldArray{ ZoneHoldArgs{...} }
type ZoneHoldArrayInput interface {
	pulumi.Input

	ToZoneHoldArrayOutput() ZoneHoldArrayOutput
	ToZoneHoldArrayOutputWithContext(context.Context) ZoneHoldArrayOutput
}

type ZoneHoldArray []ZoneHoldInput

func (ZoneHoldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneHold)(nil)).Elem()
}

func (i ZoneHoldArray) ToZoneHoldArrayOutput() ZoneHoldArrayOutput {
	return i.ToZoneHoldArrayOutputWithContext(context.Background())
}

func (i ZoneHoldArray) ToZoneHoldArrayOutputWithContext(ctx context.Context) ZoneHoldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldArrayOutput)
}

// ZoneHoldMapInput is an input type that accepts ZoneHoldMap and ZoneHoldMapOutput values.
// You can construct a concrete instance of `ZoneHoldMapInput` via:
//
//	ZoneHoldMap{ "key": ZoneHoldArgs{...} }
type ZoneHoldMapInput interface {
	pulumi.Input

	ToZoneHoldMapOutput() ZoneHoldMapOutput
	ToZoneHoldMapOutputWithContext(context.Context) ZoneHoldMapOutput
}

type ZoneHoldMap map[string]ZoneHoldInput

func (ZoneHoldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneHold)(nil)).Elem()
}

func (i ZoneHoldMap) ToZoneHoldMapOutput() ZoneHoldMapOutput {
	return i.ToZoneHoldMapOutputWithContext(context.Background())
}

func (i ZoneHoldMap) ToZoneHoldMapOutputWithContext(ctx context.Context) ZoneHoldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldMapOutput)
}

type ZoneHoldOutput struct{ *pulumi.OutputState }

func (ZoneHoldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneHold)(nil)).Elem()
}

func (o ZoneHoldOutput) ToZoneHoldOutput() ZoneHoldOutput {
	return o
}

func (o ZoneHoldOutput) ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput {
	return o
}

func (o ZoneHoldOutput) Hold() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.BoolOutput { return v.Hold }).(pulumi.BoolOutput)
}

// If `holdAfter` is provided and future-dated, the hold will be temporarily disabled,
// then automatically re-enabled by the system at the time specified
// in this RFC3339-formatted timestamp. A past-dated `holdAfter` value will have
// no effect on an existing, enabled hold. Providing an empty string will set its value
// to the current time.
func (o ZoneHoldOutput) HoldAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.StringOutput { return v.HoldAfter }).(pulumi.StringOutput)
}

// If `true`, the zone hold will extend to block any subdomain of the given zone, as well
// as SSL4SaaS Custom Hostnames. For example, a zone hold on a zone with the hostname
// 'example.com' and include_subdomains=true will block 'example.com',
// 'staging.example.com', 'api.staging.example.com', etc.
func (o ZoneHoldOutput) IncludeSubdomains() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.BoolOutput { return v.IncludeSubdomains }).(pulumi.BoolOutput)
}

// Identifier.
func (o ZoneHoldOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneHoldArrayOutput struct{ *pulumi.OutputState }

func (ZoneHoldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneHold)(nil)).Elem()
}

func (o ZoneHoldArrayOutput) ToZoneHoldArrayOutput() ZoneHoldArrayOutput {
	return o
}

func (o ZoneHoldArrayOutput) ToZoneHoldArrayOutputWithContext(ctx context.Context) ZoneHoldArrayOutput {
	return o
}

func (o ZoneHoldArrayOutput) Index(i pulumi.IntInput) ZoneHoldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneHold {
		return vs[0].([]*ZoneHold)[vs[1].(int)]
	}).(ZoneHoldOutput)
}

type ZoneHoldMapOutput struct{ *pulumi.OutputState }

func (ZoneHoldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneHold)(nil)).Elem()
}

func (o ZoneHoldMapOutput) ToZoneHoldMapOutput() ZoneHoldMapOutput {
	return o
}

func (o ZoneHoldMapOutput) ToZoneHoldMapOutputWithContext(ctx context.Context) ZoneHoldMapOutput {
	return o
}

func (o ZoneHoldMapOutput) MapIndex(k pulumi.StringInput) ZoneHoldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneHold {
		return vs[0].(map[string]*ZoneHold)[vs[1].(string)]
	}).(ZoneHoldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldInput)(nil)).Elem(), &ZoneHold{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldArrayInput)(nil)).Elem(), ZoneHoldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldMapInput)(nil)).Elem(), ZoneHoldMap{})
	pulumi.RegisterOutputType(ZoneHoldOutput{})
	pulumi.RegisterOutputType(ZoneHoldArrayOutput{})
	pulumi.RegisterOutputType(ZoneHoldMapOutput{})
}
