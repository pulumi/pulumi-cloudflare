// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Cloudflare Zone Hold resource that prevents adding
// the hostname to another account for use.
//
// ## Import
//
// ```sh
//
//	$ pulumi import cloudflare:index/zoneHold:ZoneHold example <zone_id>
//
// ```
type ZoneHold struct {
	pulumi.CustomResourceState

	// Enablement status of the zone hold.
	Hold pulumi.BoolOutput `pulumi:"hold"`
	// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
	HoldAfter pulumi.StringOutput `pulumi:"holdAfter"`
	// Whether to extend to block any subdomain of the given zone.
	IncludeSubdomains pulumi.BoolPtrOutput `pulumi:"includeSubdomains"`
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewZoneHold registers a new resource with the given unique name, arguments, and options.
func NewZoneHold(ctx *pulumi.Context,
	name string, args *ZoneHoldArgs, opts ...pulumi.ResourceOption) (*ZoneHold, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hold == nil {
		return nil, errors.New("invalid value for required argument 'Hold'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneHold
	err := ctx.RegisterResource("cloudflare:index/zoneHold:ZoneHold", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneHold gets an existing ZoneHold resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneHold(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneHoldState, opts ...pulumi.ResourceOption) (*ZoneHold, error) {
	var resource ZoneHold
	err := ctx.ReadResource("cloudflare:index/zoneHold:ZoneHold", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneHold resources.
type zoneHoldState struct {
	// Enablement status of the zone hold.
	Hold *bool `pulumi:"hold"`
	// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
	HoldAfter *string `pulumi:"holdAfter"`
	// Whether to extend to block any subdomain of the given zone.
	IncludeSubdomains *bool `pulumi:"includeSubdomains"`
	// The zone identifier to target for the resource.
	ZoneId *string `pulumi:"zoneId"`
}

type ZoneHoldState struct {
	// Enablement status of the zone hold.
	Hold pulumi.BoolPtrInput
	// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
	HoldAfter pulumi.StringPtrInput
	// Whether to extend to block any subdomain of the given zone.
	IncludeSubdomains pulumi.BoolPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringPtrInput
}

func (ZoneHoldState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneHoldState)(nil)).Elem()
}

type zoneHoldArgs struct {
	// Enablement status of the zone hold.
	Hold bool `pulumi:"hold"`
	// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
	HoldAfter *string `pulumi:"holdAfter"`
	// Whether to extend to block any subdomain of the given zone.
	IncludeSubdomains *bool `pulumi:"includeSubdomains"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZoneHold resource.
type ZoneHoldArgs struct {
	// Enablement status of the zone hold.
	Hold pulumi.BoolInput
	// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
	HoldAfter pulumi.StringPtrInput
	// Whether to extend to block any subdomain of the given zone.
	IncludeSubdomains pulumi.BoolPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput
}

func (ZoneHoldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneHoldArgs)(nil)).Elem()
}

type ZoneHoldInput interface {
	pulumi.Input

	ToZoneHoldOutput() ZoneHoldOutput
	ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput
}

func (*ZoneHold) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneHold)(nil)).Elem()
}

func (i *ZoneHold) ToZoneHoldOutput() ZoneHoldOutput {
	return i.ToZoneHoldOutputWithContext(context.Background())
}

func (i *ZoneHold) ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldOutput)
}

func (i *ZoneHold) ToOutput(ctx context.Context) pulumix.Output[*ZoneHold] {
	return pulumix.Output[*ZoneHold]{
		OutputState: i.ToZoneHoldOutputWithContext(ctx).OutputState,
	}
}

// ZoneHoldArrayInput is an input type that accepts ZoneHoldArray and ZoneHoldArrayOutput values.
// You can construct a concrete instance of `ZoneHoldArrayInput` via:
//
//	ZoneHoldArray{ ZoneHoldArgs{...} }
type ZoneHoldArrayInput interface {
	pulumi.Input

	ToZoneHoldArrayOutput() ZoneHoldArrayOutput
	ToZoneHoldArrayOutputWithContext(context.Context) ZoneHoldArrayOutput
}

type ZoneHoldArray []ZoneHoldInput

func (ZoneHoldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneHold)(nil)).Elem()
}

func (i ZoneHoldArray) ToZoneHoldArrayOutput() ZoneHoldArrayOutput {
	return i.ToZoneHoldArrayOutputWithContext(context.Background())
}

func (i ZoneHoldArray) ToZoneHoldArrayOutputWithContext(ctx context.Context) ZoneHoldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldArrayOutput)
}

func (i ZoneHoldArray) ToOutput(ctx context.Context) pulumix.Output[[]*ZoneHold] {
	return pulumix.Output[[]*ZoneHold]{
		OutputState: i.ToZoneHoldArrayOutputWithContext(ctx).OutputState,
	}
}

// ZoneHoldMapInput is an input type that accepts ZoneHoldMap and ZoneHoldMapOutput values.
// You can construct a concrete instance of `ZoneHoldMapInput` via:
//
//	ZoneHoldMap{ "key": ZoneHoldArgs{...} }
type ZoneHoldMapInput interface {
	pulumi.Input

	ToZoneHoldMapOutput() ZoneHoldMapOutput
	ToZoneHoldMapOutputWithContext(context.Context) ZoneHoldMapOutput
}

type ZoneHoldMap map[string]ZoneHoldInput

func (ZoneHoldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneHold)(nil)).Elem()
}

func (i ZoneHoldMap) ToZoneHoldMapOutput() ZoneHoldMapOutput {
	return i.ToZoneHoldMapOutputWithContext(context.Background())
}

func (i ZoneHoldMap) ToZoneHoldMapOutputWithContext(ctx context.Context) ZoneHoldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneHoldMapOutput)
}

func (i ZoneHoldMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ZoneHold] {
	return pulumix.Output[map[string]*ZoneHold]{
		OutputState: i.ToZoneHoldMapOutputWithContext(ctx).OutputState,
	}
}

type ZoneHoldOutput struct{ *pulumi.OutputState }

func (ZoneHoldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneHold)(nil)).Elem()
}

func (o ZoneHoldOutput) ToZoneHoldOutput() ZoneHoldOutput {
	return o
}

func (o ZoneHoldOutput) ToZoneHoldOutputWithContext(ctx context.Context) ZoneHoldOutput {
	return o
}

func (o ZoneHoldOutput) ToOutput(ctx context.Context) pulumix.Output[*ZoneHold] {
	return pulumix.Output[*ZoneHold]{
		OutputState: o.OutputState,
	}
}

// Enablement status of the zone hold.
func (o ZoneHoldOutput) Hold() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.BoolOutput { return v.Hold }).(pulumi.BoolOutput)
}

// The RFC3339 compatible timestamp when to automatically re-enable the zone hold.
func (o ZoneHoldOutput) HoldAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.StringOutput { return v.HoldAfter }).(pulumi.StringOutput)
}

// Whether to extend to block any subdomain of the given zone.
func (o ZoneHoldOutput) IncludeSubdomains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.BoolPtrOutput { return v.IncludeSubdomains }).(pulumi.BoolPtrOutput)
}

// The zone identifier to target for the resource.
func (o ZoneHoldOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneHold) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ZoneHoldArrayOutput struct{ *pulumi.OutputState }

func (ZoneHoldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneHold)(nil)).Elem()
}

func (o ZoneHoldArrayOutput) ToZoneHoldArrayOutput() ZoneHoldArrayOutput {
	return o
}

func (o ZoneHoldArrayOutput) ToZoneHoldArrayOutputWithContext(ctx context.Context) ZoneHoldArrayOutput {
	return o
}

func (o ZoneHoldArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ZoneHold] {
	return pulumix.Output[[]*ZoneHold]{
		OutputState: o.OutputState,
	}
}

func (o ZoneHoldArrayOutput) Index(i pulumi.IntInput) ZoneHoldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneHold {
		return vs[0].([]*ZoneHold)[vs[1].(int)]
	}).(ZoneHoldOutput)
}

type ZoneHoldMapOutput struct{ *pulumi.OutputState }

func (ZoneHoldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneHold)(nil)).Elem()
}

func (o ZoneHoldMapOutput) ToZoneHoldMapOutput() ZoneHoldMapOutput {
	return o
}

func (o ZoneHoldMapOutput) ToZoneHoldMapOutputWithContext(ctx context.Context) ZoneHoldMapOutput {
	return o
}

func (o ZoneHoldMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ZoneHold] {
	return pulumix.Output[map[string]*ZoneHold]{
		OutputState: o.OutputState,
	}
}

func (o ZoneHoldMapOutput) MapIndex(k pulumi.StringInput) ZoneHoldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneHold {
		return vs[0].(map[string]*ZoneHold)[vs[1].(string)]
	}).(ZoneHoldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldInput)(nil)).Elem(), &ZoneHold{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldArrayInput)(nil)).Elem(), ZoneHoldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneHoldMapInput)(nil)).Elem(), ZoneHoldMap{})
	pulumi.RegisterOutputType(ZoneHoldOutput{})
	pulumi.RegisterOutputType(ZoneHoldArrayOutput{})
	pulumi.RegisterOutputType(ZoneHoldMapOutput{})
}
