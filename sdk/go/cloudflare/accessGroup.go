// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Cloudflare Access Group resource. Access Groups are used
// in conjunction with Access Policies to restrict access to a
// particular resource based on group membership.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v2/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewAccessGroup(ctx, "testGroupAccessGroup", &cloudflare.AccessGroupArgs{
// 			AccountId: pulumi.String("975ecf5a45e3bcb680dba0722a420ad9"),
// 			Name:      pulumi.String("staging group"),
// 			Includes: cloudflare.AccessGroupIncludeArray{
// 				&cloudflare.AccessGroupIncludeArgs{
// 					Emails: pulumi.StringArray{
// 						pulumi.String("test@example.com"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudflare.NewAccessGroup(ctx, "testGroupIndex_accessGroupAccessGroup", &cloudflare.AccessGroupArgs{
// 			AccountId: pulumi.String("975ecf5a45e3bcb680dba0722a420ad9"),
// 			Name:      pulumi.String("staging group"),
// 			Includes: cloudflare.AccessGroupIncludeArray{
// 				&cloudflare.AccessGroupIncludeArgs{
// 					Emails: pulumi.StringArray{
// 						pulumi.String("test@example.com"),
// 					},
// 				},
// 			},
// 			Requires: cloudflare.AccessGroupRequireArray{
// 				Ips: cloudflare.AccessGroupRequireArgs{
// 					pulumi.Any(_var.Office_ip),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Conditions
//
// `require`, `exclude` and `include` arguments share the available
// conditions which can be applied. The conditions are:
//
// * `ip` - (Optional) A list of IP addresses or ranges. Example:
// `ip = ["1.2.3.4", "10.0.0.0/2"]`
// * `email` - (Optional) A list of email addresses. Example:
// `email = ["test@example.com"]`
// * `emailDomain` - (Optional) A list of email domains. Example:
// `emailDomain = ["example.com"]`
// * `serviceToken` - (Optional) A list of service token ids. Example:
// `serviceToken = [cloudflare_access_service_token.demo.id]`
// * `anyValidServiceToken` - (Optional) Boolean indicating if allow
// all tokens to be granted. Example: `anyValidServiceToken = true`
// * `group` - (Optional) A list of access group ids. Example:
// `group = [cloudflare_access_group.demo.id]`
// * `everyone` - (Optional) Boolean indicating permitting access for all
// requests. Example: `everyone = true`
// * `certificate` - (Optional) Whether to use mTLS certificate authentication.
// * `commonName` - (Optional) Use a certificate common name to authenticate with.
// * `authMethod` - (Optional) A string identifying the authentication
// method code. The list of codes are listed here: https://tools.ietf.org/html/rfc8176#section-2.
// Custom values are also supported.
// * `geo` - (Optional) A list of country codes. Example: `geo = ["US"]`
// * `gsuite` - (Optional) Use GSuite as the authentication mechanism. Example:
// * `github` - (Optional) Use a GitHub organization as the `include` condition. Example:
// * `azure` - (Optional) Use Azure AD as the `include` condition. Example:
// * `okta` - (Optional) Use Okta as the `include` condition. Example:
// * `saml` - (Optional) Use an external SAML setup as the `include` condition.
// Example:
//
// ## Import
//
// Access Groups can be imported using a composite ID formed of account ID and group ID.
//
// ```sh
//  $ pulumi import cloudflare:index/accessGroup:AccessGroup staging 975ecf5a45e3bcb680dba0722a420ad9/67ea780ce4982c1cfbe6b7293afc765d
// ```
//
//  where * `975ecf5a45e3bcb680dba0722a420ad9` - Account ID * `67ea780ce4982c1cfbe6b7293afc765d` - Access Group ID
type AccessGroup struct {
	pulumi.CustomResourceState

	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayOutput `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayOutput `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayOutput `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	if args == nil || args.Includes == nil {
		return nil, errors.New("missing required argument 'Includes'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &AccessGroupArgs{}
	}
	var resource AccessGroup
	err := ctx.RegisterResource("cloudflare:index/accessGroup:AccessGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGroupState, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	var resource AccessGroup
	err := ctx.ReadResource("cloudflare:index/accessGroup:AccessGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGroup resources.
type accessGroupState struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name *string `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessGroupState struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayInput
	// Friendly name of the Access Group.
	Name pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayInput
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupState)(nil)).Elem()
}

type accessGroupArgs struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name string `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayInput
	// Friendly name of the Access Group.
	Name pulumi.StringInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayInput
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupArgs)(nil)).Elem()
}

type AccessGroupInput interface {
	pulumi.Input

	ToAccessGroupOutput() AccessGroupOutput
	ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput
}

func (AccessGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessGroup)(nil)).Elem()
}

func (i AccessGroup) ToAccessGroupOutput() AccessGroupOutput {
	return i.ToAccessGroupOutputWithContext(context.Background())
}

func (i AccessGroup) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupOutput)
}

type AccessGroupOutput struct {
	*pulumi.OutputState
}

func (AccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessGroupOutput)(nil)).Elem()
}

func (o AccessGroupOutput) ToAccessGroupOutput() AccessGroupOutput {
	return o
}

func (o AccessGroupOutput) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AccessGroupOutput{})
}
