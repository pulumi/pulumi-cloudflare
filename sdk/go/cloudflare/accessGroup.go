// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Access Group resource. Access Groups are used
// in conjunction with Access Policies to restrict access to a
// particular resource based on group membership.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-cloudflare/sdk/v4/go/cloudflare"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := cloudflare.NewAccessGroup(ctx, "testGroupAccessGroup", &cloudflare.AccessGroupArgs{
// 			AccountId: pulumi.String("975ecf5a45e3bcb680dba0722a420ad9"),
// 			Name:      pulumi.String("staging group"),
// 			Includes: AccessGroupIncludeArray{
// 				&AccessGroupIncludeArgs{
// 					Emails: pulumi.StringArray{
// 						pulumi.String("test@example.com"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = cloudflare.NewAccessGroup(ctx, "testGroupIndex/accessGroupAccessGroup", &cloudflare.AccessGroupArgs{
// 			AccountId: pulumi.String("975ecf5a45e3bcb680dba0722a420ad9"),
// 			Name:      pulumi.String("staging group"),
// 			Includes: AccessGroupIncludeArray{
// 				&AccessGroupIncludeArgs{
// 					Emails: pulumi.StringArray{
// 						pulumi.String("test@example.com"),
// 					},
// 				},
// 			},
// 			Requires: AccessGroupRequireArray{
// 				Ips: AccessGroupRequireArgs{
// 					_var.Office_ip,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Conditions
//
// `require`, `exclude` and `include` arguments share the available
// conditions which can be applied. The conditions are:
//
// * `ip` - (Optional) A list of IP addresses or ranges. Example:
// `ip = ["1.2.3.4", "10.0.0.0/2"]`
// * `email` - (Optional) A list of email addresses. Example:
// `email = ["test@example.com"]`
// * `emailDomain` - (Optional) A list of email domains. Example:
// `emailDomain = ["example.com"]`
// * `serviceToken` - (Optional) A list of service token ids. Example:
// `serviceToken = [cloudflare_access_service_token.demo.id]`
// * `anyValidServiceToken` - (Optional) Boolean indicating if allow
// all tokens to be granted. Example: `anyValidServiceToken = true`
// * `group` - (Optional) A list of access group ids. Example:
// `group = [cloudflare_access_group.demo.id]`
// * `everyone` - (Optional) Boolean indicating permitting access for all
// requests. Example: `everyone = true`
// * `certificate` - (Optional) Whether to use mTLS certificate authentication.
// * `commonName` - (Optional) Use a certificate common name to authenticate with.
// * `authMethod` - (Optional) A string identifying the authentication
// method code. The list of codes are listed here: https://tools.ietf.org/html/rfc8176#section-2.
// Custom values are also supported. Example: `authMethod = ["swk"]`
// * `geo` - (Optional) A list of country codes. Example: `geo = ["US"]`
// * `loginMethod` - (Optional) A list of identity provider ids. Example: `loginMethod = [cloudflare_access_identity_provider.my_idp.id]`
// * `devicePosture` - (Optional) A list of devicePosture integration_uids. Example: `devicePosture = [cloudflare_device_posture_rule.my_posture_rule.id]`
// * `gsuite` - (Optional) Use GSuite as the authentication mechanism. Example:
// * `github` - (Optional) Use a GitHub organization as the `include` condition. Example:
// * `azure` - (Optional) Use Azure AD as the `include` condition. Example:
// * `okta` - (Optional) Use Okta as the `include` condition. Example:
// * `saml` - (Optional) Use an external SAML setup as the `include` condition.
// Example:
//   * `externalEvaluation` - (Optional) Pass a user's identity to an external URL as the `include` condition.
//     Example:
//
// ## Import
//
// Access Groups can be imported using a composite ID formed of account ID and group ID.
//
// ```sh
//  $ pulumi import cloudflare:index/accessGroup:AccessGroup staging 975ecf5a45e3bcb680dba0722a420ad9/67ea780ce4982c1cfbe6b7293afc765d
// ```
//
//  where * `975ecf5a45e3bcb680dba0722a420ad9` - Account ID * `67ea780ce4982c1cfbe6b7293afc765d` - Access Group ID
type AccessGroup struct {
	pulumi.CustomResourceState

	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayOutput `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayOutput `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayOutput `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Includes == nil {
		return nil, errors.New("invalid value for required argument 'Includes'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource AccessGroup
	err := ctx.RegisterResource("cloudflare:index/accessGroup:AccessGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGroupState, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	var resource AccessGroup
	err := ctx.ReadResource("cloudflare:index/accessGroup:AccessGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGroup resources.
type accessGroupState struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name *string `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessGroupState struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayInput
	// Friendly name of the Access Group.
	Name pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayInput
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupState)(nil)).Elem()
}

type accessGroupArgs struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId *string `pulumi:"accountId"`
	// A series of access conditions, see below for
	// full list.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// A series of access conditions, see below for
	// full list.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Friendly name of the Access Group.
	Name string `pulumi:"name"`
	// A series of access conditions, see below for
	// full list.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// The ID of the account the group is associated with. Conflicts with `zoneId`.
	AccountId pulumi.StringPtrInput
	// A series of access conditions, see below for
	// full list.
	Excludes AccessGroupExcludeArrayInput
	// A series of access conditions, see below for
	// full list.
	Includes AccessGroupIncludeArrayInput
	// Friendly name of the Access Group.
	Name pulumi.StringInput
	// A series of access conditions, see below for
	// full list.
	Requires AccessGroupRequireArrayInput
	// The ID of the zone the group is associated with. Conflicts with `accountId`.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupArgs)(nil)).Elem()
}

type AccessGroupInput interface {
	pulumi.Input

	ToAccessGroupOutput() AccessGroupOutput
	ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput
}

func (*AccessGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroup)(nil)).Elem()
}

func (i *AccessGroup) ToAccessGroupOutput() AccessGroupOutput {
	return i.ToAccessGroupOutputWithContext(context.Background())
}

func (i *AccessGroup) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupOutput)
}

// AccessGroupArrayInput is an input type that accepts AccessGroupArray and AccessGroupArrayOutput values.
// You can construct a concrete instance of `AccessGroupArrayInput` via:
//
//          AccessGroupArray{ AccessGroupArgs{...} }
type AccessGroupArrayInput interface {
	pulumi.Input

	ToAccessGroupArrayOutput() AccessGroupArrayOutput
	ToAccessGroupArrayOutputWithContext(context.Context) AccessGroupArrayOutput
}

type AccessGroupArray []AccessGroupInput

func (AccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroup)(nil)).Elem()
}

func (i AccessGroupArray) ToAccessGroupArrayOutput() AccessGroupArrayOutput {
	return i.ToAccessGroupArrayOutputWithContext(context.Background())
}

func (i AccessGroupArray) ToAccessGroupArrayOutputWithContext(ctx context.Context) AccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupArrayOutput)
}

// AccessGroupMapInput is an input type that accepts AccessGroupMap and AccessGroupMapOutput values.
// You can construct a concrete instance of `AccessGroupMapInput` via:
//
//          AccessGroupMap{ "key": AccessGroupArgs{...} }
type AccessGroupMapInput interface {
	pulumi.Input

	ToAccessGroupMapOutput() AccessGroupMapOutput
	ToAccessGroupMapOutputWithContext(context.Context) AccessGroupMapOutput
}

type AccessGroupMap map[string]AccessGroupInput

func (AccessGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroup)(nil)).Elem()
}

func (i AccessGroupMap) ToAccessGroupMapOutput() AccessGroupMapOutput {
	return i.ToAccessGroupMapOutputWithContext(context.Background())
}

func (i AccessGroupMap) ToAccessGroupMapOutputWithContext(ctx context.Context) AccessGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupMapOutput)
}

type AccessGroupOutput struct{ *pulumi.OutputState }

func (AccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroup)(nil)).Elem()
}

func (o AccessGroupOutput) ToAccessGroupOutput() AccessGroupOutput {
	return o
}

func (o AccessGroupOutput) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return o
}

// The ID of the account the group is associated with. Conflicts with `zoneId`.
func (o AccessGroupOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// A series of access conditions, see below for
// full list.
func (o AccessGroupOutput) Excludes() AccessGroupExcludeArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupExcludeArrayOutput { return v.Excludes }).(AccessGroupExcludeArrayOutput)
}

// A series of access conditions, see below for
// full list.
func (o AccessGroupOutput) Includes() AccessGroupIncludeArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupIncludeArrayOutput { return v.Includes }).(AccessGroupIncludeArrayOutput)
}

// Friendly name of the Access Group.
func (o AccessGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A series of access conditions, see below for
// full list.
func (o AccessGroupOutput) Requires() AccessGroupRequireArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupRequireArrayOutput { return v.Requires }).(AccessGroupRequireArrayOutput)
}

// The ID of the zone the group is associated with. Conflicts with `accountId`.
func (o AccessGroupOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type AccessGroupArrayOutput struct{ *pulumi.OutputState }

func (AccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroup)(nil)).Elem()
}

func (o AccessGroupArrayOutput) ToAccessGroupArrayOutput() AccessGroupArrayOutput {
	return o
}

func (o AccessGroupArrayOutput) ToAccessGroupArrayOutputWithContext(ctx context.Context) AccessGroupArrayOutput {
	return o
}

func (o AccessGroupArrayOutput) Index(i pulumi.IntInput) AccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessGroup {
		return vs[0].([]*AccessGroup)[vs[1].(int)]
	}).(AccessGroupOutput)
}

type AccessGroupMapOutput struct{ *pulumi.OutputState }

func (AccessGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroup)(nil)).Elem()
}

func (o AccessGroupMapOutput) ToAccessGroupMapOutput() AccessGroupMapOutput {
	return o
}

func (o AccessGroupMapOutput) ToAccessGroupMapOutputWithContext(ctx context.Context) AccessGroupMapOutput {
	return o
}

func (o AccessGroupMapOutput) MapIndex(k pulumi.StringInput) AccessGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessGroup {
		return vs[0].(map[string]*AccessGroup)[vs[1].(string)]
	}).(AccessGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupInput)(nil)).Elem(), &AccessGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupArrayInput)(nil)).Elem(), AccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupMapInput)(nil)).Elem(), AccessGroupMap{})
	pulumi.RegisterOutputType(AccessGroupOutput{})
	pulumi.RegisterOutputType(AccessGroupArrayOutput{})
	pulumi.RegisterOutputType(AccessGroupMapOutput{})
}
