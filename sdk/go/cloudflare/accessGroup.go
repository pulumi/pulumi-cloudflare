// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustAccessGroup(ctx, "example_zero_trust_access_group", &cloudflare.ZeroTrustAccessGroupArgs{
//				Includes: cloudflare.ZeroTrustAccessGroupIncludeArray{
//					&cloudflare.ZeroTrustAccessGroupIncludeArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupIncludeGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//				Name:   pulumi.String("Allow devs"),
//				ZoneId: pulumi.String("zone_id"),
//				Excludes: cloudflare.ZeroTrustAccessGroupExcludeArray{
//					&cloudflare.ZeroTrustAccessGroupExcludeArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupExcludeGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//				IsDefault: pulumi.Bool(true),
//				Requires: cloudflare.ZeroTrustAccessGroupRequireArray{
//					&cloudflare.ZeroTrustAccessGroupRequireArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupRequireGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/accessGroup:AccessGroup example '<{accounts|zones}/{account_id|zone_id}>/<group_id>'
// ```
//
// Deprecated: cloudflare.index/accessgroup.AccessGroup has been deprecated in favor of cloudflare.index/zerotrustaccessgroup.ZeroTrustAccessGroup
type AccessGroup struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes AccessGroupExcludeArrayOutput `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes AccessGroupIncludeArrayOutput `pulumi:"includes"`
	// Whether this is the default group
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// The name of the Access group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires AccessGroupRequireArrayOutput `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewAccessGroup(ctx *pulumi.Context,
	name string, args *AccessGroupArgs, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Includes == nil {
		return nil, errors.New("invalid value for required argument 'Includes'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/accessGroup:AccessGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessGroup
	err := ctx.RegisterResource("cloudflare:index/accessGroup:AccessGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessGroup gets an existing AccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessGroupState, opts ...pulumi.ResourceOption) (*AccessGroup, error) {
	var resource AccessGroup
	err := ctx.ReadResource("cloudflare:index/accessGroup:AccessGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessGroup resources.
type accessGroupState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Whether this is the default group
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the Access group.
	Name *string `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type AccessGroupState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes AccessGroupExcludeArrayInput
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes AccessGroupIncludeArrayInput
	// Whether this is the default group
	IsDefault pulumi.BoolPtrInput
	// The name of the Access group.
	Name pulumi.StringPtrInput
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires AccessGroupRequireArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupState)(nil)).Elem()
}

type accessGroupArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes []AccessGroupExclude `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []AccessGroupInclude `pulumi:"includes"`
	// Whether this is the default group
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the Access group.
	Name string `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires []AccessGroupRequire `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a AccessGroup resource.
type AccessGroupArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes AccessGroupExcludeArrayInput
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes AccessGroupIncludeArrayInput
	// Whether this is the default group
	IsDefault pulumi.BoolPtrInput
	// The name of the Access group.
	Name pulumi.StringInput
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires AccessGroupRequireArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (AccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessGroupArgs)(nil)).Elem()
}

type AccessGroupInput interface {
	pulumi.Input

	ToAccessGroupOutput() AccessGroupOutput
	ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput
}

func (*AccessGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroup)(nil)).Elem()
}

func (i *AccessGroup) ToAccessGroupOutput() AccessGroupOutput {
	return i.ToAccessGroupOutputWithContext(context.Background())
}

func (i *AccessGroup) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupOutput)
}

// AccessGroupArrayInput is an input type that accepts AccessGroupArray and AccessGroupArrayOutput values.
// You can construct a concrete instance of `AccessGroupArrayInput` via:
//
//	AccessGroupArray{ AccessGroupArgs{...} }
type AccessGroupArrayInput interface {
	pulumi.Input

	ToAccessGroupArrayOutput() AccessGroupArrayOutput
	ToAccessGroupArrayOutputWithContext(context.Context) AccessGroupArrayOutput
}

type AccessGroupArray []AccessGroupInput

func (AccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroup)(nil)).Elem()
}

func (i AccessGroupArray) ToAccessGroupArrayOutput() AccessGroupArrayOutput {
	return i.ToAccessGroupArrayOutputWithContext(context.Background())
}

func (i AccessGroupArray) ToAccessGroupArrayOutputWithContext(ctx context.Context) AccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupArrayOutput)
}

// AccessGroupMapInput is an input type that accepts AccessGroupMap and AccessGroupMapOutput values.
// You can construct a concrete instance of `AccessGroupMapInput` via:
//
//	AccessGroupMap{ "key": AccessGroupArgs{...} }
type AccessGroupMapInput interface {
	pulumi.Input

	ToAccessGroupMapOutput() AccessGroupMapOutput
	ToAccessGroupMapOutputWithContext(context.Context) AccessGroupMapOutput
}

type AccessGroupMap map[string]AccessGroupInput

func (AccessGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroup)(nil)).Elem()
}

func (i AccessGroupMap) ToAccessGroupMapOutput() AccessGroupMapOutput {
	return i.ToAccessGroupMapOutputWithContext(context.Background())
}

func (i AccessGroupMap) ToAccessGroupMapOutputWithContext(ctx context.Context) AccessGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessGroupMapOutput)
}

type AccessGroupOutput struct{ *pulumi.OutputState }

func (AccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessGroup)(nil)).Elem()
}

func (o AccessGroupOutput) ToAccessGroupOutput() AccessGroupOutput {
	return o
}

func (o AccessGroupOutput) ToAccessGroupOutputWithContext(ctx context.Context) AccessGroupOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o AccessGroupOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
func (o AccessGroupOutput) Excludes() AccessGroupExcludeArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupExcludeArrayOutput { return v.Excludes }).(AccessGroupExcludeArrayOutput)
}

// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
func (o AccessGroupOutput) Includes() AccessGroupIncludeArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupIncludeArrayOutput { return v.Includes }).(AccessGroupIncludeArrayOutput)
}

// Whether this is the default group
func (o AccessGroupOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The name of the Access group.
func (o AccessGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
func (o AccessGroupOutput) Requires() AccessGroupRequireArrayOutput {
	return o.ApplyT(func(v *AccessGroup) AccessGroupRequireArrayOutput { return v.Requires }).(AccessGroupRequireArrayOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o AccessGroupOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessGroup) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type AccessGroupArrayOutput struct{ *pulumi.OutputState }

func (AccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessGroup)(nil)).Elem()
}

func (o AccessGroupArrayOutput) ToAccessGroupArrayOutput() AccessGroupArrayOutput {
	return o
}

func (o AccessGroupArrayOutput) ToAccessGroupArrayOutputWithContext(ctx context.Context) AccessGroupArrayOutput {
	return o
}

func (o AccessGroupArrayOutput) Index(i pulumi.IntInput) AccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessGroup {
		return vs[0].([]*AccessGroup)[vs[1].(int)]
	}).(AccessGroupOutput)
}

type AccessGroupMapOutput struct{ *pulumi.OutputState }

func (AccessGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessGroup)(nil)).Elem()
}

func (o AccessGroupMapOutput) ToAccessGroupMapOutput() AccessGroupMapOutput {
	return o
}

func (o AccessGroupMapOutput) ToAccessGroupMapOutputWithContext(ctx context.Context) AccessGroupMapOutput {
	return o
}

func (o AccessGroupMapOutput) MapIndex(k pulumi.StringInput) AccessGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessGroup {
		return vs[0].(map[string]*AccessGroup)[vs[1].(string)]
	}).(AccessGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupInput)(nil)).Elem(), &AccessGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupArrayInput)(nil)).Elem(), AccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessGroupMapInput)(nil)).Elem(), AccessGroupMap{})
	pulumi.RegisterOutputType(AccessGroupOutput{})
	pulumi.RegisterOutputType(AccessGroupArrayOutput{})
	pulumi.RegisterOutputType(AccessGroupMapOutput{})
}
