// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustGatewayProxyEndpoint(ctx, "example_zero_trust_gateway_proxy_endpoint", &cloudflare.ZeroTrustGatewayProxyEndpointArgs{
//				AccountId: pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Ips: pulumi.StringArray{
//					pulumi.String("192.0.2.1/32"),
//				},
//				Name: pulumi.String("Devops team"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint example '<account_id>/<proxy_endpoint_id>'
// ```
//
// Deprecated: cloudflare.index/teamsproxyendpoint.TeamsProxyEndpoint has been deprecated in favor of cloudflare.index/zerotrustgatewayproxyendpoint.ZeroTrustGatewayProxyEndpoint
type TeamsProxyEndpoint struct {
	pulumi.CustomResourceState

	AccountId pulumi.StringOutput `pulumi:"accountId"`
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A list of CIDRs to restrict ingress connections.
	Ips pulumi.StringArrayOutput `pulumi:"ips"`
	// The name of the proxy endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// The subdomain to be used as the destination in the proxy client.
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTeamsProxyEndpoint registers a new resource with the given unique name, arguments, and options.
func NewTeamsProxyEndpoint(ctx *pulumi.Context,
	name string, args *TeamsProxyEndpointArgs, opts ...pulumi.ResourceOption) (*TeamsProxyEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Ips == nil {
		return nil, errors.New("invalid value for required argument 'Ips'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamsProxyEndpoint
	err := ctx.RegisterResource("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamsProxyEndpoint gets an existing TeamsProxyEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamsProxyEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamsProxyEndpointState, opts ...pulumi.ResourceOption) (*TeamsProxyEndpoint, error) {
	var resource TeamsProxyEndpoint
	err := ctx.ReadResource("cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamsProxyEndpoint resources.
type teamsProxyEndpointState struct {
	AccountId *string `pulumi:"accountId"`
	CreatedAt *string `pulumi:"createdAt"`
	// A list of CIDRs to restrict ingress connections.
	Ips []string `pulumi:"ips"`
	// The name of the proxy endpoint.
	Name *string `pulumi:"name"`
	// The subdomain to be used as the destination in the proxy client.
	Subdomain *string `pulumi:"subdomain"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TeamsProxyEndpointState struct {
	AccountId pulumi.StringPtrInput
	CreatedAt pulumi.StringPtrInput
	// A list of CIDRs to restrict ingress connections.
	Ips pulumi.StringArrayInput
	// The name of the proxy endpoint.
	Name pulumi.StringPtrInput
	// The subdomain to be used as the destination in the proxy client.
	Subdomain pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (TeamsProxyEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsProxyEndpointState)(nil)).Elem()
}

type teamsProxyEndpointArgs struct {
	AccountId string `pulumi:"accountId"`
	// A list of CIDRs to restrict ingress connections.
	Ips []string `pulumi:"ips"`
	// The name of the proxy endpoint.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a TeamsProxyEndpoint resource.
type TeamsProxyEndpointArgs struct {
	AccountId pulumi.StringInput
	// A list of CIDRs to restrict ingress connections.
	Ips pulumi.StringArrayInput
	// The name of the proxy endpoint.
	Name pulumi.StringInput
}

func (TeamsProxyEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamsProxyEndpointArgs)(nil)).Elem()
}

type TeamsProxyEndpointInput interface {
	pulumi.Input

	ToTeamsProxyEndpointOutput() TeamsProxyEndpointOutput
	ToTeamsProxyEndpointOutputWithContext(ctx context.Context) TeamsProxyEndpointOutput
}

func (*TeamsProxyEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsProxyEndpoint)(nil)).Elem()
}

func (i *TeamsProxyEndpoint) ToTeamsProxyEndpointOutput() TeamsProxyEndpointOutput {
	return i.ToTeamsProxyEndpointOutputWithContext(context.Background())
}

func (i *TeamsProxyEndpoint) ToTeamsProxyEndpointOutputWithContext(ctx context.Context) TeamsProxyEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsProxyEndpointOutput)
}

// TeamsProxyEndpointArrayInput is an input type that accepts TeamsProxyEndpointArray and TeamsProxyEndpointArrayOutput values.
// You can construct a concrete instance of `TeamsProxyEndpointArrayInput` via:
//
//	TeamsProxyEndpointArray{ TeamsProxyEndpointArgs{...} }
type TeamsProxyEndpointArrayInput interface {
	pulumi.Input

	ToTeamsProxyEndpointArrayOutput() TeamsProxyEndpointArrayOutput
	ToTeamsProxyEndpointArrayOutputWithContext(context.Context) TeamsProxyEndpointArrayOutput
}

type TeamsProxyEndpointArray []TeamsProxyEndpointInput

func (TeamsProxyEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsProxyEndpoint)(nil)).Elem()
}

func (i TeamsProxyEndpointArray) ToTeamsProxyEndpointArrayOutput() TeamsProxyEndpointArrayOutput {
	return i.ToTeamsProxyEndpointArrayOutputWithContext(context.Background())
}

func (i TeamsProxyEndpointArray) ToTeamsProxyEndpointArrayOutputWithContext(ctx context.Context) TeamsProxyEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsProxyEndpointArrayOutput)
}

// TeamsProxyEndpointMapInput is an input type that accepts TeamsProxyEndpointMap and TeamsProxyEndpointMapOutput values.
// You can construct a concrete instance of `TeamsProxyEndpointMapInput` via:
//
//	TeamsProxyEndpointMap{ "key": TeamsProxyEndpointArgs{...} }
type TeamsProxyEndpointMapInput interface {
	pulumi.Input

	ToTeamsProxyEndpointMapOutput() TeamsProxyEndpointMapOutput
	ToTeamsProxyEndpointMapOutputWithContext(context.Context) TeamsProxyEndpointMapOutput
}

type TeamsProxyEndpointMap map[string]TeamsProxyEndpointInput

func (TeamsProxyEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsProxyEndpoint)(nil)).Elem()
}

func (i TeamsProxyEndpointMap) ToTeamsProxyEndpointMapOutput() TeamsProxyEndpointMapOutput {
	return i.ToTeamsProxyEndpointMapOutputWithContext(context.Background())
}

func (i TeamsProxyEndpointMap) ToTeamsProxyEndpointMapOutputWithContext(ctx context.Context) TeamsProxyEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamsProxyEndpointMapOutput)
}

type TeamsProxyEndpointOutput struct{ *pulumi.OutputState }

func (TeamsProxyEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamsProxyEndpoint)(nil)).Elem()
}

func (o TeamsProxyEndpointOutput) ToTeamsProxyEndpointOutput() TeamsProxyEndpointOutput {
	return o
}

func (o TeamsProxyEndpointOutput) ToTeamsProxyEndpointOutputWithContext(ctx context.Context) TeamsProxyEndpointOutput {
	return o
}

func (o TeamsProxyEndpointOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o TeamsProxyEndpointOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// A list of CIDRs to restrict ingress connections.
func (o TeamsProxyEndpointOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringArrayOutput { return v.Ips }).(pulumi.StringArrayOutput)
}

// The name of the proxy endpoint.
func (o TeamsProxyEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The subdomain to be used as the destination in the proxy client.
func (o TeamsProxyEndpointOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

func (o TeamsProxyEndpointOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamsProxyEndpoint) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TeamsProxyEndpointArrayOutput struct{ *pulumi.OutputState }

func (TeamsProxyEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamsProxyEndpoint)(nil)).Elem()
}

func (o TeamsProxyEndpointArrayOutput) ToTeamsProxyEndpointArrayOutput() TeamsProxyEndpointArrayOutput {
	return o
}

func (o TeamsProxyEndpointArrayOutput) ToTeamsProxyEndpointArrayOutputWithContext(ctx context.Context) TeamsProxyEndpointArrayOutput {
	return o
}

func (o TeamsProxyEndpointArrayOutput) Index(i pulumi.IntInput) TeamsProxyEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamsProxyEndpoint {
		return vs[0].([]*TeamsProxyEndpoint)[vs[1].(int)]
	}).(TeamsProxyEndpointOutput)
}

type TeamsProxyEndpointMapOutput struct{ *pulumi.OutputState }

func (TeamsProxyEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamsProxyEndpoint)(nil)).Elem()
}

func (o TeamsProxyEndpointMapOutput) ToTeamsProxyEndpointMapOutput() TeamsProxyEndpointMapOutput {
	return o
}

func (o TeamsProxyEndpointMapOutput) ToTeamsProxyEndpointMapOutputWithContext(ctx context.Context) TeamsProxyEndpointMapOutput {
	return o
}

func (o TeamsProxyEndpointMapOutput) MapIndex(k pulumi.StringInput) TeamsProxyEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamsProxyEndpoint {
		return vs[0].(map[string]*TeamsProxyEndpoint)[vs[1].(string)]
	}).(TeamsProxyEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsProxyEndpointInput)(nil)).Elem(), &TeamsProxyEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsProxyEndpointArrayInput)(nil)).Elem(), TeamsProxyEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamsProxyEndpointMapInput)(nil)).Elem(), TeamsProxyEndpointMap{})
	pulumi.RegisterOutputType(TeamsProxyEndpointOutput{})
	pulumi.RegisterOutputType(TeamsProxyEndpointArrayOutput{})
	pulumi.RegisterOutputType(TeamsProxyEndpointMapOutput{})
}
