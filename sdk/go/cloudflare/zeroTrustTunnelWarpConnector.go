// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustTunnelWarpConnector(ctx, "example_zero_trust_tunnel_warp_connector", &cloudflare.ZeroTrustTunnelWarpConnectorArgs{
//				AccountId: pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Name:      pulumi.String("blog"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustTunnelWarpConnector:ZeroTrustTunnelWarpConnector example '<account_id>/<tunnel_id>'
// ```
type ZeroTrustTunnelWarpConnector struct {
	pulumi.CustomResourceState

	// Cloudflare account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag pulumi.StringOutput `pulumi:"accountTag"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	//
	// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
	Connections ZeroTrustTunnelWarpConnectorConnectionArrayOutput `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringOutput `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringOutput `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolOutput `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringOutput `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrOutput `pulumi:"tunnelSecret"`
}

// NewZeroTrustTunnelWarpConnector registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustTunnelWarpConnector(ctx *pulumi.Context,
	name string, args *ZeroTrustTunnelWarpConnectorArgs, opts ...pulumi.ResourceOption) (*ZeroTrustTunnelWarpConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.TunnelSecret != nil {
		args.TunnelSecret = pulumi.ToSecret(args.TunnelSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tunnelSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustTunnelWarpConnector
	err := ctx.RegisterResource("cloudflare:index/zeroTrustTunnelWarpConnector:ZeroTrustTunnelWarpConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustTunnelWarpConnector gets an existing ZeroTrustTunnelWarpConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustTunnelWarpConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustTunnelWarpConnectorState, opts ...pulumi.ResourceOption) (*ZeroTrustTunnelWarpConnector, error) {
	var resource ZeroTrustTunnelWarpConnector
	err := ctx.ReadResource("cloudflare:index/zeroTrustTunnelWarpConnector:ZeroTrustTunnelWarpConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustTunnelWarpConnector resources.
type zeroTrustTunnelWarpConnectorState struct {
	// Cloudflare account ID
	AccountId *string `pulumi:"accountId"`
	// Cloudflare account ID
	AccountTag *string `pulumi:"accountTag"`
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	//
	// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
	Connections []ZeroTrustTunnelWarpConnectorConnection `pulumi:"connections"`
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt *string `pulumi:"connsActiveAt"`
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt *string `pulumi:"connsInactiveAt"`
	// Timestamp of when the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// Metadata associated with the tunnel.
	Metadata *string `pulumi:"metadata"`
	// A user-friendly name for a tunnel.
	Name *string `pulumi:"name"`
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig *bool `pulumi:"remoteConfig"`
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status *string `pulumi:"status"`
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType *string `pulumi:"tunType"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

type ZeroTrustTunnelWarpConnectorState struct {
	// Cloudflare account ID
	AccountId pulumi.StringPtrInput
	// Cloudflare account ID
	AccountTag pulumi.StringPtrInput
	// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
	//
	// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
	Connections ZeroTrustTunnelWarpConnectorConnectionArrayInput
	// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
	ConnsActiveAt pulumi.StringPtrInput
	// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
	ConnsInactiveAt pulumi.StringPtrInput
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringPtrInput
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringPtrInput
	// Metadata associated with the tunnel.
	Metadata pulumi.StringPtrInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringPtrInput
	// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
	RemoteConfig pulumi.BoolPtrInput
	// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
	// Available values: "inactive", "degraded", "healthy", "down".
	Status pulumi.StringPtrInput
	// The type of tunnel.
	// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
	TunType pulumi.StringPtrInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (ZeroTrustTunnelWarpConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustTunnelWarpConnectorState)(nil)).Elem()
}

type zeroTrustTunnelWarpConnectorArgs struct {
	// Cloudflare account ID
	AccountId string `pulumi:"accountId"`
	// A user-friendly name for a tunnel.
	Name string `pulumi:"name"`
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret *string `pulumi:"tunnelSecret"`
}

// The set of arguments for constructing a ZeroTrustTunnelWarpConnector resource.
type ZeroTrustTunnelWarpConnectorArgs struct {
	// Cloudflare account ID
	AccountId pulumi.StringInput
	// A user-friendly name for a tunnel.
	Name pulumi.StringInput
	// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
	TunnelSecret pulumi.StringPtrInput
}

func (ZeroTrustTunnelWarpConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustTunnelWarpConnectorArgs)(nil)).Elem()
}

type ZeroTrustTunnelWarpConnectorInput interface {
	pulumi.Input

	ToZeroTrustTunnelWarpConnectorOutput() ZeroTrustTunnelWarpConnectorOutput
	ToZeroTrustTunnelWarpConnectorOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorOutput
}

func (*ZeroTrustTunnelWarpConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (i *ZeroTrustTunnelWarpConnector) ToZeroTrustTunnelWarpConnectorOutput() ZeroTrustTunnelWarpConnectorOutput {
	return i.ToZeroTrustTunnelWarpConnectorOutputWithContext(context.Background())
}

func (i *ZeroTrustTunnelWarpConnector) ToZeroTrustTunnelWarpConnectorOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelWarpConnectorOutput)
}

// ZeroTrustTunnelWarpConnectorArrayInput is an input type that accepts ZeroTrustTunnelWarpConnectorArray and ZeroTrustTunnelWarpConnectorArrayOutput values.
// You can construct a concrete instance of `ZeroTrustTunnelWarpConnectorArrayInput` via:
//
//	ZeroTrustTunnelWarpConnectorArray{ ZeroTrustTunnelWarpConnectorArgs{...} }
type ZeroTrustTunnelWarpConnectorArrayInput interface {
	pulumi.Input

	ToZeroTrustTunnelWarpConnectorArrayOutput() ZeroTrustTunnelWarpConnectorArrayOutput
	ToZeroTrustTunnelWarpConnectorArrayOutputWithContext(context.Context) ZeroTrustTunnelWarpConnectorArrayOutput
}

type ZeroTrustTunnelWarpConnectorArray []ZeroTrustTunnelWarpConnectorInput

func (ZeroTrustTunnelWarpConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (i ZeroTrustTunnelWarpConnectorArray) ToZeroTrustTunnelWarpConnectorArrayOutput() ZeroTrustTunnelWarpConnectorArrayOutput {
	return i.ToZeroTrustTunnelWarpConnectorArrayOutputWithContext(context.Background())
}

func (i ZeroTrustTunnelWarpConnectorArray) ToZeroTrustTunnelWarpConnectorArrayOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelWarpConnectorArrayOutput)
}

// ZeroTrustTunnelWarpConnectorMapInput is an input type that accepts ZeroTrustTunnelWarpConnectorMap and ZeroTrustTunnelWarpConnectorMapOutput values.
// You can construct a concrete instance of `ZeroTrustTunnelWarpConnectorMapInput` via:
//
//	ZeroTrustTunnelWarpConnectorMap{ "key": ZeroTrustTunnelWarpConnectorArgs{...} }
type ZeroTrustTunnelWarpConnectorMapInput interface {
	pulumi.Input

	ToZeroTrustTunnelWarpConnectorMapOutput() ZeroTrustTunnelWarpConnectorMapOutput
	ToZeroTrustTunnelWarpConnectorMapOutputWithContext(context.Context) ZeroTrustTunnelWarpConnectorMapOutput
}

type ZeroTrustTunnelWarpConnectorMap map[string]ZeroTrustTunnelWarpConnectorInput

func (ZeroTrustTunnelWarpConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (i ZeroTrustTunnelWarpConnectorMap) ToZeroTrustTunnelWarpConnectorMapOutput() ZeroTrustTunnelWarpConnectorMapOutput {
	return i.ToZeroTrustTunnelWarpConnectorMapOutputWithContext(context.Background())
}

func (i ZeroTrustTunnelWarpConnectorMap) ToZeroTrustTunnelWarpConnectorMapOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustTunnelWarpConnectorMapOutput)
}

type ZeroTrustTunnelWarpConnectorOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelWarpConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (o ZeroTrustTunnelWarpConnectorOutput) ToZeroTrustTunnelWarpConnectorOutput() ZeroTrustTunnelWarpConnectorOutput {
	return o
}

func (o ZeroTrustTunnelWarpConnectorOutput) ToZeroTrustTunnelWarpConnectorOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorOutput {
	return o
}

// Cloudflare account ID
func (o ZeroTrustTunnelWarpConnectorOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Cloudflare account ID
func (o ZeroTrustTunnelWarpConnectorOutput) AccountTag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.AccountTag }).(pulumi.StringOutput)
}

// The Cloudflare Tunnel connections between your origin and Cloudflare's edge.
//
// Deprecated: This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
func (o ZeroTrustTunnelWarpConnectorOutput) Connections() ZeroTrustTunnelWarpConnectorConnectionArrayOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) ZeroTrustTunnelWarpConnectorConnectionArrayOutput {
		return v.Connections
	}).(ZeroTrustTunnelWarpConnectorConnectionArrayOutput)
}

// Timestamp of when the tunnel established at least one connection to Cloudflare's edge. If `null`, the tunnel is inactive.
func (o ZeroTrustTunnelWarpConnectorOutput) ConnsActiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.ConnsActiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the tunnel became inactive (no connections to Cloudflare's edge). If `null`, the tunnel is active.
func (o ZeroTrustTunnelWarpConnectorOutput) ConnsInactiveAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.ConnsInactiveAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was created.
func (o ZeroTrustTunnelWarpConnectorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
func (o ZeroTrustTunnelWarpConnectorOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Metadata associated with the tunnel.
func (o ZeroTrustTunnelWarpConnectorOutput) Metadata() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.Metadata }).(pulumi.StringOutput)
}

// A user-friendly name for a tunnel.
func (o ZeroTrustTunnelWarpConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
func (o ZeroTrustTunnelWarpConnectorOutput) RemoteConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.BoolOutput { return v.RemoteConfig }).(pulumi.BoolOutput)
}

// The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
// Available values: "inactive", "degraded", "healthy", "down".
func (o ZeroTrustTunnelWarpConnectorOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of tunnel.
// Available values: "cfd*tunnel", "warp*connector", "warp", "magic", "ipSec", "gre", "cni".
func (o ZeroTrustTunnelWarpConnectorOutput) TunType() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringOutput { return v.TunType }).(pulumi.StringOutput)
}

// Sets the password required to run a locally-managed tunnel. Must be at least 32 bytes and encoded as a base64 string.
func (o ZeroTrustTunnelWarpConnectorOutput) TunnelSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustTunnelWarpConnector) pulumi.StringPtrOutput { return v.TunnelSecret }).(pulumi.StringPtrOutput)
}

type ZeroTrustTunnelWarpConnectorArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelWarpConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (o ZeroTrustTunnelWarpConnectorArrayOutput) ToZeroTrustTunnelWarpConnectorArrayOutput() ZeroTrustTunnelWarpConnectorArrayOutput {
	return o
}

func (o ZeroTrustTunnelWarpConnectorArrayOutput) ToZeroTrustTunnelWarpConnectorArrayOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorArrayOutput {
	return o
}

func (o ZeroTrustTunnelWarpConnectorArrayOutput) Index(i pulumi.IntInput) ZeroTrustTunnelWarpConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustTunnelWarpConnector {
		return vs[0].([]*ZeroTrustTunnelWarpConnector)[vs[1].(int)]
	}).(ZeroTrustTunnelWarpConnectorOutput)
}

type ZeroTrustTunnelWarpConnectorMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustTunnelWarpConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustTunnelWarpConnector)(nil)).Elem()
}

func (o ZeroTrustTunnelWarpConnectorMapOutput) ToZeroTrustTunnelWarpConnectorMapOutput() ZeroTrustTunnelWarpConnectorMapOutput {
	return o
}

func (o ZeroTrustTunnelWarpConnectorMapOutput) ToZeroTrustTunnelWarpConnectorMapOutputWithContext(ctx context.Context) ZeroTrustTunnelWarpConnectorMapOutput {
	return o
}

func (o ZeroTrustTunnelWarpConnectorMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustTunnelWarpConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustTunnelWarpConnector {
		return vs[0].(map[string]*ZeroTrustTunnelWarpConnector)[vs[1].(string)]
	}).(ZeroTrustTunnelWarpConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelWarpConnectorInput)(nil)).Elem(), &ZeroTrustTunnelWarpConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelWarpConnectorArrayInput)(nil)).Elem(), ZeroTrustTunnelWarpConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustTunnelWarpConnectorMapInput)(nil)).Elem(), ZeroTrustTunnelWarpConnectorMap{})
	pulumi.RegisterOutputType(ZeroTrustTunnelWarpConnectorOutput{})
	pulumi.RegisterOutputType(ZeroTrustTunnelWarpConnectorArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustTunnelWarpConnectorMapOutput{})
}
