// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupDnsZoneTransfersPeer(ctx, &cloudflare.LookupDnsZoneTransfersPeerArgs{
//				AccountId: "01a7362d577a6c3019a474fd6f485823",
//				PeerId:    pulumi.StringRef("23ff594956f20c2a721606e94745a8aa"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsZoneTransfersPeer(ctx *pulumi.Context, args *LookupDnsZoneTransfersPeerArgs, opts ...pulumi.InvokeOption) (*LookupDnsZoneTransfersPeerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsZoneTransfersPeerResult
	err := ctx.Invoke("cloudflare:index/getDnsZoneTransfersPeer:getDnsZoneTransfersPeer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsZoneTransfersPeer.
type LookupDnsZoneTransfersPeerArgs struct {
	AccountId string  `pulumi:"accountId"`
	PeerId    *string `pulumi:"peerId"`
}

// A collection of values returned by getDnsZoneTransfersPeer.
type LookupDnsZoneTransfersPeerResult struct {
	AccountId string `pulumi:"accountId"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
	Ip string `pulumi:"ip"`
	// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
	IxfrEnable bool `pulumi:"ixfrEnable"`
	// The name of the peer.
	Name   string  `pulumi:"name"`
	PeerId *string `pulumi:"peerId"`
	// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
	Port float64 `pulumi:"port"`
	// TSIG authentication will be used for zone transfer if configured.
	TsigId string `pulumi:"tsigId"`
}

func LookupDnsZoneTransfersPeerOutput(ctx *pulumi.Context, args LookupDnsZoneTransfersPeerOutputArgs, opts ...pulumi.InvokeOption) LookupDnsZoneTransfersPeerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDnsZoneTransfersPeerResultOutput, error) {
			args := v.(LookupDnsZoneTransfersPeerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getDnsZoneTransfersPeer:getDnsZoneTransfersPeer", args, LookupDnsZoneTransfersPeerResultOutput{}, options).(LookupDnsZoneTransfersPeerResultOutput), nil
		}).(LookupDnsZoneTransfersPeerResultOutput)
}

// A collection of arguments for invoking getDnsZoneTransfersPeer.
type LookupDnsZoneTransfersPeerOutputArgs struct {
	AccountId pulumi.StringInput    `pulumi:"accountId"`
	PeerId    pulumi.StringPtrInput `pulumi:"peerId"`
}

func (LookupDnsZoneTransfersPeerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersPeerArgs)(nil)).Elem()
}

// A collection of values returned by getDnsZoneTransfersPeer.
type LookupDnsZoneTransfersPeerResultOutput struct{ *pulumi.OutputState }

func (LookupDnsZoneTransfersPeerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsZoneTransfersPeerResult)(nil)).Elem()
}

func (o LookupDnsZoneTransfersPeerResultOutput) ToLookupDnsZoneTransfersPeerResultOutput() LookupDnsZoneTransfersPeerResultOutput {
	return o
}

func (o LookupDnsZoneTransfersPeerResultOutput) ToLookupDnsZoneTransfersPeerResultOutputWithContext(ctx context.Context) LookupDnsZoneTransfersPeerResultOutput {
	return o
}

func (o LookupDnsZoneTransfersPeerResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupDnsZoneTransfersPeerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) string { return v.Id }).(pulumi.StringOutput)
}

// IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
func (o LookupDnsZoneTransfersPeerResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) string { return v.Ip }).(pulumi.StringOutput)
}

// Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
func (o LookupDnsZoneTransfersPeerResultOutput) IxfrEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) bool { return v.IxfrEnable }).(pulumi.BoolOutput)
}

// The name of the peer.
func (o LookupDnsZoneTransfersPeerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDnsZoneTransfersPeerResultOutput) PeerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) *string { return v.PeerId }).(pulumi.StringPtrOutput)
}

// DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
func (o LookupDnsZoneTransfersPeerResultOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) float64 { return v.Port }).(pulumi.Float64Output)
}

// TSIG authentication will be used for zone transfer if configured.
func (o LookupDnsZoneTransfersPeerResultOutput) TsigId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsZoneTransfersPeerResult) string { return v.TsigId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsZoneTransfersPeerResultOutput{})
}
