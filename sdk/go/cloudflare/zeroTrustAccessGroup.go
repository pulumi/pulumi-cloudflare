// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustAccessGroup(ctx, "example_zero_trust_access_group", &cloudflare.ZeroTrustAccessGroupArgs{
//				Includes: cloudflare.ZeroTrustAccessGroupIncludeArray{
//					&cloudflare.ZeroTrustAccessGroupIncludeArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupIncludeGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//				Name:   pulumi.String("Allow devs"),
//				ZoneId: pulumi.String("zone_id"),
//				Excludes: cloudflare.ZeroTrustAccessGroupExcludeArray{
//					&cloudflare.ZeroTrustAccessGroupExcludeArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupExcludeGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//				IsDefault: pulumi.Bool(true),
//				Requires: cloudflare.ZeroTrustAccessGroupRequireArray{
//					&cloudflare.ZeroTrustAccessGroupRequireArgs{
//						Group: &cloudflare.ZeroTrustAccessGroupRequireGroupArgs{
//							Id: pulumi.String("aa0a4aab-672b-4bdb-bc33-a59f1130a11f"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup example '<{accounts|zones}/{account_id|zone_id}>/<group_id>'
// ```
type ZeroTrustAccessGroup struct {
	pulumi.CustomResourceState

	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes ZeroTrustAccessGroupExcludeArrayOutput `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes ZeroTrustAccessGroupIncludeArrayOutput `pulumi:"includes"`
	// Whether this is the default group
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// The name of the Access group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires ZeroTrustAccessGroupRequireArrayOutput `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrOutput `pulumi:"zoneId"`
}

// NewZeroTrustAccessGroup registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustAccessGroup(ctx *pulumi.Context,
	name string, args *ZeroTrustAccessGroupArgs, opts ...pulumi.ResourceOption) (*ZeroTrustAccessGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Includes == nil {
		return nil, errors.New("invalid value for required argument 'Includes'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/accessGroup:AccessGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustAccessGroup
	err := ctx.RegisterResource("cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustAccessGroup gets an existing ZeroTrustAccessGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustAccessGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustAccessGroupState, opts ...pulumi.ResourceOption) (*ZeroTrustAccessGroup, error) {
	var resource ZeroTrustAccessGroup
	err := ctx.ReadResource("cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustAccessGroup resources.
type zeroTrustAccessGroupState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes []ZeroTrustAccessGroupExclude `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []ZeroTrustAccessGroupInclude `pulumi:"includes"`
	// Whether this is the default group
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the Access group.
	Name *string `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires []ZeroTrustAccessGroupRequire `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

type ZeroTrustAccessGroupState struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes ZeroTrustAccessGroupExcludeArrayInput
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes ZeroTrustAccessGroupIncludeArrayInput
	// Whether this is the default group
	IsDefault pulumi.BoolPtrInput
	// The name of the Access group.
	Name pulumi.StringPtrInput
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires ZeroTrustAccessGroupRequireArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (ZeroTrustAccessGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustAccessGroupState)(nil)).Elem()
}

type zeroTrustAccessGroupArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId *string `pulumi:"accountId"`
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes []ZeroTrustAccessGroupExclude `pulumi:"excludes"`
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes []ZeroTrustAccessGroupInclude `pulumi:"includes"`
	// Whether this is the default group
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the Access group.
	Name string `pulumi:"name"`
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires []ZeroTrustAccessGroupRequire `pulumi:"requires"`
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ZeroTrustAccessGroup resource.
type ZeroTrustAccessGroupArgs struct {
	// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
	AccountId pulumi.StringPtrInput
	// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
	Excludes ZeroTrustAccessGroupExcludeArrayInput
	// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
	Includes ZeroTrustAccessGroupIncludeArrayInput
	// Whether this is the default group
	IsDefault pulumi.BoolPtrInput
	// The name of the Access group.
	Name pulumi.StringInput
	// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
	Requires ZeroTrustAccessGroupRequireArrayInput
	// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
	ZoneId pulumi.StringPtrInput
}

func (ZeroTrustAccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustAccessGroupArgs)(nil)).Elem()
}

type ZeroTrustAccessGroupInput interface {
	pulumi.Input

	ToZeroTrustAccessGroupOutput() ZeroTrustAccessGroupOutput
	ToZeroTrustAccessGroupOutputWithContext(ctx context.Context) ZeroTrustAccessGroupOutput
}

func (*ZeroTrustAccessGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustAccessGroup)(nil)).Elem()
}

func (i *ZeroTrustAccessGroup) ToZeroTrustAccessGroupOutput() ZeroTrustAccessGroupOutput {
	return i.ToZeroTrustAccessGroupOutputWithContext(context.Background())
}

func (i *ZeroTrustAccessGroup) ToZeroTrustAccessGroupOutputWithContext(ctx context.Context) ZeroTrustAccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessGroupOutput)
}

// ZeroTrustAccessGroupArrayInput is an input type that accepts ZeroTrustAccessGroupArray and ZeroTrustAccessGroupArrayOutput values.
// You can construct a concrete instance of `ZeroTrustAccessGroupArrayInput` via:
//
//	ZeroTrustAccessGroupArray{ ZeroTrustAccessGroupArgs{...} }
type ZeroTrustAccessGroupArrayInput interface {
	pulumi.Input

	ToZeroTrustAccessGroupArrayOutput() ZeroTrustAccessGroupArrayOutput
	ToZeroTrustAccessGroupArrayOutputWithContext(context.Context) ZeroTrustAccessGroupArrayOutput
}

type ZeroTrustAccessGroupArray []ZeroTrustAccessGroupInput

func (ZeroTrustAccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustAccessGroup)(nil)).Elem()
}

func (i ZeroTrustAccessGroupArray) ToZeroTrustAccessGroupArrayOutput() ZeroTrustAccessGroupArrayOutput {
	return i.ToZeroTrustAccessGroupArrayOutputWithContext(context.Background())
}

func (i ZeroTrustAccessGroupArray) ToZeroTrustAccessGroupArrayOutputWithContext(ctx context.Context) ZeroTrustAccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessGroupArrayOutput)
}

// ZeroTrustAccessGroupMapInput is an input type that accepts ZeroTrustAccessGroupMap and ZeroTrustAccessGroupMapOutput values.
// You can construct a concrete instance of `ZeroTrustAccessGroupMapInput` via:
//
//	ZeroTrustAccessGroupMap{ "key": ZeroTrustAccessGroupArgs{...} }
type ZeroTrustAccessGroupMapInput interface {
	pulumi.Input

	ToZeroTrustAccessGroupMapOutput() ZeroTrustAccessGroupMapOutput
	ToZeroTrustAccessGroupMapOutputWithContext(context.Context) ZeroTrustAccessGroupMapOutput
}

type ZeroTrustAccessGroupMap map[string]ZeroTrustAccessGroupInput

func (ZeroTrustAccessGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustAccessGroup)(nil)).Elem()
}

func (i ZeroTrustAccessGroupMap) ToZeroTrustAccessGroupMapOutput() ZeroTrustAccessGroupMapOutput {
	return i.ToZeroTrustAccessGroupMapOutputWithContext(context.Background())
}

func (i ZeroTrustAccessGroupMap) ToZeroTrustAccessGroupMapOutputWithContext(ctx context.Context) ZeroTrustAccessGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustAccessGroupMapOutput)
}

type ZeroTrustAccessGroupOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustAccessGroup)(nil)).Elem()
}

func (o ZeroTrustAccessGroupOutput) ToZeroTrustAccessGroupOutput() ZeroTrustAccessGroupOutput {
	return o
}

func (o ZeroTrustAccessGroupOutput) ToZeroTrustAccessGroupOutputWithContext(ctx context.Context) ZeroTrustAccessGroupOutput {
	return o
}

// The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
func (o ZeroTrustAccessGroupOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) pulumi.StringPtrOutput { return v.AccountId }).(pulumi.StringPtrOutput)
}

// Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
func (o ZeroTrustAccessGroupOutput) Excludes() ZeroTrustAccessGroupExcludeArrayOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) ZeroTrustAccessGroupExcludeArrayOutput { return v.Excludes }).(ZeroTrustAccessGroupExcludeArrayOutput)
}

// Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
func (o ZeroTrustAccessGroupOutput) Includes() ZeroTrustAccessGroupIncludeArrayOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) ZeroTrustAccessGroupIncludeArrayOutput { return v.Includes }).(ZeroTrustAccessGroupIncludeArrayOutput)
}

// Whether this is the default group
func (o ZeroTrustAccessGroupOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// The name of the Access group.
func (o ZeroTrustAccessGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
func (o ZeroTrustAccessGroupOutput) Requires() ZeroTrustAccessGroupRequireArrayOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) ZeroTrustAccessGroupRequireArrayOutput { return v.Requires }).(ZeroTrustAccessGroupRequireArrayOutput)
}

// The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
func (o ZeroTrustAccessGroupOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustAccessGroup) pulumi.StringPtrOutput { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type ZeroTrustAccessGroupArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustAccessGroup)(nil)).Elem()
}

func (o ZeroTrustAccessGroupArrayOutput) ToZeroTrustAccessGroupArrayOutput() ZeroTrustAccessGroupArrayOutput {
	return o
}

func (o ZeroTrustAccessGroupArrayOutput) ToZeroTrustAccessGroupArrayOutputWithContext(ctx context.Context) ZeroTrustAccessGroupArrayOutput {
	return o
}

func (o ZeroTrustAccessGroupArrayOutput) Index(i pulumi.IntInput) ZeroTrustAccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustAccessGroup {
		return vs[0].([]*ZeroTrustAccessGroup)[vs[1].(int)]
	}).(ZeroTrustAccessGroupOutput)
}

type ZeroTrustAccessGroupMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustAccessGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustAccessGroup)(nil)).Elem()
}

func (o ZeroTrustAccessGroupMapOutput) ToZeroTrustAccessGroupMapOutput() ZeroTrustAccessGroupMapOutput {
	return o
}

func (o ZeroTrustAccessGroupMapOutput) ToZeroTrustAccessGroupMapOutputWithContext(ctx context.Context) ZeroTrustAccessGroupMapOutput {
	return o
}

func (o ZeroTrustAccessGroupMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustAccessGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustAccessGroup {
		return vs[0].(map[string]*ZeroTrustAccessGroup)[vs[1].(string)]
	}).(ZeroTrustAccessGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessGroupInput)(nil)).Elem(), &ZeroTrustAccessGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessGroupArrayInput)(nil)).Elem(), ZeroTrustAccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustAccessGroupMapInput)(nil)).Elem(), ZeroTrustAccessGroupMap{})
	pulumi.RegisterOutputType(ZeroTrustAccessGroupOutput{})
	pulumi.RegisterOutputType(ZeroTrustAccessGroupArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustAccessGroupMapOutput{})
}
