// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupZeroTrustGatewayCertificate(ctx, &cloudflare.LookupZeroTrustGatewayCertificateArgs{
//				AccountId:     "699d98642c564d2e855e9661899b7252",
//				CertificateId: pulumi.StringRef("f174e90a-fafe-4643-bbbc-4a0ed4fc8415"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZeroTrustGatewayCertificate(ctx *pulumi.Context, args *LookupZeroTrustGatewayCertificateArgs, opts ...pulumi.InvokeOption) (*LookupZeroTrustGatewayCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupZeroTrustGatewayCertificateResult
	err := ctx.Invoke("cloudflare:index/getZeroTrustGatewayCertificate:getZeroTrustGatewayCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZeroTrustGatewayCertificate.
type LookupZeroTrustGatewayCertificateArgs struct {
	AccountId string `pulumi:"accountId"`
	// Identify the certificate with a UUID.
	CertificateId *string `pulumi:"certificateId"`
}

// A collection of values returned by getZeroTrustGatewayCertificate.
type LookupZeroTrustGatewayCertificateResult struct {
	AccountId string `pulumi:"accountId"`
	// Indicate the read-only deployment status of the certificate on Cloudflare's edge. Gateway TLS interception can use certificates in the 'available' (previously called 'active') state.
	// Available values: "pending*deployment", "available", "pending*deletion", "inactive".
	BindingStatus string `pulumi:"bindingStatus"`
	// Provide the CA certificate (read-only).
	Certificate string `pulumi:"certificate"`
	// Identify the certificate with a UUID.
	CertificateId *string `pulumi:"certificateId"`
	CreatedAt     string  `pulumi:"createdAt"`
	ExpiresOn     string  `pulumi:"expiresOn"`
	// Provide the SHA256 fingerprint of the certificate (read-only).
	Fingerprint string `pulumi:"fingerprint"`
	// Identify the certificate with a UUID.
	Id string `pulumi:"id"`
	// Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
	InUse bool `pulumi:"inUse"`
	// Indicate the organization that issued the certificate (read-only).
	IssuerOrg string `pulumi:"issuerOrg"`
	// Provide the entire issuer field of the certificate (read-only).
	IssuerRaw string `pulumi:"issuerRaw"`
	// Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
	// Available values: "custom", "gatewayManaged".
	Type       string `pulumi:"type"`
	UpdatedAt  string `pulumi:"updatedAt"`
	UploadedOn string `pulumi:"uploadedOn"`
}

func LookupZeroTrustGatewayCertificateOutput(ctx *pulumi.Context, args LookupZeroTrustGatewayCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupZeroTrustGatewayCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupZeroTrustGatewayCertificateResultOutput, error) {
			args := v.(LookupZeroTrustGatewayCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getZeroTrustGatewayCertificate:getZeroTrustGatewayCertificate", args, LookupZeroTrustGatewayCertificateResultOutput{}, options).(LookupZeroTrustGatewayCertificateResultOutput), nil
		}).(LookupZeroTrustGatewayCertificateResultOutput)
}

// A collection of arguments for invoking getZeroTrustGatewayCertificate.
type LookupZeroTrustGatewayCertificateOutputArgs struct {
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identify the certificate with a UUID.
	CertificateId pulumi.StringPtrInput `pulumi:"certificateId"`
}

func (LookupZeroTrustGatewayCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustGatewayCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getZeroTrustGatewayCertificate.
type LookupZeroTrustGatewayCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupZeroTrustGatewayCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZeroTrustGatewayCertificateResult)(nil)).Elem()
}

func (o LookupZeroTrustGatewayCertificateResultOutput) ToLookupZeroTrustGatewayCertificateResultOutput() LookupZeroTrustGatewayCertificateResultOutput {
	return o
}

func (o LookupZeroTrustGatewayCertificateResultOutput) ToLookupZeroTrustGatewayCertificateResultOutputWithContext(ctx context.Context) LookupZeroTrustGatewayCertificateResultOutput {
	return o
}

func (o LookupZeroTrustGatewayCertificateResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Indicate the read-only deployment status of the certificate on Cloudflare's edge. Gateway TLS interception can use certificates in the 'available' (previously called 'active') state.
// Available values: "pending*deployment", "available", "pending*deletion", "inactive".
func (o LookupZeroTrustGatewayCertificateResultOutput) BindingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.BindingStatus }).(pulumi.StringOutput)
}

// Provide the CA certificate (read-only).
func (o LookupZeroTrustGatewayCertificateResultOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.Certificate }).(pulumi.StringOutput)
}

// Identify the certificate with a UUID.
func (o LookupZeroTrustGatewayCertificateResultOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) *string { return v.CertificateId }).(pulumi.StringPtrOutput)
}

func (o LookupZeroTrustGatewayCertificateResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupZeroTrustGatewayCertificateResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

// Provide the SHA256 fingerprint of the certificate (read-only).
func (o LookupZeroTrustGatewayCertificateResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// Identify the certificate with a UUID.
func (o LookupZeroTrustGatewayCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
func (o LookupZeroTrustGatewayCertificateResultOutput) InUse() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) bool { return v.InUse }).(pulumi.BoolOutput)
}

// Indicate the organization that issued the certificate (read-only).
func (o LookupZeroTrustGatewayCertificateResultOutput) IssuerOrg() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.IssuerOrg }).(pulumi.StringOutput)
}

// Provide the entire issuer field of the certificate (read-only).
func (o LookupZeroTrustGatewayCertificateResultOutput) IssuerRaw() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.IssuerRaw }).(pulumi.StringOutput)
}

// Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
// Available values: "custom", "gatewayManaged".
func (o LookupZeroTrustGatewayCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupZeroTrustGatewayCertificateResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupZeroTrustGatewayCertificateResultOutput) UploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZeroTrustGatewayCertificateResult) string { return v.UploadedOn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZeroTrustGatewayCertificateResultOutput{})
}
