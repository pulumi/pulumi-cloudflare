// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewHealthcheck(ctx, "example_healthcheck", &cloudflare.HealthcheckArgs{
//				ZoneId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Address: pulumi.String("www.example.com"),
//				Name:    pulumi.String("server-1"),
//				CheckRegions: pulumi.StringArray{
//					pulumi.String("WEU"),
//					pulumi.String("ENAM"),
//				},
//				ConsecutiveFails:     pulumi.Int(0),
//				ConsecutiveSuccesses: pulumi.Int(0),
//				Description:          pulumi.String("Health check for www.example.com"),
//				HttpConfig: &cloudflare.HealthcheckHttpConfigArgs{
//					Allow_insecure: true,
//					Expected_body:  "success",
//					Expected_codes: []string{
//						"2xx",
//						"302",
//					},
//					Follow_redirects: true,
//					Header: pulumi.StringArrayMap{
//						"host": pulumi.StringArray{
//							pulumi.String("example.com"),
//						},
//						"x-App-ID": pulumi.StringArray{
//							pulumi.String("abc123"),
//						},
//					},
//					Method: pulumi.String("GET"),
//					Path:   pulumi.String("/health"),
//					Port:   pulumi.Int(0),
//				},
//				Interval:  pulumi.Int(0),
//				Retries:   pulumi.Int(0),
//				Suspended: pulumi.Bool(true),
//				TcpConfig: &cloudflare.HealthcheckTcpConfigArgs{
//					Method: pulumi.String("connection_established"),
//					Port:   pulumi.Int(0),
//				},
//				Timeout: pulumi.Int(0),
//				Type:    pulumi.String("HTTPS"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/healthcheck:Healthcheck example '<zone_id>/<healthcheck_id>'
// ```
type Healthcheck struct {
	pulumi.CustomResourceState

	// The hostname or IP address of the origin server to run health checks on.
	Address pulumi.StringOutput `pulumi:"address"`
	// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
	CheckRegions pulumi.StringArrayOutput `pulumi:"checkRegions"`
	// The number of consecutive fails required from a health check before changing the health to unhealthy.
	ConsecutiveFails pulumi.IntOutput `pulumi:"consecutiveFails"`
	// The number of consecutive successes required from a health check before changing the health to healthy.
	ConsecutiveSuccesses pulumi.IntOutput    `pulumi:"consecutiveSuccesses"`
	CreatedOn            pulumi.StringOutput `pulumi:"createdOn"`
	// A human-readable description of the health check.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The current failure reason if status is unhealthy.
	FailureReason pulumi.StringOutput `pulumi:"failureReason"`
	// Parameters specific to an HTTP or HTTPS health check.
	HttpConfig HealthcheckHttpConfigOutput `pulumi:"httpConfig"`
	// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
	Interval   pulumi.IntOutput    `pulumi:"interval"`
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries pulumi.IntOutput `pulumi:"retries"`
	// The current status of the origin server according to the health check.
	// Available values: "unknown", "healthy", "unhealthy", "suspended".
	Status pulumi.StringOutput `pulumi:"status"`
	// If suspended, no health checks are sent to the origin.
	Suspended pulumi.BoolOutput `pulumi:"suspended"`
	// Parameters specific to TCP health check.
	TcpConfig HealthcheckTcpConfigOutput `pulumi:"tcpConfig"`
	// The timeout (in seconds) before marking the health check as failed.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
	Type pulumi.StringOutput `pulumi:"type"`
	// Identifier
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewHealthcheck registers a new resource with the given unique name, arguments, and options.
func NewHealthcheck(ctx *pulumi.Context,
	name string, args *HealthcheckArgs, opts ...pulumi.ResourceOption) (*Healthcheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Healthcheck
	err := ctx.RegisterResource("cloudflare:index/healthcheck:Healthcheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthcheck gets an existing Healthcheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthcheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthcheckState, opts ...pulumi.ResourceOption) (*Healthcheck, error) {
	var resource Healthcheck
	err := ctx.ReadResource("cloudflare:index/healthcheck:Healthcheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Healthcheck resources.
type healthcheckState struct {
	// The hostname or IP address of the origin server to run health checks on.
	Address *string `pulumi:"address"`
	// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
	CheckRegions []string `pulumi:"checkRegions"`
	// The number of consecutive fails required from a health check before changing the health to unhealthy.
	ConsecutiveFails *int `pulumi:"consecutiveFails"`
	// The number of consecutive successes required from a health check before changing the health to healthy.
	ConsecutiveSuccesses *int    `pulumi:"consecutiveSuccesses"`
	CreatedOn            *string `pulumi:"createdOn"`
	// A human-readable description of the health check.
	Description *string `pulumi:"description"`
	// The current failure reason if status is unhealthy.
	FailureReason *string `pulumi:"failureReason"`
	// Parameters specific to an HTTP or HTTPS health check.
	HttpConfig *HealthcheckHttpConfig `pulumi:"httpConfig"`
	// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
	Interval   *int    `pulumi:"interval"`
	ModifiedOn *string `pulumi:"modifiedOn"`
	// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
	Name *string `pulumi:"name"`
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries *int `pulumi:"retries"`
	// The current status of the origin server according to the health check.
	// Available values: "unknown", "healthy", "unhealthy", "suspended".
	Status *string `pulumi:"status"`
	// If suspended, no health checks are sent to the origin.
	Suspended *bool `pulumi:"suspended"`
	// Parameters specific to TCP health check.
	TcpConfig *HealthcheckTcpConfig `pulumi:"tcpConfig"`
	// The timeout (in seconds) before marking the health check as failed.
	Timeout *int `pulumi:"timeout"`
	// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId *string `pulumi:"zoneId"`
}

type HealthcheckState struct {
	// The hostname or IP address of the origin server to run health checks on.
	Address pulumi.StringPtrInput
	// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
	CheckRegions pulumi.StringArrayInput
	// The number of consecutive fails required from a health check before changing the health to unhealthy.
	ConsecutiveFails pulumi.IntPtrInput
	// The number of consecutive successes required from a health check before changing the health to healthy.
	ConsecutiveSuccesses pulumi.IntPtrInput
	CreatedOn            pulumi.StringPtrInput
	// A human-readable description of the health check.
	Description pulumi.StringPtrInput
	// The current failure reason if status is unhealthy.
	FailureReason pulumi.StringPtrInput
	// Parameters specific to an HTTP or HTTPS health check.
	HttpConfig HealthcheckHttpConfigPtrInput
	// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
	Interval   pulumi.IntPtrInput
	ModifiedOn pulumi.StringPtrInput
	// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
	Name pulumi.StringPtrInput
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries pulumi.IntPtrInput
	// The current status of the origin server according to the health check.
	// Available values: "unknown", "healthy", "unhealthy", "suspended".
	Status pulumi.StringPtrInput
	// If suspended, no health checks are sent to the origin.
	Suspended pulumi.BoolPtrInput
	// Parameters specific to TCP health check.
	TcpConfig HealthcheckTcpConfigPtrInput
	// The timeout (in seconds) before marking the health check as failed.
	Timeout pulumi.IntPtrInput
	// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
	Type pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringPtrInput
}

func (HealthcheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcheckState)(nil)).Elem()
}

type healthcheckArgs struct {
	// The hostname or IP address of the origin server to run health checks on.
	Address string `pulumi:"address"`
	// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
	CheckRegions []string `pulumi:"checkRegions"`
	// The number of consecutive fails required from a health check before changing the health to unhealthy.
	ConsecutiveFails *int `pulumi:"consecutiveFails"`
	// The number of consecutive successes required from a health check before changing the health to healthy.
	ConsecutiveSuccesses *int `pulumi:"consecutiveSuccesses"`
	// A human-readable description of the health check.
	Description *string `pulumi:"description"`
	// Parameters specific to an HTTP or HTTPS health check.
	HttpConfig *HealthcheckHttpConfig `pulumi:"httpConfig"`
	// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
	Interval *int `pulumi:"interval"`
	// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
	Name string `pulumi:"name"`
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries *int `pulumi:"retries"`
	// If suspended, no health checks are sent to the origin.
	Suspended *bool `pulumi:"suspended"`
	// Parameters specific to TCP health check.
	TcpConfig *HealthcheckTcpConfig `pulumi:"tcpConfig"`
	// The timeout (in seconds) before marking the health check as failed.
	Timeout *int `pulumi:"timeout"`
	// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
	Type *string `pulumi:"type"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Healthcheck resource.
type HealthcheckArgs struct {
	// The hostname or IP address of the origin server to run health checks on.
	Address pulumi.StringInput
	// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
	CheckRegions pulumi.StringArrayInput
	// The number of consecutive fails required from a health check before changing the health to unhealthy.
	ConsecutiveFails pulumi.IntPtrInput
	// The number of consecutive successes required from a health check before changing the health to healthy.
	ConsecutiveSuccesses pulumi.IntPtrInput
	// A human-readable description of the health check.
	Description pulumi.StringPtrInput
	// Parameters specific to an HTTP or HTTPS health check.
	HttpConfig HealthcheckHttpConfigPtrInput
	// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
	Interval pulumi.IntPtrInput
	// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
	Name pulumi.StringInput
	// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
	Retries pulumi.IntPtrInput
	// If suspended, no health checks are sent to the origin.
	Suspended pulumi.BoolPtrInput
	// Parameters specific to TCP health check.
	TcpConfig HealthcheckTcpConfigPtrInput
	// The timeout (in seconds) before marking the health check as failed.
	Timeout pulumi.IntPtrInput
	// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
	Type pulumi.StringPtrInput
	// Identifier
	ZoneId pulumi.StringInput
}

func (HealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthcheckArgs)(nil)).Elem()
}

type HealthcheckInput interface {
	pulumi.Input

	ToHealthcheckOutput() HealthcheckOutput
	ToHealthcheckOutputWithContext(ctx context.Context) HealthcheckOutput
}

func (*Healthcheck) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthcheck)(nil)).Elem()
}

func (i *Healthcheck) ToHealthcheckOutput() HealthcheckOutput {
	return i.ToHealthcheckOutputWithContext(context.Background())
}

func (i *Healthcheck) ToHealthcheckOutputWithContext(ctx context.Context) HealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcheckOutput)
}

// HealthcheckArrayInput is an input type that accepts HealthcheckArray and HealthcheckArrayOutput values.
// You can construct a concrete instance of `HealthcheckArrayInput` via:
//
//	HealthcheckArray{ HealthcheckArgs{...} }
type HealthcheckArrayInput interface {
	pulumi.Input

	ToHealthcheckArrayOutput() HealthcheckArrayOutput
	ToHealthcheckArrayOutputWithContext(context.Context) HealthcheckArrayOutput
}

type HealthcheckArray []HealthcheckInput

func (HealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthcheck)(nil)).Elem()
}

func (i HealthcheckArray) ToHealthcheckArrayOutput() HealthcheckArrayOutput {
	return i.ToHealthcheckArrayOutputWithContext(context.Background())
}

func (i HealthcheckArray) ToHealthcheckArrayOutputWithContext(ctx context.Context) HealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcheckArrayOutput)
}

// HealthcheckMapInput is an input type that accepts HealthcheckMap and HealthcheckMapOutput values.
// You can construct a concrete instance of `HealthcheckMapInput` via:
//
//	HealthcheckMap{ "key": HealthcheckArgs{...} }
type HealthcheckMapInput interface {
	pulumi.Input

	ToHealthcheckMapOutput() HealthcheckMapOutput
	ToHealthcheckMapOutputWithContext(context.Context) HealthcheckMapOutput
}

type HealthcheckMap map[string]HealthcheckInput

func (HealthcheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthcheck)(nil)).Elem()
}

func (i HealthcheckMap) ToHealthcheckMapOutput() HealthcheckMapOutput {
	return i.ToHealthcheckMapOutputWithContext(context.Background())
}

func (i HealthcheckMap) ToHealthcheckMapOutputWithContext(ctx context.Context) HealthcheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthcheckMapOutput)
}

type HealthcheckOutput struct{ *pulumi.OutputState }

func (HealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Healthcheck)(nil)).Elem()
}

func (o HealthcheckOutput) ToHealthcheckOutput() HealthcheckOutput {
	return o
}

func (o HealthcheckOutput) ToHealthcheckOutputWithContext(ctx context.Context) HealthcheckOutput {
	return o
}

// The hostname or IP address of the origin server to run health checks on.
func (o HealthcheckOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A list of regions from which to run health checks. Null means Cloudflare will pick a default region.
func (o HealthcheckOutput) CheckRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringArrayOutput { return v.CheckRegions }).(pulumi.StringArrayOutput)
}

// The number of consecutive fails required from a health check before changing the health to unhealthy.
func (o HealthcheckOutput) ConsecutiveFails() pulumi.IntOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.IntOutput { return v.ConsecutiveFails }).(pulumi.IntOutput)
}

// The number of consecutive successes required from a health check before changing the health to healthy.
func (o HealthcheckOutput) ConsecutiveSuccesses() pulumi.IntOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.IntOutput { return v.ConsecutiveSuccesses }).(pulumi.IntOutput)
}

func (o HealthcheckOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// A human-readable description of the health check.
func (o HealthcheckOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The current failure reason if status is unhealthy.
func (o HealthcheckOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.FailureReason }).(pulumi.StringOutput)
}

// Parameters specific to an HTTP or HTTPS health check.
func (o HealthcheckOutput) HttpConfig() HealthcheckHttpConfigOutput {
	return o.ApplyT(func(v *Healthcheck) HealthcheckHttpConfigOutput { return v.HttpConfig }).(HealthcheckHttpConfigOutput)
}

// The interval between each health check. Shorter intervals may give quicker notifications if the origin status changes, but will increase load on the origin as we check from multiple locations.
func (o HealthcheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

func (o HealthcheckOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// A short name to identify the health check. Only alphanumeric characters, hyphens and underscores are allowed.
func (o HealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of retries to attempt in case of a timeout before marking the origin as unhealthy. Retries are attempted immediately.
func (o HealthcheckOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.IntOutput { return v.Retries }).(pulumi.IntOutput)
}

// The current status of the origin server according to the health check.
// Available values: "unknown", "healthy", "unhealthy", "suspended".
func (o HealthcheckOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// If suspended, no health checks are sent to the origin.
func (o HealthcheckOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.BoolOutput { return v.Suspended }).(pulumi.BoolOutput)
}

// Parameters specific to TCP health check.
func (o HealthcheckOutput) TcpConfig() HealthcheckTcpConfigOutput {
	return o.ApplyT(func(v *Healthcheck) HealthcheckTcpConfigOutput { return v.TcpConfig }).(HealthcheckTcpConfigOutput)
}

// The timeout (in seconds) before marking the health check as failed.
func (o HealthcheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The protocol to use for the health check. Currently supported protocols are 'HTTP', 'HTTPS' and 'TCP'.
func (o HealthcheckOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Identifier
func (o HealthcheckOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Healthcheck) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type HealthcheckArrayOutput struct{ *pulumi.OutputState }

func (HealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Healthcheck)(nil)).Elem()
}

func (o HealthcheckArrayOutput) ToHealthcheckArrayOutput() HealthcheckArrayOutput {
	return o
}

func (o HealthcheckArrayOutput) ToHealthcheckArrayOutputWithContext(ctx context.Context) HealthcheckArrayOutput {
	return o
}

func (o HealthcheckArrayOutput) Index(i pulumi.IntInput) HealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Healthcheck {
		return vs[0].([]*Healthcheck)[vs[1].(int)]
	}).(HealthcheckOutput)
}

type HealthcheckMapOutput struct{ *pulumi.OutputState }

func (HealthcheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Healthcheck)(nil)).Elem()
}

func (o HealthcheckMapOutput) ToHealthcheckMapOutput() HealthcheckMapOutput {
	return o
}

func (o HealthcheckMapOutput) ToHealthcheckMapOutputWithContext(ctx context.Context) HealthcheckMapOutput {
	return o
}

func (o HealthcheckMapOutput) MapIndex(k pulumi.StringInput) HealthcheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Healthcheck {
		return vs[0].(map[string]*Healthcheck)[vs[1].(string)]
	}).(HealthcheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcheckInput)(nil)).Elem(), &Healthcheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcheckArrayInput)(nil)).Elem(), HealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HealthcheckMapInput)(nil)).Elem(), HealthcheckMap{})
	pulumi.RegisterOutputType(HealthcheckOutput{})
	pulumi.RegisterOutputType(HealthcheckArrayOutput{})
	pulumi.RegisterOutputType(HealthcheckMapOutput{})
}
