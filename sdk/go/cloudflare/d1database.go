// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// !> When a D1 Database is replaced all the data is lost. Please ensure you have a
//
//	backup of your data before replacing a D1 Database.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewD1Database(ctx, "example_d1_database", &cloudflare.D1DatabaseArgs{
//				AccountId:           pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Name:                pulumi.String("my-database"),
//				PrimaryLocationHint: pulumi.String("wnam"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/d1Database:D1Database example '<account_id>/<database_id>'
// ```
type D1Database struct {
	pulumi.CustomResourceState

	// Account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Specifies the timestamp the resource was created as an ISO8601 string.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The D1 database's size, in bytes.
<<<<<<< HEAD
	FileSize  pulumi.Float64Output `pulumi:"fileSize"`
=======
	FileSize pulumi.Float64Output `pulumi:"fileSize"`
	// D1 database name.
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	Name      pulumi.StringOutput  `pulumi:"name"`
	NumTables pulumi.Float64Output `pulumi:"numTables"`
	// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
	PrimaryLocationHint pulumi.StringPtrOutput `pulumi:"primaryLocationHint"`
<<<<<<< HEAD
	Uuid                pulumi.StringOutput    `pulumi:"uuid"`
	Version             pulumi.StringOutput    `pulumi:"version"`
=======
	// D1 database identifier (UUID).
	Uuid    pulumi.StringOutput `pulumi:"uuid"`
	Version pulumi.StringOutput `pulumi:"version"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

// NewD1Database registers a new resource with the given unique name, arguments, and options.
func NewD1Database(ctx *pulumi.Context,
	name string, args *D1DatabaseArgs, opts ...pulumi.ResourceOption) (*D1Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource D1Database
	err := ctx.RegisterResource("cloudflare:index/d1Database:D1Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetD1Database gets an existing D1Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetD1Database(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *D1DatabaseState, opts ...pulumi.ResourceOption) (*D1Database, error) {
	var resource D1Database
	err := ctx.ReadResource("cloudflare:index/d1Database:D1Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering D1Database resources.
type d1databaseState struct {
	// Account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// Specifies the timestamp the resource was created as an ISO8601 string.
	CreatedAt *string `pulumi:"createdAt"`
	// The D1 database's size, in bytes.
<<<<<<< HEAD
	FileSize  *float64 `pulumi:"fileSize"`
=======
	FileSize *float64 `pulumi:"fileSize"`
	// D1 database name.
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	Name      *string  `pulumi:"name"`
	NumTables *float64 `pulumi:"numTables"`
	// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
	PrimaryLocationHint *string `pulumi:"primaryLocationHint"`
<<<<<<< HEAD
	Uuid                *string `pulumi:"uuid"`
	Version             *string `pulumi:"version"`
=======
	// D1 database identifier (UUID).
	Uuid    *string `pulumi:"uuid"`
	Version *string `pulumi:"version"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

type D1DatabaseState struct {
	// Account identifier tag.
	AccountId pulumi.StringPtrInput
	// Specifies the timestamp the resource was created as an ISO8601 string.
	CreatedAt pulumi.StringPtrInput
	// The D1 database's size, in bytes.
<<<<<<< HEAD
	FileSize  pulumi.Float64PtrInput
=======
	FileSize pulumi.Float64PtrInput
	// D1 database name.
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	Name      pulumi.StringPtrInput
	NumTables pulumi.Float64PtrInput
	// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
	PrimaryLocationHint pulumi.StringPtrInput
<<<<<<< HEAD
	Uuid                pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
=======
	// D1 database identifier (UUID).
	Uuid    pulumi.StringPtrInput
	Version pulumi.StringPtrInput
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
}

func (D1DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*d1databaseState)(nil)).Elem()
}

type d1databaseArgs struct {
	// Account identifier tag.
	AccountId string `pulumi:"accountId"`
<<<<<<< HEAD
	Name      string `pulumi:"name"`
=======
	// D1 database name.
	Name string `pulumi:"name"`
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
	PrimaryLocationHint *string `pulumi:"primaryLocationHint"`
}

// The set of arguments for constructing a D1Database resource.
type D1DatabaseArgs struct {
	// Account identifier tag.
	AccountId pulumi.StringInput
<<<<<<< HEAD
	Name      pulumi.StringInput
=======
	// D1 database name.
	Name pulumi.StringInput
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
	// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
	PrimaryLocationHint pulumi.StringPtrInput
}

func (D1DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*d1databaseArgs)(nil)).Elem()
}

type D1DatabaseInput interface {
	pulumi.Input

	ToD1DatabaseOutput() D1DatabaseOutput
	ToD1DatabaseOutputWithContext(ctx context.Context) D1DatabaseOutput
}

func (*D1Database) ElementType() reflect.Type {
	return reflect.TypeOf((**D1Database)(nil)).Elem()
}

func (i *D1Database) ToD1DatabaseOutput() D1DatabaseOutput {
	return i.ToD1DatabaseOutputWithContext(context.Background())
}

func (i *D1Database) ToD1DatabaseOutputWithContext(ctx context.Context) D1DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(D1DatabaseOutput)
}

// D1DatabaseArrayInput is an input type that accepts D1DatabaseArray and D1DatabaseArrayOutput values.
// You can construct a concrete instance of `D1DatabaseArrayInput` via:
//
//	D1DatabaseArray{ D1DatabaseArgs{...} }
type D1DatabaseArrayInput interface {
	pulumi.Input

	ToD1DatabaseArrayOutput() D1DatabaseArrayOutput
	ToD1DatabaseArrayOutputWithContext(context.Context) D1DatabaseArrayOutput
}

type D1DatabaseArray []D1DatabaseInput

func (D1DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*D1Database)(nil)).Elem()
}

func (i D1DatabaseArray) ToD1DatabaseArrayOutput() D1DatabaseArrayOutput {
	return i.ToD1DatabaseArrayOutputWithContext(context.Background())
}

func (i D1DatabaseArray) ToD1DatabaseArrayOutputWithContext(ctx context.Context) D1DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(D1DatabaseArrayOutput)
}

// D1DatabaseMapInput is an input type that accepts D1DatabaseMap and D1DatabaseMapOutput values.
// You can construct a concrete instance of `D1DatabaseMapInput` via:
//
//	D1DatabaseMap{ "key": D1DatabaseArgs{...} }
type D1DatabaseMapInput interface {
	pulumi.Input

	ToD1DatabaseMapOutput() D1DatabaseMapOutput
	ToD1DatabaseMapOutputWithContext(context.Context) D1DatabaseMapOutput
}

type D1DatabaseMap map[string]D1DatabaseInput

func (D1DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*D1Database)(nil)).Elem()
}

func (i D1DatabaseMap) ToD1DatabaseMapOutput() D1DatabaseMapOutput {
	return i.ToD1DatabaseMapOutputWithContext(context.Background())
}

func (i D1DatabaseMap) ToD1DatabaseMapOutputWithContext(ctx context.Context) D1DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(D1DatabaseMapOutput)
}

type D1DatabaseOutput struct{ *pulumi.OutputState }

func (D1DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**D1Database)(nil)).Elem()
}

func (o D1DatabaseOutput) ToD1DatabaseOutput() D1DatabaseOutput {
	return o
}

func (o D1DatabaseOutput) ToD1DatabaseOutputWithContext(ctx context.Context) D1DatabaseOutput {
	return o
}

// Account identifier tag.
func (o D1DatabaseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Specifies the timestamp the resource was created as an ISO8601 string.
func (o D1DatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The D1 database's size, in bytes.
func (o D1DatabaseOutput) FileSize() pulumi.Float64Output {
	return o.ApplyT(func(v *D1Database) pulumi.Float64Output { return v.FileSize }).(pulumi.Float64Output)
}

<<<<<<< HEAD
=======
// D1 database name.
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
func (o D1DatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o D1DatabaseOutput) NumTables() pulumi.Float64Output {
	return o.ApplyT(func(v *D1Database) pulumi.Float64Output { return v.NumTables }).(pulumi.Float64Output)
}

// Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
func (o D1DatabaseOutput) PrimaryLocationHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringPtrOutput { return v.PrimaryLocationHint }).(pulumi.StringPtrOutput)
}

<<<<<<< HEAD
=======
// D1 database identifier (UUID).
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
func (o D1DatabaseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o D1DatabaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *D1Database) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type D1DatabaseArrayOutput struct{ *pulumi.OutputState }

func (D1DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*D1Database)(nil)).Elem()
}

func (o D1DatabaseArrayOutput) ToD1DatabaseArrayOutput() D1DatabaseArrayOutput {
	return o
}

func (o D1DatabaseArrayOutput) ToD1DatabaseArrayOutputWithContext(ctx context.Context) D1DatabaseArrayOutput {
	return o
}

func (o D1DatabaseArrayOutput) Index(i pulumi.IntInput) D1DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *D1Database {
		return vs[0].([]*D1Database)[vs[1].(int)]
	}).(D1DatabaseOutput)
}

type D1DatabaseMapOutput struct{ *pulumi.OutputState }

func (D1DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*D1Database)(nil)).Elem()
}

func (o D1DatabaseMapOutput) ToD1DatabaseMapOutput() D1DatabaseMapOutput {
	return o
}

func (o D1DatabaseMapOutput) ToD1DatabaseMapOutputWithContext(ctx context.Context) D1DatabaseMapOutput {
	return o
}

func (o D1DatabaseMapOutput) MapIndex(k pulumi.StringInput) D1DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *D1Database {
		return vs[0].(map[string]*D1Database)[vs[1].(string)]
	}).(D1DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*D1DatabaseInput)(nil)).Elem(), &D1Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*D1DatabaseArrayInput)(nil)).Elem(), D1DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*D1DatabaseMapInput)(nil)).Elem(), D1DatabaseMap{})
	pulumi.RegisterOutputType(D1DatabaseOutput{})
	pulumi.RegisterOutputType(D1DatabaseArrayOutput{})
	pulumi.RegisterOutputType(D1DatabaseMapOutput{})
}
