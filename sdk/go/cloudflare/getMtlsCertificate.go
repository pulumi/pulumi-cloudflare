// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupMtlsCertificate(ctx, &cloudflare.LookupMtlsCertificateArgs{
//				AccountId:         "023e105f4ecef8ad9ca31a8372d0c353",
//				MtlsCertificateId: pulumi.StringRef("023e105f4ecef8ad9ca31a8372d0c353"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMtlsCertificate(ctx *pulumi.Context, args *LookupMtlsCertificateArgs, opts ...pulumi.InvokeOption) (*LookupMtlsCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMtlsCertificateResult
	err := ctx.Invoke("cloudflare:index/getMtlsCertificate:getMtlsCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMtlsCertificate.
type LookupMtlsCertificateArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Identifier
	MtlsCertificateId *string `pulumi:"mtlsCertificateId"`
}

// A collection of values returned by getMtlsCertificate.
type LookupMtlsCertificateResult struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Indicates whether the certificate is a CA or leaf certificate.
	Ca bool `pulumi:"ca"`
	// The uploaded root CA certificate.
	Certificates string `pulumi:"certificates"`
	// When the certificate expires.
	ExpiresOn string `pulumi:"expiresOn"`
	// Identifier
	Id string `pulumi:"id"`
	// The certificate authority that issued the certificate.
	Issuer string `pulumi:"issuer"`
	// Identifier
	MtlsCertificateId *string `pulumi:"mtlsCertificateId"`
	// Optional unique name for the certificate. Only used for human readability.
	Name string `pulumi:"name"`
	// The certificate serial number.
	SerialNumber string `pulumi:"serialNumber"`
	// The type of hash used for the certificate.
	Signature string `pulumi:"signature"`
	// This is the time the certificate was uploaded.
	UploadedOn string `pulumi:"uploadedOn"`
}

func LookupMtlsCertificateOutput(ctx *pulumi.Context, args LookupMtlsCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupMtlsCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMtlsCertificateResultOutput, error) {
			args := v.(LookupMtlsCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getMtlsCertificate:getMtlsCertificate", args, LookupMtlsCertificateResultOutput{}, options).(LookupMtlsCertificateResultOutput), nil
		}).(LookupMtlsCertificateResultOutput)
}

// A collection of arguments for invoking getMtlsCertificate.
type LookupMtlsCertificateOutputArgs struct {
	// Identifier
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Identifier
	MtlsCertificateId pulumi.StringPtrInput `pulumi:"mtlsCertificateId"`
}

func (LookupMtlsCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMtlsCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getMtlsCertificate.
type LookupMtlsCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupMtlsCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMtlsCertificateResult)(nil)).Elem()
}

func (o LookupMtlsCertificateResultOutput) ToLookupMtlsCertificateResultOutput() LookupMtlsCertificateResultOutput {
	return o
}

func (o LookupMtlsCertificateResultOutput) ToLookupMtlsCertificateResultOutputWithContext(ctx context.Context) LookupMtlsCertificateResultOutput {
	return o
}

// Identifier
func (o LookupMtlsCertificateResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// Indicates whether the certificate is a CA or leaf certificate.
func (o LookupMtlsCertificateResultOutput) Ca() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) bool { return v.Ca }).(pulumi.BoolOutput)
}

// The uploaded root CA certificate.
func (o LookupMtlsCertificateResultOutput) Certificates() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.Certificates }).(pulumi.StringOutput)
}

// When the certificate expires.
func (o LookupMtlsCertificateResultOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.ExpiresOn }).(pulumi.StringOutput)
}

// Identifier
func (o LookupMtlsCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o LookupMtlsCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

// Identifier
func (o LookupMtlsCertificateResultOutput) MtlsCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) *string { return v.MtlsCertificateId }).(pulumi.StringPtrOutput)
}

// Optional unique name for the certificate. Only used for human readability.
func (o LookupMtlsCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The certificate serial number.
func (o LookupMtlsCertificateResultOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The type of hash used for the certificate.
func (o LookupMtlsCertificateResultOutput) Signature() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.Signature }).(pulumi.StringOutput)
}

// This is the time the certificate was uploaded.
func (o LookupMtlsCertificateResultOutput) UploadedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMtlsCertificateResult) string { return v.UploadedOn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMtlsCertificateResultOutput{})
}
