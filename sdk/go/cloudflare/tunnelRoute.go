// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewZeroTrustTunnelCloudflaredRoute(ctx, "example_zero_trust_tunnel_cloudflared_route", &cloudflare.ZeroTrustTunnelCloudflaredRouteArgs{
//				AccountId:        pulumi.String("699d98642c564d2e855e9661899b7252"),
//				Network:          pulumi.String("172.16.0.0/16"),
//				TunnelId:         pulumi.String("f70ff985-a4ef-4643-bbbc-4a0ed4fc8415"),
//				Comment:          pulumi.String("Example comment for this route."),
//				VirtualNetworkId: pulumi.String("f70ff985-a4ef-4643-bbbc-4a0ed4fc8415"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/tunnelRoute:TunnelRoute example '<account_id>/<route_id>'
// ```
//
// Deprecated: cloudflare.index/tunnelroute.TunnelRoute has been deprecated in favor of cloudflare.index/zerotrusttunnelcloudflaredroute.ZeroTrustTunnelCloudflaredRoute
type TunnelRoute struct {
	pulumi.CustomResourceState

	// Cloudflare account ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Optional remark describing the route.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
	Network pulumi.StringOutput `pulumi:"network"`
	// UUID of the tunnel.
	TunnelId pulumi.StringOutput `pulumi:"tunnelId"`
	// UUID of the virtual network.
	VirtualNetworkId pulumi.StringOutput `pulumi:"virtualNetworkId"`
}

// NewTunnelRoute registers a new resource with the given unique name, arguments, and options.
func NewTunnelRoute(ctx *pulumi.Context,
	name string, args *TunnelRouteArgs, opts ...pulumi.ResourceOption) (*TunnelRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("cloudflare:index/tunnelRoute:TunnelRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TunnelRoute
	err := ctx.RegisterResource("cloudflare:index/tunnelRoute:TunnelRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTunnelRoute gets an existing TunnelRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTunnelRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TunnelRouteState, opts ...pulumi.ResourceOption) (*TunnelRoute, error) {
	var resource TunnelRoute
	err := ctx.ReadResource("cloudflare:index/tunnelRoute:TunnelRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TunnelRoute resources.
type tunnelRouteState struct {
	// Cloudflare account ID
	AccountId *string `pulumi:"accountId"`
	// Optional remark describing the route.
	Comment *string `pulumi:"comment"`
	// Timestamp of when the resource was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
	Network *string `pulumi:"network"`
	// UUID of the tunnel.
	TunnelId *string `pulumi:"tunnelId"`
	// UUID of the virtual network.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

type TunnelRouteState struct {
	// Cloudflare account ID
	AccountId pulumi.StringPtrInput
	// Optional remark describing the route.
	Comment pulumi.StringPtrInput
	// Timestamp of when the resource was created.
	CreatedAt pulumi.StringPtrInput
	// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
	DeletedAt pulumi.StringPtrInput
	// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
	Network pulumi.StringPtrInput
	// UUID of the tunnel.
	TunnelId pulumi.StringPtrInput
	// UUID of the virtual network.
	VirtualNetworkId pulumi.StringPtrInput
}

func (TunnelRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelRouteState)(nil)).Elem()
}

type tunnelRouteArgs struct {
	// Cloudflare account ID
	AccountId string `pulumi:"accountId"`
	// Optional remark describing the route.
	Comment *string `pulumi:"comment"`
	// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
	Network string `pulumi:"network"`
	// UUID of the tunnel.
	TunnelId string `pulumi:"tunnelId"`
	// UUID of the virtual network.
	VirtualNetworkId *string `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TunnelRoute resource.
type TunnelRouteArgs struct {
	// Cloudflare account ID
	AccountId pulumi.StringInput
	// Optional remark describing the route.
	Comment pulumi.StringPtrInput
	// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
	Network pulumi.StringInput
	// UUID of the tunnel.
	TunnelId pulumi.StringInput
	// UUID of the virtual network.
	VirtualNetworkId pulumi.StringPtrInput
}

func (TunnelRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tunnelRouteArgs)(nil)).Elem()
}

type TunnelRouteInput interface {
	pulumi.Input

	ToTunnelRouteOutput() TunnelRouteOutput
	ToTunnelRouteOutputWithContext(ctx context.Context) TunnelRouteOutput
}

func (*TunnelRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelRoute)(nil)).Elem()
}

func (i *TunnelRoute) ToTunnelRouteOutput() TunnelRouteOutput {
	return i.ToTunnelRouteOutputWithContext(context.Background())
}

func (i *TunnelRoute) ToTunnelRouteOutputWithContext(ctx context.Context) TunnelRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelRouteOutput)
}

// TunnelRouteArrayInput is an input type that accepts TunnelRouteArray and TunnelRouteArrayOutput values.
// You can construct a concrete instance of `TunnelRouteArrayInput` via:
//
//	TunnelRouteArray{ TunnelRouteArgs{...} }
type TunnelRouteArrayInput interface {
	pulumi.Input

	ToTunnelRouteArrayOutput() TunnelRouteArrayOutput
	ToTunnelRouteArrayOutputWithContext(context.Context) TunnelRouteArrayOutput
}

type TunnelRouteArray []TunnelRouteInput

func (TunnelRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelRoute)(nil)).Elem()
}

func (i TunnelRouteArray) ToTunnelRouteArrayOutput() TunnelRouteArrayOutput {
	return i.ToTunnelRouteArrayOutputWithContext(context.Background())
}

func (i TunnelRouteArray) ToTunnelRouteArrayOutputWithContext(ctx context.Context) TunnelRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelRouteArrayOutput)
}

// TunnelRouteMapInput is an input type that accepts TunnelRouteMap and TunnelRouteMapOutput values.
// You can construct a concrete instance of `TunnelRouteMapInput` via:
//
//	TunnelRouteMap{ "key": TunnelRouteArgs{...} }
type TunnelRouteMapInput interface {
	pulumi.Input

	ToTunnelRouteMapOutput() TunnelRouteMapOutput
	ToTunnelRouteMapOutputWithContext(context.Context) TunnelRouteMapOutput
}

type TunnelRouteMap map[string]TunnelRouteInput

func (TunnelRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelRoute)(nil)).Elem()
}

func (i TunnelRouteMap) ToTunnelRouteMapOutput() TunnelRouteMapOutput {
	return i.ToTunnelRouteMapOutputWithContext(context.Background())
}

func (i TunnelRouteMap) ToTunnelRouteMapOutputWithContext(ctx context.Context) TunnelRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TunnelRouteMapOutput)
}

type TunnelRouteOutput struct{ *pulumi.OutputState }

func (TunnelRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TunnelRoute)(nil)).Elem()
}

func (o TunnelRouteOutput) ToTunnelRouteOutput() TunnelRouteOutput {
	return o
}

func (o TunnelRouteOutput) ToTunnelRouteOutputWithContext(ctx context.Context) TunnelRouteOutput {
	return o
}

// Cloudflare account ID
func (o TunnelRouteOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Optional remark describing the route.
func (o TunnelRouteOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Timestamp of when the resource was created.
func (o TunnelRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
func (o TunnelRouteOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// The private IPv4 or IPv6 range connected by the route, in CIDR notation.
func (o TunnelRouteOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// UUID of the tunnel.
func (o TunnelRouteOutput) TunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.TunnelId }).(pulumi.StringOutput)
}

// UUID of the virtual network.
func (o TunnelRouteOutput) VirtualNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *TunnelRoute) pulumi.StringOutput { return v.VirtualNetworkId }).(pulumi.StringOutput)
}

type TunnelRouteArrayOutput struct{ *pulumi.OutputState }

func (TunnelRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TunnelRoute)(nil)).Elem()
}

func (o TunnelRouteArrayOutput) ToTunnelRouteArrayOutput() TunnelRouteArrayOutput {
	return o
}

func (o TunnelRouteArrayOutput) ToTunnelRouteArrayOutputWithContext(ctx context.Context) TunnelRouteArrayOutput {
	return o
}

func (o TunnelRouteArrayOutput) Index(i pulumi.IntInput) TunnelRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TunnelRoute {
		return vs[0].([]*TunnelRoute)[vs[1].(int)]
	}).(TunnelRouteOutput)
}

type TunnelRouteMapOutput struct{ *pulumi.OutputState }

func (TunnelRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TunnelRoute)(nil)).Elem()
}

func (o TunnelRouteMapOutput) ToTunnelRouteMapOutput() TunnelRouteMapOutput {
	return o
}

func (o TunnelRouteMapOutput) ToTunnelRouteMapOutputWithContext(ctx context.Context) TunnelRouteMapOutput {
	return o
}

func (o TunnelRouteMapOutput) MapIndex(k pulumi.StringInput) TunnelRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TunnelRoute {
		return vs[0].(map[string]*TunnelRoute)[vs[1].(string)]
	}).(TunnelRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelRouteInput)(nil)).Elem(), &TunnelRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelRouteArrayInput)(nil)).Elem(), TunnelRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TunnelRouteMapInput)(nil)).Elem(), TunnelRouteMap{})
	pulumi.RegisterOutputType(TunnelRouteOutput{})
	pulumi.RegisterOutputType(TunnelRouteArrayOutput{})
	pulumi.RegisterOutputType(TunnelRouteMapOutput{})
}
