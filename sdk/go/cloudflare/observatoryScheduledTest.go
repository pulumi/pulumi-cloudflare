// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Observatory Scheduled Test resource.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewObservatoryScheduledTest(ctx, "example", &cloudflare.ObservatoryScheduledTestArgs{
//				Frequency: pulumi.String("WEEKLY"),
//				Region:    pulumi.String("us-central1"),
//				Url:       pulumi.String("example.com"),
//				ZoneId:    pulumi.String("0da42c8d2132a9ddaf714f9e7c920711"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest example <zone_id>:<url>:<region>
// ```
type ObservatoryScheduledTest struct {
	pulumi.CustomResourceState

	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency pulumi.StringOutput `pulumi:"frequency"`
	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region pulumi.StringOutput `pulumi:"region"`
	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	Url pulumi.StringOutput `pulumi:"url"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewObservatoryScheduledTest registers a new resource with the given unique name, arguments, and options.
func NewObservatoryScheduledTest(ctx *pulumi.Context,
	name string, args *ObservatoryScheduledTestArgs, opts ...pulumi.ResourceOption) (*ObservatoryScheduledTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObservatoryScheduledTest
	err := ctx.RegisterResource("cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObservatoryScheduledTest gets an existing ObservatoryScheduledTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObservatoryScheduledTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObservatoryScheduledTestState, opts ...pulumi.ResourceOption) (*ObservatoryScheduledTest, error) {
	var resource ObservatoryScheduledTest
	err := ctx.ReadResource("cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObservatoryScheduledTest resources.
type observatoryScheduledTestState struct {
	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency *string `pulumi:"frequency"`
	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region *string `pulumi:"region"`
	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	Url *string `pulumi:"url"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId *string `pulumi:"zoneId"`
}

type ObservatoryScheduledTestState struct {
	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency pulumi.StringPtrInput
	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region pulumi.StringPtrInput
	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	Url pulumi.StringPtrInput
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringPtrInput
}

func (ObservatoryScheduledTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*observatoryScheduledTestState)(nil)).Elem()
}

type observatoryScheduledTestArgs struct {
	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency string `pulumi:"frequency"`
	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region string `pulumi:"region"`
	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	Url string `pulumi:"url"`
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ObservatoryScheduledTest resource.
type ObservatoryScheduledTestArgs struct {
	// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
	Frequency pulumi.StringInput
	// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
	Region pulumi.StringInput
	// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
	Url pulumi.StringInput
	// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	ZoneId pulumi.StringInput
}

func (ObservatoryScheduledTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*observatoryScheduledTestArgs)(nil)).Elem()
}

type ObservatoryScheduledTestInput interface {
	pulumi.Input

	ToObservatoryScheduledTestOutput() ObservatoryScheduledTestOutput
	ToObservatoryScheduledTestOutputWithContext(ctx context.Context) ObservatoryScheduledTestOutput
}

func (*ObservatoryScheduledTest) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservatoryScheduledTest)(nil)).Elem()
}

func (i *ObservatoryScheduledTest) ToObservatoryScheduledTestOutput() ObservatoryScheduledTestOutput {
	return i.ToObservatoryScheduledTestOutputWithContext(context.Background())
}

func (i *ObservatoryScheduledTest) ToObservatoryScheduledTestOutputWithContext(ctx context.Context) ObservatoryScheduledTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservatoryScheduledTestOutput)
}

// ObservatoryScheduledTestArrayInput is an input type that accepts ObservatoryScheduledTestArray and ObservatoryScheduledTestArrayOutput values.
// You can construct a concrete instance of `ObservatoryScheduledTestArrayInput` via:
//
//	ObservatoryScheduledTestArray{ ObservatoryScheduledTestArgs{...} }
type ObservatoryScheduledTestArrayInput interface {
	pulumi.Input

	ToObservatoryScheduledTestArrayOutput() ObservatoryScheduledTestArrayOutput
	ToObservatoryScheduledTestArrayOutputWithContext(context.Context) ObservatoryScheduledTestArrayOutput
}

type ObservatoryScheduledTestArray []ObservatoryScheduledTestInput

func (ObservatoryScheduledTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservatoryScheduledTest)(nil)).Elem()
}

func (i ObservatoryScheduledTestArray) ToObservatoryScheduledTestArrayOutput() ObservatoryScheduledTestArrayOutput {
	return i.ToObservatoryScheduledTestArrayOutputWithContext(context.Background())
}

func (i ObservatoryScheduledTestArray) ToObservatoryScheduledTestArrayOutputWithContext(ctx context.Context) ObservatoryScheduledTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservatoryScheduledTestArrayOutput)
}

// ObservatoryScheduledTestMapInput is an input type that accepts ObservatoryScheduledTestMap and ObservatoryScheduledTestMapOutput values.
// You can construct a concrete instance of `ObservatoryScheduledTestMapInput` via:
//
//	ObservatoryScheduledTestMap{ "key": ObservatoryScheduledTestArgs{...} }
type ObservatoryScheduledTestMapInput interface {
	pulumi.Input

	ToObservatoryScheduledTestMapOutput() ObservatoryScheduledTestMapOutput
	ToObservatoryScheduledTestMapOutputWithContext(context.Context) ObservatoryScheduledTestMapOutput
}

type ObservatoryScheduledTestMap map[string]ObservatoryScheduledTestInput

func (ObservatoryScheduledTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservatoryScheduledTest)(nil)).Elem()
}

func (i ObservatoryScheduledTestMap) ToObservatoryScheduledTestMapOutput() ObservatoryScheduledTestMapOutput {
	return i.ToObservatoryScheduledTestMapOutputWithContext(context.Background())
}

func (i ObservatoryScheduledTestMap) ToObservatoryScheduledTestMapOutputWithContext(ctx context.Context) ObservatoryScheduledTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObservatoryScheduledTestMapOutput)
}

type ObservatoryScheduledTestOutput struct{ *pulumi.OutputState }

func (ObservatoryScheduledTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObservatoryScheduledTest)(nil)).Elem()
}

func (o ObservatoryScheduledTestOutput) ToObservatoryScheduledTestOutput() ObservatoryScheduledTestOutput {
	return o
}

func (o ObservatoryScheduledTestOutput) ToObservatoryScheduledTestOutputWithContext(ctx context.Context) ObservatoryScheduledTestOutput {
	return o
}

// The frequency to run the test. Available values: `DAILY`, `WEEKLY`. **Modifying this attribute will force creation of a new resource.**
func (o ObservatoryScheduledTestOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservatoryScheduledTest) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

// The region to run the test in. Available values: `us-central1`, `us-east1`, `us-east4`, `us-south1`, `us-west1`, `southamerica-east1`, `europe-north1`, `europe-southwest1`, `europe-west1`, `europe-west2`, `europe-west3`, `europe-west4`, `europe-west8`, `europe-west9`, `asia-east1`, `asia-south1`, `asia-southeast1`, `me-west1`, `australia-southeast1`. **Modifying this attribute will force creation of a new resource.**
func (o ObservatoryScheduledTestOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservatoryScheduledTest) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The page to run the test on. **Modifying this attribute will force creation of a new resource.**
func (o ObservatoryScheduledTestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservatoryScheduledTest) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o ObservatoryScheduledTestOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObservatoryScheduledTest) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ObservatoryScheduledTestArrayOutput struct{ *pulumi.OutputState }

func (ObservatoryScheduledTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObservatoryScheduledTest)(nil)).Elem()
}

func (o ObservatoryScheduledTestArrayOutput) ToObservatoryScheduledTestArrayOutput() ObservatoryScheduledTestArrayOutput {
	return o
}

func (o ObservatoryScheduledTestArrayOutput) ToObservatoryScheduledTestArrayOutputWithContext(ctx context.Context) ObservatoryScheduledTestArrayOutput {
	return o
}

func (o ObservatoryScheduledTestArrayOutput) Index(i pulumi.IntInput) ObservatoryScheduledTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObservatoryScheduledTest {
		return vs[0].([]*ObservatoryScheduledTest)[vs[1].(int)]
	}).(ObservatoryScheduledTestOutput)
}

type ObservatoryScheduledTestMapOutput struct{ *pulumi.OutputState }

func (ObservatoryScheduledTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObservatoryScheduledTest)(nil)).Elem()
}

func (o ObservatoryScheduledTestMapOutput) ToObservatoryScheduledTestMapOutput() ObservatoryScheduledTestMapOutput {
	return o
}

func (o ObservatoryScheduledTestMapOutput) ToObservatoryScheduledTestMapOutputWithContext(ctx context.Context) ObservatoryScheduledTestMapOutput {
	return o
}

func (o ObservatoryScheduledTestMapOutput) MapIndex(k pulumi.StringInput) ObservatoryScheduledTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObservatoryScheduledTest {
		return vs[0].(map[string]*ObservatoryScheduledTest)[vs[1].(string)]
	}).(ObservatoryScheduledTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObservatoryScheduledTestInput)(nil)).Elem(), &ObservatoryScheduledTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservatoryScheduledTestArrayInput)(nil)).Elem(), ObservatoryScheduledTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObservatoryScheduledTestMapInput)(nil)).Elem(), ObservatoryScheduledTestMap{})
	pulumi.RegisterOutputType(ObservatoryScheduledTestOutput{})
	pulumi.RegisterOutputType(ObservatoryScheduledTestArrayOutput{})
	pulumi.RegisterOutputType(ObservatoryScheduledTestMapOutput{})
}
