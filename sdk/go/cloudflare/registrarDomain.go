// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewRegistrarDomain(ctx, "example_registrar_domain", &cloudflare.RegistrarDomainArgs{
//				AccountId:  pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				DomainName: pulumi.String("cloudflare.com"),
//				AutoRenew:  pulumi.Bool(true),
//				Locked:     pulumi.Bool(false),
//				Privacy:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RegistrarDomain struct {
	pulumi.CustomResourceState

	// Identifier
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// Domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Shows whether a registrar lock is in place for a domain.
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// Privacy option controls redacting WHOIS information.
	Privacy pulumi.BoolPtrOutput `pulumi:"privacy"`
}

// NewRegistrarDomain registers a new resource with the given unique name, arguments, and options.
func NewRegistrarDomain(ctx *pulumi.Context,
	name string, args *RegistrarDomainArgs, opts ...pulumi.ResourceOption) (*RegistrarDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistrarDomain
	err := ctx.RegisterResource("cloudflare:index/registrarDomain:RegistrarDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistrarDomain gets an existing RegistrarDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistrarDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistrarDomainState, opts ...pulumi.ResourceOption) (*RegistrarDomain, error) {
	var resource RegistrarDomain
	err := ctx.ReadResource("cloudflare:index/registrarDomain:RegistrarDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistrarDomain resources.
type registrarDomainState struct {
	// Identifier
	AccountId *string `pulumi:"accountId"`
	// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Domain name.
	DomainName *string `pulumi:"domainName"`
	// Shows whether a registrar lock is in place for a domain.
	Locked *bool `pulumi:"locked"`
	// Privacy option controls redacting WHOIS information.
	Privacy *bool `pulumi:"privacy"`
}

type RegistrarDomainState struct {
	// Identifier
	AccountId pulumi.StringPtrInput
	// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
	AutoRenew pulumi.BoolPtrInput
	// Domain name.
	DomainName pulumi.StringPtrInput
	// Shows whether a registrar lock is in place for a domain.
	Locked pulumi.BoolPtrInput
	// Privacy option controls redacting WHOIS information.
	Privacy pulumi.BoolPtrInput
}

func (RegistrarDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*registrarDomainState)(nil)).Elem()
}

type registrarDomainArgs struct {
	// Identifier
	AccountId string `pulumi:"accountId"`
	// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Domain name.
	DomainName string `pulumi:"domainName"`
	// Shows whether a registrar lock is in place for a domain.
	Locked *bool `pulumi:"locked"`
	// Privacy option controls redacting WHOIS information.
	Privacy *bool `pulumi:"privacy"`
}

// The set of arguments for constructing a RegistrarDomain resource.
type RegistrarDomainArgs struct {
	// Identifier
	AccountId pulumi.StringInput
	// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
	AutoRenew pulumi.BoolPtrInput
	// Domain name.
	DomainName pulumi.StringInput
	// Shows whether a registrar lock is in place for a domain.
	Locked pulumi.BoolPtrInput
	// Privacy option controls redacting WHOIS information.
	Privacy pulumi.BoolPtrInput
}

func (RegistrarDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registrarDomainArgs)(nil)).Elem()
}

type RegistrarDomainInput interface {
	pulumi.Input

	ToRegistrarDomainOutput() RegistrarDomainOutput
	ToRegistrarDomainOutputWithContext(ctx context.Context) RegistrarDomainOutput
}

func (*RegistrarDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrarDomain)(nil)).Elem()
}

func (i *RegistrarDomain) ToRegistrarDomainOutput() RegistrarDomainOutput {
	return i.ToRegistrarDomainOutputWithContext(context.Background())
}

func (i *RegistrarDomain) ToRegistrarDomainOutputWithContext(ctx context.Context) RegistrarDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrarDomainOutput)
}

// RegistrarDomainArrayInput is an input type that accepts RegistrarDomainArray and RegistrarDomainArrayOutput values.
// You can construct a concrete instance of `RegistrarDomainArrayInput` via:
//
//	RegistrarDomainArray{ RegistrarDomainArgs{...} }
type RegistrarDomainArrayInput interface {
	pulumi.Input

	ToRegistrarDomainArrayOutput() RegistrarDomainArrayOutput
	ToRegistrarDomainArrayOutputWithContext(context.Context) RegistrarDomainArrayOutput
}

type RegistrarDomainArray []RegistrarDomainInput

func (RegistrarDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistrarDomain)(nil)).Elem()
}

func (i RegistrarDomainArray) ToRegistrarDomainArrayOutput() RegistrarDomainArrayOutput {
	return i.ToRegistrarDomainArrayOutputWithContext(context.Background())
}

func (i RegistrarDomainArray) ToRegistrarDomainArrayOutputWithContext(ctx context.Context) RegistrarDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrarDomainArrayOutput)
}

// RegistrarDomainMapInput is an input type that accepts RegistrarDomainMap and RegistrarDomainMapOutput values.
// You can construct a concrete instance of `RegistrarDomainMapInput` via:
//
//	RegistrarDomainMap{ "key": RegistrarDomainArgs{...} }
type RegistrarDomainMapInput interface {
	pulumi.Input

	ToRegistrarDomainMapOutput() RegistrarDomainMapOutput
	ToRegistrarDomainMapOutputWithContext(context.Context) RegistrarDomainMapOutput
}

type RegistrarDomainMap map[string]RegistrarDomainInput

func (RegistrarDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistrarDomain)(nil)).Elem()
}

func (i RegistrarDomainMap) ToRegistrarDomainMapOutput() RegistrarDomainMapOutput {
	return i.ToRegistrarDomainMapOutputWithContext(context.Background())
}

func (i RegistrarDomainMap) ToRegistrarDomainMapOutputWithContext(ctx context.Context) RegistrarDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrarDomainMapOutput)
}

type RegistrarDomainOutput struct{ *pulumi.OutputState }

func (RegistrarDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrarDomain)(nil)).Elem()
}

func (o RegistrarDomainOutput) ToRegistrarDomainOutput() RegistrarDomainOutput {
	return o
}

func (o RegistrarDomainOutput) ToRegistrarDomainOutputWithContext(ctx context.Context) RegistrarDomainOutput {
	return o
}

// Identifier
func (o RegistrarDomainOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistrarDomain) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Auto-renew controls whether subscription is automatically renewed upon domain expiration.
func (o RegistrarDomainOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistrarDomain) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Domain name.
func (o RegistrarDomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistrarDomain) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Shows whether a registrar lock is in place for a domain.
func (o RegistrarDomainOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistrarDomain) pulumi.BoolPtrOutput { return v.Locked }).(pulumi.BoolPtrOutput)
}

// Privacy option controls redacting WHOIS information.
func (o RegistrarDomainOutput) Privacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistrarDomain) pulumi.BoolPtrOutput { return v.Privacy }).(pulumi.BoolPtrOutput)
}

type RegistrarDomainArrayOutput struct{ *pulumi.OutputState }

func (RegistrarDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistrarDomain)(nil)).Elem()
}

func (o RegistrarDomainArrayOutput) ToRegistrarDomainArrayOutput() RegistrarDomainArrayOutput {
	return o
}

func (o RegistrarDomainArrayOutput) ToRegistrarDomainArrayOutputWithContext(ctx context.Context) RegistrarDomainArrayOutput {
	return o
}

func (o RegistrarDomainArrayOutput) Index(i pulumi.IntInput) RegistrarDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistrarDomain {
		return vs[0].([]*RegistrarDomain)[vs[1].(int)]
	}).(RegistrarDomainOutput)
}

type RegistrarDomainMapOutput struct{ *pulumi.OutputState }

func (RegistrarDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistrarDomain)(nil)).Elem()
}

func (o RegistrarDomainMapOutput) ToRegistrarDomainMapOutput() RegistrarDomainMapOutput {
	return o
}

func (o RegistrarDomainMapOutput) ToRegistrarDomainMapOutputWithContext(ctx context.Context) RegistrarDomainMapOutput {
	return o
}

func (o RegistrarDomainMapOutput) MapIndex(k pulumi.StringInput) RegistrarDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistrarDomain {
		return vs[0].(map[string]*RegistrarDomain)[vs[1].(string)]
	}).(RegistrarDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrarDomainInput)(nil)).Elem(), &RegistrarDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrarDomainArrayInput)(nil)).Elem(), RegistrarDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistrarDomainMapInput)(nil)).Elem(), RegistrarDomainMap{})
	pulumi.RegisterOutputType(RegistrarDomainOutput{})
	pulumi.RegisterOutputType(RegistrarDomainArrayOutput{})
	pulumi.RegisterOutputType(RegistrarDomainMapOutput{})
}
