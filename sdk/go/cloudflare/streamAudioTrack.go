// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewStreamAudioTrack(ctx, "example_stream_audio_track", &cloudflare.StreamAudioTrackArgs{
//				AccountId:       pulumi.String("023e105f4ecef8ad9ca31a8372d0c353"),
//				Identifier:      pulumi.String("ea95132c15732412d22c1476fa83f27a"),
//				AudioIdentifier: pulumi.String("ea95132c15732412d22c1476fa83f27a"),
//				Default:         pulumi.Bool(true),
//				Label:           pulumi.String("director commentary"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StreamAudioTrack struct {
	pulumi.CustomResourceState

	// The account identifier tag.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The unique identifier for an additional audio track.
	AudioIdentifier pulumi.StringPtrOutput `pulumi:"audioIdentifier"`
	// Denotes whether the audio track will be played by default in a player.
	Default pulumi.BoolOutput `pulumi:"default"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label pulumi.StringPtrOutput `pulumi:"label"`
	// Specifies the processing status of the video.
	// Available values: "queued", "ready", "error".
	Status pulumi.StringOutput `pulumi:"status"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewStreamAudioTrack registers a new resource with the given unique name, arguments, and options.
func NewStreamAudioTrack(ctx *pulumi.Context,
	name string, args *StreamAudioTrackArgs, opts ...pulumi.ResourceOption) (*StreamAudioTrack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamAudioTrack
	err := ctx.RegisterResource("cloudflare:index/streamAudioTrack:StreamAudioTrack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamAudioTrack gets an existing StreamAudioTrack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamAudioTrack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamAudioTrackState, opts ...pulumi.ResourceOption) (*StreamAudioTrack, error) {
	var resource StreamAudioTrack
	err := ctx.ReadResource("cloudflare:index/streamAudioTrack:StreamAudioTrack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamAudioTrack resources.
type streamAudioTrackState struct {
	// The account identifier tag.
	AccountId *string `pulumi:"accountId"`
	// The unique identifier for an additional audio track.
	AudioIdentifier *string `pulumi:"audioIdentifier"`
	// Denotes whether the audio track will be played by default in a player.
	Default *bool `pulumi:"default"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier *string `pulumi:"identifier"`
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label *string `pulumi:"label"`
	// Specifies the processing status of the video.
	// Available values: "queued", "ready", "error".
	Status *string `pulumi:"status"`
	// A Cloudflare-generated unique identifier for a media item.
	Uid *string `pulumi:"uid"`
}

type StreamAudioTrackState struct {
	// The account identifier tag.
	AccountId pulumi.StringPtrInput
	// The unique identifier for an additional audio track.
	AudioIdentifier pulumi.StringPtrInput
	// Denotes whether the audio track will be played by default in a player.
	Default pulumi.BoolPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringPtrInput
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label pulumi.StringPtrInput
	// Specifies the processing status of the video.
	// Available values: "queued", "ready", "error".
	Status pulumi.StringPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Uid pulumi.StringPtrInput
}

func (StreamAudioTrackState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAudioTrackState)(nil)).Elem()
}

type streamAudioTrackArgs struct {
	// The account identifier tag.
	AccountId string `pulumi:"accountId"`
	// The unique identifier for an additional audio track.
	AudioIdentifier *string `pulumi:"audioIdentifier"`
	// Denotes whether the audio track will be played by default in a player.
	Default *bool `pulumi:"default"`
	// A Cloudflare-generated unique identifier for a media item.
	Identifier string `pulumi:"identifier"`
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label *string `pulumi:"label"`
}

// The set of arguments for constructing a StreamAudioTrack resource.
type StreamAudioTrackArgs struct {
	// The account identifier tag.
	AccountId pulumi.StringInput
	// The unique identifier for an additional audio track.
	AudioIdentifier pulumi.StringPtrInput
	// Denotes whether the audio track will be played by default in a player.
	Default pulumi.BoolPtrInput
	// A Cloudflare-generated unique identifier for a media item.
	Identifier pulumi.StringInput
	// A string to uniquely identify the track amongst other audio track labels for the specified video.
	Label pulumi.StringPtrInput
}

func (StreamAudioTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamAudioTrackArgs)(nil)).Elem()
}

type StreamAudioTrackInput interface {
	pulumi.Input

	ToStreamAudioTrackOutput() StreamAudioTrackOutput
	ToStreamAudioTrackOutputWithContext(ctx context.Context) StreamAudioTrackOutput
}

func (*StreamAudioTrack) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAudioTrack)(nil)).Elem()
}

func (i *StreamAudioTrack) ToStreamAudioTrackOutput() StreamAudioTrackOutput {
	return i.ToStreamAudioTrackOutputWithContext(context.Background())
}

func (i *StreamAudioTrack) ToStreamAudioTrackOutputWithContext(ctx context.Context) StreamAudioTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAudioTrackOutput)
}

// StreamAudioTrackArrayInput is an input type that accepts StreamAudioTrackArray and StreamAudioTrackArrayOutput values.
// You can construct a concrete instance of `StreamAudioTrackArrayInput` via:
//
//	StreamAudioTrackArray{ StreamAudioTrackArgs{...} }
type StreamAudioTrackArrayInput interface {
	pulumi.Input

	ToStreamAudioTrackArrayOutput() StreamAudioTrackArrayOutput
	ToStreamAudioTrackArrayOutputWithContext(context.Context) StreamAudioTrackArrayOutput
}

type StreamAudioTrackArray []StreamAudioTrackInput

func (StreamAudioTrackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAudioTrack)(nil)).Elem()
}

func (i StreamAudioTrackArray) ToStreamAudioTrackArrayOutput() StreamAudioTrackArrayOutput {
	return i.ToStreamAudioTrackArrayOutputWithContext(context.Background())
}

func (i StreamAudioTrackArray) ToStreamAudioTrackArrayOutputWithContext(ctx context.Context) StreamAudioTrackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAudioTrackArrayOutput)
}

// StreamAudioTrackMapInput is an input type that accepts StreamAudioTrackMap and StreamAudioTrackMapOutput values.
// You can construct a concrete instance of `StreamAudioTrackMapInput` via:
//
//	StreamAudioTrackMap{ "key": StreamAudioTrackArgs{...} }
type StreamAudioTrackMapInput interface {
	pulumi.Input

	ToStreamAudioTrackMapOutput() StreamAudioTrackMapOutput
	ToStreamAudioTrackMapOutputWithContext(context.Context) StreamAudioTrackMapOutput
}

type StreamAudioTrackMap map[string]StreamAudioTrackInput

func (StreamAudioTrackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAudioTrack)(nil)).Elem()
}

func (i StreamAudioTrackMap) ToStreamAudioTrackMapOutput() StreamAudioTrackMapOutput {
	return i.ToStreamAudioTrackMapOutputWithContext(context.Background())
}

func (i StreamAudioTrackMap) ToStreamAudioTrackMapOutputWithContext(ctx context.Context) StreamAudioTrackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamAudioTrackMapOutput)
}

type StreamAudioTrackOutput struct{ *pulumi.OutputState }

func (StreamAudioTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamAudioTrack)(nil)).Elem()
}

func (o StreamAudioTrackOutput) ToStreamAudioTrackOutput() StreamAudioTrackOutput {
	return o
}

func (o StreamAudioTrackOutput) ToStreamAudioTrackOutputWithContext(ctx context.Context) StreamAudioTrackOutput {
	return o
}

// The account identifier tag.
func (o StreamAudioTrackOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The unique identifier for an additional audio track.
func (o StreamAudioTrackOutput) AudioIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringPtrOutput { return v.AudioIdentifier }).(pulumi.StringPtrOutput)
}

// Denotes whether the audio track will be played by default in a player.
func (o StreamAudioTrackOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamAudioTrackOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// A string to uniquely identify the track amongst other audio track labels for the specified video.
func (o StreamAudioTrackOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// Specifies the processing status of the video.
// Available values: "queued", "ready", "error".
func (o StreamAudioTrackOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A Cloudflare-generated unique identifier for a media item.
func (o StreamAudioTrackOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamAudioTrack) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

type StreamAudioTrackArrayOutput struct{ *pulumi.OutputState }

func (StreamAudioTrackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamAudioTrack)(nil)).Elem()
}

func (o StreamAudioTrackArrayOutput) ToStreamAudioTrackArrayOutput() StreamAudioTrackArrayOutput {
	return o
}

func (o StreamAudioTrackArrayOutput) ToStreamAudioTrackArrayOutputWithContext(ctx context.Context) StreamAudioTrackArrayOutput {
	return o
}

func (o StreamAudioTrackArrayOutput) Index(i pulumi.IntInput) StreamAudioTrackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamAudioTrack {
		return vs[0].([]*StreamAudioTrack)[vs[1].(int)]
	}).(StreamAudioTrackOutput)
}

type StreamAudioTrackMapOutput struct{ *pulumi.OutputState }

func (StreamAudioTrackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamAudioTrack)(nil)).Elem()
}

func (o StreamAudioTrackMapOutput) ToStreamAudioTrackMapOutput() StreamAudioTrackMapOutput {
	return o
}

func (o StreamAudioTrackMapOutput) ToStreamAudioTrackMapOutputWithContext(ctx context.Context) StreamAudioTrackMapOutput {
	return o
}

func (o StreamAudioTrackMapOutput) MapIndex(k pulumi.StringInput) StreamAudioTrackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamAudioTrack {
		return vs[0].(map[string]*StreamAudioTrack)[vs[1].(string)]
	}).(StreamAudioTrackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAudioTrackInput)(nil)).Elem(), &StreamAudioTrack{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAudioTrackArrayInput)(nil)).Elem(), StreamAudioTrackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamAudioTrackMapInput)(nil)).Elem(), StreamAudioTrackMap{})
	pulumi.RegisterOutputType(StreamAudioTrackOutput{})
	pulumi.RegisterOutputType(StreamAudioTrackArrayOutput{})
	pulumi.RegisterOutputType(StreamAudioTrackMapOutput{})
}
