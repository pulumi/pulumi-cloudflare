// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare DLP Profile resource. Data Loss Prevention profiles
// are a set of entries that can be matched in HTTP bodies or files.
// They are referenced in Zero Trust Gateway rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Predefined profile must be imported, cannot be created
//			_, err := cloudflare.NewZeroTrustDlpProfile(ctx, "creds", &cloudflare.ZeroTrustDlpProfileArgs{
//				AccountId:         pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:              pulumi.String("Credentials and Secrets"),
//				Type:              pulumi.String("predefined"),
//				AllowedMatchCount: pulumi.Int(3),
//				Entries: cloudflare.ZeroTrustDlpProfileEntryArray{
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Enabled: pulumi.Bool(true),
//						Name:    pulumi.String("Amazon AWS Access Key ID"),
//						Id:      pulumi.String("d8fcfc9c-773c-405e-8426-21ecbb67ba93"),
//					},
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Enabled: pulumi.Bool(false),
//						Id:      pulumi.String("2c0e33e1-71da-40c8-aad3-32e674ad3d96"),
//						Name:    pulumi.String("Amazon AWS Secret Access Key"),
//					},
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Enabled: pulumi.Bool(true),
//						Id:      pulumi.String("4e92c006-3802-4dff-bbe1-8e1513b1c92a"),
//						Name:    pulumi.String("Microsoft Azure Client Secret"),
//					},
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Enabled: pulumi.Bool(false),
//						Id:      pulumi.String("5c713294-2375-4904-abcf-e4a15be4d592"),
//						Name:    pulumi.String("SSH Private Key"),
//					},
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Enabled: pulumi.Bool(true),
//						Id:      pulumi.String("6c6579e4-d832-42d5-905c-8e53340930f2"),
//						Name:    pulumi.String("Google GCP API Key"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Custom profile
//			_, err = cloudflare.NewZeroTrustDlpProfile(ctx, "example_custom", &cloudflare.ZeroTrustDlpProfileArgs{
//				AccountId:         pulumi.String("f037e56e89293a057740de681ac9abbe"),
//				Name:              pulumi.String("Example Custom Profile"),
//				Description:       pulumi.String("A profile with example entries"),
//				Type:              pulumi.String("custom"),
//				AllowedMatchCount: pulumi.Int(0),
//				Entries: cloudflare.ZeroTrustDlpProfileEntryArray{
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Name:    pulumi.String("Matches visa credit cards"),
//						Enabled: pulumi.Bool(true),
//						Pattern: &cloudflare.ZeroTrustDlpProfileEntryPatternArgs{
//							Regex:      pulumi.String("4\\d{3}([-\\. ])?\\d{4}([-\\. ])?\\d{4}([-\\. ])?\\d{4}"),
//							Validation: pulumi.String("luhn"),
//						},
//					},
//					&cloudflare.ZeroTrustDlpProfileEntryArgs{
//						Name:    pulumi.String("Matches diners club card"),
//						Enabled: pulumi.Bool(true),
//						Pattern: &cloudflare.ZeroTrustDlpProfileEntryPatternArgs{
//							Regex:      pulumi.String("(?:0[0-5]|[68][0-9])[0-9]{11}"),
//							Validation: pulumi.String("luhn"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/zeroTrustDlpProfile:ZeroTrustDlpProfile example <account_id>/<dlp_profile_id>
// ```
type ZeroTrustDlpProfile struct {
	pulumi.CustomResourceState

	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Related DLP policies will trigger when the match count exceeds the number set.
	AllowedMatchCount pulumi.IntOutput `pulumi:"allowedMatchCount"`
	// Scan the context of predefined entries to only return matches surrounded by keywords.
	ContextAwareness ZeroTrustDlpProfileContextAwarenessOutput `pulumi:"contextAwareness"`
	// Brief summary of the profile and its intended use.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of entries to apply to the profile.
	Entries ZeroTrustDlpProfileEntryArrayOutput `pulumi:"entries"`
	// Name of the profile. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringOutput `pulumi:"name"`
	// If true, scan images via OCR to determine if any text present matches filters.
	OcrEnabled pulumi.BoolPtrOutput `pulumi:"ocrEnabled"`
	// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewZeroTrustDlpProfile registers a new resource with the given unique name, arguments, and options.
func NewZeroTrustDlpProfile(ctx *pulumi.Context,
	name string, args *ZeroTrustDlpProfileArgs, opts ...pulumi.ResourceOption) (*ZeroTrustDlpProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.AllowedMatchCount == nil {
		return nil, errors.New("invalid value for required argument 'AllowedMatchCount'")
	}
	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZeroTrustDlpProfile
	err := ctx.RegisterResource("cloudflare:index/zeroTrustDlpProfile:ZeroTrustDlpProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZeroTrustDlpProfile gets an existing ZeroTrustDlpProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZeroTrustDlpProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZeroTrustDlpProfileState, opts ...pulumi.ResourceOption) (*ZeroTrustDlpProfile, error) {
	var resource ZeroTrustDlpProfile
	err := ctx.ReadResource("cloudflare:index/zeroTrustDlpProfile:ZeroTrustDlpProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZeroTrustDlpProfile resources.
type zeroTrustDlpProfileState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId *string `pulumi:"accountId"`
	// Related DLP policies will trigger when the match count exceeds the number set.
	AllowedMatchCount *int `pulumi:"allowedMatchCount"`
	// Scan the context of predefined entries to only return matches surrounded by keywords.
	ContextAwareness *ZeroTrustDlpProfileContextAwareness `pulumi:"contextAwareness"`
	// Brief summary of the profile and its intended use.
	Description *string `pulumi:"description"`
	// List of entries to apply to the profile.
	Entries []ZeroTrustDlpProfileEntry `pulumi:"entries"`
	// Name of the profile. **Modifying this attribute will force creation of a new resource.**
	Name *string `pulumi:"name"`
	// If true, scan images via OCR to determine if any text present matches filters.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
	Type *string `pulumi:"type"`
}

type ZeroTrustDlpProfileState struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringPtrInput
	// Related DLP policies will trigger when the match count exceeds the number set.
	AllowedMatchCount pulumi.IntPtrInput
	// Scan the context of predefined entries to only return matches surrounded by keywords.
	ContextAwareness ZeroTrustDlpProfileContextAwarenessPtrInput
	// Brief summary of the profile and its intended use.
	Description pulumi.StringPtrInput
	// List of entries to apply to the profile.
	Entries ZeroTrustDlpProfileEntryArrayInput
	// Name of the profile. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringPtrInput
	// If true, scan images via OCR to determine if any text present matches filters.
	OcrEnabled pulumi.BoolPtrInput
	// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
	Type pulumi.StringPtrInput
}

func (ZeroTrustDlpProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDlpProfileState)(nil)).Elem()
}

type zeroTrustDlpProfileArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId string `pulumi:"accountId"`
	// Related DLP policies will trigger when the match count exceeds the number set.
	AllowedMatchCount int `pulumi:"allowedMatchCount"`
	// Scan the context of predefined entries to only return matches surrounded by keywords.
	ContextAwareness *ZeroTrustDlpProfileContextAwareness `pulumi:"contextAwareness"`
	// Brief summary of the profile and its intended use.
	Description *string `pulumi:"description"`
	// List of entries to apply to the profile.
	Entries []ZeroTrustDlpProfileEntry `pulumi:"entries"`
	// Name of the profile. **Modifying this attribute will force creation of a new resource.**
	Name string `pulumi:"name"`
	// If true, scan images via OCR to determine if any text present matches filters.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ZeroTrustDlpProfile resource.
type ZeroTrustDlpProfileArgs struct {
	// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
	AccountId pulumi.StringInput
	// Related DLP policies will trigger when the match count exceeds the number set.
	AllowedMatchCount pulumi.IntInput
	// Scan the context of predefined entries to only return matches surrounded by keywords.
	ContextAwareness ZeroTrustDlpProfileContextAwarenessPtrInput
	// Brief summary of the profile and its intended use.
	Description pulumi.StringPtrInput
	// List of entries to apply to the profile.
	Entries ZeroTrustDlpProfileEntryArrayInput
	// Name of the profile. **Modifying this attribute will force creation of a new resource.**
	Name pulumi.StringInput
	// If true, scan images via OCR to determine if any text present matches filters.
	OcrEnabled pulumi.BoolPtrInput
	// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
	Type pulumi.StringInput
}

func (ZeroTrustDlpProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zeroTrustDlpProfileArgs)(nil)).Elem()
}

type ZeroTrustDlpProfileInput interface {
	pulumi.Input

	ToZeroTrustDlpProfileOutput() ZeroTrustDlpProfileOutput
	ToZeroTrustDlpProfileOutputWithContext(ctx context.Context) ZeroTrustDlpProfileOutput
}

func (*ZeroTrustDlpProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDlpProfile)(nil)).Elem()
}

func (i *ZeroTrustDlpProfile) ToZeroTrustDlpProfileOutput() ZeroTrustDlpProfileOutput {
	return i.ToZeroTrustDlpProfileOutputWithContext(context.Background())
}

func (i *ZeroTrustDlpProfile) ToZeroTrustDlpProfileOutputWithContext(ctx context.Context) ZeroTrustDlpProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDlpProfileOutput)
}

// ZeroTrustDlpProfileArrayInput is an input type that accepts ZeroTrustDlpProfileArray and ZeroTrustDlpProfileArrayOutput values.
// You can construct a concrete instance of `ZeroTrustDlpProfileArrayInput` via:
//
//	ZeroTrustDlpProfileArray{ ZeroTrustDlpProfileArgs{...} }
type ZeroTrustDlpProfileArrayInput interface {
	pulumi.Input

	ToZeroTrustDlpProfileArrayOutput() ZeroTrustDlpProfileArrayOutput
	ToZeroTrustDlpProfileArrayOutputWithContext(context.Context) ZeroTrustDlpProfileArrayOutput
}

type ZeroTrustDlpProfileArray []ZeroTrustDlpProfileInput

func (ZeroTrustDlpProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDlpProfile)(nil)).Elem()
}

func (i ZeroTrustDlpProfileArray) ToZeroTrustDlpProfileArrayOutput() ZeroTrustDlpProfileArrayOutput {
	return i.ToZeroTrustDlpProfileArrayOutputWithContext(context.Background())
}

func (i ZeroTrustDlpProfileArray) ToZeroTrustDlpProfileArrayOutputWithContext(ctx context.Context) ZeroTrustDlpProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDlpProfileArrayOutput)
}

// ZeroTrustDlpProfileMapInput is an input type that accepts ZeroTrustDlpProfileMap and ZeroTrustDlpProfileMapOutput values.
// You can construct a concrete instance of `ZeroTrustDlpProfileMapInput` via:
//
//	ZeroTrustDlpProfileMap{ "key": ZeroTrustDlpProfileArgs{...} }
type ZeroTrustDlpProfileMapInput interface {
	pulumi.Input

	ToZeroTrustDlpProfileMapOutput() ZeroTrustDlpProfileMapOutput
	ToZeroTrustDlpProfileMapOutputWithContext(context.Context) ZeroTrustDlpProfileMapOutput
}

type ZeroTrustDlpProfileMap map[string]ZeroTrustDlpProfileInput

func (ZeroTrustDlpProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDlpProfile)(nil)).Elem()
}

func (i ZeroTrustDlpProfileMap) ToZeroTrustDlpProfileMapOutput() ZeroTrustDlpProfileMapOutput {
	return i.ToZeroTrustDlpProfileMapOutputWithContext(context.Background())
}

func (i ZeroTrustDlpProfileMap) ToZeroTrustDlpProfileMapOutputWithContext(ctx context.Context) ZeroTrustDlpProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZeroTrustDlpProfileMapOutput)
}

type ZeroTrustDlpProfileOutput struct{ *pulumi.OutputState }

func (ZeroTrustDlpProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZeroTrustDlpProfile)(nil)).Elem()
}

func (o ZeroTrustDlpProfileOutput) ToZeroTrustDlpProfileOutput() ZeroTrustDlpProfileOutput {
	return o
}

func (o ZeroTrustDlpProfileOutput) ToZeroTrustDlpProfileOutputWithContext(ctx context.Context) ZeroTrustDlpProfileOutput {
	return o
}

// The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
func (o ZeroTrustDlpProfileOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Related DLP policies will trigger when the match count exceeds the number set.
func (o ZeroTrustDlpProfileOutput) AllowedMatchCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.IntOutput { return v.AllowedMatchCount }).(pulumi.IntOutput)
}

// Scan the context of predefined entries to only return matches surrounded by keywords.
func (o ZeroTrustDlpProfileOutput) ContextAwareness() ZeroTrustDlpProfileContextAwarenessOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) ZeroTrustDlpProfileContextAwarenessOutput { return v.ContextAwareness }).(ZeroTrustDlpProfileContextAwarenessOutput)
}

// Brief summary of the profile and its intended use.
func (o ZeroTrustDlpProfileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of entries to apply to the profile.
func (o ZeroTrustDlpProfileOutput) Entries() ZeroTrustDlpProfileEntryArrayOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) ZeroTrustDlpProfileEntryArrayOutput { return v.Entries }).(ZeroTrustDlpProfileEntryArrayOutput)
}

// Name of the profile. **Modifying this attribute will force creation of a new resource.**
func (o ZeroTrustDlpProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If true, scan images via OCR to determine if any text present matches filters.
func (o ZeroTrustDlpProfileOutput) OcrEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.BoolPtrOutput { return v.OcrEnabled }).(pulumi.BoolPtrOutput)
}

// The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
func (o ZeroTrustDlpProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ZeroTrustDlpProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ZeroTrustDlpProfileArrayOutput struct{ *pulumi.OutputState }

func (ZeroTrustDlpProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZeroTrustDlpProfile)(nil)).Elem()
}

func (o ZeroTrustDlpProfileArrayOutput) ToZeroTrustDlpProfileArrayOutput() ZeroTrustDlpProfileArrayOutput {
	return o
}

func (o ZeroTrustDlpProfileArrayOutput) ToZeroTrustDlpProfileArrayOutputWithContext(ctx context.Context) ZeroTrustDlpProfileArrayOutput {
	return o
}

func (o ZeroTrustDlpProfileArrayOutput) Index(i pulumi.IntInput) ZeroTrustDlpProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZeroTrustDlpProfile {
		return vs[0].([]*ZeroTrustDlpProfile)[vs[1].(int)]
	}).(ZeroTrustDlpProfileOutput)
}

type ZeroTrustDlpProfileMapOutput struct{ *pulumi.OutputState }

func (ZeroTrustDlpProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZeroTrustDlpProfile)(nil)).Elem()
}

func (o ZeroTrustDlpProfileMapOutput) ToZeroTrustDlpProfileMapOutput() ZeroTrustDlpProfileMapOutput {
	return o
}

func (o ZeroTrustDlpProfileMapOutput) ToZeroTrustDlpProfileMapOutputWithContext(ctx context.Context) ZeroTrustDlpProfileMapOutput {
	return o
}

func (o ZeroTrustDlpProfileMapOutput) MapIndex(k pulumi.StringInput) ZeroTrustDlpProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZeroTrustDlpProfile {
		return vs[0].(map[string]*ZeroTrustDlpProfile)[vs[1].(string)]
	}).(ZeroTrustDlpProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDlpProfileInput)(nil)).Elem(), &ZeroTrustDlpProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDlpProfileArrayInput)(nil)).Elem(), ZeroTrustDlpProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZeroTrustDlpProfileMapInput)(nil)).Elem(), ZeroTrustDlpProfileMap{})
	pulumi.RegisterOutputType(ZeroTrustDlpProfileOutput{})
	pulumi.RegisterOutputType(ZeroTrustDlpProfileArrayOutput{})
	pulumi.RegisterOutputType(ZeroTrustDlpProfileMapOutput{})
}
