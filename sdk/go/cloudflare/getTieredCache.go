// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.LookupTieredCache(ctx, &cloudflare.LookupTieredCacheArgs{
//				ZoneId: "023e105f4ecef8ad9ca31a8372d0c353",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTieredCache(ctx *pulumi.Context, args *LookupTieredCacheArgs, opts ...pulumi.InvokeOption) (*LookupTieredCacheResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTieredCacheResult
	err := ctx.Invoke("cloudflare:index/getTieredCache:getTieredCache", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTieredCache.
type LookupTieredCacheArgs struct {
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getTieredCache.
type LookupTieredCacheResult struct {
	// Whether the setting is editable
	Editable bool `pulumi:"editable"`
	// ID of the zone setting.
	// Available values: "tiered*cache*smart*topology*enable".
	Id string `pulumi:"id"`
	// Last time this setting was modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// The value of the feature
	// Available values: "on", "off".
	Value string `pulumi:"value"`
	// Identifier
	ZoneId string `pulumi:"zoneId"`
}

func LookupTieredCacheOutput(ctx *pulumi.Context, args LookupTieredCacheOutputArgs, opts ...pulumi.InvokeOption) LookupTieredCacheResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTieredCacheResultOutput, error) {
			args := v.(LookupTieredCacheArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudflare:index/getTieredCache:getTieredCache", args, LookupTieredCacheResultOutput{}, options).(LookupTieredCacheResultOutput), nil
		}).(LookupTieredCacheResultOutput)
}

// A collection of arguments for invoking getTieredCache.
type LookupTieredCacheOutputArgs struct {
	// Identifier
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LookupTieredCacheOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTieredCacheArgs)(nil)).Elem()
}

// A collection of values returned by getTieredCache.
type LookupTieredCacheResultOutput struct{ *pulumi.OutputState }

func (LookupTieredCacheResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTieredCacheResult)(nil)).Elem()
}

func (o LookupTieredCacheResultOutput) ToLookupTieredCacheResultOutput() LookupTieredCacheResultOutput {
	return o
}

func (o LookupTieredCacheResultOutput) ToLookupTieredCacheResultOutputWithContext(ctx context.Context) LookupTieredCacheResultOutput {
	return o
}

// Whether the setting is editable
func (o LookupTieredCacheResultOutput) Editable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTieredCacheResult) bool { return v.Editable }).(pulumi.BoolOutput)
}

// ID of the zone setting.
// Available values: "tiered*cache*smart*topology*enable".
func (o LookupTieredCacheResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTieredCacheResult) string { return v.Id }).(pulumi.StringOutput)
}

// Last time this setting was modified.
func (o LookupTieredCacheResultOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTieredCacheResult) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// The value of the feature
// Available values: "on", "off".
func (o LookupTieredCacheResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTieredCacheResult) string { return v.Value }).(pulumi.StringOutput)
}

// Identifier
func (o LookupTieredCacheResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTieredCacheResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTieredCacheResultOutput{})
}
