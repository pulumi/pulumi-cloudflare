// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Cloudflare Content Scanning Expression resource for managing custom scan expression within a specific zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v5/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enable Content Scanning before trying to add custom scan expressions
//			example, err := cloudflare.NewContentScanning(ctx, "example", &cloudflare.ContentScanningArgs{
//				ZoneId:  pulumi.String("399c6f4950c01a5a141b99ff7fbcbd8b"),
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewContentScanningExpression(ctx, "first_example", &cloudflare.ContentScanningExpressionArgs{
//				ZoneId:  example.ZoneId,
//				Payload: pulumi.String("lookup_json_string(http.request.body.raw, \"file\")"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudflare.NewContentScanningExpression(ctx, "second_example", &cloudflare.ContentScanningExpressionArgs{
//				ZoneId:  example.ZoneId,
//				Payload: pulumi.String("lookup_json_string(http.request.body.raw, \"document\")"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/contentScanningExpression:ContentScanningExpression example <zone_id>/<resource_id>
// ```
type ContentScanningExpression struct {
	pulumi.CustomResourceState

	// Custom scan expression to tell the content scanner where to find the content objects.
	Payload pulumi.StringOutput `pulumi:"payload"`
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewContentScanningExpression registers a new resource with the given unique name, arguments, and options.
func NewContentScanningExpression(ctx *pulumi.Context,
	name string, args *ContentScanningExpressionArgs, opts ...pulumi.ResourceOption) (*ContentScanningExpression, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Payload == nil {
		return nil, errors.New("invalid value for required argument 'Payload'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContentScanningExpression
	err := ctx.RegisterResource("cloudflare:index/contentScanningExpression:ContentScanningExpression", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContentScanningExpression gets an existing ContentScanningExpression resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContentScanningExpression(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContentScanningExpressionState, opts ...pulumi.ResourceOption) (*ContentScanningExpression, error) {
	var resource ContentScanningExpression
	err := ctx.ReadResource("cloudflare:index/contentScanningExpression:ContentScanningExpression", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContentScanningExpression resources.
type contentScanningExpressionState struct {
	// Custom scan expression to tell the content scanner where to find the content objects.
	Payload *string `pulumi:"payload"`
	// The zone identifier to target for the resource.
	ZoneId *string `pulumi:"zoneId"`
}

type ContentScanningExpressionState struct {
	// Custom scan expression to tell the content scanner where to find the content objects.
	Payload pulumi.StringPtrInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringPtrInput
}

func (ContentScanningExpressionState) ElementType() reflect.Type {
	return reflect.TypeOf((*contentScanningExpressionState)(nil)).Elem()
}

type contentScanningExpressionArgs struct {
	// Custom scan expression to tell the content scanner where to find the content objects.
	Payload string `pulumi:"payload"`
	// The zone identifier to target for the resource.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ContentScanningExpression resource.
type ContentScanningExpressionArgs struct {
	// Custom scan expression to tell the content scanner where to find the content objects.
	Payload pulumi.StringInput
	// The zone identifier to target for the resource.
	ZoneId pulumi.StringInput
}

func (ContentScanningExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contentScanningExpressionArgs)(nil)).Elem()
}

type ContentScanningExpressionInput interface {
	pulumi.Input

	ToContentScanningExpressionOutput() ContentScanningExpressionOutput
	ToContentScanningExpressionOutputWithContext(ctx context.Context) ContentScanningExpressionOutput
}

func (*ContentScanningExpression) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentScanningExpression)(nil)).Elem()
}

func (i *ContentScanningExpression) ToContentScanningExpressionOutput() ContentScanningExpressionOutput {
	return i.ToContentScanningExpressionOutputWithContext(context.Background())
}

func (i *ContentScanningExpression) ToContentScanningExpressionOutputWithContext(ctx context.Context) ContentScanningExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningExpressionOutput)
}

// ContentScanningExpressionArrayInput is an input type that accepts ContentScanningExpressionArray and ContentScanningExpressionArrayOutput values.
// You can construct a concrete instance of `ContentScanningExpressionArrayInput` via:
//
//	ContentScanningExpressionArray{ ContentScanningExpressionArgs{...} }
type ContentScanningExpressionArrayInput interface {
	pulumi.Input

	ToContentScanningExpressionArrayOutput() ContentScanningExpressionArrayOutput
	ToContentScanningExpressionArrayOutputWithContext(context.Context) ContentScanningExpressionArrayOutput
}

type ContentScanningExpressionArray []ContentScanningExpressionInput

func (ContentScanningExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentScanningExpression)(nil)).Elem()
}

func (i ContentScanningExpressionArray) ToContentScanningExpressionArrayOutput() ContentScanningExpressionArrayOutput {
	return i.ToContentScanningExpressionArrayOutputWithContext(context.Background())
}

func (i ContentScanningExpressionArray) ToContentScanningExpressionArrayOutputWithContext(ctx context.Context) ContentScanningExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningExpressionArrayOutput)
}

// ContentScanningExpressionMapInput is an input type that accepts ContentScanningExpressionMap and ContentScanningExpressionMapOutput values.
// You can construct a concrete instance of `ContentScanningExpressionMapInput` via:
//
//	ContentScanningExpressionMap{ "key": ContentScanningExpressionArgs{...} }
type ContentScanningExpressionMapInput interface {
	pulumi.Input

	ToContentScanningExpressionMapOutput() ContentScanningExpressionMapOutput
	ToContentScanningExpressionMapOutputWithContext(context.Context) ContentScanningExpressionMapOutput
}

type ContentScanningExpressionMap map[string]ContentScanningExpressionInput

func (ContentScanningExpressionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentScanningExpression)(nil)).Elem()
}

func (i ContentScanningExpressionMap) ToContentScanningExpressionMapOutput() ContentScanningExpressionMapOutput {
	return i.ToContentScanningExpressionMapOutputWithContext(context.Background())
}

func (i ContentScanningExpressionMap) ToContentScanningExpressionMapOutputWithContext(ctx context.Context) ContentScanningExpressionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentScanningExpressionMapOutput)
}

type ContentScanningExpressionOutput struct{ *pulumi.OutputState }

func (ContentScanningExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentScanningExpression)(nil)).Elem()
}

func (o ContentScanningExpressionOutput) ToContentScanningExpressionOutput() ContentScanningExpressionOutput {
	return o
}

func (o ContentScanningExpressionOutput) ToContentScanningExpressionOutputWithContext(ctx context.Context) ContentScanningExpressionOutput {
	return o
}

// Custom scan expression to tell the content scanner where to find the content objects.
func (o ContentScanningExpressionOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentScanningExpression) pulumi.StringOutput { return v.Payload }).(pulumi.StringOutput)
}

// The zone identifier to target for the resource.
func (o ContentScanningExpressionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContentScanningExpression) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ContentScanningExpressionArrayOutput struct{ *pulumi.OutputState }

func (ContentScanningExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContentScanningExpression)(nil)).Elem()
}

func (o ContentScanningExpressionArrayOutput) ToContentScanningExpressionArrayOutput() ContentScanningExpressionArrayOutput {
	return o
}

func (o ContentScanningExpressionArrayOutput) ToContentScanningExpressionArrayOutputWithContext(ctx context.Context) ContentScanningExpressionArrayOutput {
	return o
}

func (o ContentScanningExpressionArrayOutput) Index(i pulumi.IntInput) ContentScanningExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContentScanningExpression {
		return vs[0].([]*ContentScanningExpression)[vs[1].(int)]
	}).(ContentScanningExpressionOutput)
}

type ContentScanningExpressionMapOutput struct{ *pulumi.OutputState }

func (ContentScanningExpressionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContentScanningExpression)(nil)).Elem()
}

func (o ContentScanningExpressionMapOutput) ToContentScanningExpressionMapOutput() ContentScanningExpressionMapOutput {
	return o
}

func (o ContentScanningExpressionMapOutput) ToContentScanningExpressionMapOutputWithContext(ctx context.Context) ContentScanningExpressionMapOutput {
	return o
}

func (o ContentScanningExpressionMapOutput) MapIndex(k pulumi.StringInput) ContentScanningExpressionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContentScanningExpression {
		return vs[0].(map[string]*ContentScanningExpression)[vs[1].(string)]
	}).(ContentScanningExpressionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningExpressionInput)(nil)).Elem(), &ContentScanningExpression{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningExpressionArrayInput)(nil)).Elem(), ContentScanningExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContentScanningExpressionMapInput)(nil)).Elem(), ContentScanningExpressionMap{})
	pulumi.RegisterOutputType(ContentScanningExpressionOutput{})
	pulumi.RegisterOutputType(ContentScanningExpressionArrayOutput{})
	pulumi.RegisterOutputType(ContentScanningExpressionMapOutput{})
}
