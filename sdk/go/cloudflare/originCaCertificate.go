// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudflare

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-cloudflare/sdk/v6/go/cloudflare"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudflare.NewOriginCaCertificate(ctx, "example_origin_ca_certificate", &cloudflare.OriginCaCertificateArgs{
//				Csr: pulumi.String(`  -----BEGIN CERTIFICATE REQUEST-----
//	  MIICxzCCAa8CAQAwSDELMAkGA1UEBhMCVVMxFjAUBgNVBAgTDVNhbiBGcmFuY2lz
//	  Y28xCzAJBgNVBAcTAkNBMRQwEgYDVQQDEwtleGFtcGxlLm5ldDCCASIwDQYJKoZI
//	  hvcNAQEBBQADggEPADCCAQoCggEBALxejtu4b+jPdFeFi6OUsye8TYJQBm3WfCvL
//	  Hu5EvijMO/4Z2TImwASbwUF7Ir8OLgH+mGlQZeqyNvGoSOMEaZVXcYfpR1hlVak8
//	  4GGVr+04IGfOCqaBokaBFIwzclGZbzKmLGwIQioNxGfqFm6RGYGA3be2Je2iseBc
//	  N8GV1wYmvYE0RR+yWweJCTJ157exyRzu7sVxaEW9F87zBQLyOnwXc64rflXslRqi
//	  g7F7w5IaQYOl8yvmk/jEPCAha7fkiUfEpj4N12+oPRiMvleJF98chxjD4MH39c5I
//	  uOslULhrWunfh7GB1jwWNA9y44H0snrf+xvoy2TcHmxvma9Eln8CAwEAAaA6MDgG
//	  CSqGSIb3DQEJDjErMCkwJwYDVR0RBCAwHoILZXhhbXBsZS5uZXSCD3d3dy5leGFt
//	  cGxlLm5ldDANBgkqhkiG9w0BAQsFAAOCAQEAcBaX6dOnI8ncARrI9ZSF2AJX+8mx
//	  pTHY2+Y2C0VvrVDGMtbBRH8R9yMbqWtlxeeNGf//LeMkSKSFa4kbpdx226lfui8/
//	  auRDBTJGx2R1ccUxmLZXx4my0W5iIMxunu+kez+BDlu7bTT2io0uXMRHue4i6quH
//	  yc5ibxvbJMjR7dqbcanVE10/34oprzXQsJ/VmSuZNXtjbtSKDlmcpw6To/eeAJ+J
//	  hXykcUihvHyG4A1m2R6qpANBjnA0pHexfwM/SgfzvpbvUg0T1ubmer8BgTwCKIWs
//	  dcWYTthM51JIqRBfNqy4QcBnX+GY05yltEEswQI55wdiS3CjTTA67sdbcQ==
//	  -----END CERTIFICATE REQUEST-----
//
// `),
//
//				Hostnames: pulumi.StringArray{
//					pulumi.String("example.com"),
//					pulumi.String("*.example.com"),
//				},
//				RequestType:       pulumi.String("origin-rsa"),
//				RequestedValidity: pulumi.Float64(5475),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import cloudflare:index/originCaCertificate:OriginCaCertificate example '<certificate_id>'
// ```
type OriginCaCertificate struct {
	pulumi.CustomResourceState

	// The Origin CA certificate. Will be newline-encoded.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr pulumi.StringPtrOutput `pulumi:"csr"`
	// When the certificate will expire.
	ExpiresOn pulumi.StringOutput `pulumi:"expiresOn"`
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames pulumi.StringArrayOutput `pulumi:"hostnames"`
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType pulumi.StringPtrOutput `pulumi:"requestType"`
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity pulumi.Float64Output `pulumi:"requestedValidity"`
}

// NewOriginCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewOriginCaCertificate(ctx *pulumi.Context,
	name string, args *OriginCaCertificateArgs, opts ...pulumi.ResourceOption) (*OriginCaCertificate, error) {
	if args == nil {
		args = &OriginCaCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OriginCaCertificate
	err := ctx.RegisterResource("cloudflare:index/originCaCertificate:OriginCaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOriginCaCertificate gets an existing OriginCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOriginCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OriginCaCertificateState, opts ...pulumi.ResourceOption) (*OriginCaCertificate, error) {
	var resource OriginCaCertificate
	err := ctx.ReadResource("cloudflare:index/originCaCertificate:OriginCaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OriginCaCertificate resources.
type originCaCertificateState struct {
	// The Origin CA certificate. Will be newline-encoded.
	Certificate *string `pulumi:"certificate"`
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr *string `pulumi:"csr"`
	// When the certificate will expire.
	ExpiresOn *string `pulumi:"expiresOn"`
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames []string `pulumi:"hostnames"`
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType *string `pulumi:"requestType"`
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity *float64 `pulumi:"requestedValidity"`
}

type OriginCaCertificateState struct {
	// The Origin CA certificate. Will be newline-encoded.
	Certificate pulumi.StringPtrInput
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr pulumi.StringPtrInput
	// When the certificate will expire.
	ExpiresOn pulumi.StringPtrInput
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames pulumi.StringArrayInput
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType pulumi.StringPtrInput
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity pulumi.Float64PtrInput
}

func (OriginCaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*originCaCertificateState)(nil)).Elem()
}

type originCaCertificateArgs struct {
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr *string `pulumi:"csr"`
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames []string `pulumi:"hostnames"`
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType *string `pulumi:"requestType"`
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity *float64 `pulumi:"requestedValidity"`
}

// The set of arguments for constructing a OriginCaCertificate resource.
type OriginCaCertificateArgs struct {
	// The Certificate Signing Request (CSR). Must be newline-encoded.
	Csr pulumi.StringPtrInput
	// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
	Hostnames pulumi.StringArrayInput
	// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
	// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
	RequestType pulumi.StringPtrInput
	// The number of days for which the certificate should be valid.
	// Available values: 7, 30, 90, 365, 730, 1095, 5475.
	RequestedValidity pulumi.Float64PtrInput
}

func (OriginCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*originCaCertificateArgs)(nil)).Elem()
}

type OriginCaCertificateInput interface {
	pulumi.Input

	ToOriginCaCertificateOutput() OriginCaCertificateOutput
	ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput
}

func (*OriginCaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginCaCertificate)(nil)).Elem()
}

func (i *OriginCaCertificate) ToOriginCaCertificateOutput() OriginCaCertificateOutput {
	return i.ToOriginCaCertificateOutputWithContext(context.Background())
}

func (i *OriginCaCertificate) ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateOutput)
}

// OriginCaCertificateArrayInput is an input type that accepts OriginCaCertificateArray and OriginCaCertificateArrayOutput values.
// You can construct a concrete instance of `OriginCaCertificateArrayInput` via:
//
//	OriginCaCertificateArray{ OriginCaCertificateArgs{...} }
type OriginCaCertificateArrayInput interface {
	pulumi.Input

	ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput
	ToOriginCaCertificateArrayOutputWithContext(context.Context) OriginCaCertificateArrayOutput
}

type OriginCaCertificateArray []OriginCaCertificateInput

func (OriginCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OriginCaCertificate)(nil)).Elem()
}

func (i OriginCaCertificateArray) ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput {
	return i.ToOriginCaCertificateArrayOutputWithContext(context.Background())
}

func (i OriginCaCertificateArray) ToOriginCaCertificateArrayOutputWithContext(ctx context.Context) OriginCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateArrayOutput)
}

// OriginCaCertificateMapInput is an input type that accepts OriginCaCertificateMap and OriginCaCertificateMapOutput values.
// You can construct a concrete instance of `OriginCaCertificateMapInput` via:
//
//	OriginCaCertificateMap{ "key": OriginCaCertificateArgs{...} }
type OriginCaCertificateMapInput interface {
	pulumi.Input

	ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput
	ToOriginCaCertificateMapOutputWithContext(context.Context) OriginCaCertificateMapOutput
}

type OriginCaCertificateMap map[string]OriginCaCertificateInput

func (OriginCaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OriginCaCertificate)(nil)).Elem()
}

func (i OriginCaCertificateMap) ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput {
	return i.ToOriginCaCertificateMapOutputWithContext(context.Background())
}

func (i OriginCaCertificateMap) ToOriginCaCertificateMapOutputWithContext(ctx context.Context) OriginCaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginCaCertificateMapOutput)
}

type OriginCaCertificateOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateOutput) ToOriginCaCertificateOutput() OriginCaCertificateOutput {
	return o
}

func (o OriginCaCertificateOutput) ToOriginCaCertificateOutputWithContext(ctx context.Context) OriginCaCertificateOutput {
	return o
}

// The Origin CA certificate. Will be newline-encoded.
func (o OriginCaCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The Certificate Signing Request (CSR). Must be newline-encoded.
func (o OriginCaCertificateOutput) Csr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringPtrOutput { return v.Csr }).(pulumi.StringPtrOutput)
}

// When the certificate will expire.
func (o OriginCaCertificateOutput) ExpiresOn() pulumi.StringOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringOutput { return v.ExpiresOn }).(pulumi.StringOutput)
}

// Array of hostnames or wildcard names (e.g., *.example.com) bound to the certificate.
func (o OriginCaCertificateOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// Signature type desired on certificate ("origin-rsa" (rsa), "origin-ecc" (ecdsa), or "keyless-certificate" (for Keyless SSL servers).
// Available values: "origin-rsa", "origin-ecc", "keyless-certificate".
func (o OriginCaCertificateOutput) RequestType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.StringPtrOutput { return v.RequestType }).(pulumi.StringPtrOutput)
}

// The number of days for which the certificate should be valid.
// Available values: 7, 30, 90, 365, 730, 1095, 5475.
func (o OriginCaCertificateOutput) RequestedValidity() pulumi.Float64Output {
	return o.ApplyT(func(v *OriginCaCertificate) pulumi.Float64Output { return v.RequestedValidity }).(pulumi.Float64Output)
}

type OriginCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateArrayOutput) ToOriginCaCertificateArrayOutput() OriginCaCertificateArrayOutput {
	return o
}

func (o OriginCaCertificateArrayOutput) ToOriginCaCertificateArrayOutputWithContext(ctx context.Context) OriginCaCertificateArrayOutput {
	return o
}

func (o OriginCaCertificateArrayOutput) Index(i pulumi.IntInput) OriginCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OriginCaCertificate {
		return vs[0].([]*OriginCaCertificate)[vs[1].(int)]
	}).(OriginCaCertificateOutput)
}

type OriginCaCertificateMapOutput struct{ *pulumi.OutputState }

func (OriginCaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OriginCaCertificate)(nil)).Elem()
}

func (o OriginCaCertificateMapOutput) ToOriginCaCertificateMapOutput() OriginCaCertificateMapOutput {
	return o
}

func (o OriginCaCertificateMapOutput) ToOriginCaCertificateMapOutputWithContext(ctx context.Context) OriginCaCertificateMapOutput {
	return o
}

func (o OriginCaCertificateMapOutput) MapIndex(k pulumi.StringInput) OriginCaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OriginCaCertificate {
		return vs[0].(map[string]*OriginCaCertificate)[vs[1].(string)]
	}).(OriginCaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateInput)(nil)).Elem(), &OriginCaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateArrayInput)(nil)).Elem(), OriginCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginCaCertificateMapInput)(nil)).Elem(), OriginCaCertificateMap{})
	pulumi.RegisterOutputType(OriginCaCertificateOutput{})
	pulumi.RegisterOutputType(OriginCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(OriginCaCertificateMapOutput{})
}
