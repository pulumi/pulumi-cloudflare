// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TurnstileWidgetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TurnstileWidgetArgs Empty = new TurnstileWidgetArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    @Import(name="botFightMode")
    private @Nullable Output<Boolean> botFightMode;

    /**
     * @return If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    public Optional<Output<Boolean>> botFightMode() {
        return Optional.ofNullable(this.botFightMode);
    }

    /**
     * If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    @Import(name="clearanceLevel")
    private @Nullable Output<String> clearanceLevel;

    /**
     * @return If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    public Optional<Output<String>> clearanceLevel() {
        return Optional.ofNullable(this.clearanceLevel);
    }

    @Import(name="domains", required=true)
    private Output<List<String>> domains;

    public Output<List<String>> domains() {
        return this.domains;
    }

    /**
     * Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    @Import(name="ephemeralId")
    private @Nullable Output<Boolean> ephemeralId;

    /**
     * @return Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    public Optional<Output<Boolean>> ephemeralId() {
        return Optional.ofNullable(this.ephemeralId);
    }

    /**
     * Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    @Import(name="offlabel")
    private @Nullable Output<Boolean> offlabel;

    /**
     * @return Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    public Optional<Output<Boolean>> offlabel() {
        return Optional.ofNullable(this.offlabel);
    }

    /**
     * Region where this widget can be used. This cannot be changed after creation.
     * Available values: &#34;world&#34;, &#34;china&#34;.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this widget can be used. This cannot be changed after creation.
     * Available values: &#34;world&#34;, &#34;china&#34;.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    private TurnstileWidgetArgs() {}

    private TurnstileWidgetArgs(TurnstileWidgetArgs $) {
        this.accountId = $.accountId;
        this.botFightMode = $.botFightMode;
        this.clearanceLevel = $.clearanceLevel;
        this.domains = $.domains;
        this.ephemeralId = $.ephemeralId;
        this.mode = $.mode;
        this.name = $.name;
        this.offlabel = $.offlabel;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TurnstileWidgetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TurnstileWidgetArgs $;

        public Builder() {
            $ = new TurnstileWidgetArgs();
        }

        public Builder(TurnstileWidgetArgs defaults) {
            $ = new TurnstileWidgetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param botFightMode If bot*fight*mode is set to `true`, Cloudflare issues computationally
         * expensive challenges in response to malicious bots (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder botFightMode(@Nullable Output<Boolean> botFightMode) {
            $.botFightMode = botFightMode;
            return this;
        }

        /**
         * @param botFightMode If bot*fight*mode is set to `true`, Cloudflare issues computationally
         * expensive challenges in response to malicious bots (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder botFightMode(Boolean botFightMode) {
            return botFightMode(Output.of(botFightMode));
        }

        /**
         * @param clearanceLevel If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
         * this setting can determine the clearance level to be set
         * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clearanceLevel(@Nullable Output<String> clearanceLevel) {
            $.clearanceLevel = clearanceLevel;
            return this;
        }

        /**
         * @param clearanceLevel If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
         * this setting can determine the clearance level to be set
         * Available values: &#34;no_clearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clearanceLevel(String clearanceLevel) {
            return clearanceLevel(Output.of(clearanceLevel));
        }

        public Builder domains(Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param ephemeralId Return the Ephemeral ID in /siteverify (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder ephemeralId(@Nullable Output<Boolean> ephemeralId) {
            $.ephemeralId = ephemeralId;
            return this;
        }

        /**
         * @param ephemeralId Return the Ephemeral ID in /siteverify (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder ephemeralId(Boolean ephemeralId) {
            return ephemeralId(Output.of(ephemeralId));
        }

        /**
         * @param mode Widget Mode
         * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Widget Mode
         * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Human readable widget name. Not unique. Cloudflare suggests that you
         * set this to a meaningful string to make it easier to identify your
         * widget, and where it is used.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human readable widget name. Not unique. Cloudflare suggests that you
         * set this to a meaningful string to make it easier to identify your
         * widget, and where it is used.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offlabel Do not show any Cloudflare branding on the widget (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder offlabel(@Nullable Output<Boolean> offlabel) {
            $.offlabel = offlabel;
            return this;
        }

        /**
         * @param offlabel Do not show any Cloudflare branding on the widget (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder offlabel(Boolean offlabel) {
            return offlabel(Output.of(offlabel));
        }

        /**
         * @param region Region where this widget can be used. This cannot be changed after creation.
         * Available values: &#34;world&#34;, &#34;china&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this widget can be used. This cannot be changed after creation.
         * Available values: &#34;world&#34;, &#34;china&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public TurnstileWidgetArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("TurnstileWidgetArgs", "accountId");
            }
            if ($.domains == null) {
                throw new MissingRequiredPropertyException("TurnstileWidgetArgs", "domains");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("TurnstileWidgetArgs", "mode");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("TurnstileWidgetArgs", "name");
            }
            return $;
        }
    }

}
