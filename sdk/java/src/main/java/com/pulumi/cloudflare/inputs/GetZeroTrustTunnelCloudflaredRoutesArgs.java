// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZeroTrustTunnelCloudflaredRoutesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZeroTrustTunnelCloudflaredRoutesArgs Empty = new GetZeroTrustTunnelCloudflaredRoutesArgs();

    /**
     * Cloudflare account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Cloudflare account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Optional remark describing the route.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Optional remark describing the route.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    @Import(name="existedAt")
    private @Nullable Output<String> existedAt;

    /**
     * @return If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    public Optional<Output<String>> existedAt() {
        return Optional.ofNullable(this.existedAt);
    }

    /**
     * If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
     * 
     */
    @Import(name="isDeleted")
    private @Nullable Output<Boolean> isDeleted;

    /**
     * @return If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
     * 
     */
    public Optional<Output<Boolean>> isDeleted() {
        return Optional.ofNullable(this.isDeleted);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * If set, only list routes that are contained within this IP range.
     * 
     */
    @Import(name="networkSubset")
    private @Nullable Output<String> networkSubset;

    /**
     * @return If set, only list routes that are contained within this IP range.
     * 
     */
    public Optional<Output<String>> networkSubset() {
        return Optional.ofNullable(this.networkSubset);
    }

    /**
     * If set, only list routes that contain this IP range.
     * 
     */
    @Import(name="networkSuperset")
    private @Nullable Output<String> networkSuperset;

    /**
     * @return If set, only list routes that contain this IP range.
     * 
     */
    public Optional<Output<String>> networkSuperset() {
        return Optional.ofNullable(this.networkSuperset);
    }

    /**
     * UUID of the route.
     * 
     */
    @Import(name="routeId")
    private @Nullable Output<String> routeId;

    /**
     * @return UUID of the route.
     * 
     */
    public Optional<Output<String>> routeId() {
        return Optional.ofNullable(this.routeId);
    }

    /**
     * The types of tunnels to filter by, separated by commas.
     * 
     */
    @Import(name="tunTypes")
    private @Nullable Output<List<String>> tunTypes;

    /**
     * @return The types of tunnels to filter by, separated by commas.
     * 
     */
    public Optional<Output<List<String>>> tunTypes() {
        return Optional.ofNullable(this.tunTypes);
    }

    /**
     * UUID of the tunnel.
     * 
     */
    @Import(name="tunnelId")
    private @Nullable Output<String> tunnelId;

    /**
     * @return UUID of the tunnel.
     * 
     */
    public Optional<Output<String>> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    /**
     * UUID of the virtual network.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return UUID of the virtual network.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private GetZeroTrustTunnelCloudflaredRoutesArgs() {}

    private GetZeroTrustTunnelCloudflaredRoutesArgs(GetZeroTrustTunnelCloudflaredRoutesArgs $) {
        this.accountId = $.accountId;
        this.comment = $.comment;
        this.existedAt = $.existedAt;
        this.isDeleted = $.isDeleted;
        this.maxItems = $.maxItems;
        this.networkSubset = $.networkSubset;
        this.networkSuperset = $.networkSuperset;
        this.routeId = $.routeId;
        this.tunTypes = $.tunTypes;
        this.tunnelId = $.tunnelId;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZeroTrustTunnelCloudflaredRoutesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZeroTrustTunnelCloudflaredRoutesArgs $;

        public Builder() {
            $ = new GetZeroTrustTunnelCloudflaredRoutesArgs();
        }

        public Builder(GetZeroTrustTunnelCloudflaredRoutesArgs defaults) {
            $ = new GetZeroTrustTunnelCloudflaredRoutesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param comment Optional remark describing the route.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Optional remark describing the route.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(@Nullable Output<String> existedAt) {
            $.existedAt = existedAt;
            return this;
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(String existedAt) {
            return existedAt(Output.of(existedAt));
        }

        /**
         * @param isDeleted If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(@Nullable Output<Boolean> isDeleted) {
            $.isDeleted = isDeleted;
            return this;
        }

        /**
         * @param isDeleted If `true`, only include deleted routes. If `false`, exclude deleted routes. If empty, all routes will be included.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(Boolean isDeleted) {
            return isDeleted(Output.of(isDeleted));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param networkSubset If set, only list routes that are contained within this IP range.
         * 
         * @return builder
         * 
         */
        public Builder networkSubset(@Nullable Output<String> networkSubset) {
            $.networkSubset = networkSubset;
            return this;
        }

        /**
         * @param networkSubset If set, only list routes that are contained within this IP range.
         * 
         * @return builder
         * 
         */
        public Builder networkSubset(String networkSubset) {
            return networkSubset(Output.of(networkSubset));
        }

        /**
         * @param networkSuperset If set, only list routes that contain this IP range.
         * 
         * @return builder
         * 
         */
        public Builder networkSuperset(@Nullable Output<String> networkSuperset) {
            $.networkSuperset = networkSuperset;
            return this;
        }

        /**
         * @param networkSuperset If set, only list routes that contain this IP range.
         * 
         * @return builder
         * 
         */
        public Builder networkSuperset(String networkSuperset) {
            return networkSuperset(Output.of(networkSuperset));
        }

        /**
         * @param routeId UUID of the route.
         * 
         * @return builder
         * 
         */
        public Builder routeId(@Nullable Output<String> routeId) {
            $.routeId = routeId;
            return this;
        }

        /**
         * @param routeId UUID of the route.
         * 
         * @return builder
         * 
         */
        public Builder routeId(String routeId) {
            return routeId(Output.of(routeId));
        }

        /**
         * @param tunTypes The types of tunnels to filter by, separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder tunTypes(@Nullable Output<List<String>> tunTypes) {
            $.tunTypes = tunTypes;
            return this;
        }

        /**
         * @param tunTypes The types of tunnels to filter by, separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder tunTypes(List<String> tunTypes) {
            return tunTypes(Output.of(tunTypes));
        }

        /**
         * @param tunTypes The types of tunnels to filter by, separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder tunTypes(String... tunTypes) {
            return tunTypes(List.of(tunTypes));
        }

        /**
         * @param tunnelId UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(@Nullable Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        /**
         * @param virtualNetworkId UUID of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId UUID of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public GetZeroTrustTunnelCloudflaredRoutesArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredRoutesArgs", "accountId");
            }
            return $;
        }
    }

}
