// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRuleOverrideSessionAffinityAttributeArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRuleOverrideSessionAffinityAttributeArgs Empty = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs();

    /**
     * Configures the HTTP header names to use when header session affinity is enabled.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<String>> headers;

    /**
     * @return Configures the HTTP header names to use when header session affinity is enabled.
     * 
     */
    public Optional<Output<List<String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
     * 
     */
    @Import(name="requireAllHeaders")
    private @Nullable Output<Boolean> requireAllHeaders;

    /**
     * @return Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> requireAllHeaders() {
        return Optional.ofNullable(this.requireAllHeaders);
    }

    /**
     * Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
     * 
     */
    @Import(name="samesite")
    private @Nullable Output<String> samesite;

    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
     * 
     */
    public Optional<Output<String>> samesite() {
        return Optional.ofNullable(this.samesite);
    }

    /**
     * Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
     * 
     */
    @Import(name="secure")
    private @Nullable Output<String> secure;

    /**
     * @return Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
     * 
     */
    public Optional<Output<String>> secure() {
        return Optional.ofNullable(this.secure);
    }

    /**
     * Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
     * 
     */
    @Import(name="zeroDowntimeFailover")
    private @Nullable Output<String> zeroDowntimeFailover;

    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
     * 
     */
    public Optional<Output<String>> zeroDowntimeFailover() {
        return Optional.ofNullable(this.zeroDowntimeFailover);
    }

    private LoadBalancerRuleOverrideSessionAffinityAttributeArgs() {}

    private LoadBalancerRuleOverrideSessionAffinityAttributeArgs(LoadBalancerRuleOverrideSessionAffinityAttributeArgs $) {
        this.headers = $.headers;
        this.requireAllHeaders = $.requireAllHeaders;
        this.samesite = $.samesite;
        this.secure = $.secure;
        this.zeroDowntimeFailover = $.zeroDowntimeFailover;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRuleOverrideSessionAffinityAttributeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRuleOverrideSessionAffinityAttributeArgs $;

        public Builder() {
            $ = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs();
        }

        public Builder(LoadBalancerRuleOverrideSessionAffinityAttributeArgs defaults) {
            $ = new LoadBalancerRuleOverrideSessionAffinityAttributeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param headers Configures the HTTP header names to use when header session affinity is enabled.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Configures the HTTP header names to use when header session affinity is enabled.
         * 
         * @return builder
         * 
         */
        public Builder headers(List<String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Configures the HTTP header names to use when header session affinity is enabled.
         * 
         * @return builder
         * 
         */
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param requireAllHeaders Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder requireAllHeaders(@Nullable Output<Boolean> requireAllHeaders) {
            $.requireAllHeaders = requireAllHeaders;
            return this;
        }

        /**
         * @param requireAllHeaders Configures how headers are used when header session affinity is enabled. Set to true to require all headers to be present on requests in order for sessions to be created or false to require at least one header to be present. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder requireAllHeaders(Boolean requireAllHeaders) {
            return requireAllHeaders(Output.of(requireAllHeaders));
        }

        /**
         * @param samesite Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
         * 
         * @return builder
         * 
         */
        public Builder samesite(@Nullable Output<String> samesite) {
            $.samesite = samesite;
            return this;
        }

        /**
         * @param samesite Configures the SameSite attribute on session affinity cookie. Value `Auto` will be translated to `Lax` or `None` depending if Always Use HTTPS is enabled. Note: when using value `None`, then you can not set `secure=&#34;Never&#34;`. Available values: `Auto`, `Lax`, `None`, `Strict`.
         * 
         * @return builder
         * 
         */
        public Builder samesite(String samesite) {
            return samesite(Output.of(samesite));
        }

        /**
         * @param secure Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
         * 
         * @return builder
         * 
         */
        public Builder secure(@Nullable Output<String> secure) {
            $.secure = secure;
            return this;
        }

        /**
         * @param secure Configures the Secure attribute on session affinity cookie. Value `Always` indicates the Secure attribute will be set in the Set-Cookie header, `Never` indicates the Secure attribute will not be set, and `Auto` will set the Secure attribute depending if Always Use HTTPS is enabled. Available values: `Auto`, `Always`, `Never`.
         * 
         * @return builder
         * 
         */
        public Builder secure(String secure) {
            return secure(Output.of(secure));
        }

        /**
         * @param zeroDowntimeFailover Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
         * 
         * @return builder
         * 
         */
        public Builder zeroDowntimeFailover(@Nullable Output<String> zeroDowntimeFailover) {
            $.zeroDowntimeFailover = zeroDowntimeFailover;
            return this;
        }

        /**
         * @param zeroDowntimeFailover Configures the zero-downtime failover between origins within a pool when session affinity is enabled. Value `none` means no failover takes place for sessions pinned to the origin. Value `temporary` means traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. Value `sticky` means the session affinity cookie is updated and subsequent requests are sent to the new origin. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. Available values: `none`, `temporary`, `sticky`.
         * 
         * @return builder
         * 
         */
        public Builder zeroDowntimeFailover(String zeroDowntimeFailover) {
            return zeroDowntimeFailover(Output.of(zeroDowntimeFailover));
        }

        public LoadBalancerRuleOverrideSessionAffinityAttributeArgs build() {
            return $;
        }
    }

}
