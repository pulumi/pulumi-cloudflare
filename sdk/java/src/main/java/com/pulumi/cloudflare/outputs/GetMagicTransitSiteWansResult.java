// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSiteWansResultStaticAddressing;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSiteWansResult {
    /**
     * @return Magic WAN health check rate for tunnels created on this link. The default value is `mid`.
     * 
     */
    private String healthCheckRate;
    /**
     * @return Identifier
     * 
     */
    private String id;
    private String name;
    private Integer physport;
    /**
     * @return Priority of WAN for traffic loadbalancing.
     * 
     */
    private Integer priority;
    /**
     * @return Identifier
     * 
     */
    private String siteId;
    /**
     * @return (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
     * 
     */
    private GetMagicTransitSiteWansResultStaticAddressing staticAddressing;
    /**
     * @return VLAN port number.
     * 
     */
    private Integer vlanTag;

    private GetMagicTransitSiteWansResult() {}
    /**
     * @return Magic WAN health check rate for tunnels created on this link. The default value is `mid`.
     * 
     */
    public String healthCheckRate() {
        return this.healthCheckRate;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public Integer physport() {
        return this.physport;
    }
    /**
     * @return Priority of WAN for traffic loadbalancing.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Identifier
     * 
     */
    public String siteId() {
        return this.siteId;
    }
    /**
     * @return (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
     * 
     */
    public GetMagicTransitSiteWansResultStaticAddressing staticAddressing() {
        return this.staticAddressing;
    }
    /**
     * @return VLAN port number.
     * 
     */
    public Integer vlanTag() {
        return this.vlanTag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteWansResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String healthCheckRate;
        private String id;
        private String name;
        private Integer physport;
        private Integer priority;
        private String siteId;
        private GetMagicTransitSiteWansResultStaticAddressing staticAddressing;
        private Integer vlanTag;
        public Builder() {}
        public Builder(GetMagicTransitSiteWansResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.healthCheckRate = defaults.healthCheckRate;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.physport = defaults.physport;
    	      this.priority = defaults.priority;
    	      this.siteId = defaults.siteId;
    	      this.staticAddressing = defaults.staticAddressing;
    	      this.vlanTag = defaults.vlanTag;
        }

        @CustomType.Setter
        public Builder healthCheckRate(String healthCheckRate) {
            if (healthCheckRate == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "healthCheckRate");
            }
            this.healthCheckRate = healthCheckRate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder physport(Integer physport) {
            if (physport == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "physport");
            }
            this.physport = physport;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder staticAddressing(GetMagicTransitSiteWansResultStaticAddressing staticAddressing) {
            if (staticAddressing == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "staticAddressing");
            }
            this.staticAddressing = staticAddressing;
            return this;
        }
        @CustomType.Setter
        public Builder vlanTag(Integer vlanTag) {
            if (vlanTag == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteWansResult", "vlanTag");
            }
            this.vlanTag = vlanTag;
            return this;
        }
        public GetMagicTransitSiteWansResult build() {
            final var _resultValue = new GetMagicTransitSiteWansResult();
            _resultValue.healthCheckRate = healthCheckRate;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.physport = physport;
            _resultValue.priority = priority;
            _resultValue.siteId = siteId;
            _resultValue.staticAddressing = staticAddressing;
            _resultValue.vlanTag = vlanTag;
            return _resultValue;
        }
    }
}
