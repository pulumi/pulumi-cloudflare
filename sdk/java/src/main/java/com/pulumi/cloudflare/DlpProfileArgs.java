// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.DlpProfileEntryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DlpProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final DlpProfileArgs Empty = new DlpProfileArgs();

    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Related DLP policies will trigger when the match count exceeds the number set.
     * 
     */
    @Import(name="allowedMatchCount", required=true)
    private Output<Integer> allowedMatchCount;

    /**
     * @return Related DLP policies will trigger when the match count exceeds the number set.
     * 
     */
    public Output<Integer> allowedMatchCount() {
        return this.allowedMatchCount;
    }

    /**
     * Brief summary of the profile and its intended use.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Brief summary of the profile and its intended use.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of entries to apply to the profile.
     * 
     */
    @Import(name="entries", required=true)
    private Output<List<DlpProfileEntryArgs>> entries;

    /**
     * @return List of entries to apply to the profile.
     * 
     */
    public Output<List<DlpProfileEntryArgs>> entries() {
        return this.entries;
    }

    /**
     * Name of the entry to deploy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the entry to deploy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DlpProfileArgs() {}

    private DlpProfileArgs(DlpProfileArgs $) {
        this.accountId = $.accountId;
        this.allowedMatchCount = $.allowedMatchCount;
        this.description = $.description;
        this.entries = $.entries;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DlpProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DlpProfileArgs $;

        public Builder() {
            $ = new DlpProfileArgs();
        }

        public Builder(DlpProfileArgs defaults) {
            $ = new DlpProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedMatchCount Related DLP policies will trigger when the match count exceeds the number set.
         * 
         * @return builder
         * 
         */
        public Builder allowedMatchCount(Output<Integer> allowedMatchCount) {
            $.allowedMatchCount = allowedMatchCount;
            return this;
        }

        /**
         * @param allowedMatchCount Related DLP policies will trigger when the match count exceeds the number set.
         * 
         * @return builder
         * 
         */
        public Builder allowedMatchCount(Integer allowedMatchCount) {
            return allowedMatchCount(Output.of(allowedMatchCount));
        }

        /**
         * @param description Brief summary of the profile and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Brief summary of the profile and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(Output<List<DlpProfileEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<DlpProfileEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(DlpProfileEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param name Name of the entry to deploy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the entry to deploy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DlpProfileArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("DlpProfileArgs", "accountId");
            }
            if ($.allowedMatchCount == null) {
                throw new MissingRequiredPropertyException("DlpProfileArgs", "allowedMatchCount");
            }
            if ($.entries == null) {
                throw new MissingRequiredPropertyException("DlpProfileArgs", "entries");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DlpProfileArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DlpProfileArgs", "type");
            }
            return $;
        }
    }

}
