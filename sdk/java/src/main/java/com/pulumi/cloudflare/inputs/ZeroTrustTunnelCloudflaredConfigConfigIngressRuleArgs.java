// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustTunnelCloudflaredConfigConfigIngressRuleOriginRequestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs Empty = new ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs();

    /**
     * Hostname to match the incoming request with. If the hostname matches, the request will be sent to the service.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Hostname to match the incoming request with. If the hostname matches, the request will be sent to the service.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="originRequest")
    private @Nullable Output<ZeroTrustTunnelCloudflaredConfigConfigIngressRuleOriginRequestArgs> originRequest;

    public Optional<Output<ZeroTrustTunnelCloudflaredConfigConfigIngressRuleOriginRequestArgs>> originRequest() {
        return Optional.ofNullable(this.originRequest);
    }

    /**
     * Path of the incoming request. If the path matches, the request will be sent to the local service.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path of the incoming request. If the path matches, the request will be sent to the local service.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Name of the service to which the request will be sent.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Name of the service to which the request will be sent.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs() {}

    private ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs(ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs $) {
        this.hostname = $.hostname;
        this.originRequest = $.originRequest;
        this.path = $.path;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs $;

        public Builder() {
            $ = new ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs();
        }

        public Builder(ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs defaults) {
            $ = new ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname Hostname to match the incoming request with. If the hostname matches, the request will be sent to the service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Hostname to match the incoming request with. If the hostname matches, the request will be sent to the service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder originRequest(@Nullable Output<ZeroTrustTunnelCloudflaredConfigConfigIngressRuleOriginRequestArgs> originRequest) {
            $.originRequest = originRequest;
            return this;
        }

        public Builder originRequest(ZeroTrustTunnelCloudflaredConfigConfigIngressRuleOriginRequestArgs originRequest) {
            return originRequest(Output.of(originRequest));
        }

        /**
         * @param path Path of the incoming request. If the path matches, the request will be sent to the local service.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path of the incoming request. If the path matches, the request will be sent to the local service.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param service Name of the service to which the request will be sent.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Name of the service to which the request will be sent.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs build() {
            if ($.service == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredConfigConfigIngressRuleArgs", "service");
            }
            return $;
        }
    }

}
