// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccessApplicationScimConfigAuthenticationArgs;
import com.pulumi.cloudflare.inputs.AccessApplicationScimConfigMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationScimConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationScimConfigArgs Empty = new AccessApplicationScimConfigArgs();

    /**
     * Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<AccessApplicationScimConfigAuthenticationArgs> authentication;

    /**
     * @return Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
     * 
     */
    public Optional<Output<AccessApplicationScimConfigAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
     * 
     */
    @Import(name="deactivateOnDelete")
    private @Nullable Output<Boolean> deactivateOnDelete;

    /**
     * @return If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
     * 
     */
    public Optional<Output<Boolean>> deactivateOnDelete() {
        return Optional.ofNullable(this.deactivateOnDelete);
    }

    /**
     * Whether SCIM provisioning is turned on for this application.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether SCIM provisioning is turned on for this application.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
     * 
     */
    @Import(name="idpUid", required=true)
    private Output<String> idpUid;

    /**
     * @return The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
     * 
     */
    public Output<String> idpUid() {
        return this.idpUid;
    }

    /**
     * A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
     * 
     */
    @Import(name="mappings")
    private @Nullable Output<List<AccessApplicationScimConfigMappingArgs>> mappings;

    /**
     * @return A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
     * 
     */
    public Optional<Output<List<AccessApplicationScimConfigMappingArgs>>> mappings() {
        return Optional.ofNullable(this.mappings);
    }

    /**
     * The base URI for the application&#39;s SCIM-compatible API.
     * 
     */
    @Import(name="remoteUri", required=true)
    private Output<String> remoteUri;

    /**
     * @return The base URI for the application&#39;s SCIM-compatible API.
     * 
     */
    public Output<String> remoteUri() {
        return this.remoteUri;
    }

    private AccessApplicationScimConfigArgs() {}

    private AccessApplicationScimConfigArgs(AccessApplicationScimConfigArgs $) {
        this.authentication = $.authentication;
        this.deactivateOnDelete = $.deactivateOnDelete;
        this.enabled = $.enabled;
        this.idpUid = $.idpUid;
        this.mappings = $.mappings;
        this.remoteUri = $.remoteUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationScimConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationScimConfigArgs $;

        public Builder() {
            $ = new AccessApplicationScimConfigArgs();
        }

        public Builder(AccessApplicationScimConfigArgs defaults) {
            $ = new AccessApplicationScimConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<AccessApplicationScimConfigAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
         * 
         * @return builder
         * 
         */
        public Builder authentication(AccessApplicationScimConfigAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param deactivateOnDelete If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
         * 
         * @return builder
         * 
         */
        public Builder deactivateOnDelete(@Nullable Output<Boolean> deactivateOnDelete) {
            $.deactivateOnDelete = deactivateOnDelete;
            return this;
        }

        /**
         * @param deactivateOnDelete If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
         * 
         * @return builder
         * 
         */
        public Builder deactivateOnDelete(Boolean deactivateOnDelete) {
            return deactivateOnDelete(Output.of(deactivateOnDelete));
        }

        /**
         * @param enabled Whether SCIM provisioning is turned on for this application.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether SCIM provisioning is turned on for this application.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param idpUid The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
         * 
         * @return builder
         * 
         */
        public Builder idpUid(Output<String> idpUid) {
            $.idpUid = idpUid;
            return this;
        }

        /**
         * @param idpUid The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
         * 
         * @return builder
         * 
         */
        public Builder idpUid(String idpUid) {
            return idpUid(Output.of(idpUid));
        }

        /**
         * @param mappings A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
         * 
         * @return builder
         * 
         */
        public Builder mappings(@Nullable Output<List<AccessApplicationScimConfigMappingArgs>> mappings) {
            $.mappings = mappings;
            return this;
        }

        /**
         * @param mappings A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
         * 
         * @return builder
         * 
         */
        public Builder mappings(List<AccessApplicationScimConfigMappingArgs> mappings) {
            return mappings(Output.of(mappings));
        }

        /**
         * @param mappings A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
         * 
         * @return builder
         * 
         */
        public Builder mappings(AccessApplicationScimConfigMappingArgs... mappings) {
            return mappings(List.of(mappings));
        }

        /**
         * @param remoteUri The base URI for the application&#39;s SCIM-compatible API.
         * 
         * @return builder
         * 
         */
        public Builder remoteUri(Output<String> remoteUri) {
            $.remoteUri = remoteUri;
            return this;
        }

        /**
         * @param remoteUri The base URI for the application&#39;s SCIM-compatible API.
         * 
         * @return builder
         * 
         */
        public Builder remoteUri(String remoteUri) {
            return remoteUri(Output.of(remoteUri));
        }

        public AccessApplicationScimConfigArgs build() {
            if ($.idpUid == null) {
                throw new MissingRequiredPropertyException("AccessApplicationScimConfigArgs", "idpUid");
            }
            if ($.remoteUri == null) {
                throw new MissingRequiredPropertyException("AccessApplicationScimConfigArgs", "remoteUri");
            }
            return $;
        }
    }

}
