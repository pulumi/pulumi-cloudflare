// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.RateLimitActionResponse;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RateLimitAction {
    /**
     * @return The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    private String mode;
    /**
     * @return Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
     * 
     */
    private @Nullable RateLimitActionResponse response;
    /**
     * @return The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
     * 
     */
    private @Nullable Integer timeout;

    private RateLimitAction() {}
    /**
     * @return The type of action to perform. Available values: `simulate`, `ban`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Custom content-type and body to return, this overrides the custom error for the zone. This field is not required. Omission will result in default HTML error page.
     * 
     */
    public Optional<RateLimitActionResponse> response() {
        return Optional.ofNullable(this.response);
    }
    /**
     * @return The time in seconds as an integer to perform the mitigation action. This field is required if the `mode` is either `simulate` or `ban`. Must be the same or greater than the period.
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RateLimitAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String mode;
        private @Nullable RateLimitActionResponse response;
        private @Nullable Integer timeout;
        public Builder() {}
        public Builder(RateLimitAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.response = defaults.response;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("RateLimitAction", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable RateLimitActionResponse response) {

            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        public RateLimitAction build() {
            final var _resultValue = new RateLimitAction();
            _resultValue.mode = mode;
            _resultValue.response = response;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
