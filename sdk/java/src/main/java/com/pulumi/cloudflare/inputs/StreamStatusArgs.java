// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamStatusArgs Empty = new StreamStatusArgs();

    /**
     * Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
     * 
     */
    @Import(name="errorReasonCode")
    private @Nullable Output<String> errorReasonCode;

    /**
     * @return Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
     * 
     */
    public Optional<Output<String>> errorReasonCode() {
        return Optional.ofNullable(this.errorReasonCode);
    }

    /**
     * Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
     * 
     */
    @Import(name="errorReasonText")
    private @Nullable Output<String> errorReasonText;

    /**
     * @return Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
     * 
     */
    public Optional<Output<String>> errorReasonText() {
        return Optional.ofNullable(this.errorReasonText);
    }

    /**
     * Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
     * 
     */
    @Import(name="pctComplete")
    private @Nullable Output<String> pctComplete;

    /**
     * @return Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
     * 
     */
    public Optional<Output<String>> pctComplete() {
        return Optional.ofNullable(this.pctComplete);
    }

    /**
     * Specifies the processing status for all quality levels for a video.
     * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Specifies the processing status for all quality levels for a video.
     * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private StreamStatusArgs() {}

    private StreamStatusArgs(StreamStatusArgs $) {
        this.errorReasonCode = $.errorReasonCode;
        this.errorReasonText = $.errorReasonText;
        this.pctComplete = $.pctComplete;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamStatusArgs $;

        public Builder() {
            $ = new StreamStatusArgs();
        }

        public Builder(StreamStatusArgs defaults) {
            $ = new StreamStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorReasonCode Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
         * 
         * @return builder
         * 
         */
        public Builder errorReasonCode(@Nullable Output<String> errorReasonCode) {
            $.errorReasonCode = errorReasonCode;
            return this;
        }

        /**
         * @param errorReasonCode Specifies why the video failed to encode. This field is empty if the video is not in an `error` state. Preferred for programmatic use.
         * 
         * @return builder
         * 
         */
        public Builder errorReasonCode(String errorReasonCode) {
            return errorReasonCode(Output.of(errorReasonCode));
        }

        /**
         * @param errorReasonText Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
         * 
         * @return builder
         * 
         */
        public Builder errorReasonText(@Nullable Output<String> errorReasonText) {
            $.errorReasonText = errorReasonText;
            return this;
        }

        /**
         * @param errorReasonText Specifies why the video failed to encode using a human readable error message in English. This field is empty if the video is not in an `error` state.
         * 
         * @return builder
         * 
         */
        public Builder errorReasonText(String errorReasonText) {
            return errorReasonText(Output.of(errorReasonText));
        }

        /**
         * @param pctComplete Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
         * 
         * @return builder
         * 
         */
        public Builder pctComplete(@Nullable Output<String> pctComplete) {
            $.pctComplete = pctComplete;
            return this;
        }

        /**
         * @param pctComplete Indicates the size of the entire upload in bytes. The value must be a non-negative integer.
         * 
         * @return builder
         * 
         */
        public Builder pctComplete(String pctComplete) {
            return pctComplete(Output.of(pctComplete));
        }

        /**
         * @param state Specifies the processing status for all quality levels for a video.
         * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Specifies the processing status for all quality levels for a video.
         * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public StreamStatusArgs build() {
            return $;
        }
    }

}
