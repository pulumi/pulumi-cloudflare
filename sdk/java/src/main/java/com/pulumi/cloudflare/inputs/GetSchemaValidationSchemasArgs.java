// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetSchemaValidationSchemasFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemaValidationSchemasArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemaValidationSchemasArgs Empty = new GetSchemaValidationSchemasArgs();

    @Import(name="filter")
    private @Nullable Output<GetSchemaValidationSchemasFilterArgs> filter;

    public Optional<Output<GetSchemaValidationSchemasFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    @Import(name="omitSource")
    private @Nullable Output<Boolean> omitSource;

    /**
     * @return Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    public Optional<Output<Boolean>> omitSource() {
        return Optional.ofNullable(this.omitSource);
    }

    /**
     * UUID.
     * 
     */
    @Import(name="schemaId")
    private @Nullable Output<String> schemaId;

    /**
     * @return UUID.
     * 
     */
    public Optional<Output<String>> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetSchemaValidationSchemasArgs() {}

    private GetSchemaValidationSchemasArgs(GetSchemaValidationSchemasArgs $) {
        this.filter = $.filter;
        this.omitSource = $.omitSource;
        this.schemaId = $.schemaId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemaValidationSchemasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemaValidationSchemasArgs $;

        public Builder() {
            $ = new GetSchemaValidationSchemasArgs();
        }

        public Builder(GetSchemaValidationSchemasArgs defaults) {
            $ = new GetSchemaValidationSchemasArgs(Objects.requireNonNull(defaults));
        }

        public Builder filter(@Nullable Output<GetSchemaValidationSchemasFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(GetSchemaValidationSchemasFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param omitSource Omit the source-files of schemas and only retrieve their meta-data.
         * 
         * @return builder
         * 
         */
        public Builder omitSource(@Nullable Output<Boolean> omitSource) {
            $.omitSource = omitSource;
            return this;
        }

        /**
         * @param omitSource Omit the source-files of schemas and only retrieve their meta-data.
         * 
         * @return builder
         * 
         */
        public Builder omitSource(Boolean omitSource) {
            return omitSource(Output.of(omitSource));
        }

        /**
         * @param schemaId UUID.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(@Nullable Output<String> schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        /**
         * @param schemaId UUID.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(String schemaId) {
            return schemaId(Output.of(schemaId));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetSchemaValidationSchemasArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetSchemaValidationSchemasArgs", "zoneId");
            }
            return $;
        }
    }

}
