// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustAccessPolicyApprovalGroupArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustAccessPolicyExcludeArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustAccessPolicyIncludeArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustAccessPolicyRequireArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessPolicyState Empty = new ZeroTrustAccessPolicyState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Administrators who can approve a temporary authentication request.
     * 
     */
    @Import(name="approvalGroups")
    private @Nullable Output<List<ZeroTrustAccessPolicyApprovalGroupArgs>> approvalGroups;

    /**
     * @return Administrators who can approve a temporary authentication request.
     * 
     */
    public Optional<Output<List<ZeroTrustAccessPolicyApprovalGroupArgs>>> approvalGroups() {
        return Optional.ofNullable(this.approvalGroups);
    }

    /**
     * Requires the user to request access from an administrator at the start of each session.
     * 
     */
    @Import(name="approvalRequired")
    private @Nullable Output<Boolean> approvalRequired;

    /**
     * @return Requires the user to request access from an administrator at the start of each session.
     * 
     */
    public Optional<Output<Boolean>> approvalRequired() {
        return Optional.ofNullable(this.approvalRequired);
    }

    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;nonIdentity&#34;, &#34;bypass&#34;.
     * 
     */
    @Import(name="decision")
    private @Nullable Output<String> decision;

    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;nonIdentity&#34;, &#34;bypass&#34;.
     * 
     */
    public Optional<Output<String>> decision() {
        return Optional.ofNullable(this.decision);
    }

    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<ZeroTrustAccessPolicyExcludeArgs>> excludes;

    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public Optional<Output<List<ZeroTrustAccessPolicyExcludeArgs>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    @Import(name="includes")
    private @Nullable Output<List<ZeroTrustAccessPolicyIncludeArgs>> includes;

    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public Optional<Output<List<ZeroTrustAccessPolicyIncludeArgs>>> includes() {
        return Optional.ofNullable(this.includes);
    }

    /**
     * Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
     * 
     */
    @Import(name="isolationRequired")
    private @Nullable Output<Boolean> isolationRequired;

    /**
     * @return Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
     * 
     */
    public Optional<Output<Boolean>> isolationRequired() {
        return Optional.ofNullable(this.isolationRequired);
    }

    /**
     * The name of the Access policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Access policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A custom message that will appear on the purpose justification screen.
     * 
     */
    @Import(name="purposeJustificationPrompt")
    private @Nullable Output<String> purposeJustificationPrompt;

    /**
     * @return A custom message that will appear on the purpose justification screen.
     * 
     */
    public Optional<Output<String>> purposeJustificationPrompt() {
        return Optional.ofNullable(this.purposeJustificationPrompt);
    }

    /**
     * Require users to enter a justification when they log in to the application.
     * 
     */
    @Import(name="purposeJustificationRequired")
    private @Nullable Output<Boolean> purposeJustificationRequired;

    /**
     * @return Require users to enter a justification when they log in to the application.
     * 
     */
    public Optional<Output<Boolean>> purposeJustificationRequired() {
        return Optional.ofNullable(this.purposeJustificationRequired);
    }

    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    @Import(name="requires")
    private @Nullable Output<List<ZeroTrustAccessPolicyRequireArgs>> requires;

    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    public Optional<Output<List<ZeroTrustAccessPolicyRequireArgs>>> requires() {
        return Optional.ofNullable(this.requires);
    }

    /**
     * The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    @Import(name="sessionDuration")
    private @Nullable Output<String> sessionDuration;

    /**
     * @return The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    public Optional<Output<String>> sessionDuration() {
        return Optional.ofNullable(this.sessionDuration);
    }

    private ZeroTrustAccessPolicyState() {}

    private ZeroTrustAccessPolicyState(ZeroTrustAccessPolicyState $) {
        this.accountId = $.accountId;
        this.approvalGroups = $.approvalGroups;
        this.approvalRequired = $.approvalRequired;
        this.decision = $.decision;
        this.excludes = $.excludes;
        this.includes = $.includes;
        this.isolationRequired = $.isolationRequired;
        this.name = $.name;
        this.purposeJustificationPrompt = $.purposeJustificationPrompt;
        this.purposeJustificationRequired = $.purposeJustificationRequired;
        this.requires = $.requires;
        this.sessionDuration = $.sessionDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessPolicyState $;

        public Builder() {
            $ = new ZeroTrustAccessPolicyState();
        }

        public Builder(ZeroTrustAccessPolicyState defaults) {
            $ = new ZeroTrustAccessPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param approvalGroups Administrators who can approve a temporary authentication request.
         * 
         * @return builder
         * 
         */
        public Builder approvalGroups(@Nullable Output<List<ZeroTrustAccessPolicyApprovalGroupArgs>> approvalGroups) {
            $.approvalGroups = approvalGroups;
            return this;
        }

        /**
         * @param approvalGroups Administrators who can approve a temporary authentication request.
         * 
         * @return builder
         * 
         */
        public Builder approvalGroups(List<ZeroTrustAccessPolicyApprovalGroupArgs> approvalGroups) {
            return approvalGroups(Output.of(approvalGroups));
        }

        /**
         * @param approvalGroups Administrators who can approve a temporary authentication request.
         * 
         * @return builder
         * 
         */
        public Builder approvalGroups(ZeroTrustAccessPolicyApprovalGroupArgs... approvalGroups) {
            return approvalGroups(List.of(approvalGroups));
        }

        /**
         * @param approvalRequired Requires the user to request access from an administrator at the start of each session.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequired(@Nullable Output<Boolean> approvalRequired) {
            $.approvalRequired = approvalRequired;
            return this;
        }

        /**
         * @param approvalRequired Requires the user to request access from an administrator at the start of each session.
         * 
         * @return builder
         * 
         */
        public Builder approvalRequired(Boolean approvalRequired) {
            return approvalRequired(Output.of(approvalRequired));
        }

        /**
         * @param decision The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
         * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;nonIdentity&#34;, &#34;bypass&#34;.
         * 
         * @return builder
         * 
         */
        public Builder decision(@Nullable Output<String> decision) {
            $.decision = decision;
            return this;
        }

        /**
         * @param decision The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
         * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;nonIdentity&#34;, &#34;bypass&#34;.
         * 
         * @return builder
         * 
         */
        public Builder decision(String decision) {
            return decision(Output.of(decision));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<ZeroTrustAccessPolicyExcludeArgs>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<ZeroTrustAccessPolicyExcludeArgs> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(ZeroTrustAccessPolicyExcludeArgs... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(@Nullable Output<List<ZeroTrustAccessPolicyIncludeArgs>> includes) {
            $.includes = includes;
            return this;
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(List<ZeroTrustAccessPolicyIncludeArgs> includes) {
            return includes(Output.of(includes));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(ZeroTrustAccessPolicyIncludeArgs... includes) {
            return includes(List.of(includes));
        }

        /**
         * @param isolationRequired Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder isolationRequired(@Nullable Output<Boolean> isolationRequired) {
            $.isolationRequired = isolationRequired;
            return this;
        }

        /**
         * @param isolationRequired Require this application to be served in an isolated browser for users matching this policy. &#39;Client Web Isolation&#39; must be on for the account in order to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder isolationRequired(Boolean isolationRequired) {
            return isolationRequired(Output.of(isolationRequired));
        }

        /**
         * @param name The name of the Access policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Access policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param purposeJustificationPrompt A custom message that will appear on the purpose justification screen.
         * 
         * @return builder
         * 
         */
        public Builder purposeJustificationPrompt(@Nullable Output<String> purposeJustificationPrompt) {
            $.purposeJustificationPrompt = purposeJustificationPrompt;
            return this;
        }

        /**
         * @param purposeJustificationPrompt A custom message that will appear on the purpose justification screen.
         * 
         * @return builder
         * 
         */
        public Builder purposeJustificationPrompt(String purposeJustificationPrompt) {
            return purposeJustificationPrompt(Output.of(purposeJustificationPrompt));
        }

        /**
         * @param purposeJustificationRequired Require users to enter a justification when they log in to the application.
         * 
         * @return builder
         * 
         */
        public Builder purposeJustificationRequired(@Nullable Output<Boolean> purposeJustificationRequired) {
            $.purposeJustificationRequired = purposeJustificationRequired;
            return this;
        }

        /**
         * @param purposeJustificationRequired Require users to enter a justification when they log in to the application.
         * 
         * @return builder
         * 
         */
        public Builder purposeJustificationRequired(Boolean purposeJustificationRequired) {
            return purposeJustificationRequired(Output.of(purposeJustificationRequired));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(@Nullable Output<List<ZeroTrustAccessPolicyRequireArgs>> requires) {
            $.requires = requires;
            return this;
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(List<ZeroTrustAccessPolicyRequireArgs> requires) {
            return requires(Output.of(requires));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(ZeroTrustAccessPolicyRequireArgs... requires) {
            return requires(List.of(requires));
        }

        /**
         * @param sessionDuration The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(@Nullable Output<String> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration The amount of time that tokens issued for the application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(String sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        public ZeroTrustAccessPolicyState build() {
            return $;
        }
    }

}
