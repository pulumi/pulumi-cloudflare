// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMagicNetworkMonitoringRuleResult {
    private String accountId;
    /**
     * @return Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     * 
     */
    private Boolean automaticAdvertisement;
    /**
     * @return The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    private Double bandwidthThreshold;
    /**
     * @return The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;]. The format is AhBmCsDmsEusFns where A, B, C, D, E and F durations are optional; however at least one unit must be provided.
     * 
     */
    private String duration;
    /**
     * @return The id of the rule. Must be unique.
     * 
     */
    private String id;
    /**
     * @return The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     * 
     */
    private String name;
    /**
     * @return The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    private Double packetThreshold;
    private List<String> prefixes;
    /**
     * @return The id of the rule. Must be unique.
     * 
     */
    private @Nullable String ruleId;

    private GetMagicNetworkMonitoringRuleResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     * 
     */
    public Boolean automaticAdvertisement() {
        return this.automaticAdvertisement;
    }
    /**
     * @return The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    public Double bandwidthThreshold() {
        return this.bandwidthThreshold;
    }
    /**
     * @return The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;]. The format is AhBmCsDmsEusFns where A, B, C, D, E and F durations are optional; however at least one unit must be provided.
     * 
     */
    public String duration() {
        return this.duration;
    }
    /**
     * @return The id of the rule. Must be unique.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    public Double packetThreshold() {
        return this.packetThreshold;
    }
    public List<String> prefixes() {
        return this.prefixes;
    }
    /**
     * @return The id of the rule. Must be unique.
     * 
     */
    public Optional<String> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicNetworkMonitoringRuleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean automaticAdvertisement;
        private Double bandwidthThreshold;
        private String duration;
        private String id;
        private String name;
        private Double packetThreshold;
        private List<String> prefixes;
        private @Nullable String ruleId;
        public Builder() {}
        public Builder(GetMagicNetworkMonitoringRuleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.automaticAdvertisement = defaults.automaticAdvertisement;
    	      this.bandwidthThreshold = defaults.bandwidthThreshold;
    	      this.duration = defaults.duration;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.packetThreshold = defaults.packetThreshold;
    	      this.prefixes = defaults.prefixes;
    	      this.ruleId = defaults.ruleId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder automaticAdvertisement(Boolean automaticAdvertisement) {
            if (automaticAdvertisement == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "automaticAdvertisement");
            }
            this.automaticAdvertisement = automaticAdvertisement;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthThreshold(Double bandwidthThreshold) {
            if (bandwidthThreshold == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "bandwidthThreshold");
            }
            this.bandwidthThreshold = bandwidthThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder duration(String duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder packetThreshold(Double packetThreshold) {
            if (packetThreshold == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "packetThreshold");
            }
            this.packetThreshold = packetThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder prefixes(List<String> prefixes) {
            if (prefixes == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringRuleResult", "prefixes");
            }
            this.prefixes = prefixes;
            return this;
        }
        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }
        @CustomType.Setter
        public Builder ruleId(@Nullable String ruleId) {

            this.ruleId = ruleId;
            return this;
        }
        public GetMagicNetworkMonitoringRuleResult build() {
            final var _resultValue = new GetMagicNetworkMonitoringRuleResult();
            _resultValue.accountId = accountId;
            _resultValue.automaticAdvertisement = automaticAdvertisement;
            _resultValue.bandwidthThreshold = bandwidthThreshold;
            _resultValue.duration = duration;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.packetThreshold = packetThreshold;
            _resultValue.prefixes = prefixes;
            _resultValue.ruleId = ruleId;
            return _resultValue;
        }
    }
}
