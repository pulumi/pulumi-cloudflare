// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessMutualTlsCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final AccessMutualTlsCertificateState Empty = new AccessMutualTlsCertificateState();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The hostnames of the applications that will use this certificate.
     * 
     */
    @Import(name="associatedHostnames")
    private @Nullable Output<List<String>> associatedHostnames;

    /**
     * @return The hostnames of the applications that will use this certificate.
     * 
     */
    public Optional<Output<List<String>>> associatedHostnames() {
        return Optional.ofNullable(this.associatedHostnames);
    }

    /**
     * The certificate content.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The certificate content.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * The MD5 fingerprint of the certificate.
     * 
     */
    @Import(name="fingerprint")
    private @Nullable Output<String> fingerprint;

    /**
     * @return The MD5 fingerprint of the certificate.
     * 
     */
    public Optional<Output<String>> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }

    /**
     * The name of the certificate.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private AccessMutualTlsCertificateState() {}

    private AccessMutualTlsCertificateState(AccessMutualTlsCertificateState $) {
        this.accountId = $.accountId;
        this.associatedHostnames = $.associatedHostnames;
        this.certificate = $.certificate;
        this.expiresOn = $.expiresOn;
        this.fingerprint = $.fingerprint;
        this.name = $.name;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessMutualTlsCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessMutualTlsCertificateState $;

        public Builder() {
            $ = new AccessMutualTlsCertificateState();
        }

        public Builder(AccessMutualTlsCertificateState defaults) {
            $ = new AccessMutualTlsCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param associatedHostnames The hostnames of the applications that will use this certificate.
         * 
         * @return builder
         * 
         */
        public Builder associatedHostnames(@Nullable Output<List<String>> associatedHostnames) {
            $.associatedHostnames = associatedHostnames;
            return this;
        }

        /**
         * @param associatedHostnames The hostnames of the applications that will use this certificate.
         * 
         * @return builder
         * 
         */
        public Builder associatedHostnames(List<String> associatedHostnames) {
            return associatedHostnames(Output.of(associatedHostnames));
        }

        /**
         * @param associatedHostnames The hostnames of the applications that will use this certificate.
         * 
         * @return builder
         * 
         */
        public Builder associatedHostnames(String... associatedHostnames) {
            return associatedHostnames(List.of(associatedHostnames));
        }

        /**
         * @param certificate The certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate content.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param fingerprint The MD5 fingerprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(@Nullable Output<String> fingerprint) {
            $.fingerprint = fingerprint;
            return this;
        }

        /**
         * @param fingerprint The MD5 fingerprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder fingerprint(String fingerprint) {
            return fingerprint(Output.of(fingerprint));
        }

        /**
         * @param name The name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public AccessMutualTlsCertificateState build() {
            return $;
        }
    }

}
