// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsZoneTransfersPeerState extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneTransfersPeerState Empty = new DnsZoneTransfersPeerState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    @Import(name="ixfrEnable")
    private @Nullable Output<Boolean> ixfrEnable;

    /**
     * @return Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    public Optional<Output<Boolean>> ixfrEnable() {
        return Optional.ofNullable(this.ixfrEnable);
    }

    /**
     * The name of the peer.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the peer.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    /**
     * @return DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * TSIG authentication will be used for zone transfer if configured.
     * 
     */
    @Import(name="tsigId")
    private @Nullable Output<String> tsigId;

    /**
     * @return TSIG authentication will be used for zone transfer if configured.
     * 
     */
    public Optional<Output<String>> tsigId() {
        return Optional.ofNullable(this.tsigId);
    }

    private DnsZoneTransfersPeerState() {}

    private DnsZoneTransfersPeerState(DnsZoneTransfersPeerState $) {
        this.accountId = $.accountId;
        this.ip = $.ip;
        this.ixfrEnable = $.ixfrEnable;
        this.name = $.name;
        this.port = $.port;
        this.tsigId = $.tsigId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneTransfersPeerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneTransfersPeerState $;

        public Builder() {
            $ = new DnsZoneTransfersPeerState();
        }

        public Builder(DnsZoneTransfersPeerState defaults) {
            $ = new DnsZoneTransfersPeerState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param ip IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ixfrEnable Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
         * 
         * @return builder
         * 
         */
        public Builder ixfrEnable(@Nullable Output<Boolean> ixfrEnable) {
            $.ixfrEnable = ixfrEnable;
            return this;
        }

        /**
         * @param ixfrEnable Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
         * 
         * @return builder
         * 
         */
        public Builder ixfrEnable(Boolean ixfrEnable) {
            return ixfrEnable(Output.of(ixfrEnable));
        }

        /**
         * @param name The name of the peer.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the peer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param tsigId TSIG authentication will be used for zone transfer if configured.
         * 
         * @return builder
         * 
         */
        public Builder tsigId(@Nullable Output<String> tsigId) {
            $.tsigId = tsigId;
            return this;
        }

        /**
         * @param tsigId TSIG authentication will be used for zone transfer if configured.
         * 
         * @return builder
         * 
         */
        public Builder tsigId(String tsigId) {
            return tsigId(Output.of(tsigId));
        }

        public DnsZoneTransfersPeerState build() {
            return $;
        }
    }

}
