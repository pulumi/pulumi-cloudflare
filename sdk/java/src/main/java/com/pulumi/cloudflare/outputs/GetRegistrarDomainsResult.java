// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRegistrarDomainsResultRegistrantContact;
import com.pulumi.cloudflare.outputs.GetRegistrarDomainsResultTransferIn;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistrarDomainsResult {
    /**
     * @return Shows if a domain is available for transferring into Cloudflare Registrar.
     * 
     */
    private Boolean available;
    /**
     * @return Indicates if the domain can be registered as a new domain.
     * 
     */
    private Boolean canRegister;
    /**
     * @return Shows time of creation.
     * 
     */
    private String createdAt;
    /**
     * @return Shows name of current registrar.
     * 
     */
    private String currentRegistrar;
    /**
     * @return Shows when domain name registration expires.
     * 
     */
    private String expiresAt;
    /**
     * @return Domain identifier.
     * 
     */
    private String id;
    /**
     * @return Shows whether a registrar lock is in place for a domain.
     * 
     */
    private Boolean locked;
    /**
     * @return Shows contact information for domain registrant.
     * 
     */
    private GetRegistrarDomainsResultRegistrantContact registrantContact;
    /**
     * @return A comma-separated list of registry status codes. A full list of status codes can be found at [EPP Status Codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
     * 
     */
    private String registryStatuses;
    /**
     * @return Whether a particular TLD is currently supported by Cloudflare Registrar. Refer to [TLD Policies](https://www.cloudflare.com/tld-policies/) for a list of supported TLDs.
     * 
     */
    private Boolean supportedTld;
    /**
     * @return Statuses for domain transfers into Cloudflare Registrar.
     * 
     */
    private GetRegistrarDomainsResultTransferIn transferIn;
    /**
     * @return Last updated.
     * 
     */
    private String updatedAt;

    private GetRegistrarDomainsResult() {}
    /**
     * @return Shows if a domain is available for transferring into Cloudflare Registrar.
     * 
     */
    public Boolean available() {
        return this.available;
    }
    /**
     * @return Indicates if the domain can be registered as a new domain.
     * 
     */
    public Boolean canRegister() {
        return this.canRegister;
    }
    /**
     * @return Shows time of creation.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Shows name of current registrar.
     * 
     */
    public String currentRegistrar() {
        return this.currentRegistrar;
    }
    /**
     * @return Shows when domain name registration expires.
     * 
     */
    public String expiresAt() {
        return this.expiresAt;
    }
    /**
     * @return Domain identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Shows whether a registrar lock is in place for a domain.
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return Shows contact information for domain registrant.
     * 
     */
    public GetRegistrarDomainsResultRegistrantContact registrantContact() {
        return this.registrantContact;
    }
    /**
     * @return A comma-separated list of registry status codes. A full list of status codes can be found at [EPP Status Codes](https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en).
     * 
     */
    public String registryStatuses() {
        return this.registryStatuses;
    }
    /**
     * @return Whether a particular TLD is currently supported by Cloudflare Registrar. Refer to [TLD Policies](https://www.cloudflare.com/tld-policies/) for a list of supported TLDs.
     * 
     */
    public Boolean supportedTld() {
        return this.supportedTld;
    }
    /**
     * @return Statuses for domain transfers into Cloudflare Registrar.
     * 
     */
    public GetRegistrarDomainsResultTransferIn transferIn() {
        return this.transferIn;
    }
    /**
     * @return Last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistrarDomainsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean available;
        private Boolean canRegister;
        private String createdAt;
        private String currentRegistrar;
        private String expiresAt;
        private String id;
        private Boolean locked;
        private GetRegistrarDomainsResultRegistrantContact registrantContact;
        private String registryStatuses;
        private Boolean supportedTld;
        private GetRegistrarDomainsResultTransferIn transferIn;
        private String updatedAt;
        public Builder() {}
        public Builder(GetRegistrarDomainsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.available = defaults.available;
    	      this.canRegister = defaults.canRegister;
    	      this.createdAt = defaults.createdAt;
    	      this.currentRegistrar = defaults.currentRegistrar;
    	      this.expiresAt = defaults.expiresAt;
    	      this.id = defaults.id;
    	      this.locked = defaults.locked;
    	      this.registrantContact = defaults.registrantContact;
    	      this.registryStatuses = defaults.registryStatuses;
    	      this.supportedTld = defaults.supportedTld;
    	      this.transferIn = defaults.transferIn;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder available(Boolean available) {
            if (available == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "available");
            }
            this.available = available;
            return this;
        }
        @CustomType.Setter
        public Builder canRegister(Boolean canRegister) {
            if (canRegister == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "canRegister");
            }
            this.canRegister = canRegister;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder currentRegistrar(String currentRegistrar) {
            if (currentRegistrar == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "currentRegistrar");
            }
            this.currentRegistrar = currentRegistrar;
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(String expiresAt) {
            if (expiresAt == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "expiresAt");
            }
            this.expiresAt = expiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            if (locked == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "locked");
            }
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder registrantContact(GetRegistrarDomainsResultRegistrantContact registrantContact) {
            if (registrantContact == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "registrantContact");
            }
            this.registrantContact = registrantContact;
            return this;
        }
        @CustomType.Setter
        public Builder registryStatuses(String registryStatuses) {
            if (registryStatuses == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "registryStatuses");
            }
            this.registryStatuses = registryStatuses;
            return this;
        }
        @CustomType.Setter
        public Builder supportedTld(Boolean supportedTld) {
            if (supportedTld == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "supportedTld");
            }
            this.supportedTld = supportedTld;
            return this;
        }
        @CustomType.Setter
        public Builder transferIn(GetRegistrarDomainsResultTransferIn transferIn) {
            if (transferIn == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "transferIn");
            }
            this.transferIn = transferIn;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetRegistrarDomainsResult build() {
            final var _resultValue = new GetRegistrarDomainsResult();
            _resultValue.available = available;
            _resultValue.canRegister = canRegister;
            _resultValue.createdAt = createdAt;
            _resultValue.currentRegistrar = currentRegistrar;
            _resultValue.expiresAt = expiresAt;
            _resultValue.id = id;
            _resultValue.locked = locked;
            _resultValue.registrantContact = registrantContact;
            _resultValue.registryStatuses = registryStatuses;
            _resultValue.supportedTld = supportedTld;
            _resultValue.transferIn = transferIn;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
