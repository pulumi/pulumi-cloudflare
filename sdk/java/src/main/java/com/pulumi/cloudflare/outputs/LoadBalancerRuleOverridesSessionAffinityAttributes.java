// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRuleOverridesSessionAffinityAttributes {
    /**
     * @return Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
     * 
     */
    private @Nullable Double drainDuration;
    /**
     * @return Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `&#34;cookie:&lt;cookie-name-1&gt;,&lt;cookie-name-2&gt;&#34;` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `&#34;cookie&#34;` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
     * 
     */
    private @Nullable List<String> headers;
    /**
     * @return When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are: - `&#34;true&#34;`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&#39;t created. - `&#34;false&#34;`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&#39;t created.
     * 
     */
    private @Nullable Boolean requireAllHeaders;
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value &#34;Auto&#34; will be translated to &#34;Lax&#34; or &#34;None&#34; depending if Always Use HTTPS is enabled. Note: when using value &#34;None&#34;, the secure attribute can not be set to &#34;Never&#34;.
     * Available values: &#34;Auto&#34;, &#34;Lax&#34;, &#34;None&#34;, &#34;Strict&#34;.
     * 
     */
    private @Nullable String samesite;
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value &#34;Always&#34; indicates the Secure attribute will be set in the Set-Cookie header, &#34;Never&#34; indicates the Secure attribute will not be set, and &#34;Auto&#34; will set the Secure attribute depending if Always Use HTTPS is enabled.
     * Available values: &#34;Auto&#34;, &#34;Always&#34;, &#34;Never&#34;.
     * 
     */
    private @Nullable String secure;
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are: - `&#34;none&#34;`: No failover takes place for sessions pinned to the origin (default). - `&#34;temporary&#34;`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. - `&#34;sticky&#34;`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
     * Available values: &#34;none&#34;, &#34;temporary&#34;, &#34;sticky&#34;.
     * 
     */
    private @Nullable String zeroDowntimeFailover;

    private LoadBalancerRuleOverridesSessionAffinityAttributes() {}
    /**
     * @return Configures the drain duration in seconds. This field is only used when session affinity is enabled on the load balancer.
     * 
     */
    public Optional<Double> drainDuration() {
        return Optional.ofNullable(this.drainDuration);
    }
    /**
     * @return Configures the names of HTTP headers to base session affinity on when header `session_affinity` is enabled. At least one HTTP header name must be provided. To specify the exact cookies to be used, include an item in the following format: `&#34;cookie:&lt;cookie-name-1&gt;,&lt;cookie-name-2&gt;&#34;` (example) where everything after the colon is a comma-separated list of cookie names. Providing only `&#34;cookie&#34;` will result in all cookies being used. The default max number of HTTP header names that can be provided depends on your plan: 5 for Enterprise, 1 for all other plans.
     * 
     */
    public List<String> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return When header `session_affinity` is enabled, this option can be used to specify how HTTP headers on load balancing requests will be used. The supported values are: - `&#34;true&#34;`: Load balancing requests must contain *all* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&#39;t created. - `&#34;false&#34;`: Load balancing requests must contain *at least one* of the HTTP headers specified by the `headers` session affinity attribute, otherwise sessions aren&#39;t created.
     * 
     */
    public Optional<Boolean> requireAllHeaders() {
        return Optional.ofNullable(this.requireAllHeaders);
    }
    /**
     * @return Configures the SameSite attribute on session affinity cookie. Value &#34;Auto&#34; will be translated to &#34;Lax&#34; or &#34;None&#34; depending if Always Use HTTPS is enabled. Note: when using value &#34;None&#34;, the secure attribute can not be set to &#34;Never&#34;.
     * Available values: &#34;Auto&#34;, &#34;Lax&#34;, &#34;None&#34;, &#34;Strict&#34;.
     * 
     */
    public Optional<String> samesite() {
        return Optional.ofNullable(this.samesite);
    }
    /**
     * @return Configures the Secure attribute on session affinity cookie. Value &#34;Always&#34; indicates the Secure attribute will be set in the Set-Cookie header, &#34;Never&#34; indicates the Secure attribute will not be set, and &#34;Auto&#34; will set the Secure attribute depending if Always Use HTTPS is enabled.
     * Available values: &#34;Auto&#34;, &#34;Always&#34;, &#34;Never&#34;.
     * 
     */
    public Optional<String> secure() {
        return Optional.ofNullable(this.secure);
    }
    /**
     * @return Configures the zero-downtime failover between origins within a pool when session affinity is enabled. This feature is currently incompatible with Argo, Tiered Cache, and Bandwidth Alliance. The supported values are: - `&#34;none&#34;`: No failover takes place for sessions pinned to the origin (default). - `&#34;temporary&#34;`: Traffic will be sent to another other healthy origin until the originally pinned origin is available; note that this can potentially result in heavy origin flapping. - `&#34;sticky&#34;`: The session affinity cookie is updated and subsequent requests are sent to the new origin. Note: Zero-downtime failover with sticky sessions is currently not supported for session affinity by header.
     * Available values: &#34;none&#34;, &#34;temporary&#34;, &#34;sticky&#34;.
     * 
     */
    public Optional<String> zeroDowntimeFailover() {
        return Optional.ofNullable(this.zeroDowntimeFailover);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRuleOverridesSessionAffinityAttributes defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double drainDuration;
        private @Nullable List<String> headers;
        private @Nullable Boolean requireAllHeaders;
        private @Nullable String samesite;
        private @Nullable String secure;
        private @Nullable String zeroDowntimeFailover;
        public Builder() {}
        public Builder(LoadBalancerRuleOverridesSessionAffinityAttributes defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.drainDuration = defaults.drainDuration;
    	      this.headers = defaults.headers;
    	      this.requireAllHeaders = defaults.requireAllHeaders;
    	      this.samesite = defaults.samesite;
    	      this.secure = defaults.secure;
    	      this.zeroDowntimeFailover = defaults.zeroDowntimeFailover;
        }

        @CustomType.Setter
        public Builder drainDuration(@Nullable Double drainDuration) {

            this.drainDuration = drainDuration;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable List<String> headers) {

            this.headers = headers;
            return this;
        }
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder requireAllHeaders(@Nullable Boolean requireAllHeaders) {

            this.requireAllHeaders = requireAllHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder samesite(@Nullable String samesite) {

            this.samesite = samesite;
            return this;
        }
        @CustomType.Setter
        public Builder secure(@Nullable String secure) {

            this.secure = secure;
            return this;
        }
        @CustomType.Setter
        public Builder zeroDowntimeFailover(@Nullable String zeroDowntimeFailover) {

            this.zeroDowntimeFailover = zeroDowntimeFailover;
            return this;
        }
        public LoadBalancerRuleOverridesSessionAffinityAttributes build() {
            final var _resultValue = new LoadBalancerRuleOverridesSessionAffinityAttributes();
            _resultValue.drainDuration = drainDuration;
            _resultValue.headers = headers;
            _resultValue.requireAllHeaders = requireAllHeaders;
            _resultValue.samesite = samesite;
            _resultValue.secure = secure;
            _resultValue.zeroDowntimeFailover = zeroDowntimeFailover;
            return _resultValue;
        }
    }
}
