// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRulesetsRulesetRuleActionParametersCacheReserve {
    /**
     * @return Determines whether Cloudflare will write the eligible resource to cache reserve.
     * 
     */
    private Boolean eligible;
    /**
     * @return The minimum file size, in bytes, eligible for storage in cache reserve. If omitted and &#34;eligible&#34; is true, Cloudflare will use 0 bytes by default.
     * 
     */
    private @Nullable Integer minimumFileSize;

    private GetRulesetsRulesetRuleActionParametersCacheReserve() {}
    /**
     * @return Determines whether Cloudflare will write the eligible resource to cache reserve.
     * 
     */
    public Boolean eligible() {
        return this.eligible;
    }
    /**
     * @return The minimum file size, in bytes, eligible for storage in cache reserve. If omitted and &#34;eligible&#34; is true, Cloudflare will use 0 bytes by default.
     * 
     */
    public Optional<Integer> minimumFileSize() {
        return Optional.ofNullable(this.minimumFileSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetsRulesetRuleActionParametersCacheReserve defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean eligible;
        private @Nullable Integer minimumFileSize;
        public Builder() {}
        public Builder(GetRulesetsRulesetRuleActionParametersCacheReserve defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eligible = defaults.eligible;
    	      this.minimumFileSize = defaults.minimumFileSize;
        }

        @CustomType.Setter
        public Builder eligible(Boolean eligible) {
            if (eligible == null) {
              throw new MissingRequiredPropertyException("GetRulesetsRulesetRuleActionParametersCacheReserve", "eligible");
            }
            this.eligible = eligible;
            return this;
        }
        @CustomType.Setter
        public Builder minimumFileSize(@Nullable Integer minimumFileSize) {

            this.minimumFileSize = minimumFileSize;
            return this;
        }
        public GetRulesetsRulesetRuleActionParametersCacheReserve build() {
            final var _resultValue = new GetRulesetsRulesetRuleActionParametersCacheReserve();
            _resultValue.eligible = eligible;
            _resultValue.minimumFileSize = minimumFileSize;
            return _resultValue;
        }
    }
}
