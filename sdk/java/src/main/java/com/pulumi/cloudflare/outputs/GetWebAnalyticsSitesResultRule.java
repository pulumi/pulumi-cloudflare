// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWebAnalyticsSitesResultRule {
    private String created;
    /**
     * @return The hostname the rule will be applied to.
     * 
     */
    private String host;
    /**
     * @return The Web Analytics rule identifier.
     * 
     */
    private String id;
    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    private Boolean inclusive;
    /**
     * @return Whether the rule is paused or not.
     * 
     */
    private Boolean isPaused;
    /**
     * @return The paths the rule will be applied to.
     * 
     */
    private List<String> paths;
    private Double priority;

    private GetWebAnalyticsSitesResultRule() {}
    public String created() {
        return this.created;
    }
    /**
     * @return The hostname the rule will be applied to.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The Web Analytics rule identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    public Boolean inclusive() {
        return this.inclusive;
    }
    /**
     * @return Whether the rule is paused or not.
     * 
     */
    public Boolean isPaused() {
        return this.isPaused;
    }
    /**
     * @return The paths the rule will be applied to.
     * 
     */
    public List<String> paths() {
        return this.paths;
    }
    public Double priority() {
        return this.priority;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAnalyticsSitesResultRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String created;
        private String host;
        private String id;
        private Boolean inclusive;
        private Boolean isPaused;
        private List<String> paths;
        private Double priority;
        public Builder() {}
        public Builder(GetWebAnalyticsSitesResultRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.inclusive = defaults.inclusive;
    	      this.isPaused = defaults.isPaused;
    	      this.paths = defaults.paths;
    	      this.priority = defaults.priority;
        }

        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inclusive(Boolean inclusive) {
            if (inclusive == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "inclusive");
            }
            this.inclusive = inclusive;
            return this;
        }
        @CustomType.Setter
        public Builder isPaused(Boolean isPaused) {
            if (isPaused == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "isPaused");
            }
            this.isPaused = isPaused;
            return this;
        }
        @CustomType.Setter
        public Builder paths(List<String> paths) {
            if (paths == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "paths");
            }
            this.paths = paths;
            return this;
        }
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }
        @CustomType.Setter
        public Builder priority(Double priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetWebAnalyticsSitesResultRule", "priority");
            }
            this.priority = priority;
            return this;
        }
        public GetWebAnalyticsSitesResultRule build() {
            final var _resultValue = new GetWebAnalyticsSitesResultRule();
            _resultValue.created = created;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.inclusive = inclusive;
            _resultValue.isPaused = isPaused;
            _resultValue.paths = paths;
            _resultValue.priority = priority;
            return _resultValue;
        }
    }
}
