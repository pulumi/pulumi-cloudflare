// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class QueueConsumerSettings {
    /**
     * @return The maximum number of messages to include in a batch.
     * 
     */
    private @Nullable Double batchSize;
    /**
     * @return Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    private @Nullable Double maxConcurrency;
    /**
     * @return The maximum number of retries
     * 
     */
    private @Nullable Double maxRetries;
    /**
     * @return The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    private @Nullable Double maxWaitTimeMs;
    /**
     * @return The number of seconds to delay before making the message available for another attempt.
     * 
     */
    private @Nullable Double retryDelay;
    /**
     * @return The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    private @Nullable Double visibilityTimeoutMs;

    private QueueConsumerSettings() {}
    /**
     * @return The maximum number of messages to include in a batch.
     * 
     */
    public Optional<Double> batchSize() {
        return Optional.ofNullable(this.batchSize);
    }
    /**
     * @return Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    public Optional<Double> maxConcurrency() {
        return Optional.ofNullable(this.maxConcurrency);
    }
    /**
     * @return The maximum number of retries
     * 
     */
    public Optional<Double> maxRetries() {
        return Optional.ofNullable(this.maxRetries);
    }
    /**
     * @return The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    public Optional<Double> maxWaitTimeMs() {
        return Optional.ofNullable(this.maxWaitTimeMs);
    }
    /**
     * @return The number of seconds to delay before making the message available for another attempt.
     * 
     */
    public Optional<Double> retryDelay() {
        return Optional.ofNullable(this.retryDelay);
    }
    /**
     * @return The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    public Optional<Double> visibilityTimeoutMs() {
        return Optional.ofNullable(this.visibilityTimeoutMs);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueueConsumerSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double batchSize;
        private @Nullable Double maxConcurrency;
        private @Nullable Double maxRetries;
        private @Nullable Double maxWaitTimeMs;
        private @Nullable Double retryDelay;
        private @Nullable Double visibilityTimeoutMs;
        public Builder() {}
        public Builder(QueueConsumerSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxRetries = defaults.maxRetries;
    	      this.maxWaitTimeMs = defaults.maxWaitTimeMs;
    	      this.retryDelay = defaults.retryDelay;
    	      this.visibilityTimeoutMs = defaults.visibilityTimeoutMs;
        }

        @CustomType.Setter
        public Builder batchSize(@Nullable Double batchSize) {

            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrency(@Nullable Double maxConcurrency) {

            this.maxConcurrency = maxConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetries(@Nullable Double maxRetries) {

            this.maxRetries = maxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder maxWaitTimeMs(@Nullable Double maxWaitTimeMs) {

            this.maxWaitTimeMs = maxWaitTimeMs;
            return this;
        }
        @CustomType.Setter
        public Builder retryDelay(@Nullable Double retryDelay) {

            this.retryDelay = retryDelay;
            return this;
        }
        @CustomType.Setter
        public Builder visibilityTimeoutMs(@Nullable Double visibilityTimeoutMs) {

            this.visibilityTimeoutMs = visibilityTimeoutMs;
            return this;
        }
        public QueueConsumerSettings build() {
            final var _resultValue = new QueueConsumerSettings();
            _resultValue.batchSize = batchSize;
            _resultValue.maxConcurrency = maxConcurrency;
            _resultValue.maxRetries = maxRetries;
            _resultValue.maxWaitTimeMs = maxWaitTimeMs;
            _resultValue.retryDelay = retryDelay;
            _resultValue.visibilityTimeoutMs = visibilityTimeoutMs;
            return _resultValue;
        }
    }
}
