// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetFirewallRulesResultFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFirewallRulesResult {
    /**
     * @return The action to apply to a matched request. The `log` action is only available on an Enterprise plan.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;, &#34;allow&#34;, &#34;log&#34;, &#34;bypass&#34;.
     * 
     */
    private String action;
    /**
     * @return An informative summary of the firewall rule.
     * 
     */
    private String description;
    private GetFirewallRulesResultFilter filter;
    /**
     * @return The unique identifier of the firewall rule.
     * 
     */
    private String id;
    /**
     * @return When true, indicates that the firewall rule is currently paused.
     * 
     */
    private Boolean paused;
    /**
     * @return The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     * 
     */
    private Double priority;
    private List<String> products;
    /**
     * @return A short reference tag. Allows you to select related firewall rules.
     * 
     */
    private String ref;

    private GetFirewallRulesResult() {}
    /**
     * @return The action to apply to a matched request. The `log` action is only available on an Enterprise plan.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;, &#34;allow&#34;, &#34;log&#34;, &#34;bypass&#34;.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return An informative summary of the firewall rule.
     * 
     */
    public String description() {
        return this.description;
    }
    public GetFirewallRulesResultFilter filter() {
        return this.filter;
    }
    /**
     * @return The unique identifier of the firewall rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return When true, indicates that the firewall rule is currently paused.
     * 
     */
    public Boolean paused() {
        return this.paused;
    }
    /**
     * @return The priority of the rule. Optional value used to define the processing order. A lower number indicates a higher priority. If not provided, rules with a defined priority will be processed before rules without a priority.
     * 
     */
    public Double priority() {
        return this.priority;
    }
    public List<String> products() {
        return this.products;
    }
    /**
     * @return A short reference tag. Allows you to select related firewall rules.
     * 
     */
    public String ref() {
        return this.ref;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFirewallRulesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String description;
        private GetFirewallRulesResultFilter filter;
        private String id;
        private Boolean paused;
        private Double priority;
        private List<String> products;
        private String ref;
        public Builder() {}
        public Builder(GetFirewallRulesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.description = defaults.description;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.paused = defaults.paused;
    	      this.priority = defaults.priority;
    	      this.products = defaults.products;
    	      this.ref = defaults.ref;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder filter(GetFirewallRulesResultFilter filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder paused(Boolean paused) {
            if (paused == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "paused");
            }
            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Double priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder products(List<String> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(String... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetFirewallRulesResult", "ref");
            }
            this.ref = ref;
            return this;
        }
        public GetFirewallRulesResult build() {
            final var _resultValue = new GetFirewallRulesResult();
            _resultValue.action = action;
            _resultValue.description = description;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.paused = paused;
            _resultValue.priority = priority;
            _resultValue.products = products;
            _resultValue.ref = ref;
            return _resultValue;
        }
    }
}
