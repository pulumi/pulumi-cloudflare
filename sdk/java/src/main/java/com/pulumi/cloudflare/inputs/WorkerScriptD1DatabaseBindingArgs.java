// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class WorkerScriptD1DatabaseBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerScriptD1DatabaseBindingArgs Empty = new WorkerScriptD1DatabaseBindingArgs();

    /**
     * Database ID of D1 database to use.
     * 
     */
    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    /**
     * @return Database ID of D1 database to use.
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }

    /**
     * The global variable for the binding in your Worker code.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The global variable for the binding in your Worker code.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private WorkerScriptD1DatabaseBindingArgs() {}

    private WorkerScriptD1DatabaseBindingArgs(WorkerScriptD1DatabaseBindingArgs $) {
        this.databaseId = $.databaseId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerScriptD1DatabaseBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerScriptD1DatabaseBindingArgs $;

        public Builder() {
            $ = new WorkerScriptD1DatabaseBindingArgs();
        }

        public Builder(WorkerScriptD1DatabaseBindingArgs defaults) {
            $ = new WorkerScriptD1DatabaseBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseId Database ID of D1 database to use.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId Database ID of D1 database to use.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param name The global variable for the binding in your Worker code.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The global variable for the binding in your Worker code.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public WorkerScriptD1DatabaseBindingArgs build() {
            if ($.databaseId == null) {
                throw new MissingRequiredPropertyException("WorkerScriptD1DatabaseBindingArgs", "databaseId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkerScriptD1DatabaseBindingArgs", "name");
            }
            return $;
        }
    }

}
