// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistrarDomainsResultRegistrantContact {
    /**
     * @return Address.
     * 
     */
    private String address;
    /**
     * @return Optional address line for unit, floor, suite, etc.
     * 
     */
    private String address2;
    /**
     * @return City.
     * 
     */
    private String city;
    /**
     * @return The country in which the user lives.
     * 
     */
    private String country;
    /**
     * @return The contact email address of the user.
     * 
     */
    private String email;
    /**
     * @return Contact fax number.
     * 
     */
    private String fax;
    /**
     * @return User&#39;s first name
     * 
     */
    private String firstName;
    /**
     * @return Contact Identifier.
     * 
     */
    private String id;
    /**
     * @return User&#39;s last name
     * 
     */
    private String lastName;
    /**
     * @return Name of organization.
     * 
     */
    private String organization;
    /**
     * @return User&#39;s telephone number
     * 
     */
    private String phone;
    /**
     * @return State.
     * 
     */
    private String state;
    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    private String zip;

    private GetRegistrarDomainsResultRegistrantContact() {}
    /**
     * @return Address.
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Optional address line for unit, floor, suite, etc.
     * 
     */
    public String address2() {
        return this.address2;
    }
    /**
     * @return City.
     * 
     */
    public String city() {
        return this.city;
    }
    /**
     * @return The country in which the user lives.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return The contact email address of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Contact fax number.
     * 
     */
    public String fax() {
        return this.fax;
    }
    /**
     * @return User&#39;s first name
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Contact Identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return User&#39;s last name
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    /**
     * @return Name of organization.
     * 
     */
    public String organization() {
        return this.organization;
    }
    /**
     * @return User&#39;s telephone number
     * 
     */
    public String phone() {
        return this.phone;
    }
    /**
     * @return State.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    public String zip() {
        return this.zip;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistrarDomainsResultRegistrantContact defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private String address2;
        private String city;
        private String country;
        private String email;
        private String fax;
        private String firstName;
        private String id;
        private String lastName;
        private String organization;
        private String phone;
        private String state;
        private String zip;
        public Builder() {}
        public Builder(GetRegistrarDomainsResultRegistrantContact defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.address2 = defaults.address2;
    	      this.city = defaults.city;
    	      this.country = defaults.country;
    	      this.email = defaults.email;
    	      this.fax = defaults.fax;
    	      this.firstName = defaults.firstName;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.organization = defaults.organization;
    	      this.phone = defaults.phone;
    	      this.state = defaults.state;
    	      this.zip = defaults.zip;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder address2(String address2) {
            if (address2 == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "address2");
            }
            this.address2 = address2;
            return this;
        }
        @CustomType.Setter
        public Builder city(String city) {
            if (city == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "city");
            }
            this.city = city;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder fax(String fax) {
            if (fax == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "fax");
            }
            this.fax = fax;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder phone(String phone) {
            if (phone == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "phone");
            }
            this.phone = phone;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder zip(String zip) {
            if (zip == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultRegistrantContact", "zip");
            }
            this.zip = zip;
            return this;
        }
        public GetRegistrarDomainsResultRegistrantContact build() {
            final var _resultValue = new GetRegistrarDomainsResultRegistrantContact();
            _resultValue.address = address;
            _resultValue.address2 = address2;
            _resultValue.city = city;
            _resultValue.country = country;
            _resultValue.email = email;
            _resultValue.fax = fax;
            _resultValue.firstName = firstName;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.organization = organization;
            _resultValue.phone = phone;
            _resultValue.state = state;
            _resultValue.zip = zip;
            return _resultValue;
        }
    }
}
