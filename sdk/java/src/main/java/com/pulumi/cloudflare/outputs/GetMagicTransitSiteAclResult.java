// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSiteAclLan1;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteAclLan2;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMagicTransitSiteAclResult {
    /**
     * @return Identifier
     * 
     */
    private String accountId;
    /**
     * @return Identifier
     * 
     */
    private @Nullable String aclId;
    /**
     * @return Description for the ACL.
     * 
     */
    private String description;
    /**
     * @return The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     * 
     */
    private Boolean forwardLocally;
    /**
     * @return Identifier
     * 
     */
    private String id;
    private GetMagicTransitSiteAclLan1 lan1;
    private GetMagicTransitSiteAclLan2 lan2;
    /**
     * @return The name of the ACL.
     * 
     */
    private String name;
    private List<String> protocols;
    /**
     * @return Identifier
     * 
     */
    private String siteId;
    /**
     * @return The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
     * 
     */
    private Boolean unidirectional;

    private GetMagicTransitSiteAclResult() {}
    /**
     * @return Identifier
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Identifier
     * 
     */
    public Optional<String> aclId() {
        return Optional.ofNullable(this.aclId);
    }
    /**
     * @return Description for the ACL.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     * 
     */
    public Boolean forwardLocally() {
        return this.forwardLocally;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    public GetMagicTransitSiteAclLan1 lan1() {
        return this.lan1;
    }
    public GetMagicTransitSiteAclLan2 lan2() {
        return this.lan2;
    }
    /**
     * @return The name of the ACL.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return Identifier
     * 
     */
    public String siteId() {
        return this.siteId;
    }
    /**
     * @return The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
     * 
     */
    public Boolean unidirectional() {
        return this.unidirectional;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteAclResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private @Nullable String aclId;
        private String description;
        private Boolean forwardLocally;
        private String id;
        private GetMagicTransitSiteAclLan1 lan1;
        private GetMagicTransitSiteAclLan2 lan2;
        private String name;
        private List<String> protocols;
        private String siteId;
        private Boolean unidirectional;
        public Builder() {}
        public Builder(GetMagicTransitSiteAclResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.aclId = defaults.aclId;
    	      this.description = defaults.description;
    	      this.forwardLocally = defaults.forwardLocally;
    	      this.id = defaults.id;
    	      this.lan1 = defaults.lan1;
    	      this.lan2 = defaults.lan2;
    	      this.name = defaults.name;
    	      this.protocols = defaults.protocols;
    	      this.siteId = defaults.siteId;
    	      this.unidirectional = defaults.unidirectional;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder aclId(@Nullable String aclId) {

            this.aclId = aclId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder forwardLocally(Boolean forwardLocally) {
            if (forwardLocally == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "forwardLocally");
            }
            this.forwardLocally = forwardLocally;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lan1(GetMagicTransitSiteAclLan1 lan1) {
            if (lan1 == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "lan1");
            }
            this.lan1 = lan1;
            return this;
        }
        @CustomType.Setter
        public Builder lan2(GetMagicTransitSiteAclLan2 lan2) {
            if (lan2 == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "lan2");
            }
            this.lan2 = lan2;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder unidirectional(Boolean unidirectional) {
            if (unidirectional == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclResult", "unidirectional");
            }
            this.unidirectional = unidirectional;
            return this;
        }
        public GetMagicTransitSiteAclResult build() {
            final var _resultValue = new GetMagicTransitSiteAclResult();
            _resultValue.accountId = accountId;
            _resultValue.aclId = aclId;
            _resultValue.description = description;
            _resultValue.forwardLocally = forwardLocally;
            _resultValue.id = id;
            _resultValue.lan1 = lan1;
            _resultValue.lan2 = lan2;
            _resultValue.name = name;
            _resultValue.protocols = protocols;
            _resultValue.siteId = siteId;
            _resultValue.unidirectional = unidirectional;
            return _resultValue;
        }
    }
}
