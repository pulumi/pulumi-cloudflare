// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class GetR2BucketEventNotificationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetR2BucketEventNotificationArgs Empty = new GetR2BucketEventNotificationArgs();

    /**
     * Account ID.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account ID.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Name of the bucket.
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Name of the bucket.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    /**
     * Queue ID.
     * 
     */
    @Import(name="queueId", required=true)
    private Output<String> queueId;

    /**
     * @return Queue ID.
     * 
     */
    public Output<String> queueId() {
        return this.queueId;
    }

    private GetR2BucketEventNotificationArgs() {}

    private GetR2BucketEventNotificationArgs(GetR2BucketEventNotificationArgs $) {
        this.accountId = $.accountId;
        this.bucketName = $.bucketName;
        this.queueId = $.queueId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetR2BucketEventNotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetR2BucketEventNotificationArgs $;

        public Builder() {
            $ = new GetR2BucketEventNotificationArgs();
        }

        public Builder(GetR2BucketEventNotificationArgs defaults) {
            $ = new GetR2BucketEventNotificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param bucketName Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Name of the bucket.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param queueId Queue ID.
         * 
         * @return builder
         * 
         */
        public Builder queueId(Output<String> queueId) {
            $.queueId = queueId;
            return this;
        }

        /**
         * @param queueId Queue ID.
         * 
         * @return builder
         * 
         */
        public Builder queueId(String queueId) {
            return queueId(Output.of(queueId));
        }

        public GetR2BucketEventNotificationArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetR2BucketEventNotificationArgs", "accountId");
            }
            if ($.bucketName == null) {
                throw new MissingRequiredPropertyException("GetR2BucketEventNotificationArgs", "bucketName");
            }
            if ($.queueId == null) {
                throw new MissingRequiredPropertyException("GetR2BucketEventNotificationArgs", "queueId");
            }
            return $;
        }
    }

}
