// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ManagedHeadersManagedRequestHeaderArgs;
import com.pulumi.cloudflare.inputs.ManagedHeadersManagedResponseHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedHeadersState extends com.pulumi.resources.ResourceArgs {

    public static final ManagedHeadersState Empty = new ManagedHeadersState();

    /**
     * The list of Managed Request Transforms.
     * 
     */
    @Import(name="managedRequestHeaders")
    private @Nullable Output<List<ManagedHeadersManagedRequestHeaderArgs>> managedRequestHeaders;

    /**
     * @return The list of Managed Request Transforms.
     * 
     */
    public Optional<Output<List<ManagedHeadersManagedRequestHeaderArgs>>> managedRequestHeaders() {
        return Optional.ofNullable(this.managedRequestHeaders);
    }

    /**
     * The list of Managed Response Transforms.
     * 
     */
    @Import(name="managedResponseHeaders")
    private @Nullable Output<List<ManagedHeadersManagedResponseHeaderArgs>> managedResponseHeaders;

    /**
     * @return The list of Managed Response Transforms.
     * 
     */
    public Optional<Output<List<ManagedHeadersManagedResponseHeaderArgs>>> managedResponseHeaders() {
        return Optional.ofNullable(this.managedResponseHeaders);
    }

    /**
     * The unique ID of the zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The unique ID of the zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ManagedHeadersState() {}

    private ManagedHeadersState(ManagedHeadersState $) {
        this.managedRequestHeaders = $.managedRequestHeaders;
        this.managedResponseHeaders = $.managedResponseHeaders;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedHeadersState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedHeadersState $;

        public Builder() {
            $ = new ManagedHeadersState();
        }

        public Builder(ManagedHeadersState defaults) {
            $ = new ManagedHeadersState(Objects.requireNonNull(defaults));
        }

        /**
         * @param managedRequestHeaders The list of Managed Request Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedRequestHeaders(@Nullable Output<List<ManagedHeadersManagedRequestHeaderArgs>> managedRequestHeaders) {
            $.managedRequestHeaders = managedRequestHeaders;
            return this;
        }

        /**
         * @param managedRequestHeaders The list of Managed Request Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedRequestHeaders(List<ManagedHeadersManagedRequestHeaderArgs> managedRequestHeaders) {
            return managedRequestHeaders(Output.of(managedRequestHeaders));
        }

        /**
         * @param managedRequestHeaders The list of Managed Request Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedRequestHeaders(ManagedHeadersManagedRequestHeaderArgs... managedRequestHeaders) {
            return managedRequestHeaders(List.of(managedRequestHeaders));
        }

        /**
         * @param managedResponseHeaders The list of Managed Response Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedResponseHeaders(@Nullable Output<List<ManagedHeadersManagedResponseHeaderArgs>> managedResponseHeaders) {
            $.managedResponseHeaders = managedResponseHeaders;
            return this;
        }

        /**
         * @param managedResponseHeaders The list of Managed Response Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedResponseHeaders(List<ManagedHeadersManagedResponseHeaderArgs> managedResponseHeaders) {
            return managedResponseHeaders(Output.of(managedResponseHeaders));
        }

        /**
         * @param managedResponseHeaders The list of Managed Response Transforms.
         * 
         * @return builder
         * 
         */
        public Builder managedResponseHeaders(ManagedHeadersManagedResponseHeaderArgs... managedResponseHeaders) {
            return managedResponseHeaders(List.of(managedResponseHeaders));
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ManagedHeadersState build() {
            return $;
        }
    }

}
