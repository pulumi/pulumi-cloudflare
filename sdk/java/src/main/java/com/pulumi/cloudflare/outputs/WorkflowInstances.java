// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkflowInstances {
    private @Nullable Double complete;
    private @Nullable Double errored;
    private @Nullable Double paused;
    private @Nullable Double queued;
    private @Nullable Double running;
    private @Nullable Double terminated;
    private @Nullable Double waiting;
    private @Nullable Double waitingForPause;

    private WorkflowInstances() {}
    public Optional<Double> complete() {
        return Optional.ofNullable(this.complete);
    }
    public Optional<Double> errored() {
        return Optional.ofNullable(this.errored);
    }
    public Optional<Double> paused() {
        return Optional.ofNullable(this.paused);
    }
    public Optional<Double> queued() {
        return Optional.ofNullable(this.queued);
    }
    public Optional<Double> running() {
        return Optional.ofNullable(this.running);
    }
    public Optional<Double> terminated() {
        return Optional.ofNullable(this.terminated);
    }
    public Optional<Double> waiting() {
        return Optional.ofNullable(this.waiting);
    }
    public Optional<Double> waitingForPause() {
        return Optional.ofNullable(this.waitingForPause);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkflowInstances defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double complete;
        private @Nullable Double errored;
        private @Nullable Double paused;
        private @Nullable Double queued;
        private @Nullable Double running;
        private @Nullable Double terminated;
        private @Nullable Double waiting;
        private @Nullable Double waitingForPause;
        public Builder() {}
        public Builder(WorkflowInstances defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complete = defaults.complete;
    	      this.errored = defaults.errored;
    	      this.paused = defaults.paused;
    	      this.queued = defaults.queued;
    	      this.running = defaults.running;
    	      this.terminated = defaults.terminated;
    	      this.waiting = defaults.waiting;
    	      this.waitingForPause = defaults.waitingForPause;
        }

        @CustomType.Setter
        public Builder complete(@Nullable Double complete) {

            this.complete = complete;
            return this;
        }
        @CustomType.Setter
        public Builder errored(@Nullable Double errored) {

            this.errored = errored;
            return this;
        }
        @CustomType.Setter
        public Builder paused(@Nullable Double paused) {

            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder queued(@Nullable Double queued) {

            this.queued = queued;
            return this;
        }
        @CustomType.Setter
        public Builder running(@Nullable Double running) {

            this.running = running;
            return this;
        }
        @CustomType.Setter
        public Builder terminated(@Nullable Double terminated) {

            this.terminated = terminated;
            return this;
        }
        @CustomType.Setter
        public Builder waiting(@Nullable Double waiting) {

            this.waiting = waiting;
            return this;
        }
        @CustomType.Setter
        public Builder waitingForPause(@Nullable Double waitingForPause) {

            this.waitingForPause = waitingForPause;
            return this;
        }
        public WorkflowInstances build() {
            final var _resultValue = new WorkflowInstances();
            _resultValue.complete = complete;
            _resultValue.errored = errored;
            _resultValue.paused = paused;
            _resultValue.queued = queued;
            _resultValue.running = running;
            _resultValue.terminated = terminated;
            _resultValue.waiting = waiting;
            _resultValue.waitingForPause = waitingForPause;
            return _resultValue;
        }
    }
}
