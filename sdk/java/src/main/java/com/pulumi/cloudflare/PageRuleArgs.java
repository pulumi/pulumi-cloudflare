// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.PageRuleActionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PageRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PageRuleArgs Empty = new PageRuleArgs();

    @Import(name="actions", required=true)
    private Output<PageRuleActionsArgs> actions;

    public Output<PageRuleActionsArgs> actions() {
        return this.actions;
    }

    /**
     * The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The status of the Page Rule.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Page Rule.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="target", required=true)
    private Output<String> target;

    public Output<String> target() {
        return this.target;
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private PageRuleArgs() {}

    private PageRuleArgs(PageRuleArgs $) {
        this.actions = $.actions;
        this.priority = $.priority;
        this.status = $.status;
        this.target = $.target;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PageRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PageRuleArgs $;

        public Builder() {
            $ = new PageRuleArgs();
        }

        public Builder(PageRuleArgs defaults) {
            $ = new PageRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(Output<PageRuleActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(PageRuleActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param priority The priority of the rule, used to define which Page Rule is processed
         * over another. A higher number indicates a higher priority. For example,
         * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
         * specific Page Rule to take precedence (rule B: `/images/special/*`),
         * specify a higher priority for rule B so it overrides rule A.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the rule, used to define which Page Rule is processed
         * over another. A higher number indicates a higher priority. For example,
         * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
         * specific Page Rule to take precedence (rule B: `/images/special/*`),
         * specify a higher priority for rule B so it overrides rule A.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status The status of the Page Rule.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Page Rule.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public PageRuleArgs build() {
            if ($.actions == null) {
                throw new MissingRequiredPropertyException("PageRuleArgs", "actions");
            }
            if ($.target == null) {
                throw new MissingRequiredPropertyException("PageRuleArgs", "target");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("PageRuleArgs", "zoneId");
            }
            return $;
        }
    }

}
