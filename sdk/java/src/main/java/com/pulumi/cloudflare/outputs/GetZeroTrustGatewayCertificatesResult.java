// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustGatewayCertificatesResult {
    /**
     * @return The read only deployment status of the certificate on Cloudflare&#39;s edge. Certificates in the &#39;available&#39; (previously called &#39;active&#39;) state may be used for Gateway TLS interception.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    private String bindingStatus;
    /**
     * @return The CA certificate(read only).
     * 
     */
    private String certificate;
    private String createdAt;
    private String expiresOn;
    /**
     * @return The SHA256 fingerprint of the certificate(read only).
     * 
     */
    private String fingerprint;
    /**
     * @return Certificate UUID tag.
     * 
     */
    private String id;
    /**
     * @return Read-only field that shows whether Gateway TLS interception is using this certificate. This value cannot be set directly. To configure the certificate for interception, use the Gateway configuration setting named certificate.
     * 
     */
    private Boolean inUse;
    /**
     * @return The organization that issued the certificate(read only).
     * 
     */
    private String issuerOrg;
    /**
     * @return The entire issuer field of the certificate(read only).
     * 
     */
    private String issuerRaw;
    /**
     * @return The type of certificate, either BYO-PKI (custom) or Gateway-managed(read only).
     * Available values: &#34;custom&#34;, &#34;gateway_managed&#34;.
     * 
     */
    private String type;
    private String updatedAt;
    private String uploadedOn;

    private GetZeroTrustGatewayCertificatesResult() {}
    /**
     * @return The read only deployment status of the certificate on Cloudflare&#39;s edge. Certificates in the &#39;available&#39; (previously called &#39;active&#39;) state may be used for Gateway TLS interception.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    public String bindingStatus() {
        return this.bindingStatus;
    }
    /**
     * @return The CA certificate(read only).
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return The SHA256 fingerprint of the certificate(read only).
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Certificate UUID tag.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Read-only field that shows whether Gateway TLS interception is using this certificate. This value cannot be set directly. To configure the certificate for interception, use the Gateway configuration setting named certificate.
     * 
     */
    public Boolean inUse() {
        return this.inUse;
    }
    /**
     * @return The organization that issued the certificate(read only).
     * 
     */
    public String issuerOrg() {
        return this.issuerOrg;
    }
    /**
     * @return The entire issuer field of the certificate(read only).
     * 
     */
    public String issuerRaw() {
        return this.issuerRaw;
    }
    /**
     * @return The type of certificate, either BYO-PKI (custom) or Gateway-managed(read only).
     * Available values: &#34;custom&#34;, &#34;gateway_managed&#34;.
     * 
     */
    public String type() {
        return this.type;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    public String uploadedOn() {
        return this.uploadedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustGatewayCertificatesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bindingStatus;
        private String certificate;
        private String createdAt;
        private String expiresOn;
        private String fingerprint;
        private String id;
        private Boolean inUse;
        private String issuerOrg;
        private String issuerRaw;
        private String type;
        private String updatedAt;
        private String uploadedOn;
        public Builder() {}
        public Builder(GetZeroTrustGatewayCertificatesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bindingStatus = defaults.bindingStatus;
    	      this.certificate = defaults.certificate;
    	      this.createdAt = defaults.createdAt;
    	      this.expiresOn = defaults.expiresOn;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.inUse = defaults.inUse;
    	      this.issuerOrg = defaults.issuerOrg;
    	      this.issuerRaw = defaults.issuerRaw;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
    	      this.uploadedOn = defaults.uploadedOn;
        }

        @CustomType.Setter
        public Builder bindingStatus(String bindingStatus) {
            if (bindingStatus == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "bindingStatus");
            }
            this.bindingStatus = bindingStatus;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(String expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inUse(Boolean inUse) {
            if (inUse == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "inUse");
            }
            this.inUse = inUse;
            return this;
        }
        @CustomType.Setter
        public Builder issuerOrg(String issuerOrg) {
            if (issuerOrg == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "issuerOrg");
            }
            this.issuerOrg = issuerOrg;
            return this;
        }
        @CustomType.Setter
        public Builder issuerRaw(String issuerRaw) {
            if (issuerRaw == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "issuerRaw");
            }
            this.issuerRaw = issuerRaw;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder uploadedOn(String uploadedOn) {
            if (uploadedOn == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificatesResult", "uploadedOn");
            }
            this.uploadedOn = uploadedOn;
            return this;
        }
        public GetZeroTrustGatewayCertificatesResult build() {
            final var _resultValue = new GetZeroTrustGatewayCertificatesResult();
            _resultValue.bindingStatus = bindingStatus;
            _resultValue.certificate = certificate;
            _resultValue.createdAt = createdAt;
            _resultValue.expiresOn = expiresOn;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.inUse = inUse;
            _resultValue.issuerOrg = issuerOrg;
            _resultValue.issuerRaw = issuerRaw;
            _resultValue.type = type;
            _resultValue.updatedAt = updatedAt;
            _resultValue.uploadedOn = uploadedOn;
            return _resultValue;
        }
    }
}
