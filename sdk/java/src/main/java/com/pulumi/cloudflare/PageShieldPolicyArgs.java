// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class PageShieldPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PageShieldPolicyArgs Empty = new PageShieldPolicyArgs();

    /**
     * The action to take if the expression matches
     * Available values: &#34;allow&#34;, &#34;log&#34;.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to take if the expression matches
     * Available values: &#34;allow&#34;, &#34;log&#34;.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * A description for the policy
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return A description for the policy
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Whether the policy is enabled
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the policy is enabled
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    /**
     * The policy which will be applied
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The policy which will be applied
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private PageShieldPolicyArgs() {}

    private PageShieldPolicyArgs(PageShieldPolicyArgs $) {
        this.action = $.action;
        this.description = $.description;
        this.enabled = $.enabled;
        this.expression = $.expression;
        this.value = $.value;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PageShieldPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PageShieldPolicyArgs $;

        public Builder() {
            $ = new PageShieldPolicyArgs();
        }

        public Builder(PageShieldPolicyArgs defaults) {
            $ = new PageShieldPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take if the expression matches
         * Available values: &#34;allow&#34;, &#34;log&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take if the expression matches
         * Available values: &#34;allow&#34;, &#34;log&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description A description for the policy
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the policy
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the policy is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the policy is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expression The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The expression which must match for the policy to be applied, using the Cloudflare Firewall rule expression syntax
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param value The policy which will be applied
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The policy which will be applied
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public PageShieldPolicyArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "action");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "description");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "enabled");
            }
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "expression");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "value");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("PageShieldPolicyArgs", "zoneId");
            }
            return $;
        }
    }

}
