// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCustomHostnamesResultSslSettings {
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    private List<String> ciphers;
    /**
     * @return Whether or not Early Hints is enabled.
     * 
     */
    private String earlyHints;
    /**
     * @return Whether or not HTTP2 is enabled.
     * 
     */
    private String http2;
    /**
     * @return The minimum TLS version supported.
     * 
     */
    private String minTlsVersion;
    /**
     * @return Whether or not TLS 1.3 is enabled.
     * 
     */
    private String tls13;

    private GetCustomHostnamesResultSslSettings() {}
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    public List<String> ciphers() {
        return this.ciphers;
    }
    /**
     * @return Whether or not Early Hints is enabled.
     * 
     */
    public String earlyHints() {
        return this.earlyHints;
    }
    /**
     * @return Whether or not HTTP2 is enabled.
     * 
     */
    public String http2() {
        return this.http2;
    }
    /**
     * @return The minimum TLS version supported.
     * 
     */
    public String minTlsVersion() {
        return this.minTlsVersion;
    }
    /**
     * @return Whether or not TLS 1.3 is enabled.
     * 
     */
    public String tls13() {
        return this.tls13;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomHostnamesResultSslSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> ciphers;
        private String earlyHints;
        private String http2;
        private String minTlsVersion;
        private String tls13;
        public Builder() {}
        public Builder(GetCustomHostnamesResultSslSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ciphers = defaults.ciphers;
    	      this.earlyHints = defaults.earlyHints;
    	      this.http2 = defaults.http2;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.tls13 = defaults.tls13;
        }

        @CustomType.Setter
        public Builder ciphers(List<String> ciphers) {
            if (ciphers == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnamesResultSslSettings", "ciphers");
            }
            this.ciphers = ciphers;
            return this;
        }
        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }
        @CustomType.Setter
        public Builder earlyHints(String earlyHints) {
            if (earlyHints == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnamesResultSslSettings", "earlyHints");
            }
            this.earlyHints = earlyHints;
            return this;
        }
        @CustomType.Setter
        public Builder http2(String http2) {
            if (http2 == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnamesResultSslSettings", "http2");
            }
            this.http2 = http2;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(String minTlsVersion) {
            if (minTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnamesResultSslSettings", "minTlsVersion");
            }
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tls13(String tls13) {
            if (tls13 == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnamesResultSslSettings", "tls13");
            }
            this.tls13 = tls13;
            return this;
        }
        public GetCustomHostnamesResultSslSettings build() {
            final var _resultValue = new GetCustomHostnamesResultSslSettings();
            _resultValue.ciphers = ciphers;
            _resultValue.earlyHints = earlyHints;
            _resultValue.http2 = http2;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.tls13 = tls13;
            return _resultValue;
        }
    }
}
