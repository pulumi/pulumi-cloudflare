// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLanNat;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLanRoutedSubnet;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLanStaticAddressing;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
<<<<<<< HEAD
=======
import java.util.Optional;
import javax.annotation.Nullable;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580

@CustomType
public final class GetMagicTransitSiteLanResult {
    /**
     * @return Identifier
     * 
     */
    private String accountId;
    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    private Boolean haLink;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return Identifier
     * 
     */
<<<<<<< HEAD
    private String lanId;
=======
    private @Nullable String lanId;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    private String name;
    private GetMagicTransitSiteLanNat nat;
    private Integer physport;
    private List<GetMagicTransitSiteLanRoutedSubnet> routedSubnets;
    /**
     * @return Identifier
     * 
     */
    private String siteId;
    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    private GetMagicTransitSiteLanStaticAddressing staticAddressing;
    /**
     * @return VLAN port number.
     * 
     */
    private Integer vlanTag;

    private GetMagicTransitSiteLanResult() {}
    /**
     * @return Identifier
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    public Boolean haLink() {
        return this.haLink;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifier
     * 
     */
<<<<<<< HEAD
    public String lanId() {
        return this.lanId;
=======
    public Optional<String> lanId() {
        return Optional.ofNullable(this.lanId);
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    }
    public String name() {
        return this.name;
    }
    public GetMagicTransitSiteLanNat nat() {
        return this.nat;
    }
    public Integer physport() {
        return this.physport;
    }
    public List<GetMagicTransitSiteLanRoutedSubnet> routedSubnets() {
        return this.routedSubnets;
    }
    /**
     * @return Identifier
     * 
     */
    public String siteId() {
        return this.siteId;
    }
    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    public GetMagicTransitSiteLanStaticAddressing staticAddressing() {
        return this.staticAddressing;
    }
    /**
     * @return VLAN port number.
     * 
     */
    public Integer vlanTag() {
        return this.vlanTag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteLanResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean haLink;
        private String id;
<<<<<<< HEAD
        private String lanId;
=======
        private @Nullable String lanId;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        private String name;
        private GetMagicTransitSiteLanNat nat;
        private Integer physport;
        private List<GetMagicTransitSiteLanRoutedSubnet> routedSubnets;
        private String siteId;
        private GetMagicTransitSiteLanStaticAddressing staticAddressing;
        private Integer vlanTag;
        public Builder() {}
        public Builder(GetMagicTransitSiteLanResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.haLink = defaults.haLink;
    	      this.id = defaults.id;
    	      this.lanId = defaults.lanId;
    	      this.name = defaults.name;
    	      this.nat = defaults.nat;
    	      this.physport = defaults.physport;
    	      this.routedSubnets = defaults.routedSubnets;
    	      this.siteId = defaults.siteId;
    	      this.staticAddressing = defaults.staticAddressing;
    	      this.vlanTag = defaults.vlanTag;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder haLink(Boolean haLink) {
            if (haLink == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "haLink");
            }
            this.haLink = haLink;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
<<<<<<< HEAD
        public Builder lanId(String lanId) {
            if (lanId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "lanId");
            }
=======
        public Builder lanId(@Nullable String lanId) {

>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
            this.lanId = lanId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat(GetMagicTransitSiteLanNat nat) {
            if (nat == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "nat");
            }
            this.nat = nat;
            return this;
        }
        @CustomType.Setter
        public Builder physport(Integer physport) {
            if (physport == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "physport");
            }
            this.physport = physport;
            return this;
        }
        @CustomType.Setter
        public Builder routedSubnets(List<GetMagicTransitSiteLanRoutedSubnet> routedSubnets) {
            if (routedSubnets == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "routedSubnets");
            }
            this.routedSubnets = routedSubnets;
            return this;
        }
        public Builder routedSubnets(GetMagicTransitSiteLanRoutedSubnet... routedSubnets) {
            return routedSubnets(List.of(routedSubnets));
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder staticAddressing(GetMagicTransitSiteLanStaticAddressing staticAddressing) {
            if (staticAddressing == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "staticAddressing");
            }
            this.staticAddressing = staticAddressing;
            return this;
        }
        @CustomType.Setter
        public Builder vlanTag(Integer vlanTag) {
            if (vlanTag == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanResult", "vlanTag");
            }
            this.vlanTag = vlanTag;
            return this;
        }
        public GetMagicTransitSiteLanResult build() {
            final var _resultValue = new GetMagicTransitSiteLanResult();
            _resultValue.accountId = accountId;
            _resultValue.haLink = haLink;
            _resultValue.id = id;
            _resultValue.lanId = lanId;
            _resultValue.name = name;
            _resultValue.nat = nat;
            _resultValue.physport = physport;
            _resultValue.routedSubnets = routedSubnets;
            _resultValue.siteId = siteId;
            _resultValue.staticAddressing = staticAddressing;
            _resultValue.vlanTag = vlanTag;
            return _resultValue;
        }
    }
}
