// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemaValidationSchemasFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemaValidationSchemasFilter Empty = new GetSchemaValidationSchemasFilter();

    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    @Import(name="omitSource", required=true)
    private Boolean omitSource;

    /**
     * @return Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    public Boolean omitSource() {
        return this.omitSource;
    }

    /**
     * Filter for enabled schemas
     * 
     */
    @Import(name="validationEnabled")
    private @Nullable Boolean validationEnabled;

    /**
     * @return Filter for enabled schemas
     * 
     */
    public Optional<Boolean> validationEnabled() {
        return Optional.ofNullable(this.validationEnabled);
    }

    private GetSchemaValidationSchemasFilter() {}

    private GetSchemaValidationSchemasFilter(GetSchemaValidationSchemasFilter $) {
        this.omitSource = $.omitSource;
        this.validationEnabled = $.validationEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemaValidationSchemasFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemaValidationSchemasFilter $;

        public Builder() {
            $ = new GetSchemaValidationSchemasFilter();
        }

        public Builder(GetSchemaValidationSchemasFilter defaults) {
            $ = new GetSchemaValidationSchemasFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param omitSource Omit the source-files of schemas and only retrieve their meta-data.
         * 
         * @return builder
         * 
         */
        public Builder omitSource(Boolean omitSource) {
            $.omitSource = omitSource;
            return this;
        }

        /**
         * @param validationEnabled Filter for enabled schemas
         * 
         * @return builder
         * 
         */
        public Builder validationEnabled(@Nullable Boolean validationEnabled) {
            $.validationEnabled = validationEnabled;
            return this;
        }

        public GetSchemaValidationSchemasFilter build() {
            if ($.omitSource == null) {
                throw new MissingRequiredPropertyException("GetSchemaValidationSchemasFilter", "omitSource");
            }
            return $;
        }
    }

}
