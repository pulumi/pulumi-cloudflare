// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsBisoAdminControls;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsCheckSession;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsL4override;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TeamsRuleRuleSettings {
    /**
     * @return Add custom headers to allowed requests in the form of key-value pairs.
     * 
     */
    private @Nullable Map<String,String> addHeaders;
    /**
     * @return Configure how browser isolation behaves (refer to the nested schema).
     * 
     */
    private @Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls;
    /**
     * @return Indicator of block page enablement.
     * 
     */
    private @Nullable Boolean blockPageEnabled;
    /**
     * @return The displayed reason for a user being blocked.
     * 
     */
    private @Nullable String blockPageReason;
    /**
     * @return Configure how session check behaves (refer to the nested schema).
     * 
     */
    private @Nullable TeamsRuleRuleSettingsCheckSession checkSession;
    /**
     * @return Disable DNSSEC validation (must be Allow rule)
     * 
     */
    private @Nullable Boolean insecureDisableDnssecValidation;
    /**
     * @return Settings to forward layer 4 traffic (refer to the nested schema).
     * 
     */
    private @Nullable TeamsRuleRuleSettingsL4override l4override;
    /**
     * @return The host to override matching DNS queries with.
     * 
     */
    private @Nullable String overrideHost;
    /**
     * @return The IPs to override matching DNS queries with.
     * 
     */
    private @Nullable List<String> overrideIps;

    private TeamsRuleRuleSettings() {}
    /**
     * @return Add custom headers to allowed requests in the form of key-value pairs.
     * 
     */
    public Map<String,String> addHeaders() {
        return this.addHeaders == null ? Map.of() : this.addHeaders;
    }
    /**
     * @return Configure how browser isolation behaves (refer to the nested schema).
     * 
     */
    public Optional<TeamsRuleRuleSettingsBisoAdminControls> bisoAdminControls() {
        return Optional.ofNullable(this.bisoAdminControls);
    }
    /**
     * @return Indicator of block page enablement.
     * 
     */
    public Optional<Boolean> blockPageEnabled() {
        return Optional.ofNullable(this.blockPageEnabled);
    }
    /**
     * @return The displayed reason for a user being blocked.
     * 
     */
    public Optional<String> blockPageReason() {
        return Optional.ofNullable(this.blockPageReason);
    }
    /**
     * @return Configure how session check behaves (refer to the nested schema).
     * 
     */
    public Optional<TeamsRuleRuleSettingsCheckSession> checkSession() {
        return Optional.ofNullable(this.checkSession);
    }
    /**
     * @return Disable DNSSEC validation (must be Allow rule)
     * 
     */
    public Optional<Boolean> insecureDisableDnssecValidation() {
        return Optional.ofNullable(this.insecureDisableDnssecValidation);
    }
    /**
     * @return Settings to forward layer 4 traffic (refer to the nested schema).
     * 
     */
    public Optional<TeamsRuleRuleSettingsL4override> l4override() {
        return Optional.ofNullable(this.l4override);
    }
    /**
     * @return The host to override matching DNS queries with.
     * 
     */
    public Optional<String> overrideHost() {
        return Optional.ofNullable(this.overrideHost);
    }
    /**
     * @return The IPs to override matching DNS queries with.
     * 
     */
    public List<String> overrideIps() {
        return this.overrideIps == null ? List.of() : this.overrideIps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TeamsRuleRuleSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,String> addHeaders;
        private @Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls;
        private @Nullable Boolean blockPageEnabled;
        private @Nullable String blockPageReason;
        private @Nullable TeamsRuleRuleSettingsCheckSession checkSession;
        private @Nullable Boolean insecureDisableDnssecValidation;
        private @Nullable TeamsRuleRuleSettingsL4override l4override;
        private @Nullable String overrideHost;
        private @Nullable List<String> overrideIps;
        public Builder() {}
        public Builder(TeamsRuleRuleSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addHeaders = defaults.addHeaders;
    	      this.bisoAdminControls = defaults.bisoAdminControls;
    	      this.blockPageEnabled = defaults.blockPageEnabled;
    	      this.blockPageReason = defaults.blockPageReason;
    	      this.checkSession = defaults.checkSession;
    	      this.insecureDisableDnssecValidation = defaults.insecureDisableDnssecValidation;
    	      this.l4override = defaults.l4override;
    	      this.overrideHost = defaults.overrideHost;
    	      this.overrideIps = defaults.overrideIps;
        }

        @CustomType.Setter
        public Builder addHeaders(@Nullable Map<String,String> addHeaders) {
            this.addHeaders = addHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder bisoAdminControls(@Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls) {
            this.bisoAdminControls = bisoAdminControls;
            return this;
        }
        @CustomType.Setter
        public Builder blockPageEnabled(@Nullable Boolean blockPageEnabled) {
            this.blockPageEnabled = blockPageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder blockPageReason(@Nullable String blockPageReason) {
            this.blockPageReason = blockPageReason;
            return this;
        }
        @CustomType.Setter
        public Builder checkSession(@Nullable TeamsRuleRuleSettingsCheckSession checkSession) {
            this.checkSession = checkSession;
            return this;
        }
        @CustomType.Setter
        public Builder insecureDisableDnssecValidation(@Nullable Boolean insecureDisableDnssecValidation) {
            this.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            return this;
        }
        @CustomType.Setter
        public Builder l4override(@Nullable TeamsRuleRuleSettingsL4override l4override) {
            this.l4override = l4override;
            return this;
        }
        @CustomType.Setter
        public Builder overrideHost(@Nullable String overrideHost) {
            this.overrideHost = overrideHost;
            return this;
        }
        @CustomType.Setter
        public Builder overrideIps(@Nullable List<String> overrideIps) {
            this.overrideIps = overrideIps;
            return this;
        }
        public Builder overrideIps(String... overrideIps) {
            return overrideIps(List.of(overrideIps));
        }
        public TeamsRuleRuleSettings build() {
            final var o = new TeamsRuleRuleSettings();
            o.addHeaders = addHeaders;
            o.bisoAdminControls = bisoAdminControls;
            o.blockPageEnabled = blockPageEnabled;
            o.blockPageReason = blockPageReason;
            o.checkSession = checkSession;
            o.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            o.l4override = l4override;
            o.overrideHost = overrideHost;
            o.overrideIps = overrideIps;
            return o;
        }
    }
}
