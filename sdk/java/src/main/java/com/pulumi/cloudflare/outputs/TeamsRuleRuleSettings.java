// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsAuditSsh;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsBisoAdminControls;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsBlockPage;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsCheckSession;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsDnsResolvers;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsEgress;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsL4override;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsNotificationSettings;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsPayloadLog;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsQuarantine;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsRedirect;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsResolveDnsInternally;
import com.pulumi.cloudflare.outputs.TeamsRuleRuleSettingsUntrustedCert;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TeamsRuleRuleSettings {
    /**
     * @return Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
     * 
     */
    private @Nullable Map<String,String> addHeaders;
    /**
     * @return Set by parent MSP accounts to enable their children to bypass this rule.
     * 
     */
    private @Nullable Boolean allowChildBypass;
    /**
     * @return Settings for the Audit SSH action.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsAuditSsh auditSsh;
    /**
     * @return Configure how browser isolation behaves.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls;
    /**
     * @return Custom block page settings. If missing/null, blocking will use the the account settings.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsBlockPage blockPage;
    /**
     * @return Enable the custom block page.
     * 
     */
    private @Nullable Boolean blockPageEnabled;
    /**
     * @return The text describing why this block occurred, displayed on the custom block page (if enabled).
     * 
     */
    private @Nullable String blockReason;
    /**
     * @return Set by children MSP accounts to bypass their parent&#39;s rules.
     * 
     */
    private @Nullable Boolean bypassParentRule;
    /**
     * @return Configure how session check behaves.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsCheckSession checkSession;
    /**
     * @return Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; are set. DNS queries will route to the address closest to their origin. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsDnsResolvers dnsResolvers;
    /**
     * @return Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsEgress egress;
    /**
     * @return Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
     * 
     */
    private @Nullable Boolean ignoreCnameCategoryMatches;
    /**
     * @return INSECURE - disable DNSSEC validation (for Allow actions).
     * 
     */
    private @Nullable Boolean insecureDisableDnssecValidation;
    /**
     * @return Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
     * 
     */
    private @Nullable Boolean ipCategories;
    /**
     * @return Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
     * 
     */
    private @Nullable Boolean ipIndicatorFeeds;
    /**
     * @return Send matching traffic to the supplied destination IP address and port.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsL4override l4override;
    /**
     * @return Configure a notification to display on the user&#39;s device when this rule is matched.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsNotificationSettings notificationSettings;
    /**
     * @return Override matching DNS queries with a hostname.
     * 
     */
    private @Nullable String overrideHost;
    /**
     * @return Override matching DNS queries with an IP or set of IPs.
     * 
     */
    private @Nullable List<String> overrideIps;
    /**
     * @return Configure DLP payload logging.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsPayloadLog payloadLog;
    /**
     * @return Settings that apply to quarantine rules
     * 
     */
    private @Nullable TeamsRuleRuleSettingsQuarantine quarantine;
    /**
     * @return Settings that apply to redirect rules
     * 
     */
    private @Nullable TeamsRuleRuleSettingsRedirect redirect;
    /**
     * @return Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Cannot be set when &#39;dns*resolvers&#39; are specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsResolveDnsInternally resolveDnsInternally;
    /**
     * @return Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when &#39;dns*resolvers&#39; are specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    private @Nullable Boolean resolveDnsThroughCloudflare;
    /**
     * @return Configure behavior when an upstream cert is invalid or an SSL error occurs.
     * 
     */
    private @Nullable TeamsRuleRuleSettingsUntrustedCert untrustedCert;

    private TeamsRuleRuleSettings() {}
    /**
     * @return Add custom headers to allowed requests, in the form of key-value pairs. Keys are header names, pointing to an array with its header value(s).
     * 
     */
    public Map<String,String> addHeaders() {
        return this.addHeaders == null ? Map.of() : this.addHeaders;
    }
    /**
     * @return Set by parent MSP accounts to enable their children to bypass this rule.
     * 
     */
    public Optional<Boolean> allowChildBypass() {
        return Optional.ofNullable(this.allowChildBypass);
    }
    /**
     * @return Settings for the Audit SSH action.
     * 
     */
    public Optional<TeamsRuleRuleSettingsAuditSsh> auditSsh() {
        return Optional.ofNullable(this.auditSsh);
    }
    /**
     * @return Configure how browser isolation behaves.
     * 
     */
    public Optional<TeamsRuleRuleSettingsBisoAdminControls> bisoAdminControls() {
        return Optional.ofNullable(this.bisoAdminControls);
    }
    /**
     * @return Custom block page settings. If missing/null, blocking will use the the account settings.
     * 
     */
    public Optional<TeamsRuleRuleSettingsBlockPage> blockPage() {
        return Optional.ofNullable(this.blockPage);
    }
    /**
     * @return Enable the custom block page.
     * 
     */
    public Optional<Boolean> blockPageEnabled() {
        return Optional.ofNullable(this.blockPageEnabled);
    }
    /**
     * @return The text describing why this block occurred, displayed on the custom block page (if enabled).
     * 
     */
    public Optional<String> blockReason() {
        return Optional.ofNullable(this.blockReason);
    }
    /**
     * @return Set by children MSP accounts to bypass their parent&#39;s rules.
     * 
     */
    public Optional<Boolean> bypassParentRule() {
        return Optional.ofNullable(this.bypassParentRule);
    }
    /**
     * @return Configure how session check behaves.
     * 
     */
    public Optional<TeamsRuleRuleSettingsCheckSession> checkSession() {
        return Optional.ofNullable(this.checkSession);
    }
    /**
     * @return Add your own custom resolvers to route queries that match the resolver policy. Cannot be used when &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; are set. DNS queries will route to the address closest to their origin. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    public Optional<TeamsRuleRuleSettingsDnsResolvers> dnsResolvers() {
        return Optional.ofNullable(this.dnsResolvers);
    }
    /**
     * @return Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs.
     * 
     */
    public Optional<TeamsRuleRuleSettingsEgress> egress() {
        return Optional.ofNullable(this.egress);
    }
    /**
     * @return Set to true, to ignore the category matches at CNAME domains in a response. If unchecked, the categories in this rule will be checked against all the CNAME domain categories in a response.
     * 
     */
    public Optional<Boolean> ignoreCnameCategoryMatches() {
        return Optional.ofNullable(this.ignoreCnameCategoryMatches);
    }
    /**
     * @return INSECURE - disable DNSSEC validation (for Allow actions).
     * 
     */
    public Optional<Boolean> insecureDisableDnssecValidation() {
        return Optional.ofNullable(this.insecureDisableDnssecValidation);
    }
    /**
     * @return Set to true to enable IPs in DNS resolver category blocks. By default categories only block based on domain names.
     * 
     */
    public Optional<Boolean> ipCategories() {
        return Optional.ofNullable(this.ipCategories);
    }
    /**
     * @return Set to true to include IPs in DNS resolver indicator feed blocks. By default indicator feeds only block based on domain names.
     * 
     */
    public Optional<Boolean> ipIndicatorFeeds() {
        return Optional.ofNullable(this.ipIndicatorFeeds);
    }
    /**
     * @return Send matching traffic to the supplied destination IP address and port.
     * 
     */
    public Optional<TeamsRuleRuleSettingsL4override> l4override() {
        return Optional.ofNullable(this.l4override);
    }
    /**
     * @return Configure a notification to display on the user&#39;s device when this rule is matched.
     * 
     */
    public Optional<TeamsRuleRuleSettingsNotificationSettings> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }
    /**
     * @return Override matching DNS queries with a hostname.
     * 
     */
    public Optional<String> overrideHost() {
        return Optional.ofNullable(this.overrideHost);
    }
    /**
     * @return Override matching DNS queries with an IP or set of IPs.
     * 
     */
    public List<String> overrideIps() {
        return this.overrideIps == null ? List.of() : this.overrideIps;
    }
    /**
     * @return Configure DLP payload logging.
     * 
     */
    public Optional<TeamsRuleRuleSettingsPayloadLog> payloadLog() {
        return Optional.ofNullable(this.payloadLog);
    }
    /**
     * @return Settings that apply to quarantine rules
     * 
     */
    public Optional<TeamsRuleRuleSettingsQuarantine> quarantine() {
        return Optional.ofNullable(this.quarantine);
    }
    /**
     * @return Settings that apply to redirect rules
     * 
     */
    public Optional<TeamsRuleRuleSettingsRedirect> redirect() {
        return Optional.ofNullable(this.redirect);
    }
    /**
     * @return Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Cannot be set when &#39;dns*resolvers&#39; are specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    public Optional<TeamsRuleRuleSettingsResolveDnsInternally> resolveDnsInternally() {
        return Optional.ofNullable(this.resolveDnsInternally);
    }
    /**
     * @return Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot be set when &#39;dns*resolvers&#39; are specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action is set to &#39;resolve&#39;.
     * 
     */
    public Optional<Boolean> resolveDnsThroughCloudflare() {
        return Optional.ofNullable(this.resolveDnsThroughCloudflare);
    }
    /**
     * @return Configure behavior when an upstream cert is invalid or an SSL error occurs.
     * 
     */
    public Optional<TeamsRuleRuleSettingsUntrustedCert> untrustedCert() {
        return Optional.ofNullable(this.untrustedCert);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TeamsRuleRuleSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Map<String,String> addHeaders;
        private @Nullable Boolean allowChildBypass;
        private @Nullable TeamsRuleRuleSettingsAuditSsh auditSsh;
        private @Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls;
        private @Nullable TeamsRuleRuleSettingsBlockPage blockPage;
        private @Nullable Boolean blockPageEnabled;
        private @Nullable String blockReason;
        private @Nullable Boolean bypassParentRule;
        private @Nullable TeamsRuleRuleSettingsCheckSession checkSession;
        private @Nullable TeamsRuleRuleSettingsDnsResolvers dnsResolvers;
        private @Nullable TeamsRuleRuleSettingsEgress egress;
        private @Nullable Boolean ignoreCnameCategoryMatches;
        private @Nullable Boolean insecureDisableDnssecValidation;
        private @Nullable Boolean ipCategories;
        private @Nullable Boolean ipIndicatorFeeds;
        private @Nullable TeamsRuleRuleSettingsL4override l4override;
        private @Nullable TeamsRuleRuleSettingsNotificationSettings notificationSettings;
        private @Nullable String overrideHost;
        private @Nullable List<String> overrideIps;
        private @Nullable TeamsRuleRuleSettingsPayloadLog payloadLog;
        private @Nullable TeamsRuleRuleSettingsQuarantine quarantine;
        private @Nullable TeamsRuleRuleSettingsRedirect redirect;
        private @Nullable TeamsRuleRuleSettingsResolveDnsInternally resolveDnsInternally;
        private @Nullable Boolean resolveDnsThroughCloudflare;
        private @Nullable TeamsRuleRuleSettingsUntrustedCert untrustedCert;
        public Builder() {}
        public Builder(TeamsRuleRuleSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addHeaders = defaults.addHeaders;
    	      this.allowChildBypass = defaults.allowChildBypass;
    	      this.auditSsh = defaults.auditSsh;
    	      this.bisoAdminControls = defaults.bisoAdminControls;
    	      this.blockPage = defaults.blockPage;
    	      this.blockPageEnabled = defaults.blockPageEnabled;
    	      this.blockReason = defaults.blockReason;
    	      this.bypassParentRule = defaults.bypassParentRule;
    	      this.checkSession = defaults.checkSession;
    	      this.dnsResolvers = defaults.dnsResolvers;
    	      this.egress = defaults.egress;
    	      this.ignoreCnameCategoryMatches = defaults.ignoreCnameCategoryMatches;
    	      this.insecureDisableDnssecValidation = defaults.insecureDisableDnssecValidation;
    	      this.ipCategories = defaults.ipCategories;
    	      this.ipIndicatorFeeds = defaults.ipIndicatorFeeds;
    	      this.l4override = defaults.l4override;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.overrideHost = defaults.overrideHost;
    	      this.overrideIps = defaults.overrideIps;
    	      this.payloadLog = defaults.payloadLog;
    	      this.quarantine = defaults.quarantine;
    	      this.redirect = defaults.redirect;
    	      this.resolveDnsInternally = defaults.resolveDnsInternally;
    	      this.resolveDnsThroughCloudflare = defaults.resolveDnsThroughCloudflare;
    	      this.untrustedCert = defaults.untrustedCert;
        }

        @CustomType.Setter
        public Builder addHeaders(@Nullable Map<String,String> addHeaders) {

            this.addHeaders = addHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder allowChildBypass(@Nullable Boolean allowChildBypass) {

            this.allowChildBypass = allowChildBypass;
            return this;
        }
        @CustomType.Setter
        public Builder auditSsh(@Nullable TeamsRuleRuleSettingsAuditSsh auditSsh) {

            this.auditSsh = auditSsh;
            return this;
        }
        @CustomType.Setter
        public Builder bisoAdminControls(@Nullable TeamsRuleRuleSettingsBisoAdminControls bisoAdminControls) {

            this.bisoAdminControls = bisoAdminControls;
            return this;
        }
        @CustomType.Setter
        public Builder blockPage(@Nullable TeamsRuleRuleSettingsBlockPage blockPage) {

            this.blockPage = blockPage;
            return this;
        }
        @CustomType.Setter
        public Builder blockPageEnabled(@Nullable Boolean blockPageEnabled) {

            this.blockPageEnabled = blockPageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder blockReason(@Nullable String blockReason) {

            this.blockReason = blockReason;
            return this;
        }
        @CustomType.Setter
        public Builder bypassParentRule(@Nullable Boolean bypassParentRule) {

            this.bypassParentRule = bypassParentRule;
            return this;
        }
        @CustomType.Setter
        public Builder checkSession(@Nullable TeamsRuleRuleSettingsCheckSession checkSession) {

            this.checkSession = checkSession;
            return this;
        }
        @CustomType.Setter
        public Builder dnsResolvers(@Nullable TeamsRuleRuleSettingsDnsResolvers dnsResolvers) {

            this.dnsResolvers = dnsResolvers;
            return this;
        }
        @CustomType.Setter
        public Builder egress(@Nullable TeamsRuleRuleSettingsEgress egress) {

            this.egress = egress;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCnameCategoryMatches(@Nullable Boolean ignoreCnameCategoryMatches) {

            this.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            return this;
        }
        @CustomType.Setter
        public Builder insecureDisableDnssecValidation(@Nullable Boolean insecureDisableDnssecValidation) {

            this.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            return this;
        }
        @CustomType.Setter
        public Builder ipCategories(@Nullable Boolean ipCategories) {

            this.ipCategories = ipCategories;
            return this;
        }
        @CustomType.Setter
        public Builder ipIndicatorFeeds(@Nullable Boolean ipIndicatorFeeds) {

            this.ipIndicatorFeeds = ipIndicatorFeeds;
            return this;
        }
        @CustomType.Setter
        public Builder l4override(@Nullable TeamsRuleRuleSettingsL4override l4override) {

            this.l4override = l4override;
            return this;
        }
        @CustomType.Setter
        public Builder notificationSettings(@Nullable TeamsRuleRuleSettingsNotificationSettings notificationSettings) {

            this.notificationSettings = notificationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder overrideHost(@Nullable String overrideHost) {

            this.overrideHost = overrideHost;
            return this;
        }
        @CustomType.Setter
        public Builder overrideIps(@Nullable List<String> overrideIps) {

            this.overrideIps = overrideIps;
            return this;
        }
        public Builder overrideIps(String... overrideIps) {
            return overrideIps(List.of(overrideIps));
        }
        @CustomType.Setter
        public Builder payloadLog(@Nullable TeamsRuleRuleSettingsPayloadLog payloadLog) {

            this.payloadLog = payloadLog;
            return this;
        }
        @CustomType.Setter
        public Builder quarantine(@Nullable TeamsRuleRuleSettingsQuarantine quarantine) {

            this.quarantine = quarantine;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(@Nullable TeamsRuleRuleSettingsRedirect redirect) {

            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder resolveDnsInternally(@Nullable TeamsRuleRuleSettingsResolveDnsInternally resolveDnsInternally) {

            this.resolveDnsInternally = resolveDnsInternally;
            return this;
        }
        @CustomType.Setter
        public Builder resolveDnsThroughCloudflare(@Nullable Boolean resolveDnsThroughCloudflare) {

            this.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            return this;
        }
        @CustomType.Setter
        public Builder untrustedCert(@Nullable TeamsRuleRuleSettingsUntrustedCert untrustedCert) {

            this.untrustedCert = untrustedCert;
            return this;
        }
        public TeamsRuleRuleSettings build() {
            final var _resultValue = new TeamsRuleRuleSettings();
            _resultValue.addHeaders = addHeaders;
            _resultValue.allowChildBypass = allowChildBypass;
            _resultValue.auditSsh = auditSsh;
            _resultValue.bisoAdminControls = bisoAdminControls;
            _resultValue.blockPage = blockPage;
            _resultValue.blockPageEnabled = blockPageEnabled;
            _resultValue.blockReason = blockReason;
            _resultValue.bypassParentRule = bypassParentRule;
            _resultValue.checkSession = checkSession;
            _resultValue.dnsResolvers = dnsResolvers;
            _resultValue.egress = egress;
            _resultValue.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            _resultValue.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            _resultValue.ipCategories = ipCategories;
            _resultValue.ipIndicatorFeeds = ipIndicatorFeeds;
            _resultValue.l4override = l4override;
            _resultValue.notificationSettings = notificationSettings;
            _resultValue.overrideHost = overrideHost;
            _resultValue.overrideIps = overrideIps;
            _resultValue.payloadLog = payloadLog;
            _resultValue.quarantine = quarantine;
            _resultValue.redirect = redirect;
            _resultValue.resolveDnsInternally = resolveDnsInternally;
            _resultValue.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            _resultValue.untrustedCert = untrustedCert;
            return _resultValue;
        }
    }
}
