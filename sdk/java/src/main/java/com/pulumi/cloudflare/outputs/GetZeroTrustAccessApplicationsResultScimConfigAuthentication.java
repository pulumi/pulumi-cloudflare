// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessApplicationsResultScimConfigAuthentication {
    /**
     * @return URL used to generate the auth code used during token generation.
     * 
     */
    private String authorizationUrl;
    /**
     * @return Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
     * 
     */
    private String clientId;
    /**
     * @return Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
     * 
     */
    private String clientSecret;
    /**
     * @return Password used to authenticate with the remote SCIM service.
     * 
     */
    private String password;
    /**
     * @return The authentication scheme to use when making SCIM requests to this application.
     * 
     */
    private String scheme;
    /**
     * @return The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
     * 
     */
    private List<String> scopes;
    /**
     * @return Token used to authenticate with the remote SCIM service.
     * 
     */
    private String token;
    /**
     * @return URL used to generate the token used to authenticate with the remote SCIM service.
     * 
     */
    private String tokenUrl;
    /**
     * @return User name used to authenticate with the remote SCIM service.
     * 
     */
    private String user;

    private GetZeroTrustAccessApplicationsResultScimConfigAuthentication() {}
    /**
     * @return URL used to generate the auth code used during token generation.
     * 
     */
    public String authorizationUrl() {
        return this.authorizationUrl;
    }
    /**
     * @return Client ID used to authenticate when generating a token for authenticating with the remote SCIM service.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Secret used to authenticate when generating a token for authenticating with the remove SCIM service.
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return Password used to authenticate with the remote SCIM service.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The authentication scheme to use when making SCIM requests to this application.
     * 
     */
    public String scheme() {
        return this.scheme;
    }
    /**
     * @return The authorization scopes to request when generating the token used to authenticate with the remove SCIM service.
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Token used to authenticate with the remote SCIM service.
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return URL used to generate the token used to authenticate with the remote SCIM service.
     * 
     */
    public String tokenUrl() {
        return this.tokenUrl;
    }
    /**
     * @return User name used to authenticate with the remote SCIM service.
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessApplicationsResultScimConfigAuthentication defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authorizationUrl;
        private String clientId;
        private String clientSecret;
        private String password;
        private String scheme;
        private List<String> scopes;
        private String token;
        private String tokenUrl;
        private String user;
        public Builder() {}
        public Builder(GetZeroTrustAccessApplicationsResultScimConfigAuthentication defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authorizationUrl = defaults.authorizationUrl;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.password = defaults.password;
    	      this.scheme = defaults.scheme;
    	      this.scopes = defaults.scopes;
    	      this.token = defaults.token;
    	      this.tokenUrl = defaults.tokenUrl;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder authorizationUrl(String authorizationUrl) {
            if (authorizationUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "authorizationUrl");
            }
            this.authorizationUrl = authorizationUrl;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(String scheme) {
            if (scheme == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "scheme");
            }
            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder token(String token) {
            if (token == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "token");
            }
            this.token = token;
            return this;
        }
        @CustomType.Setter
        public Builder tokenUrl(String tokenUrl) {
            if (tokenUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "tokenUrl");
            }
            this.tokenUrl = tokenUrl;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultScimConfigAuthentication", "user");
            }
            this.user = user;
            return this;
        }
        public GetZeroTrustAccessApplicationsResultScimConfigAuthentication build() {
            final var _resultValue = new GetZeroTrustAccessApplicationsResultScimConfigAuthentication();
            _resultValue.authorizationUrl = authorizationUrl;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.password = password;
            _resultValue.scheme = scheme;
            _resultValue.scopes = scopes;
            _resultValue.token = token;
            _resultValue.tokenUrl = tokenUrl;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
