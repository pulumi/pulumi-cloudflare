// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessIdentityProviderScimConfig {
    /**
     * @return A flag to enable or disable SCIM for the identity provider.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Indicates how a SCIM event updates a user identity used for policy evaluation. Use &#34;automatic&#34; to automatically update a user&#39;s identity and augment it with fields from the SCIM user resource. Use &#34;reauth&#34; to force re-authentication on group membership updates, user identity update will only occur after successful re-authentication. With &#34;reauth&#34; identities will not contain fields from the SCIM user resource. With &#34;no*action&#34; identities will not be changed by SCIM updates in any way and users will not be prompted to reauthenticate.
     * Available values: &#34;automatic&#34;, &#34;reauth&#34;, &#34;no*action&#34;.
     * 
     */
    private @Nullable String identityUpdateBehavior;
    /**
     * @return The base URL of Cloudflare&#39;s SCIM V2.0 API endpoint.
     * 
     */
    private @Nullable String scimBaseUrl;
    /**
     * @return A flag to remove a user&#39;s seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.
     * 
     */
    private @Nullable Boolean seatDeprovision;
    /**
     * @return A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it at /access/identity*providers/:idpID/refresh*scim_secret.
     * 
     */
    private @Nullable String secret;
    /**
     * @return A flag to enable revoking a user&#39;s session in Access and Gateway when they have been deprovisioned in the Identity Provider.
     * 
     */
    private @Nullable Boolean userDeprovision;

    private AccessIdentityProviderScimConfig() {}
    /**
     * @return A flag to enable or disable SCIM for the identity provider.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Indicates how a SCIM event updates a user identity used for policy evaluation. Use &#34;automatic&#34; to automatically update a user&#39;s identity and augment it with fields from the SCIM user resource. Use &#34;reauth&#34; to force re-authentication on group membership updates, user identity update will only occur after successful re-authentication. With &#34;reauth&#34; identities will not contain fields from the SCIM user resource. With &#34;no*action&#34; identities will not be changed by SCIM updates in any way and users will not be prompted to reauthenticate.
     * Available values: &#34;automatic&#34;, &#34;reauth&#34;, &#34;no*action&#34;.
     * 
     */
    public Optional<String> identityUpdateBehavior() {
        return Optional.ofNullable(this.identityUpdateBehavior);
    }
    /**
     * @return The base URL of Cloudflare&#39;s SCIM V2.0 API endpoint.
     * 
     */
    public Optional<String> scimBaseUrl() {
        return Optional.ofNullable(this.scimBaseUrl);
    }
    /**
     * @return A flag to remove a user&#39;s seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.
     * 
     */
    public Optional<Boolean> seatDeprovision() {
        return Optional.ofNullable(this.seatDeprovision);
    }
    /**
     * @return A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it at /access/identity*providers/:idpID/refresh*scim_secret.
     * 
     */
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }
    /**
     * @return A flag to enable revoking a user&#39;s session in Access and Gateway when they have been deprovisioned in the Identity Provider.
     * 
     */
    public Optional<Boolean> userDeprovision() {
        return Optional.ofNullable(this.userDeprovision);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessIdentityProviderScimConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean enabled;
        private @Nullable String identityUpdateBehavior;
        private @Nullable String scimBaseUrl;
        private @Nullable Boolean seatDeprovision;
        private @Nullable String secret;
        private @Nullable Boolean userDeprovision;
        public Builder() {}
        public Builder(AccessIdentityProviderScimConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.identityUpdateBehavior = defaults.identityUpdateBehavior;
    	      this.scimBaseUrl = defaults.scimBaseUrl;
    	      this.seatDeprovision = defaults.seatDeprovision;
    	      this.secret = defaults.secret;
    	      this.userDeprovision = defaults.userDeprovision;
        }

        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder identityUpdateBehavior(@Nullable String identityUpdateBehavior) {

            this.identityUpdateBehavior = identityUpdateBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder scimBaseUrl(@Nullable String scimBaseUrl) {

            this.scimBaseUrl = scimBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder seatDeprovision(@Nullable Boolean seatDeprovision) {

            this.seatDeprovision = seatDeprovision;
            return this;
        }
        @CustomType.Setter
        public Builder secret(@Nullable String secret) {

            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder userDeprovision(@Nullable Boolean userDeprovision) {

            this.userDeprovision = userDeprovision;
            return this;
        }
        public AccessIdentityProviderScimConfig build() {
            final var _resultValue = new AccessIdentityProviderScimConfig();
            _resultValue.enabled = enabled;
            _resultValue.identityUpdateBehavior = identityUpdateBehavior;
            _resultValue.scimBaseUrl = scimBaseUrl;
            _resultValue.seatDeprovision = seatDeprovision;
            _resultValue.secret = secret;
            _resultValue.userDeprovision = userDeprovision;
            return _resultValue;
        }
    }
}
