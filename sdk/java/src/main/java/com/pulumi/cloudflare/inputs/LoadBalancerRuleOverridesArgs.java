// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.LoadBalancerRuleOverridesAdaptiveRoutingArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleOverridesLocationStrategyArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleOverridesRandomSteeringArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleOverridesSessionAffinityAttributesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRuleOverridesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRuleOverridesArgs Empty = new LoadBalancerRuleOverridesArgs();

    /**
     * Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    @Import(name="adaptiveRouting")
    private @Nullable Output<LoadBalancerRuleOverridesAdaptiveRoutingArgs> adaptiveRouting;

    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public Optional<Output<LoadBalancerRuleOverridesAdaptiveRoutingArgs>> adaptiveRouting() {
        return Optional.ofNullable(this.adaptiveRouting);
    }

    /**
     * A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    @Import(name="countryPools")
    private @Nullable Output<Map<String,List<String>>> countryPools;

    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> countryPools() {
        return Optional.ofNullable(this.countryPools);
    }

    /**
     * A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    @Import(name="defaultPools")
    private @Nullable Output<List<String>> defaultPools;

    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    public Optional<Output<List<String>>> defaultPools() {
        return Optional.ofNullable(this.defaultPools);
    }

    /**
     * The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    @Import(name="fallbackPool")
    private @Nullable Output<String> fallbackPool;

    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public Optional<Output<String>> fallbackPool() {
        return Optional.ofNullable(this.fallbackPool);
    }

    /**
     * Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    @Import(name="locationStrategy")
    private @Nullable Output<LoadBalancerRuleOverridesLocationStrategyArgs> locationStrategy;

    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    public Optional<Output<LoadBalancerRuleOverridesLocationStrategyArgs>> locationStrategy() {
        return Optional.ofNullable(this.locationStrategy);
    }

    /**
     * Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    @Import(name="popPools")
    private @Nullable Output<Map<String,List<String>>> popPools;

    /**
     * @return Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> popPools() {
        return Optional.ofNullable(this.popPools);
    }

    /**
     * Configures pool weights.
     * 
     */
    @Import(name="randomSteering")
    private @Nullable Output<LoadBalancerRuleOverridesRandomSteeringArgs> randomSteering;

    /**
     * @return Configures pool weights.
     * 
     */
    public Optional<Output<LoadBalancerRuleOverridesRandomSteeringArgs>> randomSteering() {
        return Optional.ofNullable(this.randomSteering);
    }

    /**
     * A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    @Import(name="regionPools")
    private @Nullable Output<Map<String,List<String>>> regionPools;

    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> regionPools() {
        return Optional.ofNullable(this.regionPools);
    }

    /**
     * Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * Configures attributes for session affinity.
     * 
     */
    @Import(name="sessionAffinityAttributes")
    private @Nullable Output<LoadBalancerRuleOverridesSessionAffinityAttributesArgs> sessionAffinityAttributes;

    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public Optional<Output<LoadBalancerRuleOverridesSessionAffinityAttributesArgs>> sessionAffinityAttributes() {
        return Optional.ofNullable(this.sessionAffinityAttributes);
    }

    /**
     * Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    @Import(name="sessionAffinityTtl")
    private @Nullable Output<Double> sessionAffinityTtl;

    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    public Optional<Output<Double>> sessionAffinityTtl() {
        return Optional.ofNullable(this.sessionAffinityTtl);
    }

    /**
     * Steering Policy for this load balancer.
     * 
     */
    @Import(name="steeringPolicy")
    private @Nullable Output<String> steeringPolicy;

    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public Optional<Output<String>> steeringPolicy() {
        return Optional.ofNullable(this.steeringPolicy);
    }

    /**
     * Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Double> ttl;

    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Optional<Output<Double>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private LoadBalancerRuleOverridesArgs() {}

    private LoadBalancerRuleOverridesArgs(LoadBalancerRuleOverridesArgs $) {
        this.adaptiveRouting = $.adaptiveRouting;
        this.countryPools = $.countryPools;
        this.defaultPools = $.defaultPools;
        this.fallbackPool = $.fallbackPool;
        this.locationStrategy = $.locationStrategy;
        this.popPools = $.popPools;
        this.randomSteering = $.randomSteering;
        this.regionPools = $.regionPools;
        this.sessionAffinity = $.sessionAffinity;
        this.sessionAffinityAttributes = $.sessionAffinityAttributes;
        this.sessionAffinityTtl = $.sessionAffinityTtl;
        this.steeringPolicy = $.steeringPolicy;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRuleOverridesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRuleOverridesArgs $;

        public Builder() {
            $ = new LoadBalancerRuleOverridesArgs();
        }

        public Builder(LoadBalancerRuleOverridesArgs defaults) {
            $ = new LoadBalancerRuleOverridesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adaptiveRouting Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(@Nullable Output<LoadBalancerRuleOverridesAdaptiveRoutingArgs> adaptiveRouting) {
            $.adaptiveRouting = adaptiveRouting;
            return this;
        }

        /**
         * @param adaptiveRouting Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveRouting(LoadBalancerRuleOverridesAdaptiveRoutingArgs adaptiveRouting) {
            return adaptiveRouting(Output.of(adaptiveRouting));
        }

        /**
         * @param countryPools A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(@Nullable Output<Map<String,List<String>>> countryPools) {
            $.countryPools = countryPools;
            return this;
        }

        /**
         * @param countryPools A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(Map<String,List<String>> countryPools) {
            return countryPools(Output.of(countryPools));
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(@Nullable Output<List<String>> defaultPools) {
            $.defaultPools = defaultPools;
            return this;
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(List<String> defaultPools) {
            return defaultPools(Output.of(defaultPools));
        }

        /**
         * @param defaultPools A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
         * 
         * @return builder
         * 
         */
        public Builder defaultPools(String... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }

        /**
         * @param fallbackPool The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(@Nullable Output<String> fallbackPool) {
            $.fallbackPool = fallbackPool;
            return this;
        }

        /**
         * @param fallbackPool The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPool(String fallbackPool) {
            return fallbackPool(Output.of(fallbackPool));
        }

        /**
         * @param locationStrategy Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
         * 
         * @return builder
         * 
         */
        public Builder locationStrategy(@Nullable Output<LoadBalancerRuleOverridesLocationStrategyArgs> locationStrategy) {
            $.locationStrategy = locationStrategy;
            return this;
        }

        /**
         * @param locationStrategy Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
         * 
         * @return builder
         * 
         */
        public Builder locationStrategy(LoadBalancerRuleOverridesLocationStrategyArgs locationStrategy) {
            return locationStrategy(Output.of(locationStrategy));
        }

        /**
         * @param popPools Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
         * 
         * @return builder
         * 
         */
        public Builder popPools(@Nullable Output<Map<String,List<String>>> popPools) {
            $.popPools = popPools;
            return this;
        }

        /**
         * @param popPools Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
         * 
         * @return builder
         * 
         */
        public Builder popPools(Map<String,List<String>> popPools) {
            return popPools(Output.of(popPools));
        }

        /**
         * @param randomSteering Configures pool weights.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(@Nullable Output<LoadBalancerRuleOverridesRandomSteeringArgs> randomSteering) {
            $.randomSteering = randomSteering;
            return this;
        }

        /**
         * @param randomSteering Configures pool weights.
         * 
         * @return builder
         * 
         */
        public Builder randomSteering(LoadBalancerRuleOverridesRandomSteeringArgs randomSteering) {
            return randomSteering(Output.of(randomSteering));
        }

        /**
         * @param regionPools A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(@Nullable Output<Map<String,List<String>>> regionPools) {
            $.regionPools = regionPools;
            return this;
        }

        /**
         * @param regionPools A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(Map<String,List<String>> regionPools) {
            return regionPools(Output.of(regionPools));
        }

        /**
         * @param sessionAffinity Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
         * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
         * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param sessionAffinityAttributes Configures attributes for session affinity.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(@Nullable Output<LoadBalancerRuleOverridesSessionAffinityAttributesArgs> sessionAffinityAttributes) {
            $.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }

        /**
         * @param sessionAffinityAttributes Configures attributes for session affinity.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(LoadBalancerRuleOverridesSessionAffinityAttributesArgs sessionAffinityAttributes) {
            return sessionAffinityAttributes(Output.of(sessionAffinityAttributes));
        }

        /**
         * @param sessionAffinityTtl Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(@Nullable Output<Double> sessionAffinityTtl) {
            $.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }

        /**
         * @param sessionAffinityTtl Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(Double sessionAffinityTtl) {
            return sessionAffinityTtl(Output.of(sessionAffinityTtl));
        }

        /**
         * @param steeringPolicy Steering Policy for this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(@Nullable Output<String> steeringPolicy) {
            $.steeringPolicy = steeringPolicy;
            return this;
        }

        /**
         * @param steeringPolicy Steering Policy for this load balancer.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(String steeringPolicy) {
            return steeringPolicy(Output.of(steeringPolicy));
        }

        /**
         * @param ttl Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        public LoadBalancerRuleOverridesArgs build() {
            return $;
        }
    }

}
