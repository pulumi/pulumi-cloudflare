// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustDeviceCustomProfilesResultExclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustDeviceCustomProfilesResultFallbackDomain;
import com.pulumi.cloudflare.outputs.GetZeroTrustDeviceCustomProfilesResultInclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustDeviceCustomProfilesResultServiceModeV2;
import com.pulumi.cloudflare.outputs.GetZeroTrustDeviceCustomProfilesResultTargetTest;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustDeviceCustomProfilesResult {
    /**
     * @return Whether to allow the user to switch WARP between modes.
     * 
     */
    private Boolean allowModeSwitch;
    /**
     * @return Whether to receive update notifications when a new version of the client is available.
     * 
     */
    private Boolean allowUpdates;
    /**
     * @return Whether to allow devices to leave the organization.
     * 
     */
    private Boolean allowedToLeave;
    /**
     * @return The amount of time in seconds to reconnect after having been disabled.
     * 
     */
    private Double autoConnect;
    /**
     * @return Turn on the captive portal after the specified amount of time.
     * 
     */
    private Double captivePortal;
    /**
     * @return Whether the policy is the default policy for an account.
     * 
     */
    private Boolean default_;
    /**
     * @return A description of the policy.
     * 
     */
    private String description;
    /**
     * @return If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
     * 
     */
    private Boolean disableAutoFallback;
    /**
     * @return Whether the policy will be applied to matching devices.
     * 
     */
    private Boolean enabled;
    /**
     * @return Whether to add Microsoft IPs to Split Tunnel exclusions.
     * 
     */
    private Boolean excludeOfficeIps;
    /**
     * @return List of routes excluded in the WARP client&#39;s tunnel.
     * 
     */
    private List<GetZeroTrustDeviceCustomProfilesResultExclude> excludes;
    private List<GetZeroTrustDeviceCustomProfilesResultFallbackDomain> fallbackDomains;
    private String gatewayUniqueId;
    /**
     * @return List of routes included in the WARP client&#39;s tunnel.
     * 
     */
    private List<GetZeroTrustDeviceCustomProfilesResultInclude> includes;
    /**
     * @return The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
     * 
     */
    private Double lanAllowMinutes;
    /**
     * @return The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
     * 
     */
    private Double lanAllowSubnetSize;
    /**
     * @return The wirefilter expression to match devices.
     * 
     */
    private String match;
    /**
     * @return The name of the device settings profile.
     * 
     */
    private String name;
    /**
     * @return Device ID.
     * 
     */
    private String policyId;
    /**
     * @return The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
     * 
     */
    private Double precedence;
    /**
     * @return Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
     * 
     */
    private Boolean registerInterfaceIpWithDns;
    private GetZeroTrustDeviceCustomProfilesResultServiceModeV2 serviceModeV2;
    /**
     * @return The URL to launch when the Send Feedback button is clicked.
     * 
     */
    private String supportUrl;
    /**
     * @return Whether to allow the user to turn off the WARP switch and disconnect the client.
     * 
     */
    private Boolean switchLocked;
    private List<GetZeroTrustDeviceCustomProfilesResultTargetTest> targetTests;
    /**
     * @return Determines which tunnel protocol to use.
     * 
     */
    private String tunnelProtocol;

    private GetZeroTrustDeviceCustomProfilesResult() {}
    /**
     * @return Whether to allow the user to switch WARP between modes.
     * 
     */
    public Boolean allowModeSwitch() {
        return this.allowModeSwitch;
    }
    /**
     * @return Whether to receive update notifications when a new version of the client is available.
     * 
     */
    public Boolean allowUpdates() {
        return this.allowUpdates;
    }
    /**
     * @return Whether to allow devices to leave the organization.
     * 
     */
    public Boolean allowedToLeave() {
        return this.allowedToLeave;
    }
    /**
     * @return The amount of time in seconds to reconnect after having been disabled.
     * 
     */
    public Double autoConnect() {
        return this.autoConnect;
    }
    /**
     * @return Turn on the captive portal after the specified amount of time.
     * 
     */
    public Double captivePortal() {
        return this.captivePortal;
    }
    /**
     * @return Whether the policy is the default policy for an account.
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return A description of the policy.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If the `dns_server` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
     * 
     */
    public Boolean disableAutoFallback() {
        return this.disableAutoFallback;
    }
    /**
     * @return Whether the policy will be applied to matching devices.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Whether to add Microsoft IPs to Split Tunnel exclusions.
     * 
     */
    public Boolean excludeOfficeIps() {
        return this.excludeOfficeIps;
    }
    /**
     * @return List of routes excluded in the WARP client&#39;s tunnel.
     * 
     */
    public List<GetZeroTrustDeviceCustomProfilesResultExclude> excludes() {
        return this.excludes;
    }
    public List<GetZeroTrustDeviceCustomProfilesResultFallbackDomain> fallbackDomains() {
        return this.fallbackDomains;
    }
    public String gatewayUniqueId() {
        return this.gatewayUniqueId;
    }
    /**
     * @return List of routes included in the WARP client&#39;s tunnel.
     * 
     */
    public List<GetZeroTrustDeviceCustomProfilesResultInclude> includes() {
        return this.includes;
    }
    /**
     * @return The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
     * 
     */
    public Double lanAllowMinutes() {
        return this.lanAllowMinutes;
    }
    /**
     * @return The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
     * 
     */
    public Double lanAllowSubnetSize() {
        return this.lanAllowSubnetSize;
    }
    /**
     * @return The wirefilter expression to match devices.
     * 
     */
    public String match() {
        return this.match;
    }
    /**
     * @return The name of the device settings profile.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Device ID.
     * 
     */
    public String policyId() {
        return this.policyId;
    }
    /**
     * @return The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
     * 
     */
    public Double precedence() {
        return this.precedence;
    }
    /**
     * @return Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
     * 
     */
    public Boolean registerInterfaceIpWithDns() {
        return this.registerInterfaceIpWithDns;
    }
    public GetZeroTrustDeviceCustomProfilesResultServiceModeV2 serviceModeV2() {
        return this.serviceModeV2;
    }
    /**
     * @return The URL to launch when the Send Feedback button is clicked.
     * 
     */
    public String supportUrl() {
        return this.supportUrl;
    }
    /**
     * @return Whether to allow the user to turn off the WARP switch and disconnect the client.
     * 
     */
    public Boolean switchLocked() {
        return this.switchLocked;
    }
    public List<GetZeroTrustDeviceCustomProfilesResultTargetTest> targetTests() {
        return this.targetTests;
    }
    /**
     * @return Determines which tunnel protocol to use.
     * 
     */
    public String tunnelProtocol() {
        return this.tunnelProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustDeviceCustomProfilesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowModeSwitch;
        private Boolean allowUpdates;
        private Boolean allowedToLeave;
        private Double autoConnect;
        private Double captivePortal;
        private Boolean default_;
        private String description;
        private Boolean disableAutoFallback;
        private Boolean enabled;
        private Boolean excludeOfficeIps;
        private List<GetZeroTrustDeviceCustomProfilesResultExclude> excludes;
        private List<GetZeroTrustDeviceCustomProfilesResultFallbackDomain> fallbackDomains;
        private String gatewayUniqueId;
        private List<GetZeroTrustDeviceCustomProfilesResultInclude> includes;
        private Double lanAllowMinutes;
        private Double lanAllowSubnetSize;
        private String match;
        private String name;
        private String policyId;
        private Double precedence;
        private Boolean registerInterfaceIpWithDns;
        private GetZeroTrustDeviceCustomProfilesResultServiceModeV2 serviceModeV2;
        private String supportUrl;
        private Boolean switchLocked;
        private List<GetZeroTrustDeviceCustomProfilesResultTargetTest> targetTests;
        private String tunnelProtocol;
        public Builder() {}
        public Builder(GetZeroTrustDeviceCustomProfilesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowModeSwitch = defaults.allowModeSwitch;
    	      this.allowUpdates = defaults.allowUpdates;
    	      this.allowedToLeave = defaults.allowedToLeave;
    	      this.autoConnect = defaults.autoConnect;
    	      this.captivePortal = defaults.captivePortal;
    	      this.default_ = defaults.default_;
    	      this.description = defaults.description;
    	      this.disableAutoFallback = defaults.disableAutoFallback;
    	      this.enabled = defaults.enabled;
    	      this.excludeOfficeIps = defaults.excludeOfficeIps;
    	      this.excludes = defaults.excludes;
    	      this.fallbackDomains = defaults.fallbackDomains;
    	      this.gatewayUniqueId = defaults.gatewayUniqueId;
    	      this.includes = defaults.includes;
    	      this.lanAllowMinutes = defaults.lanAllowMinutes;
    	      this.lanAllowSubnetSize = defaults.lanAllowSubnetSize;
    	      this.match = defaults.match;
    	      this.name = defaults.name;
    	      this.policyId = defaults.policyId;
    	      this.precedence = defaults.precedence;
    	      this.registerInterfaceIpWithDns = defaults.registerInterfaceIpWithDns;
    	      this.serviceModeV2 = defaults.serviceModeV2;
    	      this.supportUrl = defaults.supportUrl;
    	      this.switchLocked = defaults.switchLocked;
    	      this.targetTests = defaults.targetTests;
    	      this.tunnelProtocol = defaults.tunnelProtocol;
        }

        @CustomType.Setter
        public Builder allowModeSwitch(Boolean allowModeSwitch) {
            if (allowModeSwitch == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "allowModeSwitch");
            }
            this.allowModeSwitch = allowModeSwitch;
            return this;
        }
        @CustomType.Setter
        public Builder allowUpdates(Boolean allowUpdates) {
            if (allowUpdates == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "allowUpdates");
            }
            this.allowUpdates = allowUpdates;
            return this;
        }
        @CustomType.Setter
        public Builder allowedToLeave(Boolean allowedToLeave) {
            if (allowedToLeave == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "allowedToLeave");
            }
            this.allowedToLeave = allowedToLeave;
            return this;
        }
        @CustomType.Setter
        public Builder autoConnect(Double autoConnect) {
            if (autoConnect == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "autoConnect");
            }
            this.autoConnect = autoConnect;
            return this;
        }
        @CustomType.Setter
        public Builder captivePortal(Double captivePortal) {
            if (captivePortal == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "captivePortal");
            }
            this.captivePortal = captivePortal;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disableAutoFallback(Boolean disableAutoFallback) {
            if (disableAutoFallback == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "disableAutoFallback");
            }
            this.disableAutoFallback = disableAutoFallback;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder excludeOfficeIps(Boolean excludeOfficeIps) {
            if (excludeOfficeIps == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "excludeOfficeIps");
            }
            this.excludeOfficeIps = excludeOfficeIps;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(List<GetZeroTrustDeviceCustomProfilesResultExclude> excludes) {
            if (excludes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "excludes");
            }
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(GetZeroTrustDeviceCustomProfilesResultExclude... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder fallbackDomains(List<GetZeroTrustDeviceCustomProfilesResultFallbackDomain> fallbackDomains) {
            if (fallbackDomains == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "fallbackDomains");
            }
            this.fallbackDomains = fallbackDomains;
            return this;
        }
        public Builder fallbackDomains(GetZeroTrustDeviceCustomProfilesResultFallbackDomain... fallbackDomains) {
            return fallbackDomains(List.of(fallbackDomains));
        }
        @CustomType.Setter
        public Builder gatewayUniqueId(String gatewayUniqueId) {
            if (gatewayUniqueId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "gatewayUniqueId");
            }
            this.gatewayUniqueId = gatewayUniqueId;
            return this;
        }
        @CustomType.Setter
        public Builder includes(List<GetZeroTrustDeviceCustomProfilesResultInclude> includes) {
            if (includes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "includes");
            }
            this.includes = includes;
            return this;
        }
        public Builder includes(GetZeroTrustDeviceCustomProfilesResultInclude... includes) {
            return includes(List.of(includes));
        }
        @CustomType.Setter
        public Builder lanAllowMinutes(Double lanAllowMinutes) {
            if (lanAllowMinutes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "lanAllowMinutes");
            }
            this.lanAllowMinutes = lanAllowMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder lanAllowSubnetSize(Double lanAllowSubnetSize) {
            if (lanAllowSubnetSize == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "lanAllowSubnetSize");
            }
            this.lanAllowSubnetSize = lanAllowSubnetSize;
            return this;
        }
        @CustomType.Setter
        public Builder match(String match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policyId(String policyId) {
            if (policyId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "policyId");
            }
            this.policyId = policyId;
            return this;
        }
        @CustomType.Setter
        public Builder precedence(Double precedence) {
            if (precedence == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "precedence");
            }
            this.precedence = precedence;
            return this;
        }
        @CustomType.Setter
        public Builder registerInterfaceIpWithDns(Boolean registerInterfaceIpWithDns) {
            if (registerInterfaceIpWithDns == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "registerInterfaceIpWithDns");
            }
            this.registerInterfaceIpWithDns = registerInterfaceIpWithDns;
            return this;
        }
        @CustomType.Setter
        public Builder serviceModeV2(GetZeroTrustDeviceCustomProfilesResultServiceModeV2 serviceModeV2) {
            if (serviceModeV2 == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "serviceModeV2");
            }
            this.serviceModeV2 = serviceModeV2;
            return this;
        }
        @CustomType.Setter
        public Builder supportUrl(String supportUrl) {
            if (supportUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "supportUrl");
            }
            this.supportUrl = supportUrl;
            return this;
        }
        @CustomType.Setter
        public Builder switchLocked(Boolean switchLocked) {
            if (switchLocked == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "switchLocked");
            }
            this.switchLocked = switchLocked;
            return this;
        }
        @CustomType.Setter
        public Builder targetTests(List<GetZeroTrustDeviceCustomProfilesResultTargetTest> targetTests) {
            if (targetTests == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "targetTests");
            }
            this.targetTests = targetTests;
            return this;
        }
        public Builder targetTests(GetZeroTrustDeviceCustomProfilesResultTargetTest... targetTests) {
            return targetTests(List.of(targetTests));
        }
        @CustomType.Setter
        public Builder tunnelProtocol(String tunnelProtocol) {
            if (tunnelProtocol == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceCustomProfilesResult", "tunnelProtocol");
            }
            this.tunnelProtocol = tunnelProtocol;
            return this;
        }
        public GetZeroTrustDeviceCustomProfilesResult build() {
            final var _resultValue = new GetZeroTrustDeviceCustomProfilesResult();
            _resultValue.allowModeSwitch = allowModeSwitch;
            _resultValue.allowUpdates = allowUpdates;
            _resultValue.allowedToLeave = allowedToLeave;
            _resultValue.autoConnect = autoConnect;
            _resultValue.captivePortal = captivePortal;
            _resultValue.default_ = default_;
            _resultValue.description = description;
            _resultValue.disableAutoFallback = disableAutoFallback;
            _resultValue.enabled = enabled;
            _resultValue.excludeOfficeIps = excludeOfficeIps;
            _resultValue.excludes = excludes;
            _resultValue.fallbackDomains = fallbackDomains;
            _resultValue.gatewayUniqueId = gatewayUniqueId;
            _resultValue.includes = includes;
            _resultValue.lanAllowMinutes = lanAllowMinutes;
            _resultValue.lanAllowSubnetSize = lanAllowSubnetSize;
            _resultValue.match = match;
            _resultValue.name = name;
            _resultValue.policyId = policyId;
            _resultValue.precedence = precedence;
            _resultValue.registerInterfaceIpWithDns = registerInterfaceIpWithDns;
            _resultValue.serviceModeV2 = serviceModeV2;
            _resultValue.supportUrl = supportUrl;
            _resultValue.switchLocked = switchLocked;
            _resultValue.targetTests = targetTests;
            _resultValue.tunnelProtocol = tunnelProtocol;
            return _resultValue;
        }
    }
}
