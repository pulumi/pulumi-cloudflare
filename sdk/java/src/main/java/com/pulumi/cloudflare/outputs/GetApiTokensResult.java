// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetApiTokensResultCondition;
import com.pulumi.cloudflare.outputs.GetApiTokensResultPolicy;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApiTokensResult {
    private GetApiTokensResultCondition condition;
    /**
     * @return The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    private String expiresOn;
    /**
     * @return Token identifier tag.
     * 
     */
    private String id;
    /**
     * @return The time on which the token was created.
     * 
     */
    private String issuedOn;
    /**
     * @return Last time the token was used.
     * 
     */
    private String lastUsedOn;
    /**
     * @return Last time the token was modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Token name.
     * 
     */
    private String name;
    /**
     * @return The time before which the token MUST NOT be accepted for processing.
     * 
     */
    private String notBefore;
    /**
     * @return List of access policies assigned to the token.
     * 
     */
    private List<GetApiTokensResultPolicy> policies;
    /**
     * @return Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    private String status;

    private GetApiTokensResult() {}
    public GetApiTokensResultCondition condition() {
        return this.condition;
    }
    /**
     * @return The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    public String expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return Token identifier tag.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The time on which the token was created.
     * 
     */
    public String issuedOn() {
        return this.issuedOn;
    }
    /**
     * @return Last time the token was used.
     * 
     */
    public String lastUsedOn() {
        return this.lastUsedOn;
    }
    /**
     * @return Last time the token was modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Token name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The time before which the token MUST NOT be accepted for processing.
     * 
     */
    public String notBefore() {
        return this.notBefore;
    }
    /**
     * @return List of access policies assigned to the token.
     * 
     */
    public List<GetApiTokensResultPolicy> policies() {
        return this.policies;
    }
    /**
     * @return Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApiTokensResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetApiTokensResultCondition condition;
        private String expiresOn;
        private String id;
        private String issuedOn;
        private String lastUsedOn;
        private String modifiedOn;
        private String name;
        private String notBefore;
        private List<GetApiTokensResultPolicy> policies;
        private String status;
        public Builder() {}
        public Builder(GetApiTokensResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.expiresOn = defaults.expiresOn;
    	      this.id = defaults.id;
    	      this.issuedOn = defaults.issuedOn;
    	      this.lastUsedOn = defaults.lastUsedOn;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.notBefore = defaults.notBefore;
    	      this.policies = defaults.policies;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder condition(GetApiTokensResultCondition condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(String expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuedOn(String issuedOn) {
            if (issuedOn == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "issuedOn");
            }
            this.issuedOn = issuedOn;
            return this;
        }
        @CustomType.Setter
        public Builder lastUsedOn(String lastUsedOn) {
            if (lastUsedOn == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "lastUsedOn");
            }
            this.lastUsedOn = lastUsedOn;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(String notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetApiTokensResultPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetApiTokensResultPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetApiTokensResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetApiTokensResult build() {
            final var _resultValue = new GetApiTokensResult();
            _resultValue.condition = condition;
            _resultValue.expiresOn = expiresOn;
            _resultValue.id = id;
            _resultValue.issuedOn = issuedOn;
            _resultValue.lastUsedOn = lastUsedOn;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.notBefore = notBefore;
            _resultValue.policies = policies;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
