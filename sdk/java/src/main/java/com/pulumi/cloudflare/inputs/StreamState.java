// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.StreamInputArgs;
import com.pulumi.cloudflare.inputs.StreamPlaybackArgs;
import com.pulumi.cloudflare.inputs.StreamStatusArgs;
import com.pulumi.cloudflare.inputs.StreamWatermarkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamState extends com.pulumi.resources.ResourceArgs {

    public static final StreamState Empty = new StreamState();

    /**
     * The account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    @Import(name="allowedOrigins")
    private @Nullable Output<List<String>> allowedOrigins;

    /**
     * @return Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    public Optional<Output<List<String>>> allowedOrigins() {
        return Optional.ofNullable(this.allowedOrigins);
    }

    /**
     * The date and time the media item was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The date and time the media item was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * A user-defined identifier for the media creator.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Double> duration;

    /**
     * @return The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    public Optional<Output<Double>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Import(name="identifier")
    private @Nullable Output<String> identifier;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Optional<Output<String>> identifier() {
        return Optional.ofNullable(this.identifier);
    }

    @Import(name="input")
    private @Nullable Output<StreamInputArgs> input;

    public Optional<Output<StreamInputArgs>> input() {
        return Optional.ofNullable(this.input);
    }

    /**
     * The live input ID used to upload a video with Stream Live.
     * 
     */
    @Import(name="liveInput")
    private @Nullable Output<String> liveInput;

    /**
     * @return The live input ID used to upload a video with Stream Live.
     * 
     */
    public Optional<Output<String>> liveInput() {
        return Optional.ofNullable(this.liveInput);
    }

    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    @Import(name="maxDurationSeconds")
    private @Nullable Output<Integer> maxDurationSeconds;

    /**
     * @return The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    public Optional<Output<Integer>> maxDurationSeconds() {
        return Optional.ofNullable(this.maxDurationSeconds);
    }

    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * The date and time the media item was last modified.
     * 
     */
    @Import(name="modified")
    private @Nullable Output<String> modified;

    /**
     * @return The date and time the media item was last modified.
     * 
     */
    public Optional<Output<String>> modified() {
        return Optional.ofNullable(this.modified);
    }

    @Import(name="playback")
    private @Nullable Output<StreamPlaybackArgs> playback;

    public Optional<Output<StreamPlaybackArgs>> playback() {
        return Optional.ofNullable(this.playback);
    }

    /**
     * The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    @Import(name="preview")
    private @Nullable Output<String> preview;

    /**
     * @return The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    public Optional<Output<String>> preview() {
        return Optional.ofNullable(this.preview);
    }

    /**
     * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    @Import(name="readyToStream")
    private @Nullable Output<Boolean> readyToStream;

    /**
     * @return Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public Optional<Output<Boolean>> readyToStream() {
        return Optional.ofNullable(this.readyToStream);
    }

    /**
     * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    @Import(name="readyToStreamAt")
    private @Nullable Output<String> readyToStreamAt;

    /**
     * @return Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public Optional<Output<String>> readyToStreamAt() {
        return Optional.ofNullable(this.readyToStreamAt);
    }

    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    @Import(name="requireSignedUrls")
    private @Nullable Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    public Optional<Output<Boolean>> requireSignedUrls() {
        return Optional.ofNullable(this.requireSignedUrls);
    }

    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    @Import(name="scheduledDeletion")
    private @Nullable Output<String> scheduledDeletion;

    /**
     * @return Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    public Optional<Output<String>> scheduledDeletion() {
        return Optional.ofNullable(this.scheduledDeletion);
    }

    /**
     * The size of the media item in bytes.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Double> size;

    /**
     * @return The size of the media item in bytes.
     * 
     */
    public Optional<Output<Double>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    @Import(name="status")
    private @Nullable Output<StreamStatusArgs> status;

    /**
     * @return Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    public Optional<Output<StreamStatusArgs>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    @Import(name="thumbnail")
    private @Nullable Output<String> thumbnail;

    /**
     * @return The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    public Optional<Output<String>> thumbnail() {
        return Optional.ofNullable(this.thumbnail);
    }

    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    @Import(name="thumbnailTimestampPct")
    private @Nullable Output<Double> thumbnailTimestampPct;

    /**
     * @return The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    public Optional<Output<Double>> thumbnailTimestampPct() {
        return Optional.ofNullable(this.thumbnailTimestampPct);
    }

    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    @Import(name="uploadExpiry")
    private @Nullable Output<String> uploadExpiry;

    /**
     * @return The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    public Optional<Output<String>> uploadExpiry() {
        return Optional.ofNullable(this.uploadExpiry);
    }

    /**
     * The date and time the media item was uploaded.
     * 
     */
    @Import(name="uploaded")
    private @Nullable Output<String> uploaded;

    /**
     * @return The date and time the media item was uploaded.
     * 
     */
    public Optional<Output<String>> uploaded() {
        return Optional.ofNullable(this.uploaded);
    }

    @Import(name="watermark")
    private @Nullable Output<StreamWatermarkArgs> watermark;

    public Optional<Output<StreamWatermarkArgs>> watermark() {
        return Optional.ofNullable(this.watermark);
    }

    private StreamState() {}

    private StreamState(StreamState $) {
        this.accountId = $.accountId;
        this.allowedOrigins = $.allowedOrigins;
        this.created = $.created;
        this.creator = $.creator;
        this.duration = $.duration;
        this.identifier = $.identifier;
        this.input = $.input;
        this.liveInput = $.liveInput;
        this.maxDurationSeconds = $.maxDurationSeconds;
        this.meta = $.meta;
        this.modified = $.modified;
        this.playback = $.playback;
        this.preview = $.preview;
        this.readyToStream = $.readyToStream;
        this.readyToStreamAt = $.readyToStreamAt;
        this.requireSignedUrls = $.requireSignedUrls;
        this.scheduledDeletion = $.scheduledDeletion;
        this.size = $.size;
        this.status = $.status;
        this.thumbnail = $.thumbnail;
        this.thumbnailTimestampPct = $.thumbnailTimestampPct;
        this.uid = $.uid;
        this.uploadExpiry = $.uploadExpiry;
        this.uploaded = $.uploaded;
        this.watermark = $.watermark;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamState $;

        public Builder() {
            $ = new StreamState();
        }

        public Builder(StreamState defaults) {
            $ = new StreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(@Nullable Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param created The date and time the media item was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date and time the media item was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param duration The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Double> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
         * 
         * @return builder
         * 
         */
        public Builder duration(Double duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(@Nullable Output<String> identifier) {
            $.identifier = identifier;
            return this;
        }

        /**
         * @param identifier A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder identifier(String identifier) {
            return identifier(Output.of(identifier));
        }

        public Builder input(@Nullable Output<StreamInputArgs> input) {
            $.input = input;
            return this;
        }

        public Builder input(StreamInputArgs input) {
            return input(Output.of(input));
        }

        /**
         * @param liveInput The live input ID used to upload a video with Stream Live.
         * 
         * @return builder
         * 
         */
        public Builder liveInput(@Nullable Output<String> liveInput) {
            $.liveInput = liveInput;
            return this;
        }

        /**
         * @param liveInput The live input ID used to upload a video with Stream Live.
         * 
         * @return builder
         * 
         */
        public Builder liveInput(String liveInput) {
            return liveInput(Output.of(liveInput));
        }

        /**
         * @param maxDurationSeconds The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
         * 
         * @return builder
         * 
         */
        public Builder maxDurationSeconds(@Nullable Output<Integer> maxDurationSeconds) {
            $.maxDurationSeconds = maxDurationSeconds;
            return this;
        }

        /**
         * @param maxDurationSeconds The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
         * 
         * @return builder
         * 
         */
        public Builder maxDurationSeconds(Integer maxDurationSeconds) {
            return maxDurationSeconds(Output.of(maxDurationSeconds));
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing videos.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing videos.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param modified The date and time the media item was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(@Nullable Output<String> modified) {
            $.modified = modified;
            return this;
        }

        /**
         * @param modified The date and time the media item was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(String modified) {
            return modified(Output.of(modified));
        }

        public Builder playback(@Nullable Output<StreamPlaybackArgs> playback) {
            $.playback = playback;
            return this;
        }

        public Builder playback(StreamPlaybackArgs playback) {
            return playback(Output.of(playback));
        }

        /**
         * @param preview The video&#39;s preview page URI. This field is omitted until encoding is complete.
         * 
         * @return builder
         * 
         */
        public Builder preview(@Nullable Output<String> preview) {
            $.preview = preview;
            return this;
        }

        /**
         * @param preview The video&#39;s preview page URI. This field is omitted until encoding is complete.
         * 
         * @return builder
         * 
         */
        public Builder preview(String preview) {
            return preview(Output.of(preview));
        }

        /**
         * @param readyToStream Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
         * 
         * @return builder
         * 
         */
        public Builder readyToStream(@Nullable Output<Boolean> readyToStream) {
            $.readyToStream = readyToStream;
            return this;
        }

        /**
         * @param readyToStream Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
         * 
         * @return builder
         * 
         */
        public Builder readyToStream(Boolean readyToStream) {
            return readyToStream(Output.of(readyToStream));
        }

        /**
         * @param readyToStreamAt Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
         * 
         * @return builder
         * 
         */
        public Builder readyToStreamAt(@Nullable Output<String> readyToStreamAt) {
            $.readyToStreamAt = readyToStreamAt;
            return this;
        }

        /**
         * @param readyToStreamAt Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
         * 
         * @return builder
         * 
         */
        public Builder readyToStreamAt(String readyToStreamAt) {
            return readyToStreamAt(Output.of(readyToStreamAt));
        }

        /**
         * @param requireSignedUrls Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(@Nullable Output<Boolean> requireSignedUrls) {
            $.requireSignedUrls = requireSignedUrls;
            return this;
        }

        /**
         * @param requireSignedUrls Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            return requireSignedUrls(Output.of(requireSignedUrls));
        }

        /**
         * @param scheduledDeletion Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeletion(@Nullable Output<String> scheduledDeletion) {
            $.scheduledDeletion = scheduledDeletion;
            return this;
        }

        /**
         * @param scheduledDeletion Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
         * 
         * @return builder
         * 
         */
        public Builder scheduledDeletion(String scheduledDeletion) {
            return scheduledDeletion(Output.of(scheduledDeletion));
        }

        /**
         * @param size The size of the media item in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Double> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the media item in bytes.
         * 
         * @return builder
         * 
         */
        public Builder size(Double size) {
            return size(Output.of(size));
        }

        /**
         * @param status Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<StreamStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
         * 
         * @return builder
         * 
         */
        public Builder status(StreamStatusArgs status) {
            return status(Output.of(status));
        }

        /**
         * @param thumbnail The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
         * 
         * @return builder
         * 
         */
        public Builder thumbnail(@Nullable Output<String> thumbnail) {
            $.thumbnail = thumbnail;
            return this;
        }

        /**
         * @param thumbnail The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
         * 
         * @return builder
         * 
         */
        public Builder thumbnail(String thumbnail) {
            return thumbnail(Output.of(thumbnail));
        }

        /**
         * @param thumbnailTimestampPct The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
         * 
         * @return builder
         * 
         */
        public Builder thumbnailTimestampPct(@Nullable Output<Double> thumbnailTimestampPct) {
            $.thumbnailTimestampPct = thumbnailTimestampPct;
            return this;
        }

        /**
         * @param thumbnailTimestampPct The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
         * 
         * @return builder
         * 
         */
        public Builder thumbnailTimestampPct(Double thumbnailTimestampPct) {
            return thumbnailTimestampPct(Output.of(thumbnailTimestampPct));
        }

        /**
         * @param uid A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid A Cloudflare-generated unique identifier for a media item.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param uploadExpiry The date and time when the video upload URL is no longer valid for direct user uploads.
         * 
         * @return builder
         * 
         */
        public Builder uploadExpiry(@Nullable Output<String> uploadExpiry) {
            $.uploadExpiry = uploadExpiry;
            return this;
        }

        /**
         * @param uploadExpiry The date and time when the video upload URL is no longer valid for direct user uploads.
         * 
         * @return builder
         * 
         */
        public Builder uploadExpiry(String uploadExpiry) {
            return uploadExpiry(Output.of(uploadExpiry));
        }

        /**
         * @param uploaded The date and time the media item was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder uploaded(@Nullable Output<String> uploaded) {
            $.uploaded = uploaded;
            return this;
        }

        /**
         * @param uploaded The date and time the media item was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder uploaded(String uploaded) {
            return uploaded(Output.of(uploaded));
        }

        public Builder watermark(@Nullable Output<StreamWatermarkArgs> watermark) {
            $.watermark = watermark;
            return this;
        }

        public Builder watermark(StreamWatermarkArgs watermark) {
            return watermark(Output.of(watermark));
        }

        public StreamState build() {
            return $;
        }
    }

}
