// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LeakedCredentialCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final LeakedCredentialCheckArgs Empty = new LeakedCredentialCheckArgs();

    /**
     * Determines whether or not Leaked Credential Checks are enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Determines whether or not Leaked Credential Checks are enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private LeakedCredentialCheckArgs() {}

    private LeakedCredentialCheckArgs(LeakedCredentialCheckArgs $) {
        this.enabled = $.enabled;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LeakedCredentialCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LeakedCredentialCheckArgs $;

        public Builder() {
            $ = new LeakedCredentialCheckArgs();
        }

        public Builder(LeakedCredentialCheckArgs defaults) {
            $ = new LeakedCredentialCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Determines whether or not Leaked Credential Checks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Determines whether or not Leaked Credential Checks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LeakedCredentialCheckArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("LeakedCredentialCheckArgs", "zoneId");
            }
            return $;
        }
    }

}
