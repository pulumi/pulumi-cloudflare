// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkerScriptBindingOutboundArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerScriptBindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerScriptBindingArgs Empty = new WorkerScriptBindingArgs();

    /**
     * Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<String> algorithm;

    /**
     * @return Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
     * 
     */
    public Optional<Output<String>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * List of allowed destination addresses.
     * 
     */
    @Import(name="allowedDestinationAddresses")
    private @Nullable Output<List<String>> allowedDestinationAddresses;

    /**
     * @return List of allowed destination addresses.
     * 
     */
    public Optional<Output<List<String>>> allowedDestinationAddresses() {
        return Optional.ofNullable(this.allowedDestinationAddresses);
    }

    /**
     * List of allowed sender addresses.
     * 
     */
    @Import(name="allowedSenderAddresses")
    private @Nullable Output<List<String>> allowedSenderAddresses;

    /**
     * @return List of allowed sender addresses.
     * 
     */
    public Optional<Output<List<String>>> allowedSenderAddresses() {
        return Optional.ofNullable(this.allowedSenderAddresses);
    }

    /**
     * R2 bucket to bind to.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return R2 bucket to bind to.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * Identifier of the certificate to bind to.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return Identifier of the certificate to bind to.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The exported class name of the Durable Object.
     * 
     */
    @Import(name="className")
    private @Nullable Output<String> className;

    /**
     * @return The exported class name of the Durable Object.
     * 
     */
    public Optional<Output<String>> className() {
        return Optional.ofNullable(this.className);
    }

    /**
     * The name of the dataset to bind to.
     * 
     */
    @Import(name="dataset")
    private @Nullable Output<String> dataset;

    /**
     * @return The name of the dataset to bind to.
     * 
     */
    public Optional<Output<String>> dataset() {
        return Optional.ofNullable(this.dataset);
    }

    /**
     * Destination address for the email.
     * 
     */
    @Import(name="destinationAddress")
    private @Nullable Output<String> destinationAddress;

    /**
     * @return Destination address for the email.
     * 
     */
    public Optional<Output<String>> destinationAddress() {
        return Optional.ofNullable(this.destinationAddress);
    }

    /**
     * The environment of the script_name to bind to.
     * 
     */
    @Import(name="environment")
    private @Nullable Output<String> environment;

    /**
     * @return The environment of the script_name to bind to.
     * 
     */
    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    /**
     * Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
     * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
     * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Identifier of the D1 database to bind to.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Identifier of the D1 database to bind to.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the Vectorize index to bind to.
     * 
     */
    @Import(name="indexName")
    private @Nullable Output<String> indexName;

    /**
     * @return Name of the Vectorize index to bind to.
     * 
     */
    public Optional<Output<String>> indexName() {
        return Optional.ofNullable(this.indexName);
    }

    /**
     * JSON data to use.
     * 
     */
    @Import(name="json")
    private @Nullable Output<String> json;

    /**
     * @return JSON data to use.
     * 
     */
    public Optional<Output<String>> json() {
        return Optional.ofNullable(this.json);
    }

    /**
     * The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
     * Available values: &#34;eu&#34;, &#34;fedramp&#34;.
     * 
     */
    @Import(name="jurisdiction")
    private @Nullable Output<String> jurisdiction;

    /**
     * @return The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
     * Available values: &#34;eu&#34;, &#34;fedramp&#34;.
     * 
     */
    public Optional<Output<String>> jurisdiction() {
        return Optional.ofNullable(this.jurisdiction);
    }

    /**
     * Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
     * 
     */
    @Import(name="keyBase64")
    private @Nullable Output<String> keyBase64;

    /**
     * @return Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
     * 
     */
    public Optional<Output<String>> keyBase64() {
        return Optional.ofNullable(this.keyBase64);
    }

    /**
     * Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
     * 
     */
    @Import(name="keyJwk")
    private @Nullable Output<String> keyJwk;

    /**
     * @return Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
     * 
     */
    public Optional<Output<String>> keyJwk() {
        return Optional.ofNullable(this.keyJwk);
    }

    /**
     * A JavaScript variable name for the binding.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A JavaScript variable name for the binding.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Namespace to bind to.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Namespace to bind to.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Namespace identifier tag.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return Namespace identifier tag.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
     * 
     */
    @Import(name="oldName")
    private @Nullable Output<String> oldName;

    /**
     * @return The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
     * 
     */
    public Optional<Output<String>> oldName() {
        return Optional.ofNullable(this.oldName);
    }

    /**
     * Outbound worker.
     * 
     */
    @Import(name="outbound")
    private @Nullable Output<WorkerScriptBindingOutboundArgs> outbound;

    /**
     * @return Outbound worker.
     * 
     */
    public Optional<Output<WorkerScriptBindingOutboundArgs>> outbound() {
        return Optional.ofNullable(this.outbound);
    }

    /**
     * The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
     * 
     */
    @Import(name="part")
    private @Nullable Output<String> part;

    /**
     * @return The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
     * 
     */
    public Optional<Output<String>> part() {
        return Optional.ofNullable(this.part);
    }

    /**
     * Name of the Pipeline to bind to.
     * 
     */
    @Import(name="pipeline")
    private @Nullable Output<String> pipeline;

    /**
     * @return Name of the Pipeline to bind to.
     * 
     */
    public Optional<Output<String>> pipeline() {
        return Optional.ofNullable(this.pipeline);
    }

    /**
     * Name of the Queue to bind to.
     * 
     */
    @Import(name="queueName")
    private @Nullable Output<String> queueName;

    /**
     * @return Name of the Queue to bind to.
     * 
     */
    public Optional<Output<String>> queueName() {
        return Optional.ofNullable(this.queueName);
    }

    /**
     * The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    @Import(name="scriptName")
    private @Nullable Output<String> scriptName;

    /**
     * @return The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    public Optional<Output<String>> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }

    /**
     * Name of the secret in the store.
     * 
     */
    @Import(name="secretName")
    private @Nullable Output<String> secretName;

    /**
     * @return Name of the secret in the store.
     * 
     */
    public Optional<Output<String>> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * Name of Worker to bind to.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Name of Worker to bind to.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * ID of the store containing the secret.
     * 
     */
    @Import(name="storeId")
    private @Nullable Output<String> storeId;

    /**
     * @return ID of the store containing the secret.
     * 
     */
    public Optional<Output<String>> storeId() {
        return Optional.ofNullable(this.storeId);
    }

    /**
     * The text value to use.
     * 
     */
    @Import(name="text")
    private @Nullable Output<String> text;

    /**
     * @return The text value to use.
     * 
     */
    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    /**
     * The kind of resource that the binding provides.
     * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;data*blob&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;inherit&#34;, &#34;images&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;send*email&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;text*blob&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;, &#34;wasm*module&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The kind of resource that the binding provides.
     * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;data*blob&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;inherit&#34;, &#34;images&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;send*email&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;text*blob&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;, &#34;wasm*module&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
     * 
     */
    @Import(name="usages")
    private @Nullable Output<List<String>> usages;

    /**
     * @return Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
     * 
     */
    public Optional<Output<List<String>>> usages() {
        return Optional.ofNullable(this.usages);
    }

    /**
     * Identifier for the version to inherit the binding from, which can be the version ID or the literal &#34;latest&#34; to inherit from the latest version. Defaults to inheriting the binding from the latest version.
     * 
     */
    @Import(name="versionId")
    private @Nullable Output<String> versionId;

    /**
     * @return Identifier for the version to inherit the binding from, which can be the version ID or the literal &#34;latest&#34; to inherit from the latest version. Defaults to inheriting the binding from the latest version.
     * 
     */
    public Optional<Output<String>> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    /**
     * Name of the Workflow to bind to.
     * 
     */
    @Import(name="workflowName")
    private @Nullable Output<String> workflowName;

    /**
     * @return Name of the Workflow to bind to.
     * 
     */
    public Optional<Output<String>> workflowName() {
        return Optional.ofNullable(this.workflowName);
    }

    private WorkerScriptBindingArgs() {}

    private WorkerScriptBindingArgs(WorkerScriptBindingArgs $) {
        this.algorithm = $.algorithm;
        this.allowedDestinationAddresses = $.allowedDestinationAddresses;
        this.allowedSenderAddresses = $.allowedSenderAddresses;
        this.bucketName = $.bucketName;
        this.certificateId = $.certificateId;
        this.className = $.className;
        this.dataset = $.dataset;
        this.destinationAddress = $.destinationAddress;
        this.environment = $.environment;
        this.format = $.format;
        this.id = $.id;
        this.indexName = $.indexName;
        this.json = $.json;
        this.jurisdiction = $.jurisdiction;
        this.keyBase64 = $.keyBase64;
        this.keyJwk = $.keyJwk;
        this.name = $.name;
        this.namespace = $.namespace;
        this.namespaceId = $.namespaceId;
        this.oldName = $.oldName;
        this.outbound = $.outbound;
        this.part = $.part;
        this.pipeline = $.pipeline;
        this.queueName = $.queueName;
        this.scriptName = $.scriptName;
        this.secretName = $.secretName;
        this.service = $.service;
        this.storeId = $.storeId;
        this.text = $.text;
        this.type = $.type;
        this.usages = $.usages;
        this.versionId = $.versionId;
        this.workflowName = $.workflowName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerScriptBindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerScriptBindingArgs $;

        public Builder() {
            $ = new WorkerScriptBindingArgs();
        }

        public Builder(WorkerScriptBindingArgs defaults) {
            $ = new WorkerScriptBindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param allowedDestinationAddresses List of allowed destination addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedDestinationAddresses(@Nullable Output<List<String>> allowedDestinationAddresses) {
            $.allowedDestinationAddresses = allowedDestinationAddresses;
            return this;
        }

        /**
         * @param allowedDestinationAddresses List of allowed destination addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedDestinationAddresses(List<String> allowedDestinationAddresses) {
            return allowedDestinationAddresses(Output.of(allowedDestinationAddresses));
        }

        /**
         * @param allowedDestinationAddresses List of allowed destination addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedDestinationAddresses(String... allowedDestinationAddresses) {
            return allowedDestinationAddresses(List.of(allowedDestinationAddresses));
        }

        /**
         * @param allowedSenderAddresses List of allowed sender addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedSenderAddresses(@Nullable Output<List<String>> allowedSenderAddresses) {
            $.allowedSenderAddresses = allowedSenderAddresses;
            return this;
        }

        /**
         * @param allowedSenderAddresses List of allowed sender addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedSenderAddresses(List<String> allowedSenderAddresses) {
            return allowedSenderAddresses(Output.of(allowedSenderAddresses));
        }

        /**
         * @param allowedSenderAddresses List of allowed sender addresses.
         * 
         * @return builder
         * 
         */
        public Builder allowedSenderAddresses(String... allowedSenderAddresses) {
            return allowedSenderAddresses(List.of(allowedSenderAddresses));
        }

        /**
         * @param bucketName R2 bucket to bind to.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName R2 bucket to bind to.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param certificateId Identifier of the certificate to bind to.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId Identifier of the certificate to bind to.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param className The exported class name of the Durable Object.
         * 
         * @return builder
         * 
         */
        public Builder className(@Nullable Output<String> className) {
            $.className = className;
            return this;
        }

        /**
         * @param className The exported class name of the Durable Object.
         * 
         * @return builder
         * 
         */
        public Builder className(String className) {
            return className(Output.of(className));
        }

        /**
         * @param dataset The name of the dataset to bind to.
         * 
         * @return builder
         * 
         */
        public Builder dataset(@Nullable Output<String> dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param dataset The name of the dataset to bind to.
         * 
         * @return builder
         * 
         */
        public Builder dataset(String dataset) {
            return dataset(Output.of(dataset));
        }

        /**
         * @param destinationAddress Destination address for the email.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddress(@Nullable Output<String> destinationAddress) {
            $.destinationAddress = destinationAddress;
            return this;
        }

        /**
         * @param destinationAddress Destination address for the email.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddress(String destinationAddress) {
            return destinationAddress(Output.of(destinationAddress));
        }

        /**
         * @param environment The environment of the script_name to bind to.
         * 
         * @return builder
         * 
         */
        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The environment of the script_name to bind to.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param format Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
         * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
         * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param id Identifier of the D1 database to bind to.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier of the D1 database to bind to.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param indexName Name of the Vectorize index to bind to.
         * 
         * @return builder
         * 
         */
        public Builder indexName(@Nullable Output<String> indexName) {
            $.indexName = indexName;
            return this;
        }

        /**
         * @param indexName Name of the Vectorize index to bind to.
         * 
         * @return builder
         * 
         */
        public Builder indexName(String indexName) {
            return indexName(Output.of(indexName));
        }

        /**
         * @param json JSON data to use.
         * 
         * @return builder
         * 
         */
        public Builder json(@Nullable Output<String> json) {
            $.json = json;
            return this;
        }

        /**
         * @param json JSON data to use.
         * 
         * @return builder
         * 
         */
        public Builder json(String json) {
            return json(Output.of(json));
        }

        /**
         * @param jurisdiction The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
         * Available values: &#34;eu&#34;, &#34;fedramp&#34;.
         * 
         * @return builder
         * 
         */
        public Builder jurisdiction(@Nullable Output<String> jurisdiction) {
            $.jurisdiction = jurisdiction;
            return this;
        }

        /**
         * @param jurisdiction The [jurisdiction](https://developers.cloudflare.com/r2/reference/data-location/#jurisdictional-restrictions) of the R2 bucket.
         * Available values: &#34;eu&#34;, &#34;fedramp&#34;.
         * 
         * @return builder
         * 
         */
        public Builder jurisdiction(String jurisdiction) {
            return jurisdiction(Output.of(jurisdiction));
        }

        /**
         * @param keyBase64 Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
         * 
         * @return builder
         * 
         */
        public Builder keyBase64(@Nullable Output<String> keyBase64) {
            $.keyBase64 = keyBase64;
            return this;
        }

        /**
         * @param keyBase64 Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
         * 
         * @return builder
         * 
         */
        public Builder keyBase64(String keyBase64) {
            return keyBase64(Output.of(keyBase64));
        }

        /**
         * @param keyJwk Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder keyJwk(@Nullable Output<String> keyJwk) {
            $.keyJwk = keyJwk;
            return this;
        }

        /**
         * @param keyJwk Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
         * 
         * @return builder
         * 
         */
        public Builder keyJwk(String keyJwk) {
            return keyJwk(Output.of(keyJwk));
        }

        /**
         * @param name A JavaScript variable name for the binding.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A JavaScript variable name for the binding.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespace Namespace to bind to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Namespace to bind to.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param namespaceId Namespace identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId Namespace identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param oldName The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
         * 
         * @return builder
         * 
         */
        public Builder oldName(@Nullable Output<String> oldName) {
            $.oldName = oldName;
            return this;
        }

        /**
         * @param oldName The old name of the inherited binding. If set, the binding will be renamed from `old_name` to `name` in the new version. If not set, the binding will keep the same name between versions.
         * 
         * @return builder
         * 
         */
        public Builder oldName(String oldName) {
            return oldName(Output.of(oldName));
        }

        /**
         * @param outbound Outbound worker.
         * 
         * @return builder
         * 
         */
        public Builder outbound(@Nullable Output<WorkerScriptBindingOutboundArgs> outbound) {
            $.outbound = outbound;
            return this;
        }

        /**
         * @param outbound Outbound worker.
         * 
         * @return builder
         * 
         */
        public Builder outbound(WorkerScriptBindingOutboundArgs outbound) {
            return outbound(Output.of(outbound));
        }

        /**
         * @param part The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
         * 
         * @return builder
         * 
         */
        public Builder part(@Nullable Output<String> part) {
            $.part = part;
            return this;
        }

        /**
         * @param part The name of the file containing the data content. Only accepted for `service worker syntax` Workers.
         * 
         * @return builder
         * 
         */
        public Builder part(String part) {
            return part(Output.of(part));
        }

        /**
         * @param pipeline Name of the Pipeline to bind to.
         * 
         * @return builder
         * 
         */
        public Builder pipeline(@Nullable Output<String> pipeline) {
            $.pipeline = pipeline;
            return this;
        }

        /**
         * @param pipeline Name of the Pipeline to bind to.
         * 
         * @return builder
         * 
         */
        public Builder pipeline(String pipeline) {
            return pipeline(Output.of(pipeline));
        }

        /**
         * @param queueName Name of the Queue to bind to.
         * 
         * @return builder
         * 
         */
        public Builder queueName(@Nullable Output<String> queueName) {
            $.queueName = queueName;
            return this;
        }

        /**
         * @param queueName Name of the Queue to bind to.
         * 
         * @return builder
         * 
         */
        public Builder queueName(String queueName) {
            return queueName(Output.of(queueName));
        }

        /**
         * @param scriptName The script where the Durable Object is defined, if it is external to this Worker.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(@Nullable Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName The script where the Durable Object is defined, if it is external to this Worker.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        /**
         * @param secretName Name of the secret in the store.
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName Name of the secret in the store.
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param service Name of Worker to bind to.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Name of Worker to bind to.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param storeId ID of the store containing the secret.
         * 
         * @return builder
         * 
         */
        public Builder storeId(@Nullable Output<String> storeId) {
            $.storeId = storeId;
            return this;
        }

        /**
         * @param storeId ID of the store containing the secret.
         * 
         * @return builder
         * 
         */
        public Builder storeId(String storeId) {
            return storeId(Output.of(storeId));
        }

        /**
         * @param text The text value to use.
         * 
         * @return builder
         * 
         */
        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The text value to use.
         * 
         * @return builder
         * 
         */
        public Builder text(String text) {
            return text(Output.of(text));
        }

        /**
         * @param type The kind of resource that the binding provides.
         * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;data*blob&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;inherit&#34;, &#34;images&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;send*email&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;text*blob&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;, &#34;wasm*module&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The kind of resource that the binding provides.
         * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;data*blob&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;inherit&#34;, &#34;images&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;send*email&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;text*blob&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;, &#34;wasm*module&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usages Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
         * 
         * @return builder
         * 
         */
        public Builder usages(@Nullable Output<List<String>> usages) {
            $.usages = usages;
            return this;
        }

        /**
         * @param usages Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
         * 
         * @return builder
         * 
         */
        public Builder usages(List<String> usages) {
            return usages(Output.of(usages));
        }

        /**
         * @param usages Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
         * 
         * @return builder
         * 
         */
        public Builder usages(String... usages) {
            return usages(List.of(usages));
        }

        /**
         * @param versionId Identifier for the version to inherit the binding from, which can be the version ID or the literal &#34;latest&#34; to inherit from the latest version. Defaults to inheriting the binding from the latest version.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable Output<String> versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param versionId Identifier for the version to inherit the binding from, which can be the version ID or the literal &#34;latest&#34; to inherit from the latest version. Defaults to inheriting the binding from the latest version.
         * 
         * @return builder
         * 
         */
        public Builder versionId(String versionId) {
            return versionId(Output.of(versionId));
        }

        /**
         * @param workflowName Name of the Workflow to bind to.
         * 
         * @return builder
         * 
         */
        public Builder workflowName(@Nullable Output<String> workflowName) {
            $.workflowName = workflowName;
            return this;
        }

        /**
         * @param workflowName Name of the Workflow to bind to.
         * 
         * @return builder
         * 
         */
        public Builder workflowName(String workflowName) {
            return workflowName(Output.of(workflowName));
        }

        public WorkerScriptBindingArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkerScriptBindingArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("WorkerScriptBindingArgs", "type");
            }
            return $;
        }
    }

}
