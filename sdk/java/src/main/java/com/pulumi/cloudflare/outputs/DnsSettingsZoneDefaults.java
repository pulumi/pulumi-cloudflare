// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.DnsSettingsZoneDefaultsInternalDns;
import com.pulumi.cloudflare.outputs.DnsSettingsZoneDefaultsNameservers;
import com.pulumi.cloudflare.outputs.DnsSettingsZoneDefaultsSoa;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DnsSettingsZoneDefaults {
    /**
     * @return Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     * 
     */
    private @Nullable Boolean flattenAllCnames;
    /**
     * @return Whether to enable Foundation DNS Advanced Nameservers on the zone.
     * 
     */
    private @Nullable Boolean foundationDns;
    /**
     * @return Settings for this internal zone.
     * 
     */
    private @Nullable DnsSettingsZoneDefaultsInternalDns internalDns;
    /**
     * @return Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     * 
     */
    private @Nullable Boolean multiProvider;
    /**
     * @return Settings determining the nameservers through which the zone should be available.
     * 
     */
    private @Nullable DnsSettingsZoneDefaultsNameservers nameservers;
    /**
     * @return The time to live (TTL) of the zone&#39;s nameserver (NS) records.
     * 
     */
    private @Nullable Double nsTtl;
    /**
     * @return Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     * 
     */
    private @Nullable Boolean secondaryOverrides;
    /**
     * @return Components of the zone&#39;s SOA record.
     * 
     */
    private @Nullable DnsSettingsZoneDefaultsSoa soa;
    /**
     * @return Whether the zone mode is a regular or CDN/DNS only zone.
     * 
     */
    private @Nullable String zoneMode;

    private DnsSettingsZoneDefaults() {}
    /**
     * @return Whether to flatten all CNAME records in the zone. Note that, due to DNS limitations, a CNAME record at the zone apex will always be flattened.
     * 
     */
    public Optional<Boolean> flattenAllCnames() {
        return Optional.ofNullable(this.flattenAllCnames);
    }
    /**
     * @return Whether to enable Foundation DNS Advanced Nameservers on the zone.
     * 
     */
    public Optional<Boolean> foundationDns() {
        return Optional.ofNullable(this.foundationDns);
    }
    /**
     * @return Settings for this internal zone.
     * 
     */
    public Optional<DnsSettingsZoneDefaultsInternalDns> internalDns() {
        return Optional.ofNullable(this.internalDns);
    }
    /**
     * @return Whether to enable multi-provider DNS, which causes Cloudflare to activate the zone even when non-Cloudflare NS records exist, and to respect NS records at the zone apex during outbound zone transfers.
     * 
     */
    public Optional<Boolean> multiProvider() {
        return Optional.ofNullable(this.multiProvider);
    }
    /**
     * @return Settings determining the nameservers through which the zone should be available.
     * 
     */
    public Optional<DnsSettingsZoneDefaultsNameservers> nameservers() {
        return Optional.ofNullable(this.nameservers);
    }
    /**
     * @return The time to live (TTL) of the zone&#39;s nameserver (NS) records.
     * 
     */
    public Optional<Double> nsTtl() {
        return Optional.ofNullable(this.nsTtl);
    }
    /**
     * @return Allows a Secondary DNS zone to use (proxied) override records and CNAME flattening at the zone apex.
     * 
     */
    public Optional<Boolean> secondaryOverrides() {
        return Optional.ofNullable(this.secondaryOverrides);
    }
    /**
     * @return Components of the zone&#39;s SOA record.
     * 
     */
    public Optional<DnsSettingsZoneDefaultsSoa> soa() {
        return Optional.ofNullable(this.soa);
    }
    /**
     * @return Whether the zone mode is a regular or CDN/DNS only zone.
     * 
     */
    public Optional<String> zoneMode() {
        return Optional.ofNullable(this.zoneMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DnsSettingsZoneDefaults defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean flattenAllCnames;
        private @Nullable Boolean foundationDns;
        private @Nullable DnsSettingsZoneDefaultsInternalDns internalDns;
        private @Nullable Boolean multiProvider;
        private @Nullable DnsSettingsZoneDefaultsNameservers nameservers;
        private @Nullable Double nsTtl;
        private @Nullable Boolean secondaryOverrides;
        private @Nullable DnsSettingsZoneDefaultsSoa soa;
        private @Nullable String zoneMode;
        public Builder() {}
        public Builder(DnsSettingsZoneDefaults defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.flattenAllCnames = defaults.flattenAllCnames;
    	      this.foundationDns = defaults.foundationDns;
    	      this.internalDns = defaults.internalDns;
    	      this.multiProvider = defaults.multiProvider;
    	      this.nameservers = defaults.nameservers;
    	      this.nsTtl = defaults.nsTtl;
    	      this.secondaryOverrides = defaults.secondaryOverrides;
    	      this.soa = defaults.soa;
    	      this.zoneMode = defaults.zoneMode;
        }

        @CustomType.Setter
        public Builder flattenAllCnames(@Nullable Boolean flattenAllCnames) {

            this.flattenAllCnames = flattenAllCnames;
            return this;
        }
        @CustomType.Setter
        public Builder foundationDns(@Nullable Boolean foundationDns) {

            this.foundationDns = foundationDns;
            return this;
        }
        @CustomType.Setter
        public Builder internalDns(@Nullable DnsSettingsZoneDefaultsInternalDns internalDns) {

            this.internalDns = internalDns;
            return this;
        }
        @CustomType.Setter
        public Builder multiProvider(@Nullable Boolean multiProvider) {

            this.multiProvider = multiProvider;
            return this;
        }
        @CustomType.Setter
        public Builder nameservers(@Nullable DnsSettingsZoneDefaultsNameservers nameservers) {

            this.nameservers = nameservers;
            return this;
        }
        @CustomType.Setter
        public Builder nsTtl(@Nullable Double nsTtl) {

            this.nsTtl = nsTtl;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryOverrides(@Nullable Boolean secondaryOverrides) {

            this.secondaryOverrides = secondaryOverrides;
            return this;
        }
        @CustomType.Setter
        public Builder soa(@Nullable DnsSettingsZoneDefaultsSoa soa) {

            this.soa = soa;
            return this;
        }
        @CustomType.Setter
        public Builder zoneMode(@Nullable String zoneMode) {

            this.zoneMode = zoneMode;
            return this;
        }
        public DnsSettingsZoneDefaults build() {
            final var _resultValue = new DnsSettingsZoneDefaults();
            _resultValue.flattenAllCnames = flattenAllCnames;
            _resultValue.foundationDns = foundationDns;
            _resultValue.internalDns = internalDns;
            _resultValue.multiProvider = multiProvider;
            _resultValue.nameservers = nameservers;
            _resultValue.nsTtl = nsTtl;
            _resultValue.secondaryOverrides = secondaryOverrides;
            _resultValue.soa = soa;
            _resultValue.zoneMode = zoneMode;
            return _resultValue;
        }
    }
}
