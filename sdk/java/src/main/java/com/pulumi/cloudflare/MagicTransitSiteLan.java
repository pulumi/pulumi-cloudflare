// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.MagicTransitSiteLanArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.MagicTransitSiteLanState;
import com.pulumi.cloudflare.outputs.MagicTransitSiteLanNat;
import com.pulumi.cloudflare.outputs.MagicTransitSiteLanRoutedSubnet;
import com.pulumi.cloudflare.outputs.MagicTransitSiteLanStaticAddressing;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.MagicTransitSiteLan;
 * import com.pulumi.cloudflare.MagicTransitSiteLanArgs;
 * import com.pulumi.cloudflare.inputs.MagicTransitSiteLanNatArgs;
 * import com.pulumi.cloudflare.inputs.MagicTransitSiteLanRoutedSubnetArgs;
 * import com.pulumi.cloudflare.inputs.MagicTransitSiteLanRoutedSubnetNatArgs;
 * import com.pulumi.cloudflare.inputs.MagicTransitSiteLanStaticAddressingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleMagicTransitSiteLan = new MagicTransitSiteLan("exampleMagicTransitSiteLan", MagicTransitSiteLanArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .siteId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .physport(1)
 *             .vlanTag(0)
 *             .haLink(true)
 *             .name("name")
 *             .nat(MagicTransitSiteLanNatArgs.builder()
 *                 .static_prefix("192.0.2.0/24")
 *                 .build())
 *             .routedSubnets(MagicTransitSiteLanRoutedSubnetArgs.builder()
 *                 .next_hop("192.0.2.1")
 *                 .prefix("192.0.2.0/24")
 *                 .nat(MagicTransitSiteLanRoutedSubnetNatArgs.builder()
 *                     .staticPrefix("192.0.2.0/24")
 *                     .build())
 *                 .build())
 *             .staticAddressing(MagicTransitSiteLanStaticAddressingArgs.builder()
 *                 .address("192.0.2.0/24")
 *                 .dhcp_relay(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .dhcp_server(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .secondary_address("192.0.2.0/24")
 *                 .virtual_address("192.0.2.0/24")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
<<<<<<< HEAD
=======
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan example &#39;&lt;account_id&gt;/&lt;site_id&gt;/&lt;lan_id&gt;&#39;
 * ```
 * 
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
 */
@ResourceType(type="cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan")
public class MagicTransitSiteLan extends com.pulumi.resources.CustomResource {
    /**
     * Identifier
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    @Export(name="haLink", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> haLink;

    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    public Output<Optional<Boolean>> haLink() {
        return Codegen.optional(this.haLink);
    }
<<<<<<< HEAD
    /**
     * Identifier
     * 
     */
    @Export(name="lanId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lanId;

    /**
     * @return Identifier
     * 
     */
    public Output<Optional<String>> lanId() {
        return Codegen.optional(this.lanId);
    }
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> name;

    public Output<Optional<String>> name() {
        return Codegen.optional(this.name);
    }
    @Export(name="nat", refs={MagicTransitSiteLanNat.class}, tree="[0]")
    private Output<MagicTransitSiteLanNat> nat;

    public Output<MagicTransitSiteLanNat> nat() {
        return this.nat;
    }
    @Export(name="physport", refs={Integer.class}, tree="[0]")
    private Output<Integer> physport;

    public Output<Integer> physport() {
        return this.physport;
    }
    @Export(name="routedSubnets", refs={List.class,MagicTransitSiteLanRoutedSubnet.class}, tree="[0,1]")
    private Output<List<MagicTransitSiteLanRoutedSubnet>> routedSubnets;

    public Output<List<MagicTransitSiteLanRoutedSubnet>> routedSubnets() {
        return this.routedSubnets;
    }
    /**
     * Identifier
     * 
     */
    @Export(name="siteId", refs={String.class}, tree="[0]")
    private Output<String> siteId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }
    /**
     * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    @Export(name="staticAddressing", refs={MagicTransitSiteLanStaticAddressing.class}, tree="[0]")
    private Output<MagicTransitSiteLanStaticAddressing> staticAddressing;

    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    public Output<MagicTransitSiteLanStaticAddressing> staticAddressing() {
        return this.staticAddressing;
    }
    /**
     * VLAN port number.
     * 
     */
    @Export(name="vlanTag", refs={Integer.class}, tree="[0]")
    private Output<Integer> vlanTag;

    /**
     * @return VLAN port number.
     * 
     */
    public Output<Integer> vlanTag() {
        return this.vlanTag;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public MagicTransitSiteLan(java.lang.String name) {
        this(name, MagicTransitSiteLanArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public MagicTransitSiteLan(java.lang.String name, MagicTransitSiteLanArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public MagicTransitSiteLan(java.lang.String name, MagicTransitSiteLanArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private MagicTransitSiteLan(java.lang.String name, Output<java.lang.String> id, @Nullable MagicTransitSiteLanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/magicTransitSiteLan:MagicTransitSiteLan", name, state, makeResourceOptions(options, id), false);
    }

    private static MagicTransitSiteLanArgs makeArgs(MagicTransitSiteLanArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? MagicTransitSiteLanArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static MagicTransitSiteLan get(java.lang.String name, Output<java.lang.String> id, @Nullable MagicTransitSiteLanState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new MagicTransitSiteLan(name, id, state, options);
    }
}
