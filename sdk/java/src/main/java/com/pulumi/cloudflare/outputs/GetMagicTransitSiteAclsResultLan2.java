// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSiteAclsResultLan2 {
    /**
     * @return The identifier for the LAN you want to create an ACL policy with.
     * 
     */
    private String lanId;
    /**
     * @return The name of the LAN based on the provided lan_id.
     * 
     */
    private String lanName;
    /**
     * @return Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
     * 
     */
    private List<String> portRanges;
    /**
     * @return Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
     * 
     */
    private List<Integer> ports;
    /**
     * @return Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
     * 
     */
    private List<String> subnets;

    private GetMagicTransitSiteAclsResultLan2() {}
    /**
     * @return The identifier for the LAN you want to create an ACL policy with.
     * 
     */
    public String lanId() {
        return this.lanId;
    }
    /**
     * @return The name of the LAN based on the provided lan_id.
     * 
     */
    public String lanName() {
        return this.lanName;
    }
    /**
     * @return Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
     * 
     */
    public List<String> portRanges() {
        return this.portRanges;
    }
    /**
     * @return Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
     * 
     */
    public List<Integer> ports() {
        return this.ports;
    }
    /**
     * @return Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteAclsResultLan2 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String lanId;
        private String lanName;
        private List<String> portRanges;
        private List<Integer> ports;
        private List<String> subnets;
        public Builder() {}
        public Builder(GetMagicTransitSiteAclsResultLan2 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.lanId = defaults.lanId;
    	      this.lanName = defaults.lanName;
    	      this.portRanges = defaults.portRanges;
    	      this.ports = defaults.ports;
    	      this.subnets = defaults.subnets;
        }

        @CustomType.Setter
        public Builder lanId(String lanId) {
            if (lanId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclsResultLan2", "lanId");
            }
            this.lanId = lanId;
            return this;
        }
        @CustomType.Setter
        public Builder lanName(String lanName) {
            if (lanName == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclsResultLan2", "lanName");
            }
            this.lanName = lanName;
            return this;
        }
        @CustomType.Setter
        public Builder portRanges(List<String> portRanges) {
            if (portRanges == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclsResultLan2", "portRanges");
            }
            this.portRanges = portRanges;
            return this;
        }
        public Builder portRanges(String... portRanges) {
            return portRanges(List.of(portRanges));
        }
        @CustomType.Setter
        public Builder ports(List<Integer> ports) {
            if (ports == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclsResultLan2", "ports");
            }
            this.ports = ports;
            return this;
        }
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            if (subnets == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteAclsResultLan2", "subnets");
            }
            this.subnets = subnets;
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        public GetMagicTransitSiteAclsResultLan2 build() {
            final var _resultValue = new GetMagicTransitSiteAclsResultLan2();
            _resultValue.lanId = lanId;
            _resultValue.lanName = lanName;
            _resultValue.portRanges = portRanges;
            _resultValue.ports = ports;
            _resultValue.subnets = subnets;
            return _resultValue;
        }
    }
}
