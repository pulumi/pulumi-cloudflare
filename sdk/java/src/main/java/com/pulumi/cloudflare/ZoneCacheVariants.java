// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.ZoneCacheVariantsArgs;
import com.pulumi.cloudflare.inputs.ZoneCacheVariantsState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource which customizes Cloudflare zone cache variants.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.ZoneCacheVariants;
 * import com.pulumi.cloudflare.ZoneCacheVariantsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ZoneCacheVariants(&#34;example&#34;, ZoneCacheVariantsArgs.builder()        
 *             .avifs(            
 *                 &#34;image/avif&#34;,
 *                 &#34;image/webp&#34;)
 *             .bmps(            
 *                 &#34;image/bmp&#34;,
 *                 &#34;image/webp&#34;)
 *             .gifs(            
 *                 &#34;image/gif&#34;,
 *                 &#34;image/webp&#34;)
 *             .jp2s(            
 *                 &#34;image/jp2&#34;,
 *                 &#34;image/webp&#34;)
 *             .jpegs(            
 *                 &#34;image/jpeg&#34;,
 *                 &#34;image/webp&#34;)
 *             .jpgs(            
 *                 &#34;image/jpg&#34;,
 *                 &#34;image/webp&#34;)
 *             .jpg2s(            
 *                 &#34;image/jpg2&#34;,
 *                 &#34;image/webp&#34;)
 *             .pngs(            
 *                 &#34;image/png&#34;,
 *                 &#34;image/webp&#34;)
 *             .tifs(            
 *                 &#34;image/tif&#34;,
 *                 &#34;image/webp&#34;)
 *             .tiffs(            
 *                 &#34;image/tiff&#34;,
 *                 &#34;image/webp&#34;)
 *             .webps(            
 *                 &#34;image/jpeg&#34;,
 *                 &#34;image/webp&#34;)
 *             .zoneId(&#34;0da42c8d2132a9ddaf714f9e7c920711&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="cloudflare:index/zoneCacheVariants:ZoneCacheVariants")
public class ZoneCacheVariants extends com.pulumi.resources.CustomResource {
    /**
     * List of strings with the MIME types of all the variants that should be served for avif.
     * 
     */
    @Export(name="avifs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> avifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for avif.
     * 
     */
    public Output<Optional<List<String>>> avifs() {
        return Codegen.optional(this.avifs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for bmp.
     * 
     */
    @Export(name="bmps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> bmps;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for bmp.
     * 
     */
    public Output<Optional<List<String>>> bmps() {
        return Codegen.optional(this.bmps);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for gif.
     * 
     */
    @Export(name="gifs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> gifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for gif.
     * 
     */
    public Output<Optional<List<String>>> gifs() {
        return Codegen.optional(this.gifs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for jp2.
     * 
     */
    @Export(name="jp2s", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> jp2s;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jp2.
     * 
     */
    public Output<Optional<List<String>>> jp2s() {
        return Codegen.optional(this.jp2s);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for jpeg.
     * 
     */
    @Export(name="jpegs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> jpegs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpeg.
     * 
     */
    public Output<Optional<List<String>>> jpegs() {
        return Codegen.optional(this.jpegs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for jpg2.
     * 
     */
    @Export(name="jpg2s", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> jpg2s;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpg2.
     * 
     */
    public Output<Optional<List<String>>> jpg2s() {
        return Codegen.optional(this.jpg2s);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for jpg.
     * 
     */
    @Export(name="jpgs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> jpgs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpg.
     * 
     */
    public Output<Optional<List<String>>> jpgs() {
        return Codegen.optional(this.jpgs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for png.
     * 
     */
    @Export(name="pngs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> pngs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for png.
     * 
     */
    public Output<Optional<List<String>>> pngs() {
        return Codegen.optional(this.pngs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for tiff.
     * 
     */
    @Export(name="tiffs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tiffs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for tiff.
     * 
     */
    public Output<Optional<List<String>>> tiffs() {
        return Codegen.optional(this.tiffs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for tif.
     * 
     */
    @Export(name="tifs", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for tif.
     * 
     */
    public Output<Optional<List<String>>> tifs() {
        return Codegen.optional(this.tifs);
    }
    /**
     * List of strings with the MIME types of all the variants that should be served for webp.
     * 
     */
    @Export(name="webps", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> webps;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for webp.
     * 
     */
    public Output<Optional<List<String>>> webps() {
        return Codegen.optional(this.webps);
    }
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ZoneCacheVariants(String name) {
        this(name, ZoneCacheVariantsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ZoneCacheVariants(String name, ZoneCacheVariantsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ZoneCacheVariants(String name, ZoneCacheVariantsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneCacheVariants:ZoneCacheVariants", name, args == null ? ZoneCacheVariantsArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ZoneCacheVariants(String name, Output<String> id, @Nullable ZoneCacheVariantsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneCacheVariants:ZoneCacheVariants", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ZoneCacheVariants get(String name, Output<String> id, @Nullable ZoneCacheVariantsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ZoneCacheVariants(name, id, state, options);
    }
}
