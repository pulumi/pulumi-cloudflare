// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * The country in which the user lives.
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return The country in which the user lives.
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * User&#39;s first name
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return User&#39;s first name
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * User&#39;s last name
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return User&#39;s last name
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * User&#39;s telephone number
     * 
     */
    @Import(name="telephone")
    private @Nullable Output<String> telephone;

    /**
     * @return User&#39;s telephone number
     * 
     */
    public Optional<Output<String>> telephone() {
        return Optional.ofNullable(this.telephone);
    }

    /**
     * The zipcode or postal code where the user lives.
     * 
     */
    @Import(name="zipcode")
    private @Nullable Output<String> zipcode;

    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    public Optional<Output<String>> zipcode() {
        return Optional.ofNullable(this.zipcode);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.country = $.country;
        this.firstName = $.firstName;
        this.lastName = $.lastName;
        this.telephone = $.telephone;
        this.zipcode = $.zipcode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param country The country in which the user lives.
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country The country in which the user lives.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param telephone User&#39;s telephone number
         * 
         * @return builder
         * 
         */
        public Builder telephone(@Nullable Output<String> telephone) {
            $.telephone = telephone;
            return this;
        }

        /**
         * @param telephone User&#39;s telephone number
         * 
         * @return builder
         * 
         */
        public Builder telephone(String telephone) {
            return telephone(Output.of(telephone));
        }

        /**
         * @param zipcode The zipcode or postal code where the user lives.
         * 
         * @return builder
         * 
         */
        public Builder zipcode(@Nullable Output<String> zipcode) {
            $.zipcode = zipcode;
            return this;
        }

        /**
         * @param zipcode The zipcode or postal code where the user lives.
         * 
         * @return builder
         * 
         */
        public Builder zipcode(String zipcode) {
            return zipcode(Output.of(zipcode));
        }

        public UserState build() {
            return $;
        }
    }

}
