// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.UserOrganizationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Lists the betas that the user is participating in.
     * 
     */
    @Import(name="betas")
    private @Nullable Output<List<String>> betas;

    /**
     * @return Lists the betas that the user is participating in.
     * 
     */
    public Optional<Output<List<String>>> betas() {
        return Optional.ofNullable(this.betas);
    }

    /**
     * The country in which the user lives.
     * 
     */
    @Import(name="country")
    private @Nullable Output<String> country;

    /**
     * @return The country in which the user lives.
     * 
     */
    public Optional<Output<String>> country() {
        return Optional.ofNullable(this.country);
    }

    /**
     * User&#39;s first name
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return User&#39;s first name
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Indicates whether user has any business zones
     * 
     */
    @Import(name="hasBusinessZones")
    private @Nullable Output<Boolean> hasBusinessZones;

    /**
     * @return Indicates whether user has any business zones
     * 
     */
    public Optional<Output<Boolean>> hasBusinessZones() {
        return Optional.ofNullable(this.hasBusinessZones);
    }

    /**
     * Indicates whether user has any enterprise zones
     * 
     */
    @Import(name="hasEnterpriseZones")
    private @Nullable Output<Boolean> hasEnterpriseZones;

    /**
     * @return Indicates whether user has any enterprise zones
     * 
     */
    public Optional<Output<Boolean>> hasEnterpriseZones() {
        return Optional.ofNullable(this.hasEnterpriseZones);
    }

    /**
     * Indicates whether user has any pro zones
     * 
     */
    @Import(name="hasProZones")
    private @Nullable Output<Boolean> hasProZones;

    /**
     * @return Indicates whether user has any pro zones
     * 
     */
    public Optional<Output<Boolean>> hasProZones() {
        return Optional.ofNullable(this.hasProZones);
    }

    /**
     * User&#39;s last name
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return User&#39;s last name
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    @Import(name="organizations")
    private @Nullable Output<List<UserOrganizationArgs>> organizations;

    public Optional<Output<List<UserOrganizationArgs>>> organizations() {
        return Optional.ofNullable(this.organizations);
    }

    /**
     * Indicates whether user has been suspended
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return Indicates whether user has been suspended
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    /**
     * User&#39;s telephone number
     * 
     */
    @Import(name="telephone")
    private @Nullable Output<String> telephone;

    /**
     * @return User&#39;s telephone number
     * 
     */
    public Optional<Output<String>> telephone() {
        return Optional.ofNullable(this.telephone);
    }

    /**
     * Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    @Import(name="twoFactorAuthenticationEnabled")
    private @Nullable Output<Boolean> twoFactorAuthenticationEnabled;

    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    public Optional<Output<Boolean>> twoFactorAuthenticationEnabled() {
        return Optional.ofNullable(this.twoFactorAuthenticationEnabled);
    }

    /**
     * Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
     * 
     */
    @Import(name="twoFactorAuthenticationLocked")
    private @Nullable Output<Boolean> twoFactorAuthenticationLocked;

    /**
     * @return Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
     * 
     */
    public Optional<Output<Boolean>> twoFactorAuthenticationLocked() {
        return Optional.ofNullable(this.twoFactorAuthenticationLocked);
    }

    /**
     * The zipcode or postal code where the user lives.
     * 
     */
    @Import(name="zipcode")
    private @Nullable Output<String> zipcode;

    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    public Optional<Output<String>> zipcode() {
        return Optional.ofNullable(this.zipcode);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.betas = $.betas;
        this.country = $.country;
        this.firstName = $.firstName;
        this.hasBusinessZones = $.hasBusinessZones;
        this.hasEnterpriseZones = $.hasEnterpriseZones;
        this.hasProZones = $.hasProZones;
        this.lastName = $.lastName;
        this.organizations = $.organizations;
        this.suspended = $.suspended;
        this.telephone = $.telephone;
        this.twoFactorAuthenticationEnabled = $.twoFactorAuthenticationEnabled;
        this.twoFactorAuthenticationLocked = $.twoFactorAuthenticationLocked;
        this.zipcode = $.zipcode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param betas Lists the betas that the user is participating in.
         * 
         * @return builder
         * 
         */
        public Builder betas(@Nullable Output<List<String>> betas) {
            $.betas = betas;
            return this;
        }

        /**
         * @param betas Lists the betas that the user is participating in.
         * 
         * @return builder
         * 
         */
        public Builder betas(List<String> betas) {
            return betas(Output.of(betas));
        }

        /**
         * @param betas Lists the betas that the user is participating in.
         * 
         * @return builder
         * 
         */
        public Builder betas(String... betas) {
            return betas(List.of(betas));
        }

        /**
         * @param country The country in which the user lives.
         * 
         * @return builder
         * 
         */
        public Builder country(@Nullable Output<String> country) {
            $.country = country;
            return this;
        }

        /**
         * @param country The country in which the user lives.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            return country(Output.of(country));
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param hasBusinessZones Indicates whether user has any business zones
         * 
         * @return builder
         * 
         */
        public Builder hasBusinessZones(@Nullable Output<Boolean> hasBusinessZones) {
            $.hasBusinessZones = hasBusinessZones;
            return this;
        }

        /**
         * @param hasBusinessZones Indicates whether user has any business zones
         * 
         * @return builder
         * 
         */
        public Builder hasBusinessZones(Boolean hasBusinessZones) {
            return hasBusinessZones(Output.of(hasBusinessZones));
        }

        /**
         * @param hasEnterpriseZones Indicates whether user has any enterprise zones
         * 
         * @return builder
         * 
         */
        public Builder hasEnterpriseZones(@Nullable Output<Boolean> hasEnterpriseZones) {
            $.hasEnterpriseZones = hasEnterpriseZones;
            return this;
        }

        /**
         * @param hasEnterpriseZones Indicates whether user has any enterprise zones
         * 
         * @return builder
         * 
         */
        public Builder hasEnterpriseZones(Boolean hasEnterpriseZones) {
            return hasEnterpriseZones(Output.of(hasEnterpriseZones));
        }

        /**
         * @param hasProZones Indicates whether user has any pro zones
         * 
         * @return builder
         * 
         */
        public Builder hasProZones(@Nullable Output<Boolean> hasProZones) {
            $.hasProZones = hasProZones;
            return this;
        }

        /**
         * @param hasProZones Indicates whether user has any pro zones
         * 
         * @return builder
         * 
         */
        public Builder hasProZones(Boolean hasProZones) {
            return hasProZones(Output.of(hasProZones));
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        public Builder organizations(@Nullable Output<List<UserOrganizationArgs>> organizations) {
            $.organizations = organizations;
            return this;
        }

        public Builder organizations(List<UserOrganizationArgs> organizations) {
            return organizations(Output.of(organizations));
        }

        public Builder organizations(UserOrganizationArgs... organizations) {
            return organizations(List.of(organizations));
        }

        /**
         * @param suspended Indicates whether user has been suspended
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended Indicates whether user has been suspended
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        /**
         * @param telephone User&#39;s telephone number
         * 
         * @return builder
         * 
         */
        public Builder telephone(@Nullable Output<String> telephone) {
            $.telephone = telephone;
            return this;
        }

        /**
         * @param telephone User&#39;s telephone number
         * 
         * @return builder
         * 
         */
        public Builder telephone(String telephone) {
            return telephone(Output.of(telephone));
        }

        /**
         * @param twoFactorAuthenticationEnabled Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationEnabled(@Nullable Output<Boolean> twoFactorAuthenticationEnabled) {
            $.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            return this;
        }

        /**
         * @param twoFactorAuthenticationEnabled Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationEnabled(Boolean twoFactorAuthenticationEnabled) {
            return twoFactorAuthenticationEnabled(Output.of(twoFactorAuthenticationEnabled));
        }

        /**
         * @param twoFactorAuthenticationLocked Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationLocked(@Nullable Output<Boolean> twoFactorAuthenticationLocked) {
            $.twoFactorAuthenticationLocked = twoFactorAuthenticationLocked;
            return this;
        }

        /**
         * @param twoFactorAuthenticationLocked Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationLocked(Boolean twoFactorAuthenticationLocked) {
            return twoFactorAuthenticationLocked(Output.of(twoFactorAuthenticationLocked));
        }

        /**
         * @param zipcode The zipcode or postal code where the user lives.
         * 
         * @return builder
         * 
         */
        public Builder zipcode(@Nullable Output<String> zipcode) {
            $.zipcode = zipcode;
            return this;
        }

        /**
         * @param zipcode The zipcode or postal code where the user lives.
         * 
         * @return builder
         * 
         */
        public Builder zipcode(String zipcode) {
            return zipcode(Output.of(zipcode));
        }

        public UserState build() {
            return $;
        }
    }

}
