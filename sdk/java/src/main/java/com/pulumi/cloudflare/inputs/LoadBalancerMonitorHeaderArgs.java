// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class LoadBalancerMonitorHeaderArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerMonitorHeaderArgs Empty = new LoadBalancerMonitorHeaderArgs();

    /**
     * The header name.
     * 
     */
    @Import(name="header", required=true)
    private Output<String> header;

    /**
     * @return The header name.
     * 
     */
    public Output<String> header() {
        return this.header;
    }

    /**
     * A list of string values for the header.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return A list of string values for the header.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private LoadBalancerMonitorHeaderArgs() {}

    private LoadBalancerMonitorHeaderArgs(LoadBalancerMonitorHeaderArgs $) {
        this.header = $.header;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerMonitorHeaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerMonitorHeaderArgs $;

        public Builder() {
            $ = new LoadBalancerMonitorHeaderArgs();
        }

        public Builder(LoadBalancerMonitorHeaderArgs defaults) {
            $ = new LoadBalancerMonitorHeaderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param header The header name.
         * 
         * @return builder
         * 
         */
        public Builder header(Output<String> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header The header name.
         * 
         * @return builder
         * 
         */
        public Builder header(String header) {
            return header(Output.of(header));
        }

        /**
         * @param values A list of string values for the header.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values A list of string values for the header.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values A list of string values for the header.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public LoadBalancerMonitorHeaderArgs build() {
            $.header = Objects.requireNonNull($.header, "expected parameter 'header' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
