// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ImageVariantVariantOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageVariantVariantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageVariantVariantArgs Empty = new ImageVariantVariantArgs();

    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    @Import(name="neverRequireSignedUrls")
    private @Nullable Output<Boolean> neverRequireSignedUrls;

    /**
     * @return Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    public Optional<Output<Boolean>> neverRequireSignedUrls() {
        return Optional.ofNullable(this.neverRequireSignedUrls);
    }

    /**
     * Allows you to define image resizing sizes for different use cases.
     * 
     */
    @Import(name="options")
    private @Nullable Output<ImageVariantVariantOptionsArgs> options;

    /**
     * @return Allows you to define image resizing sizes for different use cases.
     * 
     */
    public Optional<Output<ImageVariantVariantOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    private ImageVariantVariantArgs() {}

    private ImageVariantVariantArgs(ImageVariantVariantArgs $) {
        this.id = $.id;
        this.neverRequireSignedUrls = $.neverRequireSignedUrls;
        this.options = $.options;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVariantVariantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVariantVariantArgs $;

        public Builder() {
            $ = new ImageVariantVariantArgs();
        }

        public Builder(ImageVariantVariantArgs defaults) {
            $ = new ImageVariantVariantArgs(Objects.requireNonNull(defaults));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(@Nullable Output<Boolean> neverRequireSignedUrls) {
            $.neverRequireSignedUrls = neverRequireSignedUrls;
            return this;
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(Boolean neverRequireSignedUrls) {
            return neverRequireSignedUrls(Output.of(neverRequireSignedUrls));
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<ImageVariantVariantOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(ImageVariantVariantOptionsArgs options) {
            return options(Output.of(options));
        }

        public ImageVariantVariantArgs build() {
            return $;
        }
    }

}
