// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCustomHostnameFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetCustomHostnameFilter Empty = new GetCustomHostnameFilter();

    /**
     * Direction to order hostnames.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    /**
     * @return Direction to order hostnames.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Fully qualified domain name to match against. This parameter cannot be used with the &#39;id&#39; parameter.
     * 
     */
    @Import(name="hostname")
    private @Nullable String hostname;

    /**
     * @return Fully qualified domain name to match against. This parameter cannot be used with the &#39;id&#39; parameter.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the &#39;hostname&#39; parameter.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the &#39;hostname&#39; parameter.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Field to order hostnames by.
     * Available values: &#34;ssl&#34;, &#34;ssl_status&#34;.
     * 
     */
    @Import(name="order", required=true)
    private String order;

    /**
     * @return Field to order hostnames by.
     * Available values: &#34;ssl&#34;, &#34;ssl_status&#34;.
     * 
     */
    public String order() {
        return this.order;
    }

    /**
     * Whether to filter hostnames based on if they have SSL enabled.
     * Available values: 0, 1.
     * 
     */
    @Import(name="ssl")
    private @Nullable Double ssl;

    /**
     * @return Whether to filter hostnames based on if they have SSL enabled.
     * Available values: 0, 1.
     * 
     */
    public Optional<Double> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    private GetCustomHostnameFilter() {}

    private GetCustomHostnameFilter(GetCustomHostnameFilter $) {
        this.direction = $.direction;
        this.hostname = $.hostname;
        this.id = $.id;
        this.order = $.order;
        this.ssl = $.ssl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCustomHostnameFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCustomHostnameFilter $;

        public Builder() {
            $ = new GetCustomHostnameFilter();
        }

        public Builder(GetCustomHostnameFilter defaults) {
            $ = new GetCustomHostnameFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction Direction to order hostnames.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param hostname Fully qualified domain name to match against. This parameter cannot be used with the &#39;id&#39; parameter.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable String hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param id Hostname ID to match against. This ID was generated and returned during the initial custom_hostname creation. This parameter cannot be used with the &#39;hostname&#39; parameter.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param order Field to order hostnames by.
         * Available values: &#34;ssl&#34;, &#34;ssl_status&#34;.
         * 
         * @return builder
         * 
         */
        public Builder order(String order) {
            $.order = order;
            return this;
        }

        /**
         * @param ssl Whether to filter hostnames based on if they have SSL enabled.
         * Available values: 0, 1.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Double ssl) {
            $.ssl = ssl;
            return this;
        }

        public GetCustomHostnameFilter build() {
            if ($.order == null) {
                throw new MissingRequiredPropertyException("GetCustomHostnameFilter", "order");
            }
            return $;
        }
    }

}
