// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAddressMapsResult {
    /**
     * @return If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     * 
     */
    private Boolean canDelete;
    /**
     * @return If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     * 
     */
    private Boolean canModifyIps;
    private String createdAt;
    /**
     * @return If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    private String defaultSni;
    /**
     * @return An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    private String description;
    /**
     * @return Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Identifier of an Address Map.
     * 
     */
    private String id;
    private String modifiedAt;

    private GetAddressMapsResult() {}
    /**
     * @return If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     * 
     */
    public Boolean canDelete() {
        return this.canDelete;
    }
    /**
     * @return If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     * 
     */
    public Boolean canModifyIps() {
        return this.canModifyIps;
    }
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    public String defaultSni() {
        return this.defaultSni;
    }
    /**
     * @return An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Identifier of an Address Map.
     * 
     */
    public String id() {
        return this.id;
    }
    public String modifiedAt() {
        return this.modifiedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAddressMapsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean canDelete;
        private Boolean canModifyIps;
        private String createdAt;
        private String defaultSni;
        private String description;
        private Boolean enabled;
        private String id;
        private String modifiedAt;
        public Builder() {}
        public Builder(GetAddressMapsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canDelete = defaults.canDelete;
    	      this.canModifyIps = defaults.canModifyIps;
    	      this.createdAt = defaults.createdAt;
    	      this.defaultSni = defaults.defaultSni;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.modifiedAt = defaults.modifiedAt;
        }

        @CustomType.Setter
        public Builder canDelete(Boolean canDelete) {
            if (canDelete == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "canDelete");
            }
            this.canDelete = canDelete;
            return this;
        }
        @CustomType.Setter
        public Builder canModifyIps(Boolean canModifyIps) {
            if (canModifyIps == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "canModifyIps");
            }
            this.canModifyIps = canModifyIps;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSni(String defaultSni) {
            if (defaultSni == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "defaultSni");
            }
            this.defaultSni = defaultSni;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedAt(String modifiedAt) {
            if (modifiedAt == null) {
              throw new MissingRequiredPropertyException("GetAddressMapsResult", "modifiedAt");
            }
            this.modifiedAt = modifiedAt;
            return this;
        }
        public GetAddressMapsResult build() {
            final var _resultValue = new GetAddressMapsResult();
            _resultValue.canDelete = canDelete;
            _resultValue.canModifyIps = canModifyIps;
            _resultValue.createdAt = createdAt;
            _resultValue.defaultSni = defaultSni;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.modifiedAt = modifiedAt;
            return _resultValue;
        }
    }
}
