// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersOverridesCategory;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersOverridesRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRulesetRuleActionParametersOverrides {
    /**
     * @return An action to override all rules with. This option has lower precedence than rule and category overrides.
     * 
     */
    private String action;
    /**
     * @return A list of category-level overrides. This option has the second-highest precedence after rule-level overrides.
     * 
     */
    private List<GetRulesetRuleActionParametersOverridesCategory> categories;
    /**
     * @return Whether to enable execution of all rules. This option has lower precedence than rule and category overrides.
     * 
     */
    private Boolean enabled;
    /**
     * @return A list of rule-level overrides. This option has the highest precedence.
     * 
     */
    private List<GetRulesetRuleActionParametersOverridesRule> rules;
    /**
     * @return A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    private String sensitivityLevel;

    private GetRulesetRuleActionParametersOverrides() {}
    /**
     * @return An action to override all rules with. This option has lower precedence than rule and category overrides.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return A list of category-level overrides. This option has the second-highest precedence after rule-level overrides.
     * 
     */
    public List<GetRulesetRuleActionParametersOverridesCategory> categories() {
        return this.categories;
    }
    /**
     * @return Whether to enable execution of all rules. This option has lower precedence than rule and category overrides.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return A list of rule-level overrides. This option has the highest precedence.
     * 
     */
    public List<GetRulesetRuleActionParametersOverridesRule> rules() {
        return this.rules;
    }
    /**
     * @return A sensitivity level to set for all rules. This option has lower precedence than rule and category overrides and is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    public String sensitivityLevel() {
        return this.sensitivityLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetRuleActionParametersOverrides defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private List<GetRulesetRuleActionParametersOverridesCategory> categories;
        private Boolean enabled;
        private List<GetRulesetRuleActionParametersOverridesRule> rules;
        private String sensitivityLevel;
        public Builder() {}
        public Builder(GetRulesetRuleActionParametersOverrides defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.categories = defaults.categories;
    	      this.enabled = defaults.enabled;
    	      this.rules = defaults.rules;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverrides", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder categories(List<GetRulesetRuleActionParametersOverridesCategory> categories) {
            if (categories == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverrides", "categories");
            }
            this.categories = categories;
            return this;
        }
        public Builder categories(GetRulesetRuleActionParametersOverridesCategory... categories) {
            return categories(List.of(categories));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverrides", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder rules(List<GetRulesetRuleActionParametersOverridesRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverrides", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetRulesetRuleActionParametersOverridesRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder sensitivityLevel(String sensitivityLevel) {
            if (sensitivityLevel == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverrides", "sensitivityLevel");
            }
            this.sensitivityLevel = sensitivityLevel;
            return this;
        }
        public GetRulesetRuleActionParametersOverrides build() {
            final var _resultValue = new GetRulesetRuleActionParametersOverrides();
            _resultValue.action = action;
            _resultValue.categories = categories;
            _resultValue.enabled = enabled;
            _resultValue.rules = rules;
            _resultValue.sensitivityLevel = sensitivityLevel;
            return _resultValue;
        }
    }
}
