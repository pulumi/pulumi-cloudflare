// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetZoneFilterAccount;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZoneFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetZoneFilter Empty = new GetZoneFilter();

    @Import(name="account")
    private @Nullable GetZoneFilterAccount account;

    public Optional<GetZoneFilterAccount> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * Direction to order zones.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    /**
     * @return Direction to order zones.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Whether to match all search requirements or at least one (any).
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    @Import(name="match", required=true)
    private String match;

    /**
     * @return Whether to match all search requirements or at least one (any).
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    public String match() {
        return this.match;
    }

    /**
     * A domain name. Optional filter operators can be provided to extend refine the search:
     *   * `equal` (default)
     *   * `not_equal`
     *   * `starts_with`
     *   * `ends_with`
     *   * `contains`
     *   * `starts_with_case_sensitive`
     *   * `ends_with_case_sensitive`
     *   * `contains_case_sensitive`
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A domain name. Optional filter operators can be provided to extend refine the search:
     *   * `equal` (default)
     *   * `not_equal`
     *   * `starts_with`
     *   * `ends_with`
     *   * `contains`
     *   * `starts_with_case_sensitive`
     *   * `ends_with_case_sensitive`
     *   * `contains_case_sensitive`
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Field to order zones by.
     * Available values: &#34;name&#34;, &#34;status&#34;, &#34;account.id&#34;, &#34;account.name&#34;.
     * 
     */
    @Import(name="order")
    private @Nullable String order;

    /**
     * @return Field to order zones by.
     * Available values: &#34;name&#34;, &#34;status&#34;, &#34;account.id&#34;, &#34;account.name&#34;.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * A zone status
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return A zone status
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private GetZoneFilter() {}

    private GetZoneFilter(GetZoneFilter $) {
        this.account = $.account;
        this.direction = $.direction;
        this.match = $.match;
        this.name = $.name;
        this.order = $.order;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZoneFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZoneFilter $;

        public Builder() {
            $ = new GetZoneFilter();
        }

        public Builder(GetZoneFilter defaults) {
            $ = new GetZoneFilter(Objects.requireNonNull(defaults));
        }

        public Builder account(@Nullable GetZoneFilterAccount account) {
            $.account = account;
            return this;
        }

        /**
         * @param direction Direction to order zones.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param match Whether to match all search requirements or at least one (any).
         * Available values: &#34;any&#34;, &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            $.match = match;
            return this;
        }

        /**
         * @param name A domain name. Optional filter operators can be provided to extend refine the search:
         *   * `equal` (default)
         *   * `not_equal`
         *   * `starts_with`
         *   * `ends_with`
         *   * `contains`
         *   * `starts_with_case_sensitive`
         *   * `ends_with_case_sensitive`
         *   * `contains_case_sensitive`
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param order Field to order zones by.
         * Available values: &#34;name&#34;, &#34;status&#34;, &#34;account.id&#34;, &#34;account.name&#34;.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable String order) {
            $.order = order;
            return this;
        }

        /**
         * @param status A zone status
         * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public GetZoneFilter build() {
            if ($.match == null) {
                throw new MissingRequiredPropertyException("GetZoneFilter", "match");
            }
            return $;
        }
    }

}
