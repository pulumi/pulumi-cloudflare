// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GreTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final GreTunnelArgs Empty = new GreTunnelArgs();

    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    @Import(name="cloudflareGreEndpoint", required=true)
    private Output<String> cloudflareGreEndpoint;

    /**
     * @return The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    public Output<String> cloudflareGreEndpoint() {
        return this.cloudflareGreEndpoint;
    }

    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    @Import(name="customerGreEndpoint", required=true)
    private Output<String> customerGreEndpoint;

    /**
     * @return The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    public Output<String> customerGreEndpoint() {
        return this.customerGreEndpoint;
    }

    /**
     * Description of the GRE tunnel intent.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the GRE tunnel intent.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies if ICMP tunnel health checks are enabled.
     * 
     */
    @Import(name="healthCheckEnabled")
    private @Nullable Output<Boolean> healthCheckEnabled;

    /**
     * @return Specifies if ICMP tunnel health checks are enabled.
     * 
     */
    public Optional<Output<Boolean>> healthCheckEnabled() {
        return Optional.ofNullable(this.healthCheckEnabled);
    }

    /**
     * The IP address of the customer endpoint that will receive tunnel health checks.
     * 
     */
    @Import(name="healthCheckTarget")
    private @Nullable Output<String> healthCheckTarget;

    /**
     * @return The IP address of the customer endpoint that will receive tunnel health checks.
     * 
     */
    public Optional<Output<String>> healthCheckTarget() {
        return Optional.ofNullable(this.healthCheckTarget);
    }

    /**
     * Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
     * 
     */
    @Import(name="healthCheckType")
    private @Nullable Output<String> healthCheckType;

    /**
     * @return Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
     * 
     */
    public Optional<Output<String>> healthCheckType() {
        return Optional.ofNullable(this.healthCheckType);
    }

    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     * 
     */
    @Import(name="interfaceAddress", required=true)
    private Output<String> interfaceAddress;

    /**
     * @return 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     * 
     */
    public Output<String> interfaceAddress() {
        return this.interfaceAddress;
    }

    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Name of the GRE tunnel.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the GRE tunnel.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private GreTunnelArgs() {}

    private GreTunnelArgs(GreTunnelArgs $) {
        this.accountId = $.accountId;
        this.cloudflareGreEndpoint = $.cloudflareGreEndpoint;
        this.customerGreEndpoint = $.customerGreEndpoint;
        this.description = $.description;
        this.healthCheckEnabled = $.healthCheckEnabled;
        this.healthCheckTarget = $.healthCheckTarget;
        this.healthCheckType = $.healthCheckType;
        this.interfaceAddress = $.interfaceAddress;
        this.mtu = $.mtu;
        this.name = $.name;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GreTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GreTunnelArgs $;

        public Builder() {
            $ = new GreTunnelArgs();
        }

        public Builder(GreTunnelArgs defaults) {
            $ = new GreTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param cloudflareGreEndpoint The IP address assigned to the Cloudflare side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareGreEndpoint(Output<String> cloudflareGreEndpoint) {
            $.cloudflareGreEndpoint = cloudflareGreEndpoint;
            return this;
        }

        /**
         * @param cloudflareGreEndpoint The IP address assigned to the Cloudflare side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareGreEndpoint(String cloudflareGreEndpoint) {
            return cloudflareGreEndpoint(Output.of(cloudflareGreEndpoint));
        }

        /**
         * @param customerGreEndpoint The IP address assigned to the customer side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder customerGreEndpoint(Output<String> customerGreEndpoint) {
            $.customerGreEndpoint = customerGreEndpoint;
            return this;
        }

        /**
         * @param customerGreEndpoint The IP address assigned to the customer side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder customerGreEndpoint(String customerGreEndpoint) {
            return customerGreEndpoint(Output.of(customerGreEndpoint));
        }

        /**
         * @param description Description of the GRE tunnel intent.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the GRE tunnel intent.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param healthCheckEnabled Specifies if ICMP tunnel health checks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(@Nullable Output<Boolean> healthCheckEnabled) {
            $.healthCheckEnabled = healthCheckEnabled;
            return this;
        }

        /**
         * @param healthCheckEnabled Specifies if ICMP tunnel health checks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckEnabled(Boolean healthCheckEnabled) {
            return healthCheckEnabled(Output.of(healthCheckEnabled));
        }

        /**
         * @param healthCheckTarget The IP address of the customer endpoint that will receive tunnel health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTarget(@Nullable Output<String> healthCheckTarget) {
            $.healthCheckTarget = healthCheckTarget;
            return this;
        }

        /**
         * @param healthCheckTarget The IP address of the customer endpoint that will receive tunnel health checks.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckTarget(String healthCheckTarget) {
            return healthCheckTarget(Output.of(healthCheckTarget));
        }

        /**
         * @param healthCheckType Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(@Nullable Output<String> healthCheckType) {
            $.healthCheckType = healthCheckType;
            return this;
        }

        /**
         * @param healthCheckType Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckType(String healthCheckType) {
            return healthCheckType(Output.of(healthCheckType));
        }

        /**
         * @param interfaceAddress 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(Output<String> interfaceAddress) {
            $.interfaceAddress = interfaceAddress;
            return this;
        }

        /**
         * @param interfaceAddress 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(String interfaceAddress) {
            return interfaceAddress(Output.of(interfaceAddress));
        }

        /**
         * @param mtu Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name Name of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ttl Time To Live (TTL) in number of hops of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time To Live (TTL) in number of hops of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public GreTunnelArgs build() {
            if ($.cloudflareGreEndpoint == null) {
                throw new MissingRequiredPropertyException("GreTunnelArgs", "cloudflareGreEndpoint");
            }
            if ($.customerGreEndpoint == null) {
                throw new MissingRequiredPropertyException("GreTunnelArgs", "customerGreEndpoint");
            }
            if ($.interfaceAddress == null) {
                throw new MissingRequiredPropertyException("GreTunnelArgs", "interfaceAddress");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GreTunnelArgs", "name");
            }
            return $;
        }
    }

}
