// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ArgoTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ArgoTunnelArgs Empty = new ArgoTunnelArgs();

    /**
     * The Cloudflare account ID that you wish to manage the Argo Tunnel on.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The Cloudflare account ID that you wish to manage the Argo Tunnel on.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * A user-friendly name chosen when the tunnel is created. Cannot be empty.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A user-friendly name chosen when the tunnel is created. Cannot be empty.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel&#39;s password. Anyone wishing to run the tunnel needs this password.
     * 
     */
    @Import(name="secret", required=true)
    private Output<String> secret;

    /**
     * @return 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel&#39;s password. Anyone wishing to run the tunnel needs this password.
     * 
     */
    public Output<String> secret() {
        return this.secret;
    }

    private ArgoTunnelArgs() {}

    private ArgoTunnelArgs(ArgoTunnelArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ArgoTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ArgoTunnelArgs $;

        public Builder() {
            $ = new ArgoTunnelArgs();
        }

        public Builder(ArgoTunnelArgs defaults) {
            $ = new ArgoTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Cloudflare account ID that you wish to manage the Argo Tunnel on.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Cloudflare account ID that you wish to manage the Argo Tunnel on.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param name A user-friendly name chosen when the tunnel is created. Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name chosen when the tunnel is created. Cannot be empty.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secret 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel&#39;s password. Anyone wishing to run the tunnel needs this password.
         * 
         * @return builder
         * 
         */
        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret 32 or more bytes, encoded as a base64 string. The Create Argo Tunnel endpoint sets this as the tunnel&#39;s password. Anyone wishing to run the tunnel needs this password.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public ArgoTunnelArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            return $;
        }
    }

}
