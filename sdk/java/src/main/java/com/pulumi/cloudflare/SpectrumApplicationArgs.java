// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.SpectrumApplicationDnsArgs;
import com.pulumi.cloudflare.inputs.SpectrumApplicationEdgeIpsArgs;
import com.pulumi.cloudflare.inputs.SpectrumApplicationOriginDnsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpectrumApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpectrumApplicationArgs Empty = new SpectrumApplicationArgs();

    /**
     * Enables Argo Smart Routing for this application.
     * Notes: Only available for TCP applications with trafficType set to &#34;direct&#34;.
     * 
     */
    @Import(name="argoSmartRouting")
    private @Nullable Output<Boolean> argoSmartRouting;

    /**
     * @return Enables Argo Smart Routing for this application.
     * Notes: Only available for TCP applications with trafficType set to &#34;direct&#34;.
     * 
     */
    public Optional<Output<Boolean>> argoSmartRouting() {
        return Optional.ofNullable(this.argoSmartRouting);
    }

    /**
     * The name and type of DNS record for the Spectrum application.
     * 
     */
    @Import(name="dns", required=true)
    private Output<SpectrumApplicationDnsArgs> dns;

    /**
     * @return The name and type of DNS record for the Spectrum application.
     * 
     */
    public Output<SpectrumApplicationDnsArgs> dns() {
        return this.dns;
    }

    /**
     * The anycast edge IP configuration for the hostname of this application.
     * 
     */
    @Import(name="edgeIps")
    private @Nullable Output<SpectrumApplicationEdgeIpsArgs> edgeIps;

    /**
     * @return The anycast edge IP configuration for the hostname of this application.
     * 
     */
    public Optional<Output<SpectrumApplicationEdgeIpsArgs>> edgeIps() {
        return Optional.ofNullable(this.edgeIps);
    }

    /**
     * Enables IP Access Rules for this application.
     * Notes: Only available for TCP applications.
     * 
     */
    @Import(name="ipFirewall")
    private @Nullable Output<Boolean> ipFirewall;

    /**
     * @return Enables IP Access Rules for this application.
     * Notes: Only available for TCP applications.
     * 
     */
    public Optional<Output<Boolean>> ipFirewall() {
        return Optional.ofNullable(this.ipFirewall);
    }

    /**
     * List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
     * 
     */
    @Import(name="originDirects")
    private @Nullable Output<List<String>> originDirects;

    /**
     * @return List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
     * 
     */
    public Optional<Output<List<String>>> originDirects() {
        return Optional.ofNullable(this.originDirects);
    }

    /**
     * The name and type of DNS record for the Spectrum application.
     * 
     */
    @Import(name="originDns")
    private @Nullable Output<SpectrumApplicationOriginDnsArgs> originDns;

    /**
     * @return The name and type of DNS record for the Spectrum application.
     * 
     */
    public Optional<Output<SpectrumApplicationOriginDnsArgs>> originDns() {
        return Optional.ofNullable(this.originDns);
    }

    /**
     * The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `&#34;1000-2000&#34;`.
     * Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the &#34;protocol&#34; field.
     * 
     */
    @Import(name="originPort")
    private @Nullable Output<Object> originPort;

    /**
     * @return The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `&#34;1000-2000&#34;`.
     * Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the &#34;protocol&#34; field.
     * 
     */
    public Optional<Output<Object>> originPort() {
        return Optional.ofNullable(this.originPort);
    }

    /**
     * The port configuration at Cloudflare&#39;s edge. May specify a single port, for example `&#34;tcp/1000&#34;`, or a range of ports, for example `&#34;tcp/1000-2000&#34;`.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return The port configuration at Cloudflare&#39;s edge. May specify a single port, for example `&#34;tcp/1000&#34;`, or a range of ports, for example `&#34;tcp/1000-2000&#34;`.
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
     * Available values: &#34;off&#34;, &#34;v1&#34;, &#34;v2&#34;, &#34;simple&#34;.
     * 
     */
    @Import(name="proxyProtocol")
    private @Nullable Output<String> proxyProtocol;

    /**
     * @return Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
     * Available values: &#34;off&#34;, &#34;v1&#34;, &#34;v2&#34;, &#34;simple&#34;.
     * 
     */
    public Optional<Output<String>> proxyProtocol() {
        return Optional.ofNullable(this.proxyProtocol);
    }

    /**
     * The type of TLS termination associated with the application.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<String> tls;

    /**
     * @return The type of TLS termination associated with the application.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;.
     * 
     */
    public Optional<Output<String>> tls() {
        return Optional.ofNullable(this.tls);
    }

    /**
     * Determines how data travels from the edge to your origin. When set to &#34;direct&#34;, Spectrum will send traffic directly to your origin, and the application&#39;s type is derived from the `protocol`. When set to &#34;http&#34; or &#34;https&#34;, Spectrum will apply Cloudflare&#39;s HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
     * Available values: &#34;direct&#34;, &#34;http&#34;, &#34;https&#34;.
     * 
     */
    @Import(name="trafficType")
    private @Nullable Output<String> trafficType;

    /**
     * @return Determines how data travels from the edge to your origin. When set to &#34;direct&#34;, Spectrum will send traffic directly to your origin, and the application&#39;s type is derived from the `protocol`. When set to &#34;http&#34; or &#34;https&#34;, Spectrum will apply Cloudflare&#39;s HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
     * Available values: &#34;direct&#34;, &#34;http&#34;, &#34;https&#34;.
     * 
     */
    public Optional<Output<String>> trafficType() {
        return Optional.ofNullable(this.trafficType);
    }

    /**
     * Zone identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Zone identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private SpectrumApplicationArgs() {}

    private SpectrumApplicationArgs(SpectrumApplicationArgs $) {
        this.argoSmartRouting = $.argoSmartRouting;
        this.dns = $.dns;
        this.edgeIps = $.edgeIps;
        this.ipFirewall = $.ipFirewall;
        this.originDirects = $.originDirects;
        this.originDns = $.originDns;
        this.originPort = $.originPort;
        this.protocol = $.protocol;
        this.proxyProtocol = $.proxyProtocol;
        this.tls = $.tls;
        this.trafficType = $.trafficType;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpectrumApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpectrumApplicationArgs $;

        public Builder() {
            $ = new SpectrumApplicationArgs();
        }

        public Builder(SpectrumApplicationArgs defaults) {
            $ = new SpectrumApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param argoSmartRouting Enables Argo Smart Routing for this application.
         * Notes: Only available for TCP applications with trafficType set to &#34;direct&#34;.
         * 
         * @return builder
         * 
         */
        public Builder argoSmartRouting(@Nullable Output<Boolean> argoSmartRouting) {
            $.argoSmartRouting = argoSmartRouting;
            return this;
        }

        /**
         * @param argoSmartRouting Enables Argo Smart Routing for this application.
         * Notes: Only available for TCP applications with trafficType set to &#34;direct&#34;.
         * 
         * @return builder
         * 
         */
        public Builder argoSmartRouting(Boolean argoSmartRouting) {
            return argoSmartRouting(Output.of(argoSmartRouting));
        }

        /**
         * @param dns The name and type of DNS record for the Spectrum application.
         * 
         * @return builder
         * 
         */
        public Builder dns(Output<SpectrumApplicationDnsArgs> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns The name and type of DNS record for the Spectrum application.
         * 
         * @return builder
         * 
         */
        public Builder dns(SpectrumApplicationDnsArgs dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param edgeIps The anycast edge IP configuration for the hostname of this application.
         * 
         * @return builder
         * 
         */
        public Builder edgeIps(@Nullable Output<SpectrumApplicationEdgeIpsArgs> edgeIps) {
            $.edgeIps = edgeIps;
            return this;
        }

        /**
         * @param edgeIps The anycast edge IP configuration for the hostname of this application.
         * 
         * @return builder
         * 
         */
        public Builder edgeIps(SpectrumApplicationEdgeIpsArgs edgeIps) {
            return edgeIps(Output.of(edgeIps));
        }

        /**
         * @param ipFirewall Enables IP Access Rules for this application.
         * Notes: Only available for TCP applications.
         * 
         * @return builder
         * 
         */
        public Builder ipFirewall(@Nullable Output<Boolean> ipFirewall) {
            $.ipFirewall = ipFirewall;
            return this;
        }

        /**
         * @param ipFirewall Enables IP Access Rules for this application.
         * Notes: Only available for TCP applications.
         * 
         * @return builder
         * 
         */
        public Builder ipFirewall(Boolean ipFirewall) {
            return ipFirewall(Output.of(ipFirewall));
        }

        /**
         * @param originDirects List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
         * 
         * @return builder
         * 
         */
        public Builder originDirects(@Nullable Output<List<String>> originDirects) {
            $.originDirects = originDirects;
            return this;
        }

        /**
         * @param originDirects List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
         * 
         * @return builder
         * 
         */
        public Builder originDirects(List<String> originDirects) {
            return originDirects(Output.of(originDirects));
        }

        /**
         * @param originDirects List of origin IP addresses. Array may contain multiple IP addresses for load balancing.
         * 
         * @return builder
         * 
         */
        public Builder originDirects(String... originDirects) {
            return originDirects(List.of(originDirects));
        }

        /**
         * @param originDns The name and type of DNS record for the Spectrum application.
         * 
         * @return builder
         * 
         */
        public Builder originDns(@Nullable Output<SpectrumApplicationOriginDnsArgs> originDns) {
            $.originDns = originDns;
            return this;
        }

        /**
         * @param originDns The name and type of DNS record for the Spectrum application.
         * 
         * @return builder
         * 
         */
        public Builder originDns(SpectrumApplicationOriginDnsArgs originDns) {
            return originDns(Output.of(originDns));
        }

        /**
         * @param originPort The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `&#34;1000-2000&#34;`.
         * Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the &#34;protocol&#34; field.
         * 
         * @return builder
         * 
         */
        public Builder originPort(@Nullable Output<Object> originPort) {
            $.originPort = originPort;
            return this;
        }

        /**
         * @param originPort The destination port at the origin. Only specified in conjunction with origin_dns. May use an integer to specify a single origin port, for example `1000`, or a string to specify a range of origin ports, for example `&#34;1000-2000&#34;`.
         * Notes: If specifying a port range, the number of ports in the range must match the number of ports specified in the &#34;protocol&#34; field.
         * 
         * @return builder
         * 
         */
        public Builder originPort(Object originPort) {
            return originPort(Output.of(originPort));
        }

        /**
         * @param protocol The port configuration at Cloudflare&#39;s edge. May specify a single port, for example `&#34;tcp/1000&#34;`, or a range of ports, for example `&#34;tcp/1000-2000&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The port configuration at Cloudflare&#39;s edge. May specify a single port, for example `&#34;tcp/1000&#34;`, or a range of ports, for example `&#34;tcp/1000-2000&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyProtocol Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
         * Available values: &#34;off&#34;, &#34;v1&#34;, &#34;v2&#34;, &#34;simple&#34;.
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(@Nullable Output<String> proxyProtocol) {
            $.proxyProtocol = proxyProtocol;
            return this;
        }

        /**
         * @param proxyProtocol Enables Proxy Protocol to the origin. Refer to [Enable Proxy protocol](https://developers.cloudflare.com/spectrum/getting-started/proxy-protocol/) for implementation details on PROXY Protocol V1, PROXY Protocol V2, and Simple Proxy Protocol.
         * Available values: &#34;off&#34;, &#34;v1&#34;, &#34;v2&#34;, &#34;simple&#34;.
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocol(String proxyProtocol) {
            return proxyProtocol(Output.of(proxyProtocol));
        }

        /**
         * @param tls The type of TLS termination associated with the application.
         * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<String> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls The type of TLS termination associated with the application.
         * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tls(String tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param trafficType Determines how data travels from the edge to your origin. When set to &#34;direct&#34;, Spectrum will send traffic directly to your origin, and the application&#39;s type is derived from the `protocol`. When set to &#34;http&#34; or &#34;https&#34;, Spectrum will apply Cloudflare&#39;s HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
         * Available values: &#34;direct&#34;, &#34;http&#34;, &#34;https&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trafficType(@Nullable Output<String> trafficType) {
            $.trafficType = trafficType;
            return this;
        }

        /**
         * @param trafficType Determines how data travels from the edge to your origin. When set to &#34;direct&#34;, Spectrum will send traffic directly to your origin, and the application&#39;s type is derived from the `protocol`. When set to &#34;http&#34; or &#34;https&#34;, Spectrum will apply Cloudflare&#39;s HTTP/HTTPS features as it sends traffic to your origin, and the application type matches this property exactly.
         * Available values: &#34;direct&#34;, &#34;http&#34;, &#34;https&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trafficType(String trafficType) {
            return trafficType(Output.of(trafficType));
        }

        /**
         * @param zoneId Zone identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Zone identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SpectrumApplicationArgs build() {
            if ($.dns == null) {
                throw new MissingRequiredPropertyException("SpectrumApplicationArgs", "dns");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("SpectrumApplicationArgs", "protocol");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("SpectrumApplicationArgs", "zoneId");
            }
            return $;
        }
    }

}
