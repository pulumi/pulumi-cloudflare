// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteLocationArgs Empty = new MagicTransitSiteLocationArgs();

    /**
     * Latitude
     * 
     */
    @Import(name="lat")
    private @Nullable Output<String> lat;

    /**
     * @return Latitude
     * 
     */
    public Optional<Output<String>> lat() {
        return Optional.ofNullable(this.lat);
    }

    /**
     * Longitude
     * 
     */
    @Import(name="lon")
    private @Nullable Output<String> lon;

    /**
     * @return Longitude
     * 
     */
    public Optional<Output<String>> lon() {
        return Optional.ofNullable(this.lon);
    }

    private MagicTransitSiteLocationArgs() {}

    private MagicTransitSiteLocationArgs(MagicTransitSiteLocationArgs $) {
        this.lat = $.lat;
        this.lon = $.lon;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteLocationArgs $;

        public Builder() {
            $ = new MagicTransitSiteLocationArgs();
        }

        public Builder(MagicTransitSiteLocationArgs defaults) {
            $ = new MagicTransitSiteLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lat Latitude
         * 
         * @return builder
         * 
         */
        public Builder lat(@Nullable Output<String> lat) {
            $.lat = lat;
            return this;
        }

        /**
         * @param lat Latitude
         * 
         * @return builder
         * 
         */
        public Builder lat(String lat) {
            return lat(Output.of(lat));
        }

        /**
         * @param lon Longitude
         * 
         * @return builder
         * 
         */
        public Builder lon(@Nullable Output<String> lon) {
            $.lon = lon;
            return this;
        }

        /**
         * @param lon Longitude
         * 
         * @return builder
         * 
         */
        public Builder lon(String lon) {
            return lon(Output.of(lon));
        }

        public MagicTransitSiteLocationArgs build() {
            return $;
        }
    }

}
