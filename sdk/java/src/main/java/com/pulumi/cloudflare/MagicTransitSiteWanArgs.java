// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicTransitSiteWanStaticAddressingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteWanArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteWanArgs Empty = new MagicTransitSiteWanArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="physport", required=true)
    private Output<Integer> physport;

    public Output<Integer> physport() {
        return this.physport;
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="siteId", required=true)
    private Output<String> siteId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
     * 
     */
    @Import(name="staticAddressing")
    private @Nullable Output<MagicTransitSiteWanStaticAddressingArgs> staticAddressing;

    /**
     * @return (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
     * 
     */
    public Optional<Output<MagicTransitSiteWanStaticAddressingArgs>> staticAddressing() {
        return Optional.ofNullable(this.staticAddressing);
    }

    /**
     * VLAN port number.
     * 
     */
    @Import(name="vlanTag", required=true)
    private Output<Integer> vlanTag;

    /**
     * @return VLAN port number.
     * 
     */
    public Output<Integer> vlanTag() {
        return this.vlanTag;
    }

    /**
     * Identifier
     * 
     */
    @Import(name="wanId")
    private @Nullable Output<String> wanId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> wanId() {
        return Optional.ofNullable(this.wanId);
    }

    private MagicTransitSiteWanArgs() {}

    private MagicTransitSiteWanArgs(MagicTransitSiteWanArgs $) {
        this.accountId = $.accountId;
        this.name = $.name;
        this.physport = $.physport;
        this.priority = $.priority;
        this.siteId = $.siteId;
        this.staticAddressing = $.staticAddressing;
        this.vlanTag = $.vlanTag;
        this.wanId = $.wanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteWanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteWanArgs $;

        public Builder() {
            $ = new MagicTransitSiteWanArgs();
        }

        public Builder(MagicTransitSiteWanArgs defaults) {
            $ = new MagicTransitSiteWanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder physport(Output<Integer> physport) {
            $.physport = physport;
            return this;
        }

        public Builder physport(Integer physport) {
            return physport(Output.of(physport));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param staticAddressing (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
         * 
         * @return builder
         * 
         */
        public Builder staticAddressing(@Nullable Output<MagicTransitSiteWanStaticAddressingArgs> staticAddressing) {
            $.staticAddressing = staticAddressing;
            return this;
        }

        /**
         * @param staticAddressing (optional) if omitted, use DHCP. Submit secondary*address when site is in high availability mode.
         * 
         * @return builder
         * 
         */
        public Builder staticAddressing(MagicTransitSiteWanStaticAddressingArgs staticAddressing) {
            return staticAddressing(Output.of(staticAddressing));
        }

        /**
         * @param vlanTag VLAN port number.
         * 
         * @return builder
         * 
         */
        public Builder vlanTag(Output<Integer> vlanTag) {
            $.vlanTag = vlanTag;
            return this;
        }

        /**
         * @param vlanTag VLAN port number.
         * 
         * @return builder
         * 
         */
        public Builder vlanTag(Integer vlanTag) {
            return vlanTag(Output.of(vlanTag));
        }

        /**
         * @param wanId Identifier
         * 
         * @return builder
         * 
         */
        public Builder wanId(@Nullable Output<String> wanId) {
            $.wanId = wanId;
            return this;
        }

        /**
         * @param wanId Identifier
         * 
         * @return builder
         * 
         */
        public Builder wanId(String wanId) {
            return wanId(Output.of(wanId));
        }

        public MagicTransitSiteWanArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanArgs", "accountId");
            }
            if ($.physport == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanArgs", "physport");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanArgs", "siteId");
            }
            if ($.vlanTag == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteWanArgs", "vlanTag");
            }
            return $;
        }
    }

}
