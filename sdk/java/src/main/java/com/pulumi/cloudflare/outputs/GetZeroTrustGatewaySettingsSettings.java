// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsActivityLog;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsAntivirus;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsBlockPage;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsBodyScanning;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsBrowserIsolation;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsCertificate;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsCustomCertificate;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsExtendedEmailMatching;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsFips;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsHostSelector;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsInspection;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsProtocolDetection;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsSandbox;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewaySettingsSettingsTlsDecrypt;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;

@CustomType
public final class GetZeroTrustGatewaySettingsSettings {
    /**
     * @return Specify activity log settings.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsActivityLog activityLog;
    /**
     * @return Specify anti-virus settings.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsAntivirus antivirus;
    /**
     * @return Specify block page layout settings.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsBlockPage blockPage;
    /**
     * @return Specify the DLP inspection mode.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsBodyScanning bodyScanning;
    /**
     * @return Specify Clientless Browser Isolation settings.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsBrowserIsolation browserIsolation;
    /**
     * @return Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsCertificate certificate;
    /**
     * @return Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    private GetZeroTrustGatewaySettingsSettingsCustomCertificate customCertificate;
    /**
     * @return Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsExtendedEmailMatching extendedEmailMatching;
    /**
     * @return Specify FIPS settings.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsFips fips;
    /**
     * @return Enable host selection in egress policies.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsHostSelector hostSelector;
    /**
     * @return Define the proxy inspection mode.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsInspection inspection;
    /**
     * @return Specify whether to detect protocols from the initial bytes of client traffic.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsProtocolDetection protocolDetection;
    /**
     * @return Specify whether to enable the sandbox.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsSandbox sandbox;
    /**
     * @return Specify whether to inspect encrypted HTTP traffic.
     * 
     */
    private GetZeroTrustGatewaySettingsSettingsTlsDecrypt tlsDecrypt;

    private GetZeroTrustGatewaySettingsSettings() {}
    /**
     * @return Specify activity log settings.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsActivityLog activityLog() {
        return this.activityLog;
    }
    /**
     * @return Specify anti-virus settings.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsAntivirus antivirus() {
        return this.antivirus;
    }
    /**
     * @return Specify block page layout settings.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsBlockPage blockPage() {
        return this.blockPage;
    }
    /**
     * @return Specify the DLP inspection mode.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsBodyScanning bodyScanning() {
        return this.bodyScanning;
    }
    /**
     * @return Specify Clientless Browser Isolation settings.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsBrowserIsolation browserIsolation() {
        return this.browserIsolation;
    }
    /**
     * @return Specify certificate settings for Gateway TLS interception. If unset, the Cloudflare Root CA handles interception.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsCertificate certificate() {
        return this.certificate;
    }
    /**
     * @return Specify custom certificate settings for BYO-PKI. This field is deprecated; use `certificate` instead.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public GetZeroTrustGatewaySettingsSettingsCustomCertificate customCertificate() {
        return this.customCertificate;
    }
    /**
     * @return Specify user email settings for the firewall policies. When this is enabled, we standardize the email addresses in the identity part of the rule, so that they match the extended email variants in the firewall policies. When this setting is turned off, the email addresses in the identity part of the rule will be matched exactly as provided. If your email has `.` or `+` modifiers, you should enable this setting.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsExtendedEmailMatching extendedEmailMatching() {
        return this.extendedEmailMatching;
    }
    /**
     * @return Specify FIPS settings.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsFips fips() {
        return this.fips;
    }
    /**
     * @return Enable host selection in egress policies.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsHostSelector hostSelector() {
        return this.hostSelector;
    }
    /**
     * @return Define the proxy inspection mode.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsInspection inspection() {
        return this.inspection;
    }
    /**
     * @return Specify whether to detect protocols from the initial bytes of client traffic.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsProtocolDetection protocolDetection() {
        return this.protocolDetection;
    }
    /**
     * @return Specify whether to enable the sandbox.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsSandbox sandbox() {
        return this.sandbox;
    }
    /**
     * @return Specify whether to inspect encrypted HTTP traffic.
     * 
     */
    public GetZeroTrustGatewaySettingsSettingsTlsDecrypt tlsDecrypt() {
        return this.tlsDecrypt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustGatewaySettingsSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetZeroTrustGatewaySettingsSettingsActivityLog activityLog;
        private GetZeroTrustGatewaySettingsSettingsAntivirus antivirus;
        private GetZeroTrustGatewaySettingsSettingsBlockPage blockPage;
        private GetZeroTrustGatewaySettingsSettingsBodyScanning bodyScanning;
        private GetZeroTrustGatewaySettingsSettingsBrowserIsolation browserIsolation;
        private GetZeroTrustGatewaySettingsSettingsCertificate certificate;
        private GetZeroTrustGatewaySettingsSettingsCustomCertificate customCertificate;
        private GetZeroTrustGatewaySettingsSettingsExtendedEmailMatching extendedEmailMatching;
        private GetZeroTrustGatewaySettingsSettingsFips fips;
        private GetZeroTrustGatewaySettingsSettingsHostSelector hostSelector;
        private GetZeroTrustGatewaySettingsSettingsInspection inspection;
        private GetZeroTrustGatewaySettingsSettingsProtocolDetection protocolDetection;
        private GetZeroTrustGatewaySettingsSettingsSandbox sandbox;
        private GetZeroTrustGatewaySettingsSettingsTlsDecrypt tlsDecrypt;
        public Builder() {}
        public Builder(GetZeroTrustGatewaySettingsSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activityLog = defaults.activityLog;
    	      this.antivirus = defaults.antivirus;
    	      this.blockPage = defaults.blockPage;
    	      this.bodyScanning = defaults.bodyScanning;
    	      this.browserIsolation = defaults.browserIsolation;
    	      this.certificate = defaults.certificate;
    	      this.customCertificate = defaults.customCertificate;
    	      this.extendedEmailMatching = defaults.extendedEmailMatching;
    	      this.fips = defaults.fips;
    	      this.hostSelector = defaults.hostSelector;
    	      this.inspection = defaults.inspection;
    	      this.protocolDetection = defaults.protocolDetection;
    	      this.sandbox = defaults.sandbox;
    	      this.tlsDecrypt = defaults.tlsDecrypt;
        }

        @CustomType.Setter
        public Builder activityLog(GetZeroTrustGatewaySettingsSettingsActivityLog activityLog) {
            if (activityLog == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "activityLog");
            }
            this.activityLog = activityLog;
            return this;
        }
        @CustomType.Setter
        public Builder antivirus(GetZeroTrustGatewaySettingsSettingsAntivirus antivirus) {
            if (antivirus == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "antivirus");
            }
            this.antivirus = antivirus;
            return this;
        }
        @CustomType.Setter
        public Builder blockPage(GetZeroTrustGatewaySettingsSettingsBlockPage blockPage) {
            if (blockPage == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "blockPage");
            }
            this.blockPage = blockPage;
            return this;
        }
        @CustomType.Setter
        public Builder bodyScanning(GetZeroTrustGatewaySettingsSettingsBodyScanning bodyScanning) {
            if (bodyScanning == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "bodyScanning");
            }
            this.bodyScanning = bodyScanning;
            return this;
        }
        @CustomType.Setter
        public Builder browserIsolation(GetZeroTrustGatewaySettingsSettingsBrowserIsolation browserIsolation) {
            if (browserIsolation == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "browserIsolation");
            }
            this.browserIsolation = browserIsolation;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(GetZeroTrustGatewaySettingsSettingsCertificate certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder customCertificate(GetZeroTrustGatewaySettingsSettingsCustomCertificate customCertificate) {
            if (customCertificate == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "customCertificate");
            }
            this.customCertificate = customCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder extendedEmailMatching(GetZeroTrustGatewaySettingsSettingsExtendedEmailMatching extendedEmailMatching) {
            if (extendedEmailMatching == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "extendedEmailMatching");
            }
            this.extendedEmailMatching = extendedEmailMatching;
            return this;
        }
        @CustomType.Setter
        public Builder fips(GetZeroTrustGatewaySettingsSettingsFips fips) {
            if (fips == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "fips");
            }
            this.fips = fips;
            return this;
        }
        @CustomType.Setter
        public Builder hostSelector(GetZeroTrustGatewaySettingsSettingsHostSelector hostSelector) {
            if (hostSelector == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "hostSelector");
            }
            this.hostSelector = hostSelector;
            return this;
        }
        @CustomType.Setter
        public Builder inspection(GetZeroTrustGatewaySettingsSettingsInspection inspection) {
            if (inspection == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "inspection");
            }
            this.inspection = inspection;
            return this;
        }
        @CustomType.Setter
        public Builder protocolDetection(GetZeroTrustGatewaySettingsSettingsProtocolDetection protocolDetection) {
            if (protocolDetection == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "protocolDetection");
            }
            this.protocolDetection = protocolDetection;
            return this;
        }
        @CustomType.Setter
        public Builder sandbox(GetZeroTrustGatewaySettingsSettingsSandbox sandbox) {
            if (sandbox == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "sandbox");
            }
            this.sandbox = sandbox;
            return this;
        }
        @CustomType.Setter
        public Builder tlsDecrypt(GetZeroTrustGatewaySettingsSettingsTlsDecrypt tlsDecrypt) {
            if (tlsDecrypt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewaySettingsSettings", "tlsDecrypt");
            }
            this.tlsDecrypt = tlsDecrypt;
            return this;
        }
        public GetZeroTrustGatewaySettingsSettings build() {
            final var _resultValue = new GetZeroTrustGatewaySettingsSettings();
            _resultValue.activityLog = activityLog;
            _resultValue.antivirus = antivirus;
            _resultValue.blockPage = blockPage;
            _resultValue.bodyScanning = bodyScanning;
            _resultValue.browserIsolation = browserIsolation;
            _resultValue.certificate = certificate;
            _resultValue.customCertificate = customCertificate;
            _resultValue.extendedEmailMatching = extendedEmailMatching;
            _resultValue.fips = fips;
            _resultValue.hostSelector = hostSelector;
            _resultValue.inspection = inspection;
            _resultValue.protocolDetection = protocolDetection;
            _resultValue.sandbox = sandbox;
            _resultValue.tlsDecrypt = tlsDecrypt;
            return _resultValue;
        }
    }
}
