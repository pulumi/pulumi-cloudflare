// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicTransitSiteLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteState extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteState Empty = new MagicTransitSiteState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Magic Connector identifier tag.
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return Magic Connector identifier tag.
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     * 
     */
    @Import(name="haMode")
    private @Nullable Output<Boolean> haMode;

    /**
     * @return Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     * 
     */
    public Optional<Output<Boolean>> haMode() {
        return Optional.ofNullable(this.haMode);
    }

    /**
     * Location of site in latitude and longitude.
     * 
     */
    @Import(name="location")
    private @Nullable Output<MagicTransitSiteLocationArgs> location;

    /**
     * @return Location of site in latitude and longitude.
     * 
     */
    public Optional<Output<MagicTransitSiteLocationArgs>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the site.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the site.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Magic Connector identifier tag. Used when high availability mode is on.
     * 
     */
    @Import(name="secondaryConnectorId")
    private @Nullable Output<String> secondaryConnectorId;

    /**
     * @return Magic Connector identifier tag. Used when high availability mode is on.
     * 
     */
    public Optional<Output<String>> secondaryConnectorId() {
        return Optional.ofNullable(this.secondaryConnectorId);
    }

    private MagicTransitSiteState() {}

    private MagicTransitSiteState(MagicTransitSiteState $) {
        this.accountId = $.accountId;
        this.connectorId = $.connectorId;
        this.description = $.description;
        this.haMode = $.haMode;
        this.location = $.location;
        this.name = $.name;
        this.secondaryConnectorId = $.secondaryConnectorId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteState $;

        public Builder() {
            $ = new MagicTransitSiteState();
        }

        public Builder(MagicTransitSiteState defaults) {
            $ = new MagicTransitSiteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param connectorId Magic Connector identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId Magic Connector identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param haMode Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
         * 
         * @return builder
         * 
         */
        public Builder haMode(@Nullable Output<Boolean> haMode) {
            $.haMode = haMode;
            return this;
        }

        /**
         * @param haMode Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
         * 
         * @return builder
         * 
         */
        public Builder haMode(Boolean haMode) {
            return haMode(Output.of(haMode));
        }

        /**
         * @param location Location of site in latitude and longitude.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<MagicTransitSiteLocationArgs> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of site in latitude and longitude.
         * 
         * @return builder
         * 
         */
        public Builder location(MagicTransitSiteLocationArgs location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the site.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the site.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secondaryConnectorId Magic Connector identifier tag. Used when high availability mode is on.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectorId(@Nullable Output<String> secondaryConnectorId) {
            $.secondaryConnectorId = secondaryConnectorId;
            return this;
        }

        /**
         * @param secondaryConnectorId Magic Connector identifier tag. Used when high availability mode is on.
         * 
         * @return builder
         * 
         */
        public Builder secondaryConnectorId(String secondaryConnectorId) {
            return secondaryConnectorId(Output.of(secondaryConnectorId));
        }

        public MagicTransitSiteState build() {
            return $;
        }
    }

}
