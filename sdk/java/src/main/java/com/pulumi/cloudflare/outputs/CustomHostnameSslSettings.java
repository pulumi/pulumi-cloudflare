// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomHostnameSslSettings {
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    private @Nullable List<String> ciphers;
    /**
     * @return Whether or not Early Hints is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    private @Nullable String earlyHints;
    /**
     * @return Whether or not HTTP2 is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    private @Nullable String http2;
    /**
     * @return The minimum TLS version supported.
     * Available values: &#34;1.0&#34;, &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return Whether or not TLS 1.3 is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    private @Nullable String tls13;

    private CustomHostnameSslSettings() {}
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    public List<String> ciphers() {
        return this.ciphers == null ? List.of() : this.ciphers;
    }
    /**
     * @return Whether or not Early Hints is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    public Optional<String> earlyHints() {
        return Optional.ofNullable(this.earlyHints);
    }
    /**
     * @return Whether or not HTTP2 is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    public Optional<String> http2() {
        return Optional.ofNullable(this.http2);
    }
    /**
     * @return The minimum TLS version supported.
     * Available values: &#34;1.0&#34;, &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return Whether or not TLS 1.3 is enabled.
     * Available values: &#34;on&#34;, &#34;off&#34;.
     * 
     */
    public Optional<String> tls13() {
        return Optional.ofNullable(this.tls13);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomHostnameSslSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> ciphers;
        private @Nullable String earlyHints;
        private @Nullable String http2;
        private @Nullable String minTlsVersion;
        private @Nullable String tls13;
        public Builder() {}
        public Builder(CustomHostnameSslSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ciphers = defaults.ciphers;
    	      this.earlyHints = defaults.earlyHints;
    	      this.http2 = defaults.http2;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.tls13 = defaults.tls13;
        }

        @CustomType.Setter
        public Builder ciphers(@Nullable List<String> ciphers) {

            this.ciphers = ciphers;
            return this;
        }
        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }
        @CustomType.Setter
        public Builder earlyHints(@Nullable String earlyHints) {

            this.earlyHints = earlyHints;
            return this;
        }
        @CustomType.Setter
        public Builder http2(@Nullable String http2) {

            this.http2 = http2;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {

            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tls13(@Nullable String tls13) {

            this.tls13 = tls13;
            return this;
        }
        public CustomHostnameSslSettings build() {
            final var _resultValue = new CustomHostnameSslSettings();
            _resultValue.ciphers = ciphers;
            _resultValue.earlyHints = earlyHints;
            _resultValue.http2 = http2;
            _resultValue.minTlsVersion = minTlsVersion;
            _resultValue.tls13 = tls13;
            return _resultValue;
        }
    }
}
