// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Web3HostnameArgs extends com.pulumi.resources.ResourceArgs {

    public static final Web3HostnameArgs Empty = new Web3HostnameArgs();

    /**
     * An optional description of the hostname.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of the hostname.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * DNSLink value used if the target is ipfs.
     * 
     */
    @Import(name="dnslink")
    private @Nullable Output<String> dnslink;

    /**
     * @return DNSLink value used if the target is ipfs.
     * 
     */
    public Optional<Output<String>> dnslink() {
        return Optional.ofNullable(this.dnslink);
    }

    /**
     * The hostname that will point to the target gateway via CNAME.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The hostname that will point to the target gateway via CNAME.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Target gateway of the hostname.
     * 
     */
    @Import(name="target", required=true)
    private Output<String> target;

    /**
     * @return Target gateway of the hostname.
     * 
     */
    public Output<String> target() {
        return this.target;
    }

    /**
     * The zone identifier to target for the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private Web3HostnameArgs() {}

    private Web3HostnameArgs(Web3HostnameArgs $) {
        this.description = $.description;
        this.dnslink = $.dnslink;
        this.name = $.name;
        this.target = $.target;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Web3HostnameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Web3HostnameArgs $;

        public Builder() {
            $ = new Web3HostnameArgs();
        }

        public Builder(Web3HostnameArgs defaults) {
            $ = new Web3HostnameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An optional description of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnslink DNSLink value used if the target is ipfs.
         * 
         * @return builder
         * 
         */
        public Builder dnslink(@Nullable Output<String> dnslink) {
            $.dnslink = dnslink;
            return this;
        }

        /**
         * @param dnslink DNSLink value used if the target is ipfs.
         * 
         * @return builder
         * 
         */
        public Builder dnslink(String dnslink) {
            return dnslink(Output.of(dnslink));
        }

        /**
         * @param name The hostname that will point to the target gateway via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The hostname that will point to the target gateway via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param target Target gateway of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder target(Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Target gateway of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public Web3HostnameArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("Web3HostnameArgs", "name");
            }
            if ($.target == null) {
                throw new MissingRequiredPropertyException("Web3HostnameArgs", "target");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("Web3HostnameArgs", "zoneId");
            }
            return $;
        }
    }

}
