// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccessApplicationPolicyConnectionRulesArgs;
import com.pulumi.cloudflare.inputs.AccessApplicationPolicyExcludeArgs;
import com.pulumi.cloudflare.inputs.AccessApplicationPolicyIncludeArgs;
import com.pulumi.cloudflare.inputs.AccessApplicationPolicyRequireArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessApplicationPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessApplicationPolicyArgs Empty = new AccessApplicationPolicyArgs();

    /**
     * The rules that define how users may connect to the targets secured by your application.
     * 
     */
    @Import(name="connectionRules")
    private @Nullable Output<AccessApplicationPolicyConnectionRulesArgs> connectionRules;

    /**
     * @return The rules that define how users may connect to the targets secured by your application.
     * 
     */
    public Optional<Output<AccessApplicationPolicyConnectionRulesArgs>> connectionRules() {
        return Optional.ofNullable(this.connectionRules);
    }

    /**
     * The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    @Import(name="decision")
    private @Nullable Output<String> decision;

    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    public Optional<Output<String>> decision() {
        return Optional.ofNullable(this.decision);
    }

    /**
     * Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<AccessApplicationPolicyExcludeArgs>> excludes;

    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public Optional<Output<List<AccessApplicationPolicyExcludeArgs>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * The UUID of the policy
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The UUID of the policy
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    @Import(name="includes")
    private @Nullable Output<List<AccessApplicationPolicyIncludeArgs>> includes;

    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public Optional<Output<List<AccessApplicationPolicyIncludeArgs>>> includes() {
        return Optional.ofNullable(this.includes);
    }

    /**
     * The name of the Access policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Access policy.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    @Import(name="precedence")
    private @Nullable Output<Integer> precedence;

    /**
     * @return The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    public Optional<Output<Integer>> precedence() {
        return Optional.ofNullable(this.precedence);
    }

    /**
     * Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    @Import(name="requires")
    private @Nullable Output<List<AccessApplicationPolicyRequireArgs>> requires;

    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    public Optional<Output<List<AccessApplicationPolicyRequireArgs>>> requires() {
        return Optional.ofNullable(this.requires);
    }

    private AccessApplicationPolicyArgs() {}

    private AccessApplicationPolicyArgs(AccessApplicationPolicyArgs $) {
        this.connectionRules = $.connectionRules;
        this.decision = $.decision;
        this.excludes = $.excludes;
        this.id = $.id;
        this.includes = $.includes;
        this.name = $.name;
        this.precedence = $.precedence;
        this.requires = $.requires;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessApplicationPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessApplicationPolicyArgs $;

        public Builder() {
            $ = new AccessApplicationPolicyArgs();
        }

        public Builder(AccessApplicationPolicyArgs defaults) {
            $ = new AccessApplicationPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionRules The rules that define how users may connect to the targets secured by your application.
         * 
         * @return builder
         * 
         */
        public Builder connectionRules(@Nullable Output<AccessApplicationPolicyConnectionRulesArgs> connectionRules) {
            $.connectionRules = connectionRules;
            return this;
        }

        /**
         * @param connectionRules The rules that define how users may connect to the targets secured by your application.
         * 
         * @return builder
         * 
         */
        public Builder connectionRules(AccessApplicationPolicyConnectionRulesArgs connectionRules) {
            return connectionRules(Output.of(connectionRules));
        }

        /**
         * @param decision The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
         * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
         * 
         * @return builder
         * 
         */
        public Builder decision(@Nullable Output<String> decision) {
            $.decision = decision;
            return this;
        }

        /**
         * @param decision The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
         * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
         * 
         * @return builder
         * 
         */
        public Builder decision(String decision) {
            return decision(Output.of(decision));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<AccessApplicationPolicyExcludeArgs>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<AccessApplicationPolicyExcludeArgs> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(AccessApplicationPolicyExcludeArgs... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param id The UUID of the policy
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The UUID of the policy
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(@Nullable Output<List<AccessApplicationPolicyIncludeArgs>> includes) {
            $.includes = includes;
            return this;
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(List<AccessApplicationPolicyIncludeArgs> includes) {
            return includes(Output.of(includes));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(AccessApplicationPolicyIncludeArgs... includes) {
            return includes(List.of(includes));
        }

        /**
         * @param name The name of the Access policy.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Access policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param precedence The order of execution for this policy. Must be unique for each policy within an app.
         * 
         * @return builder
         * 
         */
        public Builder precedence(@Nullable Output<Integer> precedence) {
            $.precedence = precedence;
            return this;
        }

        /**
         * @param precedence The order of execution for this policy. Must be unique for each policy within an app.
         * 
         * @return builder
         * 
         */
        public Builder precedence(Integer precedence) {
            return precedence(Output.of(precedence));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(@Nullable Output<List<AccessApplicationPolicyRequireArgs>> requires) {
            $.requires = requires;
            return this;
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(List<AccessApplicationPolicyRequireArgs> requires) {
            return requires(Output.of(requires));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(AccessApplicationPolicyRequireArgs... requires) {
            return requires(List.of(requires));
        }

        public AccessApplicationPolicyArgs build() {
            return $;
        }
    }

}
