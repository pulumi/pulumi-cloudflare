// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RecordDataArgs;
import com.pulumi.cloudflare.inputs.RecordSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordState extends com.pulumi.resources.ResourceArgs {

    public static final RecordState Empty = new RecordState();

    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comments or notes about the DNS record. This field has no effect on DNS responses.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * When the record comment was last modified. Omitted if there is no comment.
     * 
     */
    @Import(name="commentModifiedOn")
    private @Nullable Output<String> commentModifiedOn;

    /**
     * @return When the record comment was last modified. Omitted if there is no comment.
     * 
     */
    public Optional<Output<String>> commentModifiedOn() {
        return Optional.ofNullable(this.commentModifiedOn);
    }

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * When the record was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the record was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Components of a CAA record.
     * 
     */
    @Import(name="data")
    private @Nullable Output<RecordDataArgs> data;

    /**
     * @return Components of a CAA record.
     * 
     */
    public Optional<Output<RecordDataArgs>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * Extra Cloudflare-specific information about the record.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return Extra Cloudflare-specific information about the record.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * When the record was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When the record was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * DNS record name (or {@literal @} for the zone apex) in Punycode.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return DNS record name (or {@literal @} for the zone apex) in Punycode.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    /**
     * @return Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     * 
     */
    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Whether the record can be proxied by Cloudflare or not.
     * 
     */
    @Import(name="proxiable")
    private @Nullable Output<Boolean> proxiable;

    /**
     * @return Whether the record can be proxied by Cloudflare or not.
     * 
     */
    public Optional<Output<Boolean>> proxiable() {
        return Optional.ofNullable(this.proxiable);
    }

    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     * 
     */
    @Import(name="proxied")
    private @Nullable Output<Boolean> proxied;

    /**
     * @return Whether the record is receiving the performance and security benefits of Cloudflare.
     * 
     */
    public Optional<Output<Boolean>> proxied() {
        return Optional.ofNullable(this.proxied);
    }

    /**
     * Settings for the DNS record.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<RecordSettingsArgs> settings;

    /**
     * @return Settings for the DNS record.
     * 
     */
    public Optional<Output<RecordSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Custom tags for the DNS record. This field has no effect on DNS responses.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * When the record tags were last modified. Omitted if there are no tags.
     * 
     */
    @Import(name="tagsModifiedOn")
    private @Nullable Output<String> tagsModifiedOn;

    /**
     * @return When the record tags were last modified. Omitted if there are no tags.
     * 
     */
    public Optional<Output<String>> tagsModifiedOn() {
        return Optional.ofNullable(this.tagsModifiedOn);
    }

    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Double> ttl;

    /**
     * @return Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     * 
     */
    public Optional<Output<Double>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * Record type.
     * Available values: &#34;A&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Record type.
     * Available values: &#34;A&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private RecordState() {}

    private RecordState(RecordState $) {
        this.comment = $.comment;
        this.commentModifiedOn = $.commentModifiedOn;
        this.content = $.content;
        this.createdOn = $.createdOn;
        this.data = $.data;
        this.meta = $.meta;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.priority = $.priority;
        this.proxiable = $.proxiable;
        this.proxied = $.proxied;
        this.settings = $.settings;
        this.tags = $.tags;
        this.tagsModifiedOn = $.tagsModifiedOn;
        this.ttl = $.ttl;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordState $;

        public Builder() {
            $ = new RecordState();
        }

        public Builder(RecordState defaults) {
            $ = new RecordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Comments or notes about the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comments or notes about the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param commentModifiedOn When the record comment was last modified. Omitted if there is no comment.
         * 
         * @return builder
         * 
         */
        public Builder commentModifiedOn(@Nullable Output<String> commentModifiedOn) {
            $.commentModifiedOn = commentModifiedOn;
            return this;
        }

        /**
         * @param commentModifiedOn When the record comment was last modified. Omitted if there is no comment.
         * 
         * @return builder
         * 
         */
        public Builder commentModifiedOn(String commentModifiedOn) {
            return commentModifiedOn(Output.of(commentModifiedOn));
        }

        /**
         * @param content A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param createdOn When the record was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the record was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param data Components of a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<RecordDataArgs> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Components of a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder data(RecordDataArgs data) {
            return data(Output.of(data));
        }

        /**
         * @param meta Extra Cloudflare-specific information about the record.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Extra Cloudflare-specific information about the record.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param modifiedOn When the record was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When the record was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name DNS record name (or {@literal @} for the zone apex) in Punycode.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name DNS record name (or {@literal @} for the zone apex) in Punycode.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
         * 
         * @return builder
         * 
         */
        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param proxiable Whether the record can be proxied by Cloudflare or not.
         * 
         * @return builder
         * 
         */
        public Builder proxiable(@Nullable Output<Boolean> proxiable) {
            $.proxiable = proxiable;
            return this;
        }

        /**
         * @param proxiable Whether the record can be proxied by Cloudflare or not.
         * 
         * @return builder
         * 
         */
        public Builder proxiable(Boolean proxiable) {
            return proxiable(Output.of(proxiable));
        }

        /**
         * @param proxied Whether the record is receiving the performance and security benefits of Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder proxied(@Nullable Output<Boolean> proxied) {
            $.proxied = proxied;
            return this;
        }

        /**
         * @param proxied Whether the record is receiving the performance and security benefits of Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder proxied(Boolean proxied) {
            return proxied(Output.of(proxied));
        }

        /**
         * @param settings Settings for the DNS record.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<RecordSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Settings for the DNS record.
         * 
         * @return builder
         * 
         */
        public Builder settings(RecordSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tagsModifiedOn When the record tags were last modified. Omitted if there are no tags.
         * 
         * @return builder
         * 
         */
        public Builder tagsModifiedOn(@Nullable Output<String> tagsModifiedOn) {
            $.tagsModifiedOn = tagsModifiedOn;
            return this;
        }

        /**
         * @param tagsModifiedOn When the record tags were last modified. Omitted if there are no tags.
         * 
         * @return builder
         * 
         */
        public Builder tagsModifiedOn(String tagsModifiedOn) {
            return tagsModifiedOn(Output.of(tagsModifiedOn));
        }

        /**
         * @param ttl Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type Record type.
         * Available values: &#34;A&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Record type.
         * Available values: &#34;A&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RecordState build() {
            return $;
        }
    }

}
