// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleFixedResponse;
import com.pulumi.cloudflare.outputs.GetLoadBalancerRuleOverrides;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerRule {
    /**
     * @return The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixedResponse in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
     * 
     */
    private String condition;
    /**
     * @return Disable this specific rule. It will no longer be evaluated by this load balancer.
     * 
     */
    private Boolean disabled;
    /**
     * @return A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed*response is supplied the rule will be marked as terminates.
     * 
     */
    private GetLoadBalancerRuleFixedResponse fixedResponse;
    /**
     * @return Name of this rule. Only used for human readability.
     * 
     */
    private String name;
    /**
     * @return A collection of overrides to apply to the load balancer when this rule&#39;s condition is true. All fields are optional.
     * 
     */
    private GetLoadBalancerRuleOverrides overrides;
    /**
     * @return The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
     * 
     */
    private Integer priority;
    /**
     * @return If this rule&#39;s condition is true, this causes rule evaluation to stop after processing this rule.
     * 
     */
    private Boolean terminates;

    private GetLoadBalancerRule() {}
    /**
     * @return The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixedResponse in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return Disable this specific rule. It will no longer be evaluated by this load balancer.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed*response is supplied the rule will be marked as terminates.
     * 
     */
    public GetLoadBalancerRuleFixedResponse fixedResponse() {
        return this.fixedResponse;
    }
    /**
     * @return Name of this rule. Only used for human readability.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A collection of overrides to apply to the load balancer when this rule&#39;s condition is true. All fields are optional.
     * 
     */
    public GetLoadBalancerRuleOverrides overrides() {
        return this.overrides;
    }
    /**
     * @return The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return If this rule&#39;s condition is true, this causes rule evaluation to stop after processing this rule.
     * 
     */
    public Boolean terminates() {
        return this.terminates;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String condition;
        private Boolean disabled;
        private GetLoadBalancerRuleFixedResponse fixedResponse;
        private String name;
        private GetLoadBalancerRuleOverrides overrides;
        private Integer priority;
        private Boolean terminates;
        public Builder() {}
        public Builder(GetLoadBalancerRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.disabled = defaults.disabled;
    	      this.fixedResponse = defaults.fixedResponse;
    	      this.name = defaults.name;
    	      this.overrides = defaults.overrides;
    	      this.priority = defaults.priority;
    	      this.terminates = defaults.terminates;
        }

        @CustomType.Setter
        public Builder condition(String condition) {
            if (condition == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "condition");
            }
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder fixedResponse(GetLoadBalancerRuleFixedResponse fixedResponse) {
            if (fixedResponse == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "fixedResponse");
            }
            this.fixedResponse = fixedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(GetLoadBalancerRuleOverrides overrides) {
            if (overrides == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "overrides");
            }
            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder terminates(Boolean terminates) {
            if (terminates == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerRule", "terminates");
            }
            this.terminates = terminates;
            return this;
        }
        public GetLoadBalancerRule build() {
            final var _resultValue = new GetLoadBalancerRule();
            _resultValue.condition = condition;
            _resultValue.disabled = disabled;
            _resultValue.fixedResponse = fixedResponse;
            _resultValue.name = name;
            _resultValue.overrides = overrides;
            _resultValue.priority = priority;
            _resultValue.terminates = terminates;
            return _resultValue;
        }
    }
}
