// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersAlgorithm;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersAutominify;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersBrowserTtl;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersCacheKey;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersCacheReserve;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersCookieField;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersEdgeTtl;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersFromList;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersFromValue;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersHeaders;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersMatchedData;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersOrigin;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersOverrides;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersRequestField;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersResponse;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersResponseField;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersServeStale;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersSni;
import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersUri;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetRulesetRuleActionParameters {
    /**
     * @return List of additional ports that caching can be enabled on.
     * 
     */
    private List<Integer> additionalCacheablePorts;
    /**
     * @return Custom order for compression algorithms.
     * 
     */
    private List<GetRulesetRuleActionParametersAlgorithm> algorithms;
    /**
     * @return Turn on or off Automatic HTTPS Rewrites.
     * 
     */
    private Boolean automaticHttpsRewrites;
    /**
     * @return Select which file extensions to minify automatically.
     * 
     */
    private GetRulesetRuleActionParametersAutominify autominify;
    /**
     * @return Turn on or off Browser Integrity Check.
     * 
     */
    private Boolean bic;
    /**
     * @return Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    private GetRulesetRuleActionParametersBrowserTtl browserTtl;
    /**
     * @return Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
     * 
     */
    private Boolean cache;
    /**
     * @return Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    private GetRulesetRuleActionParametersCacheKey cacheKey;
    /**
     * @return Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    private GetRulesetRuleActionParametersCacheReserve cacheReserve;
    /**
     * @return Error response content.
     * 
     */
    private String content;
    /**
     * @return Content-type header to set with the response.
     * 
     */
    private String contentType;
    /**
     * @return The cookie fields to log.
     * 
     */
    private List<GetRulesetRuleActionParametersCookieField> cookieFields;
    /**
     * @return Turn off all active Cloudflare Apps.
     * 
     */
    private Boolean disableApps;
    /**
     * @return Turn off Real User Monitoring (RUM).
     * 
     */
    private Boolean disableRum;
    /**
     * @return Turn off Zaraz.
     * 
     */
    private Boolean disableZaraz;
    /**
     * @return TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
     * 
     */
    private GetRulesetRuleActionParametersEdgeTtl edgeTtl;
    /**
     * @return Turn on or off Email Obfuscation.
     * 
     */
    private Boolean emailObfuscation;
    /**
     * @return Turn on or off Cloudflare Fonts.
     * 
     */
    private Boolean fonts;
    /**
     * @return Serve a redirect based on a bulk list lookup.
     * 
     */
    private GetRulesetRuleActionParametersFromList fromList;
    /**
     * @return Serve a redirect based on the request properties.
     * 
     */
    private GetRulesetRuleActionParametersFromValue fromValue;
    /**
     * @return Map of request headers to modify.
     * 
     */
    private Map<String,GetRulesetRuleActionParametersHeaders> headers;
    /**
     * @return Rewrite the HTTP Host header.
     * 
     */
    private String hostHeader;
    /**
     * @return Turn on or off the Hotlink Protection.
     * 
     */
    private Boolean hotlinkProtection;
    /**
     * @return The ID of the ruleset to execute.
     * 
     */
    private String id;
    /**
     * @return Increment contains the delta to change the score and can be either positive or negative.
     * 
     */
    private Integer increment;
    /**
     * @return The configuration to use for matched data logging.
     * 
     */
    private GetRulesetRuleActionParametersMatchedData matchedData;
    /**
     * @return Turn on or off Mirage.
     * 
     */
    private Boolean mirage;
    /**
     * @return Turn on or off Opportunistic Encryption.
     * 
     */
    private Boolean opportunisticEncryption;
    /**
     * @return Override the IP/TCP destination.
     * 
     */
    private GetRulesetRuleActionParametersOrigin origin;
    /**
     * @return When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    private Boolean originCacheControl;
    /**
     * @return Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
     * 
     */
    private Boolean originErrorPagePassthru;
    /**
     * @return A set of overrides to apply to the target ruleset.
     * 
     */
    private GetRulesetRuleActionParametersOverrides overrides;
    /**
     * @return A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
     * 
     */
    private List<String> phases;
    /**
     * @return Configure the Polish level.
     * 
     */
    private String polish;
    /**
     * @return A list of legacy security products to skip the execution of.
     * 
     */
    private List<String> products;
    /**
     * @return Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    private Integer readTimeout;
    /**
     * @return The request fields to log.
     * 
     */
    private List<GetRulesetRuleActionParametersRequestField> requestFields;
    /**
     * @return Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    private Boolean respectStrongEtags;
    /**
     * @return The response to show when the block is applied.
     * 
     */
    private GetRulesetRuleActionParametersResponse response;
    /**
     * @return The response fields to log.
     * 
     */
    private List<GetRulesetRuleActionParametersResponseField> responseFields;
    /**
     * @return Turn on or off Rocket Loader
     * 
     */
    private Boolean rocketLoader;
    /**
     * @return A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    private Map<String,List<String>> rules;
    /**
     * @return A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
     * 
     */
    private String ruleset;
    /**
     * @return A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    private List<String> rulesets;
    /**
     * @return Configure the Security Level.
     * 
     */
    private String securityLevel;
    /**
     * @return Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
     * 
     */
    private GetRulesetRuleActionParametersServeStale serveStale;
    /**
     * @return Turn on or off Server Side Excludes.
     * 
     */
    private Boolean serverSideExcludes;
    /**
     * @return Override the Server Name Indication (SNI).
     * 
     */
    private GetRulesetRuleActionParametersSni sni;
    /**
     * @return Configure the SSL level.
     * 
     */
    private String ssl;
    /**
     * @return The status code to use for the error.
     * 
     */
    private Double statusCode;
    /**
     * @return Turn on or off Signed Exchanges (SXG).
     * 
     */
    private Boolean sxg;
    /**
     * @return URI to rewrite the request to.
     * 
     */
    private GetRulesetRuleActionParametersUri uri;

    private GetRulesetRuleActionParameters() {}
    /**
     * @return List of additional ports that caching can be enabled on.
     * 
     */
    public List<Integer> additionalCacheablePorts() {
        return this.additionalCacheablePorts;
    }
    /**
     * @return Custom order for compression algorithms.
     * 
     */
    public List<GetRulesetRuleActionParametersAlgorithm> algorithms() {
        return this.algorithms;
    }
    /**
     * @return Turn on or off Automatic HTTPS Rewrites.
     * 
     */
    public Boolean automaticHttpsRewrites() {
        return this.automaticHttpsRewrites;
    }
    /**
     * @return Select which file extensions to minify automatically.
     * 
     */
    public GetRulesetRuleActionParametersAutominify autominify() {
        return this.autominify;
    }
    /**
     * @return Turn on or off Browser Integrity Check.
     * 
     */
    public Boolean bic() {
        return this.bic;
    }
    /**
     * @return Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    public GetRulesetRuleActionParametersBrowserTtl browserTtl() {
        return this.browserTtl;
    }
    /**
     * @return Mark whether the requestâ€™s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
     * 
     */
    public Boolean cache() {
        return this.cache;
    }
    /**
     * @return Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    public GetRulesetRuleActionParametersCacheKey cacheKey() {
        return this.cacheKey;
    }
    /**
     * @return Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    public GetRulesetRuleActionParametersCacheReserve cacheReserve() {
        return this.cacheReserve;
    }
    /**
     * @return Error response content.
     * 
     */
    public String content() {
        return this.content;
    }
    /**
     * @return Content-type header to set with the response.
     * 
     */
    public String contentType() {
        return this.contentType;
    }
    /**
     * @return The cookie fields to log.
     * 
     */
    public List<GetRulesetRuleActionParametersCookieField> cookieFields() {
        return this.cookieFields;
    }
    /**
     * @return Turn off all active Cloudflare Apps.
     * 
     */
    public Boolean disableApps() {
        return this.disableApps;
    }
    /**
     * @return Turn off Real User Monitoring (RUM).
     * 
     */
    public Boolean disableRum() {
        return this.disableRum;
    }
    /**
     * @return Turn off Zaraz.
     * 
     */
    public Boolean disableZaraz() {
        return this.disableZaraz;
    }
    /**
     * @return TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
     * 
     */
    public GetRulesetRuleActionParametersEdgeTtl edgeTtl() {
        return this.edgeTtl;
    }
    /**
     * @return Turn on or off Email Obfuscation.
     * 
     */
    public Boolean emailObfuscation() {
        return this.emailObfuscation;
    }
    /**
     * @return Turn on or off Cloudflare Fonts.
     * 
     */
    public Boolean fonts() {
        return this.fonts;
    }
    /**
     * @return Serve a redirect based on a bulk list lookup.
     * 
     */
    public GetRulesetRuleActionParametersFromList fromList() {
        return this.fromList;
    }
    /**
     * @return Serve a redirect based on the request properties.
     * 
     */
    public GetRulesetRuleActionParametersFromValue fromValue() {
        return this.fromValue;
    }
    /**
     * @return Map of request headers to modify.
     * 
     */
    public Map<String,GetRulesetRuleActionParametersHeaders> headers() {
        return this.headers;
    }
    /**
     * @return Rewrite the HTTP Host header.
     * 
     */
    public String hostHeader() {
        return this.hostHeader;
    }
    /**
     * @return Turn on or off the Hotlink Protection.
     * 
     */
    public Boolean hotlinkProtection() {
        return this.hotlinkProtection;
    }
    /**
     * @return The ID of the ruleset to execute.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Increment contains the delta to change the score and can be either positive or negative.
     * 
     */
    public Integer increment() {
        return this.increment;
    }
    /**
     * @return The configuration to use for matched data logging.
     * 
     */
    public GetRulesetRuleActionParametersMatchedData matchedData() {
        return this.matchedData;
    }
    /**
     * @return Turn on or off Mirage.
     * 
     */
    public Boolean mirage() {
        return this.mirage;
    }
    /**
     * @return Turn on or off Opportunistic Encryption.
     * 
     */
    public Boolean opportunisticEncryption() {
        return this.opportunisticEncryption;
    }
    /**
     * @return Override the IP/TCP destination.
     * 
     */
    public GetRulesetRuleActionParametersOrigin origin() {
        return this.origin;
    }
    /**
     * @return When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    public Boolean originCacheControl() {
        return this.originCacheControl;
    }
    /**
     * @return Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
     * 
     */
    public Boolean originErrorPagePassthru() {
        return this.originErrorPagePassthru;
    }
    /**
     * @return A set of overrides to apply to the target ruleset.
     * 
     */
    public GetRulesetRuleActionParametersOverrides overrides() {
        return this.overrides;
    }
    /**
     * @return A list of phases to skip the execution of. This option is incompatible with the ruleset and rulesets options.
     * 
     */
    public List<String> phases() {
        return this.phases;
    }
    /**
     * @return Configure the Polish level.
     * 
     */
    public String polish() {
        return this.polish;
    }
    /**
     * @return A list of legacy security products to skip the execution of.
     * 
     */
    public List<String> products() {
        return this.products;
    }
    /**
     * @return Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    public Integer readTimeout() {
        return this.readTimeout;
    }
    /**
     * @return The request fields to log.
     * 
     */
    public List<GetRulesetRuleActionParametersRequestField> requestFields() {
        return this.requestFields;
    }
    /**
     * @return Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    public Boolean respectStrongEtags() {
        return this.respectStrongEtags;
    }
    /**
     * @return The response to show when the block is applied.
     * 
     */
    public GetRulesetRuleActionParametersResponse response() {
        return this.response;
    }
    /**
     * @return The response fields to log.
     * 
     */
    public List<GetRulesetRuleActionParametersResponseField> responseFields() {
        return this.responseFields;
    }
    /**
     * @return Turn on or off Rocket Loader
     * 
     */
    public Boolean rocketLoader() {
        return this.rocketLoader;
    }
    /**
     * @return A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    public Map<String,List<String>> rules() {
        return this.rules;
    }
    /**
     * @return A ruleset to skip the execution of. This option is incompatible with the rulesets, rules and phases options.
     * 
     */
    public String ruleset() {
        return this.ruleset;
    }
    /**
     * @return A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    public List<String> rulesets() {
        return this.rulesets;
    }
    /**
     * @return Configure the Security Level.
     * 
     */
    public String securityLevel() {
        return this.securityLevel;
    }
    /**
     * @return Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
     * 
     */
    public GetRulesetRuleActionParametersServeStale serveStale() {
        return this.serveStale;
    }
    /**
     * @return Turn on or off Server Side Excludes.
     * 
     */
    public Boolean serverSideExcludes() {
        return this.serverSideExcludes;
    }
    /**
     * @return Override the Server Name Indication (SNI).
     * 
     */
    public GetRulesetRuleActionParametersSni sni() {
        return this.sni;
    }
    /**
     * @return Configure the SSL level.
     * 
     */
    public String ssl() {
        return this.ssl;
    }
    /**
     * @return The status code to use for the error.
     * 
     */
    public Double statusCode() {
        return this.statusCode;
    }
    /**
     * @return Turn on or off Signed Exchanges (SXG).
     * 
     */
    public Boolean sxg() {
        return this.sxg;
    }
    /**
     * @return URI to rewrite the request to.
     * 
     */
    public GetRulesetRuleActionParametersUri uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetRuleActionParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Integer> additionalCacheablePorts;
        private List<GetRulesetRuleActionParametersAlgorithm> algorithms;
        private Boolean automaticHttpsRewrites;
        private GetRulesetRuleActionParametersAutominify autominify;
        private Boolean bic;
        private GetRulesetRuleActionParametersBrowserTtl browserTtl;
        private Boolean cache;
        private GetRulesetRuleActionParametersCacheKey cacheKey;
        private GetRulesetRuleActionParametersCacheReserve cacheReserve;
        private String content;
        private String contentType;
        private List<GetRulesetRuleActionParametersCookieField> cookieFields;
        private Boolean disableApps;
        private Boolean disableRum;
        private Boolean disableZaraz;
        private GetRulesetRuleActionParametersEdgeTtl edgeTtl;
        private Boolean emailObfuscation;
        private Boolean fonts;
        private GetRulesetRuleActionParametersFromList fromList;
        private GetRulesetRuleActionParametersFromValue fromValue;
        private Map<String,GetRulesetRuleActionParametersHeaders> headers;
        private String hostHeader;
        private Boolean hotlinkProtection;
        private String id;
        private Integer increment;
        private GetRulesetRuleActionParametersMatchedData matchedData;
        private Boolean mirage;
        private Boolean opportunisticEncryption;
        private GetRulesetRuleActionParametersOrigin origin;
        private Boolean originCacheControl;
        private Boolean originErrorPagePassthru;
        private GetRulesetRuleActionParametersOverrides overrides;
        private List<String> phases;
        private String polish;
        private List<String> products;
        private Integer readTimeout;
        private List<GetRulesetRuleActionParametersRequestField> requestFields;
        private Boolean respectStrongEtags;
        private GetRulesetRuleActionParametersResponse response;
        private List<GetRulesetRuleActionParametersResponseField> responseFields;
        private Boolean rocketLoader;
        private Map<String,List<String>> rules;
        private String ruleset;
        private List<String> rulesets;
        private String securityLevel;
        private GetRulesetRuleActionParametersServeStale serveStale;
        private Boolean serverSideExcludes;
        private GetRulesetRuleActionParametersSni sni;
        private String ssl;
        private Double statusCode;
        private Boolean sxg;
        private GetRulesetRuleActionParametersUri uri;
        public Builder() {}
        public Builder(GetRulesetRuleActionParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCacheablePorts = defaults.additionalCacheablePorts;
    	      this.algorithms = defaults.algorithms;
    	      this.automaticHttpsRewrites = defaults.automaticHttpsRewrites;
    	      this.autominify = defaults.autominify;
    	      this.bic = defaults.bic;
    	      this.browserTtl = defaults.browserTtl;
    	      this.cache = defaults.cache;
    	      this.cacheKey = defaults.cacheKey;
    	      this.cacheReserve = defaults.cacheReserve;
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.cookieFields = defaults.cookieFields;
    	      this.disableApps = defaults.disableApps;
    	      this.disableRum = defaults.disableRum;
    	      this.disableZaraz = defaults.disableZaraz;
    	      this.edgeTtl = defaults.edgeTtl;
    	      this.emailObfuscation = defaults.emailObfuscation;
    	      this.fonts = defaults.fonts;
    	      this.fromList = defaults.fromList;
    	      this.fromValue = defaults.fromValue;
    	      this.headers = defaults.headers;
    	      this.hostHeader = defaults.hostHeader;
    	      this.hotlinkProtection = defaults.hotlinkProtection;
    	      this.id = defaults.id;
    	      this.increment = defaults.increment;
    	      this.matchedData = defaults.matchedData;
    	      this.mirage = defaults.mirage;
    	      this.opportunisticEncryption = defaults.opportunisticEncryption;
    	      this.origin = defaults.origin;
    	      this.originCacheControl = defaults.originCacheControl;
    	      this.originErrorPagePassthru = defaults.originErrorPagePassthru;
    	      this.overrides = defaults.overrides;
    	      this.phases = defaults.phases;
    	      this.polish = defaults.polish;
    	      this.products = defaults.products;
    	      this.readTimeout = defaults.readTimeout;
    	      this.requestFields = defaults.requestFields;
    	      this.respectStrongEtags = defaults.respectStrongEtags;
    	      this.response = defaults.response;
    	      this.responseFields = defaults.responseFields;
    	      this.rocketLoader = defaults.rocketLoader;
    	      this.rules = defaults.rules;
    	      this.ruleset = defaults.ruleset;
    	      this.rulesets = defaults.rulesets;
    	      this.securityLevel = defaults.securityLevel;
    	      this.serveStale = defaults.serveStale;
    	      this.serverSideExcludes = defaults.serverSideExcludes;
    	      this.sni = defaults.sni;
    	      this.ssl = defaults.ssl;
    	      this.statusCode = defaults.statusCode;
    	      this.sxg = defaults.sxg;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder additionalCacheablePorts(List<Integer> additionalCacheablePorts) {
            if (additionalCacheablePorts == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "additionalCacheablePorts");
            }
            this.additionalCacheablePorts = additionalCacheablePorts;
            return this;
        }
        public Builder additionalCacheablePorts(Integer... additionalCacheablePorts) {
            return additionalCacheablePorts(List.of(additionalCacheablePorts));
        }
        @CustomType.Setter
        public Builder algorithms(List<GetRulesetRuleActionParametersAlgorithm> algorithms) {
            if (algorithms == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "algorithms");
            }
            this.algorithms = algorithms;
            return this;
        }
        public Builder algorithms(GetRulesetRuleActionParametersAlgorithm... algorithms) {
            return algorithms(List.of(algorithms));
        }
        @CustomType.Setter
        public Builder automaticHttpsRewrites(Boolean automaticHttpsRewrites) {
            if (automaticHttpsRewrites == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "automaticHttpsRewrites");
            }
            this.automaticHttpsRewrites = automaticHttpsRewrites;
            return this;
        }
        @CustomType.Setter
        public Builder autominify(GetRulesetRuleActionParametersAutominify autominify) {
            if (autominify == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "autominify");
            }
            this.autominify = autominify;
            return this;
        }
        @CustomType.Setter
        public Builder bic(Boolean bic) {
            if (bic == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "bic");
            }
            this.bic = bic;
            return this;
        }
        @CustomType.Setter
        public Builder browserTtl(GetRulesetRuleActionParametersBrowserTtl browserTtl) {
            if (browserTtl == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "browserTtl");
            }
            this.browserTtl = browserTtl;
            return this;
        }
        @CustomType.Setter
        public Builder cache(Boolean cache) {
            if (cache == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "cache");
            }
            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder cacheKey(GetRulesetRuleActionParametersCacheKey cacheKey) {
            if (cacheKey == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "cacheKey");
            }
            this.cacheKey = cacheKey;
            return this;
        }
        @CustomType.Setter
        public Builder cacheReserve(GetRulesetRuleActionParametersCacheReserve cacheReserve) {
            if (cacheReserve == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "cacheReserve");
            }
            this.cacheReserve = cacheReserve;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(String contentType) {
            if (contentType == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "contentType");
            }
            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder cookieFields(List<GetRulesetRuleActionParametersCookieField> cookieFields) {
            if (cookieFields == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "cookieFields");
            }
            this.cookieFields = cookieFields;
            return this;
        }
        public Builder cookieFields(GetRulesetRuleActionParametersCookieField... cookieFields) {
            return cookieFields(List.of(cookieFields));
        }
        @CustomType.Setter
        public Builder disableApps(Boolean disableApps) {
            if (disableApps == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "disableApps");
            }
            this.disableApps = disableApps;
            return this;
        }
        @CustomType.Setter
        public Builder disableRum(Boolean disableRum) {
            if (disableRum == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "disableRum");
            }
            this.disableRum = disableRum;
            return this;
        }
        @CustomType.Setter
        public Builder disableZaraz(Boolean disableZaraz) {
            if (disableZaraz == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "disableZaraz");
            }
            this.disableZaraz = disableZaraz;
            return this;
        }
        @CustomType.Setter
        public Builder edgeTtl(GetRulesetRuleActionParametersEdgeTtl edgeTtl) {
            if (edgeTtl == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "edgeTtl");
            }
            this.edgeTtl = edgeTtl;
            return this;
        }
        @CustomType.Setter
        public Builder emailObfuscation(Boolean emailObfuscation) {
            if (emailObfuscation == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "emailObfuscation");
            }
            this.emailObfuscation = emailObfuscation;
            return this;
        }
        @CustomType.Setter
        public Builder fonts(Boolean fonts) {
            if (fonts == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "fonts");
            }
            this.fonts = fonts;
            return this;
        }
        @CustomType.Setter
        public Builder fromList(GetRulesetRuleActionParametersFromList fromList) {
            if (fromList == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "fromList");
            }
            this.fromList = fromList;
            return this;
        }
        @CustomType.Setter
        public Builder fromValue(GetRulesetRuleActionParametersFromValue fromValue) {
            if (fromValue == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "fromValue");
            }
            this.fromValue = fromValue;
            return this;
        }
        @CustomType.Setter
        public Builder headers(Map<String,GetRulesetRuleActionParametersHeaders> headers) {
            if (headers == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "headers");
            }
            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder hostHeader(String hostHeader) {
            if (hostHeader == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "hostHeader");
            }
            this.hostHeader = hostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder hotlinkProtection(Boolean hotlinkProtection) {
            if (hotlinkProtection == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "hotlinkProtection");
            }
            this.hotlinkProtection = hotlinkProtection;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder increment(Integer increment) {
            if (increment == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "increment");
            }
            this.increment = increment;
            return this;
        }
        @CustomType.Setter
        public Builder matchedData(GetRulesetRuleActionParametersMatchedData matchedData) {
            if (matchedData == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "matchedData");
            }
            this.matchedData = matchedData;
            return this;
        }
        @CustomType.Setter
        public Builder mirage(Boolean mirage) {
            if (mirage == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "mirage");
            }
            this.mirage = mirage;
            return this;
        }
        @CustomType.Setter
        public Builder opportunisticEncryption(Boolean opportunisticEncryption) {
            if (opportunisticEncryption == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "opportunisticEncryption");
            }
            this.opportunisticEncryption = opportunisticEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder origin(GetRulesetRuleActionParametersOrigin origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder originCacheControl(Boolean originCacheControl) {
            if (originCacheControl == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "originCacheControl");
            }
            this.originCacheControl = originCacheControl;
            return this;
        }
        @CustomType.Setter
        public Builder originErrorPagePassthru(Boolean originErrorPagePassthru) {
            if (originErrorPagePassthru == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "originErrorPagePassthru");
            }
            this.originErrorPagePassthru = originErrorPagePassthru;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(GetRulesetRuleActionParametersOverrides overrides) {
            if (overrides == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "overrides");
            }
            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder phases(List<String> phases) {
            if (phases == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "phases");
            }
            this.phases = phases;
            return this;
        }
        public Builder phases(String... phases) {
            return phases(List.of(phases));
        }
        @CustomType.Setter
        public Builder polish(String polish) {
            if (polish == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "polish");
            }
            this.polish = polish;
            return this;
        }
        @CustomType.Setter
        public Builder products(List<String> products) {
            if (products == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "products");
            }
            this.products = products;
            return this;
        }
        public Builder products(String... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder readTimeout(Integer readTimeout) {
            if (readTimeout == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "readTimeout");
            }
            this.readTimeout = readTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder requestFields(List<GetRulesetRuleActionParametersRequestField> requestFields) {
            if (requestFields == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "requestFields");
            }
            this.requestFields = requestFields;
            return this;
        }
        public Builder requestFields(GetRulesetRuleActionParametersRequestField... requestFields) {
            return requestFields(List.of(requestFields));
        }
        @CustomType.Setter
        public Builder respectStrongEtags(Boolean respectStrongEtags) {
            if (respectStrongEtags == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "respectStrongEtags");
            }
            this.respectStrongEtags = respectStrongEtags;
            return this;
        }
        @CustomType.Setter
        public Builder response(GetRulesetRuleActionParametersResponse response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "response");
            }
            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder responseFields(List<GetRulesetRuleActionParametersResponseField> responseFields) {
            if (responseFields == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "responseFields");
            }
            this.responseFields = responseFields;
            return this;
        }
        public Builder responseFields(GetRulesetRuleActionParametersResponseField... responseFields) {
            return responseFields(List.of(responseFields));
        }
        @CustomType.Setter
        public Builder rocketLoader(Boolean rocketLoader) {
            if (rocketLoader == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "rocketLoader");
            }
            this.rocketLoader = rocketLoader;
            return this;
        }
        @CustomType.Setter
        public Builder rules(Map<String,List<String>> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "rules");
            }
            this.rules = rules;
            return this;
        }
        @CustomType.Setter
        public Builder ruleset(String ruleset) {
            if (ruleset == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "ruleset");
            }
            this.ruleset = ruleset;
            return this;
        }
        @CustomType.Setter
        public Builder rulesets(List<String> rulesets) {
            if (rulesets == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "rulesets");
            }
            this.rulesets = rulesets;
            return this;
        }
        public Builder rulesets(String... rulesets) {
            return rulesets(List.of(rulesets));
        }
        @CustomType.Setter
        public Builder securityLevel(String securityLevel) {
            if (securityLevel == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "securityLevel");
            }
            this.securityLevel = securityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder serveStale(GetRulesetRuleActionParametersServeStale serveStale) {
            if (serveStale == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "serveStale");
            }
            this.serveStale = serveStale;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideExcludes(Boolean serverSideExcludes) {
            if (serverSideExcludes == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "serverSideExcludes");
            }
            this.serverSideExcludes = serverSideExcludes;
            return this;
        }
        @CustomType.Setter
        public Builder sni(GetRulesetRuleActionParametersSni sni) {
            if (sni == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "sni");
            }
            this.sni = sni;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(String ssl) {
            if (ssl == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "ssl");
            }
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Double statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder sxg(Boolean sxg) {
            if (sxg == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "sxg");
            }
            this.sxg = sxg;
            return this;
        }
        @CustomType.Setter
        public Builder uri(GetRulesetRuleActionParametersUri uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParameters", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetRulesetRuleActionParameters build() {
            final var _resultValue = new GetRulesetRuleActionParameters();
            _resultValue.additionalCacheablePorts = additionalCacheablePorts;
            _resultValue.algorithms = algorithms;
            _resultValue.automaticHttpsRewrites = automaticHttpsRewrites;
            _resultValue.autominify = autominify;
            _resultValue.bic = bic;
            _resultValue.browserTtl = browserTtl;
            _resultValue.cache = cache;
            _resultValue.cacheKey = cacheKey;
            _resultValue.cacheReserve = cacheReserve;
            _resultValue.content = content;
            _resultValue.contentType = contentType;
            _resultValue.cookieFields = cookieFields;
            _resultValue.disableApps = disableApps;
            _resultValue.disableRum = disableRum;
            _resultValue.disableZaraz = disableZaraz;
            _resultValue.edgeTtl = edgeTtl;
            _resultValue.emailObfuscation = emailObfuscation;
            _resultValue.fonts = fonts;
            _resultValue.fromList = fromList;
            _resultValue.fromValue = fromValue;
            _resultValue.headers = headers;
            _resultValue.hostHeader = hostHeader;
            _resultValue.hotlinkProtection = hotlinkProtection;
            _resultValue.id = id;
            _resultValue.increment = increment;
            _resultValue.matchedData = matchedData;
            _resultValue.mirage = mirage;
            _resultValue.opportunisticEncryption = opportunisticEncryption;
            _resultValue.origin = origin;
            _resultValue.originCacheControl = originCacheControl;
            _resultValue.originErrorPagePassthru = originErrorPagePassthru;
            _resultValue.overrides = overrides;
            _resultValue.phases = phases;
            _resultValue.polish = polish;
            _resultValue.products = products;
            _resultValue.readTimeout = readTimeout;
            _resultValue.requestFields = requestFields;
            _resultValue.respectStrongEtags = respectStrongEtags;
            _resultValue.response = response;
            _resultValue.responseFields = responseFields;
            _resultValue.rocketLoader = rocketLoader;
            _resultValue.rules = rules;
            _resultValue.ruleset = ruleset;
            _resultValue.rulesets = rulesets;
            _resultValue.securityLevel = securityLevel;
            _resultValue.serveStale = serveStale;
            _resultValue.serverSideExcludes = serverSideExcludes;
            _resultValue.sni = sni;
            _resultValue.ssl = ssl;
            _resultValue.statusCode = statusCode;
            _resultValue.sxg = sxg;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
