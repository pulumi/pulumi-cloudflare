// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersAlgorithm;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersAutominify;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersBrowserTtl;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersCacheKey;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersCacheReserve;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersCookieField;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersEdgeTtl;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersFromList;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersFromValue;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersHeaders;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersMatchedData;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersOrigin;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersOverrides;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersRawResponseField;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersRequestField;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersResponse;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersResponseField;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersServeStale;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersSni;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersTransformedRequestField;
import com.pulumi.cloudflare.outputs.RulesetRuleActionParametersUri;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleActionParameters {
    /**
     * @return A list of additional ports that caching should be enabled on.
     * 
     */
    private @Nullable List<Integer> additionalCacheablePorts;
    /**
     * @return Custom order for compression algorithms.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersAlgorithm> algorithms;
    /**
     * @return The name of a custom asset to serve as the response.
     * 
     */
    private @Nullable String assetName;
    /**
     * @return Whether to enable Automatic HTTPS Rewrites.
     * 
     */
    private @Nullable Boolean automaticHttpsRewrites;
    /**
     * @return Which file extensions to minify automatically.
     * 
     */
    private @Nullable RulesetRuleActionParametersAutominify autominify;
    /**
     * @return Whether to enable Browser Integrity Check (BIC).
     * 
     */
    private @Nullable Boolean bic;
    /**
     * @return How long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    private @Nullable RulesetRuleActionParametersBrowserTtl browserTtl;
    /**
     * @return Whether the request&#39;s response from the origin is eligible for caching. Caching itself will still depend on the cache control header and your other caching configurations.
     * 
     */
    private @Nullable Boolean cache;
    /**
     * @return Which components of the request are included in or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    private @Nullable RulesetRuleActionParametersCacheKey cacheKey;
    /**
     * @return Settings to determine whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    private @Nullable RulesetRuleActionParametersCacheReserve cacheReserve;
    /**
     * @return The response content.
     * 
     */
    private @Nullable String content;
    /**
     * @return The content type header to set with the error response.
     * Available values: &#34;application/json&#34;, &#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;.
     * 
     */
    private @Nullable String contentType;
    /**
     * @return The cookie fields to log.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersCookieField> cookieFields;
    /**
     * @return Whether to disable Cloudflare Apps.
     * 
     */
    private @Nullable Boolean disableApps;
    /**
     * @return Whether to disable Real User Monitoring (RUM).
     * 
     */
    private @Nullable Boolean disableRum;
    /**
     * @return Whether to disable Zaraz.
     * 
     */
    private @Nullable Boolean disableZaraz;
    /**
     * @return How long the Cloudflare edge network should cache the response.
     * 
     */
    private @Nullable RulesetRuleActionParametersEdgeTtl edgeTtl;
    /**
     * @return Whether to enable Email Obfuscation.
     * 
     */
    private @Nullable Boolean emailObfuscation;
    /**
     * @return Whether to enable Cloudflare Fonts.
     * 
     */
    private @Nullable Boolean fonts;
    /**
     * @return A redirect based on a bulk list lookup.
     * 
     */
    private @Nullable RulesetRuleActionParametersFromList fromList;
    /**
     * @return A redirect based on the request properties.
     * 
     */
    private @Nullable RulesetRuleActionParametersFromValue fromValue;
    /**
     * @return A map of headers to rewrite.
     * 
     */
    private @Nullable Map<String,RulesetRuleActionParametersHeaders> headers;
    /**
     * @return A value to rewrite the HTTP host header to.
     * 
     */
    private @Nullable String hostHeader;
    /**
     * @return Whether to enable Hotlink Protection.
     * 
     */
    private @Nullable Boolean hotlinkProtection;
    /**
     * @return The ID of the ruleset to execute.
     * 
     */
    private @Nullable String id;
    /**
     * @return A delta to change the score by, which can be either positive or negative.
     * 
     */
    private @Nullable Integer increment;
    /**
     * @return The configuration to use for matched data logging.
     * 
     */
    private @Nullable RulesetRuleActionParametersMatchedData matchedData;
    /**
     * @return Whether to enable Mirage.
     * 
     */
    private @Nullable Boolean mirage;
    /**
     * @return Whether to enable Opportunistic Encryption.
     * 
     */
    private @Nullable Boolean opportunisticEncryption;
    /**
     * @return An origin to route to.
     * 
     */
    private @Nullable RulesetRuleActionParametersOrigin origin;
    /**
     * @return Whether Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    private @Nullable Boolean originCacheControl;
    /**
     * @return Whether to generate Cloudflare error pages for issues from the origin server.
     * 
     */
    private @Nullable Boolean originErrorPagePassthru;
    /**
     * @return A set of overrides to apply to the target ruleset.
     * 
     */
    private @Nullable RulesetRuleActionParametersOverrides overrides;
    /**
     * @return A list of phases to skip the execution of. This option is incompatible with the rulesets option.
     * Available values: &#34;ddos*l4&#34;, &#34;ddos*l7&#34;, &#34;http*config*settings&#34;, &#34;http*custom*errors&#34;, &#34;http*log*custom*fields&#34;, &#34;http*ratelimit&#34;, &#34;http*request*cache*settings&#34;, &#34;http*request*dynamic*redirect&#34;, &#34;http*request*firewall*custom&#34;, &#34;http*request*firewall*managed&#34;, &#34;http*request*late*transform&#34;, &#34;http*request*origin&#34;, &#34;http*request*redirect&#34;, &#34;http*request*sanitize&#34;, &#34;http*request*sbfm&#34;, &#34;http*request*transform&#34;, &#34;http*response*compression&#34;, &#34;http*response*firewall*managed&#34;, &#34;http*response*headers*transform&#34;, &#34;magic*transit&#34;, &#34;magic*transit*ids*managed&#34;, &#34;magic*transit*managed&#34;, &#34;magic*transit_ratelimit&#34;.
     * 
     */
    private @Nullable List<String> phases;
    /**
     * @return The Polish level to configure.
     * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;, &#34;webp&#34;.
     * 
     */
    private @Nullable String polish;
    /**
     * @return A list of legacy security products to skip the execution of.
     * Available values: &#34;bic&#34;, &#34;hot&#34;, &#34;rateLimit&#34;, &#34;securityLevel&#34;, &#34;uaBlock&#34;, &#34;waf&#34;, &#34;zoneLockdown&#34;.
     * 
     */
    private @Nullable List<String> products;
    /**
     * @return The raw response fields to log.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersRawResponseField> rawResponseFields;
    /**
     * @return A timeout value between two successive read operations to use for your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    private @Nullable Integer readTimeout;
    /**
     * @return The raw request fields to log.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersRequestField> requestFields;
    /**
     * @return Whether Cloudflare should respect strong ETag (entity tag) headers. If false, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    private @Nullable Boolean respectStrongEtags;
    /**
     * @return The response to show when the block is applied.
     * 
     */
    private @Nullable RulesetRuleActionParametersResponse response;
    /**
     * @return The transformed response fields to log.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersResponseField> responseFields;
    /**
     * @return Whether to enable Rocket Loader.
     * 
     */
    private @Nullable Boolean rocketLoader;
    /**
     * @return A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    private @Nullable Map<String,List<String>> rules;
    /**
     * @return A ruleset to skip the execution of. This option is incompatible with the rulesets option.
     * Available values: &#34;current&#34;.
     * 
     */
    private @Nullable String ruleset;
    /**
     * @return A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    private @Nullable List<String> rulesets;
    /**
     * @return The Security Level to configure.
     * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
     * 
     */
    private @Nullable String securityLevel;
    /**
     * @return When to serve stale content from cache.
     * 
     */
    private @Nullable RulesetRuleActionParametersServeStale serveStale;
    /**
     * @return Whether to enable Server-Side Excludes.
     * 
     */
    private @Nullable Boolean serverSideExcludes;
    /**
     * @return A Server Name Indication (SNI) override.
     * 
     */
    private @Nullable RulesetRuleActionParametersSni sni;
    /**
     * @return The SSL level to configure.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;originPull&#34;.
     * 
     */
    private @Nullable String ssl;
    /**
     * @return The status code to use for the error.
     * 
     */
    private @Nullable Integer statusCode;
    /**
     * @return Whether to enable Signed Exchanges (SXG).
     * 
     */
    private @Nullable Boolean sxg;
    /**
     * @return The transformed request fields to log.
     * 
     */
    private @Nullable List<RulesetRuleActionParametersTransformedRequestField> transformedRequestFields;
    /**
     * @return A URI rewrite.
     * 
     */
    private @Nullable RulesetRuleActionParametersUri uri;

    private RulesetRuleActionParameters() {}
    /**
     * @return A list of additional ports that caching should be enabled on.
     * 
     */
    public List<Integer> additionalCacheablePorts() {
        return this.additionalCacheablePorts == null ? List.of() : this.additionalCacheablePorts;
    }
    /**
     * @return Custom order for compression algorithms.
     * 
     */
    public List<RulesetRuleActionParametersAlgorithm> algorithms() {
        return this.algorithms == null ? List.of() : this.algorithms;
    }
    /**
     * @return The name of a custom asset to serve as the response.
     * 
     */
    public Optional<String> assetName() {
        return Optional.ofNullable(this.assetName);
    }
    /**
     * @return Whether to enable Automatic HTTPS Rewrites.
     * 
     */
    public Optional<Boolean> automaticHttpsRewrites() {
        return Optional.ofNullable(this.automaticHttpsRewrites);
    }
    /**
     * @return Which file extensions to minify automatically.
     * 
     */
    public Optional<RulesetRuleActionParametersAutominify> autominify() {
        return Optional.ofNullable(this.autominify);
    }
    /**
     * @return Whether to enable Browser Integrity Check (BIC).
     * 
     */
    public Optional<Boolean> bic() {
        return Optional.ofNullable(this.bic);
    }
    /**
     * @return How long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    public Optional<RulesetRuleActionParametersBrowserTtl> browserTtl() {
        return Optional.ofNullable(this.browserTtl);
    }
    /**
     * @return Whether the request&#39;s response from the origin is eligible for caching. Caching itself will still depend on the cache control header and your other caching configurations.
     * 
     */
    public Optional<Boolean> cache() {
        return Optional.ofNullable(this.cache);
    }
    /**
     * @return Which components of the request are included in or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    public Optional<RulesetRuleActionParametersCacheKey> cacheKey() {
        return Optional.ofNullable(this.cacheKey);
    }
    /**
     * @return Settings to determine whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    public Optional<RulesetRuleActionParametersCacheReserve> cacheReserve() {
        return Optional.ofNullable(this.cacheReserve);
    }
    /**
     * @return The response content.
     * 
     */
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    /**
     * @return The content type header to set with the error response.
     * Available values: &#34;application/json&#34;, &#34;text/html&#34;, &#34;text/plain&#34;, &#34;text/xml&#34;.
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }
    /**
     * @return The cookie fields to log.
     * 
     */
    public List<RulesetRuleActionParametersCookieField> cookieFields() {
        return this.cookieFields == null ? List.of() : this.cookieFields;
    }
    /**
     * @return Whether to disable Cloudflare Apps.
     * 
     */
    public Optional<Boolean> disableApps() {
        return Optional.ofNullable(this.disableApps);
    }
    /**
     * @return Whether to disable Real User Monitoring (RUM).
     * 
     */
    public Optional<Boolean> disableRum() {
        return Optional.ofNullable(this.disableRum);
    }
    /**
     * @return Whether to disable Zaraz.
     * 
     */
    public Optional<Boolean> disableZaraz() {
        return Optional.ofNullable(this.disableZaraz);
    }
    /**
     * @return How long the Cloudflare edge network should cache the response.
     * 
     */
    public Optional<RulesetRuleActionParametersEdgeTtl> edgeTtl() {
        return Optional.ofNullable(this.edgeTtl);
    }
    /**
     * @return Whether to enable Email Obfuscation.
     * 
     */
    public Optional<Boolean> emailObfuscation() {
        return Optional.ofNullable(this.emailObfuscation);
    }
    /**
     * @return Whether to enable Cloudflare Fonts.
     * 
     */
    public Optional<Boolean> fonts() {
        return Optional.ofNullable(this.fonts);
    }
    /**
     * @return A redirect based on a bulk list lookup.
     * 
     */
    public Optional<RulesetRuleActionParametersFromList> fromList() {
        return Optional.ofNullable(this.fromList);
    }
    /**
     * @return A redirect based on the request properties.
     * 
     */
    public Optional<RulesetRuleActionParametersFromValue> fromValue() {
        return Optional.ofNullable(this.fromValue);
    }
    /**
     * @return A map of headers to rewrite.
     * 
     */
    public Map<String,RulesetRuleActionParametersHeaders> headers() {
        return this.headers == null ? Map.of() : this.headers;
    }
    /**
     * @return A value to rewrite the HTTP host header to.
     * 
     */
    public Optional<String> hostHeader() {
        return Optional.ofNullable(this.hostHeader);
    }
    /**
     * @return Whether to enable Hotlink Protection.
     * 
     */
    public Optional<Boolean> hotlinkProtection() {
        return Optional.ofNullable(this.hotlinkProtection);
    }
    /**
     * @return The ID of the ruleset to execute.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return A delta to change the score by, which can be either positive or negative.
     * 
     */
    public Optional<Integer> increment() {
        return Optional.ofNullable(this.increment);
    }
    /**
     * @return The configuration to use for matched data logging.
     * 
     */
    public Optional<RulesetRuleActionParametersMatchedData> matchedData() {
        return Optional.ofNullable(this.matchedData);
    }
    /**
     * @return Whether to enable Mirage.
     * 
     */
    public Optional<Boolean> mirage() {
        return Optional.ofNullable(this.mirage);
    }
    /**
     * @return Whether to enable Opportunistic Encryption.
     * 
     */
    public Optional<Boolean> opportunisticEncryption() {
        return Optional.ofNullable(this.opportunisticEncryption);
    }
    /**
     * @return An origin to route to.
     * 
     */
    public Optional<RulesetRuleActionParametersOrigin> origin() {
        return Optional.ofNullable(this.origin);
    }
    /**
     * @return Whether Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    public Optional<Boolean> originCacheControl() {
        return Optional.ofNullable(this.originCacheControl);
    }
    /**
     * @return Whether to generate Cloudflare error pages for issues from the origin server.
     * 
     */
    public Optional<Boolean> originErrorPagePassthru() {
        return Optional.ofNullable(this.originErrorPagePassthru);
    }
    /**
     * @return A set of overrides to apply to the target ruleset.
     * 
     */
    public Optional<RulesetRuleActionParametersOverrides> overrides() {
        return Optional.ofNullable(this.overrides);
    }
    /**
     * @return A list of phases to skip the execution of. This option is incompatible with the rulesets option.
     * Available values: &#34;ddos*l4&#34;, &#34;ddos*l7&#34;, &#34;http*config*settings&#34;, &#34;http*custom*errors&#34;, &#34;http*log*custom*fields&#34;, &#34;http*ratelimit&#34;, &#34;http*request*cache*settings&#34;, &#34;http*request*dynamic*redirect&#34;, &#34;http*request*firewall*custom&#34;, &#34;http*request*firewall*managed&#34;, &#34;http*request*late*transform&#34;, &#34;http*request*origin&#34;, &#34;http*request*redirect&#34;, &#34;http*request*sanitize&#34;, &#34;http*request*sbfm&#34;, &#34;http*request*transform&#34;, &#34;http*response*compression&#34;, &#34;http*response*firewall*managed&#34;, &#34;http*response*headers*transform&#34;, &#34;magic*transit&#34;, &#34;magic*transit*ids*managed&#34;, &#34;magic*transit*managed&#34;, &#34;magic*transit_ratelimit&#34;.
     * 
     */
    public List<String> phases() {
        return this.phases == null ? List.of() : this.phases;
    }
    /**
     * @return The Polish level to configure.
     * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;, &#34;webp&#34;.
     * 
     */
    public Optional<String> polish() {
        return Optional.ofNullable(this.polish);
    }
    /**
     * @return A list of legacy security products to skip the execution of.
     * Available values: &#34;bic&#34;, &#34;hot&#34;, &#34;rateLimit&#34;, &#34;securityLevel&#34;, &#34;uaBlock&#34;, &#34;waf&#34;, &#34;zoneLockdown&#34;.
     * 
     */
    public List<String> products() {
        return this.products == null ? List.of() : this.products;
    }
    /**
     * @return The raw response fields to log.
     * 
     */
    public List<RulesetRuleActionParametersRawResponseField> rawResponseFields() {
        return this.rawResponseFields == null ? List.of() : this.rawResponseFields;
    }
    /**
     * @return A timeout value between two successive read operations to use for your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    public Optional<Integer> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }
    /**
     * @return The raw request fields to log.
     * 
     */
    public List<RulesetRuleActionParametersRequestField> requestFields() {
        return this.requestFields == null ? List.of() : this.requestFields;
    }
    /**
     * @return Whether Cloudflare should respect strong ETag (entity tag) headers. If false, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    public Optional<Boolean> respectStrongEtags() {
        return Optional.ofNullable(this.respectStrongEtags);
    }
    /**
     * @return The response to show when the block is applied.
     * 
     */
    public Optional<RulesetRuleActionParametersResponse> response() {
        return Optional.ofNullable(this.response);
    }
    /**
     * @return The transformed response fields to log.
     * 
     */
    public List<RulesetRuleActionParametersResponseField> responseFields() {
        return this.responseFields == null ? List.of() : this.responseFields;
    }
    /**
     * @return Whether to enable Rocket Loader.
     * 
     */
    public Optional<Boolean> rocketLoader() {
        return Optional.ofNullable(this.rocketLoader);
    }
    /**
     * @return A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    public Map<String,List<String>> rules() {
        return this.rules == null ? Map.of() : this.rules;
    }
    /**
     * @return A ruleset to skip the execution of. This option is incompatible with the rulesets option.
     * Available values: &#34;current&#34;.
     * 
     */
    public Optional<String> ruleset() {
        return Optional.ofNullable(this.ruleset);
    }
    /**
     * @return A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    public List<String> rulesets() {
        return this.rulesets == null ? List.of() : this.rulesets;
    }
    /**
     * @return The Security Level to configure.
     * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
     * 
     */
    public Optional<String> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }
    /**
     * @return When to serve stale content from cache.
     * 
     */
    public Optional<RulesetRuleActionParametersServeStale> serveStale() {
        return Optional.ofNullable(this.serveStale);
    }
    /**
     * @return Whether to enable Server-Side Excludes.
     * 
     */
    public Optional<Boolean> serverSideExcludes() {
        return Optional.ofNullable(this.serverSideExcludes);
    }
    /**
     * @return A Server Name Indication (SNI) override.
     * 
     */
    public Optional<RulesetRuleActionParametersSni> sni() {
        return Optional.ofNullable(this.sni);
    }
    /**
     * @return The SSL level to configure.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;originPull&#34;.
     * 
     */
    public Optional<String> ssl() {
        return Optional.ofNullable(this.ssl);
    }
    /**
     * @return The status code to use for the error.
     * 
     */
    public Optional<Integer> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }
    /**
     * @return Whether to enable Signed Exchanges (SXG).
     * 
     */
    public Optional<Boolean> sxg() {
        return Optional.ofNullable(this.sxg);
    }
    /**
     * @return The transformed request fields to log.
     * 
     */
    public List<RulesetRuleActionParametersTransformedRequestField> transformedRequestFields() {
        return this.transformedRequestFields == null ? List.of() : this.transformedRequestFields;
    }
    /**
     * @return A URI rewrite.
     * 
     */
    public Optional<RulesetRuleActionParametersUri> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleActionParameters defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<Integer> additionalCacheablePorts;
        private @Nullable List<RulesetRuleActionParametersAlgorithm> algorithms;
        private @Nullable String assetName;
        private @Nullable Boolean automaticHttpsRewrites;
        private @Nullable RulesetRuleActionParametersAutominify autominify;
        private @Nullable Boolean bic;
        private @Nullable RulesetRuleActionParametersBrowserTtl browserTtl;
        private @Nullable Boolean cache;
        private @Nullable RulesetRuleActionParametersCacheKey cacheKey;
        private @Nullable RulesetRuleActionParametersCacheReserve cacheReserve;
        private @Nullable String content;
        private @Nullable String contentType;
        private @Nullable List<RulesetRuleActionParametersCookieField> cookieFields;
        private @Nullable Boolean disableApps;
        private @Nullable Boolean disableRum;
        private @Nullable Boolean disableZaraz;
        private @Nullable RulesetRuleActionParametersEdgeTtl edgeTtl;
        private @Nullable Boolean emailObfuscation;
        private @Nullable Boolean fonts;
        private @Nullable RulesetRuleActionParametersFromList fromList;
        private @Nullable RulesetRuleActionParametersFromValue fromValue;
        private @Nullable Map<String,RulesetRuleActionParametersHeaders> headers;
        private @Nullable String hostHeader;
        private @Nullable Boolean hotlinkProtection;
        private @Nullable String id;
        private @Nullable Integer increment;
        private @Nullable RulesetRuleActionParametersMatchedData matchedData;
        private @Nullable Boolean mirage;
        private @Nullable Boolean opportunisticEncryption;
        private @Nullable RulesetRuleActionParametersOrigin origin;
        private @Nullable Boolean originCacheControl;
        private @Nullable Boolean originErrorPagePassthru;
        private @Nullable RulesetRuleActionParametersOverrides overrides;
        private @Nullable List<String> phases;
        private @Nullable String polish;
        private @Nullable List<String> products;
        private @Nullable List<RulesetRuleActionParametersRawResponseField> rawResponseFields;
        private @Nullable Integer readTimeout;
        private @Nullable List<RulesetRuleActionParametersRequestField> requestFields;
        private @Nullable Boolean respectStrongEtags;
        private @Nullable RulesetRuleActionParametersResponse response;
        private @Nullable List<RulesetRuleActionParametersResponseField> responseFields;
        private @Nullable Boolean rocketLoader;
        private @Nullable Map<String,List<String>> rules;
        private @Nullable String ruleset;
        private @Nullable List<String> rulesets;
        private @Nullable String securityLevel;
        private @Nullable RulesetRuleActionParametersServeStale serveStale;
        private @Nullable Boolean serverSideExcludes;
        private @Nullable RulesetRuleActionParametersSni sni;
        private @Nullable String ssl;
        private @Nullable Integer statusCode;
        private @Nullable Boolean sxg;
        private @Nullable List<RulesetRuleActionParametersTransformedRequestField> transformedRequestFields;
        private @Nullable RulesetRuleActionParametersUri uri;
        public Builder() {}
        public Builder(RulesetRuleActionParameters defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalCacheablePorts = defaults.additionalCacheablePorts;
    	      this.algorithms = defaults.algorithms;
    	      this.assetName = defaults.assetName;
    	      this.automaticHttpsRewrites = defaults.automaticHttpsRewrites;
    	      this.autominify = defaults.autominify;
    	      this.bic = defaults.bic;
    	      this.browserTtl = defaults.browserTtl;
    	      this.cache = defaults.cache;
    	      this.cacheKey = defaults.cacheKey;
    	      this.cacheReserve = defaults.cacheReserve;
    	      this.content = defaults.content;
    	      this.contentType = defaults.contentType;
    	      this.cookieFields = defaults.cookieFields;
    	      this.disableApps = defaults.disableApps;
    	      this.disableRum = defaults.disableRum;
    	      this.disableZaraz = defaults.disableZaraz;
    	      this.edgeTtl = defaults.edgeTtl;
    	      this.emailObfuscation = defaults.emailObfuscation;
    	      this.fonts = defaults.fonts;
    	      this.fromList = defaults.fromList;
    	      this.fromValue = defaults.fromValue;
    	      this.headers = defaults.headers;
    	      this.hostHeader = defaults.hostHeader;
    	      this.hotlinkProtection = defaults.hotlinkProtection;
    	      this.id = defaults.id;
    	      this.increment = defaults.increment;
    	      this.matchedData = defaults.matchedData;
    	      this.mirage = defaults.mirage;
    	      this.opportunisticEncryption = defaults.opportunisticEncryption;
    	      this.origin = defaults.origin;
    	      this.originCacheControl = defaults.originCacheControl;
    	      this.originErrorPagePassthru = defaults.originErrorPagePassthru;
    	      this.overrides = defaults.overrides;
    	      this.phases = defaults.phases;
    	      this.polish = defaults.polish;
    	      this.products = defaults.products;
    	      this.rawResponseFields = defaults.rawResponseFields;
    	      this.readTimeout = defaults.readTimeout;
    	      this.requestFields = defaults.requestFields;
    	      this.respectStrongEtags = defaults.respectStrongEtags;
    	      this.response = defaults.response;
    	      this.responseFields = defaults.responseFields;
    	      this.rocketLoader = defaults.rocketLoader;
    	      this.rules = defaults.rules;
    	      this.ruleset = defaults.ruleset;
    	      this.rulesets = defaults.rulesets;
    	      this.securityLevel = defaults.securityLevel;
    	      this.serveStale = defaults.serveStale;
    	      this.serverSideExcludes = defaults.serverSideExcludes;
    	      this.sni = defaults.sni;
    	      this.ssl = defaults.ssl;
    	      this.statusCode = defaults.statusCode;
    	      this.sxg = defaults.sxg;
    	      this.transformedRequestFields = defaults.transformedRequestFields;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder additionalCacheablePorts(@Nullable List<Integer> additionalCacheablePorts) {

            this.additionalCacheablePorts = additionalCacheablePorts;
            return this;
        }
        public Builder additionalCacheablePorts(Integer... additionalCacheablePorts) {
            return additionalCacheablePorts(List.of(additionalCacheablePorts));
        }
        @CustomType.Setter
        public Builder algorithms(@Nullable List<RulesetRuleActionParametersAlgorithm> algorithms) {

            this.algorithms = algorithms;
            return this;
        }
        public Builder algorithms(RulesetRuleActionParametersAlgorithm... algorithms) {
            return algorithms(List.of(algorithms));
        }
        @CustomType.Setter
        public Builder assetName(@Nullable String assetName) {

            this.assetName = assetName;
            return this;
        }
        @CustomType.Setter
        public Builder automaticHttpsRewrites(@Nullable Boolean automaticHttpsRewrites) {

            this.automaticHttpsRewrites = automaticHttpsRewrites;
            return this;
        }
        @CustomType.Setter
        public Builder autominify(@Nullable RulesetRuleActionParametersAutominify autominify) {

            this.autominify = autominify;
            return this;
        }
        @CustomType.Setter
        public Builder bic(@Nullable Boolean bic) {

            this.bic = bic;
            return this;
        }
        @CustomType.Setter
        public Builder browserTtl(@Nullable RulesetRuleActionParametersBrowserTtl browserTtl) {

            this.browserTtl = browserTtl;
            return this;
        }
        @CustomType.Setter
        public Builder cache(@Nullable Boolean cache) {

            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder cacheKey(@Nullable RulesetRuleActionParametersCacheKey cacheKey) {

            this.cacheKey = cacheKey;
            return this;
        }
        @CustomType.Setter
        public Builder cacheReserve(@Nullable RulesetRuleActionParametersCacheReserve cacheReserve) {

            this.cacheReserve = cacheReserve;
            return this;
        }
        @CustomType.Setter
        public Builder content(@Nullable String content) {

            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder contentType(@Nullable String contentType) {

            this.contentType = contentType;
            return this;
        }
        @CustomType.Setter
        public Builder cookieFields(@Nullable List<RulesetRuleActionParametersCookieField> cookieFields) {

            this.cookieFields = cookieFields;
            return this;
        }
        public Builder cookieFields(RulesetRuleActionParametersCookieField... cookieFields) {
            return cookieFields(List.of(cookieFields));
        }
        @CustomType.Setter
        public Builder disableApps(@Nullable Boolean disableApps) {

            this.disableApps = disableApps;
            return this;
        }
        @CustomType.Setter
        public Builder disableRum(@Nullable Boolean disableRum) {

            this.disableRum = disableRum;
            return this;
        }
        @CustomType.Setter
        public Builder disableZaraz(@Nullable Boolean disableZaraz) {

            this.disableZaraz = disableZaraz;
            return this;
        }
        @CustomType.Setter
        public Builder edgeTtl(@Nullable RulesetRuleActionParametersEdgeTtl edgeTtl) {

            this.edgeTtl = edgeTtl;
            return this;
        }
        @CustomType.Setter
        public Builder emailObfuscation(@Nullable Boolean emailObfuscation) {

            this.emailObfuscation = emailObfuscation;
            return this;
        }
        @CustomType.Setter
        public Builder fonts(@Nullable Boolean fonts) {

            this.fonts = fonts;
            return this;
        }
        @CustomType.Setter
        public Builder fromList(@Nullable RulesetRuleActionParametersFromList fromList) {

            this.fromList = fromList;
            return this;
        }
        @CustomType.Setter
        public Builder fromValue(@Nullable RulesetRuleActionParametersFromValue fromValue) {

            this.fromValue = fromValue;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable Map<String,RulesetRuleActionParametersHeaders> headers) {

            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder hostHeader(@Nullable String hostHeader) {

            this.hostHeader = hostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder hotlinkProtection(@Nullable Boolean hotlinkProtection) {

            this.hotlinkProtection = hotlinkProtection;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder increment(@Nullable Integer increment) {

            this.increment = increment;
            return this;
        }
        @CustomType.Setter
        public Builder matchedData(@Nullable RulesetRuleActionParametersMatchedData matchedData) {

            this.matchedData = matchedData;
            return this;
        }
        @CustomType.Setter
        public Builder mirage(@Nullable Boolean mirage) {

            this.mirage = mirage;
            return this;
        }
        @CustomType.Setter
        public Builder opportunisticEncryption(@Nullable Boolean opportunisticEncryption) {

            this.opportunisticEncryption = opportunisticEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder origin(@Nullable RulesetRuleActionParametersOrigin origin) {

            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder originCacheControl(@Nullable Boolean originCacheControl) {

            this.originCacheControl = originCacheControl;
            return this;
        }
        @CustomType.Setter
        public Builder originErrorPagePassthru(@Nullable Boolean originErrorPagePassthru) {

            this.originErrorPagePassthru = originErrorPagePassthru;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable RulesetRuleActionParametersOverrides overrides) {

            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder phases(@Nullable List<String> phases) {

            this.phases = phases;
            return this;
        }
        public Builder phases(String... phases) {
            return phases(List.of(phases));
        }
        @CustomType.Setter
        public Builder polish(@Nullable String polish) {

            this.polish = polish;
            return this;
        }
        @CustomType.Setter
        public Builder products(@Nullable List<String> products) {

            this.products = products;
            return this;
        }
        public Builder products(String... products) {
            return products(List.of(products));
        }
        @CustomType.Setter
        public Builder rawResponseFields(@Nullable List<RulesetRuleActionParametersRawResponseField> rawResponseFields) {

            this.rawResponseFields = rawResponseFields;
            return this;
        }
        public Builder rawResponseFields(RulesetRuleActionParametersRawResponseField... rawResponseFields) {
            return rawResponseFields(List.of(rawResponseFields));
        }
        @CustomType.Setter
        public Builder readTimeout(@Nullable Integer readTimeout) {

            this.readTimeout = readTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder requestFields(@Nullable List<RulesetRuleActionParametersRequestField> requestFields) {

            this.requestFields = requestFields;
            return this;
        }
        public Builder requestFields(RulesetRuleActionParametersRequestField... requestFields) {
            return requestFields(List.of(requestFields));
        }
        @CustomType.Setter
        public Builder respectStrongEtags(@Nullable Boolean respectStrongEtags) {

            this.respectStrongEtags = respectStrongEtags;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable RulesetRuleActionParametersResponse response) {

            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder responseFields(@Nullable List<RulesetRuleActionParametersResponseField> responseFields) {

            this.responseFields = responseFields;
            return this;
        }
        public Builder responseFields(RulesetRuleActionParametersResponseField... responseFields) {
            return responseFields(List.of(responseFields));
        }
        @CustomType.Setter
        public Builder rocketLoader(@Nullable Boolean rocketLoader) {

            this.rocketLoader = rocketLoader;
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable Map<String,List<String>> rules) {

            this.rules = rules;
            return this;
        }
        @CustomType.Setter
        public Builder ruleset(@Nullable String ruleset) {

            this.ruleset = ruleset;
            return this;
        }
        @CustomType.Setter
        public Builder rulesets(@Nullable List<String> rulesets) {

            this.rulesets = rulesets;
            return this;
        }
        public Builder rulesets(String... rulesets) {
            return rulesets(List.of(rulesets));
        }
        @CustomType.Setter
        public Builder securityLevel(@Nullable String securityLevel) {

            this.securityLevel = securityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder serveStale(@Nullable RulesetRuleActionParametersServeStale serveStale) {

            this.serveStale = serveStale;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideExcludes(@Nullable Boolean serverSideExcludes) {

            this.serverSideExcludes = serverSideExcludes;
            return this;
        }
        @CustomType.Setter
        public Builder sni(@Nullable RulesetRuleActionParametersSni sni) {

            this.sni = sni;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(@Nullable String ssl) {

            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(@Nullable Integer statusCode) {

            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder sxg(@Nullable Boolean sxg) {

            this.sxg = sxg;
            return this;
        }
        @CustomType.Setter
        public Builder transformedRequestFields(@Nullable List<RulesetRuleActionParametersTransformedRequestField> transformedRequestFields) {

            this.transformedRequestFields = transformedRequestFields;
            return this;
        }
        public Builder transformedRequestFields(RulesetRuleActionParametersTransformedRequestField... transformedRequestFields) {
            return transformedRequestFields(List.of(transformedRequestFields));
        }
        @CustomType.Setter
        public Builder uri(@Nullable RulesetRuleActionParametersUri uri) {

            this.uri = uri;
            return this;
        }
        public RulesetRuleActionParameters build() {
            final var _resultValue = new RulesetRuleActionParameters();
            _resultValue.additionalCacheablePorts = additionalCacheablePorts;
            _resultValue.algorithms = algorithms;
            _resultValue.assetName = assetName;
            _resultValue.automaticHttpsRewrites = automaticHttpsRewrites;
            _resultValue.autominify = autominify;
            _resultValue.bic = bic;
            _resultValue.browserTtl = browserTtl;
            _resultValue.cache = cache;
            _resultValue.cacheKey = cacheKey;
            _resultValue.cacheReserve = cacheReserve;
            _resultValue.content = content;
            _resultValue.contentType = contentType;
            _resultValue.cookieFields = cookieFields;
            _resultValue.disableApps = disableApps;
            _resultValue.disableRum = disableRum;
            _resultValue.disableZaraz = disableZaraz;
            _resultValue.edgeTtl = edgeTtl;
            _resultValue.emailObfuscation = emailObfuscation;
            _resultValue.fonts = fonts;
            _resultValue.fromList = fromList;
            _resultValue.fromValue = fromValue;
            _resultValue.headers = headers;
            _resultValue.hostHeader = hostHeader;
            _resultValue.hotlinkProtection = hotlinkProtection;
            _resultValue.id = id;
            _resultValue.increment = increment;
            _resultValue.matchedData = matchedData;
            _resultValue.mirage = mirage;
            _resultValue.opportunisticEncryption = opportunisticEncryption;
            _resultValue.origin = origin;
            _resultValue.originCacheControl = originCacheControl;
            _resultValue.originErrorPagePassthru = originErrorPagePassthru;
            _resultValue.overrides = overrides;
            _resultValue.phases = phases;
            _resultValue.polish = polish;
            _resultValue.products = products;
            _resultValue.rawResponseFields = rawResponseFields;
            _resultValue.readTimeout = readTimeout;
            _resultValue.requestFields = requestFields;
            _resultValue.respectStrongEtags = respectStrongEtags;
            _resultValue.response = response;
            _resultValue.responseFields = responseFields;
            _resultValue.rocketLoader = rocketLoader;
            _resultValue.rules = rules;
            _resultValue.ruleset = ruleset;
            _resultValue.rulesets = rulesets;
            _resultValue.securityLevel = securityLevel;
            _resultValue.serveStale = serveStale;
            _resultValue.serverSideExcludes = serverSideExcludes;
            _resultValue.sni = sni;
            _resultValue.ssl = ssl;
            _resultValue.statusCode = statusCode;
            _resultValue.sxg = sxg;
            _resultValue.transformedRequestFields = transformedRequestFields;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
