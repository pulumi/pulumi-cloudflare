// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageVariantVariantOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageVariantVariantOptionsArgs Empty = new ImageVariantVariantOptionsArgs();

    /**
     * The fit property describes how the width and height dimensions should be interpreted.
     * 
     */
    @Import(name="fit")
    private @Nullable Output<String> fit;

    /**
     * @return The fit property describes how the width and height dimensions should be interpreted.
     * 
     */
    public Optional<Output<String>> fit() {
        return Optional.ofNullable(this.fit);
    }

    /**
     * Maximum height in image pixels.
     * 
     */
    @Import(name="height")
    private @Nullable Output<Double> height;

    /**
     * @return Maximum height in image pixels.
     * 
     */
    public Optional<Output<Double>> height() {
        return Optional.ofNullable(this.height);
    }

    /**
     * What EXIF data should be preserved in the output image.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return What EXIF data should be preserved in the output image.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Maximum width in image pixels.
     * 
     */
    @Import(name="width")
    private @Nullable Output<Double> width;

    /**
     * @return Maximum width in image pixels.
     * 
     */
    public Optional<Output<Double>> width() {
        return Optional.ofNullable(this.width);
    }

    private ImageVariantVariantOptionsArgs() {}

    private ImageVariantVariantOptionsArgs(ImageVariantVariantOptionsArgs $) {
        this.fit = $.fit;
        this.height = $.height;
        this.metadata = $.metadata;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVariantVariantOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVariantVariantOptionsArgs $;

        public Builder() {
            $ = new ImageVariantVariantOptionsArgs();
        }

        public Builder(ImageVariantVariantOptionsArgs defaults) {
            $ = new ImageVariantVariantOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fit The fit property describes how the width and height dimensions should be interpreted.
         * 
         * @return builder
         * 
         */
        public Builder fit(@Nullable Output<String> fit) {
            $.fit = fit;
            return this;
        }

        /**
         * @param fit The fit property describes how the width and height dimensions should be interpreted.
         * 
         * @return builder
         * 
         */
        public Builder fit(String fit) {
            return fit(Output.of(fit));
        }

        /**
         * @param height Maximum height in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder height(@Nullable Output<Double> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height Maximum height in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder height(Double height) {
            return height(Output.of(height));
        }

        /**
         * @param metadata What EXIF data should be preserved in the output image.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata What EXIF data should be preserved in the output image.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param width Maximum width in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(@Nullable Output<Double> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width Maximum width in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(Double width) {
            return width(Output.of(width));
        }

        public ImageVariantVariantOptionsArgs build() {
            return $;
        }
    }

}
