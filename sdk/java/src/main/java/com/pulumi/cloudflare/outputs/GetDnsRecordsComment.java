// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDnsRecordsComment {
    /**
     * @return If this parameter is present, only records *without* a comment are returned.
     * 
     */
    private @Nullable String absent;
    /**
     * @return Substring of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    private @Nullable String contains;
    /**
     * @return Suffix of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    private @Nullable String endswith;
    /**
     * @return Exact value of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    private @Nullable String exact;
    /**
     * @return If this parameter is present, only records *with* a comment are returned.
     * 
     */
    private @Nullable String present;
    /**
     * @return Prefix of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    private @Nullable String startswith;

    private GetDnsRecordsComment() {}
    /**
     * @return If this parameter is present, only records *without* a comment are returned.
     * 
     */
    public Optional<String> absent() {
        return Optional.ofNullable(this.absent);
    }
    /**
     * @return Substring of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    public Optional<String> contains() {
        return Optional.ofNullable(this.contains);
    }
    /**
     * @return Suffix of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    public Optional<String> endswith() {
        return Optional.ofNullable(this.endswith);
    }
    /**
     * @return Exact value of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    public Optional<String> exact() {
        return Optional.ofNullable(this.exact);
    }
    /**
     * @return If this parameter is present, only records *with* a comment are returned.
     * 
     */
    public Optional<String> present() {
        return Optional.ofNullable(this.present);
    }
    /**
     * @return Prefix of the DNS record comment. Comment filters are case-insensitive.
     * 
     */
    public Optional<String> startswith() {
        return Optional.ofNullable(this.startswith);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsRecordsComment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String absent;
        private @Nullable String contains;
        private @Nullable String endswith;
        private @Nullable String exact;
        private @Nullable String present;
        private @Nullable String startswith;
        public Builder() {}
        public Builder(GetDnsRecordsComment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.absent = defaults.absent;
    	      this.contains = defaults.contains;
    	      this.endswith = defaults.endswith;
    	      this.exact = defaults.exact;
    	      this.present = defaults.present;
    	      this.startswith = defaults.startswith;
        }

        @CustomType.Setter
        public Builder absent(@Nullable String absent) {

            this.absent = absent;
            return this;
        }
        @CustomType.Setter
        public Builder contains(@Nullable String contains) {

            this.contains = contains;
            return this;
        }
        @CustomType.Setter
        public Builder endswith(@Nullable String endswith) {

            this.endswith = endswith;
            return this;
        }
        @CustomType.Setter
        public Builder exact(@Nullable String exact) {

            this.exact = exact;
            return this;
        }
        @CustomType.Setter
        public Builder present(@Nullable String present) {

            this.present = present;
            return this;
        }
        @CustomType.Setter
        public Builder startswith(@Nullable String startswith) {

            this.startswith = startswith;
            return this;
        }
        public GetDnsRecordsComment build() {
            final var _resultValue = new GetDnsRecordsComment();
            _resultValue.absent = absent;
            _resultValue.contains = contains;
            _resultValue.endswith = endswith;
            _resultValue.exact = exact;
            _resultValue.present = present;
            _resultValue.startswith = startswith;
            return _resultValue;
        }
    }
}
