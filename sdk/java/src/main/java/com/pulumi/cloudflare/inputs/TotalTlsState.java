// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TotalTlsState extends com.pulumi.resources.ResourceArgs {

    public static final TotalTlsState Empty = new TotalTlsState();

    /**
     * The Certificate Authority that Total TLS certificates will be issued through.
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    @Import(name="certificateAuthority")
    private @Nullable Output<String> certificateAuthority;

    /**
     * @return The Certificate Authority that Total TLS certificates will be issued through.
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    public Optional<Output<String>> certificateAuthority() {
        return Optional.ofNullable(this.certificateAuthority);
    }

    /**
     * If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The validity period in days for the certificates ordered via Total TLS.
     * Available values: 90.
     * 
     */
    @Import(name="validityPeriod")
    private @Nullable Output<Integer> validityPeriod;

    /**
     * @return The validity period in days for the certificates ordered via Total TLS.
     * Available values: 90.
     * 
     */
    public Optional<Output<Integer>> validityPeriod() {
        return Optional.ofNullable(this.validityPeriod);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private TotalTlsState() {}

    private TotalTlsState(TotalTlsState $) {
        this.certificateAuthority = $.certificateAuthority;
        this.enabled = $.enabled;
        this.validityPeriod = $.validityPeriod;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TotalTlsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TotalTlsState $;

        public Builder() {
            $ = new TotalTlsState();
        }

        public Builder(TotalTlsState defaults) {
            $ = new TotalTlsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority The Certificate Authority that Total TLS certificates will be issued through.
         * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(@Nullable Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority The Certificate Authority that Total TLS certificates will be issued through.
         * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param enabled If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If enabled, Total TLS will order a hostname specific TLS certificate for any proxied A, AAAA, or CNAME record in your zone.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param validityPeriod The validity period in days for the certificates ordered via Total TLS.
         * Available values: 90.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(@Nullable Output<Integer> validityPeriod) {
            $.validityPeriod = validityPeriod;
            return this;
        }

        /**
         * @param validityPeriod The validity period in days for the certificates ordered via Total TLS.
         * Available values: 90.
         * 
         * @return builder
         * 
         */
        public Builder validityPeriod(Integer validityPeriod) {
            return validityPeriod(Output.of(validityPeriod));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public TotalTlsState build() {
            return $;
        }
    }

}
