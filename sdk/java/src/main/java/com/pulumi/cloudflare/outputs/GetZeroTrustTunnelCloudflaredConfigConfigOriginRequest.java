// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest {
    /**
     * @return For all L7 requests to this hostname, cloudflared will validate each request&#39;s Cf-Access-Jwt-Assertion request header.
     * 
     */
    private GetZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access;
    /**
     * @return Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
     * 
     */
    private String caPool;
    /**
     * @return Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
     * 
     */
    private Integer connectTimeout;
    /**
     * @return Disables chunked transfer encoding. Useful if you are running a WSGI server.
     * 
     */
    private Boolean disableChunkedEncoding;
    /**
     * @return Attempt to connect to origin using HTTP2. Origin must be configured as https.
     * 
     */
    private Boolean http2Origin;
    /**
     * @return Sets the HTTP Host header on requests sent to the local service.
     * 
     */
    private String httpHostHeader;
    /**
     * @return Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
     * 
     */
    private Integer keepAliveConnections;
    /**
     * @return Timeout after which an idle keepalive connection can be discarded.
     * 
     */
    private Integer keepAliveTimeout;
    /**
     * @return Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
     * 
     */
    private Boolean noHappyEyeballs;
    /**
     * @return Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
     * 
     */
    private Boolean noTlsVerify;
    /**
     * @return Hostname that cloudflared should expect from your origin server certificate.
     * 
     */
    private String originServerName;
    /**
     * @return cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: &#34;&#34; for the regular proxy and &#34;socks&#34; for a SOCKS5 proxy.
     * 
     */
    private String proxyType;
    /**
     * @return The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
     * 
     */
    private Integer tcpKeepAlive;
    /**
     * @return Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
     * 
     */
    private Integer tlsTimeout;

    private GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest() {}
    /**
     * @return For all L7 requests to this hostname, cloudflared will validate each request&#39;s Cf-Access-Jwt-Assertion request header.
     * 
     */
    public GetZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access() {
        return this.access;
    }
    /**
     * @return Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
     * 
     */
    public String caPool() {
        return this.caPool;
    }
    /**
     * @return Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
     * 
     */
    public Integer connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * @return Disables chunked transfer encoding. Useful if you are running a WSGI server.
     * 
     */
    public Boolean disableChunkedEncoding() {
        return this.disableChunkedEncoding;
    }
    /**
     * @return Attempt to connect to origin using HTTP2. Origin must be configured as https.
     * 
     */
    public Boolean http2Origin() {
        return this.http2Origin;
    }
    /**
     * @return Sets the HTTP Host header on requests sent to the local service.
     * 
     */
    public String httpHostHeader() {
        return this.httpHostHeader;
    }
    /**
     * @return Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
     * 
     */
    public Integer keepAliveConnections() {
        return this.keepAliveConnections;
    }
    /**
     * @return Timeout after which an idle keepalive connection can be discarded.
     * 
     */
    public Integer keepAliveTimeout() {
        return this.keepAliveTimeout;
    }
    /**
     * @return Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
     * 
     */
    public Boolean noHappyEyeballs() {
        return this.noHappyEyeballs;
    }
    /**
     * @return Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
     * 
     */
    public Boolean noTlsVerify() {
        return this.noTlsVerify;
    }
    /**
     * @return Hostname that cloudflared should expect from your origin server certificate.
     * 
     */
    public String originServerName() {
        return this.originServerName;
    }
    /**
     * @return cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: &#34;&#34; for the regular proxy and &#34;socks&#34; for a SOCKS5 proxy.
     * 
     */
    public String proxyType() {
        return this.proxyType;
    }
    /**
     * @return The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
     * 
     */
    public Integer tcpKeepAlive() {
        return this.tcpKeepAlive;
    }
    /**
     * @return Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
     * 
     */
    public Integer tlsTimeout() {
        return this.tlsTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access;
        private String caPool;
        private Integer connectTimeout;
        private Boolean disableChunkedEncoding;
        private Boolean http2Origin;
        private String httpHostHeader;
        private Integer keepAliveConnections;
        private Integer keepAliveTimeout;
        private Boolean noHappyEyeballs;
        private Boolean noTlsVerify;
        private String originServerName;
        private String proxyType;
        private Integer tcpKeepAlive;
        private Integer tlsTimeout;
        public Builder() {}
        public Builder(GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.caPool = defaults.caPool;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.disableChunkedEncoding = defaults.disableChunkedEncoding;
    	      this.http2Origin = defaults.http2Origin;
    	      this.httpHostHeader = defaults.httpHostHeader;
    	      this.keepAliveConnections = defaults.keepAliveConnections;
    	      this.keepAliveTimeout = defaults.keepAliveTimeout;
    	      this.noHappyEyeballs = defaults.noHappyEyeballs;
    	      this.noTlsVerify = defaults.noTlsVerify;
    	      this.originServerName = defaults.originServerName;
    	      this.proxyType = defaults.proxyType;
    	      this.tcpKeepAlive = defaults.tcpKeepAlive;
    	      this.tlsTimeout = defaults.tlsTimeout;
        }

        @CustomType.Setter
        public Builder access(GetZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access) {
            if (access == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "access");
            }
            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder caPool(String caPool) {
            if (caPool == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "caPool");
            }
            this.caPool = caPool;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(Integer connectTimeout) {
            if (connectTimeout == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "connectTimeout");
            }
            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder disableChunkedEncoding(Boolean disableChunkedEncoding) {
            if (disableChunkedEncoding == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "disableChunkedEncoding");
            }
            this.disableChunkedEncoding = disableChunkedEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder http2Origin(Boolean http2Origin) {
            if (http2Origin == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "http2Origin");
            }
            this.http2Origin = http2Origin;
            return this;
        }
        @CustomType.Setter
        public Builder httpHostHeader(String httpHostHeader) {
            if (httpHostHeader == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "httpHostHeader");
            }
            this.httpHostHeader = httpHostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveConnections(Integer keepAliveConnections) {
            if (keepAliveConnections == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "keepAliveConnections");
            }
            this.keepAliveConnections = keepAliveConnections;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveTimeout(Integer keepAliveTimeout) {
            if (keepAliveTimeout == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "keepAliveTimeout");
            }
            this.keepAliveTimeout = keepAliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder noHappyEyeballs(Boolean noHappyEyeballs) {
            if (noHappyEyeballs == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "noHappyEyeballs");
            }
            this.noHappyEyeballs = noHappyEyeballs;
            return this;
        }
        @CustomType.Setter
        public Builder noTlsVerify(Boolean noTlsVerify) {
            if (noTlsVerify == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "noTlsVerify");
            }
            this.noTlsVerify = noTlsVerify;
            return this;
        }
        @CustomType.Setter
        public Builder originServerName(String originServerName) {
            if (originServerName == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "originServerName");
            }
            this.originServerName = originServerName;
            return this;
        }
        @CustomType.Setter
        public Builder proxyType(String proxyType) {
            if (proxyType == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "proxyType");
            }
            this.proxyType = proxyType;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepAlive(Integer tcpKeepAlive) {
            if (tcpKeepAlive == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "tcpKeepAlive");
            }
            this.tcpKeepAlive = tcpKeepAlive;
            return this;
        }
        @CustomType.Setter
        public Builder tlsTimeout(Integer tlsTimeout) {
            if (tlsTimeout == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest", "tlsTimeout");
            }
            this.tlsTimeout = tlsTimeout;
            return this;
        }
        public GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest build() {
            final var _resultValue = new GetZeroTrustTunnelCloudflaredConfigConfigOriginRequest();
            _resultValue.access = access;
            _resultValue.caPool = caPool;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.disableChunkedEncoding = disableChunkedEncoding;
            _resultValue.http2Origin = http2Origin;
            _resultValue.httpHostHeader = httpHostHeader;
            _resultValue.keepAliveConnections = keepAliveConnections;
            _resultValue.keepAliveTimeout = keepAliveTimeout;
            _resultValue.noHappyEyeballs = noHappyEyeballs;
            _resultValue.noTlsVerify = noTlsVerify;
            _resultValue.originServerName = originServerName;
            _resultValue.proxyType = proxyType;
            _resultValue.tcpKeepAlive = tcpKeepAlive;
            _resultValue.tlsTimeout = tlsTimeout;
            return _resultValue;
        }
    }
}
