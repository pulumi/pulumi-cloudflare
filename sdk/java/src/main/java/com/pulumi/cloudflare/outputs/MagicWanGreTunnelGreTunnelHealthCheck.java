// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.MagicWanGreTunnelGreTunnelHealthCheckTarget;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MagicWanGreTunnelGreTunnelHealthCheck {
    /**
     * @return The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * 
     */
    private @Nullable String direction;
    /**
     * @return Determines whether to run healthchecks for a tunnel.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return How frequent the health check is run. The default value is `mid`.
     * 
     */
    private @Nullable String rate;
    /**
     * @return The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    private @Nullable MagicWanGreTunnelGreTunnelHealthCheckTarget target;
    /**
     * @return The type of healthcheck to run, reply or request. The default value is `reply`.
     * 
     */
    private @Nullable String type;

    private MagicWanGreTunnelGreTunnelHealthCheck() {}
    /**
     * @return The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return Determines whether to run healthchecks for a tunnel.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return How frequent the health check is run. The default value is `mid`.
     * 
     */
    public Optional<String> rate() {
        return Optional.ofNullable(this.rate);
    }
    /**
     * @return The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    public Optional<MagicWanGreTunnelGreTunnelHealthCheckTarget> target() {
        return Optional.ofNullable(this.target);
    }
    /**
     * @return The type of healthcheck to run, reply or request. The default value is `reply`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MagicWanGreTunnelGreTunnelHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String direction;
        private @Nullable Boolean enabled;
        private @Nullable String rate;
        private @Nullable MagicWanGreTunnelGreTunnelHealthCheckTarget target;
        private @Nullable String type;
        public Builder() {}
        public Builder(MagicWanGreTunnelGreTunnelHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.enabled = defaults.enabled;
    	      this.rate = defaults.rate;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder direction(@Nullable String direction) {

            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder rate(@Nullable String rate) {

            this.rate = rate;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable MagicWanGreTunnelGreTunnelHealthCheckTarget target) {

            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public MagicWanGreTunnelGreTunnelHealthCheck build() {
            final var _resultValue = new MagicWanGreTunnelGreTunnelHealthCheck();
            _resultValue.direction = direction;
            _resultValue.enabled = enabled;
            _resultValue.rate = rate;
            _resultValue.target = target;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
