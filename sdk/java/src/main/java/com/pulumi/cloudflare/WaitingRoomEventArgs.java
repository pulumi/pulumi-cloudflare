// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WaitingRoomEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final WaitingRoomEventArgs Empty = new WaitingRoomEventArgs();

    /**
     * This is a templated html file that will be rendered at the edge.
     * 
     */
    @Import(name="customPageHtml")
    private @Nullable Output<String> customPageHtml;

    /**
     * @return This is a templated html file that will be rendered at the edge.
     * 
     */
    public Optional<Output<String>> customPageHtml() {
        return Optional.ofNullable(this.customPageHtml);
    }

    /**
     * A description to let users add more details about the event.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description to let users add more details about the event.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Disables automatic renewal of session cookies.
     * 
     */
    @Import(name="disableSessionRenewal")
    private @Nullable Output<Boolean> disableSessionRenewal;

    /**
     * @return Disables automatic renewal of session cookies.
     * 
     */
    public Optional<Output<Boolean>> disableSessionRenewal() {
        return Optional.ofNullable(this.disableSessionRenewal);
    }

    /**
     * ISO 8601 timestamp that marks the end of the event. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="eventEndTime", required=true)
    private Output<String> eventEndTime;

    /**
     * @return ISO 8601 timestamp that marks the end of the event. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> eventEndTime() {
        return this.eventEndTime;
    }

    /**
     * ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before `event_end_time`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="eventStartTime", required=true)
    private Output<String> eventStartTime;

    /**
     * @return ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before `event_end_time`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> eventStartTime() {
        return this.eventStartTime;
    }

    /**
     * A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The number of new users that will be let into the route every minute.
     * 
     */
    @Import(name="newUsersPerMinute")
    private @Nullable Output<Integer> newUsersPerMinute;

    /**
     * @return The number of new users that will be let into the route every minute.
     * 
     */
    public Optional<Output<Integer>> newUsersPerMinute() {
        return Optional.ofNullable(this.newUsersPerMinute);
    }

    /**
     * ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before `event_start_time`.
     * 
     */
    @Import(name="prequeueStartTime")
    private @Nullable Output<String> prequeueStartTime;

    /**
     * @return ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before `event_start_time`.
     * 
     */
    public Optional<Output<String>> prequeueStartTime() {
        return Optional.ofNullable(this.prequeueStartTime);
    }

    /**
     * The queueing method used by the waiting room. Available values: `fifo`, `random`, `passthrough`, `reject`.
     * 
     */
    @Import(name="queueingMethod")
    private @Nullable Output<String> queueingMethod;

    /**
     * @return The queueing method used by the waiting room. Available values: `fifo`, `random`, `passthrough`, `reject`.
     * 
     */
    public Optional<Output<String>> queueingMethod() {
        return Optional.ofNullable(this.queueingMethod);
    }

    /**
     * Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
     * 
     */
    @Import(name="sessionDuration")
    private @Nullable Output<Integer> sessionDuration;

    /**
     * @return Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
     * 
     */
    public Optional<Output<Integer>> sessionDuration() {
        return Optional.ofNullable(this.sessionDuration);
    }

    /**
     * Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Defaults to `false`.
     * 
     */
    @Import(name="shuffleAtEventStart")
    private @Nullable Output<Boolean> shuffleAtEventStart;

    /**
     * @return Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> shuffleAtEventStart() {
        return Optional.ofNullable(this.shuffleAtEventStart);
    }

    /**
     * If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
     * 
     */
    @Import(name="suspended")
    private @Nullable Output<Boolean> suspended;

    /**
     * @return If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
     * 
     */
    public Optional<Output<Boolean>> suspended() {
        return Optional.ofNullable(this.suspended);
    }

    /**
     * The total number of active user sessions on the route at a point in time.
     * 
     */
    @Import(name="totalActiveUsers")
    private @Nullable Output<Integer> totalActiveUsers;

    /**
     * @return The total number of active user sessions on the route at a point in time.
     * 
     */
    public Optional<Output<Integer>> totalActiveUsers() {
        return Optional.ofNullable(this.totalActiveUsers);
    }

    /**
     * The Waiting Room ID the event should apply to. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="waitingRoomId", required=true)
    private Output<String> waitingRoomId;

    /**
     * @return The Waiting Room ID the event should apply to. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> waitingRoomId() {
        return this.waitingRoomId;
    }

    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private WaitingRoomEventArgs() {}

    private WaitingRoomEventArgs(WaitingRoomEventArgs $) {
        this.customPageHtml = $.customPageHtml;
        this.description = $.description;
        this.disableSessionRenewal = $.disableSessionRenewal;
        this.eventEndTime = $.eventEndTime;
        this.eventStartTime = $.eventStartTime;
        this.name = $.name;
        this.newUsersPerMinute = $.newUsersPerMinute;
        this.prequeueStartTime = $.prequeueStartTime;
        this.queueingMethod = $.queueingMethod;
        this.sessionDuration = $.sessionDuration;
        this.shuffleAtEventStart = $.shuffleAtEventStart;
        this.suspended = $.suspended;
        this.totalActiveUsers = $.totalActiveUsers;
        this.waitingRoomId = $.waitingRoomId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WaitingRoomEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WaitingRoomEventArgs $;

        public Builder() {
            $ = new WaitingRoomEventArgs();
        }

        public Builder(WaitingRoomEventArgs defaults) {
            $ = new WaitingRoomEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customPageHtml This is a templated html file that will be rendered at the edge.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(@Nullable Output<String> customPageHtml) {
            $.customPageHtml = customPageHtml;
            return this;
        }

        /**
         * @param customPageHtml This is a templated html file that will be rendered at the edge.
         * 
         * @return builder
         * 
         */
        public Builder customPageHtml(String customPageHtml) {
            return customPageHtml(Output.of(customPageHtml));
        }

        /**
         * @param description A description to let users add more details about the event.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description to let users add more details about the event.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableSessionRenewal Disables automatic renewal of session cookies.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewal(@Nullable Output<Boolean> disableSessionRenewal) {
            $.disableSessionRenewal = disableSessionRenewal;
            return this;
        }

        /**
         * @param disableSessionRenewal Disables automatic renewal of session cookies.
         * 
         * @return builder
         * 
         */
        public Builder disableSessionRenewal(Boolean disableSessionRenewal) {
            return disableSessionRenewal(Output.of(disableSessionRenewal));
        }

        /**
         * @param eventEndTime ISO 8601 timestamp that marks the end of the event. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder eventEndTime(Output<String> eventEndTime) {
            $.eventEndTime = eventEndTime;
            return this;
        }

        /**
         * @param eventEndTime ISO 8601 timestamp that marks the end of the event. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder eventEndTime(String eventEndTime) {
            return eventEndTime(Output.of(eventEndTime));
        }

        /**
         * @param eventStartTime ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before `event_end_time`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder eventStartTime(Output<String> eventStartTime) {
            $.eventStartTime = eventStartTime;
            return this;
        }

        /**
         * @param eventStartTime ISO 8601 timestamp that marks the start of the event. Must occur at least 1 minute before `event_end_time`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder eventStartTime(String eventStartTime) {
            return eventStartTime(Output.of(eventStartTime));
        }

        /**
         * @param name A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to identify the event. Only alphanumeric characters, hyphens, and underscores are allowed. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param newUsersPerMinute The number of new users that will be let into the route every minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(@Nullable Output<Integer> newUsersPerMinute) {
            $.newUsersPerMinute = newUsersPerMinute;
            return this;
        }

        /**
         * @param newUsersPerMinute The number of new users that will be let into the route every minute.
         * 
         * @return builder
         * 
         */
        public Builder newUsersPerMinute(Integer newUsersPerMinute) {
            return newUsersPerMinute(Output.of(newUsersPerMinute));
        }

        /**
         * @param prequeueStartTime ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before `event_start_time`.
         * 
         * @return builder
         * 
         */
        public Builder prequeueStartTime(@Nullable Output<String> prequeueStartTime) {
            $.prequeueStartTime = prequeueStartTime;
            return this;
        }

        /**
         * @param prequeueStartTime ISO 8601 timestamp that marks when to begin queueing all users before the event starts. Must occur at least 5 minutes before `event_start_time`.
         * 
         * @return builder
         * 
         */
        public Builder prequeueStartTime(String prequeueStartTime) {
            return prequeueStartTime(Output.of(prequeueStartTime));
        }

        /**
         * @param queueingMethod The queueing method used by the waiting room. Available values: `fifo`, `random`, `passthrough`, `reject`.
         * 
         * @return builder
         * 
         */
        public Builder queueingMethod(@Nullable Output<String> queueingMethod) {
            $.queueingMethod = queueingMethod;
            return this;
        }

        /**
         * @param queueingMethod The queueing method used by the waiting room. Available values: `fifo`, `random`, `passthrough`, `reject`.
         * 
         * @return builder
         * 
         */
        public Builder queueingMethod(String queueingMethod) {
            return queueingMethod(Output.of(queueingMethod));
        }

        /**
         * @param sessionDuration Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(@Nullable Output<Integer> sessionDuration) {
            $.sessionDuration = sessionDuration;
            return this;
        }

        /**
         * @param sessionDuration Lifetime of a cookie (in minutes) set by Cloudflare for users who get access to the origin.
         * 
         * @return builder
         * 
         */
        public Builder sessionDuration(Integer sessionDuration) {
            return sessionDuration(Output.of(sessionDuration));
        }

        /**
         * @param shuffleAtEventStart Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder shuffleAtEventStart(@Nullable Output<Boolean> shuffleAtEventStart) {
            $.shuffleAtEventStart = shuffleAtEventStart;
            return this;
        }

        /**
         * @param shuffleAtEventStart Users in the prequeue will be shuffled randomly at the `event_start_time`. Requires that `prequeue_start_time` is not null. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder shuffleAtEventStart(Boolean shuffleAtEventStart) {
            return shuffleAtEventStart(Output.of(shuffleAtEventStart));
        }

        /**
         * @param suspended If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
         * 
         * @return builder
         * 
         */
        public Builder suspended(@Nullable Output<Boolean> suspended) {
            $.suspended = suspended;
            return this;
        }

        /**
         * @param suspended If suspended, the event is ignored and traffic will be handled based on the waiting room configuration.
         * 
         * @return builder
         * 
         */
        public Builder suspended(Boolean suspended) {
            return suspended(Output.of(suspended));
        }

        /**
         * @param totalActiveUsers The total number of active user sessions on the route at a point in time.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(@Nullable Output<Integer> totalActiveUsers) {
            $.totalActiveUsers = totalActiveUsers;
            return this;
        }

        /**
         * @param totalActiveUsers The total number of active user sessions on the route at a point in time.
         * 
         * @return builder
         * 
         */
        public Builder totalActiveUsers(Integer totalActiveUsers) {
            return totalActiveUsers(Output.of(totalActiveUsers));
        }

        /**
         * @param waitingRoomId The Waiting Room ID the event should apply to. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(Output<String> waitingRoomId) {
            $.waitingRoomId = waitingRoomId;
            return this;
        }

        /**
         * @param waitingRoomId The Waiting Room ID the event should apply to. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder waitingRoomId(String waitingRoomId) {
            return waitingRoomId(Output.of(waitingRoomId));
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public WaitingRoomEventArgs build() {
            if ($.eventEndTime == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "eventEndTime");
            }
            if ($.eventStartTime == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "eventStartTime");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "name");
            }
            if ($.waitingRoomId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "waitingRoomId");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("WaitingRoomEventArgs", "zoneId");
            }
            return $;
        }
    }

}
