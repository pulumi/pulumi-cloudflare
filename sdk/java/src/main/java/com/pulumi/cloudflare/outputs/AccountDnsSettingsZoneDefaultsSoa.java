// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountDnsSettingsZoneDefaultsSoa {
    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    private @Nullable Double expire;
    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    private @Nullable Double minTtl;
    /**
     * @return The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
     * 
     */
    private @Nullable String mname;
    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    private @Nullable Double refresh;
    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    private @Nullable Double retry;
    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    private @Nullable String rname;
    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    private @Nullable Double ttl;

    private AccountDnsSettingsZoneDefaultsSoa() {}
    /**
     * @return Time in seconds of being unable to query the primary server after which secondary servers should stop serving the zone.
     * 
     */
    public Optional<Double> expire() {
        return Optional.ofNullable(this.expire);
    }
    /**
     * @return The time to live (TTL) for negative caching of records within the zone.
     * 
     */
    public Optional<Double> minTtl() {
        return Optional.ofNullable(this.minTtl);
    }
    /**
     * @return The primary nameserver, which may be used for outbound zone transfers. If null, a Cloudflare-assigned value will be used.
     * 
     */
    public Optional<String> mname() {
        return Optional.ofNullable(this.mname);
    }
    /**
     * @return Time in seconds after which secondary servers should re-check the SOA record to see if the zone has been updated.
     * 
     */
    public Optional<Double> refresh() {
        return Optional.ofNullable(this.refresh);
    }
    /**
     * @return Time in seconds after which secondary servers should retry queries after the primary server was unresponsive.
     * 
     */
    public Optional<Double> retry() {
        return Optional.ofNullable(this.retry);
    }
    /**
     * @return The email address of the zone administrator, with the first label representing the local part of the email address.
     * 
     */
    public Optional<String> rname() {
        return Optional.ofNullable(this.rname);
    }
    /**
     * @return The time to live (TTL) of the SOA record itself.
     * 
     */
    public Optional<Double> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountDnsSettingsZoneDefaultsSoa defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double expire;
        private @Nullable Double minTtl;
        private @Nullable String mname;
        private @Nullable Double refresh;
        private @Nullable Double retry;
        private @Nullable String rname;
        private @Nullable Double ttl;
        public Builder() {}
        public Builder(AccountDnsSettingsZoneDefaultsSoa defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expire = defaults.expire;
    	      this.minTtl = defaults.minTtl;
    	      this.mname = defaults.mname;
    	      this.refresh = defaults.refresh;
    	      this.retry = defaults.retry;
    	      this.rname = defaults.rname;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder expire(@Nullable Double expire) {

            this.expire = expire;
            return this;
        }
        @CustomType.Setter
        public Builder minTtl(@Nullable Double minTtl) {

            this.minTtl = minTtl;
            return this;
        }
        @CustomType.Setter
        public Builder mname(@Nullable String mname) {

            this.mname = mname;
            return this;
        }
        @CustomType.Setter
        public Builder refresh(@Nullable Double refresh) {

            this.refresh = refresh;
            return this;
        }
        @CustomType.Setter
        public Builder retry(@Nullable Double retry) {

            this.retry = retry;
            return this;
        }
        @CustomType.Setter
        public Builder rname(@Nullable String rname) {

            this.rname = rname;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable Double ttl) {

            this.ttl = ttl;
            return this;
        }
        public AccountDnsSettingsZoneDefaultsSoa build() {
            final var _resultValue = new AccountDnsSettingsZoneDefaultsSoa();
            _resultValue.expire = expire;
            _resultValue.minTtl = minTtl;
            _resultValue.mname = mname;
            _resultValue.refresh = refresh;
            _resultValue.retry = retry;
            _resultValue.rname = rname;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
