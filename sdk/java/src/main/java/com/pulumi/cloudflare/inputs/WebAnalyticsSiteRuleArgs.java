// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAnalyticsSiteRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAnalyticsSiteRuleArgs Empty = new WebAnalyticsSiteRuleArgs();

    @Import(name="created")
    private @Nullable Output<String> created;

    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * The hostname the rule will be applied to.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The hostname the rule will be applied to.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The Web Analytics rule identifier.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The Web Analytics rule identifier.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether the rule includes or excludes traffic from being measured.
     * 
     */
    @Import(name="inclusive")
    private @Nullable Output<Boolean> inclusive;

    /**
     * @return Whether the rule includes or excludes traffic from being measured.
     * 
     */
    public Optional<Output<Boolean>> inclusive() {
        return Optional.ofNullable(this.inclusive);
    }

    /**
     * Whether the rule is paused or not.
     * 
     */
    @Import(name="isPaused")
    private @Nullable Output<Boolean> isPaused;

    /**
     * @return Whether the rule is paused or not.
     * 
     */
    public Optional<Output<Boolean>> isPaused() {
        return Optional.ofNullable(this.isPaused);
    }

    /**
     * The paths the rule will be applied to.
     * 
     */
    @Import(name="paths")
    private @Nullable Output<List<String>> paths;

    /**
     * @return The paths the rule will be applied to.
     * 
     */
    public Optional<Output<List<String>>> paths() {
        return Optional.ofNullable(this.paths);
    }

    @Import(name="priority")
    private @Nullable Output<Double> priority;

    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    private WebAnalyticsSiteRuleArgs() {}

    private WebAnalyticsSiteRuleArgs(WebAnalyticsSiteRuleArgs $) {
        this.created = $.created;
        this.host = $.host;
        this.id = $.id;
        this.inclusive = $.inclusive;
        this.isPaused = $.isPaused;
        this.paths = $.paths;
        this.priority = $.priority;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAnalyticsSiteRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAnalyticsSiteRuleArgs $;

        public Builder() {
            $ = new WebAnalyticsSiteRuleArgs();
        }

        public Builder(WebAnalyticsSiteRuleArgs defaults) {
            $ = new WebAnalyticsSiteRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param host The hostname the rule will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The hostname the rule will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param id The Web Analytics rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Web Analytics rule identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param inclusive Whether the rule includes or excludes traffic from being measured.
         * 
         * @return builder
         * 
         */
        public Builder inclusive(@Nullable Output<Boolean> inclusive) {
            $.inclusive = inclusive;
            return this;
        }

        /**
         * @param inclusive Whether the rule includes or excludes traffic from being measured.
         * 
         * @return builder
         * 
         */
        public Builder inclusive(Boolean inclusive) {
            return inclusive(Output.of(inclusive));
        }

        /**
         * @param isPaused Whether the rule is paused or not.
         * 
         * @return builder
         * 
         */
        public Builder isPaused(@Nullable Output<Boolean> isPaused) {
            $.isPaused = isPaused;
            return this;
        }

        /**
         * @param isPaused Whether the rule is paused or not.
         * 
         * @return builder
         * 
         */
        public Builder isPaused(Boolean isPaused) {
            return isPaused(Output.of(isPaused));
        }

        /**
         * @param paths The paths the rule will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable Output<List<String>> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths The paths the rule will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            return paths(Output.of(paths));
        }

        /**
         * @param paths The paths the rule will be applied to.
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        public WebAnalyticsSiteRuleArgs build() {
            return $;
        }
    }

}
