// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneDnssecArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneDnssecArgs Empty = new ZoneDnssecArgs();

    /**
     * If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    @Import(name="dnssecMultiSigner")
    private @Nullable Output<Boolean> dnssecMultiSigner;

    /**
     * @return If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
     * providers to serve a DNSSEC-signed zone at the same time.
     * This is required for DNSKEY records (except those automatically
     * generated by Cloudflare) to be added to the zone.
     * 
     */
    public Optional<Output<Boolean>> dnssecMultiSigner() {
        return Optional.ofNullable(this.dnssecMultiSigner);
    }

    /**
     * If true, allows Cloudflare to transfer in a DNSSEC-signed zone
     * including signatures from an external provider, without requiring
     * Cloudflare to sign any records on the fly.
     * 
     * Note that this feature has some limitations.
     * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
     * 
     */
    @Import(name="dnssecPresigned")
    private @Nullable Output<Boolean> dnssecPresigned;

    /**
     * @return If true, allows Cloudflare to transfer in a DNSSEC-signed zone
     * including signatures from an external provider, without requiring
     * Cloudflare to sign any records on the fly.
     * 
     * Note that this feature has some limitations.
     * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
     * 
     */
    public Optional<Output<Boolean>> dnssecPresigned() {
        return Optional.ofNullable(this.dnssecPresigned);
    }

    /**
     * If true, enables the use of NSEC3 together with DNSSEC on the zone.
     * Combined with setting dnssecPresigned to true, this enables the use of
     * NSEC3 records when transferring in from an external provider.
     * If dnssecPresigned is instead set to false (default), NSEC3 records will be
     * generated and signed at request time.
     * 
     * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    @Import(name="dnssecUseNsec3")
    private @Nullable Output<Boolean> dnssecUseNsec3;

    /**
     * @return If true, enables the use of NSEC3 together with DNSSEC on the zone.
     * Combined with setting dnssecPresigned to true, this enables the use of
     * NSEC3 records when transferring in from an external provider.
     * If dnssecPresigned is instead set to false (default), NSEC3 records will be
     * generated and signed at request time.
     * 
     * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
     * 
     */
    public Optional<Output<Boolean>> dnssecUseNsec3() {
        return Optional.ofNullable(this.dnssecUseNsec3);
    }

    /**
     * Status of DNSSEC, based on user-desired state and presence of necessary records.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of DNSSEC, based on user-desired state and presence of necessary records.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ZoneDnssecArgs() {}

    private ZoneDnssecArgs(ZoneDnssecArgs $) {
        this.dnssecMultiSigner = $.dnssecMultiSigner;
        this.dnssecPresigned = $.dnssecPresigned;
        this.dnssecUseNsec3 = $.dnssecUseNsec3;
        this.status = $.status;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneDnssecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneDnssecArgs $;

        public Builder() {
            $ = new ZoneDnssecArgs();
        }

        public Builder(ZoneDnssecArgs defaults) {
            $ = new ZoneDnssecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnssecMultiSigner If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
         * providers to serve a DNSSEC-signed zone at the same time.
         * This is required for DNSKEY records (except those automatically
         * generated by Cloudflare) to be added to the zone.
         * 
         * @return builder
         * 
         */
        public Builder dnssecMultiSigner(@Nullable Output<Boolean> dnssecMultiSigner) {
            $.dnssecMultiSigner = dnssecMultiSigner;
            return this;
        }

        /**
         * @param dnssecMultiSigner If true, multi-signer DNSSEC is enabled on the zone, allowing multiple
         * providers to serve a DNSSEC-signed zone at the same time.
         * This is required for DNSKEY records (except those automatically
         * generated by Cloudflare) to be added to the zone.
         * 
         * @return builder
         * 
         */
        public Builder dnssecMultiSigner(Boolean dnssecMultiSigner) {
            return dnssecMultiSigner(Output.of(dnssecMultiSigner));
        }

        /**
         * @param dnssecPresigned If true, allows Cloudflare to transfer in a DNSSEC-signed zone
         * including signatures from an external provider, without requiring
         * Cloudflare to sign any records on the fly.
         * 
         * Note that this feature has some limitations.
         * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecPresigned(@Nullable Output<Boolean> dnssecPresigned) {
            $.dnssecPresigned = dnssecPresigned;
            return this;
        }

        /**
         * @param dnssecPresigned If true, allows Cloudflare to transfer in a DNSSEC-signed zone
         * including signatures from an external provider, without requiring
         * Cloudflare to sign any records on the fly.
         * 
         * Note that this feature has some limitations.
         * See [Cloudflare as Secondary](https://developers.cloudflare.com/dns/zone-setups/zone-transfers/cloudflare-as-secondary/setup/#dnssec) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecPresigned(Boolean dnssecPresigned) {
            return dnssecPresigned(Output.of(dnssecPresigned));
        }

        /**
         * @param dnssecUseNsec3 If true, enables the use of NSEC3 together with DNSSEC on the zone.
         * Combined with setting dnssecPresigned to true, this enables the use of
         * NSEC3 records when transferring in from an external provider.
         * If dnssecPresigned is instead set to false (default), NSEC3 records will be
         * generated and signed at request time.
         * 
         * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecUseNsec3(@Nullable Output<Boolean> dnssecUseNsec3) {
            $.dnssecUseNsec3 = dnssecUseNsec3;
            return this;
        }

        /**
         * @param dnssecUseNsec3 If true, enables the use of NSEC3 together with DNSSEC on the zone.
         * Combined with setting dnssecPresigned to true, this enables the use of
         * NSEC3 records when transferring in from an external provider.
         * If dnssecPresigned is instead set to false (default), NSEC3 records will be
         * generated and signed at request time.
         * 
         * See [DNSSEC with NSEC3](https://developers.cloudflare.com/dns/dnssec/enable-nsec3/) for details.
         * 
         * @return builder
         * 
         */
        public Builder dnssecUseNsec3(Boolean dnssecUseNsec3) {
            return dnssecUseNsec3(Output.of(dnssecUseNsec3));
        }

        /**
         * @param status Status of DNSSEC, based on user-desired state and presence of necessary records.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of DNSSEC, based on user-desired state and presence of necessary records.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneDnssecArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ZoneDnssecArgs", "zoneId");
            }
            return $;
        }
    }

}
