// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultMigrationsRenamedClass;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultMigrationsStep;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultMigrationsTransferredClass;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkerVersionsResultMigrations {
    /**
     * @return A list of classes to delete Durable Object namespaces from.
     * 
     */
    private List<String> deletedClasses;
    /**
     * @return A list of classes to create Durable Object namespaces from.
     * 
     */
    private List<String> newClasses;
    /**
     * @return A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    private List<String> newSqliteClasses;
    /**
     * @return Tag to set as the latest migration tag.
     * 
     */
    private String newTag;
    /**
     * @return Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    private String oldTag;
    /**
     * @return A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    private List<GetWorkerVersionsResultMigrationsRenamedClass> renamedClasses;
    /**
     * @return Migrations to apply in order.
     * 
     */
    private List<GetWorkerVersionsResultMigrationsStep> steps;
    /**
     * @return A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    private List<GetWorkerVersionsResultMigrationsTransferredClass> transferredClasses;

    private GetWorkerVersionsResultMigrations() {}
    /**
     * @return A list of classes to delete Durable Object namespaces from.
     * 
     */
    public List<String> deletedClasses() {
        return this.deletedClasses;
    }
    /**
     * @return A list of classes to create Durable Object namespaces from.
     * 
     */
    public List<String> newClasses() {
        return this.newClasses;
    }
    /**
     * @return A list of classes to create Durable Object namespaces with SQLite from.
     * 
     */
    public List<String> newSqliteClasses() {
        return this.newSqliteClasses;
    }
    /**
     * @return Tag to set as the latest migration tag.
     * 
     */
    public String newTag() {
        return this.newTag;
    }
    /**
     * @return Tag used to verify against the latest migration tag for this Worker. If they don&#39;t match, the upload is rejected.
     * 
     */
    public String oldTag() {
        return this.oldTag;
    }
    /**
     * @return A list of classes with Durable Object namespaces that were renamed.
     * 
     */
    public List<GetWorkerVersionsResultMigrationsRenamedClass> renamedClasses() {
        return this.renamedClasses;
    }
    /**
     * @return Migrations to apply in order.
     * 
     */
    public List<GetWorkerVersionsResultMigrationsStep> steps() {
        return this.steps;
    }
    /**
     * @return A list of transfers for Durable Object namespaces from a different Worker and class to a class defined in this Worker.
     * 
     */
    public List<GetWorkerVersionsResultMigrationsTransferredClass> transferredClasses() {
        return this.transferredClasses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerVersionsResultMigrations defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> deletedClasses;
        private List<String> newClasses;
        private List<String> newSqliteClasses;
        private String newTag;
        private String oldTag;
        private List<GetWorkerVersionsResultMigrationsRenamedClass> renamedClasses;
        private List<GetWorkerVersionsResultMigrationsStep> steps;
        private List<GetWorkerVersionsResultMigrationsTransferredClass> transferredClasses;
        public Builder() {}
        public Builder(GetWorkerVersionsResultMigrations defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deletedClasses = defaults.deletedClasses;
    	      this.newClasses = defaults.newClasses;
    	      this.newSqliteClasses = defaults.newSqliteClasses;
    	      this.newTag = defaults.newTag;
    	      this.oldTag = defaults.oldTag;
    	      this.renamedClasses = defaults.renamedClasses;
    	      this.steps = defaults.steps;
    	      this.transferredClasses = defaults.transferredClasses;
        }

        @CustomType.Setter
        public Builder deletedClasses(List<String> deletedClasses) {
            if (deletedClasses == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "deletedClasses");
            }
            this.deletedClasses = deletedClasses;
            return this;
        }
        public Builder deletedClasses(String... deletedClasses) {
            return deletedClasses(List.of(deletedClasses));
        }
        @CustomType.Setter
        public Builder newClasses(List<String> newClasses) {
            if (newClasses == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "newClasses");
            }
            this.newClasses = newClasses;
            return this;
        }
        public Builder newClasses(String... newClasses) {
            return newClasses(List.of(newClasses));
        }
        @CustomType.Setter
        public Builder newSqliteClasses(List<String> newSqliteClasses) {
            if (newSqliteClasses == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "newSqliteClasses");
            }
            this.newSqliteClasses = newSqliteClasses;
            return this;
        }
        public Builder newSqliteClasses(String... newSqliteClasses) {
            return newSqliteClasses(List.of(newSqliteClasses));
        }
        @CustomType.Setter
        public Builder newTag(String newTag) {
            if (newTag == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "newTag");
            }
            this.newTag = newTag;
            return this;
        }
        @CustomType.Setter
        public Builder oldTag(String oldTag) {
            if (oldTag == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "oldTag");
            }
            this.oldTag = oldTag;
            return this;
        }
        @CustomType.Setter
        public Builder renamedClasses(List<GetWorkerVersionsResultMigrationsRenamedClass> renamedClasses) {
            if (renamedClasses == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "renamedClasses");
            }
            this.renamedClasses = renamedClasses;
            return this;
        }
        public Builder renamedClasses(GetWorkerVersionsResultMigrationsRenamedClass... renamedClasses) {
            return renamedClasses(List.of(renamedClasses));
        }
        @CustomType.Setter
        public Builder steps(List<GetWorkerVersionsResultMigrationsStep> steps) {
            if (steps == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "steps");
            }
            this.steps = steps;
            return this;
        }
        public Builder steps(GetWorkerVersionsResultMigrationsStep... steps) {
            return steps(List.of(steps));
        }
        @CustomType.Setter
        public Builder transferredClasses(List<GetWorkerVersionsResultMigrationsTransferredClass> transferredClasses) {
            if (transferredClasses == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResultMigrations", "transferredClasses");
            }
            this.transferredClasses = transferredClasses;
            return this;
        }
        public Builder transferredClasses(GetWorkerVersionsResultMigrationsTransferredClass... transferredClasses) {
            return transferredClasses(List.of(transferredClasses));
        }
        public GetWorkerVersionsResultMigrations build() {
            final var _resultValue = new GetWorkerVersionsResultMigrations();
            _resultValue.deletedClasses = deletedClasses;
            _resultValue.newClasses = newClasses;
            _resultValue.newSqliteClasses = newSqliteClasses;
            _resultValue.newTag = newTag;
            _resultValue.oldTag = oldTag;
            _resultValue.renamedClasses = renamedClasses;
            _resultValue.steps = steps;
            _resultValue.transferredClasses = transferredClasses;
            return _resultValue;
        }
    }
}
