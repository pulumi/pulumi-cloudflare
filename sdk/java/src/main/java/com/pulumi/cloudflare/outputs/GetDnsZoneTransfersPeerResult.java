// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetDnsZoneTransfersPeerResult {
    private String accountId;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    private String ip;
    /**
     * @return Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    private Boolean ixfrEnable;
    /**
     * @return The name of the peer.
     * 
     */
    private String name;
    private @Nullable String peerId;
    /**
     * @return DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    private Double port;
    /**
     * @return TSIG authentication will be used for zone transfer if configured.
     * 
     */
    private String tsigId;

    private GetDnsZoneTransfersPeerResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IPv4/IPv6 address of primary or secondary nameserver, depending on what zone this peer is linked to. For primary zones this IP defines the IP of the secondary nameserver Cloudflare will NOTIFY upon zone changes. For secondary zones this IP defines the IP of the primary nameserver Cloudflare will send AXFR/IXFR requests to.
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return Enable IXFR transfer protocol, default is AXFR. Only applicable to secondary zones.
     * 
     */
    public Boolean ixfrEnable() {
        return this.ixfrEnable;
    }
    /**
     * @return The name of the peer.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> peerId() {
        return Optional.ofNullable(this.peerId);
    }
    /**
     * @return DNS port of primary or secondary nameserver, depending on what zone this peer is linked to.
     * 
     */
    public Double port() {
        return this.port;
    }
    /**
     * @return TSIG authentication will be used for zone transfer if configured.
     * 
     */
    public String tsigId() {
        return this.tsigId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsZoneTransfersPeerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String id;
        private String ip;
        private Boolean ixfrEnable;
        private String name;
        private @Nullable String peerId;
        private Double port;
        private String tsigId;
        public Builder() {}
        public Builder(GetDnsZoneTransfersPeerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.ixfrEnable = defaults.ixfrEnable;
    	      this.name = defaults.name;
    	      this.peerId = defaults.peerId;
    	      this.port = defaults.port;
    	      this.tsigId = defaults.tsigId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ixfrEnable(Boolean ixfrEnable) {
            if (ixfrEnable == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "ixfrEnable");
            }
            this.ixfrEnable = ixfrEnable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder peerId(@Nullable String peerId) {

            this.peerId = peerId;
            return this;
        }
        @CustomType.Setter
        public Builder port(Double port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder tsigId(String tsigId) {
            if (tsigId == null) {
              throw new MissingRequiredPropertyException("GetDnsZoneTransfersPeerResult", "tsigId");
            }
            this.tsigId = tsigId;
            return this;
        }
        public GetDnsZoneTransfersPeerResult build() {
            final var _resultValue = new GetDnsZoneTransfersPeerResult();
            _resultValue.accountId = accountId;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.ixfrEnable = ixfrEnable;
            _resultValue.name = name;
            _resultValue.peerId = peerId;
            _resultValue.port = port;
            _resultValue.tsigId = tsigId;
            return _resultValue;
        }
    }
}
