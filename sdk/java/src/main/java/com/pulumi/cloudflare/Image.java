// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.ImageArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.ImageState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.Image;
 * import com.pulumi.cloudflare.ImageArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleImage = new Image("exampleImage", ImageArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .imageId("id")
 *             .creator("creator")
 *             .file(null)
 *             .metadata(Map.ofEntries(
 *             ))
 *             .requireSignedUrls(true)
 *             .url("https://example.com/path/to/logo.png")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/image:Image example &#39;&lt;account_id&gt;/&lt;image_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/image:Image")
public class Image extends com.pulumi.resources.CustomResource {
    /**
     * Account identifier tag.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Can set the creator field with an internal user ID.
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> creator;

    /**
     * @return Can set the creator field with an internal user ID.
     * 
     */
    public Output<Optional<String>> creator() {
        return Codegen.optional(this.creator);
    }
    /**
     * An image binary data. Only needed when type is uploading a file.
     * 
     */
    @Export(name="file", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> file;

    /**
     * @return An image binary data. Only needed when type is uploading a file.
     * 
     */
    public Output<Optional<String>> file() {
        return Codegen.optional(this.file);
    }
    /**
     * Image file name.
     * 
     */
    @Export(name="filename", refs={String.class}, tree="[0]")
    private Output<String> filename;

    /**
     * @return Image file name.
     * 
     */
    public Output<String> filename() {
        return this.filename;
    }
    /**
     * An optional custom unique identifier for your image.
     * 
     */
    @Export(name="imageId", refs={String.class}, tree="[0]")
    private Output<String> imageId;

    /**
     * @return An optional custom unique identifier for your image.
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }
    /**
     * User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    @Export(name="meta", refs={String.class}, tree="[0]")
    private Output<String> meta;

    /**
     * @return User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    public Output<String> meta() {
        return this.meta;
    }
    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    @Export(name="metadata", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> metadata;

    /**
     * @return User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    public Output<Optional<String>> metadata() {
        return Codegen.optional(this.metadata);
    }
    /**
     * Indicates whether the image requires a signature token for the access.
     * 
     */
    @Export(name="requireSignedUrls", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the image requires a signature token for the access.
     * 
     */
    public Output<Boolean> requireSignedUrls() {
        return this.requireSignedUrls;
    }
    /**
     * When the media item was uploaded.
     * 
     */
    @Export(name="uploaded", refs={String.class}, tree="[0]")
    private Output<String> uploaded;

    /**
     * @return When the media item was uploaded.
     * 
     */
    public Output<String> uploaded() {
        return this.uploaded;
    }
    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    @Export(name="url", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> url;

    /**
     * @return A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    public Output<Optional<String>> url() {
        return Codegen.optional(this.url);
    }
    /**
     * Object specifying available variants for an image.
     * 
     */
    @Export(name="variants", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> variants;

    /**
     * @return Object specifying available variants for an image.
     * 
     */
    public Output<List<String>> variants() {
        return this.variants;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Image(java.lang.String name) {
        this(name, ImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Image(java.lang.String name, ImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Image(java.lang.String name, ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/image:Image", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Image(java.lang.String name, Output<java.lang.String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/image:Image", name, state, makeResourceOptions(options, id), false);
    }

    private static ImageArgs makeArgs(ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ImageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Image get(java.lang.String name, Output<java.lang.String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Image(name, id, state, options);
    }
}
