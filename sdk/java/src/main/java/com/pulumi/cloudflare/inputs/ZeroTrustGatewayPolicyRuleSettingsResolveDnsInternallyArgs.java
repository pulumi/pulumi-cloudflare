// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs Empty = new ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs();

    /**
     * The fallback behavior to apply when the internal DNS response code is different from &#39;NOERROR&#39; or when the response data only contains CNAME records for &#39;A&#39; or &#39;AAAA&#39; queries.
     * Available values: &#34;none&#34;, &#34;public_dns&#34;.
     * 
     */
    @Import(name="fallback")
    private @Nullable Output<String> fallback;

    /**
     * @return The fallback behavior to apply when the internal DNS response code is different from &#39;NOERROR&#39; or when the response data only contains CNAME records for &#39;A&#39; or &#39;AAAA&#39; queries.
     * Available values: &#34;none&#34;, &#34;public_dns&#34;.
     * 
     */
    public Optional<Output<String>> fallback() {
        return Optional.ofNullable(this.fallback);
    }

    /**
     * The internal DNS view identifier that&#39;s passed to the internal DNS service.
     * 
     */
    @Import(name="viewId")
    private @Nullable Output<String> viewId;

    /**
     * @return The internal DNS view identifier that&#39;s passed to the internal DNS service.
     * 
     */
    public Optional<Output<String>> viewId() {
        return Optional.ofNullable(this.viewId);
    }

    private ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs() {}

    private ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs(ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs $) {
        this.fallback = $.fallback;
        this.viewId = $.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs $;

        public Builder() {
            $ = new ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs();
        }

        public Builder(ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs defaults) {
            $ = new ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fallback The fallback behavior to apply when the internal DNS response code is different from &#39;NOERROR&#39; or when the response data only contains CNAME records for &#39;A&#39; or &#39;AAAA&#39; queries.
         * Available values: &#34;none&#34;, &#34;public_dns&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fallback(@Nullable Output<String> fallback) {
            $.fallback = fallback;
            return this;
        }

        /**
         * @param fallback The fallback behavior to apply when the internal DNS response code is different from &#39;NOERROR&#39; or when the response data only contains CNAME records for &#39;A&#39; or &#39;AAAA&#39; queries.
         * Available values: &#34;none&#34;, &#34;public_dns&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fallback(String fallback) {
            return fallback(Output.of(fallback));
        }

        /**
         * @param viewId The internal DNS view identifier that&#39;s passed to the internal DNS service.
         * 
         * @return builder
         * 
         */
        public Builder viewId(@Nullable Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId The internal DNS view identifier that&#39;s passed to the internal DNS service.
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        public ZeroTrustGatewayPolicyRuleSettingsResolveDnsInternallyArgs build() {
            return $;
        }
    }

}
