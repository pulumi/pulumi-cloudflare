// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetD1DatabaseFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetD1DatabaseArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetD1DatabaseArgs Empty = new GetD1DatabaseArgs();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

<<<<<<< HEAD
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

=======
    /**
     * D1 database identifier (UUID).
     * 
     */
    @Import(name="databaseId")
    private @Nullable Output<String> databaseId;

    /**
     * @return D1 database identifier (UUID).
     * 
     */
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    public Optional<Output<String>> databaseId() {
        return Optional.ofNullable(this.databaseId);
    }

    @Import(name="filter")
    private @Nullable Output<GetD1DatabaseFilterArgs> filter;

    public Optional<Output<GetD1DatabaseFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    private GetD1DatabaseArgs() {}

    private GetD1DatabaseArgs(GetD1DatabaseArgs $) {
        this.accountId = $.accountId;
        this.databaseId = $.databaseId;
        this.filter = $.filter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetD1DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetD1DatabaseArgs $;

        public Builder() {
            $ = new GetD1DatabaseArgs();
        }

        public Builder(GetD1DatabaseArgs defaults) {
            $ = new GetD1DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

<<<<<<< HEAD
=======
        /**
         * @param databaseId D1 database identifier (UUID).
         * 
         * @return builder
         * 
         */
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        public Builder databaseId(@Nullable Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

<<<<<<< HEAD
=======
        /**
         * @param databaseId D1 database identifier (UUID).
         * 
         * @return builder
         * 
         */
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        public Builder filter(@Nullable Output<GetD1DatabaseFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(GetD1DatabaseFilterArgs filter) {
            return filter(Output.of(filter));
        }

        public GetD1DatabaseArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetD1DatabaseArgs", "accountId");
            }
            return $;
        }
    }

}
