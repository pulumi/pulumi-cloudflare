// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HyperdriveConfigMtlsArgs extends com.pulumi.resources.ResourceArgs {

    public static final HyperdriveConfigMtlsArgs Empty = new HyperdriveConfigMtlsArgs();

    /**
     * Define CA certificate ID obtained after uploading CA cert.
     * 
     */
    @Import(name="caCertificateId")
    private @Nullable Output<String> caCertificateId;

    /**
     * @return Define CA certificate ID obtained after uploading CA cert.
     * 
     */
    public Optional<Output<String>> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }

    /**
     * Define mTLS certificate ID obtained after uploading client cert.
     * 
     */
    @Import(name="mtlsCertificateId")
    private @Nullable Output<String> mtlsCertificateId;

    /**
     * @return Define mTLS certificate ID obtained after uploading client cert.
     * 
     */
    public Optional<Output<String>> mtlsCertificateId() {
        return Optional.ofNullable(this.mtlsCertificateId);
    }

    /**
     * Set SSL mode to &#39;require&#39;, &#39;verify-ca&#39;, or &#39;verify-full&#39; to verify the CA.
     * 
     */
    @Import(name="sslmode")
    private @Nullable Output<String> sslmode;

    /**
     * @return Set SSL mode to &#39;require&#39;, &#39;verify-ca&#39;, or &#39;verify-full&#39; to verify the CA.
     * 
     */
    public Optional<Output<String>> sslmode() {
        return Optional.ofNullable(this.sslmode);
    }

    private HyperdriveConfigMtlsArgs() {}

    private HyperdriveConfigMtlsArgs(HyperdriveConfigMtlsArgs $) {
        this.caCertificateId = $.caCertificateId;
        this.mtlsCertificateId = $.mtlsCertificateId;
        this.sslmode = $.sslmode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperdriveConfigMtlsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperdriveConfigMtlsArgs $;

        public Builder() {
            $ = new HyperdriveConfigMtlsArgs();
        }

        public Builder(HyperdriveConfigMtlsArgs defaults) {
            $ = new HyperdriveConfigMtlsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param caCertificateId Define CA certificate ID obtained after uploading CA cert.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(@Nullable Output<String> caCertificateId) {
            $.caCertificateId = caCertificateId;
            return this;
        }

        /**
         * @param caCertificateId Define CA certificate ID obtained after uploading CA cert.
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(String caCertificateId) {
            return caCertificateId(Output.of(caCertificateId));
        }

        /**
         * @param mtlsCertificateId Define mTLS certificate ID obtained after uploading client cert.
         * 
         * @return builder
         * 
         */
        public Builder mtlsCertificateId(@Nullable Output<String> mtlsCertificateId) {
            $.mtlsCertificateId = mtlsCertificateId;
            return this;
        }

        /**
         * @param mtlsCertificateId Define mTLS certificate ID obtained after uploading client cert.
         * 
         * @return builder
         * 
         */
        public Builder mtlsCertificateId(String mtlsCertificateId) {
            return mtlsCertificateId(Output.of(mtlsCertificateId));
        }

        /**
         * @param sslmode Set SSL mode to &#39;require&#39;, &#39;verify-ca&#39;, or &#39;verify-full&#39; to verify the CA.
         * 
         * @return builder
         * 
         */
        public Builder sslmode(@Nullable Output<String> sslmode) {
            $.sslmode = sslmode;
            return this;
        }

        /**
         * @param sslmode Set SSL mode to &#39;require&#39;, &#39;verify-ca&#39;, or &#39;verify-full&#39; to verify the CA.
         * 
         * @return builder
         * 
         */
        public Builder sslmode(String sslmode) {
            return sslmode(Output.of(sslmode));
        }

        public HyperdriveConfigMtlsArgs build() {
            return $;
        }
    }

}
