// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageArgs Empty = new ImageArgs();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * An image binary data. Only needed when type is uploading a file.
     * 
     */
    @Import(name="file")
    private @Nullable Output<String> file;

    /**
     * @return An image binary data. Only needed when type is uploading a file.
     * 
     */
    public Optional<Output<String>> file() {
        return Optional.ofNullable(this.file);
    }

    /**
     * User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<String> metadata;

    /**
     * @return User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
     * 
     */
    public Optional<Output<String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Indicates whether the image requires a signature token for the access.
     * 
     */
    @Import(name="requireSignedUrls")
    private @Nullable Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the image requires a signature token for the access.
     * 
     */
    public Optional<Output<Boolean>> requireSignedUrls() {
        return Optional.ofNullable(this.requireSignedUrls);
    }

    /**
     * A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return A URL to fetch an image from origin. Only needed when type is uploading from a URL.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ImageArgs() {}

    private ImageArgs(ImageArgs $) {
        this.accountId = $.accountId;
        this.file = $.file;
        this.metadata = $.metadata;
        this.requireSignedUrls = $.requireSignedUrls;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageArgs $;

        public Builder() {
            $ = new ImageArgs();
        }

        public Builder(ImageArgs defaults) {
            $ = new ImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param file An image binary data. Only needed when type is uploading a file.
         * 
         * @return builder
         * 
         */
        public Builder file(@Nullable Output<String> file) {
            $.file = file;
            return this;
        }

        /**
         * @param file An image binary data. Only needed when type is uploading a file.
         * 
         * @return builder
         * 
         */
        public Builder file(String file) {
            return file(Output.of(file));
        }

        /**
         * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata User modifiable key-value store. Can use used for keeping references to another system of record for managing images.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param requireSignedUrls Indicates whether the image requires a signature token for the access.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(@Nullable Output<Boolean> requireSignedUrls) {
            $.requireSignedUrls = requireSignedUrls;
            return this;
        }

        /**
         * @param requireSignedUrls Indicates whether the image requires a signature token for the access.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            return requireSignedUrls(Output.of(requireSignedUrls));
        }

        /**
         * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url A URL to fetch an image from origin. Only needed when type is uploading from a URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ImageArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ImageArgs", "accountId");
            }
            return $;
        }
    }

}
