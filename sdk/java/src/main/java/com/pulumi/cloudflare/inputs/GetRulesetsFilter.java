// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRulesetsFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetRulesetsFilter Empty = new GetRulesetsFilter();

    /**
     * The ID of the Ruleset to target.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return The ID of the Ruleset to target.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Type of Ruleset to create. Available values: `custom`, `managed`, `root`, `zone`.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return Type of Ruleset to create. Available values: `custom`, `managed`, `root`, `zone`.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the ruleset.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the ruleset.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Point in the request/response lifecycle where the ruleset will be created. Available values: `ddos_l4`, `ddos_l7`, `http_custom_errors`, `http_log_custom_fields`, `http_request_cache_settings`, `http_request_firewall_custom`, `http_request_firewall_managed`, `http_request_late_transform`, `http_request_late_transform_managed`, `http_request_main`, `http_request_origin`, `http_request_dynamic_redirect`, `http_request_redirect`, `http_request_sanitize`, `http_request_transform`, `http_response_firewall_managed`, `http_response_headers_transform`, `http_response_headers_transform_managed`, `http_response_compression`, `magic_transit`, `http_ratelimit`, `http_request_sbfm`, `http_config_settings`.
     * 
     */
    @Import(name="phase")
    private @Nullable String phase;

    /**
     * @return Point in the request/response lifecycle where the ruleset will be created. Available values: `ddos_l4`, `ddos_l7`, `http_custom_errors`, `http_log_custom_fields`, `http_request_cache_settings`, `http_request_firewall_custom`, `http_request_firewall_managed`, `http_request_late_transform`, `http_request_late_transform_managed`, `http_request_main`, `http_request_origin`, `http_request_dynamic_redirect`, `http_request_redirect`, `http_request_sanitize`, `http_request_transform`, `http_response_firewall_managed`, `http_response_headers_transform`, `http_response_headers_transform_managed`, `http_response_compression`, `magic_transit`, `http_ratelimit`, `http_request_sbfm`, `http_config_settings`.
     * 
     */
    public Optional<String> phase() {
        return Optional.ofNullable(this.phase);
    }

    /**
     * Version of the ruleset to filter on.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Version of the ruleset to filter on.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GetRulesetsFilter() {}

    private GetRulesetsFilter(GetRulesetsFilter $) {
        this.id = $.id;
        this.kind = $.kind;
        this.name = $.name;
        this.phase = $.phase;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRulesetsFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRulesetsFilter $;

        public Builder() {
            $ = new GetRulesetsFilter();
        }

        public Builder(GetRulesetsFilter defaults) {
            $ = new GetRulesetsFilter(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of the Ruleset to target.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param kind Type of Ruleset to create. Available values: `custom`, `managed`, `root`, `zone`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name Name of the ruleset.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param phase Point in the request/response lifecycle where the ruleset will be created. Available values: `ddos_l4`, `ddos_l7`, `http_custom_errors`, `http_log_custom_fields`, `http_request_cache_settings`, `http_request_firewall_custom`, `http_request_firewall_managed`, `http_request_late_transform`, `http_request_late_transform_managed`, `http_request_main`, `http_request_origin`, `http_request_dynamic_redirect`, `http_request_redirect`, `http_request_sanitize`, `http_request_transform`, `http_response_firewall_managed`, `http_response_headers_transform`, `http_response_headers_transform_managed`, `http_response_compression`, `magic_transit`, `http_ratelimit`, `http_request_sbfm`, `http_config_settings`.
         * 
         * @return builder
         * 
         */
        public Builder phase(@Nullable String phase) {
            $.phase = phase;
            return this;
        }

        /**
         * @param version Version of the ruleset to filter on.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GetRulesetsFilter build() {
            return $;
        }
    }

}
