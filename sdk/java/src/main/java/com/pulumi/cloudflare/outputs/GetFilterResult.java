// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFilterResult {
    /**
     * @return An informative summary of the filter.
     * 
     */
    private String description;
    /**
     * @return The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    private String expression;
    /**
     * @return The unique identifier of the filter.
     * 
     */
    private String filterId;
    /**
     * @return The unique identifier of the filter.
     * 
     */
    private String id;
    /**
     * @return When true, indicates that the filter is currently paused.
     * 
     */
    private Boolean paused;
    /**
     * @return A short reference tag. Allows you to select related filters.
     * 
     */
    private String ref;
    /**
     * @return Identifier
     * 
     */
    private String zoneId;

    private GetFilterResult() {}
    /**
     * @return An informative summary of the filter.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    public String expression() {
        return this.expression;
    }
    /**
     * @return The unique identifier of the filter.
     * 
     */
    public String filterId() {
        return this.filterId;
    }
    /**
     * @return The unique identifier of the filter.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return When true, indicates that the filter is currently paused.
     * 
     */
    public Boolean paused() {
        return this.paused;
    }
    /**
     * @return A short reference tag. Allows you to select related filters.
     * 
     */
    public String ref() {
        return this.ref;
    }
    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFilterResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String expression;
        private String filterId;
        private String id;
        private Boolean paused;
        private String ref;
        private String zoneId;
        public Builder() {}
        public Builder(GetFilterResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.expression = defaults.expression;
    	      this.filterId = defaults.filterId;
    	      this.id = defaults.id;
    	      this.paused = defaults.paused;
    	      this.ref = defaults.ref;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "expression");
            }
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder filterId(String filterId) {
            if (filterId == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "filterId");
            }
            this.filterId = filterId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder paused(Boolean paused) {
            if (paused == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "paused");
            }
            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder ref(String ref) {
            if (ref == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "ref");
            }
            this.ref = ref;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetFilterResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetFilterResult build() {
            final var _resultValue = new GetFilterResult();
            _resultValue.description = description;
            _resultValue.expression = expression;
            _resultValue.filterId = filterId;
            _resultValue.id = id;
            _resultValue.paused = paused;
            _resultValue.ref = ref;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
