// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneCacheVariantsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneCacheVariantsArgs Empty = new ZoneCacheVariantsArgs();

    /**
     * List of strings with the MIME types of all the variants that should be served for avif.
     * 
     */
    @Import(name="avifs")
    private @Nullable Output<List<String>> avifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for avif.
     * 
     */
    public Optional<Output<List<String>>> avifs() {
        return Optional.ofNullable(this.avifs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for bmp.
     * 
     */
    @Import(name="bmps")
    private @Nullable Output<List<String>> bmps;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for bmp.
     * 
     */
    public Optional<Output<List<String>>> bmps() {
        return Optional.ofNullable(this.bmps);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for gif.
     * 
     */
    @Import(name="gifs")
    private @Nullable Output<List<String>> gifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for gif.
     * 
     */
    public Optional<Output<List<String>>> gifs() {
        return Optional.ofNullable(this.gifs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for jp2.
     * 
     */
    @Import(name="jp2s")
    private @Nullable Output<List<String>> jp2s;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jp2.
     * 
     */
    public Optional<Output<List<String>>> jp2s() {
        return Optional.ofNullable(this.jp2s);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for jpeg.
     * 
     */
    @Import(name="jpegs")
    private @Nullable Output<List<String>> jpegs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpeg.
     * 
     */
    public Optional<Output<List<String>>> jpegs() {
        return Optional.ofNullable(this.jpegs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for jpg2.
     * 
     */
    @Import(name="jpg2s")
    private @Nullable Output<List<String>> jpg2s;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpg2.
     * 
     */
    public Optional<Output<List<String>>> jpg2s() {
        return Optional.ofNullable(this.jpg2s);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for jpg.
     * 
     */
    @Import(name="jpgs")
    private @Nullable Output<List<String>> jpgs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for jpg.
     * 
     */
    public Optional<Output<List<String>>> jpgs() {
        return Optional.ofNullable(this.jpgs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for png.
     * 
     */
    @Import(name="pngs")
    private @Nullable Output<List<String>> pngs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for png.
     * 
     */
    public Optional<Output<List<String>>> pngs() {
        return Optional.ofNullable(this.pngs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for tiff.
     * 
     */
    @Import(name="tiffs")
    private @Nullable Output<List<String>> tiffs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for tiff.
     * 
     */
    public Optional<Output<List<String>>> tiffs() {
        return Optional.ofNullable(this.tiffs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for tif.
     * 
     */
    @Import(name="tifs")
    private @Nullable Output<List<String>> tifs;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for tif.
     * 
     */
    public Optional<Output<List<String>>> tifs() {
        return Optional.ofNullable(this.tifs);
    }

    /**
     * List of strings with the MIME types of all the variants that should be served for webp.
     * 
     */
    @Import(name="webps")
    private @Nullable Output<List<String>> webps;

    /**
     * @return List of strings with the MIME types of all the variants that should be served for webp.
     * 
     */
    public Optional<Output<List<String>>> webps() {
        return Optional.ofNullable(this.webps);
    }

    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ZoneCacheVariantsArgs() {}

    private ZoneCacheVariantsArgs(ZoneCacheVariantsArgs $) {
        this.avifs = $.avifs;
        this.bmps = $.bmps;
        this.gifs = $.gifs;
        this.jp2s = $.jp2s;
        this.jpegs = $.jpegs;
        this.jpg2s = $.jpg2s;
        this.jpgs = $.jpgs;
        this.pngs = $.pngs;
        this.tiffs = $.tiffs;
        this.tifs = $.tifs;
        this.webps = $.webps;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneCacheVariantsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneCacheVariantsArgs $;

        public Builder() {
            $ = new ZoneCacheVariantsArgs();
        }

        public Builder(ZoneCacheVariantsArgs defaults) {
            $ = new ZoneCacheVariantsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param avifs List of strings with the MIME types of all the variants that should be served for avif.
         * 
         * @return builder
         * 
         */
        public Builder avifs(@Nullable Output<List<String>> avifs) {
            $.avifs = avifs;
            return this;
        }

        /**
         * @param avifs List of strings with the MIME types of all the variants that should be served for avif.
         * 
         * @return builder
         * 
         */
        public Builder avifs(List<String> avifs) {
            return avifs(Output.of(avifs));
        }

        /**
         * @param avifs List of strings with the MIME types of all the variants that should be served for avif.
         * 
         * @return builder
         * 
         */
        public Builder avifs(String... avifs) {
            return avifs(List.of(avifs));
        }

        /**
         * @param bmps List of strings with the MIME types of all the variants that should be served for bmp.
         * 
         * @return builder
         * 
         */
        public Builder bmps(@Nullable Output<List<String>> bmps) {
            $.bmps = bmps;
            return this;
        }

        /**
         * @param bmps List of strings with the MIME types of all the variants that should be served for bmp.
         * 
         * @return builder
         * 
         */
        public Builder bmps(List<String> bmps) {
            return bmps(Output.of(bmps));
        }

        /**
         * @param bmps List of strings with the MIME types of all the variants that should be served for bmp.
         * 
         * @return builder
         * 
         */
        public Builder bmps(String... bmps) {
            return bmps(List.of(bmps));
        }

        /**
         * @param gifs List of strings with the MIME types of all the variants that should be served for gif.
         * 
         * @return builder
         * 
         */
        public Builder gifs(@Nullable Output<List<String>> gifs) {
            $.gifs = gifs;
            return this;
        }

        /**
         * @param gifs List of strings with the MIME types of all the variants that should be served for gif.
         * 
         * @return builder
         * 
         */
        public Builder gifs(List<String> gifs) {
            return gifs(Output.of(gifs));
        }

        /**
         * @param gifs List of strings with the MIME types of all the variants that should be served for gif.
         * 
         * @return builder
         * 
         */
        public Builder gifs(String... gifs) {
            return gifs(List.of(gifs));
        }

        /**
         * @param jp2s List of strings with the MIME types of all the variants that should be served for jp2.
         * 
         * @return builder
         * 
         */
        public Builder jp2s(@Nullable Output<List<String>> jp2s) {
            $.jp2s = jp2s;
            return this;
        }

        /**
         * @param jp2s List of strings with the MIME types of all the variants that should be served for jp2.
         * 
         * @return builder
         * 
         */
        public Builder jp2s(List<String> jp2s) {
            return jp2s(Output.of(jp2s));
        }

        /**
         * @param jp2s List of strings with the MIME types of all the variants that should be served for jp2.
         * 
         * @return builder
         * 
         */
        public Builder jp2s(String... jp2s) {
            return jp2s(List.of(jp2s));
        }

        /**
         * @param jpegs List of strings with the MIME types of all the variants that should be served for jpeg.
         * 
         * @return builder
         * 
         */
        public Builder jpegs(@Nullable Output<List<String>> jpegs) {
            $.jpegs = jpegs;
            return this;
        }

        /**
         * @param jpegs List of strings with the MIME types of all the variants that should be served for jpeg.
         * 
         * @return builder
         * 
         */
        public Builder jpegs(List<String> jpegs) {
            return jpegs(Output.of(jpegs));
        }

        /**
         * @param jpegs List of strings with the MIME types of all the variants that should be served for jpeg.
         * 
         * @return builder
         * 
         */
        public Builder jpegs(String... jpegs) {
            return jpegs(List.of(jpegs));
        }

        /**
         * @param jpg2s List of strings with the MIME types of all the variants that should be served for jpg2.
         * 
         * @return builder
         * 
         */
        public Builder jpg2s(@Nullable Output<List<String>> jpg2s) {
            $.jpg2s = jpg2s;
            return this;
        }

        /**
         * @param jpg2s List of strings with the MIME types of all the variants that should be served for jpg2.
         * 
         * @return builder
         * 
         */
        public Builder jpg2s(List<String> jpg2s) {
            return jpg2s(Output.of(jpg2s));
        }

        /**
         * @param jpg2s List of strings with the MIME types of all the variants that should be served for jpg2.
         * 
         * @return builder
         * 
         */
        public Builder jpg2s(String... jpg2s) {
            return jpg2s(List.of(jpg2s));
        }

        /**
         * @param jpgs List of strings with the MIME types of all the variants that should be served for jpg.
         * 
         * @return builder
         * 
         */
        public Builder jpgs(@Nullable Output<List<String>> jpgs) {
            $.jpgs = jpgs;
            return this;
        }

        /**
         * @param jpgs List of strings with the MIME types of all the variants that should be served for jpg.
         * 
         * @return builder
         * 
         */
        public Builder jpgs(List<String> jpgs) {
            return jpgs(Output.of(jpgs));
        }

        /**
         * @param jpgs List of strings with the MIME types of all the variants that should be served for jpg.
         * 
         * @return builder
         * 
         */
        public Builder jpgs(String... jpgs) {
            return jpgs(List.of(jpgs));
        }

        /**
         * @param pngs List of strings with the MIME types of all the variants that should be served for png.
         * 
         * @return builder
         * 
         */
        public Builder pngs(@Nullable Output<List<String>> pngs) {
            $.pngs = pngs;
            return this;
        }

        /**
         * @param pngs List of strings with the MIME types of all the variants that should be served for png.
         * 
         * @return builder
         * 
         */
        public Builder pngs(List<String> pngs) {
            return pngs(Output.of(pngs));
        }

        /**
         * @param pngs List of strings with the MIME types of all the variants that should be served for png.
         * 
         * @return builder
         * 
         */
        public Builder pngs(String... pngs) {
            return pngs(List.of(pngs));
        }

        /**
         * @param tiffs List of strings with the MIME types of all the variants that should be served for tiff.
         * 
         * @return builder
         * 
         */
        public Builder tiffs(@Nullable Output<List<String>> tiffs) {
            $.tiffs = tiffs;
            return this;
        }

        /**
         * @param tiffs List of strings with the MIME types of all the variants that should be served for tiff.
         * 
         * @return builder
         * 
         */
        public Builder tiffs(List<String> tiffs) {
            return tiffs(Output.of(tiffs));
        }

        /**
         * @param tiffs List of strings with the MIME types of all the variants that should be served for tiff.
         * 
         * @return builder
         * 
         */
        public Builder tiffs(String... tiffs) {
            return tiffs(List.of(tiffs));
        }

        /**
         * @param tifs List of strings with the MIME types of all the variants that should be served for tif.
         * 
         * @return builder
         * 
         */
        public Builder tifs(@Nullable Output<List<String>> tifs) {
            $.tifs = tifs;
            return this;
        }

        /**
         * @param tifs List of strings with the MIME types of all the variants that should be served for tif.
         * 
         * @return builder
         * 
         */
        public Builder tifs(List<String> tifs) {
            return tifs(Output.of(tifs));
        }

        /**
         * @param tifs List of strings with the MIME types of all the variants that should be served for tif.
         * 
         * @return builder
         * 
         */
        public Builder tifs(String... tifs) {
            return tifs(List.of(tifs));
        }

        /**
         * @param webps List of strings with the MIME types of all the variants that should be served for webp.
         * 
         * @return builder
         * 
         */
        public Builder webps(@Nullable Output<List<String>> webps) {
            $.webps = webps;
            return this;
        }

        /**
         * @param webps List of strings with the MIME types of all the variants that should be served for webp.
         * 
         * @return builder
         * 
         */
        public Builder webps(List<String> webps) {
            return webps(Output.of(webps));
        }

        /**
         * @param webps List of strings with the MIME types of all the variants that should be served for webp.
         * 
         * @return builder
         * 
         */
        public Builder webps(String... webps) {
            return webps(List.of(webps));
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneCacheVariantsArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ZoneCacheVariantsArgs", "zoneId");
            }
            return $;
        }
    }

}
