// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyExpirationArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyRuleSettingsArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustGatewayPolicyScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayPolicyArgs Empty = new ZeroTrustGatewayPolicyArgs();

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
     * Available values: &#34;on&#34;, &#34;off&#34;, &#34;allow&#34;, &#34;block&#34;, &#34;scan&#34;, &#34;noscan&#34;, &#34;safesearch&#34;, &#34;ytrestricted&#34;, &#34;isolate&#34;, &#34;noisolate&#34;, &#34;override&#34;, &#34;l4_override&#34;, &#34;egress&#34;, &#34;resolve&#34;, &#34;quarantine&#34;, &#34;redirect&#34;.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
     * Available values: &#34;on&#34;, &#34;off&#34;, &#34;allow&#34;, &#34;block&#34;, &#34;scan&#34;, &#34;noscan&#34;, &#34;safesearch&#34;, &#34;ytrestricted&#34;, &#34;isolate&#34;, &#34;noisolate&#34;, &#34;override&#34;, &#34;l4_override&#34;, &#34;egress&#34;, &#34;resolve&#34;, &#34;quarantine&#34;, &#34;redirect&#34;.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * The description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The wirefilter expression used for device posture check matching.
     * 
     */
    @Import(name="devicePosture")
    private @Nullable Output<String> devicePosture;

    /**
     * @return The wirefilter expression used for device posture check matching.
     * 
     */
    public Optional<Output<String>> devicePosture() {
        return Optional.ofNullable(this.devicePosture);
    }

    /**
     * True if the rule is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return True if the rule is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The expiration time stamp and default duration of a DNS policy. Takes
     * precedence over the policy&#39;s `schedule` configuration, if any.
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<ZeroTrustGatewayPolicyExpirationArgs> expiration;

    /**
     * @return The expiration time stamp and default duration of a DNS policy. Takes
     * precedence over the policy&#39;s `schedule` configuration, if any.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyExpirationArgs>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * The protocol or layer to evaluate the traffic, identity, and device posture expressions.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<String>> filters;

    /**
     * @return The protocol or layer to evaluate the traffic, identity, and device posture expressions.
     * 
     */
    public Optional<Output<List<String>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The wirefilter expression used for identity matching.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return The wirefilter expression used for identity matching.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="precedence")
    private @Nullable Output<Integer> precedence;

    public Optional<Output<Integer>> precedence() {
        return Optional.ofNullable(this.precedence);
    }

    /**
     * Additional settings that modify the rule&#39;s action.
     * 
     */
    @Import(name="ruleSettings")
    private @Nullable Output<ZeroTrustGatewayPolicyRuleSettingsArgs> ruleSettings;

    /**
     * @return Additional settings that modify the rule&#39;s action.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyRuleSettingsArgs>> ruleSettings() {
        return Optional.ofNullable(this.ruleSettings);
    }

    /**
     * The schedule for activating DNS policies. This does not apply to HTTP or network policies.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ZeroTrustGatewayPolicyScheduleArgs> schedule;

    /**
     * @return The schedule for activating DNS policies. This does not apply to HTTP or network policies.
     * 
     */
    public Optional<Output<ZeroTrustGatewayPolicyScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    /**
     * The wirefilter expression used for traffic matching.
     * 
     */
    @Import(name="traffic")
    private @Nullable Output<String> traffic;

    /**
     * @return The wirefilter expression used for traffic matching.
     * 
     */
    public Optional<Output<String>> traffic() {
        return Optional.ofNullable(this.traffic);
    }

    private ZeroTrustGatewayPolicyArgs() {}

    private ZeroTrustGatewayPolicyArgs(ZeroTrustGatewayPolicyArgs $) {
        this.accountId = $.accountId;
        this.action = $.action;
        this.description = $.description;
        this.devicePosture = $.devicePosture;
        this.enabled = $.enabled;
        this.expiration = $.expiration;
        this.filters = $.filters;
        this.identity = $.identity;
        this.name = $.name;
        this.precedence = $.precedence;
        this.ruleSettings = $.ruleSettings;
        this.schedule = $.schedule;
        this.traffic = $.traffic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayPolicyArgs $;

        public Builder() {
            $ = new ZeroTrustGatewayPolicyArgs();
        }

        public Builder(ZeroTrustGatewayPolicyArgs defaults) {
            $ = new ZeroTrustGatewayPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param action The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
         * Available values: &#34;on&#34;, &#34;off&#34;, &#34;allow&#34;, &#34;block&#34;, &#34;scan&#34;, &#34;noscan&#34;, &#34;safesearch&#34;, &#34;ytrestricted&#34;, &#34;isolate&#34;, &#34;noisolate&#34;, &#34;override&#34;, &#34;l4_override&#34;, &#34;egress&#34;, &#34;resolve&#34;, &#34;quarantine&#34;, &#34;redirect&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to preform when the associated traffic, identity, and device posture expressions are either absent or evaluate to `true`.
         * Available values: &#34;on&#34;, &#34;off&#34;, &#34;allow&#34;, &#34;block&#34;, &#34;scan&#34;, &#34;noscan&#34;, &#34;safesearch&#34;, &#34;ytrestricted&#34;, &#34;isolate&#34;, &#34;noisolate&#34;, &#34;override&#34;, &#34;l4_override&#34;, &#34;egress&#34;, &#34;resolve&#34;, &#34;quarantine&#34;, &#34;redirect&#34;.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param devicePosture The wirefilter expression used for device posture check matching.
         * 
         * @return builder
         * 
         */
        public Builder devicePosture(@Nullable Output<String> devicePosture) {
            $.devicePosture = devicePosture;
            return this;
        }

        /**
         * @param devicePosture The wirefilter expression used for device posture check matching.
         * 
         * @return builder
         * 
         */
        public Builder devicePosture(String devicePosture) {
            return devicePosture(Output.of(devicePosture));
        }

        /**
         * @param enabled True if the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled True if the rule is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expiration The expiration time stamp and default duration of a DNS policy. Takes
         * precedence over the policy&#39;s `schedule` configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<ZeroTrustGatewayPolicyExpirationArgs> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration The expiration time stamp and default duration of a DNS policy. Takes
         * precedence over the policy&#39;s `schedule` configuration, if any.
         * 
         * @return builder
         * 
         */
        public Builder expiration(ZeroTrustGatewayPolicyExpirationArgs expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param filters The protocol or layer to evaluate the traffic, identity, and device posture expressions.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<String>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters The protocol or layer to evaluate the traffic, identity, and device posture expressions.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<String> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters The protocol or layer to evaluate the traffic, identity, and device posture expressions.
         * 
         * @return builder
         * 
         */
        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param identity The wirefilter expression used for identity matching.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The wirefilter expression used for identity matching.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder precedence(@Nullable Output<Integer> precedence) {
            $.precedence = precedence;
            return this;
        }

        public Builder precedence(Integer precedence) {
            return precedence(Output.of(precedence));
        }

        /**
         * @param ruleSettings Additional settings that modify the rule&#39;s action.
         * 
         * @return builder
         * 
         */
        public Builder ruleSettings(@Nullable Output<ZeroTrustGatewayPolicyRuleSettingsArgs> ruleSettings) {
            $.ruleSettings = ruleSettings;
            return this;
        }

        /**
         * @param ruleSettings Additional settings that modify the rule&#39;s action.
         * 
         * @return builder
         * 
         */
        public Builder ruleSettings(ZeroTrustGatewayPolicyRuleSettingsArgs ruleSettings) {
            return ruleSettings(Output.of(ruleSettings));
        }

        /**
         * @param schedule The schedule for activating DNS policies. This does not apply to HTTP or network policies.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<ZeroTrustGatewayPolicyScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule The schedule for activating DNS policies. This does not apply to HTTP or network policies.
         * 
         * @return builder
         * 
         */
        public Builder schedule(ZeroTrustGatewayPolicyScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param traffic The wirefilter expression used for traffic matching.
         * 
         * @return builder
         * 
         */
        public Builder traffic(@Nullable Output<String> traffic) {
            $.traffic = traffic;
            return this;
        }

        /**
         * @param traffic The wirefilter expression used for traffic matching.
         * 
         * @return builder
         * 
         */
        public Builder traffic(String traffic) {
            return traffic(Output.of(traffic));
        }

        public ZeroTrustGatewayPolicyArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustGatewayPolicyArgs", "accountId");
            }
            if ($.action == null) {
                throw new MissingRequiredPropertyException("ZeroTrustGatewayPolicyArgs", "action");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustGatewayPolicyArgs", "name");
            }
            return $;
        }
    }

}
