// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRateLimitAction;
import com.pulumi.cloudflare.outputs.GetRateLimitBypass;
import com.pulumi.cloudflare.outputs.GetRateLimitMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRateLimitResult {
    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    private GetRateLimitAction action;
    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    private List<GetRateLimitBypass> bypasses;
    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    private String description;
    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return Defines the unique identifier of the rate limit.
     * 
     */
    private String id;
    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    private GetRateLimitMatch match;
    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    private Double period;
    /**
     * @return Defines the unique identifier of the rate limit.
     * 
     */
    private @Nullable String rateLimitId;
    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    private Double threshold;
    /**
     * @return Defines an identifier.
     * 
     */
    private String zoneId;

    private GetRateLimitResult() {}
    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public GetRateLimitAction action() {
        return this.action;
    }
    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    public List<GetRateLimitBypass> bypasses() {
        return this.bypasses;
    }
    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return Defines the unique identifier of the rate limit.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    public GetRateLimitMatch match() {
        return this.match;
    }
    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    public Double period() {
        return this.period;
    }
    /**
     * @return Defines the unique identifier of the rate limit.
     * 
     */
    public Optional<String> rateLimitId() {
        return Optional.ofNullable(this.rateLimitId);
    }
    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return Defines an identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRateLimitResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetRateLimitAction action;
        private List<GetRateLimitBypass> bypasses;
        private String description;
        private Boolean disabled;
        private String id;
        private GetRateLimitMatch match;
        private Double period;
        private @Nullable String rateLimitId;
        private Double threshold;
        private String zoneId;
        public Builder() {}
        public Builder(GetRateLimitResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.bypasses = defaults.bypasses;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.id = defaults.id;
    	      this.match = defaults.match;
    	      this.period = defaults.period;
    	      this.rateLimitId = defaults.rateLimitId;
    	      this.threshold = defaults.threshold;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder action(GetRateLimitAction action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder bypasses(List<GetRateLimitBypass> bypasses) {
            if (bypasses == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "bypasses");
            }
            this.bypasses = bypasses;
            return this;
        }
        public Builder bypasses(GetRateLimitBypass... bypasses) {
            return bypasses(List.of(bypasses));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder match(GetRateLimitMatch match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder period(Double period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimitId(@Nullable String rateLimitId) {

            this.rateLimitId = rateLimitId;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetRateLimitResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetRateLimitResult build() {
            final var _resultValue = new GetRateLimitResult();
            _resultValue.action = action;
            _resultValue.bypasses = bypasses;
            _resultValue.description = description;
            _resultValue.disabled = disabled;
            _resultValue.id = id;
            _resultValue.match = match;
            _resultValue.period = period;
            _resultValue.rateLimitId = rateLimitId;
            _resultValue.threshold = threshold;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
