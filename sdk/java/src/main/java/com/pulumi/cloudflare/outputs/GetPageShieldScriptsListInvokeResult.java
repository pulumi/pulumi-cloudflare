// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetPageShieldScriptsListResult;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPageShieldScriptsListInvokeResult {
    /**
     * @return The direction used to sort returned scripts.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    private @Nullable String direction;
    /**
     * @return When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
     * 
     */
    private Boolean excludeCdnCgi;
    /**
     * @return When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
     * content matches and they share the same url host and zone hostname. In such case, we return the most
     * recent script for the URL host and zone hostname combination.
     * 
     */
    private Boolean excludeDuplicates;
    /**
     * @return Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    private @Nullable String excludeUrls;
    /**
     * @return Export the list of scripts as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    private @Nullable String export;
    /**
     * @return Includes scripts that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    private @Nullable String hosts;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Integer maxItems;
    private @Nullable String orderBy;
    private @Nullable String page;
    private @Nullable String pageUrl;
    private @Nullable Double perPage;
    private @Nullable Boolean prioritizeMalicious;
    private List<GetPageShieldScriptsListResult> results;
    private @Nullable String status;
    private @Nullable String urls;
    /**
     * @return Identifier
     * 
     */
    private String zoneId;

    private GetPageShieldScriptsListInvokeResult() {}
    /**
     * @return The direction used to sort returned scripts.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
     * 
     */
    public Boolean excludeCdnCgi() {
        return this.excludeCdnCgi;
    }
    /**
     * @return When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
     * content matches and they share the same url host and zone hostname. In such case, we return the most
     * recent script for the URL host and zone hostname combination.
     * 
     */
    public Boolean excludeDuplicates() {
        return this.excludeDuplicates;
    }
    /**
     * @return Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    public Optional<String> excludeUrls() {
        return Optional.ofNullable(this.excludeUrls);
    }
    /**
     * @return Export the list of scripts as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    public Optional<String> export() {
        return Optional.ofNullable(this.export);
    }
    /**
     * @return Includes scripts that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    public Optional<String> hosts() {
        return Optional.ofNullable(this.hosts);
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }
    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }
    public Optional<String> page() {
        return Optional.ofNullable(this.page);
    }
    public Optional<String> pageUrl() {
        return Optional.ofNullable(this.pageUrl);
    }
    public Optional<Double> perPage() {
        return Optional.ofNullable(this.perPage);
    }
    public Optional<Boolean> prioritizeMalicious() {
        return Optional.ofNullable(this.prioritizeMalicious);
    }
    public List<GetPageShieldScriptsListResult> results() {
        return this.results;
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public Optional<String> urls() {
        return Optional.ofNullable(this.urls);
    }
    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPageShieldScriptsListInvokeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String direction;
        private Boolean excludeCdnCgi;
        private Boolean excludeDuplicates;
        private @Nullable String excludeUrls;
        private @Nullable String export;
        private @Nullable String hosts;
        private String id;
        private @Nullable Integer maxItems;
        private @Nullable String orderBy;
        private @Nullable String page;
        private @Nullable String pageUrl;
        private @Nullable Double perPage;
        private @Nullable Boolean prioritizeMalicious;
        private List<GetPageShieldScriptsListResult> results;
        private @Nullable String status;
        private @Nullable String urls;
        private String zoneId;
        public Builder() {}
        public Builder(GetPageShieldScriptsListInvokeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.excludeCdnCgi = defaults.excludeCdnCgi;
    	      this.excludeDuplicates = defaults.excludeDuplicates;
    	      this.excludeUrls = defaults.excludeUrls;
    	      this.export = defaults.export;
    	      this.hosts = defaults.hosts;
    	      this.id = defaults.id;
    	      this.maxItems = defaults.maxItems;
    	      this.orderBy = defaults.orderBy;
    	      this.page = defaults.page;
    	      this.pageUrl = defaults.pageUrl;
    	      this.perPage = defaults.perPage;
    	      this.prioritizeMalicious = defaults.prioritizeMalicious;
    	      this.results = defaults.results;
    	      this.status = defaults.status;
    	      this.urls = defaults.urls;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder direction(@Nullable String direction) {

            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder excludeCdnCgi(Boolean excludeCdnCgi) {
            if (excludeCdnCgi == null) {
              throw new MissingRequiredPropertyException("GetPageShieldScriptsListInvokeResult", "excludeCdnCgi");
            }
            this.excludeCdnCgi = excludeCdnCgi;
            return this;
        }
        @CustomType.Setter
        public Builder excludeDuplicates(Boolean excludeDuplicates) {
            if (excludeDuplicates == null) {
              throw new MissingRequiredPropertyException("GetPageShieldScriptsListInvokeResult", "excludeDuplicates");
            }
            this.excludeDuplicates = excludeDuplicates;
            return this;
        }
        @CustomType.Setter
        public Builder excludeUrls(@Nullable String excludeUrls) {

            this.excludeUrls = excludeUrls;
            return this;
        }
        @CustomType.Setter
        public Builder export(@Nullable String export) {

            this.export = export;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(@Nullable String hosts) {

            this.hosts = hosts;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPageShieldScriptsListInvokeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maxItems(@Nullable Integer maxItems) {

            this.maxItems = maxItems;
            return this;
        }
        @CustomType.Setter
        public Builder orderBy(@Nullable String orderBy) {

            this.orderBy = orderBy;
            return this;
        }
        @CustomType.Setter
        public Builder page(@Nullable String page) {

            this.page = page;
            return this;
        }
        @CustomType.Setter
        public Builder pageUrl(@Nullable String pageUrl) {

            this.pageUrl = pageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder perPage(@Nullable Double perPage) {

            this.perPage = perPage;
            return this;
        }
        @CustomType.Setter
        public Builder prioritizeMalicious(@Nullable Boolean prioritizeMalicious) {

            this.prioritizeMalicious = prioritizeMalicious;
            return this;
        }
        @CustomType.Setter
        public Builder results(List<GetPageShieldScriptsListResult> results) {
            if (results == null) {
              throw new MissingRequiredPropertyException("GetPageShieldScriptsListInvokeResult", "results");
            }
            this.results = results;
            return this;
        }
        public Builder results(GetPageShieldScriptsListResult... results) {
            return results(List.of(results));
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder urls(@Nullable String urls) {

            this.urls = urls;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetPageShieldScriptsListInvokeResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetPageShieldScriptsListInvokeResult build() {
            final var _resultValue = new GetPageShieldScriptsListInvokeResult();
            _resultValue.direction = direction;
            _resultValue.excludeCdnCgi = excludeCdnCgi;
            _resultValue.excludeDuplicates = excludeDuplicates;
            _resultValue.excludeUrls = excludeUrls;
            _resultValue.export = export;
            _resultValue.hosts = hosts;
            _resultValue.id = id;
            _resultValue.maxItems = maxItems;
            _resultValue.orderBy = orderBy;
            _resultValue.page = page;
            _resultValue.pageUrl = pageUrl;
            _resultValue.perPage = perPage;
            _resultValue.prioritizeMalicious = prioritizeMalicious;
            _resultValue.results = results;
            _resultValue.status = status;
            _resultValue.urls = urls;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
