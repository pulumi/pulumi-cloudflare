// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.CertificatePackArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.CertificatePackState;
import com.pulumi.cloudflare.outputs.CertificatePackValidationError;
import com.pulumi.cloudflare.outputs.CertificatePackValidationRecord;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/certificatePack:CertificatePack example &lt;zone_id&gt;/&lt;certificate_pack_id&gt;
 * ```
 * 
 * While supported, importing isn&#39;t recommended and it is advised to replace the
 * 
 * certificate entirely instead.
 * 
 */
@ResourceType(type="cloudflare:index/certificatePack:CertificatePack")
public class CertificatePack extends com.pulumi.resources.CustomResource {
    /**
     * Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="certificateAuthority", refs={String.class}, tree="[0]")
    private Output<String> certificateAuthority;

    /**
     * @return Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="cloudflareBranding", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cloudflareBranding;

    /**
     * @return Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<Optional<Boolean>> cloudflareBranding() {
        return Codegen.optional(this.cloudflareBranding);
    }
    /**
     * List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="hosts", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> hosts;

    /**
     * @return List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<List<String>> hosts() {
        return this.hosts;
    }
    /**
     * Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    @Export(name="validationErrors", refs={List.class,CertificatePackValidationError.class}, tree="[0,1]")
    private Output<List<CertificatePackValidationError>> validationErrors;

    public Output<List<CertificatePackValidationError>> validationErrors() {
        return this.validationErrors;
    }
    /**
     * Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="validationMethod", refs={String.class}, tree="[0]")
    private Output<String> validationMethod;

    /**
     * @return Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> validationMethod() {
        return this.validationMethod;
    }
    @Export(name="validationRecords", refs={List.class,CertificatePackValidationRecord.class}, tree="[0,1]")
    private Output<List<CertificatePackValidationRecord>> validationRecords;

    public Output<List<CertificatePackValidationRecord>> validationRecords() {
        return this.validationRecords;
    }
    /**
     * How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="validityDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> validityDays;

    /**
     * @return How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<Integer> validityDays() {
        return this.validityDays;
    }
    /**
     * Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="waitForActiveStatus", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> waitForActiveStatus;

    /**
     * @return Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<Optional<Boolean>> waitForActiveStatus() {
        return Codegen.optional(this.waitForActiveStatus);
    }
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CertificatePack(java.lang.String name) {
        this(name, CertificatePackArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CertificatePack(java.lang.String name, CertificatePackArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CertificatePack(java.lang.String name, CertificatePackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/certificatePack:CertificatePack", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CertificatePack(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/certificatePack:CertificatePack", name, state, makeResourceOptions(options, id), false);
    }

    private static CertificatePackArgs makeArgs(CertificatePackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CertificatePackArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CertificatePack get(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CertificatePack(name, id, state, options);
    }
}
