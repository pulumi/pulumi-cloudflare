// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.CertificatePackArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.CertificatePackState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.CertificatePack;
 * import com.pulumi.cloudflare.CertificatePackArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleCertificatePack = new CertificatePack("exampleCertificatePack", CertificatePackArgs.builder()
 *             .zoneId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .certificateAuthority("lets_encrypt")
 *             .hosts(            
 *                 "example.com",
 *                 "*.example.com",
 *                 "www.example.com")
 *             .type("advanced")
 *             .validationMethod("txt")
 *             .validityDays(14)
 *             .cloudflareBranding(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/certificatePack:CertificatePack example &#39;&lt;zone_id&gt;/&lt;certificate_pack_id&gt;&#39;
 * ```
 * 
 * While supported, importing isn&#39;t recommended and it is advised to replace the
 * 
 * certificate entirely instead.
 * 
 */
@ResourceType(type="cloudflare:index/certificatePack:CertificatePack")
public class CertificatePack extends com.pulumi.resources.CustomResource {
    /**
     * Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    @Export(name="certificateAuthority", refs={String.class}, tree="[0]")
    private Output<String> certificateAuthority;

    /**
     * @return Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     * 
     */
    @Export(name="cloudflareBranding", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cloudflareBranding;

    /**
     * @return Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     * 
     */
    public Output<Optional<Boolean>> cloudflareBranding() {
        return Codegen.optional(this.cloudflareBranding);
    }
    /**
     * Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     * 
     */
    @Export(name="hosts", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> hosts;

    /**
     * @return Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     * 
     */
    public Output<List<String>> hosts() {
        return this.hosts;
    }
    /**
     * Status of certificate pack.
     * Available values: &#34;initializing&#34;, &#34;pending*validation&#34;, &#34;deleted&#34;, &#34;pending*issuance&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;pending*expiration&#34;, &#34;expired&#34;, &#34;active&#34;, &#34;initializing*timed*out&#34;, &#34;validation*timed*out&#34;, &#34;issuance*timed*out&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;, &#34;pending*cleanup&#34;, &#34;staging*deployment&#34;, &#34;staging*active&#34;, &#34;deactivating&#34;, &#34;inactive&#34;, &#34;backup*issued&#34;, &#34;holding*deployment&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of certificate pack.
     * Available values: &#34;initializing&#34;, &#34;pending*validation&#34;, &#34;deleted&#34;, &#34;pending*issuance&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;pending*expiration&#34;, &#34;expired&#34;, &#34;active&#34;, &#34;initializing*timed*out&#34;, &#34;validation*timed*out&#34;, &#34;issuance*timed*out&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;, &#34;pending*cleanup&#34;, &#34;staging*deployment&#34;, &#34;staging*active&#34;, &#34;deactivating&#34;, &#34;inactive&#34;, &#34;backup*issued&#34;, &#34;holding*deployment&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Type of certificate pack.
     * Available values: &#34;advanced&#34;.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of certificate pack.
     * Available values: &#34;advanced&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Validation Method selected for the order.
     * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
     * 
     */
    @Export(name="validationMethod", refs={String.class}, tree="[0]")
    private Output<String> validationMethod;

    /**
     * @return Validation Method selected for the order.
     * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
     * 
     */
    public Output<String> validationMethod() {
        return this.validationMethod;
    }
    /**
     * Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     * 
     */
    @Export(name="validityDays", refs={Integer.class}, tree="[0]")
    private Output<Integer> validityDays;

    /**
     * @return Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     * 
     */
    public Output<Integer> validityDays() {
        return this.validityDays;
    }
    /**
     * Identifier.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CertificatePack(java.lang.String name) {
        this(name, CertificatePackArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CertificatePack(java.lang.String name, CertificatePackArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CertificatePack(java.lang.String name, CertificatePackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/certificatePack:CertificatePack", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CertificatePack(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/certificatePack:CertificatePack", name, state, makeResourceOptions(options, id), false);
    }

    private static CertificatePackArgs makeArgs(CertificatePackArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CertificatePackArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CertificatePack get(java.lang.String name, Output<java.lang.String> id, @Nullable CertificatePackState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CertificatePack(name, id, state, options);
    }
}
