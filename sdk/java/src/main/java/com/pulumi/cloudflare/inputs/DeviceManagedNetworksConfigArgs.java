// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DeviceManagedNetworksConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceManagedNetworksConfigArgs Empty = new DeviceManagedNetworksConfigArgs();

    /**
     * The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
     * 
     */
    @Import(name="sha256", required=true)
    private Output<String> sha256;

    /**
     * @return The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
     * 
     */
    public Output<String> sha256() {
        return this.sha256;
    }

    /**
     * A network address of the form &#34;host:port&#34; that the WARP client will use to detect the presence of a TLS host.
     * 
     */
    @Import(name="tlsSockaddr", required=true)
    private Output<String> tlsSockaddr;

    /**
     * @return A network address of the form &#34;host:port&#34; that the WARP client will use to detect the presence of a TLS host.
     * 
     */
    public Output<String> tlsSockaddr() {
        return this.tlsSockaddr;
    }

    private DeviceManagedNetworksConfigArgs() {}

    private DeviceManagedNetworksConfigArgs(DeviceManagedNetworksConfigArgs $) {
        this.sha256 = $.sha256;
        this.tlsSockaddr = $.tlsSockaddr;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceManagedNetworksConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceManagedNetworksConfigArgs $;

        public Builder() {
            $ = new DeviceManagedNetworksConfigArgs();
        }

        public Builder(DeviceManagedNetworksConfigArgs defaults) {
            $ = new DeviceManagedNetworksConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sha256 The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sha256(Output<String> sha256) {
            $.sha256 = sha256;
            return this;
        }

        /**
         * @param sha256 The SHA-256 hash of the TLS certificate presented by the host found at tls_sockaddr. If absent, regular certificate verification (trusted roots, valid timestamp, etc) will be used to validate the certificate.
         * 
         * @return builder
         * 
         */
        public Builder sha256(String sha256) {
            return sha256(Output.of(sha256));
        }

        /**
         * @param tlsSockaddr A network address of the form &#34;host:port&#34; that the WARP client will use to detect the presence of a TLS host.
         * 
         * @return builder
         * 
         */
        public Builder tlsSockaddr(Output<String> tlsSockaddr) {
            $.tlsSockaddr = tlsSockaddr;
            return this;
        }

        /**
         * @param tlsSockaddr A network address of the form &#34;host:port&#34; that the WARP client will use to detect the presence of a TLS host.
         * 
         * @return builder
         * 
         */
        public Builder tlsSockaddr(String tlsSockaddr) {
            return tlsSockaddr(Output.of(tlsSockaddr));
        }

        public DeviceManagedNetworksConfigArgs build() {
            if ($.sha256 == null) {
                throw new MissingRequiredPropertyException("DeviceManagedNetworksConfigArgs", "sha256");
            }
            if ($.tlsSockaddr == null) {
                throw new MissingRequiredPropertyException("DeviceManagedNetworksConfigArgs", "tlsSockaddr");
            }
            return $;
        }
    }

}
