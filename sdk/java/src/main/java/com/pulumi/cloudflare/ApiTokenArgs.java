// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ApiTokenConditionArgs;
import com.pulumi.cloudflare.inputs.ApiTokenPolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiTokenArgs Empty = new ApiTokenArgs();

    @Import(name="condition")
    private @Nullable Output<ApiTokenConditionArgs> condition;

    public Optional<Output<ApiTokenConditionArgs>> condition() {
        return Optional.ofNullable(this.condition);
    }

    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    /**
     * @return The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * Token name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Token name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The time before which the token MUST NOT be accepted for processing.
     * 
     */
    @Import(name="notBefore")
    private @Nullable Output<String> notBefore;

    /**
     * @return The time before which the token MUST NOT be accepted for processing.
     * 
     */
    public Optional<Output<String>> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * List of access policies assigned to the token.
     * 
     */
    @Import(name="policies", required=true)
    private Output<List<ApiTokenPolicyArgs>> policies;

    /**
     * @return List of access policies assigned to the token.
     * 
     */
    public Output<List<ApiTokenPolicyArgs>> policies() {
        return this.policies;
    }

    /**
     * Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private ApiTokenArgs() {}

    private ApiTokenArgs(ApiTokenArgs $) {
        this.condition = $.condition;
        this.expiresOn = $.expiresOn;
        this.name = $.name;
        this.notBefore = $.notBefore;
        this.policies = $.policies;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiTokenArgs $;

        public Builder() {
            $ = new ApiTokenArgs();
        }

        public Builder(ApiTokenArgs defaults) {
            $ = new ApiTokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<ApiTokenConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(ApiTokenConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param expiresOn The expiration time on or after which the JWT MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        /**
         * @param expiresOn The expiration time on or after which the JWT MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param name Token name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Token name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notBefore The time before which the token MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Output<String> notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param notBefore The time before which the token MUST NOT be accepted for processing.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(String notBefore) {
            return notBefore(Output.of(notBefore));
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(Output<List<ApiTokenPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<ApiTokenPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies List of access policies assigned to the token.
         * 
         * @return builder
         * 
         */
        public Builder policies(ApiTokenPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param status Status of the token.
         * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the token.
         * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public ApiTokenArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ApiTokenArgs", "name");
            }
            if ($.policies == null) {
                throw new MissingRequiredPropertyException("ApiTokenArgs", "policies");
            }
            return $;
        }
    }

}
