// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RateLimitMatchResponseArgs extends com.pulumi.resources.ResourceArgs {

    public static final RateLimitMatchResponseArgs Empty = new RateLimitMatchResponseArgs();

    /**
     * When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
     * Notes: This field is deprecated. Instead, use response headers and set &#34;origin*traffic&#34; to &#34;false&#34; to avoid legacy behaviour interacting with the &#34;response*headers&#34; property.
     * 
     */
    @Import(name="originTraffic")
    private @Nullable Output<Boolean> originTraffic;

    /**
     * @return When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
     * Notes: This field is deprecated. Instead, use response headers and set &#34;origin*traffic&#34; to &#34;false&#34; to avoid legacy behaviour interacting with the &#34;response*headers&#34; property.
     * 
     */
    public Optional<Output<Boolean>> originTraffic() {
        return Optional.ofNullable(this.originTraffic);
    }

    private RateLimitMatchResponseArgs() {}

    private RateLimitMatchResponseArgs(RateLimitMatchResponseArgs $) {
        this.originTraffic = $.originTraffic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RateLimitMatchResponseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RateLimitMatchResponseArgs $;

        public Builder() {
            $ = new RateLimitMatchResponseArgs();
        }

        public Builder(RateLimitMatchResponseArgs defaults) {
            $ = new RateLimitMatchResponseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param originTraffic When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
         * Notes: This field is deprecated. Instead, use response headers and set &#34;origin*traffic&#34; to &#34;false&#34; to avoid legacy behaviour interacting with the &#34;response*headers&#34; property.
         * 
         * @return builder
         * 
         */
        public Builder originTraffic(@Nullable Output<Boolean> originTraffic) {
            $.originTraffic = originTraffic;
            return this;
        }

        /**
         * @param originTraffic When true, only the uncached traffic served from your origin servers will count towards rate limiting. In this case, any cached traffic served by Cloudflare will not count towards rate limiting. This field is optional.
         * Notes: This field is deprecated. Instead, use response headers and set &#34;origin*traffic&#34; to &#34;false&#34; to avoid legacy behaviour interacting with the &#34;response*headers&#34; property.
         * 
         * @return builder
         * 
         */
        public Builder originTraffic(Boolean originTraffic) {
            return originTraffic(Output.of(originTraffic));
        }

        public RateLimitMatchResponseArgs build() {
            return $;
        }
    }

}
