// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.SnippetFileArgs;
import com.pulumi.cloudflare.inputs.SnippetMetadataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnippetState extends com.pulumi.resources.ResourceArgs {

    public static final SnippetState Empty = new SnippetState();

    /**
     * The timestamp of when the snippet was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return The timestamp of when the snippet was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * The list of files belonging to the snippet.
     * 
     */
    @Import(name="files")
    private @Nullable Output<List<SnippetFileArgs>> files;

    /**
     * @return The list of files belonging to the snippet.
     * 
     */
    public Optional<Output<List<SnippetFileArgs>>> files() {
        return Optional.ofNullable(this.files);
    }

    /**
     * Metadata about the snippet.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<SnippetMetadataArgs> metadata;

    /**
     * @return Metadata about the snippet.
     * 
     */
    public Optional<Output<SnippetMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The timestamp of when the snippet was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return The timestamp of when the snippet was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The identifying name of the snippet.
     * 
     */
    @Import(name="snippetName")
    private @Nullable Output<String> snippetName;

    /**
     * @return The identifying name of the snippet.
     * 
     */
    public Optional<Output<String>> snippetName() {
        return Optional.ofNullable(this.snippetName);
    }

    /**
     * The unique ID of the zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The unique ID of the zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private SnippetState() {}

    private SnippetState(SnippetState $) {
        this.createdOn = $.createdOn;
        this.files = $.files;
        this.metadata = $.metadata;
        this.modifiedOn = $.modifiedOn;
        this.snippetName = $.snippetName;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetState $;

        public Builder() {
            $ = new SnippetState();
        }

        public Builder(SnippetState defaults) {
            $ = new SnippetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdOn The timestamp of when the snippet was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The timestamp of when the snippet was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(@Nullable Output<List<SnippetFileArgs>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(List<SnippetFileArgs> files) {
            return files(Output.of(files));
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(SnippetFileArgs... files) {
            return files(List.of(files));
        }

        /**
         * @param metadata Metadata about the snippet.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<SnippetMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Metadata about the snippet.
         * 
         * @return builder
         * 
         */
        public Builder metadata(SnippetMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param modifiedOn The timestamp of when the snippet was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn The timestamp of when the snippet was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(@Nullable Output<String> snippetName) {
            $.snippetName = snippetName;
            return this;
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(String snippetName) {
            return snippetName(Output.of(snippetName));
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SnippetState build() {
            return $;
        }
    }

}
