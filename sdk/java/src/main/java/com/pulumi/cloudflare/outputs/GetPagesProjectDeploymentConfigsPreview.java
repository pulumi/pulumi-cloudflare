// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewAiBindings;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewBrowsers;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewD1Databases;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewDurableObjectNamespaces;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewEnvVars;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewHyperdriveBindings;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewKvNamespaces;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewMtlsCertificates;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewPlacement;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewQueueProducers;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewR2Buckets;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewServices;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigsPreviewVectorizeBindings;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetPagesProjectDeploymentConfigsPreview {
    /**
     * @return Constellation bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewAiBindings> aiBindings;
    /**
     * @return Analytics Engine bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets> analyticsEngineDatasets;
    /**
     * @return Browser bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewBrowsers> browsers;
    /**
     * @return Compatibility date used for Pages Functions.
     * 
     */
    private String compatibilityDate;
    /**
     * @return Compatibility flags used for Pages Functions.
     * 
     */
    private List<String> compatibilityFlags;
    /**
     * @return D1 databases used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewD1Databases> d1Databases;
    /**
     * @return Durable Object namespaces used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewDurableObjectNamespaces> durableObjectNamespaces;
    /**
     * @return Environment variables used for builds and Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewEnvVars> envVars;
    /**
     * @return Hyperdrive bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewHyperdriveBindings> hyperdriveBindings;
    /**
     * @return KV namespaces used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewKvNamespaces> kvNamespaces;
    /**
     * @return mTLS bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewMtlsCertificates> mtlsCertificates;
    /**
     * @return Placement setting used for Pages Functions.
     * 
     */
    private GetPagesProjectDeploymentConfigsPreviewPlacement placement;
    /**
     * @return Queue Producer bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewQueueProducers> queueProducers;
    /**
     * @return R2 buckets used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewR2Buckets> r2Buckets;
    /**
     * @return Services used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewServices> services;
    /**
     * @return Vectorize bindings used for Pages Functions.
     * 
     */
    private Map<String,GetPagesProjectDeploymentConfigsPreviewVectorizeBindings> vectorizeBindings;

    private GetPagesProjectDeploymentConfigsPreview() {}
    /**
     * @return Constellation bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewAiBindings> aiBindings() {
        return this.aiBindings;
    }
    /**
     * @return Analytics Engine bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets> analyticsEngineDatasets() {
        return this.analyticsEngineDatasets;
    }
    /**
     * @return Browser bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewBrowsers> browsers() {
        return this.browsers;
    }
    /**
     * @return Compatibility date used for Pages Functions.
     * 
     */
    public String compatibilityDate() {
        return this.compatibilityDate;
    }
    /**
     * @return Compatibility flags used for Pages Functions.
     * 
     */
    public List<String> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    /**
     * @return D1 databases used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewD1Databases> d1Databases() {
        return this.d1Databases;
    }
    /**
     * @return Durable Object namespaces used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewDurableObjectNamespaces> durableObjectNamespaces() {
        return this.durableObjectNamespaces;
    }
    /**
     * @return Environment variables used for builds and Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewEnvVars> envVars() {
        return this.envVars;
    }
    /**
     * @return Hyperdrive bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewHyperdriveBindings> hyperdriveBindings() {
        return this.hyperdriveBindings;
    }
    /**
     * @return KV namespaces used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewKvNamespaces> kvNamespaces() {
        return this.kvNamespaces;
    }
    /**
     * @return mTLS bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewMtlsCertificates> mtlsCertificates() {
        return this.mtlsCertificates;
    }
    /**
     * @return Placement setting used for Pages Functions.
     * 
     */
    public GetPagesProjectDeploymentConfigsPreviewPlacement placement() {
        return this.placement;
    }
    /**
     * @return Queue Producer bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewQueueProducers> queueProducers() {
        return this.queueProducers;
    }
    /**
     * @return R2 buckets used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewR2Buckets> r2Buckets() {
        return this.r2Buckets;
    }
    /**
     * @return Services used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewServices> services() {
        return this.services;
    }
    /**
     * @return Vectorize bindings used for Pages Functions.
     * 
     */
    public Map<String,GetPagesProjectDeploymentConfigsPreviewVectorizeBindings> vectorizeBindings() {
        return this.vectorizeBindings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPagesProjectDeploymentConfigsPreview defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,GetPagesProjectDeploymentConfigsPreviewAiBindings> aiBindings;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets> analyticsEngineDatasets;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewBrowsers> browsers;
        private String compatibilityDate;
        private List<String> compatibilityFlags;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewD1Databases> d1Databases;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewDurableObjectNamespaces> durableObjectNamespaces;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewEnvVars> envVars;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewHyperdriveBindings> hyperdriveBindings;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewKvNamespaces> kvNamespaces;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewMtlsCertificates> mtlsCertificates;
        private GetPagesProjectDeploymentConfigsPreviewPlacement placement;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewQueueProducers> queueProducers;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewR2Buckets> r2Buckets;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewServices> services;
        private Map<String,GetPagesProjectDeploymentConfigsPreviewVectorizeBindings> vectorizeBindings;
        public Builder() {}
        public Builder(GetPagesProjectDeploymentConfigsPreview defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aiBindings = defaults.aiBindings;
    	      this.analyticsEngineDatasets = defaults.analyticsEngineDatasets;
    	      this.browsers = defaults.browsers;
    	      this.compatibilityDate = defaults.compatibilityDate;
    	      this.compatibilityFlags = defaults.compatibilityFlags;
    	      this.d1Databases = defaults.d1Databases;
    	      this.durableObjectNamespaces = defaults.durableObjectNamespaces;
    	      this.envVars = defaults.envVars;
    	      this.hyperdriveBindings = defaults.hyperdriveBindings;
    	      this.kvNamespaces = defaults.kvNamespaces;
    	      this.mtlsCertificates = defaults.mtlsCertificates;
    	      this.placement = defaults.placement;
    	      this.queueProducers = defaults.queueProducers;
    	      this.r2Buckets = defaults.r2Buckets;
    	      this.services = defaults.services;
    	      this.vectorizeBindings = defaults.vectorizeBindings;
        }

        @CustomType.Setter
        public Builder aiBindings(Map<String,GetPagesProjectDeploymentConfigsPreviewAiBindings> aiBindings) {
            if (aiBindings == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "aiBindings");
            }
            this.aiBindings = aiBindings;
            return this;
        }
        @CustomType.Setter
        public Builder analyticsEngineDatasets(Map<String,GetPagesProjectDeploymentConfigsPreviewAnalyticsEngineDatasets> analyticsEngineDatasets) {
            if (analyticsEngineDatasets == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "analyticsEngineDatasets");
            }
            this.analyticsEngineDatasets = analyticsEngineDatasets;
            return this;
        }
        @CustomType.Setter
        public Builder browsers(Map<String,GetPagesProjectDeploymentConfigsPreviewBrowsers> browsers) {
            if (browsers == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "browsers");
            }
            this.browsers = browsers;
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityDate(String compatibilityDate) {
            if (compatibilityDate == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "compatibilityDate");
            }
            this.compatibilityDate = compatibilityDate;
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityFlags(List<String> compatibilityFlags) {
            if (compatibilityFlags == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "compatibilityFlags");
            }
            this.compatibilityFlags = compatibilityFlags;
            return this;
        }
        public Builder compatibilityFlags(String... compatibilityFlags) {
            return compatibilityFlags(List.of(compatibilityFlags));
        }
        @CustomType.Setter
        public Builder d1Databases(Map<String,GetPagesProjectDeploymentConfigsPreviewD1Databases> d1Databases) {
            if (d1Databases == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "d1Databases");
            }
            this.d1Databases = d1Databases;
            return this;
        }
        @CustomType.Setter
        public Builder durableObjectNamespaces(Map<String,GetPagesProjectDeploymentConfigsPreviewDurableObjectNamespaces> durableObjectNamespaces) {
            if (durableObjectNamespaces == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "durableObjectNamespaces");
            }
            this.durableObjectNamespaces = durableObjectNamespaces;
            return this;
        }
        @CustomType.Setter
        public Builder envVars(Map<String,GetPagesProjectDeploymentConfigsPreviewEnvVars> envVars) {
            if (envVars == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "envVars");
            }
            this.envVars = envVars;
            return this;
        }
        @CustomType.Setter
        public Builder hyperdriveBindings(Map<String,GetPagesProjectDeploymentConfigsPreviewHyperdriveBindings> hyperdriveBindings) {
            if (hyperdriveBindings == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "hyperdriveBindings");
            }
            this.hyperdriveBindings = hyperdriveBindings;
            return this;
        }
        @CustomType.Setter
        public Builder kvNamespaces(Map<String,GetPagesProjectDeploymentConfigsPreviewKvNamespaces> kvNamespaces) {
            if (kvNamespaces == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "kvNamespaces");
            }
            this.kvNamespaces = kvNamespaces;
            return this;
        }
        @CustomType.Setter
        public Builder mtlsCertificates(Map<String,GetPagesProjectDeploymentConfigsPreviewMtlsCertificates> mtlsCertificates) {
            if (mtlsCertificates == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "mtlsCertificates");
            }
            this.mtlsCertificates = mtlsCertificates;
            return this;
        }
        @CustomType.Setter
        public Builder placement(GetPagesProjectDeploymentConfigsPreviewPlacement placement) {
            if (placement == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "placement");
            }
            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder queueProducers(Map<String,GetPagesProjectDeploymentConfigsPreviewQueueProducers> queueProducers) {
            if (queueProducers == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "queueProducers");
            }
            this.queueProducers = queueProducers;
            return this;
        }
        @CustomType.Setter
        public Builder r2Buckets(Map<String,GetPagesProjectDeploymentConfigsPreviewR2Buckets> r2Buckets) {
            if (r2Buckets == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "r2Buckets");
            }
            this.r2Buckets = r2Buckets;
            return this;
        }
        @CustomType.Setter
        public Builder services(Map<String,GetPagesProjectDeploymentConfigsPreviewServices> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "services");
            }
            this.services = services;
            return this;
        }
        @CustomType.Setter
        public Builder vectorizeBindings(Map<String,GetPagesProjectDeploymentConfigsPreviewVectorizeBindings> vectorizeBindings) {
            if (vectorizeBindings == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectDeploymentConfigsPreview", "vectorizeBindings");
            }
            this.vectorizeBindings = vectorizeBindings;
            return this;
        }
        public GetPagesProjectDeploymentConfigsPreview build() {
            final var _resultValue = new GetPagesProjectDeploymentConfigsPreview();
            _resultValue.aiBindings = aiBindings;
            _resultValue.analyticsEngineDatasets = analyticsEngineDatasets;
            _resultValue.browsers = browsers;
            _resultValue.compatibilityDate = compatibilityDate;
            _resultValue.compatibilityFlags = compatibilityFlags;
            _resultValue.d1Databases = d1Databases;
            _resultValue.durableObjectNamespaces = durableObjectNamespaces;
            _resultValue.envVars = envVars;
            _resultValue.hyperdriveBindings = hyperdriveBindings;
            _resultValue.kvNamespaces = kvNamespaces;
            _resultValue.mtlsCertificates = mtlsCertificates;
            _resultValue.placement = placement;
            _resultValue.queueProducers = queueProducers;
            _resultValue.r2Buckets = r2Buckets;
            _resultValue.services = services;
            _resultValue.vectorizeBindings = vectorizeBindings;
            return _resultValue;
        }
    }
}
