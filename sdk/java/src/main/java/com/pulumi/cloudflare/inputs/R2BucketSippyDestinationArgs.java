// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class R2BucketSippyDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketSippyDestinationArgs Empty = new R2BucketSippyDestinationArgs();

    /**
     * ID of a Cloudflare API token.
     * This is the value labelled &#34;Access Key ID&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return ID of a Cloudflare API token.
     * This is the value labelled &#34;Access Key ID&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * Available values: &#34;r2&#34;.
     * 
     */
    @Import(name="cloudProvider")
    private @Nullable Output<String> cloudProvider;

    /**
     * @return Available values: &#34;r2&#34;.
     * 
     */
    public Optional<Output<String>> cloudProvider() {
        return Optional.ofNullable(this.cloudProvider);
    }

    /**
     * Value of a Cloudflare API token.
     * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     * Sippy will use this token when writing objects to R2, so it is
     * best to scope this token to the bucket you&#39;re enabling Sippy for.
     * 
     */
    @Import(name="secretAccessKey")
    private @Nullable Output<String> secretAccessKey;

    /**
     * @return Value of a Cloudflare API token.
     * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     * Sippy will use this token when writing objects to R2, so it is
     * best to scope this token to the bucket you&#39;re enabling Sippy for.
     * 
     */
    public Optional<Output<String>> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    private R2BucketSippyDestinationArgs() {}

    private R2BucketSippyDestinationArgs(R2BucketSippyDestinationArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.cloudProvider = $.cloudProvider;
        this.secretAccessKey = $.secretAccessKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketSippyDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketSippyDestinationArgs $;

        public Builder() {
            $ = new R2BucketSippyDestinationArgs();
        }

        public Builder(R2BucketSippyDestinationArgs defaults) {
            $ = new R2BucketSippyDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId ID of a Cloudflare API token.
         * This is the value labelled &#34;Access Key ID&#34; when creating an API.
         * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId ID of a Cloudflare API token.
         * This is the value labelled &#34;Access Key ID&#34; when creating an API.
         * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param cloudProvider Available values: &#34;r2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(@Nullable Output<String> cloudProvider) {
            $.cloudProvider = cloudProvider;
            return this;
        }

        /**
         * @param cloudProvider Available values: &#34;r2&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cloudProvider(String cloudProvider) {
            return cloudProvider(Output.of(cloudProvider));
        }

        /**
         * @param secretAccessKey Value of a Cloudflare API token.
         * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
         * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
         * 
         * Sippy will use this token when writing objects to R2, so it is
         * best to scope this token to the bucket you&#39;re enabling Sippy for.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(@Nullable Output<String> secretAccessKey) {
            $.secretAccessKey = secretAccessKey;
            return this;
        }

        /**
         * @param secretAccessKey Value of a Cloudflare API token.
         * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
         * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
         * 
         * Sippy will use this token when writing objects to R2, so it is
         * best to scope this token to the bucket you&#39;re enabling Sippy for.
         * 
         * @return builder
         * 
         */
        public Builder secretAccessKey(String secretAccessKey) {
            return secretAccessKey(Output.of(secretAccessKey));
        }

        public R2BucketSippyDestinationArgs build() {
            return $;
        }
    }

}
