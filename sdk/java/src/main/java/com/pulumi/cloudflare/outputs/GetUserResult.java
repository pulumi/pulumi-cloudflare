// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetUserOrganization;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return Lists the betas that the user is participating in.
     * 
     */
    private List<String> betas;
    /**
     * @return The country in which the user lives.
     * 
     */
    private String country;
    /**
     * @return User&#39;s first name
     * 
     */
    private String firstName;
    /**
     * @return Indicates whether user has any business zones
     * 
     */
    private Boolean hasBusinessZones;
    /**
     * @return Indicates whether user has any enterprise zones
     * 
     */
    private Boolean hasEnterpriseZones;
    /**
     * @return Indicates whether user has any pro zones
     * 
     */
    private Boolean hasProZones;
    /**
     * @return Identifier of the user.
     * 
     */
    private String id;
    /**
     * @return User&#39;s last name
     * 
     */
    private String lastName;
    private List<GetUserOrganization> organizations;
    /**
     * @return Indicates whether user has been suspended
     * 
     */
    private Boolean suspended;
    /**
     * @return User&#39;s telephone number
     * 
     */
    private String telephone;
    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    private Boolean twoFactorAuthenticationEnabled;
    /**
     * @return Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
     * 
     */
    private Boolean twoFactorAuthenticationLocked;
    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    private String zipcode;

    private GetUserResult() {}
    /**
     * @return Lists the betas that the user is participating in.
     * 
     */
    public List<String> betas() {
        return this.betas;
    }
    /**
     * @return The country in which the user lives.
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return User&#39;s first name
     * 
     */
    public String firstName() {
        return this.firstName;
    }
    /**
     * @return Indicates whether user has any business zones
     * 
     */
    public Boolean hasBusinessZones() {
        return this.hasBusinessZones;
    }
    /**
     * @return Indicates whether user has any enterprise zones
     * 
     */
    public Boolean hasEnterpriseZones() {
        return this.hasEnterpriseZones;
    }
    /**
     * @return Indicates whether user has any pro zones
     * 
     */
    public Boolean hasProZones() {
        return this.hasProZones;
    }
    /**
     * @return Identifier of the user.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return User&#39;s last name
     * 
     */
    public String lastName() {
        return this.lastName;
    }
    public List<GetUserOrganization> organizations() {
        return this.organizations;
    }
    /**
     * @return Indicates whether user has been suspended
     * 
     */
    public Boolean suspended() {
        return this.suspended;
    }
    /**
     * @return User&#39;s telephone number
     * 
     */
    public String telephone() {
        return this.telephone;
    }
    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    public Boolean twoFactorAuthenticationEnabled() {
        return this.twoFactorAuthenticationEnabled;
    }
    /**
     * @return Indicates whether two-factor authentication is required by one of the accounts that the user is a member of.
     * 
     */
    public Boolean twoFactorAuthenticationLocked() {
        return this.twoFactorAuthenticationLocked;
    }
    /**
     * @return The zipcode or postal code where the user lives.
     * 
     */
    public String zipcode() {
        return this.zipcode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> betas;
        private String country;
        private String firstName;
        private Boolean hasBusinessZones;
        private Boolean hasEnterpriseZones;
        private Boolean hasProZones;
        private String id;
        private String lastName;
        private List<GetUserOrganization> organizations;
        private Boolean suspended;
        private String telephone;
        private Boolean twoFactorAuthenticationEnabled;
        private Boolean twoFactorAuthenticationLocked;
        private String zipcode;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.betas = defaults.betas;
    	      this.country = defaults.country;
    	      this.firstName = defaults.firstName;
    	      this.hasBusinessZones = defaults.hasBusinessZones;
    	      this.hasEnterpriseZones = defaults.hasEnterpriseZones;
    	      this.hasProZones = defaults.hasProZones;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.organizations = defaults.organizations;
    	      this.suspended = defaults.suspended;
    	      this.telephone = defaults.telephone;
    	      this.twoFactorAuthenticationEnabled = defaults.twoFactorAuthenticationEnabled;
    	      this.twoFactorAuthenticationLocked = defaults.twoFactorAuthenticationLocked;
    	      this.zipcode = defaults.zipcode;
        }

        @CustomType.Setter
        public Builder betas(List<String> betas) {
            if (betas == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "betas");
            }
            this.betas = betas;
            return this;
        }
        public Builder betas(String... betas) {
            return betas(List.of(betas));
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(String firstName) {
            if (firstName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "firstName");
            }
            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder hasBusinessZones(Boolean hasBusinessZones) {
            if (hasBusinessZones == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "hasBusinessZones");
            }
            this.hasBusinessZones = hasBusinessZones;
            return this;
        }
        @CustomType.Setter
        public Builder hasEnterpriseZones(Boolean hasEnterpriseZones) {
            if (hasEnterpriseZones == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "hasEnterpriseZones");
            }
            this.hasEnterpriseZones = hasEnterpriseZones;
            return this;
        }
        @CustomType.Setter
        public Builder hasProZones(Boolean hasProZones) {
            if (hasProZones == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "hasProZones");
            }
            this.hasProZones = hasProZones;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(String lastName) {
            if (lastName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "lastName");
            }
            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder organizations(List<GetUserOrganization> organizations) {
            if (organizations == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "organizations");
            }
            this.organizations = organizations;
            return this;
        }
        public Builder organizations(GetUserOrganization... organizations) {
            return organizations(List.of(organizations));
        }
        @CustomType.Setter
        public Builder suspended(Boolean suspended) {
            if (suspended == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "suspended");
            }
            this.suspended = suspended;
            return this;
        }
        @CustomType.Setter
        public Builder telephone(String telephone) {
            if (telephone == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "telephone");
            }
            this.telephone = telephone;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorAuthenticationEnabled(Boolean twoFactorAuthenticationEnabled) {
            if (twoFactorAuthenticationEnabled == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "twoFactorAuthenticationEnabled");
            }
            this.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorAuthenticationLocked(Boolean twoFactorAuthenticationLocked) {
            if (twoFactorAuthenticationLocked == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "twoFactorAuthenticationLocked");
            }
            this.twoFactorAuthenticationLocked = twoFactorAuthenticationLocked;
            return this;
        }
        @CustomType.Setter
        public Builder zipcode(String zipcode) {
            if (zipcode == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "zipcode");
            }
            this.zipcode = zipcode;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.betas = betas;
            _resultValue.country = country;
            _resultValue.firstName = firstName;
            _resultValue.hasBusinessZones = hasBusinessZones;
            _resultValue.hasEnterpriseZones = hasEnterpriseZones;
            _resultValue.hasProZones = hasProZones;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.organizations = organizations;
            _resultValue.suspended = suspended;
            _resultValue.telephone = telephone;
            _resultValue.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            _resultValue.twoFactorAuthenticationLocked = twoFactorAuthenticationLocked;
            _resultValue.zipcode = zipcode;
            return _resultValue;
        }
    }
}
