// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerVersionModuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerVersionModuleArgs Empty = new WorkerVersionModuleArgs();

    /**
     * The file path of the module content.
     * 
     */
    @Import(name="contentFile", required=true)
    private Output<String> contentFile;

    /**
     * @return The file path of the module content.
     * 
     */
    public Output<String> contentFile() {
        return this.contentFile;
    }

    /**
     * The SHA-256 hash of the module content.
     * 
     */
    @Import(name="contentSha256")
    private @Nullable Output<String> contentSha256;

    /**
     * @return The SHA-256 hash of the module content.
     * 
     */
    public Optional<Output<String>> contentSha256() {
        return Optional.ofNullable(this.contentSha256);
    }

    /**
     * The content type of the module.
     * 
     */
    @Import(name="contentType", required=true)
    private Output<String> contentType;

    /**
     * @return The content type of the module.
     * 
     */
    public Output<String> contentType() {
        return this.contentType;
    }

    /**
     * The name of the module.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the module.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private WorkerVersionModuleArgs() {}

    private WorkerVersionModuleArgs(WorkerVersionModuleArgs $) {
        this.contentFile = $.contentFile;
        this.contentSha256 = $.contentSha256;
        this.contentType = $.contentType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerVersionModuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerVersionModuleArgs $;

        public Builder() {
            $ = new WorkerVersionModuleArgs();
        }

        public Builder(WorkerVersionModuleArgs defaults) {
            $ = new WorkerVersionModuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contentFile The file path of the module content.
         * 
         * @return builder
         * 
         */
        public Builder contentFile(Output<String> contentFile) {
            $.contentFile = contentFile;
            return this;
        }

        /**
         * @param contentFile The file path of the module content.
         * 
         * @return builder
         * 
         */
        public Builder contentFile(String contentFile) {
            return contentFile(Output.of(contentFile));
        }

        /**
         * @param contentSha256 The SHA-256 hash of the module content.
         * 
         * @return builder
         * 
         */
        public Builder contentSha256(@Nullable Output<String> contentSha256) {
            $.contentSha256 = contentSha256;
            return this;
        }

        /**
         * @param contentSha256 The SHA-256 hash of the module content.
         * 
         * @return builder
         * 
         */
        public Builder contentSha256(String contentSha256) {
            return contentSha256(Output.of(contentSha256));
        }

        /**
         * @param contentType The content type of the module.
         * 
         * @return builder
         * 
         */
        public Builder contentType(Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The content type of the module.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param name The name of the module.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the module.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public WorkerVersionModuleArgs build() {
            if ($.contentFile == null) {
                throw new MissingRequiredPropertyException("WorkerVersionModuleArgs", "contentFile");
            }
            if ($.contentType == null) {
                throw new MissingRequiredPropertyException("WorkerVersionModuleArgs", "contentType");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WorkerVersionModuleArgs", "name");
            }
            return $;
        }
    }

}
