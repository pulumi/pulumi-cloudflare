// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetPagesDomainValidationData;
import com.pulumi.cloudflare.outputs.GetPagesDomainVerificationData;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPagesDomainResult {
    /**
     * @return Identifier
     * 
     */
    private String accountId;
    /**
     * @return Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
     * 
     */
    private String certificateAuthority;
    private String createdOn;
    private String domainId;
    /**
     * @return Name of the domain.
     * 
     */
    private @Nullable String domainName;
    /**
     * @return Name of the domain.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Name of the project.
     * 
     */
    private String projectName;
    /**
     * @return Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
     * 
     */
    private String status;
    private GetPagesDomainValidationData validationData;
    private GetPagesDomainVerificationData verificationData;
    private String zoneTag;

    private GetPagesDomainResult() {}
    /**
     * @return Identifier
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
     * 
     */
    public String certificateAuthority() {
        return this.certificateAuthority;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String domainId() {
        return this.domainId;
    }
    /**
     * @return Name of the domain.
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    /**
     * @return Name of the domain.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Name of the project.
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    public GetPagesDomainValidationData validationData() {
        return this.validationData;
    }
    public GetPagesDomainVerificationData verificationData() {
        return this.verificationData;
    }
    public String zoneTag() {
        return this.zoneTag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPagesDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String certificateAuthority;
        private String createdOn;
        private String domainId;
        private @Nullable String domainName;
        private String id;
        private String name;
        private String projectName;
        private String status;
        private GetPagesDomainValidationData validationData;
        private GetPagesDomainVerificationData verificationData;
        private String zoneTag;
        public Builder() {}
        public Builder(GetPagesDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.certificateAuthority = defaults.certificateAuthority;
    	      this.createdOn = defaults.createdOn;
    	      this.domainId = defaults.domainId;
    	      this.domainName = defaults.domainName;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.projectName = defaults.projectName;
    	      this.status = defaults.status;
    	      this.validationData = defaults.validationData;
    	      this.verificationData = defaults.verificationData;
    	      this.zoneTag = defaults.zoneTag;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateAuthority(String certificateAuthority) {
            if (certificateAuthority == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "certificateAuthority");
            }
            this.certificateAuthority = certificateAuthority;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(String domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(@Nullable String domainName) {

            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder validationData(GetPagesDomainValidationData validationData) {
            if (validationData == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "validationData");
            }
            this.validationData = validationData;
            return this;
        }
        @CustomType.Setter
        public Builder verificationData(GetPagesDomainVerificationData verificationData) {
            if (verificationData == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "verificationData");
            }
            this.verificationData = verificationData;
            return this;
        }
        @CustomType.Setter
        public Builder zoneTag(String zoneTag) {
            if (zoneTag == null) {
              throw new MissingRequiredPropertyException("GetPagesDomainResult", "zoneTag");
            }
            this.zoneTag = zoneTag;
            return this;
        }
        public GetPagesDomainResult build() {
            final var _resultValue = new GetPagesDomainResult();
            _resultValue.accountId = accountId;
            _resultValue.certificateAuthority = certificateAuthority;
            _resultValue.createdOn = createdOn;
            _resultValue.domainId = domainId;
            _resultValue.domainName = domainName;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.projectName = projectName;
            _resultValue.status = status;
            _resultValue.validationData = validationData;
            _resultValue.verificationData = verificationData;
            _resultValue.zoneTag = zoneTag;
            return _resultValue;
        }
    }
}
