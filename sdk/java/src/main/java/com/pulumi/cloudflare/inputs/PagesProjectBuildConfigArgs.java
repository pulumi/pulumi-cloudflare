// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PagesProjectBuildConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PagesProjectBuildConfigArgs Empty = new PagesProjectBuildConfigArgs();

    /**
     * Enable build caching for the project.
     * 
     */
    @Import(name="buildCaching")
    private @Nullable Output<Boolean> buildCaching;

    /**
     * @return Enable build caching for the project.
     * 
     */
    public Optional<Output<Boolean>> buildCaching() {
        return Optional.ofNullable(this.buildCaching);
    }

    /**
     * Command used to build project.
     * 
     */
    @Import(name="buildCommand")
    private @Nullable Output<String> buildCommand;

    /**
     * @return Command used to build project.
     * 
     */
    public Optional<Output<String>> buildCommand() {
        return Optional.ofNullable(this.buildCommand);
    }

    /**
     * Output directory of the build.
     * 
     */
    @Import(name="destinationDir")
    private @Nullable Output<String> destinationDir;

    /**
     * @return Output directory of the build.
     * 
     */
    public Optional<Output<String>> destinationDir() {
        return Optional.ofNullable(this.destinationDir);
    }

    /**
     * Your project&#39;s root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
     * 
     */
    @Import(name="rootDir")
    private @Nullable Output<String> rootDir;

    /**
     * @return Your project&#39;s root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
     * 
     */
    public Optional<Output<String>> rootDir() {
        return Optional.ofNullable(this.rootDir);
    }

    /**
     * The classifying tag for analytics.
     * 
     */
    @Import(name="webAnalyticsTag")
    private @Nullable Output<String> webAnalyticsTag;

    /**
     * @return The classifying tag for analytics.
     * 
     */
    public Optional<Output<String>> webAnalyticsTag() {
        return Optional.ofNullable(this.webAnalyticsTag);
    }

    /**
     * The auth token for analytics.
     * 
     */
    @Import(name="webAnalyticsToken")
    private @Nullable Output<String> webAnalyticsToken;

    /**
     * @return The auth token for analytics.
     * 
     */
    public Optional<Output<String>> webAnalyticsToken() {
        return Optional.ofNullable(this.webAnalyticsToken);
    }

    private PagesProjectBuildConfigArgs() {}

    private PagesProjectBuildConfigArgs(PagesProjectBuildConfigArgs $) {
        this.buildCaching = $.buildCaching;
        this.buildCommand = $.buildCommand;
        this.destinationDir = $.destinationDir;
        this.rootDir = $.rootDir;
        this.webAnalyticsTag = $.webAnalyticsTag;
        this.webAnalyticsToken = $.webAnalyticsToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PagesProjectBuildConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PagesProjectBuildConfigArgs $;

        public Builder() {
            $ = new PagesProjectBuildConfigArgs();
        }

        public Builder(PagesProjectBuildConfigArgs defaults) {
            $ = new PagesProjectBuildConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buildCaching Enable build caching for the project.
         * 
         * @return builder
         * 
         */
        public Builder buildCaching(@Nullable Output<Boolean> buildCaching) {
            $.buildCaching = buildCaching;
            return this;
        }

        /**
         * @param buildCaching Enable build caching for the project.
         * 
         * @return builder
         * 
         */
        public Builder buildCaching(Boolean buildCaching) {
            return buildCaching(Output.of(buildCaching));
        }

        /**
         * @param buildCommand Command used to build project.
         * 
         * @return builder
         * 
         */
        public Builder buildCommand(@Nullable Output<String> buildCommand) {
            $.buildCommand = buildCommand;
            return this;
        }

        /**
         * @param buildCommand Command used to build project.
         * 
         * @return builder
         * 
         */
        public Builder buildCommand(String buildCommand) {
            return buildCommand(Output.of(buildCommand));
        }

        /**
         * @param destinationDir Output directory of the build.
         * 
         * @return builder
         * 
         */
        public Builder destinationDir(@Nullable Output<String> destinationDir) {
            $.destinationDir = destinationDir;
            return this;
        }

        /**
         * @param destinationDir Output directory of the build.
         * 
         * @return builder
         * 
         */
        public Builder destinationDir(String destinationDir) {
            return destinationDir(Output.of(destinationDir));
        }

        /**
         * @param rootDir Your project&#39;s root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
         * 
         * @return builder
         * 
         */
        public Builder rootDir(@Nullable Output<String> rootDir) {
            $.rootDir = rootDir;
            return this;
        }

        /**
         * @param rootDir Your project&#39;s root directory, where Cloudflare runs the build command. If your site is not in a subdirectory, leave this path value empty.
         * 
         * @return builder
         * 
         */
        public Builder rootDir(String rootDir) {
            return rootDir(Output.of(rootDir));
        }

        /**
         * @param webAnalyticsTag The classifying tag for analytics.
         * 
         * @return builder
         * 
         */
        public Builder webAnalyticsTag(@Nullable Output<String> webAnalyticsTag) {
            $.webAnalyticsTag = webAnalyticsTag;
            return this;
        }

        /**
         * @param webAnalyticsTag The classifying tag for analytics.
         * 
         * @return builder
         * 
         */
        public Builder webAnalyticsTag(String webAnalyticsTag) {
            return webAnalyticsTag(Output.of(webAnalyticsTag));
        }

        /**
         * @param webAnalyticsToken The auth token for analytics.
         * 
         * @return builder
         * 
         */
        public Builder webAnalyticsToken(@Nullable Output<String> webAnalyticsToken) {
            $.webAnalyticsToken = webAnalyticsToken;
            return this;
        }

        /**
         * @param webAnalyticsToken The auth token for analytics.
         * 
         * @return builder
         * 
         */
        public Builder webAnalyticsToken(String webAnalyticsToken) {
            return webAnalyticsToken(Output.of(webAnalyticsToken));
        }

        public PagesProjectBuildConfigArgs build() {
            return $;
        }
    }

}
