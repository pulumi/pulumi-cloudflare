// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.ZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZeroTrustTunnelCloudflaredConfigConfigOriginRequest {
    /**
     * @return For all L7 requests to this hostname, cloudflared will validate each request&#39;s Cf-Access-Jwt-Assertion request header.
     * 
     */
    private @Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access;
    /**
     * @return Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
     * 
     */
    private @Nullable String caPool;
    /**
     * @return Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return Disables chunked transfer encoding. Useful if you are running a WSGI server.
     * 
     */
    private @Nullable Boolean disableChunkedEncoding;
    /**
     * @return Attempt to connect to origin using HTTP2. Origin must be configured as https.
     * 
     */
    private @Nullable Boolean http2Origin;
    /**
     * @return Sets the HTTP Host header on requests sent to the local service.
     * 
     */
    private @Nullable String httpHostHeader;
    /**
     * @return Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
     * 
     */
    private @Nullable Integer keepAliveConnections;
    /**
     * @return Timeout after which an idle keepalive connection can be discarded.
     * 
     */
    private @Nullable Integer keepAliveTimeout;
    /**
     * @return Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
     * 
     */
    private @Nullable Boolean noHappyEyeballs;
    /**
     * @return Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
     * 
     */
    private @Nullable Boolean noTlsVerify;
    /**
     * @return Hostname that cloudflared should expect from your origin server certificate.
     * 
     */
    private @Nullable String originServerName;
    /**
     * @return cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: &#34;&#34; for the regular proxy and &#34;socks&#34; for a SOCKS5 proxy.
     * 
     */
    private @Nullable String proxyType;
    /**
     * @return The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
     * 
     */
    private @Nullable Integer tcpKeepAlive;
    /**
     * @return Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
     * 
     */
    private @Nullable Integer tlsTimeout;

    private ZeroTrustTunnelCloudflaredConfigConfigOriginRequest() {}
    /**
     * @return For all L7 requests to this hostname, cloudflared will validate each request&#39;s Cf-Access-Jwt-Assertion request header.
     * 
     */
    public Optional<ZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess> access() {
        return Optional.ofNullable(this.access);
    }
    /**
     * @return Path to the certificate authority (CA) for the certificate of your origin. This option should be used only if your certificate is not signed by Cloudflare.
     * 
     */
    public Optional<String> caPool() {
        return Optional.ofNullable(this.caPool);
    }
    /**
     * @return Timeout for establishing a new TCP connection to your origin server. This excludes the time taken to establish TLS, which is controlled by tlsTimeout.
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return Disables chunked transfer encoding. Useful if you are running a WSGI server.
     * 
     */
    public Optional<Boolean> disableChunkedEncoding() {
        return Optional.ofNullable(this.disableChunkedEncoding);
    }
    /**
     * @return Attempt to connect to origin using HTTP2. Origin must be configured as https.
     * 
     */
    public Optional<Boolean> http2Origin() {
        return Optional.ofNullable(this.http2Origin);
    }
    /**
     * @return Sets the HTTP Host header on requests sent to the local service.
     * 
     */
    public Optional<String> httpHostHeader() {
        return Optional.ofNullable(this.httpHostHeader);
    }
    /**
     * @return Maximum number of idle keepalive connections between Tunnel and your origin. This does not restrict the total number of concurrent connections.
     * 
     */
    public Optional<Integer> keepAliveConnections() {
        return Optional.ofNullable(this.keepAliveConnections);
    }
    /**
     * @return Timeout after which an idle keepalive connection can be discarded.
     * 
     */
    public Optional<Integer> keepAliveTimeout() {
        return Optional.ofNullable(this.keepAliveTimeout);
    }
    /**
     * @return Disable the “happy eyeballs” algorithm for IPv4/IPv6 fallback if your local network has misconfigured one of the protocols.
     * 
     */
    public Optional<Boolean> noHappyEyeballs() {
        return Optional.ofNullable(this.noHappyEyeballs);
    }
    /**
     * @return Disables TLS verification of the certificate presented by your origin. Will allow any certificate from the origin to be accepted.
     * 
     */
    public Optional<Boolean> noTlsVerify() {
        return Optional.ofNullable(this.noTlsVerify);
    }
    /**
     * @return Hostname that cloudflared should expect from your origin server certificate.
     * 
     */
    public Optional<String> originServerName() {
        return Optional.ofNullable(this.originServerName);
    }
    /**
     * @return cloudflared starts a proxy server to translate HTTP traffic into TCP when proxying, for example, SSH or RDP. This configures what type of proxy will be started. Valid options are: &#34;&#34; for the regular proxy and &#34;socks&#34; for a SOCKS5 proxy.
     * 
     */
    public Optional<String> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }
    /**
     * @return The timeout after which a TCP keepalive packet is sent on a connection between Tunnel and the origin server.
     * 
     */
    public Optional<Integer> tcpKeepAlive() {
        return Optional.ofNullable(this.tcpKeepAlive);
    }
    /**
     * @return Timeout for completing a TLS handshake to your origin server, if you have chosen to connect Tunnel to an HTTPS server.
     * 
     */
    public Optional<Integer> tlsTimeout() {
        return Optional.ofNullable(this.tlsTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZeroTrustTunnelCloudflaredConfigConfigOriginRequest defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access;
        private @Nullable String caPool;
        private @Nullable Integer connectTimeout;
        private @Nullable Boolean disableChunkedEncoding;
        private @Nullable Boolean http2Origin;
        private @Nullable String httpHostHeader;
        private @Nullable Integer keepAliveConnections;
        private @Nullable Integer keepAliveTimeout;
        private @Nullable Boolean noHappyEyeballs;
        private @Nullable Boolean noTlsVerify;
        private @Nullable String originServerName;
        private @Nullable String proxyType;
        private @Nullable Integer tcpKeepAlive;
        private @Nullable Integer tlsTimeout;
        public Builder() {}
        public Builder(ZeroTrustTunnelCloudflaredConfigConfigOriginRequest defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.caPool = defaults.caPool;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.disableChunkedEncoding = defaults.disableChunkedEncoding;
    	      this.http2Origin = defaults.http2Origin;
    	      this.httpHostHeader = defaults.httpHostHeader;
    	      this.keepAliveConnections = defaults.keepAliveConnections;
    	      this.keepAliveTimeout = defaults.keepAliveTimeout;
    	      this.noHappyEyeballs = defaults.noHappyEyeballs;
    	      this.noTlsVerify = defaults.noTlsVerify;
    	      this.originServerName = defaults.originServerName;
    	      this.proxyType = defaults.proxyType;
    	      this.tcpKeepAlive = defaults.tcpKeepAlive;
    	      this.tlsTimeout = defaults.tlsTimeout;
        }

        @CustomType.Setter
        public Builder access(@Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequestAccess access) {

            this.access = access;
            return this;
        }
        @CustomType.Setter
        public Builder caPool(@Nullable String caPool) {

            this.caPool = caPool;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {

            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder disableChunkedEncoding(@Nullable Boolean disableChunkedEncoding) {

            this.disableChunkedEncoding = disableChunkedEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder http2Origin(@Nullable Boolean http2Origin) {

            this.http2Origin = http2Origin;
            return this;
        }
        @CustomType.Setter
        public Builder httpHostHeader(@Nullable String httpHostHeader) {

            this.httpHostHeader = httpHostHeader;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveConnections(@Nullable Integer keepAliveConnections) {

            this.keepAliveConnections = keepAliveConnections;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveTimeout(@Nullable Integer keepAliveTimeout) {

            this.keepAliveTimeout = keepAliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder noHappyEyeballs(@Nullable Boolean noHappyEyeballs) {

            this.noHappyEyeballs = noHappyEyeballs;
            return this;
        }
        @CustomType.Setter
        public Builder noTlsVerify(@Nullable Boolean noTlsVerify) {

            this.noTlsVerify = noTlsVerify;
            return this;
        }
        @CustomType.Setter
        public Builder originServerName(@Nullable String originServerName) {

            this.originServerName = originServerName;
            return this;
        }
        @CustomType.Setter
        public Builder proxyType(@Nullable String proxyType) {

            this.proxyType = proxyType;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepAlive(@Nullable Integer tcpKeepAlive) {

            this.tcpKeepAlive = tcpKeepAlive;
            return this;
        }
        @CustomType.Setter
        public Builder tlsTimeout(@Nullable Integer tlsTimeout) {

            this.tlsTimeout = tlsTimeout;
            return this;
        }
        public ZeroTrustTunnelCloudflaredConfigConfigOriginRequest build() {
            final var _resultValue = new ZeroTrustTunnelCloudflaredConfigConfigOriginRequest();
            _resultValue.access = access;
            _resultValue.caPool = caPool;
            _resultValue.connectTimeout = connectTimeout;
            _resultValue.disableChunkedEncoding = disableChunkedEncoding;
            _resultValue.http2Origin = http2Origin;
            _resultValue.httpHostHeader = httpHostHeader;
            _resultValue.keepAliveConnections = keepAliveConnections;
            _resultValue.keepAliveTimeout = keepAliveTimeout;
            _resultValue.noHappyEyeballs = noHappyEyeballs;
            _resultValue.noTlsVerify = noTlsVerify;
            _resultValue.originServerName = originServerName;
            _resultValue.proxyType = proxyType;
            _resultValue.tcpKeepAlive = tcpKeepAlive;
            _resultValue.tlsTimeout = tlsTimeout;
            return _resultValue;
        }
    }
}
