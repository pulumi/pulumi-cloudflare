// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class HyperdriveConfigOriginArgs extends com.pulumi.resources.ResourceArgs {

    public static final HyperdriveConfigOriginArgs Empty = new HyperdriveConfigOriginArgs();

    /**
     * The name of your origin database.
     * 
     */
    @Import(name="database", required=true)
    private Output<String> database;

    /**
     * @return The name of your origin database.
     * 
     */
    public Output<String> database() {
        return this.database;
    }

    /**
     * The host (hostname or IP) of your origin database.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The host (hostname or IP) of your origin database.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The password of the Hyperdrive configuration.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return The password of the Hyperdrive configuration.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The port (default: 5432 for Postgres) of your origin database.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port (default: 5432 for Postgres) of your origin database.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Specifies the URL scheme used to connect to your origin database.
     * 
     */
    @Import(name="scheme", required=true)
    private Output<String> scheme;

    /**
     * @return Specifies the URL scheme used to connect to your origin database.
     * 
     */
    public Output<String> scheme() {
        return this.scheme;
    }

    /**
     * The user of your origin database.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The user of your origin database.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    private HyperdriveConfigOriginArgs() {}

    private HyperdriveConfigOriginArgs(HyperdriveConfigOriginArgs $) {
        this.database = $.database;
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.scheme = $.scheme;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperdriveConfigOriginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperdriveConfigOriginArgs $;

        public Builder() {
            $ = new HyperdriveConfigOriginArgs();
        }

        public Builder(HyperdriveConfigOriginArgs defaults) {
            $ = new HyperdriveConfigOriginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param database The name of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The name of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param host The host (hostname or IP) of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The host (hostname or IP) of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password The password of the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port The port (default: 5432 for Postgres) of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port (default: 5432 for Postgres) of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param scheme Specifies the URL scheme used to connect to your origin database.
         * 
         * @return builder
         * 
         */
        public Builder scheme(Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Specifies the URL scheme used to connect to your origin database.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        /**
         * @param user The user of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user of your origin database.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public HyperdriveConfigOriginArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "database");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "host");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "password");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "port");
            }
            if ($.scheme == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "scheme");
            }
            if ($.user == null) {
                throw new MissingRequiredPropertyException("HyperdriveConfigOriginArgs", "user");
            }
            return $;
        }
    }

}
