// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRulesetRuleActionParametersOverridesRule {
    /**
     * @return The action to override the rule with.
     * 
     */
    private String action;
    /**
     * @return Whether to enable execution of the rule.
     * 
     */
    private Boolean enabled;
    /**
     * @return The ID of the rule to override.
     * 
     */
    private String id;
    /**
     * @return The score threshold to use for the rule.
     * 
     */
    private Integer scoreThreshold;
    /**
     * @return The sensitivity level to use for the rule. This option is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    private String sensitivityLevel;

    private GetRulesetRuleActionParametersOverridesRule() {}
    /**
     * @return The action to override the rule with.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Whether to enable execution of the rule.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The ID of the rule to override.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The score threshold to use for the rule.
     * 
     */
    public Integer scoreThreshold() {
        return this.scoreThreshold;
    }
    /**
     * @return The sensitivity level to use for the rule. This option is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    public String sensitivityLevel() {
        return this.sensitivityLevel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetRuleActionParametersOverridesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private Boolean enabled;
        private String id;
        private Integer scoreThreshold;
        private String sensitivityLevel;
        public Builder() {}
        public Builder(GetRulesetRuleActionParametersOverridesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.scoreThreshold = defaults.scoreThreshold;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverridesRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverridesRule", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverridesRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder scoreThreshold(Integer scoreThreshold) {
            if (scoreThreshold == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverridesRule", "scoreThreshold");
            }
            this.scoreThreshold = scoreThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder sensitivityLevel(String sensitivityLevel) {
            if (sensitivityLevel == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersOverridesRule", "sensitivityLevel");
            }
            this.sensitivityLevel = sensitivityLevel;
            return this;
        }
        public GetRulesetRuleActionParametersOverridesRule build() {
            final var _resultValue = new GetRulesetRuleActionParametersOverridesRule();
            _resultValue.action = action;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.scoreThreshold = scoreThreshold;
            _resultValue.sensitivityLevel = sensitivityLevel;
            return _resultValue;
        }
    }
}
