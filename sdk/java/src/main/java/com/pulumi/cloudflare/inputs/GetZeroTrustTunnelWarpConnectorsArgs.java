// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZeroTrustTunnelWarpConnectorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZeroTrustTunnelWarpConnectorsArgs Empty = new GetZeroTrustTunnelWarpConnectorsArgs();

    /**
     * Cloudflare account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Cloudflare account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="excludePrefix")
    private @Nullable Output<String> excludePrefix;

    public Optional<Output<String>> excludePrefix() {
        return Optional.ofNullable(this.excludePrefix);
    }

    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    @Import(name="existedAt")
    private @Nullable Output<String> existedAt;

    /**
     * @return If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    public Optional<Output<String>> existedAt() {
        return Optional.ofNullable(this.existedAt);
    }

    @Import(name="includePrefix")
    private @Nullable Output<String> includePrefix;

    public Optional<Output<String>> includePrefix() {
        return Optional.ofNullable(this.includePrefix);
    }

    /**
     * If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
     * 
     */
    @Import(name="isDeleted")
    private @Nullable Output<Boolean> isDeleted;

    /**
     * @return If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
     * 
     */
    public Optional<Output<Boolean>> isDeleted() {
        return Optional.ofNullable(this.isDeleted);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * A user-friendly name for the tunnel.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A user-friendly name for the tunnel.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * UUID of the tunnel.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return UUID of the tunnel.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="wasActiveAt")
    private @Nullable Output<String> wasActiveAt;

    public Optional<Output<String>> wasActiveAt() {
        return Optional.ofNullable(this.wasActiveAt);
    }

    @Import(name="wasInactiveAt")
    private @Nullable Output<String> wasInactiveAt;

    public Optional<Output<String>> wasInactiveAt() {
        return Optional.ofNullable(this.wasInactiveAt);
    }

    private GetZeroTrustTunnelWarpConnectorsArgs() {}

    private GetZeroTrustTunnelWarpConnectorsArgs(GetZeroTrustTunnelWarpConnectorsArgs $) {
        this.accountId = $.accountId;
        this.excludePrefix = $.excludePrefix;
        this.existedAt = $.existedAt;
        this.includePrefix = $.includePrefix;
        this.isDeleted = $.isDeleted;
        this.maxItems = $.maxItems;
        this.name = $.name;
        this.status = $.status;
        this.uuid = $.uuid;
        this.wasActiveAt = $.wasActiveAt;
        this.wasInactiveAt = $.wasInactiveAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZeroTrustTunnelWarpConnectorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZeroTrustTunnelWarpConnectorsArgs $;

        public Builder() {
            $ = new GetZeroTrustTunnelWarpConnectorsArgs();
        }

        public Builder(GetZeroTrustTunnelWarpConnectorsArgs defaults) {
            $ = new GetZeroTrustTunnelWarpConnectorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Cloudflare account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder excludePrefix(@Nullable Output<String> excludePrefix) {
            $.excludePrefix = excludePrefix;
            return this;
        }

        public Builder excludePrefix(String excludePrefix) {
            return excludePrefix(Output.of(excludePrefix));
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(@Nullable Output<String> existedAt) {
            $.existedAt = existedAt;
            return this;
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(String existedAt) {
            return existedAt(Output.of(existedAt));
        }

        public Builder includePrefix(@Nullable Output<String> includePrefix) {
            $.includePrefix = includePrefix;
            return this;
        }

        public Builder includePrefix(String includePrefix) {
            return includePrefix(Output.of(includePrefix));
        }

        /**
         * @param isDeleted If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(@Nullable Output<Boolean> isDeleted) {
            $.isDeleted = isDeleted;
            return this;
        }

        /**
         * @param isDeleted If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(Boolean isDeleted) {
            return isDeleted(Output.of(isDeleted));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param name A user-friendly name for the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A user-friendly name for the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
         * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
         * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param uuid UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public Builder wasActiveAt(@Nullable Output<String> wasActiveAt) {
            $.wasActiveAt = wasActiveAt;
            return this;
        }

        public Builder wasActiveAt(String wasActiveAt) {
            return wasActiveAt(Output.of(wasActiveAt));
        }

        public Builder wasInactiveAt(@Nullable Output<String> wasInactiveAt) {
            $.wasInactiveAt = wasInactiveAt;
            return this;
        }

        public Builder wasInactiveAt(String wasInactiveAt) {
            return wasInactiveAt(Output.of(wasInactiveAt));
        }

        public GetZeroTrustTunnelWarpConnectorsArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorsArgs", "accountId");
            }
            return $;
        }
    }

}
