// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.PagesDomainValidationDataArgs;
import com.pulumi.cloudflare.inputs.PagesDomainVerificationDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PagesDomainState extends com.pulumi.resources.ResourceArgs {

    public static final PagesDomainState Empty = new PagesDomainState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
     * 
     */
    @Import(name="certificateAuthority")
    private @Nullable Output<String> certificateAuthority;

    /**
     * @return Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
     * 
     */
    public Optional<Output<String>> certificateAuthority() {
        return Optional.ofNullable(this.certificateAuthority);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="domainId")
    private @Nullable Output<String> domainId;

    public Optional<Output<String>> domainId() {
        return Optional.ofNullable(this.domainId);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of the project.
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return Name of the project.
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="validationData")
    private @Nullable Output<PagesDomainValidationDataArgs> validationData;

    public Optional<Output<PagesDomainValidationDataArgs>> validationData() {
        return Optional.ofNullable(this.validationData);
    }

    @Import(name="verificationData")
    private @Nullable Output<PagesDomainVerificationDataArgs> verificationData;

    public Optional<Output<PagesDomainVerificationDataArgs>> verificationData() {
        return Optional.ofNullable(this.verificationData);
    }

    @Import(name="zoneTag")
    private @Nullable Output<String> zoneTag;

    public Optional<Output<String>> zoneTag() {
        return Optional.ofNullable(this.zoneTag);
    }

    private PagesDomainState() {}

    private PagesDomainState(PagesDomainState $) {
        this.accountId = $.accountId;
        this.certificateAuthority = $.certificateAuthority;
        this.createdOn = $.createdOn;
        this.domainId = $.domainId;
        this.name = $.name;
        this.projectName = $.projectName;
        this.status = $.status;
        this.validationData = $.validationData;
        this.verificationData = $.verificationData;
        this.zoneTag = $.zoneTag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PagesDomainState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PagesDomainState $;

        public Builder() {
            $ = new PagesDomainState();
        }

        public Builder(PagesDomainState defaults) {
            $ = new PagesDomainState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param certificateAuthority Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(@Nullable Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority Available values: &#34;google&#34;, &#34;letsEncrypt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder domainId(@Nullable Output<String> domainId) {
            $.domainId = domainId;
            return this;
        }

        public Builder domainId(String domainId) {
            return domainId(Output.of(domainId));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectName Name of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName Name of the project.
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param status Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;deactivated&#34;, &#34;blocked&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder validationData(@Nullable Output<PagesDomainValidationDataArgs> validationData) {
            $.validationData = validationData;
            return this;
        }

        public Builder validationData(PagesDomainValidationDataArgs validationData) {
            return validationData(Output.of(validationData));
        }

        public Builder verificationData(@Nullable Output<PagesDomainVerificationDataArgs> verificationData) {
            $.verificationData = verificationData;
            return this;
        }

        public Builder verificationData(PagesDomainVerificationDataArgs verificationData) {
            return verificationData(Output.of(verificationData));
        }

        public Builder zoneTag(@Nullable Output<String> zoneTag) {
            $.zoneTag = zoneTag;
            return this;
        }

        public Builder zoneTag(String zoneTag) {
            return zoneTag(Output.of(zoneTag));
        }

        public PagesDomainState build() {
            return $;
        }
    }

}
