// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessApplicationsResultDestination {
    /**
     * @return The CIDR range of the destination. Single IPs will be computed as /32.
     * 
     */
    private String cidr;
    /**
     * @return The hostname of the destination. Matches a valid SNI served by an HTTPS origin.
     * 
     */
    private String hostname;
    /**
     * @return The L4 protocol of the destination. When omitted, both UDP and TCP traffic will match.
     * 
     */
    private String l4Protocol;
    /**
     * @return The port range of the destination. Can be a single port or a range of ports. When omitted, all ports will match.
     * 
     */
    private String portRange;
    private String type;
    /**
     * @return The URI of the destination. Public destinations&#39; URIs can include a domain and path with [wildcards](https://developers.cloudflare.com/cloudflare-one/policies/access/app-paths/).
     * 
     */
    private String uri;
    /**
     * @return The VNET ID to match the destination. When omitted, all VNETs will match.
     * 
     */
    private String vnetId;

    private GetZeroTrustAccessApplicationsResultDestination() {}
    /**
     * @return The CIDR range of the destination. Single IPs will be computed as /32.
     * 
     */
    public String cidr() {
        return this.cidr;
    }
    /**
     * @return The hostname of the destination. Matches a valid SNI served by an HTTPS origin.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The L4 protocol of the destination. When omitted, both UDP and TCP traffic will match.
     * 
     */
    public String l4Protocol() {
        return this.l4Protocol;
    }
    /**
     * @return The port range of the destination. Can be a single port or a range of ports. When omitted, all ports will match.
     * 
     */
    public String portRange() {
        return this.portRange;
    }
    public String type() {
        return this.type;
    }
    /**
     * @return The URI of the destination. Public destinations&#39; URIs can include a domain and path with [wildcards](https://developers.cloudflare.com/cloudflare-one/policies/access/app-paths/).
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return The VNET ID to match the destination. When omitted, all VNETs will match.
     * 
     */
    public String vnetId() {
        return this.vnetId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessApplicationsResultDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cidr;
        private String hostname;
        private String l4Protocol;
        private String portRange;
        private String type;
        private String uri;
        private String vnetId;
        public Builder() {}
        public Builder(GetZeroTrustAccessApplicationsResultDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.hostname = defaults.hostname;
    	      this.l4Protocol = defaults.l4Protocol;
    	      this.portRange = defaults.portRange;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
    	      this.vnetId = defaults.vnetId;
        }

        @CustomType.Setter
        public Builder cidr(String cidr) {
            if (cidr == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "cidr");
            }
            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder l4Protocol(String l4Protocol) {
            if (l4Protocol == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "l4Protocol");
            }
            this.l4Protocol = l4Protocol;
            return this;
        }
        @CustomType.Setter
        public Builder portRange(String portRange) {
            if (portRange == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "portRange");
            }
            this.portRange = portRange;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder vnetId(String vnetId) {
            if (vnetId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResultDestination", "vnetId");
            }
            this.vnetId = vnetId;
            return this;
        }
        public GetZeroTrustAccessApplicationsResultDestination build() {
            final var _resultValue = new GetZeroTrustAccessApplicationsResultDestination();
            _resultValue.cidr = cidr;
            _resultValue.hostname = hostname;
            _resultValue.l4Protocol = l4Protocol;
            _resultValue.portRange = portRange;
            _resultValue.type = type;
            _resultValue.uri = uri;
            _resultValue.vnetId = vnetId;
            return _resultValue;
        }
    }
}
