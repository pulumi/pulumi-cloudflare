// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsAuditSsh;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControls;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsBlockPage;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsCheckSession;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsDnsResolvers;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsEgress;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsL4override;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsNotificationSettings;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsPayloadLog;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsQuarantine;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsRedirect;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternally;
import com.pulumi.cloudflare.outputs.GetZeroTrustGatewayPolicyRuleSettingsUntrustedCert;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetZeroTrustGatewayPolicyRuleSettings {
    /**
     * @return Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    private Map<String,List<String>> addHeaders;
    /**
     * @return Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
     * 
     */
    private Boolean allowChildBypass;
    /**
     * @return Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsAuditSsh auditSsh;
    /**
     * @return Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControls bisoAdminControls;
    /**
     * @return Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsBlockPage blockPage;
    /**
     * @return Enable the custom block page. Settable only for `dns` rules with action `block`.
     * 
     */
    private Boolean blockPageEnabled;
    /**
     * @return Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
     * 
     */
    private String blockReason;
    /**
     * @return Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
     * 
     */
    private Boolean bypassParentRule;
    /**
     * @return Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsCheckSession checkSession;
    /**
     * @return Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsDnsResolvers dnsResolvers;
    /**
     * @return Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsEgress egress;
    /**
     * @return Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    private Boolean ignoreCnameCategoryMatches;
    /**
     * @return Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
     * 
     */
    private Boolean insecureDisableDnssecValidation;
    /**
     * @return Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    private Boolean ipCategories;
    /**
     * @return Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    private Boolean ipIndicatorFeeds;
    /**
     * @return Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsL4override l4override;
    /**
     * @return Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsNotificationSettings notificationSettings;
    /**
     * @return Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    private String overrideHost;
    /**
     * @return Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    private List<String> overrideIps;
    /**
     * @return Configure DLP payload logging. Settable only for `http` rules.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsPayloadLog payloadLog;
    /**
     * @return Configure settings that apply to quarantine rules. Settable only for `http` rules.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsQuarantine quarantine;
    /**
     * @return Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsRedirect redirect;
    /**
     * @return Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternally resolveDnsInternally;
    /**
     * @return Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    private Boolean resolveDnsThroughCloudflare;
    /**
     * @return Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    private GetZeroTrustGatewayPolicyRuleSettingsUntrustedCert untrustedCert;

    private GetZeroTrustGatewayPolicyRuleSettings() {}
    /**
     * @return Add custom headers to allowed requests as key-value pairs. Use header names as keys that map to arrays of header values. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    public Map<String,List<String>> addHeaders() {
        return this.addHeaders;
    }
    /**
     * @return Set to enable MSP children to bypass this rule. Only parent MSP accounts can set this. this rule. Settable for all types of rules.
     * 
     */
    public Boolean allowChildBypass() {
        return this.allowChildBypass;
    }
    /**
     * @return Define the settings for the Audit SSH action. Settable only for `l4` rules with `auditSsh` action.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsAuditSsh auditSsh() {
        return this.auditSsh;
    }
    /**
     * @return Configure browser isolation behavior. Settable only for `http` rules with the action set to `isolate`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControls bisoAdminControls() {
        return this.bisoAdminControls;
    }
    /**
     * @return Configure custom block page settings. If missing or null, use the account settings. Settable only for `http` rules with the action set to `block`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsBlockPage blockPage() {
        return this.blockPage;
    }
    /**
     * @return Enable the custom block page. Settable only for `dns` rules with action `block`.
     * 
     */
    public Boolean blockPageEnabled() {
        return this.blockPageEnabled;
    }
    /**
     * @return Explain why the rule blocks the request. The custom block page shows this text (if enabled). Settable only for `dns`, `l4`, and `http` rules when the action set to `block`.
     * 
     */
    public String blockReason() {
        return this.blockReason;
    }
    /**
     * @return Set to enable MSP accounts to bypass their parent&#39;s rules. Only MSP child accounts can set this. Settable for all types of rules.
     * 
     */
    public Boolean bypassParentRule() {
        return this.bypassParentRule;
    }
    /**
     * @return Configure session check behavior. Settable only for `l4` and `http` rules with the action set to `allow`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsCheckSession checkSession() {
        return this.checkSession;
    }
    /**
     * @return Configure custom resolvers to route queries that match the resolver policy. Unused with &#39;resolve*dns*through*cloudflare&#39; or &#39;resolve*dns*internally&#39; settings. DNS queries get routed to the address closest to their origin. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsDnsResolvers dnsResolvers() {
        return this.dnsResolvers;
    }
    /**
     * @return Configure how Gateway Proxy traffic egresses. You can enable this setting for rules with Egress actions and filters, or omit it to indicate local egress via WARP IPs. Settable only for `egress` rules.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsEgress egress() {
        return this.egress;
    }
    /**
     * @return Ignore category matches at CNAME domains in a response. When off, evaluate categories in this rule against all CNAME domain categories in the response. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Boolean ignoreCnameCategoryMatches() {
        return this.ignoreCnameCategoryMatches;
    }
    /**
     * @return Specify whether to disable DNSSEC validation (for Allow actions) [INSECURE]. Settable only for `dns` rules.
     * 
     */
    public Boolean insecureDisableDnssecValidation() {
        return this.insecureDisableDnssecValidation;
    }
    /**
     * @return Enable IPs in DNS resolver category blocks. The system blocks only domain name categories unless you enable this setting. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Boolean ipCategories() {
        return this.ipCategories;
    }
    /**
     * @return Indicates whether to include IPs in DNS resolver indicator feed blocks. Default, indicator feeds block only domain names. Settable only for `dns` and `dnsResolver` rules.
     * 
     */
    public Boolean ipIndicatorFeeds() {
        return this.ipIndicatorFeeds;
    }
    /**
     * @return Send matching traffic to the supplied destination IP address and port. Settable only for `l4` rules with the action set to `l4Override`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsL4override l4override() {
        return this.l4override;
    }
    /**
     * @return Configure a notification to display on the user&#39;s device when this rule matched. Settable for all types of rules with the action set to `block`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsNotificationSettings notificationSettings() {
        return this.notificationSettings;
    }
    /**
     * @return Defines a hostname for override, for the matching DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    public String overrideHost() {
        return this.overrideHost;
    }
    /**
     * @return Defines a an IP or set of IPs for overriding matched DNS queries. Settable only for `dns` rules with the action set to `override`.
     * 
     */
    public List<String> overrideIps() {
        return this.overrideIps;
    }
    /**
     * @return Configure DLP payload logging. Settable only for `http` rules.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsPayloadLog payloadLog() {
        return this.payloadLog;
    }
    /**
     * @return Configure settings that apply to quarantine rules. Settable only for `http` rules.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsQuarantine quarantine() {
        return this.quarantine;
    }
    /**
     * @return Apply settings to redirect rules. Settable only for `http` rules with the action set to `redirect`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsRedirect redirect() {
        return this.redirect;
    }
    /**
     * @return Configure to forward the query to the internal DNS service, passing the specified &#39;view*id&#39; as input. Not used when &#39;dns*resolvers&#39; is specified or &#39;resolve*dns*through*cloudflare&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternally resolveDnsInternally() {
        return this.resolveDnsInternally;
    }
    /**
     * @return Enable to send queries that match the policy to Cloudflare&#39;s default 1.1.1.1 DNS resolver. Cannot set when &#39;dns*resolvers&#39; specified or &#39;resolve*dns_internally&#39; is set. Only valid when a rule&#39;s action set to &#39;resolve&#39;. Settable only for `dnsResolver` rules.
     * 
     */
    public Boolean resolveDnsThroughCloudflare() {
        return this.resolveDnsThroughCloudflare;
    }
    /**
     * @return Configure behavior when an upstream certificate is invalid or an SSL error occurs. Settable only for `http` rules with the action set to `allow`.
     * 
     */
    public GetZeroTrustGatewayPolicyRuleSettingsUntrustedCert untrustedCert() {
        return this.untrustedCert;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustGatewayPolicyRuleSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Map<String,List<String>> addHeaders;
        private Boolean allowChildBypass;
        private GetZeroTrustGatewayPolicyRuleSettingsAuditSsh auditSsh;
        private GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControls bisoAdminControls;
        private GetZeroTrustGatewayPolicyRuleSettingsBlockPage blockPage;
        private Boolean blockPageEnabled;
        private String blockReason;
        private Boolean bypassParentRule;
        private GetZeroTrustGatewayPolicyRuleSettingsCheckSession checkSession;
        private GetZeroTrustGatewayPolicyRuleSettingsDnsResolvers dnsResolvers;
        private GetZeroTrustGatewayPolicyRuleSettingsEgress egress;
        private Boolean ignoreCnameCategoryMatches;
        private Boolean insecureDisableDnssecValidation;
        private Boolean ipCategories;
        private Boolean ipIndicatorFeeds;
        private GetZeroTrustGatewayPolicyRuleSettingsL4override l4override;
        private GetZeroTrustGatewayPolicyRuleSettingsNotificationSettings notificationSettings;
        private String overrideHost;
        private List<String> overrideIps;
        private GetZeroTrustGatewayPolicyRuleSettingsPayloadLog payloadLog;
        private GetZeroTrustGatewayPolicyRuleSettingsQuarantine quarantine;
        private GetZeroTrustGatewayPolicyRuleSettingsRedirect redirect;
        private GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternally resolveDnsInternally;
        private Boolean resolveDnsThroughCloudflare;
        private GetZeroTrustGatewayPolicyRuleSettingsUntrustedCert untrustedCert;
        public Builder() {}
        public Builder(GetZeroTrustGatewayPolicyRuleSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addHeaders = defaults.addHeaders;
    	      this.allowChildBypass = defaults.allowChildBypass;
    	      this.auditSsh = defaults.auditSsh;
    	      this.bisoAdminControls = defaults.bisoAdminControls;
    	      this.blockPage = defaults.blockPage;
    	      this.blockPageEnabled = defaults.blockPageEnabled;
    	      this.blockReason = defaults.blockReason;
    	      this.bypassParentRule = defaults.bypassParentRule;
    	      this.checkSession = defaults.checkSession;
    	      this.dnsResolvers = defaults.dnsResolvers;
    	      this.egress = defaults.egress;
    	      this.ignoreCnameCategoryMatches = defaults.ignoreCnameCategoryMatches;
    	      this.insecureDisableDnssecValidation = defaults.insecureDisableDnssecValidation;
    	      this.ipCategories = defaults.ipCategories;
    	      this.ipIndicatorFeeds = defaults.ipIndicatorFeeds;
    	      this.l4override = defaults.l4override;
    	      this.notificationSettings = defaults.notificationSettings;
    	      this.overrideHost = defaults.overrideHost;
    	      this.overrideIps = defaults.overrideIps;
    	      this.payloadLog = defaults.payloadLog;
    	      this.quarantine = defaults.quarantine;
    	      this.redirect = defaults.redirect;
    	      this.resolveDnsInternally = defaults.resolveDnsInternally;
    	      this.resolveDnsThroughCloudflare = defaults.resolveDnsThroughCloudflare;
    	      this.untrustedCert = defaults.untrustedCert;
        }

        @CustomType.Setter
        public Builder addHeaders(Map<String,List<String>> addHeaders) {
            if (addHeaders == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "addHeaders");
            }
            this.addHeaders = addHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder allowChildBypass(Boolean allowChildBypass) {
            if (allowChildBypass == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "allowChildBypass");
            }
            this.allowChildBypass = allowChildBypass;
            return this;
        }
        @CustomType.Setter
        public Builder auditSsh(GetZeroTrustGatewayPolicyRuleSettingsAuditSsh auditSsh) {
            if (auditSsh == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "auditSsh");
            }
            this.auditSsh = auditSsh;
            return this;
        }
        @CustomType.Setter
        public Builder bisoAdminControls(GetZeroTrustGatewayPolicyRuleSettingsBisoAdminControls bisoAdminControls) {
            if (bisoAdminControls == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "bisoAdminControls");
            }
            this.bisoAdminControls = bisoAdminControls;
            return this;
        }
        @CustomType.Setter
        public Builder blockPage(GetZeroTrustGatewayPolicyRuleSettingsBlockPage blockPage) {
            if (blockPage == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "blockPage");
            }
            this.blockPage = blockPage;
            return this;
        }
        @CustomType.Setter
        public Builder blockPageEnabled(Boolean blockPageEnabled) {
            if (blockPageEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "blockPageEnabled");
            }
            this.blockPageEnabled = blockPageEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder blockReason(String blockReason) {
            if (blockReason == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "blockReason");
            }
            this.blockReason = blockReason;
            return this;
        }
        @CustomType.Setter
        public Builder bypassParentRule(Boolean bypassParentRule) {
            if (bypassParentRule == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "bypassParentRule");
            }
            this.bypassParentRule = bypassParentRule;
            return this;
        }
        @CustomType.Setter
        public Builder checkSession(GetZeroTrustGatewayPolicyRuleSettingsCheckSession checkSession) {
            if (checkSession == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "checkSession");
            }
            this.checkSession = checkSession;
            return this;
        }
        @CustomType.Setter
        public Builder dnsResolvers(GetZeroTrustGatewayPolicyRuleSettingsDnsResolvers dnsResolvers) {
            if (dnsResolvers == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "dnsResolvers");
            }
            this.dnsResolvers = dnsResolvers;
            return this;
        }
        @CustomType.Setter
        public Builder egress(GetZeroTrustGatewayPolicyRuleSettingsEgress egress) {
            if (egress == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "egress");
            }
            this.egress = egress;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreCnameCategoryMatches(Boolean ignoreCnameCategoryMatches) {
            if (ignoreCnameCategoryMatches == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "ignoreCnameCategoryMatches");
            }
            this.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            return this;
        }
        @CustomType.Setter
        public Builder insecureDisableDnssecValidation(Boolean insecureDisableDnssecValidation) {
            if (insecureDisableDnssecValidation == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "insecureDisableDnssecValidation");
            }
            this.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            return this;
        }
        @CustomType.Setter
        public Builder ipCategories(Boolean ipCategories) {
            if (ipCategories == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "ipCategories");
            }
            this.ipCategories = ipCategories;
            return this;
        }
        @CustomType.Setter
        public Builder ipIndicatorFeeds(Boolean ipIndicatorFeeds) {
            if (ipIndicatorFeeds == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "ipIndicatorFeeds");
            }
            this.ipIndicatorFeeds = ipIndicatorFeeds;
            return this;
        }
        @CustomType.Setter
        public Builder l4override(GetZeroTrustGatewayPolicyRuleSettingsL4override l4override) {
            if (l4override == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "l4override");
            }
            this.l4override = l4override;
            return this;
        }
        @CustomType.Setter
        public Builder notificationSettings(GetZeroTrustGatewayPolicyRuleSettingsNotificationSettings notificationSettings) {
            if (notificationSettings == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "notificationSettings");
            }
            this.notificationSettings = notificationSettings;
            return this;
        }
        @CustomType.Setter
        public Builder overrideHost(String overrideHost) {
            if (overrideHost == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "overrideHost");
            }
            this.overrideHost = overrideHost;
            return this;
        }
        @CustomType.Setter
        public Builder overrideIps(List<String> overrideIps) {
            if (overrideIps == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "overrideIps");
            }
            this.overrideIps = overrideIps;
            return this;
        }
        public Builder overrideIps(String... overrideIps) {
            return overrideIps(List.of(overrideIps));
        }
        @CustomType.Setter
        public Builder payloadLog(GetZeroTrustGatewayPolicyRuleSettingsPayloadLog payloadLog) {
            if (payloadLog == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "payloadLog");
            }
            this.payloadLog = payloadLog;
            return this;
        }
        @CustomType.Setter
        public Builder quarantine(GetZeroTrustGatewayPolicyRuleSettingsQuarantine quarantine) {
            if (quarantine == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "quarantine");
            }
            this.quarantine = quarantine;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(GetZeroTrustGatewayPolicyRuleSettingsRedirect redirect) {
            if (redirect == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "redirect");
            }
            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder resolveDnsInternally(GetZeroTrustGatewayPolicyRuleSettingsResolveDnsInternally resolveDnsInternally) {
            if (resolveDnsInternally == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "resolveDnsInternally");
            }
            this.resolveDnsInternally = resolveDnsInternally;
            return this;
        }
        @CustomType.Setter
        public Builder resolveDnsThroughCloudflare(Boolean resolveDnsThroughCloudflare) {
            if (resolveDnsThroughCloudflare == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "resolveDnsThroughCloudflare");
            }
            this.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            return this;
        }
        @CustomType.Setter
        public Builder untrustedCert(GetZeroTrustGatewayPolicyRuleSettingsUntrustedCert untrustedCert) {
            if (untrustedCert == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayPolicyRuleSettings", "untrustedCert");
            }
            this.untrustedCert = untrustedCert;
            return this;
        }
        public GetZeroTrustGatewayPolicyRuleSettings build() {
            final var _resultValue = new GetZeroTrustGatewayPolicyRuleSettings();
            _resultValue.addHeaders = addHeaders;
            _resultValue.allowChildBypass = allowChildBypass;
            _resultValue.auditSsh = auditSsh;
            _resultValue.bisoAdminControls = bisoAdminControls;
            _resultValue.blockPage = blockPage;
            _resultValue.blockPageEnabled = blockPageEnabled;
            _resultValue.blockReason = blockReason;
            _resultValue.bypassParentRule = bypassParentRule;
            _resultValue.checkSession = checkSession;
            _resultValue.dnsResolvers = dnsResolvers;
            _resultValue.egress = egress;
            _resultValue.ignoreCnameCategoryMatches = ignoreCnameCategoryMatches;
            _resultValue.insecureDisableDnssecValidation = insecureDisableDnssecValidation;
            _resultValue.ipCategories = ipCategories;
            _resultValue.ipIndicatorFeeds = ipIndicatorFeeds;
            _resultValue.l4override = l4override;
            _resultValue.notificationSettings = notificationSettings;
            _resultValue.overrideHost = overrideHost;
            _resultValue.overrideIps = overrideIps;
            _resultValue.payloadLog = payloadLog;
            _resultValue.quarantine = quarantine;
            _resultValue.redirect = redirect;
            _resultValue.resolveDnsInternally = resolveDnsInternally;
            _resultValue.resolveDnsThroughCloudflare = resolveDnsThroughCloudflare;
            _resultValue.untrustedCert = untrustedCert;
            return _resultValue;
        }
    }
}
