// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAccessRuleFilterConfiguration;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAccessRuleFilter {
    private @Nullable GetAccessRuleFilterConfiguration configuration;
    /**
     * @return The direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    private @Nullable String direction;
    /**
     * @return When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    private String match;
    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    private @Nullable String mode;
    /**
     * @return The string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    private @Nullable String notes;
    /**
     * @return The field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    private @Nullable String order;

    private GetAccessRuleFilter() {}
    public Optional<GetAccessRuleFilterConfiguration> configuration() {
        return Optional.ofNullable(this.configuration);
    }
    /**
     * @return The direction used to sort returned rules.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }
    /**
     * @return When set to `all`, all the search requirements must match. When set to `any`, only one of the search requirements has to match.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    public String match() {
        return this.match;
    }
    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return The string to search for in the notes of existing IP Access rules.
     * Notes: For example, the string &#39;attack&#39; would match IP Access rules with notes &#39;Attack 26/02&#39; and &#39;Attack 27/02&#39;. The search is case insensitive.
     * 
     */
    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }
    /**
     * @return The field used to sort returned rules.
     * Available values: &#34;configuration.target&#34;, &#34;configuration.value&#34;, &#34;mode&#34;.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessRuleFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable GetAccessRuleFilterConfiguration configuration;
        private @Nullable String direction;
        private String match;
        private @Nullable String mode;
        private @Nullable String notes;
        private @Nullable String order;
        public Builder() {}
        public Builder(GetAccessRuleFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configuration = defaults.configuration;
    	      this.direction = defaults.direction;
    	      this.match = defaults.match;
    	      this.mode = defaults.mode;
    	      this.notes = defaults.notes;
    	      this.order = defaults.order;
        }

        @CustomType.Setter
        public Builder configuration(@Nullable GetAccessRuleFilterConfiguration configuration) {

            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder direction(@Nullable String direction) {

            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder match(String match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetAccessRuleFilter", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder notes(@Nullable String notes) {

            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder order(@Nullable String order) {

            this.order = order;
            return this;
        }
        public GetAccessRuleFilter build() {
            final var _resultValue = new GetAccessRuleFilter();
            _resultValue.configuration = configuration;
            _resultValue.direction = direction;
            _resultValue.match = match;
            _resultValue.mode = mode;
            _resultValue.notes = notes;
            _resultValue.order = order;
            return _resultValue;
        }
    }
}
