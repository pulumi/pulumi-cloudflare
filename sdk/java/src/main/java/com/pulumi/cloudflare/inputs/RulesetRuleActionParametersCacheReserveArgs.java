// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


public final class RulesetRuleActionParametersCacheReserveArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionParametersCacheReserveArgs Empty = new RulesetRuleActionParametersCacheReserveArgs();

    /**
     * Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
     * 
     */
    @Import(name="eligible", required=true)
    private Output<Boolean> eligible;

    /**
     * @return Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
     * 
     */
    public Output<Boolean> eligible() {
        return this.eligible;
    }

    /**
     * The minimum file size eligible for store in cache reserve.
     * 
     */
    @Import(name="minimumFileSize", required=true)
    private Output<Integer> minimumFileSize;

    /**
     * @return The minimum file size eligible for store in cache reserve.
     * 
     */
    public Output<Integer> minimumFileSize() {
        return this.minimumFileSize;
    }

    private RulesetRuleActionParametersCacheReserveArgs() {}

    private RulesetRuleActionParametersCacheReserveArgs(RulesetRuleActionParametersCacheReserveArgs $) {
        this.eligible = $.eligible;
        this.minimumFileSize = $.minimumFileSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionParametersCacheReserveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionParametersCacheReserveArgs $;

        public Builder() {
            $ = new RulesetRuleActionParametersCacheReserveArgs();
        }

        public Builder(RulesetRuleActionParametersCacheReserveArgs defaults) {
            $ = new RulesetRuleActionParametersCacheReserveArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param eligible Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
         * 
         * @return builder
         * 
         */
        public Builder eligible(Output<Boolean> eligible) {
            $.eligible = eligible;
            return this;
        }

        /**
         * @param eligible Determines whether cache reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to cache reserve.
         * 
         * @return builder
         * 
         */
        public Builder eligible(Boolean eligible) {
            return eligible(Output.of(eligible));
        }

        /**
         * @param minimumFileSize The minimum file size eligible for store in cache reserve.
         * 
         * @return builder
         * 
         */
        public Builder minimumFileSize(Output<Integer> minimumFileSize) {
            $.minimumFileSize = minimumFileSize;
            return this;
        }

        /**
         * @param minimumFileSize The minimum file size eligible for store in cache reserve.
         * 
         * @return builder
         * 
         */
        public Builder minimumFileSize(Integer minimumFileSize) {
            return minimumFileSize(Output.of(minimumFileSize));
        }

        public RulesetRuleActionParametersCacheReserveArgs build() {
            if ($.eligible == null) {
                throw new MissingRequiredPropertyException("RulesetRuleActionParametersCacheReserveArgs", "eligible");
            }
            if ($.minimumFileSize == null) {
                throw new MissingRequiredPropertyException("RulesetRuleActionParametersCacheReserveArgs", "minimumFileSize");
            }
            return $;
        }
    }

}
