// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustDlpDatasetColumnArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustDlpDatasetDatasetArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustDlpDatasetUploadArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustDlpDatasetState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustDlpDatasetState Empty = new ZeroTrustDlpDatasetState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="columns")
    private @Nullable Output<List<ZeroTrustDlpDatasetColumnArgs>> columns;

    public Optional<Output<List<ZeroTrustDlpDatasetColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    @Import(name="dataset")
    private @Nullable Output<ZeroTrustDlpDatasetDatasetArgs> dataset;

    public Optional<Output<ZeroTrustDlpDatasetDatasetArgs>> dataset() {
        return Optional.ofNullable(this.dataset);
    }

    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    /**
     * The description of the dataset
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the dataset
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Dataset encoding version
     * 
     */
    @Import(name="encodingVersion")
    private @Nullable Output<Integer> encodingVersion;

    /**
     * @return Dataset encoding version
     * 
     */
    public Optional<Output<Integer>> encodingVersion() {
        return Optional.ofNullable(this.encodingVersion);
    }

    @Import(name="maxCells")
    private @Nullable Output<Integer> maxCells;

    public Optional<Output<Integer>> maxCells() {
        return Optional.ofNullable(this.maxCells);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="numCells")
    private @Nullable Output<Integer> numCells;

    public Optional<Output<Integer>> numCells() {
        return Optional.ofNullable(this.numCells);
    }

    /**
     * Generate a secret dataset. If true, the response will include a secret to use with the EDM encoder. If false, the
     * response has no secret and the dataset is uploaded in plaintext.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<Boolean> secret;

    /**
     * @return Generate a secret dataset. If true, the response will include a secret to use with the EDM encoder. If false, the
     * response has no secret and the dataset is uploaded in plaintext.
     * 
     */
    public Optional<Output<Boolean>> secret() {
        return Optional.ofNullable(this.secret);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * When the dataset was last updated. This includes name or description changes as well as uploads.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return When the dataset was last updated. This includes name or description changes as well as uploads.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    @Import(name="uploads")
    private @Nullable Output<List<ZeroTrustDlpDatasetUploadArgs>> uploads;

    public Optional<Output<List<ZeroTrustDlpDatasetUploadArgs>>> uploads() {
        return Optional.ofNullable(this.uploads);
    }

    /**
     * The version to use when uploading the dataset.
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version to use when uploading the dataset.
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ZeroTrustDlpDatasetState() {}

    private ZeroTrustDlpDatasetState(ZeroTrustDlpDatasetState $) {
        this.accountId = $.accountId;
        this.columns = $.columns;
        this.createdAt = $.createdAt;
        this.dataset = $.dataset;
        this.datasetId = $.datasetId;
        this.description = $.description;
        this.encodingVersion = $.encodingVersion;
        this.maxCells = $.maxCells;
        this.name = $.name;
        this.numCells = $.numCells;
        this.secret = $.secret;
        this.status = $.status;
        this.updatedAt = $.updatedAt;
        this.uploads = $.uploads;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustDlpDatasetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustDlpDatasetState $;

        public Builder() {
            $ = new ZeroTrustDlpDatasetState();
        }

        public Builder(ZeroTrustDlpDatasetState defaults) {
            $ = new ZeroTrustDlpDatasetState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder columns(@Nullable Output<List<ZeroTrustDlpDatasetColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<ZeroTrustDlpDatasetColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(ZeroTrustDlpDatasetColumnArgs... columns) {
            return columns(List.of(columns));
        }

        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        public Builder dataset(@Nullable Output<ZeroTrustDlpDatasetDatasetArgs> dataset) {
            $.dataset = dataset;
            return this;
        }

        public Builder dataset(ZeroTrustDlpDatasetDatasetArgs dataset) {
            return dataset(Output.of(dataset));
        }

        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        /**
         * @param description The description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the dataset
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encodingVersion Dataset encoding version
         * 
         * @return builder
         * 
         */
        public Builder encodingVersion(@Nullable Output<Integer> encodingVersion) {
            $.encodingVersion = encodingVersion;
            return this;
        }

        /**
         * @param encodingVersion Dataset encoding version
         * 
         * @return builder
         * 
         */
        public Builder encodingVersion(Integer encodingVersion) {
            return encodingVersion(Output.of(encodingVersion));
        }

        public Builder maxCells(@Nullable Output<Integer> maxCells) {
            $.maxCells = maxCells;
            return this;
        }

        public Builder maxCells(Integer maxCells) {
            return maxCells(Output.of(maxCells));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder numCells(@Nullable Output<Integer> numCells) {
            $.numCells = numCells;
            return this;
        }

        public Builder numCells(Integer numCells) {
            return numCells(Output.of(numCells));
        }

        /**
         * @param secret Generate a secret dataset. If true, the response will include a secret to use with the EDM encoder. If false, the
         * response has no secret and the dataset is uploaded in plaintext.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<Boolean> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Generate a secret dataset. If true, the response will include a secret to use with the EDM encoder. If false, the
         * response has no secret and the dataset is uploaded in plaintext.
         * 
         * @return builder
         * 
         */
        public Builder secret(Boolean secret) {
            return secret(Output.of(secret));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatedAt When the dataset was last updated. This includes name or description changes as well as uploads.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt When the dataset was last updated. This includes name or description changes as well as uploads.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public Builder uploads(@Nullable Output<List<ZeroTrustDlpDatasetUploadArgs>> uploads) {
            $.uploads = uploads;
            return this;
        }

        public Builder uploads(List<ZeroTrustDlpDatasetUploadArgs> uploads) {
            return uploads(Output.of(uploads));
        }

        public Builder uploads(ZeroTrustDlpDatasetUploadArgs... uploads) {
            return uploads(List.of(uploads));
        }

        /**
         * @param version The version to use when uploading the dataset.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version to use when uploading the dataset.
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ZeroTrustDlpDatasetState build() {
            return $;
        }
    }

}
