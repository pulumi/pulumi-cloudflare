// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicTransitConnectorDeviceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitConnectorState extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitConnectorState Empty = new MagicTransitConnectorState();

    /**
     * Account identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="activated")
    private @Nullable Output<Boolean> activated;

    public Optional<Output<Boolean>> activated() {
        return Optional.ofNullable(this.activated);
    }

    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    @Import(name="device")
    private @Nullable Output<MagicTransitConnectorDeviceArgs> device;

    public Optional<Output<MagicTransitConnectorDeviceArgs>> device() {
        return Optional.ofNullable(this.device);
    }

    @Import(name="interruptWindowDurationHours")
    private @Nullable Output<Double> interruptWindowDurationHours;

    public Optional<Output<Double>> interruptWindowDurationHours() {
        return Optional.ofNullable(this.interruptWindowDurationHours);
    }

    @Import(name="interruptWindowHourOfDay")
    private @Nullable Output<Double> interruptWindowHourOfDay;

    public Optional<Output<Double>> interruptWindowHourOfDay() {
        return Optional.ofNullable(this.interruptWindowHourOfDay);
    }

    @Import(name="lastHeartbeat")
    private @Nullable Output<String> lastHeartbeat;

    public Optional<Output<String>> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }

    @Import(name="lastSeenVersion")
    private @Nullable Output<String> lastSeenVersion;

    public Optional<Output<String>> lastSeenVersion() {
        return Optional.ofNullable(this.lastSeenVersion);
    }

    @Import(name="lastUpdated")
    private @Nullable Output<String> lastUpdated;

    public Optional<Output<String>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    @Import(name="notes")
    private @Nullable Output<String> notes;

    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private MagicTransitConnectorState() {}

    private MagicTransitConnectorState(MagicTransitConnectorState $) {
        this.accountId = $.accountId;
        this.activated = $.activated;
        this.connectorId = $.connectorId;
        this.device = $.device;
        this.interruptWindowDurationHours = $.interruptWindowDurationHours;
        this.interruptWindowHourOfDay = $.interruptWindowHourOfDay;
        this.lastHeartbeat = $.lastHeartbeat;
        this.lastSeenVersion = $.lastSeenVersion;
        this.lastUpdated = $.lastUpdated;
        this.notes = $.notes;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitConnectorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitConnectorState $;

        public Builder() {
            $ = new MagicTransitConnectorState();
        }

        public Builder(MagicTransitConnectorState defaults) {
            $ = new MagicTransitConnectorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder activated(@Nullable Output<Boolean> activated) {
            $.activated = activated;
            return this;
        }

        public Builder activated(Boolean activated) {
            return activated(Output.of(activated));
        }

        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        public Builder device(@Nullable Output<MagicTransitConnectorDeviceArgs> device) {
            $.device = device;
            return this;
        }

        public Builder device(MagicTransitConnectorDeviceArgs device) {
            return device(Output.of(device));
        }

        public Builder interruptWindowDurationHours(@Nullable Output<Double> interruptWindowDurationHours) {
            $.interruptWindowDurationHours = interruptWindowDurationHours;
            return this;
        }

        public Builder interruptWindowDurationHours(Double interruptWindowDurationHours) {
            return interruptWindowDurationHours(Output.of(interruptWindowDurationHours));
        }

        public Builder interruptWindowHourOfDay(@Nullable Output<Double> interruptWindowHourOfDay) {
            $.interruptWindowHourOfDay = interruptWindowHourOfDay;
            return this;
        }

        public Builder interruptWindowHourOfDay(Double interruptWindowHourOfDay) {
            return interruptWindowHourOfDay(Output.of(interruptWindowHourOfDay));
        }

        public Builder lastHeartbeat(@Nullable Output<String> lastHeartbeat) {
            $.lastHeartbeat = lastHeartbeat;
            return this;
        }

        public Builder lastHeartbeat(String lastHeartbeat) {
            return lastHeartbeat(Output.of(lastHeartbeat));
        }

        public Builder lastSeenVersion(@Nullable Output<String> lastSeenVersion) {
            $.lastSeenVersion = lastSeenVersion;
            return this;
        }

        public Builder lastSeenVersion(String lastSeenVersion) {
            return lastSeenVersion(Output.of(lastSeenVersion));
        }

        public Builder lastUpdated(@Nullable Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public MagicTransitConnectorState build() {
            return $;
        }
    }

}
