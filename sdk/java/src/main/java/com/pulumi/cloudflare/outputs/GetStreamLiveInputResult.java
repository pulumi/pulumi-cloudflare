// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetStreamLiveInputRecording;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputRtmps;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputRtmpsPlayback;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputSrt;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputSrtPlayback;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputWebRtc;
import com.pulumi.cloudflare.outputs.GetStreamLiveInputWebRtcPlayback;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamLiveInputResult {
    /**
     * @return Identifier.
     * 
     */
    private String accountId;
    /**
     * @return The date and time the live input was created.
     * 
     */
    private String created;
    /**
     * @return Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    private Double deleteRecordingAfterDays;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A unique identifier for a live input.
     * 
     */
    private String liveInputIdentifier;
    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    private String meta;
    /**
     * @return The date and time the live input was last modified.
     * 
     */
    private String modified;
    /**
     * @return Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    private GetStreamLiveInputRecording recording;
    /**
     * @return Details for streaming to an live input using RTMPS.
     * 
     */
    private GetStreamLiveInputRtmps rtmps;
    /**
     * @return Details for playback from an live input using RTMPS.
     * 
     */
    private GetStreamLiveInputRtmpsPlayback rtmpsPlayback;
    /**
     * @return Details for streaming to a live input using SRT.
     * 
     */
    private GetStreamLiveInputSrt srt;
    /**
     * @return Details for playback from an live input using SRT.
     * 
     */
    private GetStreamLiveInputSrtPlayback srtPlayback;
    /**
     * @return The connection status of a live input.
     * Available values: &#34;connected&#34;, &#34;reconnected&#34;, &#34;reconnecting&#34;, &#34;client*disconnect&#34;, &#34;ttl*exceeded&#34;, &#34;failed*to*connect&#34;, &#34;failed*to*reconnect&#34;, &#34;new*configuration*accepted&#34;.
     * 
     */
    private String status;
    /**
     * @return A unique identifier for a live input.
     * 
     */
    private String uid;
    /**
     * @return Details for streaming to a live input using WebRTC.
     * 
     */
    private GetStreamLiveInputWebRtc webRtc;
    /**
     * @return Details for playback from a live input using WebRTC.
     * 
     */
    private GetStreamLiveInputWebRtcPlayback webRtcPlayback;

    private GetStreamLiveInputResult() {}
    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The date and time the live input was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    public Double deleteRecordingAfterDays() {
        return this.deleteRecordingAfterDays;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A unique identifier for a live input.
     * 
     */
    public String liveInputIdentifier() {
        return this.liveInputIdentifier;
    }
    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    public String meta() {
        return this.meta;
    }
    /**
     * @return The date and time the live input was last modified.
     * 
     */
    public String modified() {
        return this.modified;
    }
    /**
     * @return Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    public GetStreamLiveInputRecording recording() {
        return this.recording;
    }
    /**
     * @return Details for streaming to an live input using RTMPS.
     * 
     */
    public GetStreamLiveInputRtmps rtmps() {
        return this.rtmps;
    }
    /**
     * @return Details for playback from an live input using RTMPS.
     * 
     */
    public GetStreamLiveInputRtmpsPlayback rtmpsPlayback() {
        return this.rtmpsPlayback;
    }
    /**
     * @return Details for streaming to a live input using SRT.
     * 
     */
    public GetStreamLiveInputSrt srt() {
        return this.srt;
    }
    /**
     * @return Details for playback from an live input using SRT.
     * 
     */
    public GetStreamLiveInputSrtPlayback srtPlayback() {
        return this.srtPlayback;
    }
    /**
     * @return The connection status of a live input.
     * Available values: &#34;connected&#34;, &#34;reconnected&#34;, &#34;reconnecting&#34;, &#34;client*disconnect&#34;, &#34;ttl*exceeded&#34;, &#34;failed*to*connect&#34;, &#34;failed*to*reconnect&#34;, &#34;new*configuration*accepted&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A unique identifier for a live input.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Details for streaming to a live input using WebRTC.
     * 
     */
    public GetStreamLiveInputWebRtc webRtc() {
        return this.webRtc;
    }
    /**
     * @return Details for playback from a live input using WebRTC.
     * 
     */
    public GetStreamLiveInputWebRtcPlayback webRtcPlayback() {
        return this.webRtcPlayback;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamLiveInputResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String created;
        private Double deleteRecordingAfterDays;
        private String id;
        private String liveInputIdentifier;
        private String meta;
        private String modified;
        private GetStreamLiveInputRecording recording;
        private GetStreamLiveInputRtmps rtmps;
        private GetStreamLiveInputRtmpsPlayback rtmpsPlayback;
        private GetStreamLiveInputSrt srt;
        private GetStreamLiveInputSrtPlayback srtPlayback;
        private String status;
        private String uid;
        private GetStreamLiveInputWebRtc webRtc;
        private GetStreamLiveInputWebRtcPlayback webRtcPlayback;
        public Builder() {}
        public Builder(GetStreamLiveInputResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.created = defaults.created;
    	      this.deleteRecordingAfterDays = defaults.deleteRecordingAfterDays;
    	      this.id = defaults.id;
    	      this.liveInputIdentifier = defaults.liveInputIdentifier;
    	      this.meta = defaults.meta;
    	      this.modified = defaults.modified;
    	      this.recording = defaults.recording;
    	      this.rtmps = defaults.rtmps;
    	      this.rtmpsPlayback = defaults.rtmpsPlayback;
    	      this.srt = defaults.srt;
    	      this.srtPlayback = defaults.srtPlayback;
    	      this.status = defaults.status;
    	      this.uid = defaults.uid;
    	      this.webRtc = defaults.webRtc;
    	      this.webRtcPlayback = defaults.webRtcPlayback;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder deleteRecordingAfterDays(Double deleteRecordingAfterDays) {
            if (deleteRecordingAfterDays == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "deleteRecordingAfterDays");
            }
            this.deleteRecordingAfterDays = deleteRecordingAfterDays;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder liveInputIdentifier(String liveInputIdentifier) {
            if (liveInputIdentifier == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "liveInputIdentifier");
            }
            this.liveInputIdentifier = liveInputIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder meta(String meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder modified(String modified) {
            if (modified == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "modified");
            }
            this.modified = modified;
            return this;
        }
        @CustomType.Setter
        public Builder recording(GetStreamLiveInputRecording recording) {
            if (recording == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "recording");
            }
            this.recording = recording;
            return this;
        }
        @CustomType.Setter
        public Builder rtmps(GetStreamLiveInputRtmps rtmps) {
            if (rtmps == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "rtmps");
            }
            this.rtmps = rtmps;
            return this;
        }
        @CustomType.Setter
        public Builder rtmpsPlayback(GetStreamLiveInputRtmpsPlayback rtmpsPlayback) {
            if (rtmpsPlayback == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "rtmpsPlayback");
            }
            this.rtmpsPlayback = rtmpsPlayback;
            return this;
        }
        @CustomType.Setter
        public Builder srt(GetStreamLiveInputSrt srt) {
            if (srt == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "srt");
            }
            this.srt = srt;
            return this;
        }
        @CustomType.Setter
        public Builder srtPlayback(GetStreamLiveInputSrtPlayback srtPlayback) {
            if (srtPlayback == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "srtPlayback");
            }
            this.srtPlayback = srtPlayback;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder webRtc(GetStreamLiveInputWebRtc webRtc) {
            if (webRtc == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "webRtc");
            }
            this.webRtc = webRtc;
            return this;
        }
        @CustomType.Setter
        public Builder webRtcPlayback(GetStreamLiveInputWebRtcPlayback webRtcPlayback) {
            if (webRtcPlayback == null) {
              throw new MissingRequiredPropertyException("GetStreamLiveInputResult", "webRtcPlayback");
            }
            this.webRtcPlayback = webRtcPlayback;
            return this;
        }
        public GetStreamLiveInputResult build() {
            final var _resultValue = new GetStreamLiveInputResult();
            _resultValue.accountId = accountId;
            _resultValue.created = created;
            _resultValue.deleteRecordingAfterDays = deleteRecordingAfterDays;
            _resultValue.id = id;
            _resultValue.liveInputIdentifier = liveInputIdentifier;
            _resultValue.meta = meta;
            _resultValue.modified = modified;
            _resultValue.recording = recording;
            _resultValue.rtmps = rtmps;
            _resultValue.rtmpsPlayback = rtmpsPlayback;
            _resultValue.srt = srt;
            _resultValue.srtPlayback = srtPlayback;
            _resultValue.status = status;
            _resultValue.uid = uid;
            _resultValue.webRtc = webRtc;
            _resultValue.webRtcPlayback = webRtcPlayback;
            return _resultValue;
        }
    }
}
