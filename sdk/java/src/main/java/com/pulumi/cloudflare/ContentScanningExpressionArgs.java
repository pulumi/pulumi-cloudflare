// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ContentScanningExpressionBodyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContentScanningExpressionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentScanningExpressionArgs Empty = new ContentScanningExpressionArgs();

    @Import(name="bodies", required=true)
    private Output<List<ContentScanningExpressionBodyArgs>> bodies;

    public Output<List<ContentScanningExpressionBodyArgs>> bodies() {
        return this.bodies;
    }

    /**
     * Identifier
     * 
     */
    @Import(name="expressionId")
    private @Nullable Output<String> expressionId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> expressionId() {
        return Optional.ofNullable(this.expressionId);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ContentScanningExpressionArgs() {}

    private ContentScanningExpressionArgs(ContentScanningExpressionArgs $) {
        this.bodies = $.bodies;
        this.expressionId = $.expressionId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentScanningExpressionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentScanningExpressionArgs $;

        public Builder() {
            $ = new ContentScanningExpressionArgs();
        }

        public Builder(ContentScanningExpressionArgs defaults) {
            $ = new ContentScanningExpressionArgs(Objects.requireNonNull(defaults));
        }

        public Builder bodies(Output<List<ContentScanningExpressionBodyArgs>> bodies) {
            $.bodies = bodies;
            return this;
        }

        public Builder bodies(List<ContentScanningExpressionBodyArgs> bodies) {
            return bodies(Output.of(bodies));
        }

        public Builder bodies(ContentScanningExpressionBodyArgs... bodies) {
            return bodies(List.of(bodies));
        }

        /**
         * @param expressionId Identifier
         * 
         * @return builder
         * 
         */
        public Builder expressionId(@Nullable Output<String> expressionId) {
            $.expressionId = expressionId;
            return this;
        }

        /**
         * @param expressionId Identifier
         * 
         * @return builder
         * 
         */
        public Builder expressionId(String expressionId) {
            return expressionId(Output.of(expressionId));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ContentScanningExpressionArgs build() {
            if ($.bodies == null) {
                throw new MissingRequiredPropertyException("ContentScanningExpressionArgs", "bodies");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ContentScanningExpressionArgs", "zoneId");
            }
            return $;
        }
    }

}
