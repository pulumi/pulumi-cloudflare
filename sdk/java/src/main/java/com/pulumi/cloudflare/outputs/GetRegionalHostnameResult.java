// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegionalHostnameResult {
    /**
     * @return When the regional hostname was created
     * 
     */
    private String createdOn;
    /**
     * @return DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    private String hostname;
    /**
     * @return DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    private String id;
    /**
     * @return Identifying key for the region
     * 
     */
    private String regionKey;
    /**
     * @return Configure which routing method to use for the regional hostname
     * 
     */
    private String routing;
    /**
     * @return Identifier.
     * 
     */
    private String zoneId;

    private GetRegionalHostnameResult() {}
    /**
     * @return When the regional hostname was created
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return DNS hostname to be regionalized, must be a subdomain of the zone. Wildcards are supported for one level, e.g `*.example.com`
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifying key for the region
     * 
     */
    public String regionKey() {
        return this.regionKey;
    }
    /**
     * @return Configure which routing method to use for the regional hostname
     * 
     */
    public String routing() {
        return this.routing;
    }
    /**
     * @return Identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionalHostnameResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdOn;
        private String hostname;
        private String id;
        private String regionKey;
        private String routing;
        private String zoneId;
        public Builder() {}
        public Builder(GetRegionalHostnameResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdOn = defaults.createdOn;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.regionKey = defaults.regionKey;
    	      this.routing = defaults.routing;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder regionKey(String regionKey) {
            if (regionKey == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "regionKey");
            }
            this.regionKey = regionKey;
            return this;
        }
        @CustomType.Setter
        public Builder routing(String routing) {
            if (routing == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "routing");
            }
            this.routing = routing;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetRegionalHostnameResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetRegionalHostnameResult build() {
            final var _resultValue = new GetRegionalHostnameResult();
            _resultValue.createdOn = createdOn;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.regionKey = regionKey;
            _resultValue.routing = routing;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
