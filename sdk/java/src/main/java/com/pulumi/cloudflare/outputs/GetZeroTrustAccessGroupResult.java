// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustAccessGroupExclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessGroupFilter;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessGroupInclude;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessGroupIsDefault;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessGroupRequire;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetZeroTrustAccessGroupResult {
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    private @Nullable String accountId;
    /**
     * @return Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     * 
     */
    private List<GetZeroTrustAccessGroupExclude> excludes;
    private @Nullable GetZeroTrustAccessGroupFilter filter;
    /**
     * @return UUID.
     * 
     */
    private @Nullable String groupId;
    /**
     * @return UUID.
     * 
     */
    private String id;
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    private List<GetZeroTrustAccessGroupInclude> includes;
    /**
     * @return Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    private List<GetZeroTrustAccessGroupIsDefault> isDefaults;
    /**
     * @return The name of the Access group.
     * 
     */
    private String name;
    /**
     * @return Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    private List<GetZeroTrustAccessGroupRequire> requires;
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    private @Nullable String zoneId;

    private GetZeroTrustAccessGroupResult() {}
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public List<GetZeroTrustAccessGroupExclude> excludes() {
        return this.excludes;
    }
    public Optional<GetZeroTrustAccessGroupFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return UUID.
     * 
     */
    public Optional<String> groupId() {
        return Optional.ofNullable(this.groupId);
    }
    /**
     * @return UUID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public List<GetZeroTrustAccessGroupInclude> includes() {
        return this.includes;
    }
    /**
     * @return Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    public List<GetZeroTrustAccessGroupIsDefault> isDefaults() {
        return this.isDefaults;
    }
    /**
     * @return The name of the Access group.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    public List<GetZeroTrustAccessGroupRequire> requires() {
        return this.requires;
    }
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private List<GetZeroTrustAccessGroupExclude> excludes;
        private @Nullable GetZeroTrustAccessGroupFilter filter;
        private @Nullable String groupId;
        private String id;
        private List<GetZeroTrustAccessGroupInclude> includes;
        private List<GetZeroTrustAccessGroupIsDefault> isDefaults;
        private String name;
        private List<GetZeroTrustAccessGroupRequire> requires;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(GetZeroTrustAccessGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.excludes = defaults.excludes;
    	      this.filter = defaults.filter;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.includes = defaults.includes;
    	      this.isDefaults = defaults.isDefaults;
    	      this.name = defaults.name;
    	      this.requires = defaults.requires;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {

            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(List<GetZeroTrustAccessGroupExclude> excludes) {
            if (excludes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "excludes");
            }
            this.excludes = excludes;
            return this;
        }
        public Builder excludes(GetZeroTrustAccessGroupExclude... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetZeroTrustAccessGroupFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(@Nullable String groupId) {

            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includes(List<GetZeroTrustAccessGroupInclude> includes) {
            if (includes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "includes");
            }
            this.includes = includes;
            return this;
        }
        public Builder includes(GetZeroTrustAccessGroupInclude... includes) {
            return includes(List.of(includes));
        }
        @CustomType.Setter
        public Builder isDefaults(List<GetZeroTrustAccessGroupIsDefault> isDefaults) {
            if (isDefaults == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "isDefaults");
            }
            this.isDefaults = isDefaults;
            return this;
        }
        public Builder isDefaults(GetZeroTrustAccessGroupIsDefault... isDefaults) {
            return isDefaults(List.of(isDefaults));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder requires(List<GetZeroTrustAccessGroupRequire> requires) {
            if (requires == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessGroupResult", "requires");
            }
            this.requires = requires;
            return this;
        }
        public Builder requires(GetZeroTrustAccessGroupRequire... requires) {
            return requires(List.of(requires));
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public GetZeroTrustAccessGroupResult build() {
            final var _resultValue = new GetZeroTrustAccessGroupResult();
            _resultValue.accountId = accountId;
            _resultValue.excludes = excludes;
            _resultValue.filter = filter;
            _resultValue.groupId = groupId;
            _resultValue.id = id;
            _resultValue.includes = includes;
            _resultValue.isDefaults = isDefaults;
            _resultValue.name = name;
            _resultValue.requires = requires;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
