// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustDevicePostureRulesResultInputLocations;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustDevicePostureRulesResultInput {
    /**
     * @return The Number of active threats.
     * 
     */
    private Double activeThreats;
    /**
     * @return UUID of Cloudflare managed certificate.
     * 
     */
    private String certificateId;
    /**
     * @return List of volume names to be checked for encryption.
     * 
     */
    private List<String> checkDisks;
    /**
     * @return Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    private Boolean checkPrivateKey;
    /**
     * @return Common Name that is protected by the certificate
     * 
     */
    private String cn;
    /**
     * @return Compliance Status
     * 
     */
    private String complianceStatus;
    /**
     * @return Posture Integration ID.
     * 
     */
    private String connectionId;
    /**
     * @return Count Operator
     * 
     */
    private String countOperator;
    /**
     * @return Domain
     * 
     */
    private String domain;
    /**
     * @return For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    private String eidLastSeen;
    /**
     * @return Enabled
     * 
     */
    private Boolean enabled;
    /**
     * @return Whether or not file exists
     * 
     */
    private Boolean exists;
    /**
     * @return List of values indicating purposes for which the certificate public key can be used
     * 
     */
    private List<String> extendedKeyUsages;
    /**
     * @return List ID.
     * 
     */
    private String id;
    /**
     * @return Whether device is infected.
     * 
     */
    private Boolean infected;
    /**
     * @return Whether device is active.
     * 
     */
    private Boolean isActive;
    /**
     * @return The Number of Issues.
     * 
     */
    private String issueCount;
    /**
     * @return For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    private String lastSeen;
    private GetZeroTrustDevicePostureRulesResultInputLocations locations;
    /**
     * @return Network status of device.
     * 
     */
    private String networkStatus;
    /**
     * @return Operating system
     * 
     */
    private String operatingSystem;
    /**
     * @return Agent operational state.
     * 
     */
    private String operationalState;
    /**
     * @return operator
     * 
     */
    private String operator;
    /**
     * @return Os Version
     * 
     */
    private String os;
    /**
     * @return Operating System Distribution Name (linux only)
     * 
     */
    private String osDistroName;
    /**
     * @return Version of OS Distribution (linux only)
     * 
     */
    private String osDistroRevision;
    /**
     * @return Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only)
     * 
     */
    private String osVersionExtra;
    /**
     * @return overall
     * 
     */
    private String overall;
    /**
     * @return File path.
     * 
     */
    private String path;
    /**
     * @return Whether to check all disks for encryption.
     * 
     */
    private Boolean requireAll;
    /**
     * @return For more details on risk level, refer to the Tanium documentation.
     * 
     */
    private String riskLevel;
    /**
     * @return A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    private Double score;
    /**
     * @return Score Operator
     * 
     */
    private String scoreOperator;
    /**
     * @return SensorConfig
     * 
     */
    private String sensorConfig;
    /**
     * @return SHA-256.
     * 
     */
    private String sha256;
    /**
     * @return For more details on state, please refer to the Crowdstrike documentation.
     * 
     */
    private String state;
    /**
     * @return Signing certificate thumbprint.
     * 
     */
    private String thumbprint;
    /**
     * @return For more details on total score, refer to the Tanium documentation.
     * 
     */
    private Double totalScore;
    /**
     * @return Version of OS
     * 
     */
    private String version;
    /**
     * @return Version Operator
     * 
     */
    private String versionOperator;

    private GetZeroTrustDevicePostureRulesResultInput() {}
    /**
     * @return The Number of active threats.
     * 
     */
    public Double activeThreats() {
        return this.activeThreats;
    }
    /**
     * @return UUID of Cloudflare managed certificate.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return List of volume names to be checked for encryption.
     * 
     */
    public List<String> checkDisks() {
        return this.checkDisks;
    }
    /**
     * @return Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    public Boolean checkPrivateKey() {
        return this.checkPrivateKey;
    }
    /**
     * @return Common Name that is protected by the certificate
     * 
     */
    public String cn() {
        return this.cn;
    }
    /**
     * @return Compliance Status
     * 
     */
    public String complianceStatus() {
        return this.complianceStatus;
    }
    /**
     * @return Posture Integration ID.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    /**
     * @return Count Operator
     * 
     */
    public String countOperator() {
        return this.countOperator;
    }
    /**
     * @return Domain
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    public String eidLastSeen() {
        return this.eidLastSeen;
    }
    /**
     * @return Enabled
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Whether or not file exists
     * 
     */
    public Boolean exists() {
        return this.exists;
    }
    /**
     * @return List of values indicating purposes for which the certificate public key can be used
     * 
     */
    public List<String> extendedKeyUsages() {
        return this.extendedKeyUsages;
    }
    /**
     * @return List ID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether device is infected.
     * 
     */
    public Boolean infected() {
        return this.infected;
    }
    /**
     * @return Whether device is active.
     * 
     */
    public Boolean isActive() {
        return this.isActive;
    }
    /**
     * @return The Number of Issues.
     * 
     */
    public String issueCount() {
        return this.issueCount;
    }
    /**
     * @return For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    public String lastSeen() {
        return this.lastSeen;
    }
    public GetZeroTrustDevicePostureRulesResultInputLocations locations() {
        return this.locations;
    }
    /**
     * @return Network status of device.
     * 
     */
    public String networkStatus() {
        return this.networkStatus;
    }
    /**
     * @return Operating system
     * 
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }
    /**
     * @return Agent operational state.
     * 
     */
    public String operationalState() {
        return this.operationalState;
    }
    /**
     * @return operator
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Os Version
     * 
     */
    public String os() {
        return this.os;
    }
    /**
     * @return Operating System Distribution Name (linux only)
     * 
     */
    public String osDistroName() {
        return this.osDistroName;
    }
    /**
     * @return Version of OS Distribution (linux only)
     * 
     */
    public String osDistroRevision() {
        return this.osDistroRevision;
    }
    /**
     * @return Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only)
     * 
     */
    public String osVersionExtra() {
        return this.osVersionExtra;
    }
    /**
     * @return overall
     * 
     */
    public String overall() {
        return this.overall;
    }
    /**
     * @return File path.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Whether to check all disks for encryption.
     * 
     */
    public Boolean requireAll() {
        return this.requireAll;
    }
    /**
     * @return For more details on risk level, refer to the Tanium documentation.
     * 
     */
    public String riskLevel() {
        return this.riskLevel;
    }
    /**
     * @return A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    public Double score() {
        return this.score;
    }
    /**
     * @return Score Operator
     * 
     */
    public String scoreOperator() {
        return this.scoreOperator;
    }
    /**
     * @return SensorConfig
     * 
     */
    public String sensorConfig() {
        return this.sensorConfig;
    }
    /**
     * @return SHA-256.
     * 
     */
    public String sha256() {
        return this.sha256;
    }
    /**
     * @return For more details on state, please refer to the Crowdstrike documentation.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Signing certificate thumbprint.
     * 
     */
    public String thumbprint() {
        return this.thumbprint;
    }
    /**
     * @return For more details on total score, refer to the Tanium documentation.
     * 
     */
    public Double totalScore() {
        return this.totalScore;
    }
    /**
     * @return Version of OS
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return Version Operator
     * 
     */
    public String versionOperator() {
        return this.versionOperator;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustDevicePostureRulesResultInput defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double activeThreats;
        private String certificateId;
        private List<String> checkDisks;
        private Boolean checkPrivateKey;
        private String cn;
        private String complianceStatus;
        private String connectionId;
        private String countOperator;
        private String domain;
        private String eidLastSeen;
        private Boolean enabled;
        private Boolean exists;
        private List<String> extendedKeyUsages;
        private String id;
        private Boolean infected;
        private Boolean isActive;
        private String issueCount;
        private String lastSeen;
        private GetZeroTrustDevicePostureRulesResultInputLocations locations;
        private String networkStatus;
        private String operatingSystem;
        private String operationalState;
        private String operator;
        private String os;
        private String osDistroName;
        private String osDistroRevision;
        private String osVersionExtra;
        private String overall;
        private String path;
        private Boolean requireAll;
        private String riskLevel;
        private Double score;
        private String scoreOperator;
        private String sensorConfig;
        private String sha256;
        private String state;
        private String thumbprint;
        private Double totalScore;
        private String version;
        private String versionOperator;
        public Builder() {}
        public Builder(GetZeroTrustDevicePostureRulesResultInput defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeThreats = defaults.activeThreats;
    	      this.certificateId = defaults.certificateId;
    	      this.checkDisks = defaults.checkDisks;
    	      this.checkPrivateKey = defaults.checkPrivateKey;
    	      this.cn = defaults.cn;
    	      this.complianceStatus = defaults.complianceStatus;
    	      this.connectionId = defaults.connectionId;
    	      this.countOperator = defaults.countOperator;
    	      this.domain = defaults.domain;
    	      this.eidLastSeen = defaults.eidLastSeen;
    	      this.enabled = defaults.enabled;
    	      this.exists = defaults.exists;
    	      this.extendedKeyUsages = defaults.extendedKeyUsages;
    	      this.id = defaults.id;
    	      this.infected = defaults.infected;
    	      this.isActive = defaults.isActive;
    	      this.issueCount = defaults.issueCount;
    	      this.lastSeen = defaults.lastSeen;
    	      this.locations = defaults.locations;
    	      this.networkStatus = defaults.networkStatus;
    	      this.operatingSystem = defaults.operatingSystem;
    	      this.operationalState = defaults.operationalState;
    	      this.operator = defaults.operator;
    	      this.os = defaults.os;
    	      this.osDistroName = defaults.osDistroName;
    	      this.osDistroRevision = defaults.osDistroRevision;
    	      this.osVersionExtra = defaults.osVersionExtra;
    	      this.overall = defaults.overall;
    	      this.path = defaults.path;
    	      this.requireAll = defaults.requireAll;
    	      this.riskLevel = defaults.riskLevel;
    	      this.score = defaults.score;
    	      this.scoreOperator = defaults.scoreOperator;
    	      this.sensorConfig = defaults.sensorConfig;
    	      this.sha256 = defaults.sha256;
    	      this.state = defaults.state;
    	      this.thumbprint = defaults.thumbprint;
    	      this.totalScore = defaults.totalScore;
    	      this.version = defaults.version;
    	      this.versionOperator = defaults.versionOperator;
        }

        @CustomType.Setter
        public Builder activeThreats(Double activeThreats) {
            if (activeThreats == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "activeThreats");
            }
            this.activeThreats = activeThreats;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder checkDisks(List<String> checkDisks) {
            if (checkDisks == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "checkDisks");
            }
            this.checkDisks = checkDisks;
            return this;
        }
        public Builder checkDisks(String... checkDisks) {
            return checkDisks(List.of(checkDisks));
        }
        @CustomType.Setter
        public Builder checkPrivateKey(Boolean checkPrivateKey) {
            if (checkPrivateKey == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "checkPrivateKey");
            }
            this.checkPrivateKey = checkPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder cn(String cn) {
            if (cn == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "cn");
            }
            this.cn = cn;
            return this;
        }
        @CustomType.Setter
        public Builder complianceStatus(String complianceStatus) {
            if (complianceStatus == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "complianceStatus");
            }
            this.complianceStatus = complianceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder countOperator(String countOperator) {
            if (countOperator == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "countOperator");
            }
            this.countOperator = countOperator;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder eidLastSeen(String eidLastSeen) {
            if (eidLastSeen == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "eidLastSeen");
            }
            this.eidLastSeen = eidLastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder exists(Boolean exists) {
            if (exists == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "exists");
            }
            this.exists = exists;
            return this;
        }
        @CustomType.Setter
        public Builder extendedKeyUsages(List<String> extendedKeyUsages) {
            if (extendedKeyUsages == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "extendedKeyUsages");
            }
            this.extendedKeyUsages = extendedKeyUsages;
            return this;
        }
        public Builder extendedKeyUsages(String... extendedKeyUsages) {
            return extendedKeyUsages(List.of(extendedKeyUsages));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder infected(Boolean infected) {
            if (infected == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "infected");
            }
            this.infected = infected;
            return this;
        }
        @CustomType.Setter
        public Builder isActive(Boolean isActive) {
            if (isActive == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "isActive");
            }
            this.isActive = isActive;
            return this;
        }
        @CustomType.Setter
        public Builder issueCount(String issueCount) {
            if (issueCount == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "issueCount");
            }
            this.issueCount = issueCount;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeen(String lastSeen) {
            if (lastSeen == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "lastSeen");
            }
            this.lastSeen = lastSeen;
            return this;
        }
        @CustomType.Setter
        public Builder locations(GetZeroTrustDevicePostureRulesResultInputLocations locations) {
            if (locations == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "locations");
            }
            this.locations = locations;
            return this;
        }
        @CustomType.Setter
        public Builder networkStatus(String networkStatus) {
            if (networkStatus == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "networkStatus");
            }
            this.networkStatus = networkStatus;
            return this;
        }
        @CustomType.Setter
        public Builder operatingSystem(String operatingSystem) {
            if (operatingSystem == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "operatingSystem");
            }
            this.operatingSystem = operatingSystem;
            return this;
        }
        @CustomType.Setter
        public Builder operationalState(String operationalState) {
            if (operationalState == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "operationalState");
            }
            this.operationalState = operationalState;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder os(String os) {
            if (os == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "os");
            }
            this.os = os;
            return this;
        }
        @CustomType.Setter
        public Builder osDistroName(String osDistroName) {
            if (osDistroName == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "osDistroName");
            }
            this.osDistroName = osDistroName;
            return this;
        }
        @CustomType.Setter
        public Builder osDistroRevision(String osDistroRevision) {
            if (osDistroRevision == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "osDistroRevision");
            }
            this.osDistroRevision = osDistroRevision;
            return this;
        }
        @CustomType.Setter
        public Builder osVersionExtra(String osVersionExtra) {
            if (osVersionExtra == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "osVersionExtra");
            }
            this.osVersionExtra = osVersionExtra;
            return this;
        }
        @CustomType.Setter
        public Builder overall(String overall) {
            if (overall == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "overall");
            }
            this.overall = overall;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder requireAll(Boolean requireAll) {
            if (requireAll == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "requireAll");
            }
            this.requireAll = requireAll;
            return this;
        }
        @CustomType.Setter
        public Builder riskLevel(String riskLevel) {
            if (riskLevel == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "riskLevel");
            }
            this.riskLevel = riskLevel;
            return this;
        }
        @CustomType.Setter
        public Builder score(Double score) {
            if (score == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "score");
            }
            this.score = score;
            return this;
        }
        @CustomType.Setter
        public Builder scoreOperator(String scoreOperator) {
            if (scoreOperator == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "scoreOperator");
            }
            this.scoreOperator = scoreOperator;
            return this;
        }
        @CustomType.Setter
        public Builder sensorConfig(String sensorConfig) {
            if (sensorConfig == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "sensorConfig");
            }
            this.sensorConfig = sensorConfig;
            return this;
        }
        @CustomType.Setter
        public Builder sha256(String sha256) {
            if (sha256 == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "sha256");
            }
            this.sha256 = sha256;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder thumbprint(String thumbprint) {
            if (thumbprint == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "thumbprint");
            }
            this.thumbprint = thumbprint;
            return this;
        }
        @CustomType.Setter
        public Builder totalScore(Double totalScore) {
            if (totalScore == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "totalScore");
            }
            this.totalScore = totalScore;
            return this;
        }
        @CustomType.Setter
        public Builder version(String version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionOperator(String versionOperator) {
            if (versionOperator == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDevicePostureRulesResultInput", "versionOperator");
            }
            this.versionOperator = versionOperator;
            return this;
        }
        public GetZeroTrustDevicePostureRulesResultInput build() {
            final var _resultValue = new GetZeroTrustDevicePostureRulesResultInput();
            _resultValue.activeThreats = activeThreats;
            _resultValue.certificateId = certificateId;
            _resultValue.checkDisks = checkDisks;
            _resultValue.checkPrivateKey = checkPrivateKey;
            _resultValue.cn = cn;
            _resultValue.complianceStatus = complianceStatus;
            _resultValue.connectionId = connectionId;
            _resultValue.countOperator = countOperator;
            _resultValue.domain = domain;
            _resultValue.eidLastSeen = eidLastSeen;
            _resultValue.enabled = enabled;
            _resultValue.exists = exists;
            _resultValue.extendedKeyUsages = extendedKeyUsages;
            _resultValue.id = id;
            _resultValue.infected = infected;
            _resultValue.isActive = isActive;
            _resultValue.issueCount = issueCount;
            _resultValue.lastSeen = lastSeen;
            _resultValue.locations = locations;
            _resultValue.networkStatus = networkStatus;
            _resultValue.operatingSystem = operatingSystem;
            _resultValue.operationalState = operationalState;
            _resultValue.operator = operator;
            _resultValue.os = os;
            _resultValue.osDistroName = osDistroName;
            _resultValue.osDistroRevision = osDistroRevision;
            _resultValue.osVersionExtra = osVersionExtra;
            _resultValue.overall = overall;
            _resultValue.path = path;
            _resultValue.requireAll = requireAll;
            _resultValue.riskLevel = riskLevel;
            _resultValue.score = score;
            _resultValue.scoreOperator = scoreOperator;
            _resultValue.sensorConfig = sensorConfig;
            _resultValue.sha256 = sha256;
            _resultValue.state = state;
            _resultValue.thumbprint = thumbprint;
            _resultValue.totalScore = totalScore;
            _resultValue.version = version;
            _resultValue.versionOperator = versionOperator;
            return _resultValue;
        }
    }
}
