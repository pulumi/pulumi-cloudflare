// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.StreamLiveInputRecordingArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputRtmpsArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputRtmpsPlaybackArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputSrtArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputSrtPlaybackArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputWebRtcArgs;
import com.pulumi.cloudflare.inputs.StreamLiveInputWebRtcPlaybackArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamLiveInputState extends com.pulumi.resources.ResourceArgs {

    public static final StreamLiveInputState Empty = new StreamLiveInputState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The date and time the live input was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The date and time the live input was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Sets the creator ID asssociated with this live input.
     * 
     */
    @Import(name="defaultCreator")
    private @Nullable Output<String> defaultCreator;

    /**
     * @return Sets the creator ID asssociated with this live input.
     * 
     */
    public Optional<Output<String>> defaultCreator() {
        return Optional.ofNullable(this.defaultCreator);
    }

    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    @Import(name="deleteRecordingAfterDays")
    private @Nullable Output<Double> deleteRecordingAfterDays;

    /**
     * @return Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    public Optional<Output<Double>> deleteRecordingAfterDays() {
        return Optional.ofNullable(this.deleteRecordingAfterDays);
    }

    /**
     * A unique identifier for a live input.
     * 
     */
    @Import(name="liveInputIdentifier")
    private @Nullable Output<String> liveInputIdentifier;

    /**
     * @return A unique identifier for a live input.
     * 
     */
    public Optional<Output<String>> liveInputIdentifier() {
        return Optional.ofNullable(this.liveInputIdentifier);
    }

    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * The date and time the live input was last modified.
     * 
     */
    @Import(name="modified")
    private @Nullable Output<String> modified;

    /**
     * @return The date and time the live input was last modified.
     * 
     */
    public Optional<Output<String>> modified() {
        return Optional.ofNullable(this.modified);
    }

    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    @Import(name="recording")
    private @Nullable Output<StreamLiveInputRecordingArgs> recording;

    /**
     * @return Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    public Optional<Output<StreamLiveInputRecordingArgs>> recording() {
        return Optional.ofNullable(this.recording);
    }

    /**
     * Details for streaming to an live input using RTMPS.
     * 
     */
    @Import(name="rtmps")
    private @Nullable Output<StreamLiveInputRtmpsArgs> rtmps;

    /**
     * @return Details for streaming to an live input using RTMPS.
     * 
     */
    public Optional<Output<StreamLiveInputRtmpsArgs>> rtmps() {
        return Optional.ofNullable(this.rtmps);
    }

    /**
     * Details for playback from an live input using RTMPS.
     * 
     */
    @Import(name="rtmpsPlayback")
    private @Nullable Output<StreamLiveInputRtmpsPlaybackArgs> rtmpsPlayback;

    /**
     * @return Details for playback from an live input using RTMPS.
     * 
     */
    public Optional<Output<StreamLiveInputRtmpsPlaybackArgs>> rtmpsPlayback() {
        return Optional.ofNullable(this.rtmpsPlayback);
    }

    /**
     * Details for streaming to a live input using SRT.
     * 
     */
    @Import(name="srt")
    private @Nullable Output<StreamLiveInputSrtArgs> srt;

    /**
     * @return Details for streaming to a live input using SRT.
     * 
     */
    public Optional<Output<StreamLiveInputSrtArgs>> srt() {
        return Optional.ofNullable(this.srt);
    }

    /**
     * Details for playback from an live input using SRT.
     * 
     */
    @Import(name="srtPlayback")
    private @Nullable Output<StreamLiveInputSrtPlaybackArgs> srtPlayback;

    /**
     * @return Details for playback from an live input using SRT.
     * 
     */
    public Optional<Output<StreamLiveInputSrtPlaybackArgs>> srtPlayback() {
        return Optional.ofNullable(this.srtPlayback);
    }

    /**
     * The connection status of a live input.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The connection status of a live input.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A unique identifier for a live input.
     * 
     */
    @Import(name="uid")
    private @Nullable Output<String> uid;

    /**
     * @return A unique identifier for a live input.
     * 
     */
    public Optional<Output<String>> uid() {
        return Optional.ofNullable(this.uid);
    }

    /**
     * Details for streaming to a live input using WebRTC.
     * 
     */
    @Import(name="webRtc")
    private @Nullable Output<StreamLiveInputWebRtcArgs> webRtc;

    /**
     * @return Details for streaming to a live input using WebRTC.
     * 
     */
    public Optional<Output<StreamLiveInputWebRtcArgs>> webRtc() {
        return Optional.ofNullable(this.webRtc);
    }

    /**
     * Details for playback from a live input using WebRTC.
     * 
     */
    @Import(name="webRtcPlayback")
    private @Nullable Output<StreamLiveInputWebRtcPlaybackArgs> webRtcPlayback;

    /**
     * @return Details for playback from a live input using WebRTC.
     * 
     */
    public Optional<Output<StreamLiveInputWebRtcPlaybackArgs>> webRtcPlayback() {
        return Optional.ofNullable(this.webRtcPlayback);
    }

    private StreamLiveInputState() {}

    private StreamLiveInputState(StreamLiveInputState $) {
        this.accountId = $.accountId;
        this.created = $.created;
        this.defaultCreator = $.defaultCreator;
        this.deleteRecordingAfterDays = $.deleteRecordingAfterDays;
        this.liveInputIdentifier = $.liveInputIdentifier;
        this.meta = $.meta;
        this.modified = $.modified;
        this.recording = $.recording;
        this.rtmps = $.rtmps;
        this.rtmpsPlayback = $.rtmpsPlayback;
        this.srt = $.srt;
        this.srtPlayback = $.srtPlayback;
        this.status = $.status;
        this.uid = $.uid;
        this.webRtc = $.webRtc;
        this.webRtcPlayback = $.webRtcPlayback;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamLiveInputState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamLiveInputState $;

        public Builder() {
            $ = new StreamLiveInputState();
        }

        public Builder(StreamLiveInputState defaults) {
            $ = new StreamLiveInputState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param created The date and time the live input was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The date and time the live input was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param defaultCreator Sets the creator ID asssociated with this live input.
         * 
         * @return builder
         * 
         */
        public Builder defaultCreator(@Nullable Output<String> defaultCreator) {
            $.defaultCreator = defaultCreator;
            return this;
        }

        /**
         * @param defaultCreator Sets the creator ID asssociated with this live input.
         * 
         * @return builder
         * 
         */
        public Builder defaultCreator(String defaultCreator) {
            return defaultCreator(Output.of(defaultCreator));
        }

        /**
         * @param deleteRecordingAfterDays Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRecordingAfterDays(@Nullable Output<Double> deleteRecordingAfterDays) {
            $.deleteRecordingAfterDays = deleteRecordingAfterDays;
            return this;
        }

        /**
         * @param deleteRecordingAfterDays Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRecordingAfterDays(Double deleteRecordingAfterDays) {
            return deleteRecordingAfterDays(Output.of(deleteRecordingAfterDays));
        }

        /**
         * @param liveInputIdentifier A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder liveInputIdentifier(@Nullable Output<String> liveInputIdentifier) {
            $.liveInputIdentifier = liveInputIdentifier;
            return this;
        }

        /**
         * @param liveInputIdentifier A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder liveInputIdentifier(String liveInputIdentifier) {
            return liveInputIdentifier(Output.of(liveInputIdentifier));
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing live inputs.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing live inputs.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param modified The date and time the live input was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(@Nullable Output<String> modified) {
            $.modified = modified;
            return this;
        }

        /**
         * @param modified The date and time the live input was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modified(String modified) {
            return modified(Output.of(modified));
        }

        /**
         * @param recording Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder recording(@Nullable Output<StreamLiveInputRecordingArgs> recording) {
            $.recording = recording;
            return this;
        }

        /**
         * @param recording Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder recording(StreamLiveInputRecordingArgs recording) {
            return recording(Output.of(recording));
        }

        /**
         * @param rtmps Details for streaming to an live input using RTMPS.
         * 
         * @return builder
         * 
         */
        public Builder rtmps(@Nullable Output<StreamLiveInputRtmpsArgs> rtmps) {
            $.rtmps = rtmps;
            return this;
        }

        /**
         * @param rtmps Details for streaming to an live input using RTMPS.
         * 
         * @return builder
         * 
         */
        public Builder rtmps(StreamLiveInputRtmpsArgs rtmps) {
            return rtmps(Output.of(rtmps));
        }

        /**
         * @param rtmpsPlayback Details for playback from an live input using RTMPS.
         * 
         * @return builder
         * 
         */
        public Builder rtmpsPlayback(@Nullable Output<StreamLiveInputRtmpsPlaybackArgs> rtmpsPlayback) {
            $.rtmpsPlayback = rtmpsPlayback;
            return this;
        }

        /**
         * @param rtmpsPlayback Details for playback from an live input using RTMPS.
         * 
         * @return builder
         * 
         */
        public Builder rtmpsPlayback(StreamLiveInputRtmpsPlaybackArgs rtmpsPlayback) {
            return rtmpsPlayback(Output.of(rtmpsPlayback));
        }

        /**
         * @param srt Details for streaming to a live input using SRT.
         * 
         * @return builder
         * 
         */
        public Builder srt(@Nullable Output<StreamLiveInputSrtArgs> srt) {
            $.srt = srt;
            return this;
        }

        /**
         * @param srt Details for streaming to a live input using SRT.
         * 
         * @return builder
         * 
         */
        public Builder srt(StreamLiveInputSrtArgs srt) {
            return srt(Output.of(srt));
        }

        /**
         * @param srtPlayback Details for playback from an live input using SRT.
         * 
         * @return builder
         * 
         */
        public Builder srtPlayback(@Nullable Output<StreamLiveInputSrtPlaybackArgs> srtPlayback) {
            $.srtPlayback = srtPlayback;
            return this;
        }

        /**
         * @param srtPlayback Details for playback from an live input using SRT.
         * 
         * @return builder
         * 
         */
        public Builder srtPlayback(StreamLiveInputSrtPlaybackArgs srtPlayback) {
            return srtPlayback(Output.of(srtPlayback));
        }

        /**
         * @param status The connection status of a live input.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The connection status of a live input.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param uid A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder uid(@Nullable Output<String> uid) {
            $.uid = uid;
            return this;
        }

        /**
         * @param uid A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder uid(String uid) {
            return uid(Output.of(uid));
        }

        /**
         * @param webRtc Details for streaming to a live input using WebRTC.
         * 
         * @return builder
         * 
         */
        public Builder webRtc(@Nullable Output<StreamLiveInputWebRtcArgs> webRtc) {
            $.webRtc = webRtc;
            return this;
        }

        /**
         * @param webRtc Details for streaming to a live input using WebRTC.
         * 
         * @return builder
         * 
         */
        public Builder webRtc(StreamLiveInputWebRtcArgs webRtc) {
            return webRtc(Output.of(webRtc));
        }

        /**
         * @param webRtcPlayback Details for playback from a live input using WebRTC.
         * 
         * @return builder
         * 
         */
        public Builder webRtcPlayback(@Nullable Output<StreamLiveInputWebRtcPlaybackArgs> webRtcPlayback) {
            $.webRtcPlayback = webRtcPlayback;
            return this;
        }

        /**
         * @param webRtcPlayback Details for playback from a live input using WebRTC.
         * 
         * @return builder
         * 
         */
        public Builder webRtcPlayback(StreamLiveInputWebRtcPlaybackArgs webRtcPlayback) {
            return webRtcPlayback(Output.of(webRtcPlayback));
        }

        public StreamLiveInputState build() {
            return $;
        }
    }

}
