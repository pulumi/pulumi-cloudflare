// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.NotificationPolicyArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.NotificationPolicyState;
import com.pulumi.cloudflare.outputs.NotificationPolicyFilters;
import com.pulumi.cloudflare.outputs.NotificationPolicyMechanisms;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.NotificationPolicy;
 * import com.pulumi.cloudflare.NotificationPolicyArgs;
 * import com.pulumi.cloudflare.inputs.NotificationPolicyMechanismsArgs;
 * import com.pulumi.cloudflare.inputs.NotificationPolicyFiltersArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleNotificationPolicy = new NotificationPolicy("exampleNotificationPolicy", NotificationPolicyArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .alertType("access_custom_certificate_expiration_type")
 *             .enabled(true)
 *             .mechanisms(NotificationPolicyMechanismsArgs.builder()
 *                 .email(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                 .pagerduty()
 *                 .webhooks()
 *                 .build())
 *             .name("SSL Notification Event Policy")
 *             .alertInterval("30m")
 *             .description("Something describing the policy.")
 *             .filters(NotificationPolicyFiltersArgs.builder()
 *                 .actions("string")
 *                 .affected_asns("string")
 *                 .affected_components("string")
 *                 .affected_locations("string")
 *                 .airport_code("string")
 *                 .alert_trigger_preferences("string")
 *                 .alert_trigger_preferences_value("string")
 *                 .enabled("string")
 *                 .environment("string")
 *                 .event("string")
 *                 .event_source("string")
 *                 .event_type("string")
 *                 .group_by("string")
 *                 .health_check_id("string")
 *                 .incident_impact("INCIDENT_IMPACT_NONE")
 *                 .input_id("string")
 *                 .insight_class("string")
 *                 .limit("string")
 *                 .logo_tag("string")
 *                 .megabits_per_second("string")
 *                 .new_health("string")
 *                 .new_status("string")
 *                 .packets_per_second("string")
 *                 .pool_id("string")
 *                 .pop_names("string")
 *                 .product("string")
 *                 .project_id("string")
 *                 .protocol("string")
 *                 .query_tag("string")
 *                 .requests_per_second("string")
 *                 .selectors("string")
 *                 .services("string")
 *                 .slo("99.9")
 *                 .status("string")
 *                 .target_hostname("string")
 *                 .target_ip("string")
 *                 .target_zone_name("string")
 *                 .traffic_exclusions("security_events")
 *                 .tunnel_id("string")
 *                 .tunnel_name("string")
 *                 .where("string")
 *                 .zones("string")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example &#39;&lt;account_id&gt;/&lt;policy_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/notificationPolicy:NotificationPolicy")
public class NotificationPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The account id
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account id
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    @Export(name="alertInterval", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> alertInterval;

    /**
     * @return Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    public Output<Optional<String>> alertInterval() {
        return Codegen.optional(this.alertInterval);
    }
    /**
     * Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    @Export(name="alertType", refs={String.class}, tree="[0]")
    private Output<String> alertType;

    /**
     * @return Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * 
     */
    public Output<String> alertType() {
        return this.alertType;
    }
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    public Output<String> created() {
        return this.created;
    }
    /**
     * Optional description for the Notification policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional description for the Notification policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether or not the Notification policy is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether or not the Notification policy is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    @Export(name="filters", refs={NotificationPolicyFilters.class}, tree="[0]")
    private Output<NotificationPolicyFilters> filters;

    /**
     * @return Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    public Output<NotificationPolicyFilters> filters() {
        return this.filters;
    }
    /**
     * List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    @Export(name="mechanisms", refs={NotificationPolicyMechanisms.class}, tree="[0]")
    private Output<NotificationPolicyMechanisms> mechanisms;

    /**
     * @return List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    public Output<NotificationPolicyMechanisms> mechanisms() {
        return this.mechanisms;
    }
    @Export(name="modified", refs={String.class}, tree="[0]")
    private Output<String> modified;

    public Output<String> modified() {
        return this.modified;
    }
    /**
     * Name of the policy.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationPolicy(java.lang.String name) {
        this(name, NotificationPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationPolicy(java.lang.String name, NotificationPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationPolicy(java.lang.String name, NotificationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NotificationPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static NotificationPolicyArgs makeArgs(NotificationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NotificationPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationPolicy(name, id, state, options);
    }
}
