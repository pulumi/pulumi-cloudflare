// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.NotificationPolicyArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.NotificationPolicyState;
import com.pulumi.cloudflare.outputs.NotificationPolicyFilters;
import com.pulumi.cloudflare.outputs.NotificationPolicyMechanisms;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example &#39;&lt;account_id&gt;/&lt;policy_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/notificationPolicy:NotificationPolicy")
public class NotificationPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The account id
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account id
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    @Export(name="alertInterval", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> alertInterval;

    /**
     * @return Optional specification of how often to re-alert from the same incident, not support on all alert types.
     * 
     */
    public Output<Optional<String>> alertInterval() {
        return Codegen.optional(this.alertInterval);
    }
    /**
     * Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * Available values: &#34;access*custom*certificate*expiration*type&#34;, &#34;advanced*ddos*attack*l4*alert&#34;, &#34;advanced*ddos*attack*l7*alert&#34;, &#34;advanced*http*alert*error&#34;, &#34;bgp*hijack*notification&#34;, &#34;billing*usage*alert&#34;, &#34;block*notification*block*removed&#34;, &#34;block*notification*new*block&#34;, &#34;block*notification*review*rejected&#34;, &#34;bot*traffic*basic*alert&#34;, &#34;brand*protection*alert&#34;, &#34;brand*protection*digest&#34;, &#34;clickhouse*alert*fw*anomaly&#34;, &#34;clickhouse*alert*fw*ent*anomaly&#34;, &#34;cloudforce*one*request*notification&#34;, &#34;custom*analytics&#34;, &#34;custom*bot*detection*alert&#34;, &#34;custom*ssl*certificate*event*type&#34;, &#34;dedicated*ssl*certificate*event*type&#34;, &#34;device*connectivity*anomaly*alert&#34;, &#34;dos*attack*l4&#34;, &#34;dos*attack*l7&#34;, &#34;expiring*service*token*alert&#34;, &#34;failing*logpush*job*disabled*alert&#34;, &#34;fbm*auto*advertisement&#34;, &#34;fbm*dosd*attack&#34;, &#34;fbm*volumetric*attack&#34;, &#34;health*check*status*notification&#34;, &#34;hostname*aop*custom*certificate*expiration*type&#34;, &#34;http*alert*edge*error&#34;, &#34;http*alert*origin*error&#34;, &#34;image*notification&#34;, &#34;image*resizing*notification&#34;, &#34;incident*alert&#34;, &#34;load*balancing*health*alert&#34;, &#34;load*balancing*pool*enablement*alert&#34;, &#34;logo*match*alert&#34;, &#34;magic*tunnel*health*check*event&#34;, &#34;magic*wan*tunnel*health&#34;, &#34;maintenance*event*notification&#34;, &#34;mtls*certificate*store*certificate*expiration*type&#34;, &#34;pages*event*alert&#34;, &#34;radar*notification&#34;, &#34;real*origin*monitoring&#34;, &#34;scriptmonitor*alert*new*code*change*detections&#34;, &#34;scriptmonitor*alert*new*hosts&#34;, &#34;scriptmonitor*alert*new*malicious*hosts&#34;, &#34;scriptmonitor*alert*new*malicious*scripts&#34;, &#34;scriptmonitor*alert*new*malicious*url&#34;, &#34;scriptmonitor*alert*new*max*length*resource*url&#34;, &#34;scriptmonitor*alert*new*resources&#34;, &#34;secondary*dns*all*primaries*failing&#34;, &#34;secondary*dns*primaries*failing&#34;, &#34;secondary*dns*warning&#34;, &#34;secondary*dns*zone*successfully*updated&#34;, &#34;secondary*dns*zone*validation*warning&#34;, &#34;security*insights*alert&#34;, &#34;sentinel*alert&#34;, &#34;stream*live*notifications&#34;, &#34;synthetic*test*latency*alert&#34;, &#34;synthetic*test*low*availability*alert&#34;, &#34;traffic*anomalies*alert&#34;, &#34;tunnel*health*event&#34;, &#34;tunnel*update*event&#34;, &#34;universal*ssl*event*type&#34;, &#34;web*analytics*metrics*update&#34;, &#34;zone*aop*custom*certificate*expiration*type&#34;.
     * 
     */
    @Export(name="alertType", refs={String.class}, tree="[0]")
    private Output<String> alertType;

    /**
     * @return Refers to which event will trigger a Notification dispatch. You can use the endpoint to get available alert types which then will give you a list of possible values.
     * Available values: &#34;access*custom*certificate*expiration*type&#34;, &#34;advanced*ddos*attack*l4*alert&#34;, &#34;advanced*ddos*attack*l7*alert&#34;, &#34;advanced*http*alert*error&#34;, &#34;bgp*hijack*notification&#34;, &#34;billing*usage*alert&#34;, &#34;block*notification*block*removed&#34;, &#34;block*notification*new*block&#34;, &#34;block*notification*review*rejected&#34;, &#34;bot*traffic*basic*alert&#34;, &#34;brand*protection*alert&#34;, &#34;brand*protection*digest&#34;, &#34;clickhouse*alert*fw*anomaly&#34;, &#34;clickhouse*alert*fw*ent*anomaly&#34;, &#34;cloudforce*one*request*notification&#34;, &#34;custom*analytics&#34;, &#34;custom*bot*detection*alert&#34;, &#34;custom*ssl*certificate*event*type&#34;, &#34;dedicated*ssl*certificate*event*type&#34;, &#34;device*connectivity*anomaly*alert&#34;, &#34;dos*attack*l4&#34;, &#34;dos*attack*l7&#34;, &#34;expiring*service*token*alert&#34;, &#34;failing*logpush*job*disabled*alert&#34;, &#34;fbm*auto*advertisement&#34;, &#34;fbm*dosd*attack&#34;, &#34;fbm*volumetric*attack&#34;, &#34;health*check*status*notification&#34;, &#34;hostname*aop*custom*certificate*expiration*type&#34;, &#34;http*alert*edge*error&#34;, &#34;http*alert*origin*error&#34;, &#34;image*notification&#34;, &#34;image*resizing*notification&#34;, &#34;incident*alert&#34;, &#34;load*balancing*health*alert&#34;, &#34;load*balancing*pool*enablement*alert&#34;, &#34;logo*match*alert&#34;, &#34;magic*tunnel*health*check*event&#34;, &#34;magic*wan*tunnel*health&#34;, &#34;maintenance*event*notification&#34;, &#34;mtls*certificate*store*certificate*expiration*type&#34;, &#34;pages*event*alert&#34;, &#34;radar*notification&#34;, &#34;real*origin*monitoring&#34;, &#34;scriptmonitor*alert*new*code*change*detections&#34;, &#34;scriptmonitor*alert*new*hosts&#34;, &#34;scriptmonitor*alert*new*malicious*hosts&#34;, &#34;scriptmonitor*alert*new*malicious*scripts&#34;, &#34;scriptmonitor*alert*new*malicious*url&#34;, &#34;scriptmonitor*alert*new*max*length*resource*url&#34;, &#34;scriptmonitor*alert*new*resources&#34;, &#34;secondary*dns*all*primaries*failing&#34;, &#34;secondary*dns*primaries*failing&#34;, &#34;secondary*dns*warning&#34;, &#34;secondary*dns*zone*successfully*updated&#34;, &#34;secondary*dns*zone*validation*warning&#34;, &#34;security*insights*alert&#34;, &#34;sentinel*alert&#34;, &#34;stream*live*notifications&#34;, &#34;synthetic*test*latency*alert&#34;, &#34;synthetic*test*low*availability*alert&#34;, &#34;traffic*anomalies*alert&#34;, &#34;tunnel*health*event&#34;, &#34;tunnel*update*event&#34;, &#34;universal*ssl*event*type&#34;, &#34;web*analytics*metrics*update&#34;, &#34;zone*aop*custom*certificate*expiration*type&#34;.
     * 
     */
    public Output<String> alertType() {
        return this.alertType;
    }
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    public Output<String> created() {
        return this.created;
    }
    /**
     * Optional description for the Notification policy.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Optional description for the Notification policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether or not the Notification policy is enabled.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether or not the Notification policy is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    @Export(name="filters", refs={NotificationPolicyFilters.class}, tree="[0]")
    private Output</* @Nullable */ NotificationPolicyFilters> filters;

    /**
     * @return Optional filters that allow you to be alerted only on a subset of events for that alert type based on some criteria. This is only available for select alert types. See alert type documentation for more details.
     * 
     */
    public Output<Optional<NotificationPolicyFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    @Export(name="mechanisms", refs={NotificationPolicyMechanisms.class}, tree="[0]")
    private Output<NotificationPolicyMechanisms> mechanisms;

    /**
     * @return List of IDs that will be used when dispatching a notification. IDs for email type will be the email address.
     * 
     */
    public Output<NotificationPolicyMechanisms> mechanisms() {
        return this.mechanisms;
    }
    @Export(name="modified", refs={String.class}, tree="[0]")
    private Output<String> modified;

    public Output<String> modified() {
        return this.modified;
    }
    /**
     * Name of the policy.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationPolicy(java.lang.String name) {
        this(name, NotificationPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationPolicy(java.lang.String name, NotificationPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationPolicy(java.lang.String name, NotificationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NotificationPolicy(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, state, makeResourceOptions(options, id), false);
    }

    private static NotificationPolicyArgs makeArgs(NotificationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NotificationPolicyArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationPolicy get(java.lang.String name, Output<java.lang.String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationPolicy(name, id, state, options);
    }
}
