// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.NotificationPolicyArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.NotificationPolicyState;
import com.pulumi.cloudflare.outputs.NotificationPolicyEmailIntegration;
import com.pulumi.cloudflare.outputs.NotificationPolicyFilters;
import com.pulumi.cloudflare.outputs.NotificationPolicyPagerdutyIntegration;
import com.pulumi.cloudflare.outputs.NotificationPolicyWebhooksIntegration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a resource, that manages a notification policy for
 * Cloudflare&#39;s products. The delivery mechanisms supported are email,
 * webhooks, and PagerDuty.
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import cloudflare:index/notificationPolicy:NotificationPolicy example &lt;account_id&gt;/&lt;policy_id&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/notificationPolicy:NotificationPolicy")
public class NotificationPolicy extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier to target for the resource.
     * 
     */
    @Export(name="accountId", type=String.class, parameters={})
    private Output<String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of [available alert types](https://developers.cloudflare.com/fundamentals/notifications/notification-available/) Available values: `billing_usage_alert`, `health_check_status_notification`, `g6_pool_toggle_alert`, `real_origin_monitoring`, `universal_ssl_event_type`, `bgp_hijack_notification`, `http_alert_origin_error`, `workers_alert`, `weekly_account_overview`, `expiring_service_token_alert`, `secondary_dns_all_primaries_failing`, `secondary_dns_zone_validation_warning`, `secondary_dns_primaries_failing`, `secondary_dns_zone_successfully_updated`, `dos_attack_l7`, `dos_attack_l4`, `advanced_ddos_attack_l7_alert`, `advanced_ddos_attack_l4_alert`, `fbm_volumetric_attack`, `fbm_auto_advertisement`, `load_balancing_pool_enablement_alert`, `load_balancing_health_alert`, `g6_health_alert`, `http_alert_edge_error`, `clickhouse_alert_fw_anomaly`, `clickhouse_alert_fw_ent_anomaly`, `failing_logpush_job_disabled_alert`, `scriptmonitor_alert_new_hosts`, `scriptmonitor_alert_new_scripts`, `scriptmonitor_alert_new_malicious_scripts`, `scriptmonitor_alert_new_malicious_url`, `scriptmonitor_alert_new_code_change_detections`, `scriptmonitor_alert_new_max_length_script_url`, `scriptmonitor_alert_new_malicious_hosts`, `sentinel_alert`, `hostname_aop_custom_certificate_expiration_type`, `stream_live_notifications`, `block_notification_new_block`, `block_notification_review_rejected`, `block_notification_review_accepted`, `web_analytics_metrics_update`, `workers_uptime`.
     * 
     */
    @Export(name="alertType", type=String.class, parameters={})
    private Output<String> alertType;

    /**
     * @return The event type that will trigger the dispatch of a notification. See the developer documentation for descriptions of [available alert types](https://developers.cloudflare.com/fundamentals/notifications/notification-available/) Available values: `billing_usage_alert`, `health_check_status_notification`, `g6_pool_toggle_alert`, `real_origin_monitoring`, `universal_ssl_event_type`, `bgp_hijack_notification`, `http_alert_origin_error`, `workers_alert`, `weekly_account_overview`, `expiring_service_token_alert`, `secondary_dns_all_primaries_failing`, `secondary_dns_zone_validation_warning`, `secondary_dns_primaries_failing`, `secondary_dns_zone_successfully_updated`, `dos_attack_l7`, `dos_attack_l4`, `advanced_ddos_attack_l7_alert`, `advanced_ddos_attack_l4_alert`, `fbm_volumetric_attack`, `fbm_auto_advertisement`, `load_balancing_pool_enablement_alert`, `load_balancing_health_alert`, `g6_health_alert`, `http_alert_edge_error`, `clickhouse_alert_fw_anomaly`, `clickhouse_alert_fw_ent_anomaly`, `failing_logpush_job_disabled_alert`, `scriptmonitor_alert_new_hosts`, `scriptmonitor_alert_new_scripts`, `scriptmonitor_alert_new_malicious_scripts`, `scriptmonitor_alert_new_malicious_url`, `scriptmonitor_alert_new_code_change_detections`, `scriptmonitor_alert_new_max_length_script_url`, `scriptmonitor_alert_new_malicious_hosts`, `sentinel_alert`, `hostname_aop_custom_certificate_expiration_type`, `stream_live_notifications`, `block_notification_new_block`, `block_notification_review_rejected`, `block_notification_review_accepted`, `web_analytics_metrics_update`, `workers_uptime`.
     * 
     */
    public Output<String> alertType() {
        return this.alertType;
    }
    /**
     * When the notification policy was created.
     * 
     */
    @Export(name="created", type=String.class, parameters={})
    private Output<String> created;

    /**
     * @return When the notification policy was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * Description of the notification policy.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return Description of the notification policy.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    @Export(name="emailIntegrations", type=List.class, parameters={NotificationPolicyEmailIntegration.class})
    private Output</* @Nullable */ List<NotificationPolicyEmailIntegration>> emailIntegrations;

    /**
     * @return The email id to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    public Output<Optional<List<NotificationPolicyEmailIntegration>>> emailIntegrations() {
        return Codegen.optional(this.emailIntegrations);
    }
    /**
     * The status of the notification policy.
     * 
     */
    @Export(name="enabled", type=Boolean.class, parameters={})
    private Output<Boolean> enabled;

    /**
     * @return The status of the notification policy.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * An optional nested block of filters that applies to the selected `alert_type`. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields).
     * 
     */
    @Export(name="filters", type=NotificationPolicyFilters.class, parameters={})
    private Output</* @Nullable */ NotificationPolicyFilters> filters;

    /**
     * @return An optional nested block of filters that applies to the selected `alert_type`. A key-value map that specifies the type of filter and the values to match against (refer to the alert type block for available fields).
     * 
     */
    public Output<Optional<NotificationPolicyFilters>> filters() {
        return Codegen.optional(this.filters);
    }
    /**
     * When the notification policy was last modified.
     * 
     */
    @Export(name="modified", type=String.class, parameters={})
    private Output<String> modified;

    /**
     * @return When the notification policy was last modified.
     * 
     */
    public Output<String> modified() {
        return this.modified;
    }
    /**
     * The name of the notification policy.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the notification policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    @Export(name="pagerdutyIntegrations", type=List.class, parameters={NotificationPolicyPagerdutyIntegration.class})
    private Output</* @Nullable */ List<NotificationPolicyPagerdutyIntegration>> pagerdutyIntegrations;

    /**
     * @return The unique id of a configured pagerduty endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    public Output<Optional<List<NotificationPolicyPagerdutyIntegration>>> pagerdutyIntegrations() {
        return Codegen.optional(this.pagerdutyIntegrations);
    }
    /**
     * The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    @Export(name="webhooksIntegrations", type=List.class, parameters={NotificationPolicyWebhooksIntegration.class})
    private Output</* @Nullable */ List<NotificationPolicyWebhooksIntegration>> webhooksIntegrations;

    /**
     * @return The unique id of a configured webhooks endpoint to which the notification should be dispatched. One of email, webhooks, or PagerDuty mechanisms is required.
     * 
     */
    public Output<Optional<List<NotificationPolicyWebhooksIntegration>>> webhooksIntegrations() {
        return Codegen.optional(this.webhooksIntegrations);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NotificationPolicy(String name) {
        this(name, NotificationPolicyArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NotificationPolicy(String name, NotificationPolicyArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NotificationPolicy(String name, NotificationPolicyArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, args == null ? NotificationPolicyArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NotificationPolicy(String name, Output<String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/notificationPolicy:NotificationPolicy", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NotificationPolicy get(String name, Output<String> id, @Nullable NotificationPolicyState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NotificationPolicy(name, id, state, options);
    }
}
