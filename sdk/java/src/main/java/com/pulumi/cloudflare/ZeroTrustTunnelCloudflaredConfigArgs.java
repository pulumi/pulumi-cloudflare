// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ZeroTrustTunnelCloudflaredConfigConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustTunnelCloudflaredConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustTunnelCloudflaredConfigArgs Empty = new ZeroTrustTunnelCloudflaredConfigArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The tunnel configuration and ingress rules.
     * 
     */
    @Import(name="config")
    private @Nullable Output<ZeroTrustTunnelCloudflaredConfigConfigArgs> config;

    /**
     * @return The tunnel configuration and ingress rules.
     * 
     */
    public Optional<Output<ZeroTrustTunnelCloudflaredConfigConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel&#39;s configuration on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel&#39;s configuration on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * UUID of the tunnel.
     * 
     */
    @Import(name="tunnelId", required=true)
    private Output<String> tunnelId;

    /**
     * @return UUID of the tunnel.
     * 
     */
    public Output<String> tunnelId() {
        return this.tunnelId;
    }

    private ZeroTrustTunnelCloudflaredConfigArgs() {}

    private ZeroTrustTunnelCloudflaredConfigArgs(ZeroTrustTunnelCloudflaredConfigArgs $) {
        this.accountId = $.accountId;
        this.config = $.config;
        this.source = $.source;
        this.tunnelId = $.tunnelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustTunnelCloudflaredConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustTunnelCloudflaredConfigArgs $;

        public Builder() {
            $ = new ZeroTrustTunnelCloudflaredConfigArgs();
        }

        public Builder(ZeroTrustTunnelCloudflaredConfigArgs defaults) {
            $ = new ZeroTrustTunnelCloudflaredConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param config The tunnel configuration and ingress rules.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<ZeroTrustTunnelCloudflaredConfigConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The tunnel configuration and ingress rules.
         * 
         * @return builder
         * 
         */
        public Builder config(ZeroTrustTunnelCloudflaredConfigConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param source Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel&#39;s configuration on the Zero Trust dashboard.
         * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel&#39;s configuration on the Zero Trust dashboard.
         * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tunnelId UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        public ZeroTrustTunnelCloudflaredConfigArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredConfigArgs", "accountId");
            }
            if ($.tunnelId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredConfigArgs", "tunnelId");
            }
            return $;
        }
    }

}
