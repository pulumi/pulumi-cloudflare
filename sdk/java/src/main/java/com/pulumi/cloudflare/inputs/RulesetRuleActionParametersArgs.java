// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersAlgorithmArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersAutominifyArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersBrowserTtlArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheReserveArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCookieFieldArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersEdgeTtlArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersFromListArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersFromValueArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersHeadersArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersMatchedDataArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOriginArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOverridesArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersRawResponseFieldArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersRequestFieldArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersResponseArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersResponseFieldArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersServeStaleArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersSniArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersTransformedRequestFieldArgs;
import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersUriArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleActionParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionParametersArgs Empty = new RulesetRuleActionParametersArgs();

    /**
     * List of additional ports that caching can be enabled on.
     * 
     */
    @Import(name="additionalCacheablePorts")
    private @Nullable Output<List<Integer>> additionalCacheablePorts;

    /**
     * @return List of additional ports that caching can be enabled on.
     * 
     */
    public Optional<Output<List<Integer>>> additionalCacheablePorts() {
        return Optional.ofNullable(this.additionalCacheablePorts);
    }

    /**
     * Custom order for compression algorithms.
     * 
     */
    @Import(name="algorithms")
    private @Nullable Output<List<RulesetRuleActionParametersAlgorithmArgs>> algorithms;

    /**
     * @return Custom order for compression algorithms.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersAlgorithmArgs>>> algorithms() {
        return Optional.ofNullable(this.algorithms);
    }

    /**
     * Turn on or off Automatic HTTPS Rewrites.
     * 
     */
    @Import(name="automaticHttpsRewrites")
    private @Nullable Output<Boolean> automaticHttpsRewrites;

    /**
     * @return Turn on or off Automatic HTTPS Rewrites.
     * 
     */
    public Optional<Output<Boolean>> automaticHttpsRewrites() {
        return Optional.ofNullable(this.automaticHttpsRewrites);
    }

    /**
     * Select which file extensions to minify automatically.
     * 
     */
    @Import(name="autominify")
    private @Nullable Output<RulesetRuleActionParametersAutominifyArgs> autominify;

    /**
     * @return Select which file extensions to minify automatically.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersAutominifyArgs>> autominify() {
        return Optional.ofNullable(this.autominify);
    }

    /**
     * Turn on or off Browser Integrity Check.
     * 
     */
    @Import(name="bic")
    private @Nullable Output<Boolean> bic;

    /**
     * @return Turn on or off Browser Integrity Check.
     * 
     */
    public Optional<Output<Boolean>> bic() {
        return Optional.ofNullable(this.bic);
    }

    /**
     * Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    @Import(name="browserTtl")
    private @Nullable Output<RulesetRuleActionParametersBrowserTtlArgs> browserTtl;

    /**
     * @return Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersBrowserTtlArgs>> browserTtl() {
        return Optional.ofNullable(this.browserTtl);
    }

    /**
     * Mark whether the request’s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
     * 
     */
    @Import(name="cache")
    private @Nullable Output<Boolean> cache;

    /**
     * @return Mark whether the request’s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
     * 
     */
    public Optional<Output<Boolean>> cache() {
        return Optional.ofNullable(this.cache);
    }

    /**
     * Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    @Import(name="cacheKey")
    private @Nullable Output<RulesetRuleActionParametersCacheKeyArgs> cacheKey;

    /**
     * @return Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersCacheKeyArgs>> cacheKey() {
        return Optional.ofNullable(this.cacheKey);
    }

    /**
     * Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    @Import(name="cacheReserve")
    private @Nullable Output<RulesetRuleActionParametersCacheReserveArgs> cacheReserve;

    /**
     * @return Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
     * 
     */
    public Optional<Output<RulesetRuleActionParametersCacheReserveArgs>> cacheReserve() {
        return Optional.ofNullable(this.cacheReserve);
    }

    /**
     * Error response content.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Error response content.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Content-type header to set with the response.
     * Available values: &#34;application/json&#34;, &#34;text/xml&#34;, &#34;text/plain&#34;, &#34;text/html&#34;.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return Content-type header to set with the response.
     * Available values: &#34;application/json&#34;, &#34;text/xml&#34;, &#34;text/plain&#34;, &#34;text/html&#34;.
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The cookie fields to log.
     * 
     */
    @Import(name="cookieFields")
    private @Nullable Output<List<RulesetRuleActionParametersCookieFieldArgs>> cookieFields;

    /**
     * @return The cookie fields to log.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersCookieFieldArgs>>> cookieFields() {
        return Optional.ofNullable(this.cookieFields);
    }

    /**
     * Turn off all active Cloudflare Apps.
     * 
     */
    @Import(name="disableApps")
    private @Nullable Output<Boolean> disableApps;

    /**
     * @return Turn off all active Cloudflare Apps.
     * 
     */
    public Optional<Output<Boolean>> disableApps() {
        return Optional.ofNullable(this.disableApps);
    }

    /**
     * Turn off Real User Monitoring (RUM).
     * 
     */
    @Import(name="disableRum")
    private @Nullable Output<Boolean> disableRum;

    /**
     * @return Turn off Real User Monitoring (RUM).
     * 
     */
    public Optional<Output<Boolean>> disableRum() {
        return Optional.ofNullable(this.disableRum);
    }

    /**
     * Turn off Zaraz.
     * 
     */
    @Import(name="disableZaraz")
    private @Nullable Output<Boolean> disableZaraz;

    /**
     * @return Turn off Zaraz.
     * 
     */
    public Optional<Output<Boolean>> disableZaraz() {
        return Optional.ofNullable(this.disableZaraz);
    }

    /**
     * TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
     * 
     */
    @Import(name="edgeTtl")
    private @Nullable Output<RulesetRuleActionParametersEdgeTtlArgs> edgeTtl;

    /**
     * @return TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersEdgeTtlArgs>> edgeTtl() {
        return Optional.ofNullable(this.edgeTtl);
    }

    /**
     * Turn on or off Email Obfuscation.
     * 
     */
    @Import(name="emailObfuscation")
    private @Nullable Output<Boolean> emailObfuscation;

    /**
     * @return Turn on or off Email Obfuscation.
     * 
     */
    public Optional<Output<Boolean>> emailObfuscation() {
        return Optional.ofNullable(this.emailObfuscation);
    }

    /**
     * Turn on or off Cloudflare Fonts.
     * 
     */
    @Import(name="fonts")
    private @Nullable Output<Boolean> fonts;

    /**
     * @return Turn on or off Cloudflare Fonts.
     * 
     */
    public Optional<Output<Boolean>> fonts() {
        return Optional.ofNullable(this.fonts);
    }

    /**
     * Serve a redirect based on a bulk list lookup.
     * 
     */
    @Import(name="fromList")
    private @Nullable Output<RulesetRuleActionParametersFromListArgs> fromList;

    /**
     * @return Serve a redirect based on a bulk list lookup.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersFromListArgs>> fromList() {
        return Optional.ofNullable(this.fromList);
    }

    /**
     * Serve a redirect based on the request properties.
     * 
     */
    @Import(name="fromValue")
    private @Nullable Output<RulesetRuleActionParametersFromValueArgs> fromValue;

    /**
     * @return Serve a redirect based on the request properties.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersFromValueArgs>> fromValue() {
        return Optional.ofNullable(this.fromValue);
    }

    /**
     * Map of request headers to modify.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<Map<String,RulesetRuleActionParametersHeadersArgs>> headers;

    /**
     * @return Map of request headers to modify.
     * 
     */
    public Optional<Output<Map<String,RulesetRuleActionParametersHeadersArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Rewrite the HTTP Host header.
     * 
     */
    @Import(name="hostHeader")
    private @Nullable Output<String> hostHeader;

    /**
     * @return Rewrite the HTTP Host header.
     * 
     */
    public Optional<Output<String>> hostHeader() {
        return Optional.ofNullable(this.hostHeader);
    }

    /**
     * Turn on or off the Hotlink Protection.
     * 
     */
    @Import(name="hotlinkProtection")
    private @Nullable Output<Boolean> hotlinkProtection;

    /**
     * @return Turn on or off the Hotlink Protection.
     * 
     */
    public Optional<Output<Boolean>> hotlinkProtection() {
        return Optional.ofNullable(this.hotlinkProtection);
    }

    /**
     * The ID of the ruleset to execute.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the ruleset to execute.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Increment contains the delta to change the score and can be either positive or negative.
     * 
     */
    @Import(name="increment")
    private @Nullable Output<Integer> increment;

    /**
     * @return Increment contains the delta to change the score and can be either positive or negative.
     * 
     */
    public Optional<Output<Integer>> increment() {
        return Optional.ofNullable(this.increment);
    }

    /**
     * The configuration to use for matched data logging.
     * 
     */
    @Import(name="matchedData")
    private @Nullable Output<RulesetRuleActionParametersMatchedDataArgs> matchedData;

    /**
     * @return The configuration to use for matched data logging.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersMatchedDataArgs>> matchedData() {
        return Optional.ofNullable(this.matchedData);
    }

    /**
     * Turn on or off Mirage.
     * 
     */
    @Import(name="mirage")
    private @Nullable Output<Boolean> mirage;

    /**
     * @return Turn on or off Mirage.
     * 
     */
    public Optional<Output<Boolean>> mirage() {
        return Optional.ofNullable(this.mirage);
    }

    /**
     * Turn on or off Opportunistic Encryption.
     * 
     */
    @Import(name="opportunisticEncryption")
    private @Nullable Output<Boolean> opportunisticEncryption;

    /**
     * @return Turn on or off Opportunistic Encryption.
     * 
     */
    public Optional<Output<Boolean>> opportunisticEncryption() {
        return Optional.ofNullable(this.opportunisticEncryption);
    }

    /**
     * Override the IP/TCP destination.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<RulesetRuleActionParametersOriginArgs> origin;

    /**
     * @return Override the IP/TCP destination.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersOriginArgs>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    @Import(name="originCacheControl")
    private @Nullable Output<Boolean> originCacheControl;

    /**
     * @return When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
     * 
     */
    public Optional<Output<Boolean>> originCacheControl() {
        return Optional.ofNullable(this.originCacheControl);
    }

    /**
     * Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
     * 
     */
    @Import(name="originErrorPagePassthru")
    private @Nullable Output<Boolean> originErrorPagePassthru;

    /**
     * @return Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
     * 
     */
    public Optional<Output<Boolean>> originErrorPagePassthru() {
        return Optional.ofNullable(this.originErrorPagePassthru);
    }

    /**
     * A set of overrides to apply to the target ruleset.
     * 
     */
    @Import(name="overrides")
    private @Nullable Output<RulesetRuleActionParametersOverridesArgs> overrides;

    /**
     * @return A set of overrides to apply to the target ruleset.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersOverridesArgs>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    /**
     * A list of phases to skip the execution of. This option is incompatible with the rulesets options.
     * 
     */
    @Import(name="phases")
    private @Nullable Output<List<String>> phases;

    /**
     * @return A list of phases to skip the execution of. This option is incompatible with the rulesets options.
     * 
     */
    public Optional<Output<List<String>>> phases() {
        return Optional.ofNullable(this.phases);
    }

    /**
     * Configure the Polish level.
     * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;.
     * 
     */
    @Import(name="polish")
    private @Nullable Output<String> polish;

    /**
     * @return Configure the Polish level.
     * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;.
     * 
     */
    public Optional<Output<String>> polish() {
        return Optional.ofNullable(this.polish);
    }

    /**
     * A list of legacy security products to skip the execution of.
     * 
     */
    @Import(name="products")
    private @Nullable Output<List<String>> products;

    /**
     * @return A list of legacy security products to skip the execution of.
     * 
     */
    public Optional<Output<List<String>>> products() {
        return Optional.ofNullable(this.products);
    }

    /**
     * The raw response fields to log.
     * 
     */
    @Import(name="rawResponseFields")
    private @Nullable Output<List<RulesetRuleActionParametersRawResponseFieldArgs>> rawResponseFields;

    /**
     * @return The raw response fields to log.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersRawResponseFieldArgs>>> rawResponseFields() {
        return Optional.ofNullable(this.rawResponseFields);
    }

    /**
     * Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    @Import(name="readTimeout")
    private @Nullable Output<Integer> readTimeout;

    /**
     * @return Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
     * 
     */
    public Optional<Output<Integer>> readTimeout() {
        return Optional.ofNullable(this.readTimeout);
    }

    /**
     * The raw request fields to log.
     * 
     */
    @Import(name="requestFields")
    private @Nullable Output<List<RulesetRuleActionParametersRequestFieldArgs>> requestFields;

    /**
     * @return The raw request fields to log.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersRequestFieldArgs>>> requestFields() {
        return Optional.ofNullable(this.requestFields);
    }

    /**
     * Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    @Import(name="respectStrongEtags")
    private @Nullable Output<Boolean> respectStrongEtags;

    /**
     * @return Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
     * 
     */
    public Optional<Output<Boolean>> respectStrongEtags() {
        return Optional.ofNullable(this.respectStrongEtags);
    }

    /**
     * The response to show when the block is applied.
     * 
     */
    @Import(name="response")
    private @Nullable Output<RulesetRuleActionParametersResponseArgs> response;

    /**
     * @return The response to show when the block is applied.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersResponseArgs>> response() {
        return Optional.ofNullable(this.response);
    }

    /**
     * The transformed response fields to log.
     * 
     */
    @Import(name="responseFields")
    private @Nullable Output<List<RulesetRuleActionParametersResponseFieldArgs>> responseFields;

    /**
     * @return The transformed response fields to log.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersResponseFieldArgs>>> responseFields() {
        return Optional.ofNullable(this.responseFields);
    }

    /**
     * Turn on or off Rocket Loader
     * 
     */
    @Import(name="rocketLoader")
    private @Nullable Output<Boolean> rocketLoader;

    /**
     * @return Turn on or off Rocket Loader
     * 
     */
    public Optional<Output<Boolean>> rocketLoader() {
        return Optional.ofNullable(this.rocketLoader);
    }

    /**
     * A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<Map<String,List<String>>> rules;

    /**
     * @return A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * A ruleset to skip the execution of. This option is incompatible with the rulesets, rules. It can be incompatible with phases options base on the phase of the ruleset.
     * Available values: &#34;current&#34;.
     * 
     */
    @Import(name="ruleset")
    private @Nullable Output<String> ruleset;

    /**
     * @return A ruleset to skip the execution of. This option is incompatible with the rulesets, rules. It can be incompatible with phases options base on the phase of the ruleset.
     * Available values: &#34;current&#34;.
     * 
     */
    public Optional<Output<String>> ruleset() {
        return Optional.ofNullable(this.ruleset);
    }

    /**
     * A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    @Import(name="rulesets")
    private @Nullable Output<List<String>> rulesets;

    /**
     * @return A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
     * 
     */
    public Optional<Output<List<String>>> rulesets() {
        return Optional.ofNullable(this.rulesets);
    }

    /**
     * Configure the Security Level.
     * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
     * 
     */
    @Import(name="securityLevel")
    private @Nullable Output<String> securityLevel;

    /**
     * @return Configure the Security Level.
     * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
     * 
     */
    public Optional<Output<String>> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }

    /**
     * Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
     * 
     */
    @Import(name="serveStale")
    private @Nullable Output<RulesetRuleActionParametersServeStaleArgs> serveStale;

    /**
     * @return Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersServeStaleArgs>> serveStale() {
        return Optional.ofNullable(this.serveStale);
    }

    /**
     * Turn on or off Server Side Excludes.
     * 
     */
    @Import(name="serverSideExcludes")
    private @Nullable Output<Boolean> serverSideExcludes;

    /**
     * @return Turn on or off Server Side Excludes.
     * 
     */
    public Optional<Output<Boolean>> serverSideExcludes() {
        return Optional.ofNullable(this.serverSideExcludes);
    }

    /**
     * Override the Server Name Indication (SNI).
     * 
     */
    @Import(name="sni")
    private @Nullable Output<RulesetRuleActionParametersSniArgs> sni;

    /**
     * @return Override the Server Name Indication (SNI).
     * 
     */
    public Optional<Output<RulesetRuleActionParametersSniArgs>> sni() {
        return Optional.ofNullable(this.sni);
    }

    /**
     * Configure the SSL level.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<String> ssl;

    /**
     * @return Configure the SSL level.
     * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
     * 
     */
    public Optional<Output<String>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * The status code to use for the error.
     * 
     */
    @Import(name="statusCode")
    private @Nullable Output<Double> statusCode;

    /**
     * @return The status code to use for the error.
     * 
     */
    public Optional<Output<Double>> statusCode() {
        return Optional.ofNullable(this.statusCode);
    }

    /**
     * Turn on or off Signed Exchanges (SXG).
     * 
     */
    @Import(name="sxg")
    private @Nullable Output<Boolean> sxg;

    /**
     * @return Turn on or off Signed Exchanges (SXG).
     * 
     */
    public Optional<Output<Boolean>> sxg() {
        return Optional.ofNullable(this.sxg);
    }

    /**
     * The transformed request fields to log.
     * 
     */
    @Import(name="transformedRequestFields")
    private @Nullable Output<List<RulesetRuleActionParametersTransformedRequestFieldArgs>> transformedRequestFields;

    /**
     * @return The transformed request fields to log.
     * 
     */
    public Optional<Output<List<RulesetRuleActionParametersTransformedRequestFieldArgs>>> transformedRequestFields() {
        return Optional.ofNullable(this.transformedRequestFields);
    }

    /**
     * URI to rewrite the request to.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<RulesetRuleActionParametersUriArgs> uri;

    /**
     * @return URI to rewrite the request to.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersUriArgs>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private RulesetRuleActionParametersArgs() {}

    private RulesetRuleActionParametersArgs(RulesetRuleActionParametersArgs $) {
        this.additionalCacheablePorts = $.additionalCacheablePorts;
        this.algorithms = $.algorithms;
        this.automaticHttpsRewrites = $.automaticHttpsRewrites;
        this.autominify = $.autominify;
        this.bic = $.bic;
        this.browserTtl = $.browserTtl;
        this.cache = $.cache;
        this.cacheKey = $.cacheKey;
        this.cacheReserve = $.cacheReserve;
        this.content = $.content;
        this.contentType = $.contentType;
        this.cookieFields = $.cookieFields;
        this.disableApps = $.disableApps;
        this.disableRum = $.disableRum;
        this.disableZaraz = $.disableZaraz;
        this.edgeTtl = $.edgeTtl;
        this.emailObfuscation = $.emailObfuscation;
        this.fonts = $.fonts;
        this.fromList = $.fromList;
        this.fromValue = $.fromValue;
        this.headers = $.headers;
        this.hostHeader = $.hostHeader;
        this.hotlinkProtection = $.hotlinkProtection;
        this.id = $.id;
        this.increment = $.increment;
        this.matchedData = $.matchedData;
        this.mirage = $.mirage;
        this.opportunisticEncryption = $.opportunisticEncryption;
        this.origin = $.origin;
        this.originCacheControl = $.originCacheControl;
        this.originErrorPagePassthru = $.originErrorPagePassthru;
        this.overrides = $.overrides;
        this.phases = $.phases;
        this.polish = $.polish;
        this.products = $.products;
        this.rawResponseFields = $.rawResponseFields;
        this.readTimeout = $.readTimeout;
        this.requestFields = $.requestFields;
        this.respectStrongEtags = $.respectStrongEtags;
        this.response = $.response;
        this.responseFields = $.responseFields;
        this.rocketLoader = $.rocketLoader;
        this.rules = $.rules;
        this.ruleset = $.ruleset;
        this.rulesets = $.rulesets;
        this.securityLevel = $.securityLevel;
        this.serveStale = $.serveStale;
        this.serverSideExcludes = $.serverSideExcludes;
        this.sni = $.sni;
        this.ssl = $.ssl;
        this.statusCode = $.statusCode;
        this.sxg = $.sxg;
        this.transformedRequestFields = $.transformedRequestFields;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionParametersArgs $;

        public Builder() {
            $ = new RulesetRuleActionParametersArgs();
        }

        public Builder(RulesetRuleActionParametersArgs defaults) {
            $ = new RulesetRuleActionParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalCacheablePorts List of additional ports that caching can be enabled on.
         * 
         * @return builder
         * 
         */
        public Builder additionalCacheablePorts(@Nullable Output<List<Integer>> additionalCacheablePorts) {
            $.additionalCacheablePorts = additionalCacheablePorts;
            return this;
        }

        /**
         * @param additionalCacheablePorts List of additional ports that caching can be enabled on.
         * 
         * @return builder
         * 
         */
        public Builder additionalCacheablePorts(List<Integer> additionalCacheablePorts) {
            return additionalCacheablePorts(Output.of(additionalCacheablePorts));
        }

        /**
         * @param additionalCacheablePorts List of additional ports that caching can be enabled on.
         * 
         * @return builder
         * 
         */
        public Builder additionalCacheablePorts(Integer... additionalCacheablePorts) {
            return additionalCacheablePorts(List.of(additionalCacheablePorts));
        }

        /**
         * @param algorithms Custom order for compression algorithms.
         * 
         * @return builder
         * 
         */
        public Builder algorithms(@Nullable Output<List<RulesetRuleActionParametersAlgorithmArgs>> algorithms) {
            $.algorithms = algorithms;
            return this;
        }

        /**
         * @param algorithms Custom order for compression algorithms.
         * 
         * @return builder
         * 
         */
        public Builder algorithms(List<RulesetRuleActionParametersAlgorithmArgs> algorithms) {
            return algorithms(Output.of(algorithms));
        }

        /**
         * @param algorithms Custom order for compression algorithms.
         * 
         * @return builder
         * 
         */
        public Builder algorithms(RulesetRuleActionParametersAlgorithmArgs... algorithms) {
            return algorithms(List.of(algorithms));
        }

        /**
         * @param automaticHttpsRewrites Turn on or off Automatic HTTPS Rewrites.
         * 
         * @return builder
         * 
         */
        public Builder automaticHttpsRewrites(@Nullable Output<Boolean> automaticHttpsRewrites) {
            $.automaticHttpsRewrites = automaticHttpsRewrites;
            return this;
        }

        /**
         * @param automaticHttpsRewrites Turn on or off Automatic HTTPS Rewrites.
         * 
         * @return builder
         * 
         */
        public Builder automaticHttpsRewrites(Boolean automaticHttpsRewrites) {
            return automaticHttpsRewrites(Output.of(automaticHttpsRewrites));
        }

        /**
         * @param autominify Select which file extensions to minify automatically.
         * 
         * @return builder
         * 
         */
        public Builder autominify(@Nullable Output<RulesetRuleActionParametersAutominifyArgs> autominify) {
            $.autominify = autominify;
            return this;
        }

        /**
         * @param autominify Select which file extensions to minify automatically.
         * 
         * @return builder
         * 
         */
        public Builder autominify(RulesetRuleActionParametersAutominifyArgs autominify) {
            return autominify(Output.of(autominify));
        }

        /**
         * @param bic Turn on or off Browser Integrity Check.
         * 
         * @return builder
         * 
         */
        public Builder bic(@Nullable Output<Boolean> bic) {
            $.bic = bic;
            return this;
        }

        /**
         * @param bic Turn on or off Browser Integrity Check.
         * 
         * @return builder
         * 
         */
        public Builder bic(Boolean bic) {
            return bic(Output.of(bic));
        }

        /**
         * @param browserTtl Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
         * 
         * @return builder
         * 
         */
        public Builder browserTtl(@Nullable Output<RulesetRuleActionParametersBrowserTtlArgs> browserTtl) {
            $.browserTtl = browserTtl;
            return this;
        }

        /**
         * @param browserTtl Specify how long client browsers should cache the response. Cloudflare cache purge will not purge content cached on client browsers, so high browser TTLs may lead to stale content.
         * 
         * @return builder
         * 
         */
        public Builder browserTtl(RulesetRuleActionParametersBrowserTtlArgs browserTtl) {
            return browserTtl(Output.of(browserTtl));
        }

        /**
         * @param cache Mark whether the request’s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
         * 
         * @return builder
         * 
         */
        public Builder cache(@Nullable Output<Boolean> cache) {
            $.cache = cache;
            return this;
        }

        /**
         * @param cache Mark whether the request’s response from origin is eligible for caching. Caching itself will still depend on the cache-control header and your other caching configurations.
         * 
         * @return builder
         * 
         */
        public Builder cache(Boolean cache) {
            return cache(Output.of(cache));
        }

        /**
         * @param cacheKey Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheKey(@Nullable Output<RulesetRuleActionParametersCacheKeyArgs> cacheKey) {
            $.cacheKey = cacheKey;
            return this;
        }

        /**
         * @param cacheKey Define which components of the request are included or excluded from the cache key Cloudflare uses to store the response in cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheKey(RulesetRuleActionParametersCacheKeyArgs cacheKey) {
            return cacheKey(Output.of(cacheKey));
        }

        /**
         * @param cacheReserve Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
         * 
         * @return builder
         * 
         */
        public Builder cacheReserve(@Nullable Output<RulesetRuleActionParametersCacheReserveArgs> cacheReserve) {
            $.cacheReserve = cacheReserve;
            return this;
        }

        /**
         * @param cacheReserve Mark whether the request&#39;s response from origin is eligible for Cache Reserve (requires a Cache Reserve add-on plan).
         * 
         * @return builder
         * 
         */
        public Builder cacheReserve(RulesetRuleActionParametersCacheReserveArgs cacheReserve) {
            return cacheReserve(Output.of(cacheReserve));
        }

        /**
         * @param content Error response content.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Error response content.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentType Content-type header to set with the response.
         * Available values: &#34;application/json&#34;, &#34;text/xml&#34;, &#34;text/plain&#34;, &#34;text/html&#34;.
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType Content-type header to set with the response.
         * Available values: &#34;application/json&#34;, &#34;text/xml&#34;, &#34;text/plain&#34;, &#34;text/html&#34;.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param cookieFields The cookie fields to log.
         * 
         * @return builder
         * 
         */
        public Builder cookieFields(@Nullable Output<List<RulesetRuleActionParametersCookieFieldArgs>> cookieFields) {
            $.cookieFields = cookieFields;
            return this;
        }

        /**
         * @param cookieFields The cookie fields to log.
         * 
         * @return builder
         * 
         */
        public Builder cookieFields(List<RulesetRuleActionParametersCookieFieldArgs> cookieFields) {
            return cookieFields(Output.of(cookieFields));
        }

        /**
         * @param cookieFields The cookie fields to log.
         * 
         * @return builder
         * 
         */
        public Builder cookieFields(RulesetRuleActionParametersCookieFieldArgs... cookieFields) {
            return cookieFields(List.of(cookieFields));
        }

        /**
         * @param disableApps Turn off all active Cloudflare Apps.
         * 
         * @return builder
         * 
         */
        public Builder disableApps(@Nullable Output<Boolean> disableApps) {
            $.disableApps = disableApps;
            return this;
        }

        /**
         * @param disableApps Turn off all active Cloudflare Apps.
         * 
         * @return builder
         * 
         */
        public Builder disableApps(Boolean disableApps) {
            return disableApps(Output.of(disableApps));
        }

        /**
         * @param disableRum Turn off Real User Monitoring (RUM).
         * 
         * @return builder
         * 
         */
        public Builder disableRum(@Nullable Output<Boolean> disableRum) {
            $.disableRum = disableRum;
            return this;
        }

        /**
         * @param disableRum Turn off Real User Monitoring (RUM).
         * 
         * @return builder
         * 
         */
        public Builder disableRum(Boolean disableRum) {
            return disableRum(Output.of(disableRum));
        }

        /**
         * @param disableZaraz Turn off Zaraz.
         * 
         * @return builder
         * 
         */
        public Builder disableZaraz(@Nullable Output<Boolean> disableZaraz) {
            $.disableZaraz = disableZaraz;
            return this;
        }

        /**
         * @param disableZaraz Turn off Zaraz.
         * 
         * @return builder
         * 
         */
        public Builder disableZaraz(Boolean disableZaraz) {
            return disableZaraz(Output.of(disableZaraz));
        }

        /**
         * @param edgeTtl TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
         * 
         * @return builder
         * 
         */
        public Builder edgeTtl(@Nullable Output<RulesetRuleActionParametersEdgeTtlArgs> edgeTtl) {
            $.edgeTtl = edgeTtl;
            return this;
        }

        /**
         * @param edgeTtl TTL (Time to Live) specifies the maximum time to cache a resource in the Cloudflare edge network.
         * 
         * @return builder
         * 
         */
        public Builder edgeTtl(RulesetRuleActionParametersEdgeTtlArgs edgeTtl) {
            return edgeTtl(Output.of(edgeTtl));
        }

        /**
         * @param emailObfuscation Turn on or off Email Obfuscation.
         * 
         * @return builder
         * 
         */
        public Builder emailObfuscation(@Nullable Output<Boolean> emailObfuscation) {
            $.emailObfuscation = emailObfuscation;
            return this;
        }

        /**
         * @param emailObfuscation Turn on or off Email Obfuscation.
         * 
         * @return builder
         * 
         */
        public Builder emailObfuscation(Boolean emailObfuscation) {
            return emailObfuscation(Output.of(emailObfuscation));
        }

        /**
         * @param fonts Turn on or off Cloudflare Fonts.
         * 
         * @return builder
         * 
         */
        public Builder fonts(@Nullable Output<Boolean> fonts) {
            $.fonts = fonts;
            return this;
        }

        /**
         * @param fonts Turn on or off Cloudflare Fonts.
         * 
         * @return builder
         * 
         */
        public Builder fonts(Boolean fonts) {
            return fonts(Output.of(fonts));
        }

        /**
         * @param fromList Serve a redirect based on a bulk list lookup.
         * 
         * @return builder
         * 
         */
        public Builder fromList(@Nullable Output<RulesetRuleActionParametersFromListArgs> fromList) {
            $.fromList = fromList;
            return this;
        }

        /**
         * @param fromList Serve a redirect based on a bulk list lookup.
         * 
         * @return builder
         * 
         */
        public Builder fromList(RulesetRuleActionParametersFromListArgs fromList) {
            return fromList(Output.of(fromList));
        }

        /**
         * @param fromValue Serve a redirect based on the request properties.
         * 
         * @return builder
         * 
         */
        public Builder fromValue(@Nullable Output<RulesetRuleActionParametersFromValueArgs> fromValue) {
            $.fromValue = fromValue;
            return this;
        }

        /**
         * @param fromValue Serve a redirect based on the request properties.
         * 
         * @return builder
         * 
         */
        public Builder fromValue(RulesetRuleActionParametersFromValueArgs fromValue) {
            return fromValue(Output.of(fromValue));
        }

        /**
         * @param headers Map of request headers to modify.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<Map<String,RulesetRuleActionParametersHeadersArgs>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Map of request headers to modify.
         * 
         * @return builder
         * 
         */
        public Builder headers(Map<String,RulesetRuleActionParametersHeadersArgs> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param hostHeader Rewrite the HTTP Host header.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(@Nullable Output<String> hostHeader) {
            $.hostHeader = hostHeader;
            return this;
        }

        /**
         * @param hostHeader Rewrite the HTTP Host header.
         * 
         * @return builder
         * 
         */
        public Builder hostHeader(String hostHeader) {
            return hostHeader(Output.of(hostHeader));
        }

        /**
         * @param hotlinkProtection Turn on or off the Hotlink Protection.
         * 
         * @return builder
         * 
         */
        public Builder hotlinkProtection(@Nullable Output<Boolean> hotlinkProtection) {
            $.hotlinkProtection = hotlinkProtection;
            return this;
        }

        /**
         * @param hotlinkProtection Turn on or off the Hotlink Protection.
         * 
         * @return builder
         * 
         */
        public Builder hotlinkProtection(Boolean hotlinkProtection) {
            return hotlinkProtection(Output.of(hotlinkProtection));
        }

        /**
         * @param id The ID of the ruleset to execute.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the ruleset to execute.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param increment Increment contains the delta to change the score and can be either positive or negative.
         * 
         * @return builder
         * 
         */
        public Builder increment(@Nullable Output<Integer> increment) {
            $.increment = increment;
            return this;
        }

        /**
         * @param increment Increment contains the delta to change the score and can be either positive or negative.
         * 
         * @return builder
         * 
         */
        public Builder increment(Integer increment) {
            return increment(Output.of(increment));
        }

        /**
         * @param matchedData The configuration to use for matched data logging.
         * 
         * @return builder
         * 
         */
        public Builder matchedData(@Nullable Output<RulesetRuleActionParametersMatchedDataArgs> matchedData) {
            $.matchedData = matchedData;
            return this;
        }

        /**
         * @param matchedData The configuration to use for matched data logging.
         * 
         * @return builder
         * 
         */
        public Builder matchedData(RulesetRuleActionParametersMatchedDataArgs matchedData) {
            return matchedData(Output.of(matchedData));
        }

        /**
         * @param mirage Turn on or off Mirage.
         * 
         * @return builder
         * 
         */
        public Builder mirage(@Nullable Output<Boolean> mirage) {
            $.mirage = mirage;
            return this;
        }

        /**
         * @param mirage Turn on or off Mirage.
         * 
         * @return builder
         * 
         */
        public Builder mirage(Boolean mirage) {
            return mirage(Output.of(mirage));
        }

        /**
         * @param opportunisticEncryption Turn on or off Opportunistic Encryption.
         * 
         * @return builder
         * 
         */
        public Builder opportunisticEncryption(@Nullable Output<Boolean> opportunisticEncryption) {
            $.opportunisticEncryption = opportunisticEncryption;
            return this;
        }

        /**
         * @param opportunisticEncryption Turn on or off Opportunistic Encryption.
         * 
         * @return builder
         * 
         */
        public Builder opportunisticEncryption(Boolean opportunisticEncryption) {
            return opportunisticEncryption(Output.of(opportunisticEncryption));
        }

        /**
         * @param origin Override the IP/TCP destination.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<RulesetRuleActionParametersOriginArgs> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin Override the IP/TCP destination.
         * 
         * @return builder
         * 
         */
        public Builder origin(RulesetRuleActionParametersOriginArgs origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param originCacheControl When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
         * 
         * @return builder
         * 
         */
        public Builder originCacheControl(@Nullable Output<Boolean> originCacheControl) {
            $.originCacheControl = originCacheControl;
            return this;
        }

        /**
         * @param originCacheControl When enabled, Cloudflare will aim to strictly adhere to RFC 7234.
         * 
         * @return builder
         * 
         */
        public Builder originCacheControl(Boolean originCacheControl) {
            return originCacheControl(Output.of(originCacheControl));
        }

        /**
         * @param originErrorPagePassthru Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
         * 
         * @return builder
         * 
         */
        public Builder originErrorPagePassthru(@Nullable Output<Boolean> originErrorPagePassthru) {
            $.originErrorPagePassthru = originErrorPagePassthru;
            return this;
        }

        /**
         * @param originErrorPagePassthru Generate Cloudflare error pages from issues sent from the origin server. When on, error pages will trigger for issues from the origin
         * 
         * @return builder
         * 
         */
        public Builder originErrorPagePassthru(Boolean originErrorPagePassthru) {
            return originErrorPagePassthru(Output.of(originErrorPagePassthru));
        }

        /**
         * @param overrides A set of overrides to apply to the target ruleset.
         * 
         * @return builder
         * 
         */
        public Builder overrides(@Nullable Output<RulesetRuleActionParametersOverridesArgs> overrides) {
            $.overrides = overrides;
            return this;
        }

        /**
         * @param overrides A set of overrides to apply to the target ruleset.
         * 
         * @return builder
         * 
         */
        public Builder overrides(RulesetRuleActionParametersOverridesArgs overrides) {
            return overrides(Output.of(overrides));
        }

        /**
         * @param phases A list of phases to skip the execution of. This option is incompatible with the rulesets options.
         * 
         * @return builder
         * 
         */
        public Builder phases(@Nullable Output<List<String>> phases) {
            $.phases = phases;
            return this;
        }

        /**
         * @param phases A list of phases to skip the execution of. This option is incompatible with the rulesets options.
         * 
         * @return builder
         * 
         */
        public Builder phases(List<String> phases) {
            return phases(Output.of(phases));
        }

        /**
         * @param phases A list of phases to skip the execution of. This option is incompatible with the rulesets options.
         * 
         * @return builder
         * 
         */
        public Builder phases(String... phases) {
            return phases(List.of(phases));
        }

        /**
         * @param polish Configure the Polish level.
         * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;.
         * 
         * @return builder
         * 
         */
        public Builder polish(@Nullable Output<String> polish) {
            $.polish = polish;
            return this;
        }

        /**
         * @param polish Configure the Polish level.
         * Available values: &#34;off&#34;, &#34;lossless&#34;, &#34;lossy&#34;.
         * 
         * @return builder
         * 
         */
        public Builder polish(String polish) {
            return polish(Output.of(polish));
        }

        /**
         * @param products A list of legacy security products to skip the execution of.
         * 
         * @return builder
         * 
         */
        public Builder products(@Nullable Output<List<String>> products) {
            $.products = products;
            return this;
        }

        /**
         * @param products A list of legacy security products to skip the execution of.
         * 
         * @return builder
         * 
         */
        public Builder products(List<String> products) {
            return products(Output.of(products));
        }

        /**
         * @param products A list of legacy security products to skip the execution of.
         * 
         * @return builder
         * 
         */
        public Builder products(String... products) {
            return products(List.of(products));
        }

        /**
         * @param rawResponseFields The raw response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder rawResponseFields(@Nullable Output<List<RulesetRuleActionParametersRawResponseFieldArgs>> rawResponseFields) {
            $.rawResponseFields = rawResponseFields;
            return this;
        }

        /**
         * @param rawResponseFields The raw response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder rawResponseFields(List<RulesetRuleActionParametersRawResponseFieldArgs> rawResponseFields) {
            return rawResponseFields(Output.of(rawResponseFields));
        }

        /**
         * @param rawResponseFields The raw response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder rawResponseFields(RulesetRuleActionParametersRawResponseFieldArgs... rawResponseFields) {
            return rawResponseFields(List.of(rawResponseFields));
        }

        /**
         * @param readTimeout Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(@Nullable Output<Integer> readTimeout) {
            $.readTimeout = readTimeout;
            return this;
        }

        /**
         * @param readTimeout Define a timeout value between two successive read operations to your origin server. Historically, the timeout value between two read options from Cloudflare to an origin server is 100 seconds. If you are attempting to reduce HTTP 524 errors because of timeouts from an origin server, try increasing this timeout value.
         * 
         * @return builder
         * 
         */
        public Builder readTimeout(Integer readTimeout) {
            return readTimeout(Output.of(readTimeout));
        }

        /**
         * @param requestFields The raw request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder requestFields(@Nullable Output<List<RulesetRuleActionParametersRequestFieldArgs>> requestFields) {
            $.requestFields = requestFields;
            return this;
        }

        /**
         * @param requestFields The raw request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder requestFields(List<RulesetRuleActionParametersRequestFieldArgs> requestFields) {
            return requestFields(Output.of(requestFields));
        }

        /**
         * @param requestFields The raw request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder requestFields(RulesetRuleActionParametersRequestFieldArgs... requestFields) {
            return requestFields(List.of(requestFields));
        }

        /**
         * @param respectStrongEtags Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
         * 
         * @return builder
         * 
         */
        public Builder respectStrongEtags(@Nullable Output<Boolean> respectStrongEtags) {
            $.respectStrongEtags = respectStrongEtags;
            return this;
        }

        /**
         * @param respectStrongEtags Specify whether or not Cloudflare should respect strong ETag (entity tag) headers. When off, Cloudflare converts strong ETag headers to weak ETag headers.
         * 
         * @return builder
         * 
         */
        public Builder respectStrongEtags(Boolean respectStrongEtags) {
            return respectStrongEtags(Output.of(respectStrongEtags));
        }

        /**
         * @param response The response to show when the block is applied.
         * 
         * @return builder
         * 
         */
        public Builder response(@Nullable Output<RulesetRuleActionParametersResponseArgs> response) {
            $.response = response;
            return this;
        }

        /**
         * @param response The response to show when the block is applied.
         * 
         * @return builder
         * 
         */
        public Builder response(RulesetRuleActionParametersResponseArgs response) {
            return response(Output.of(response));
        }

        /**
         * @param responseFields The transformed response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder responseFields(@Nullable Output<List<RulesetRuleActionParametersResponseFieldArgs>> responseFields) {
            $.responseFields = responseFields;
            return this;
        }

        /**
         * @param responseFields The transformed response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder responseFields(List<RulesetRuleActionParametersResponseFieldArgs> responseFields) {
            return responseFields(Output.of(responseFields));
        }

        /**
         * @param responseFields The transformed response fields to log.
         * 
         * @return builder
         * 
         */
        public Builder responseFields(RulesetRuleActionParametersResponseFieldArgs... responseFields) {
            return responseFields(List.of(responseFields));
        }

        /**
         * @param rocketLoader Turn on or off Rocket Loader
         * 
         * @return builder
         * 
         */
        public Builder rocketLoader(@Nullable Output<Boolean> rocketLoader) {
            $.rocketLoader = rocketLoader;
            return this;
        }

        /**
         * @param rocketLoader Turn on or off Rocket Loader
         * 
         * @return builder
         * 
         */
        public Builder rocketLoader(Boolean rocketLoader) {
            return rocketLoader(Output.of(rocketLoader));
        }

        /**
         * @param rules A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<Map<String,List<String>>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A mapping of ruleset IDs to a list of rule IDs in that ruleset to skip the execution of. This option is incompatible with the ruleset option.
         * 
         * @return builder
         * 
         */
        public Builder rules(Map<String,List<String>> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param ruleset A ruleset to skip the execution of. This option is incompatible with the rulesets, rules. It can be incompatible with phases options base on the phase of the ruleset.
         * Available values: &#34;current&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ruleset(@Nullable Output<String> ruleset) {
            $.ruleset = ruleset;
            return this;
        }

        /**
         * @param ruleset A ruleset to skip the execution of. This option is incompatible with the rulesets, rules. It can be incompatible with phases options base on the phase of the ruleset.
         * Available values: &#34;current&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ruleset(String ruleset) {
            return ruleset(Output.of(ruleset));
        }

        /**
         * @param rulesets A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
         * 
         * @return builder
         * 
         */
        public Builder rulesets(@Nullable Output<List<String>> rulesets) {
            $.rulesets = rulesets;
            return this;
        }

        /**
         * @param rulesets A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
         * 
         * @return builder
         * 
         */
        public Builder rulesets(List<String> rulesets) {
            return rulesets(Output.of(rulesets));
        }

        /**
         * @param rulesets A list of ruleset IDs to skip the execution of. This option is incompatible with the ruleset and phases options.
         * 
         * @return builder
         * 
         */
        public Builder rulesets(String... rulesets) {
            return rulesets(List.of(rulesets));
        }

        /**
         * @param securityLevel Configure the Security Level.
         * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(@Nullable Output<String> securityLevel) {
            $.securityLevel = securityLevel;
            return this;
        }

        /**
         * @param securityLevel Configure the Security Level.
         * Available values: &#34;off&#34;, &#34;essentially*off&#34;, &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;under*attack&#34;.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(String securityLevel) {
            return securityLevel(Output.of(securityLevel));
        }

        /**
         * @param serveStale Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
         * 
         * @return builder
         * 
         */
        public Builder serveStale(@Nullable Output<RulesetRuleActionParametersServeStaleArgs> serveStale) {
            $.serveStale = serveStale;
            return this;
        }

        /**
         * @param serveStale Define if Cloudflare should serve stale content while getting the latest content from the origin. If on, Cloudflare will not serve stale content while getting the latest content from the origin.
         * 
         * @return builder
         * 
         */
        public Builder serveStale(RulesetRuleActionParametersServeStaleArgs serveStale) {
            return serveStale(Output.of(serveStale));
        }

        /**
         * @param serverSideExcludes Turn on or off Server Side Excludes.
         * 
         * @return builder
         * 
         */
        public Builder serverSideExcludes(@Nullable Output<Boolean> serverSideExcludes) {
            $.serverSideExcludes = serverSideExcludes;
            return this;
        }

        /**
         * @param serverSideExcludes Turn on or off Server Side Excludes.
         * 
         * @return builder
         * 
         */
        public Builder serverSideExcludes(Boolean serverSideExcludes) {
            return serverSideExcludes(Output.of(serverSideExcludes));
        }

        /**
         * @param sni Override the Server Name Indication (SNI).
         * 
         * @return builder
         * 
         */
        public Builder sni(@Nullable Output<RulesetRuleActionParametersSniArgs> sni) {
            $.sni = sni;
            return this;
        }

        /**
         * @param sni Override the Server Name Indication (SNI).
         * 
         * @return builder
         * 
         */
        public Builder sni(RulesetRuleActionParametersSniArgs sni) {
            return sni(Output.of(sni));
        }

        /**
         * @param ssl Configure the SSL level.
         * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<String> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl Configure the SSL level.
         * Available values: &#34;off&#34;, &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ssl(String ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param statusCode The status code to use for the error.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(@Nullable Output<Double> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        /**
         * @param statusCode The status code to use for the error.
         * 
         * @return builder
         * 
         */
        public Builder statusCode(Double statusCode) {
            return statusCode(Output.of(statusCode));
        }

        /**
         * @param sxg Turn on or off Signed Exchanges (SXG).
         * 
         * @return builder
         * 
         */
        public Builder sxg(@Nullable Output<Boolean> sxg) {
            $.sxg = sxg;
            return this;
        }

        /**
         * @param sxg Turn on or off Signed Exchanges (SXG).
         * 
         * @return builder
         * 
         */
        public Builder sxg(Boolean sxg) {
            return sxg(Output.of(sxg));
        }

        /**
         * @param transformedRequestFields The transformed request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder transformedRequestFields(@Nullable Output<List<RulesetRuleActionParametersTransformedRequestFieldArgs>> transformedRequestFields) {
            $.transformedRequestFields = transformedRequestFields;
            return this;
        }

        /**
         * @param transformedRequestFields The transformed request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder transformedRequestFields(List<RulesetRuleActionParametersTransformedRequestFieldArgs> transformedRequestFields) {
            return transformedRequestFields(Output.of(transformedRequestFields));
        }

        /**
         * @param transformedRequestFields The transformed request fields to log.
         * 
         * @return builder
         * 
         */
        public Builder transformedRequestFields(RulesetRuleActionParametersTransformedRequestFieldArgs... transformedRequestFields) {
            return transformedRequestFields(List.of(transformedRequestFields));
        }

        /**
         * @param uri URI to rewrite the request to.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<RulesetRuleActionParametersUriArgs> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri URI to rewrite the request to.
         * 
         * @return builder
         * 
         */
        public Builder uri(RulesetRuleActionParametersUriArgs uri) {
            return uri(Output.of(uri));
        }

        public RulesetRuleActionParametersArgs build() {
            return $;
        }
    }

}
