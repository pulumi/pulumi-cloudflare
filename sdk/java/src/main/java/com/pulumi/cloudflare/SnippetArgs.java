// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.SnippetFileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnippetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnippetArgs Empty = new SnippetArgs();

    /**
     * List of Snippet Files
     * 
     */
    @Import(name="files")
    private @Nullable Output<List<SnippetFileArgs>> files;

    /**
     * @return List of Snippet Files
     * 
     */
    public Optional<Output<List<SnippetFileArgs>>> files() {
        return Optional.ofNullable(this.files);
    }

    /**
     * Main module file name of the snippet.
     * 
     */
    @Import(name="mainModule", required=true)
    private Output<String> mainModule;

    /**
     * @return Main module file name of the snippet.
     * 
     */
    public Output<String> mainModule() {
        return this.mainModule;
    }

    /**
     * Name of the snippet.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the snippet.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The zone identifier to target for the resource.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private SnippetArgs() {}

    private SnippetArgs(SnippetArgs $) {
        this.files = $.files;
        this.mainModule = $.mainModule;
        this.name = $.name;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetArgs $;

        public Builder() {
            $ = new SnippetArgs();
        }

        public Builder(SnippetArgs defaults) {
            $ = new SnippetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param files List of Snippet Files
         * 
         * @return builder
         * 
         */
        public Builder files(@Nullable Output<List<SnippetFileArgs>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files List of Snippet Files
         * 
         * @return builder
         * 
         */
        public Builder files(List<SnippetFileArgs> files) {
            return files(Output.of(files));
        }

        /**
         * @param files List of Snippet Files
         * 
         * @return builder
         * 
         */
        public Builder files(SnippetFileArgs... files) {
            return files(List.of(files));
        }

        /**
         * @param mainModule Main module file name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder mainModule(Output<String> mainModule) {
            $.mainModule = mainModule;
            return this;
        }

        /**
         * @param mainModule Main module file name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder mainModule(String mainModule) {
            return mainModule(Output.of(mainModule));
        }

        /**
         * @param name Name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SnippetArgs build() {
            if ($.mainModule == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "mainModule");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "name");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "zoneId");
            }
            return $;
        }
    }

}
