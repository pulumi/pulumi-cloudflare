// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.SnippetFileArgs;
import com.pulumi.cloudflare.inputs.SnippetMetadataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SnippetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnippetArgs Empty = new SnippetArgs();

    /**
     * The list of files belonging to the snippet.
     * 
     */
    @Import(name="files", required=true)
    private Output<List<SnippetFileArgs>> files;

    /**
     * @return The list of files belonging to the snippet.
     * 
     */
    public Output<List<SnippetFileArgs>> files() {
        return this.files;
    }

    /**
     * Metadata about the snippet.
     * 
     */
    @Import(name="metadata", required=true)
    private Output<SnippetMetadataArgs> metadata;

    /**
     * @return Metadata about the snippet.
     * 
     */
    public Output<SnippetMetadataArgs> metadata() {
        return this.metadata;
    }

    /**
     * The identifying name of the snippet.
     * 
     */
    @Import(name="snippetName", required=true)
    private Output<String> snippetName;

    /**
     * @return The identifying name of the snippet.
     * 
     */
    public Output<String> snippetName() {
        return this.snippetName;
    }

    /**
     * The unique ID of the zone.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The unique ID of the zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private SnippetArgs() {}

    private SnippetArgs(SnippetArgs $) {
        this.files = $.files;
        this.metadata = $.metadata;
        this.snippetName = $.snippetName;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetArgs $;

        public Builder() {
            $ = new SnippetArgs();
        }

        public Builder(SnippetArgs defaults) {
            $ = new SnippetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(Output<List<SnippetFileArgs>> files) {
            $.files = files;
            return this;
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(List<SnippetFileArgs> files) {
            return files(Output.of(files));
        }

        /**
         * @param files The list of files belonging to the snippet.
         * 
         * @return builder
         * 
         */
        public Builder files(SnippetFileArgs... files) {
            return files(List.of(files));
        }

        /**
         * @param metadata Metadata about the snippet.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Output<SnippetMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Metadata about the snippet.
         * 
         * @return builder
         * 
         */
        public Builder metadata(SnippetMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(Output<String> snippetName) {
            $.snippetName = snippetName;
            return this;
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(String snippetName) {
            return snippetName(Output.of(snippetName));
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SnippetArgs build() {
            if ($.files == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "files");
            }
            if ($.metadata == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "metadata");
            }
            if ($.snippetName == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "snippetName");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("SnippetArgs", "zoneId");
            }
            return $;
        }
    }

}
