// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkerObservabilityLogsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerObservabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerObservabilityArgs Empty = new WorkerObservabilityArgs();

    /**
     * Whether observability is enabled for the Worker.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether observability is enabled for the Worker.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The sampling rate for observability. From 0 to 1 (1 = 100%, 0.1 = 10%).
     * 
     */
    @Import(name="headSamplingRate")
    private @Nullable Output<Double> headSamplingRate;

    /**
     * @return The sampling rate for observability. From 0 to 1 (1 = 100%, 0.1 = 10%).
     * 
     */
    public Optional<Output<Double>> headSamplingRate() {
        return Optional.ofNullable(this.headSamplingRate);
    }

    /**
     * Log settings for the Worker.
     * 
     */
    @Import(name="logs")
    private @Nullable Output<WorkerObservabilityLogsArgs> logs;

    /**
     * @return Log settings for the Worker.
     * 
     */
    public Optional<Output<WorkerObservabilityLogsArgs>> logs() {
        return Optional.ofNullable(this.logs);
    }

    private WorkerObservabilityArgs() {}

    private WorkerObservabilityArgs(WorkerObservabilityArgs $) {
        this.enabled = $.enabled;
        this.headSamplingRate = $.headSamplingRate;
        this.logs = $.logs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerObservabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerObservabilityArgs $;

        public Builder() {
            $ = new WorkerObservabilityArgs();
        }

        public Builder(WorkerObservabilityArgs defaults) {
            $ = new WorkerObservabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether observability is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether observability is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param headSamplingRate The sampling rate for observability. From 0 to 1 (1 = 100%, 0.1 = 10%).
         * 
         * @return builder
         * 
         */
        public Builder headSamplingRate(@Nullable Output<Double> headSamplingRate) {
            $.headSamplingRate = headSamplingRate;
            return this;
        }

        /**
         * @param headSamplingRate The sampling rate for observability. From 0 to 1 (1 = 100%, 0.1 = 10%).
         * 
         * @return builder
         * 
         */
        public Builder headSamplingRate(Double headSamplingRate) {
            return headSamplingRate(Output.of(headSamplingRate));
        }

        /**
         * @param logs Log settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logs(@Nullable Output<WorkerObservabilityLogsArgs> logs) {
            $.logs = logs;
            return this;
        }

        /**
         * @param logs Log settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logs(WorkerObservabilityLogsArgs logs) {
            return logs(Output.of(logs));
        }

        public WorkerObservabilityArgs build() {
            return $;
        }
    }

}
