// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicWanIpsecTunnelHealthCheckArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicWanIpsecTunnelArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicWanIpsecTunnelArgs Empty = new MagicWanIpsecTunnelArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    @Import(name="cloudflareEndpoint", required=true)
    private Output<String> cloudflareEndpoint;

    /**
     * @return The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    public Output<String> cloudflareEndpoint() {
        return this.cloudflareEndpoint;
    }

    /**
     * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    @Import(name="customerEndpoint")
    private @Nullable Output<String> customerEndpoint;

    /**
     * @return The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    public Optional<Output<String>> customerEndpoint() {
        return Optional.ofNullable(this.customerEndpoint);
    }

    /**
     * An optional description forthe IPsec tunnel.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description forthe IPsec tunnel.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="healthCheck")
    private @Nullable Output<MagicWanIpsecTunnelHealthCheckArgs> healthCheck;

    public Optional<Output<MagicWanIpsecTunnelHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    @Import(name="interfaceAddress", required=true)
    private Output<String> interfaceAddress;

    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    public Output<String> interfaceAddress() {
        return this.interfaceAddress;
    }

    /**
     * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * A randomly generated or provided string for use in the IPsec tunnel.
     * 
     */
    @Import(name="psk")
    private @Nullable Output<String> psk;

    /**
     * @return A randomly generated or provided string for use in the IPsec tunnel.
     * 
     */
    public Optional<Output<String>> psk() {
        return Optional.ofNullable(this.psk);
    }

    /**
     * If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    @Import(name="replayProtection")
    private @Nullable Output<Boolean> replayProtection;

    /**
     * @return If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    public Optional<Output<Boolean>> replayProtection() {
        return Optional.ofNullable(this.replayProtection);
    }

    private MagicWanIpsecTunnelArgs() {}

    private MagicWanIpsecTunnelArgs(MagicWanIpsecTunnelArgs $) {
        this.accountId = $.accountId;
        this.cloudflareEndpoint = $.cloudflareEndpoint;
        this.customerEndpoint = $.customerEndpoint;
        this.description = $.description;
        this.healthCheck = $.healthCheck;
        this.interfaceAddress = $.interfaceAddress;
        this.name = $.name;
        this.psk = $.psk;
        this.replayProtection = $.replayProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicWanIpsecTunnelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicWanIpsecTunnelArgs $;

        public Builder() {
            $ = new MagicWanIpsecTunnelArgs();
        }

        public Builder(MagicWanIpsecTunnelArgs defaults) {
            $ = new MagicWanIpsecTunnelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param cloudflareEndpoint The IP address assigned to the Cloudflare side of the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpoint(Output<String> cloudflareEndpoint) {
            $.cloudflareEndpoint = cloudflareEndpoint;
            return this;
        }

        /**
         * @param cloudflareEndpoint The IP address assigned to the Cloudflare side of the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpoint(String cloudflareEndpoint) {
            return cloudflareEndpoint(Output.of(cloudflareEndpoint));
        }

        /**
         * @param customerEndpoint The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
         * 
         * @return builder
         * 
         */
        public Builder customerEndpoint(@Nullable Output<String> customerEndpoint) {
            $.customerEndpoint = customerEndpoint;
            return this;
        }

        /**
         * @param customerEndpoint The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
         * 
         * @return builder
         * 
         */
        public Builder customerEndpoint(String customerEndpoint) {
            return customerEndpoint(Output.of(customerEndpoint));
        }

        /**
         * @param description An optional description forthe IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description forthe IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder healthCheck(@Nullable Output<MagicWanIpsecTunnelHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(MagicWanIpsecTunnelHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(Output<String> interfaceAddress) {
            $.interfaceAddress = interfaceAddress;
            return this;
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(String interfaceAddress) {
            return interfaceAddress(Output.of(interfaceAddress));
        }

        /**
         * @param name The name of the IPsec tunnel. The name cannot share a name with other tunnels.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IPsec tunnel. The name cannot share a name with other tunnels.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param psk A randomly generated or provided string for use in the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder psk(@Nullable Output<String> psk) {
            $.psk = psk;
            return this;
        }

        /**
         * @param psk A randomly generated or provided string for use in the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder psk(String psk) {
            return psk(Output.of(psk));
        }

        /**
         * @param replayProtection If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
         * 
         * @return builder
         * 
         */
        public Builder replayProtection(@Nullable Output<Boolean> replayProtection) {
            $.replayProtection = replayProtection;
            return this;
        }

        /**
         * @param replayProtection If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
         * 
         * @return builder
         * 
         */
        public Builder replayProtection(Boolean replayProtection) {
            return replayProtection(Output.of(replayProtection));
        }

        public MagicWanIpsecTunnelArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicWanIpsecTunnelArgs", "accountId");
            }
            if ($.cloudflareEndpoint == null) {
                throw new MissingRequiredPropertyException("MagicWanIpsecTunnelArgs", "cloudflareEndpoint");
            }
            if ($.interfaceAddress == null) {
                throw new MissingRequiredPropertyException("MagicWanIpsecTunnelArgs", "interfaceAddress");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MagicWanIpsecTunnelArgs", "name");
            }
            return $;
        }
    }

}
