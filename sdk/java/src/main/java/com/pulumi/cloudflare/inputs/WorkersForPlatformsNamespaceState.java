// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersForPlatformsNamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final WorkersForPlatformsNamespaceState Empty = new WorkersForPlatformsNamespaceState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * When the script was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the script was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="modifiedBy")
    private @Nullable Output<String> modifiedBy;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> modifiedBy() {
        return Optional.ofNullable(this.modifiedBy);
    }

    /**
     * When the script was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When the script was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The name of the dispatch namespace.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the dispatch namespace.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * API Resource UUID tag.
     * 
     */
    @Import(name="namespaceId")
    private @Nullable Output<String> namespaceId;

    /**
     * @return API Resource UUID tag.
     * 
     */
    public Optional<Output<String>> namespaceId() {
        return Optional.ofNullable(this.namespaceId);
    }

    /**
     * Name of the Workers for Platforms dispatch namespace.
     * 
     */
    @Import(name="namespaceName")
    private @Nullable Output<String> namespaceName;

    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    public Optional<Output<String>> namespaceName() {
        return Optional.ofNullable(this.namespaceName);
    }

    /**
     * The current number of scripts in this Dispatch Namespace.
     * 
     */
    @Import(name="scriptCount")
    private @Nullable Output<Integer> scriptCount;

    /**
     * @return The current number of scripts in this Dispatch Namespace.
     * 
     */
    public Optional<Output<Integer>> scriptCount() {
        return Optional.ofNullable(this.scriptCount);
    }

    /**
     * Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
     * 
     */
    @Import(name="trustedWorkers")
    private @Nullable Output<Boolean> trustedWorkers;

    /**
     * @return Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
     * 
     */
    public Optional<Output<Boolean>> trustedWorkers() {
        return Optional.ofNullable(this.trustedWorkers);
    }

    private WorkersForPlatformsNamespaceState() {}

    private WorkersForPlatformsNamespaceState(WorkersForPlatformsNamespaceState $) {
        this.accountId = $.accountId;
        this.createdBy = $.createdBy;
        this.createdOn = $.createdOn;
        this.modifiedBy = $.modifiedBy;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.namespaceId = $.namespaceId;
        this.namespaceName = $.namespaceName;
        this.scriptCount = $.scriptCount;
        this.trustedWorkers = $.trustedWorkers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersForPlatformsNamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersForPlatformsNamespaceState $;

        public Builder() {
            $ = new WorkersForPlatformsNamespaceState();
        }

        public Builder(WorkersForPlatformsNamespaceState defaults) {
            $ = new WorkersForPlatformsNamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createdBy Identifier.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Identifier.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdOn When the script was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the script was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param modifiedBy Identifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(@Nullable Output<String> modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * @param modifiedBy Identifier.
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(String modifiedBy) {
            return modifiedBy(Output.of(modifiedBy));
        }

        /**
         * @param modifiedOn When the script was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When the script was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name The name of the dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param namespaceId API Resource UUID tag.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(@Nullable Output<String> namespaceId) {
            $.namespaceId = namespaceId;
            return this;
        }

        /**
         * @param namespaceId API Resource UUID tag.
         * 
         * @return builder
         * 
         */
        public Builder namespaceId(String namespaceId) {
            return namespaceId(Output.of(namespaceId));
        }

        /**
         * @param namespaceName Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(@Nullable Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName Name of the Workers for Platforms dispatch namespace.
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param scriptCount The current number of scripts in this Dispatch Namespace.
         * 
         * @return builder
         * 
         */
        public Builder scriptCount(@Nullable Output<Integer> scriptCount) {
            $.scriptCount = scriptCount;
            return this;
        }

        /**
         * @param scriptCount The current number of scripts in this Dispatch Namespace.
         * 
         * @return builder
         * 
         */
        public Builder scriptCount(Integer scriptCount) {
            return scriptCount(Output.of(scriptCount));
        }

        /**
         * @param trustedWorkers Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trustedWorkers(@Nullable Output<Boolean> trustedWorkers) {
            $.trustedWorkers = trustedWorkers;
            return this;
        }

        /**
         * @param trustedWorkers Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
         * 
         * @return builder
         * 
         */
        public Builder trustedWorkers(Boolean trustedWorkers) {
            return trustedWorkers(Output.of(trustedWorkers));
        }

        public WorkersForPlatformsNamespaceState build() {
            return $;
        }
    }

}
