// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamLiveInputSrtArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamLiveInputSrtArgs Empty = new StreamLiveInputSrtArgs();

    /**
     * The secret key to use when streaming via SRT to a live input.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return The secret key to use when streaming via SRT to a live input.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * The identifier of the live input to use when streaming via SRT.
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    /**
     * @return The identifier of the live input to use when streaming via SRT.
     * 
     */
    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    /**
     * The SRT URL you provide to the broadcaster, which they stream live video to.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The SRT URL you provide to the broadcaster, which they stream live video to.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private StreamLiveInputSrtArgs() {}

    private StreamLiveInputSrtArgs(StreamLiveInputSrtArgs $) {
        this.passphrase = $.passphrase;
        this.streamId = $.streamId;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamLiveInputSrtArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamLiveInputSrtArgs $;

        public Builder() {
            $ = new StreamLiveInputSrtArgs();
        }

        public Builder(StreamLiveInputSrtArgs defaults) {
            $ = new StreamLiveInputSrtArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passphrase The secret key to use when streaming via SRT to a live input.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase The secret key to use when streaming via SRT to a live input.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param streamId The identifier of the live input to use when streaming via SRT.
         * 
         * @return builder
         * 
         */
        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The identifier of the live input to use when streaming via SRT.
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        /**
         * @param url The SRT URL you provide to the broadcaster, which they stream live video to.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The SRT URL you provide to the broadcaster, which they stream live video to.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public StreamLiveInputSrtArgs build() {
            return $;
        }
    }

}
