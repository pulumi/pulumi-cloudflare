// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistrarDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistrarDomainArgs Empty = new RegistrarDomainArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Auto-renew controls whether subscription is automatically renewed upon domain expiration.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return Auto-renew controls whether subscription is automatically renewed upon domain expiration.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Domain name.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    /**
     * @return Domain name.
     * 
     */
    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * Shows whether a registrar lock is in place for a domain.
     * 
     */
    @Import(name="locked")
    private @Nullable Output<Boolean> locked;

    /**
     * @return Shows whether a registrar lock is in place for a domain.
     * 
     */
    public Optional<Output<Boolean>> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * Privacy option controls redacting WHOIS information.
     * 
     */
    @Import(name="privacy")
    private @Nullable Output<Boolean> privacy;

    /**
     * @return Privacy option controls redacting WHOIS information.
     * 
     */
    public Optional<Output<Boolean>> privacy() {
        return Optional.ofNullable(this.privacy);
    }

    private RegistrarDomainArgs() {}

    private RegistrarDomainArgs(RegistrarDomainArgs $) {
        this.accountId = $.accountId;
        this.autoRenew = $.autoRenew;
        this.domainName = $.domainName;
        this.locked = $.locked;
        this.privacy = $.privacy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrarDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrarDomainArgs $;

        public Builder() {
            $ = new RegistrarDomainArgs();
        }

        public Builder(RegistrarDomainArgs defaults) {
            $ = new RegistrarDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param autoRenew Auto-renew controls whether subscription is automatically renewed upon domain expiration.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew Auto-renew controls whether subscription is automatically renewed upon domain expiration.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param domainName Domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Domain name.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param locked Shows whether a registrar lock is in place for a domain.
         * 
         * @return builder
         * 
         */
        public Builder locked(@Nullable Output<Boolean> locked) {
            $.locked = locked;
            return this;
        }

        /**
         * @param locked Shows whether a registrar lock is in place for a domain.
         * 
         * @return builder
         * 
         */
        public Builder locked(Boolean locked) {
            return locked(Output.of(locked));
        }

        /**
         * @param privacy Privacy option controls redacting WHOIS information.
         * 
         * @return builder
         * 
         */
        public Builder privacy(@Nullable Output<Boolean> privacy) {
            $.privacy = privacy;
            return this;
        }

        /**
         * @param privacy Privacy option controls redacting WHOIS information.
         * 
         * @return builder
         * 
         */
        public Builder privacy(Boolean privacy) {
            return privacy(Output.of(privacy));
        }

        public RegistrarDomainArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("RegistrarDomainArgs", "accountId");
            }
            if ($.domainName == null) {
                throw new MissingRequiredPropertyException("RegistrarDomainArgs", "domainName");
            }
            return $;
        }
    }

}
