// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicNetworkMonitoringConfigurationWarpDevice;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMagicNetworkMonitoringConfigurationResult {
    private String accountId;
    /**
     * @return Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     * 
     */
    private Double defaultSampling;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The account name.
     * 
     */
    private String name;
    private List<String> routerIps;
    private List<GetMagicNetworkMonitoringConfigurationWarpDevice> warpDevices;

    private GetMagicNetworkMonitoringConfigurationResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Fallback sampling rate of flow messages being sent in packets per second. This should match the packet sampling rate configured on the router.
     * 
     */
    public Double defaultSampling() {
        return this.defaultSampling;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The account name.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<String> routerIps() {
        return this.routerIps;
    }
    public List<GetMagicNetworkMonitoringConfigurationWarpDevice> warpDevices() {
        return this.warpDevices;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicNetworkMonitoringConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Double defaultSampling;
        private String id;
        private String name;
        private List<String> routerIps;
        private List<GetMagicNetworkMonitoringConfigurationWarpDevice> warpDevices;
        public Builder() {}
        public Builder(GetMagicNetworkMonitoringConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.defaultSampling = defaults.defaultSampling;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.routerIps = defaults.routerIps;
    	      this.warpDevices = defaults.warpDevices;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSampling(Double defaultSampling) {
            if (defaultSampling == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "defaultSampling");
            }
            this.defaultSampling = defaultSampling;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder routerIps(List<String> routerIps) {
            if (routerIps == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "routerIps");
            }
            this.routerIps = routerIps;
            return this;
        }
        public Builder routerIps(String... routerIps) {
            return routerIps(List.of(routerIps));
        }
        @CustomType.Setter
        public Builder warpDevices(List<GetMagicNetworkMonitoringConfigurationWarpDevice> warpDevices) {
            if (warpDevices == null) {
              throw new MissingRequiredPropertyException("GetMagicNetworkMonitoringConfigurationResult", "warpDevices");
            }
            this.warpDevices = warpDevices;
            return this;
        }
        public Builder warpDevices(GetMagicNetworkMonitoringConfigurationWarpDevice... warpDevices) {
            return warpDevices(List.of(warpDevices));
        }
        public GetMagicNetworkMonitoringConfigurationResult build() {
            final var _resultValue = new GetMagicNetworkMonitoringConfigurationResult();
            _resultValue.accountId = accountId;
            _resultValue.defaultSampling = defaultSampling;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.routerIps = routerIps;
            _resultValue.warpDevices = warpDevices;
            return _resultValue;
        }
    }
}
