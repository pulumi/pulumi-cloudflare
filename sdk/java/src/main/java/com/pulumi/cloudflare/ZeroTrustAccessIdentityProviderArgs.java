// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ZeroTrustAccessIdentityProviderConfigArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustAccessIdentityProviderScimConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessIdentityProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessIdentityProviderArgs Empty = new ZeroTrustAccessIdentityProviderArgs();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The configuration parameters for the identity provider. To view the required parameters for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
     * 
     */
    @Import(name="config", required=true)
    private Output<ZeroTrustAccessIdentityProviderConfigArgs> config;

    /**
     * @return The configuration parameters for the identity provider. To view the required parameters for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
     * 
     */
    public Output<ZeroTrustAccessIdentityProviderConfigArgs> config() {
        return this.config;
    }

    /**
     * The name of the identity provider, shown to users on the login page.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the identity provider, shown to users on the login page.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.
     * 
     */
    @Import(name="scimConfig")
    private @Nullable Output<ZeroTrustAccessIdentityProviderScimConfigArgs> scimConfig;

    /**
     * @return The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.
     * 
     */
    public Optional<Output<ZeroTrustAccessIdentityProviderScimConfigArgs>> scimConfig() {
        return Optional.ofNullable(this.scimConfig);
    }

    /**
     * The type of identity provider. To determine the value for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
     * Available values: &#34;onetimepin&#34;, &#34;azureAD&#34;, &#34;saml&#34;, &#34;centrify&#34;, &#34;facebook&#34;, &#34;github&#34;, &#34;google-apps&#34;, &#34;google&#34;, &#34;linkedin&#34;, &#34;oidc&#34;, &#34;okta&#34;, &#34;onelogin&#34;, &#34;pingone&#34;, &#34;yandex&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of identity provider. To determine the value for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
     * Available values: &#34;onetimepin&#34;, &#34;azureAD&#34;, &#34;saml&#34;, &#34;centrify&#34;, &#34;facebook&#34;, &#34;github&#34;, &#34;google-apps&#34;, &#34;google&#34;, &#34;linkedin&#34;, &#34;oidc&#34;, &#34;okta&#34;, &#34;onelogin&#34;, &#34;pingone&#34;, &#34;yandex&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZeroTrustAccessIdentityProviderArgs() {}

    private ZeroTrustAccessIdentityProviderArgs(ZeroTrustAccessIdentityProviderArgs $) {
        this.accountId = $.accountId;
        this.config = $.config;
        this.name = $.name;
        this.scimConfig = $.scimConfig;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessIdentityProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessIdentityProviderArgs $;

        public Builder() {
            $ = new ZeroTrustAccessIdentityProviderArgs();
        }

        public Builder(ZeroTrustAccessIdentityProviderArgs defaults) {
            $ = new ZeroTrustAccessIdentityProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param config The configuration parameters for the identity provider. To view the required parameters for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
         * 
         * @return builder
         * 
         */
        public Builder config(Output<ZeroTrustAccessIdentityProviderConfigArgs> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config The configuration parameters for the identity provider. To view the required parameters for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
         * 
         * @return builder
         * 
         */
        public Builder config(ZeroTrustAccessIdentityProviderConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param name The name of the identity provider, shown to users on the login page.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the identity provider, shown to users on the login page.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param scimConfig The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder scimConfig(@Nullable Output<ZeroTrustAccessIdentityProviderScimConfigArgs> scimConfig) {
            $.scimConfig = scimConfig;
            return this;
        }

        /**
         * @param scimConfig The configuration settings for enabling a System for Cross-Domain Identity Management (SCIM) with the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder scimConfig(ZeroTrustAccessIdentityProviderScimConfigArgs scimConfig) {
            return scimConfig(Output.of(scimConfig));
        }

        /**
         * @param type The type of identity provider. To determine the value for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
         * Available values: &#34;onetimepin&#34;, &#34;azureAD&#34;, &#34;saml&#34;, &#34;centrify&#34;, &#34;facebook&#34;, &#34;github&#34;, &#34;google-apps&#34;, &#34;google&#34;, &#34;linkedin&#34;, &#34;oidc&#34;, &#34;okta&#34;, &#34;onelogin&#34;, &#34;pingone&#34;, &#34;yandex&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of identity provider. To determine the value for a specific provider, refer to our [developer documentation](https://developers.cloudflare.com/cloudflare-one/identity/idp-integration/).
         * Available values: &#34;onetimepin&#34;, &#34;azureAD&#34;, &#34;saml&#34;, &#34;centrify&#34;, &#34;facebook&#34;, &#34;github&#34;, &#34;google-apps&#34;, &#34;google&#34;, &#34;linkedin&#34;, &#34;oidc&#34;, &#34;okta&#34;, &#34;onelogin&#34;, &#34;pingone&#34;, &#34;yandex&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZeroTrustAccessIdentityProviderArgs build() {
            if ($.config == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessIdentityProviderArgs", "config");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessIdentityProviderArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessIdentityProviderArgs", "type");
            }
            return $;
        }
    }

}
