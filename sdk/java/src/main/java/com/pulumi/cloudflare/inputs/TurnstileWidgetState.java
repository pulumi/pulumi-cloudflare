// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TurnstileWidgetState extends com.pulumi.resources.ResourceArgs {

    public static final TurnstileWidgetState Empty = new TurnstileWidgetState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    @Import(name="botFightMode")
    private @Nullable Output<Boolean> botFightMode;

    /**
     * @return If bot*fight*mode is set to `true`, Cloudflare issues computationally
     * expensive challenges in response to malicious bots (ENT only).
     * 
     */
    public Optional<Output<Boolean>> botFightMode() {
        return Optional.ofNullable(this.botFightMode);
    }

    /**
     * If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;noClearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    @Import(name="clearanceLevel")
    private @Nullable Output<String> clearanceLevel;

    /**
     * @return If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
     * this setting can determine the clearance level to be set
     * Available values: &#34;noClearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
     * 
     */
    public Optional<Output<String>> clearanceLevel() {
        return Optional.ofNullable(this.clearanceLevel);
    }

    /**
     * When the widget was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the widget was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    @Import(name="ephemeralId")
    private @Nullable Output<Boolean> ephemeralId;

    /**
     * @return Return the Ephemeral ID in /siteverify (ENT only).
     * 
     */
    public Optional<Output<Boolean>> ephemeralId() {
        return Optional.ofNullable(this.ephemeralId);
    }

    /**
     * Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Widget Mode
     * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * When the widget was modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When the widget was modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human readable widget name. Not unique. Cloudflare suggests that you
     * set this to a meaningful string to make it easier to identify your
     * widget, and where it is used.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    @Import(name="offlabel")
    private @Nullable Output<Boolean> offlabel;

    /**
     * @return Do not show any Cloudflare branding on the widget (ENT only).
     * 
     */
    public Optional<Output<Boolean>> offlabel() {
        return Optional.ofNullable(this.offlabel);
    }

    /**
     * Region where this widget can be used. This cannot be changed after creation.
     * Available values: &#34;world&#34;, &#34;china&#34;.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region where this widget can be used. This cannot be changed after creation.
     * Available values: &#34;world&#34;, &#34;china&#34;.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Secret key for this widget.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Secret key for this widget.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * Widget item identifier tag.
     * 
     */
    @Import(name="sitekey")
    private @Nullable Output<String> sitekey;

    /**
     * @return Widget item identifier tag.
     * 
     */
    public Optional<Output<String>> sitekey() {
        return Optional.ofNullable(this.sitekey);
    }

    private TurnstileWidgetState() {}

    private TurnstileWidgetState(TurnstileWidgetState $) {
        this.accountId = $.accountId;
        this.botFightMode = $.botFightMode;
        this.clearanceLevel = $.clearanceLevel;
        this.createdOn = $.createdOn;
        this.domains = $.domains;
        this.ephemeralId = $.ephemeralId;
        this.mode = $.mode;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.offlabel = $.offlabel;
        this.region = $.region;
        this.secret = $.secret;
        this.sitekey = $.sitekey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TurnstileWidgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TurnstileWidgetState $;

        public Builder() {
            $ = new TurnstileWidgetState();
        }

        public Builder(TurnstileWidgetState defaults) {
            $ = new TurnstileWidgetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param botFightMode If bot*fight*mode is set to `true`, Cloudflare issues computationally
         * expensive challenges in response to malicious bots (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder botFightMode(@Nullable Output<Boolean> botFightMode) {
            $.botFightMode = botFightMode;
            return this;
        }

        /**
         * @param botFightMode If bot*fight*mode is set to `true`, Cloudflare issues computationally
         * expensive challenges in response to malicious bots (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder botFightMode(Boolean botFightMode) {
            return botFightMode(Output.of(botFightMode));
        }

        /**
         * @param clearanceLevel If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
         * this setting can determine the clearance level to be set
         * Available values: &#34;noClearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clearanceLevel(@Nullable Output<String> clearanceLevel) {
            $.clearanceLevel = clearanceLevel;
            return this;
        }

        /**
         * @param clearanceLevel If Turnstile is embedded on a Cloudflare site and the widget should grant challenge clearance,
         * this setting can determine the clearance level to be set
         * Available values: &#34;noClearance&#34;, &#34;jschallenge&#34;, &#34;managed&#34;, &#34;interactive&#34;.
         * 
         * @return builder
         * 
         */
        public Builder clearanceLevel(String clearanceLevel) {
            return clearanceLevel(Output.of(clearanceLevel));
        }

        /**
         * @param createdOn When the widget was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the widget was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param ephemeralId Return the Ephemeral ID in /siteverify (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder ephemeralId(@Nullable Output<Boolean> ephemeralId) {
            $.ephemeralId = ephemeralId;
            return this;
        }

        /**
         * @param ephemeralId Return the Ephemeral ID in /siteverify (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder ephemeralId(Boolean ephemeralId) {
            return ephemeralId(Output.of(ephemeralId));
        }

        /**
         * @param mode Widget Mode
         * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Widget Mode
         * Available values: &#34;non-interactive&#34;, &#34;invisible&#34;, &#34;managed&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param modifiedOn When the widget was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When the widget was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name Human readable widget name. Not unique. Cloudflare suggests that you
         * set this to a meaningful string to make it easier to identify your
         * widget, and where it is used.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human readable widget name. Not unique. Cloudflare suggests that you
         * set this to a meaningful string to make it easier to identify your
         * widget, and where it is used.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offlabel Do not show any Cloudflare branding on the widget (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder offlabel(@Nullable Output<Boolean> offlabel) {
            $.offlabel = offlabel;
            return this;
        }

        /**
         * @param offlabel Do not show any Cloudflare branding on the widget (ENT only).
         * 
         * @return builder
         * 
         */
        public Builder offlabel(Boolean offlabel) {
            return offlabel(Output.of(offlabel));
        }

        /**
         * @param region Region where this widget can be used. This cannot be changed after creation.
         * Available values: &#34;world&#34;, &#34;china&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where this widget can be used. This cannot be changed after creation.
         * Available values: &#34;world&#34;, &#34;china&#34;.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secret Secret key for this widget.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Secret key for this widget.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        /**
         * @param sitekey Widget item identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder sitekey(@Nullable Output<String> sitekey) {
            $.sitekey = sitekey;
            return this;
        }

        /**
         * @param sitekey Widget item identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder sitekey(String sitekey) {
            return sitekey(Output.of(sitekey));
        }

        public TurnstileWidgetState build() {
            return $;
        }
    }

}
