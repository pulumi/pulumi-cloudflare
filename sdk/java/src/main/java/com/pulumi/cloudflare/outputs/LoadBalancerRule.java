// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.LoadBalancerRuleFixedResponse;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverrides;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRule {
    /**
     * @return The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
     * 
     */
    private @Nullable String condition;
    /**
     * @return Disable this specific rule. It will no longer be evaluated by this load balancer.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed*response is supplied the rule will be marked as terminates.
     * 
     */
    private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
    /**
     * @return Name of this rule. Only used for human readability.
     * 
     */
    private @Nullable String name;
    /**
     * @return A collection of overrides to apply to the load balancer when this rule&#39;s condition is true. All fields are optional.
     * 
     */
    private @Nullable LoadBalancerRuleOverrides overrides;
    /**
     * @return The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return If this rule&#39;s condition is true, this causes rule evaluation to stop after processing this rule.
     * 
     */
    private @Nullable Boolean terminates;

    private LoadBalancerRule() {}
    /**
     * @return The condition expressions to evaluate. If the condition evaluates to true, the overrides or fixed_response in this rule will be applied. An empty condition is always true. For more details on condition expressions, please see https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules/expressions.
     * 
     */
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    /**
     * @return Disable this specific rule. It will no longer be evaluated by this load balancer.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return A collection of fields used to directly respond to the eyeball instead of routing to a pool. If a fixed*response is supplied the rule will be marked as terminates.
     * 
     */
    public Optional<LoadBalancerRuleFixedResponse> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }
    /**
     * @return Name of this rule. Only used for human readability.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return A collection of overrides to apply to the load balancer when this rule&#39;s condition is true. All fields are optional.
     * 
     */
    public Optional<LoadBalancerRuleOverrides> overrides() {
        return Optional.ofNullable(this.overrides);
    }
    /**
     * @return The order in which rules should be executed in relation to each other. Lower values are executed first. Values do not need to be sequential. If no value is provided for any rule the array order of the rules field will be used to assign a priority.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return If this rule&#39;s condition is true, this causes rule evaluation to stop after processing this rule.
     * 
     */
    public Optional<Boolean> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String condition;
        private @Nullable Boolean disabled;
        private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
        private @Nullable String name;
        private @Nullable LoadBalancerRuleOverrides overrides;
        private @Nullable Integer priority;
        private @Nullable Boolean terminates;
        public Builder() {}
        public Builder(LoadBalancerRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.disabled = defaults.disabled;
    	      this.fixedResponse = defaults.fixedResponse;
    	      this.name = defaults.name;
    	      this.overrides = defaults.overrides;
    	      this.priority = defaults.priority;
    	      this.terminates = defaults.terminates;
        }

        @CustomType.Setter
        public Builder condition(@Nullable String condition) {

            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder fixedResponse(@Nullable LoadBalancerRuleFixedResponse fixedResponse) {

            this.fixedResponse = fixedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable LoadBalancerRuleOverrides overrides) {

            this.overrides = overrides;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder terminates(@Nullable Boolean terminates) {

            this.terminates = terminates;
            return this;
        }
        public LoadBalancerRule build() {
            final var _resultValue = new LoadBalancerRule();
            _resultValue.condition = condition;
            _resultValue.disabled = disabled;
            _resultValue.fixedResponse = fixedResponse;
            _resultValue.name = name;
            _resultValue.overrides = overrides;
            _resultValue.priority = priority;
            _resultValue.terminates = terminates;
            return _resultValue;
        }
    }
}
