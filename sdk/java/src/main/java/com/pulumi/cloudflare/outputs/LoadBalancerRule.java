// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.LoadBalancerRuleFixedResponse;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverride;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRule {
    /**
     * @return The statement to evaluate to determine if this rule&#39;s effects should be applied. An empty condition is always true. See [load balancing rules](https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules).
     * 
     */
    private @Nullable String condition;
    /**
     * @return A disabled rule will not be executed.
     * 
     */
    private @Nullable Boolean disabled;
    /**
     * @return Settings for a HTTP response to return directly to the eyeball if the condition is true. Note: `overrides` or `fixed_response` must be set.
     * 
     */
    private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
    /**
     * @return Human readable name for this rule.
     * 
     */
    private String name;
    /**
     * @return The load balancer settings to alter if this rule&#39;s `condition` is true. Note: `overrides` or `fixed_response` must be set.
     * 
     */
    private @Nullable List<LoadBalancerRuleOverride> overrides;
    /**
     * @return Priority used when determining the order of rule execution. Lower values are executed first. If not provided, the list order will be used.
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Terminates indicates that if this rule is true no further rules should be executed. Note: setting a `fixed_response` forces this field to `true`.
     * 
     */
    private @Nullable Boolean terminates;

    private LoadBalancerRule() {}
    /**
     * @return The statement to evaluate to determine if this rule&#39;s effects should be applied. An empty condition is always true. See [load balancing rules](https://developers.cloudflare.com/load-balancing/understand-basics/load-balancing-rules).
     * 
     */
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    /**
     * @return A disabled rule will not be executed.
     * 
     */
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    /**
     * @return Settings for a HTTP response to return directly to the eyeball if the condition is true. Note: `overrides` or `fixed_response` must be set.
     * 
     */
    public Optional<LoadBalancerRuleFixedResponse> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }
    /**
     * @return Human readable name for this rule.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The load balancer settings to alter if this rule&#39;s `condition` is true. Note: `overrides` or `fixed_response` must be set.
     * 
     */
    public List<LoadBalancerRuleOverride> overrides() {
        return this.overrides == null ? List.of() : this.overrides;
    }
    /**
     * @return Priority used when determining the order of rule execution. Lower values are executed first. If not provided, the list order will be used.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Terminates indicates that if this rule is true no further rules should be executed. Note: setting a `fixed_response` forces this field to `true`.
     * 
     */
    public Optional<Boolean> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String condition;
        private @Nullable Boolean disabled;
        private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
        private String name;
        private @Nullable List<LoadBalancerRuleOverride> overrides;
        private @Nullable Integer priority;
        private @Nullable Boolean terminates;
        public Builder() {}
        public Builder(LoadBalancerRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.disabled = defaults.disabled;
    	      this.fixedResponse = defaults.fixedResponse;
    	      this.name = defaults.name;
    	      this.overrides = defaults.overrides;
    	      this.priority = defaults.priority;
    	      this.terminates = defaults.terminates;
        }

        @CustomType.Setter
        public Builder condition(@Nullable String condition) {

            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {

            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder fixedResponse(@Nullable LoadBalancerRuleFixedResponse fixedResponse) {

            this.fixedResponse = fixedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("LoadBalancerRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable List<LoadBalancerRuleOverride> overrides) {

            this.overrides = overrides;
            return this;
        }
        public Builder overrides(LoadBalancerRuleOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder terminates(@Nullable Boolean terminates) {

            this.terminates = terminates;
            return this;
        }
        public LoadBalancerRule build() {
            final var _resultValue = new LoadBalancerRule();
            _resultValue.condition = condition;
            _resultValue.disabled = disabled;
            _resultValue.fixedResponse = fixedResponse;
            _resultValue.name = name;
            _resultValue.overrides = overrides;
            _resultValue.priority = priority;
            _resultValue.terminates = terminates;
            return _resultValue;
        }
    }
}
