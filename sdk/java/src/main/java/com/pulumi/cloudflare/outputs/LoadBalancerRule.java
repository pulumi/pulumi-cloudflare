// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.LoadBalancerRuleFixedResponse;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverride;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRule {
    private @Nullable String condition;
    private @Nullable Boolean disabled;
    private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
    private String name;
    private @Nullable List<LoadBalancerRuleOverride> overrides;
    private @Nullable Integer priority;
    private @Nullable Boolean terminates;

    private LoadBalancerRule() {}
    public Optional<String> condition() {
        return Optional.ofNullable(this.condition);
    }
    public Optional<Boolean> disabled() {
        return Optional.ofNullable(this.disabled);
    }
    public Optional<LoadBalancerRuleFixedResponse> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }
    public String name() {
        return this.name;
    }
    public List<LoadBalancerRuleOverride> overrides() {
        return this.overrides == null ? List.of() : this.overrides;
    }
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    public Optional<Boolean> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String condition;
        private @Nullable Boolean disabled;
        private @Nullable LoadBalancerRuleFixedResponse fixedResponse;
        private String name;
        private @Nullable List<LoadBalancerRuleOverride> overrides;
        private @Nullable Integer priority;
        private @Nullable Boolean terminates;
        public Builder() {}
        public Builder(LoadBalancerRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.disabled = defaults.disabled;
    	      this.fixedResponse = defaults.fixedResponse;
    	      this.name = defaults.name;
    	      this.overrides = defaults.overrides;
    	      this.priority = defaults.priority;
    	      this.terminates = defaults.terminates;
        }

        @CustomType.Setter
        public Builder condition(@Nullable String condition) {
            this.condition = condition;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(@Nullable Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder fixedResponse(@Nullable LoadBalancerRuleFixedResponse fixedResponse) {
            this.fixedResponse = fixedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder overrides(@Nullable List<LoadBalancerRuleOverride> overrides) {
            this.overrides = overrides;
            return this;
        }
        public Builder overrides(LoadBalancerRuleOverride... overrides) {
            return overrides(List.of(overrides));
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder terminates(@Nullable Boolean terminates) {
            this.terminates = terminates;
            return this;
        }
        public LoadBalancerRule build() {
            final var o = new LoadBalancerRule();
            o.condition = condition;
            o.disabled = disabled;
            o.fixedResponse = fixedResponse;
            o.name = name;
            o.overrides = overrides;
            o.priority = priority;
            o.terminates = terminates;
            return o;
        }
    }
}
