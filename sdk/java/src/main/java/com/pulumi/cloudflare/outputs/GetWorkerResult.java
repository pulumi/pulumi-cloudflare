// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkerObservability;
import com.pulumi.cloudflare.outputs.GetWorkerSubdomain;
import com.pulumi.cloudflare.outputs.GetWorkerTailConsumer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkerResult {
    /**
     * @return Identifier.
     * 
     */
    private String accountId;
    /**
     * @return When the Worker was created.
     * 
     */
    private String createdOn;
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    private String id;
    /**
     * @return Whether logpush is enabled for the Worker.
     * 
     */
    private Boolean logpush;
    /**
     * @return Name of the Worker.
     * 
     */
    private String name;
    /**
     * @return Observability settings for the Worker.
     * 
     */
    private GetWorkerObservability observability;
    /**
     * @return Subdomain settings for the Worker.
     * 
     */
    private GetWorkerSubdomain subdomain;
    /**
     * @return Tags associated with the Worker.
     * 
     */
    private List<String> tags;
    /**
     * @return Other Workers that should consume logs from the Worker.
     * 
     */
    private List<GetWorkerTailConsumer> tailConsumers;
    /**
     * @return When the Worker was most recently updated.
     * 
     */
    private String updatedOn;
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    private @Nullable String workerId;

    private GetWorkerResult() {}
    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return When the Worker was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether logpush is enabled for the Worker.
     * 
     */
    public Boolean logpush() {
        return this.logpush;
    }
    /**
     * @return Name of the Worker.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Observability settings for the Worker.
     * 
     */
    public GetWorkerObservability observability() {
        return this.observability;
    }
    /**
     * @return Subdomain settings for the Worker.
     * 
     */
    public GetWorkerSubdomain subdomain() {
        return this.subdomain;
    }
    /**
     * @return Tags associated with the Worker.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Other Workers that should consume logs from the Worker.
     * 
     */
    public List<GetWorkerTailConsumer> tailConsumers() {
        return this.tailConsumers;
    }
    /**
     * @return When the Worker was most recently updated.
     * 
     */
    public String updatedOn() {
        return this.updatedOn;
    }
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public Optional<String> workerId() {
        return Optional.ofNullable(this.workerId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String createdOn;
        private String id;
        private Boolean logpush;
        private String name;
        private GetWorkerObservability observability;
        private GetWorkerSubdomain subdomain;
        private List<String> tags;
        private List<GetWorkerTailConsumer> tailConsumers;
        private String updatedOn;
        private @Nullable String workerId;
        public Builder() {}
        public Builder(GetWorkerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.createdOn = defaults.createdOn;
    	      this.id = defaults.id;
    	      this.logpush = defaults.logpush;
    	      this.name = defaults.name;
    	      this.observability = defaults.observability;
    	      this.subdomain = defaults.subdomain;
    	      this.tags = defaults.tags;
    	      this.tailConsumers = defaults.tailConsumers;
    	      this.updatedOn = defaults.updatedOn;
    	      this.workerId = defaults.workerId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logpush(Boolean logpush) {
            if (logpush == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "logpush");
            }
            this.logpush = logpush;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder observability(GetWorkerObservability observability) {
            if (observability == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "observability");
            }
            this.observability = observability;
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(GetWorkerSubdomain subdomain) {
            if (subdomain == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "subdomain");
            }
            this.subdomain = subdomain;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tailConsumers(List<GetWorkerTailConsumer> tailConsumers) {
            if (tailConsumers == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "tailConsumers");
            }
            this.tailConsumers = tailConsumers;
            return this;
        }
        public Builder tailConsumers(GetWorkerTailConsumer... tailConsumers) {
            return tailConsumers(List.of(tailConsumers));
        }
        @CustomType.Setter
        public Builder updatedOn(String updatedOn) {
            if (updatedOn == null) {
              throw new MissingRequiredPropertyException("GetWorkerResult", "updatedOn");
            }
            this.updatedOn = updatedOn;
            return this;
        }
        @CustomType.Setter
        public Builder workerId(@Nullable String workerId) {

            this.workerId = workerId;
            return this;
        }
        public GetWorkerResult build() {
            final var _resultValue = new GetWorkerResult();
            _resultValue.accountId = accountId;
            _resultValue.createdOn = createdOn;
            _resultValue.id = id;
            _resultValue.logpush = logpush;
            _resultValue.name = name;
            _resultValue.observability = observability;
            _resultValue.subdomain = subdomain;
            _resultValue.tags = tags;
            _resultValue.tailConsumers = tailConsumers;
            _resultValue.updatedOn = updatedOn;
            _resultValue.workerId = workerId;
            return _resultValue;
        }
    }
}
