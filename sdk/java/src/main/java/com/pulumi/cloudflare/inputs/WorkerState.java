// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkerObservabilityArgs;
import com.pulumi.cloudflare.inputs.WorkerSubdomainArgs;
import com.pulumi.cloudflare.inputs.WorkerTailConsumerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerState extends com.pulumi.resources.ResourceArgs {

    public static final WorkerState Empty = new WorkerState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * When the Worker was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the Worker was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Whether logpush is enabled for the Worker.
     * 
     */
    @Import(name="logpush")
    private @Nullable Output<Boolean> logpush;

    /**
     * @return Whether logpush is enabled for the Worker.
     * 
     */
    public Optional<Output<Boolean>> logpush() {
        return Optional.ofNullable(this.logpush);
    }

    /**
     * Name of the Worker.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Worker.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Observability settings for the Worker.
     * 
     */
    @Import(name="observability")
    private @Nullable Output<WorkerObservabilityArgs> observability;

    /**
     * @return Observability settings for the Worker.
     * 
     */
    public Optional<Output<WorkerObservabilityArgs>> observability() {
        return Optional.ofNullable(this.observability);
    }

    /**
     * Subdomain settings for the Worker.
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<WorkerSubdomainArgs> subdomain;

    /**
     * @return Subdomain settings for the Worker.
     * 
     */
    public Optional<Output<WorkerSubdomainArgs>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    /**
     * Tags associated with the Worker.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags associated with the Worker.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Other Workers that should consume logs from the Worker.
     * 
     */
    @Import(name="tailConsumers")
    private @Nullable Output<List<WorkerTailConsumerArgs>> tailConsumers;

    /**
     * @return Other Workers that should consume logs from the Worker.
     * 
     */
    public Optional<Output<List<WorkerTailConsumerArgs>>> tailConsumers() {
        return Optional.ofNullable(this.tailConsumers);
    }

    /**
     * When the Worker was most recently updated.
     * 
     */
    @Import(name="updatedOn")
    private @Nullable Output<String> updatedOn;

    /**
     * @return When the Worker was most recently updated.
     * 
     */
    public Optional<Output<String>> updatedOn() {
        return Optional.ofNullable(this.updatedOn);
    }

    private WorkerState() {}

    private WorkerState(WorkerState $) {
        this.accountId = $.accountId;
        this.createdOn = $.createdOn;
        this.logpush = $.logpush;
        this.name = $.name;
        this.observability = $.observability;
        this.subdomain = $.subdomain;
        this.tags = $.tags;
        this.tailConsumers = $.tailConsumers;
        this.updatedOn = $.updatedOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerState $;

        public Builder() {
            $ = new WorkerState();
        }

        public Builder(WorkerState defaults) {
            $ = new WorkerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createdOn When the Worker was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the Worker was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param logpush Whether logpush is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logpush(@Nullable Output<Boolean> logpush) {
            $.logpush = logpush;
            return this;
        }

        /**
         * @param logpush Whether logpush is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logpush(Boolean logpush) {
            return logpush(Output.of(logpush));
        }

        /**
         * @param name Name of the Worker.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Worker.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param observability Observability settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder observability(@Nullable Output<WorkerObservabilityArgs> observability) {
            $.observability = observability;
            return this;
        }

        /**
         * @param observability Observability settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder observability(WorkerObservabilityArgs observability) {
            return observability(Output.of(observability));
        }

        /**
         * @param subdomain Subdomain settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<WorkerSubdomainArgs> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Subdomain settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(WorkerSubdomainArgs subdomain) {
            return subdomain(Output.of(subdomain));
        }

        /**
         * @param tags Tags associated with the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags associated with the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags associated with the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param tailConsumers Other Workers that should consume logs from the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(@Nullable Output<List<WorkerTailConsumerArgs>> tailConsumers) {
            $.tailConsumers = tailConsumers;
            return this;
        }

        /**
         * @param tailConsumers Other Workers that should consume logs from the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(List<WorkerTailConsumerArgs> tailConsumers) {
            return tailConsumers(Output.of(tailConsumers));
        }

        /**
         * @param tailConsumers Other Workers that should consume logs from the Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(WorkerTailConsumerArgs... tailConsumers) {
            return tailConsumers(List.of(tailConsumers));
        }

        /**
         * @param updatedOn When the Worker was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedOn(@Nullable Output<String> updatedOn) {
            $.updatedOn = updatedOn;
            return this;
        }

        /**
         * @param updatedOn When the Worker was most recently updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedOn(String updatedOn) {
            return updatedOn(Output.of(updatedOn));
        }

        public WorkerState build() {
            return $;
        }
    }

}
