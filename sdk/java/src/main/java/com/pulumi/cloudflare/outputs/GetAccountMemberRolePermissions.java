// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsAnalytics;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsBilling;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsCachePurge;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsDns;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsDnsRecords;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsLb;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsLogs;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsOrganization;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsSsl;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsWaf;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsZoneSettings;
import com.pulumi.cloudflare.outputs.GetAccountMemberRolePermissionsZones;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;

@CustomType
public final class GetAccountMemberRolePermissions {
    private GetAccountMemberRolePermissionsAnalytics analytics;
    private GetAccountMemberRolePermissionsBilling billing;
    private GetAccountMemberRolePermissionsCachePurge cachePurge;
    private GetAccountMemberRolePermissionsDns dns;
    private GetAccountMemberRolePermissionsDnsRecords dnsRecords;
    private GetAccountMemberRolePermissionsLb lb;
    private GetAccountMemberRolePermissionsLogs logs;
    private GetAccountMemberRolePermissionsOrganization organization;
    private GetAccountMemberRolePermissionsSsl ssl;
    private GetAccountMemberRolePermissionsWaf waf;
    private GetAccountMemberRolePermissionsZoneSettings zoneSettings;
    private GetAccountMemberRolePermissionsZones zones;

    private GetAccountMemberRolePermissions() {}
    public GetAccountMemberRolePermissionsAnalytics analytics() {
        return this.analytics;
    }
    public GetAccountMemberRolePermissionsBilling billing() {
        return this.billing;
    }
    public GetAccountMemberRolePermissionsCachePurge cachePurge() {
        return this.cachePurge;
    }
    public GetAccountMemberRolePermissionsDns dns() {
        return this.dns;
    }
    public GetAccountMemberRolePermissionsDnsRecords dnsRecords() {
        return this.dnsRecords;
    }
    public GetAccountMemberRolePermissionsLb lb() {
        return this.lb;
    }
    public GetAccountMemberRolePermissionsLogs logs() {
        return this.logs;
    }
    public GetAccountMemberRolePermissionsOrganization organization() {
        return this.organization;
    }
    public GetAccountMemberRolePermissionsSsl ssl() {
        return this.ssl;
    }
    public GetAccountMemberRolePermissionsWaf waf() {
        return this.waf;
    }
    public GetAccountMemberRolePermissionsZoneSettings zoneSettings() {
        return this.zoneSettings;
    }
    public GetAccountMemberRolePermissionsZones zones() {
        return this.zones;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountMemberRolePermissions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetAccountMemberRolePermissionsAnalytics analytics;
        private GetAccountMemberRolePermissionsBilling billing;
        private GetAccountMemberRolePermissionsCachePurge cachePurge;
        private GetAccountMemberRolePermissionsDns dns;
        private GetAccountMemberRolePermissionsDnsRecords dnsRecords;
        private GetAccountMemberRolePermissionsLb lb;
        private GetAccountMemberRolePermissionsLogs logs;
        private GetAccountMemberRolePermissionsOrganization organization;
        private GetAccountMemberRolePermissionsSsl ssl;
        private GetAccountMemberRolePermissionsWaf waf;
        private GetAccountMemberRolePermissionsZoneSettings zoneSettings;
        private GetAccountMemberRolePermissionsZones zones;
        public Builder() {}
        public Builder(GetAccountMemberRolePermissions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analytics = defaults.analytics;
    	      this.billing = defaults.billing;
    	      this.cachePurge = defaults.cachePurge;
    	      this.dns = defaults.dns;
    	      this.dnsRecords = defaults.dnsRecords;
    	      this.lb = defaults.lb;
    	      this.logs = defaults.logs;
    	      this.organization = defaults.organization;
    	      this.ssl = defaults.ssl;
    	      this.waf = defaults.waf;
    	      this.zoneSettings = defaults.zoneSettings;
    	      this.zones = defaults.zones;
        }

        @CustomType.Setter
        public Builder analytics(GetAccountMemberRolePermissionsAnalytics analytics) {
            if (analytics == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "analytics");
            }
            this.analytics = analytics;
            return this;
        }
        @CustomType.Setter
        public Builder billing(GetAccountMemberRolePermissionsBilling billing) {
            if (billing == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "billing");
            }
            this.billing = billing;
            return this;
        }
        @CustomType.Setter
        public Builder cachePurge(GetAccountMemberRolePermissionsCachePurge cachePurge) {
            if (cachePurge == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "cachePurge");
            }
            this.cachePurge = cachePurge;
            return this;
        }
        @CustomType.Setter
        public Builder dns(GetAccountMemberRolePermissionsDns dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsRecords(GetAccountMemberRolePermissionsDnsRecords dnsRecords) {
            if (dnsRecords == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "dnsRecords");
            }
            this.dnsRecords = dnsRecords;
            return this;
        }
        @CustomType.Setter
        public Builder lb(GetAccountMemberRolePermissionsLb lb) {
            if (lb == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "lb");
            }
            this.lb = lb;
            return this;
        }
        @CustomType.Setter
        public Builder logs(GetAccountMemberRolePermissionsLogs logs) {
            if (logs == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "logs");
            }
            this.logs = logs;
            return this;
        }
        @CustomType.Setter
        public Builder organization(GetAccountMemberRolePermissionsOrganization organization) {
            if (organization == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "organization");
            }
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(GetAccountMemberRolePermissionsSsl ssl) {
            if (ssl == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "ssl");
            }
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder waf(GetAccountMemberRolePermissionsWaf waf) {
            if (waf == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "waf");
            }
            this.waf = waf;
            return this;
        }
        @CustomType.Setter
        public Builder zoneSettings(GetAccountMemberRolePermissionsZoneSettings zoneSettings) {
            if (zoneSettings == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "zoneSettings");
            }
            this.zoneSettings = zoneSettings;
            return this;
        }
        @CustomType.Setter
        public Builder zones(GetAccountMemberRolePermissionsZones zones) {
            if (zones == null) {
              throw new MissingRequiredPropertyException("GetAccountMemberRolePermissions", "zones");
            }
            this.zones = zones;
            return this;
        }
        public GetAccountMemberRolePermissions build() {
            final var _resultValue = new GetAccountMemberRolePermissions();
            _resultValue.analytics = analytics;
            _resultValue.billing = billing;
            _resultValue.cachePurge = cachePurge;
            _resultValue.dns = dns;
            _resultValue.dnsRecords = dnsRecords;
            _resultValue.lb = lb;
            _resultValue.logs = logs;
            _resultValue.organization = organization;
            _resultValue.ssl = ssl;
            _resultValue.waf = waf;
            _resultValue.zoneSettings = zoneSettings;
            _resultValue.zones = zones;
            return _resultValue;
        }
    }
}
