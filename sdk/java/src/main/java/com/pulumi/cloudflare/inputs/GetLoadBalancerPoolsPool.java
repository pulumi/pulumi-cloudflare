// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetLoadBalancerPoolsPoolLoadShedding;
import com.pulumi.cloudflare.inputs.GetLoadBalancerPoolsPoolOrigin;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetLoadBalancerPoolsPool extends com.pulumi.resources.InvokeArgs {

    public static final GetLoadBalancerPoolsPool Empty = new GetLoadBalancerPoolsPool();

    /**
     * List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
     * 
     */
    @Import(name="checkRegions", required=true)
    private List<String> checkRegions;

    /**
     * @return List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
     * 
     */
    public List<String> checkRegions() {
        return this.checkRegions;
    }

    /**
     * The RFC3339 timestamp of when the load balancer was created.
     * 
     */
    @Import(name="createdOn", required=true)
    private String createdOn;

    /**
     * @return The RFC3339 timestamp of when the load balancer was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }

    /**
     * Brief description of the Load Balancer Pool intention.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return Brief description of the Load Balancer Pool intention.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * ID for this load balancer pool.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return ID for this load balancer pool.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Latitude this pool is physically located at; used for proximity steering.
     * 
     */
    @Import(name="latitude", required=true)
    private Double latitude;

    /**
     * @return Latitude this pool is physically located at; used for proximity steering.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }

    /**
     * Setting for controlling load shedding for this pool.
     * 
     */
    @Import(name="loadSheddings", required=true)
    private List<GetLoadBalancerPoolsPoolLoadShedding> loadSheddings;

    /**
     * @return Setting for controlling load shedding for this pool.
     * 
     */
    public List<GetLoadBalancerPoolsPoolLoadShedding> loadSheddings() {
        return this.loadSheddings;
    }

    /**
     * Longitude this pool is physically located at; used for proximity steering.
     * 
     */
    @Import(name="longitude", required=true)
    private Double longitude;

    /**
     * @return Longitude this pool is physically located at; used for proximity steering.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }

    /**
     * Minimum number of origins that must be healthy for this pool to serve traffic.
     * 
     */
    @Import(name="minimumOrigins", required=true)
    private Integer minimumOrigins;

    /**
     * @return Minimum number of origins that must be healthy for this pool to serve traffic.
     * 
     */
    public Integer minimumOrigins() {
        return this.minimumOrigins;
    }

    /**
     * The RFC3339 timestamp of when the load balancer was last modified.
     * 
     */
    @Import(name="modifiedOn", required=true)
    private String modifiedOn;

    /**
     * @return The RFC3339 timestamp of when the load balancer was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }

    /**
     * ID of the Monitor to use for health checking origins within this pool.
     * 
     */
    @Import(name="monitor", required=true)
    private String monitor;

    /**
     * @return ID of the Monitor to use for health checking origins within this pool.
     * 
     */
    public String monitor() {
        return this.monitor;
    }

    /**
     * Short name (tag) for the pool.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Short name (tag) for the pool.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
     * 
     */
    @Import(name="notificationEmail", required=true)
    private String notificationEmail;

    /**
     * @return Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
     * 
     */
    public String notificationEmail() {
        return this.notificationEmail;
    }

    /**
     * The list of origins within this pool.
     * 
     */
    @Import(name="origins", required=true)
    private List<GetLoadBalancerPoolsPoolOrigin> origins;

    /**
     * @return The list of origins within this pool.
     * 
     */
    public List<GetLoadBalancerPoolsPoolOrigin> origins() {
        return this.origins;
    }

    private GetLoadBalancerPoolsPool() {}

    private GetLoadBalancerPoolsPool(GetLoadBalancerPoolsPool $) {
        this.checkRegions = $.checkRegions;
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.enabled = $.enabled;
        this.id = $.id;
        this.latitude = $.latitude;
        this.loadSheddings = $.loadSheddings;
        this.longitude = $.longitude;
        this.minimumOrigins = $.minimumOrigins;
        this.modifiedOn = $.modifiedOn;
        this.monitor = $.monitor;
        this.name = $.name;
        this.notificationEmail = $.notificationEmail;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLoadBalancerPoolsPool defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLoadBalancerPoolsPool $;

        public Builder() {
            $ = new GetLoadBalancerPoolsPool();
        }

        public Builder(GetLoadBalancerPoolsPool defaults) {
            $ = new GetLoadBalancerPoolsPool(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkRegions List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(List<String> checkRegions) {
            $.checkRegions = checkRegions;
            return this;
        }

        /**
         * @param checkRegions List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }

        /**
         * @param createdOn The RFC3339 timestamp of when the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param description Brief description of the Load Balancer Pool intention.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param enabled Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param id ID for this load balancer pool.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param latitude Latitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param loadSheddings Setting for controlling load shedding for this pool.
         * 
         * @return builder
         * 
         */
        public Builder loadSheddings(List<GetLoadBalancerPoolsPoolLoadShedding> loadSheddings) {
            $.loadSheddings = loadSheddings;
            return this;
        }

        /**
         * @param loadSheddings Setting for controlling load shedding for this pool.
         * 
         * @return builder
         * 
         */
        public Builder loadSheddings(GetLoadBalancerPoolsPoolLoadShedding... loadSheddings) {
            return loadSheddings(List.of(loadSheddings));
        }

        /**
         * @param longitude Longitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param minimumOrigins Minimum number of origins that must be healthy for this pool to serve traffic.
         * 
         * @return builder
         * 
         */
        public Builder minimumOrigins(Integer minimumOrigins) {
            $.minimumOrigins = minimumOrigins;
            return this;
        }

        /**
         * @param modifiedOn The RFC3339 timestamp of when the load balancer was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param monitor ID of the Monitor to use for health checking origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder monitor(String monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param name Short name (tag) for the pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param notificationEmail Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmail(String notificationEmail) {
            $.notificationEmail = notificationEmail;
            return this;
        }

        /**
         * @param origins The list of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder origins(List<GetLoadBalancerPoolsPoolOrigin> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins The list of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder origins(GetLoadBalancerPoolsPoolOrigin... origins) {
            return origins(List.of(origins));
        }

        public GetLoadBalancerPoolsPool build() {
            if ($.checkRegions == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "checkRegions");
            }
            if ($.createdOn == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "createdOn");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "description");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "enabled");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "id");
            }
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "latitude");
            }
            if ($.loadSheddings == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "loadSheddings");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "longitude");
            }
            if ($.minimumOrigins == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "minimumOrigins");
            }
            if ($.modifiedOn == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "modifiedOn");
            }
            if ($.monitor == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "monitor");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "name");
            }
            if ($.notificationEmail == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "notificationEmail");
            }
            if ($.origins == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPool", "origins");
            }
            return $;
        }
    }

}
