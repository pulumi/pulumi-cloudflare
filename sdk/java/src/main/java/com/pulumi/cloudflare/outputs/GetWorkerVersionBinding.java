// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkerVersionBindingOutbound;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkerVersionBinding {
    /**
     * @return Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
     * 
     */
    private String algorithm;
    /**
     * @return R2 bucket to bind to.
     * 
     */
    private String bucketName;
    /**
     * @return Identifier of the certificate to bind to.
     * 
     */
    private String certificateId;
    /**
     * @return The exported class name of the Durable Object.
     * 
     */
    private String className;
    /**
     * @return The name of the dataset to bind to.
     * 
     */
    private String dataset;
    /**
     * @return The environment of the script_name to bind to.
     * 
     */
    private String environment;
    /**
     * @return Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
     * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
     * 
     */
    private String format;
    /**
     * @return Identifier of the D1 database to bind to.
     * 
     */
    private String id;
    /**
     * @return Name of the Vectorize index to bind to.
     * 
     */
    private String indexName;
    /**
     * @return JSON data to use.
     * 
     */
    private String json;
    /**
     * @return Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
     * 
     */
    private String keyBase64;
    /**
     * @return Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
     * 
     */
    private String keyJwk;
    /**
     * @return A JavaScript variable name for the binding.
     * 
     */
    private String name;
    /**
     * @return Namespace to bind to.
     * 
     */
    private String namespace;
    /**
     * @return Namespace identifier tag.
     * 
     */
    private String namespaceId;
    /**
     * @return Outbound worker.
     * 
     */
    private GetWorkerVersionBindingOutbound outbound;
    /**
     * @return Name of the Pipeline to bind to.
     * 
     */
    private String pipeline;
    /**
     * @return Name of the Queue to bind to.
     * 
     */
    private String queueName;
    /**
     * @return The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    private String scriptName;
    /**
     * @return Name of the secret in the store.
     * 
     */
    private String secretName;
    /**
     * @return Name of Worker to bind to.
     * 
     */
    private String service;
    /**
     * @return ID of the store containing the secret.
     * 
     */
    private String storeId;
    /**
     * @return The text value to use.
     * 
     */
    private String text;
    /**
     * @return The kind of resource that the binding provides.
     * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;.
     * 
     */
    private String type;
    /**
     * @return Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
     * 
     */
    private List<String> usages;
    /**
     * @return Name of the Workflow to bind to.
     * 
     */
    private String workflowName;

    private GetWorkerVersionBinding() {}
    /**
     * @return Algorithm-specific key parameters. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#algorithm).
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return R2 bucket to bind to.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Identifier of the certificate to bind to.
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return The exported class name of the Durable Object.
     * 
     */
    public String className() {
        return this.className;
    }
    /**
     * @return The name of the dataset to bind to.
     * 
     */
    public String dataset() {
        return this.dataset;
    }
    /**
     * @return The environment of the script_name to bind to.
     * 
     */
    public String environment() {
        return this.environment;
    }
    /**
     * @return Data format of the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#format).
     * Available values: &#34;raw&#34;, &#34;pkcs8&#34;, &#34;spki&#34;, &#34;jwk&#34;.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return Identifier of the D1 database to bind to.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the Vectorize index to bind to.
     * 
     */
    public String indexName() {
        return this.indexName;
    }
    /**
     * @return JSON data to use.
     * 
     */
    public String json() {
        return this.json;
    }
    /**
     * @return Base64-encoded key data. Required if `format` is &#34;raw&#34;, &#34;pkcs8&#34;, or &#34;spki&#34;.
     * 
     */
    public String keyBase64() {
        return this.keyBase64;
    }
    /**
     * @return Key data in [JSON Web Key](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#json_web_key) format. Required if `format` is &#34;jwk&#34;.
     * 
     */
    public String keyJwk() {
        return this.keyJwk;
    }
    /**
     * @return A JavaScript variable name for the binding.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Namespace to bind to.
     * 
     */
    public String namespace() {
        return this.namespace;
    }
    /**
     * @return Namespace identifier tag.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return Outbound worker.
     * 
     */
    public GetWorkerVersionBindingOutbound outbound() {
        return this.outbound;
    }
    /**
     * @return Name of the Pipeline to bind to.
     * 
     */
    public String pipeline() {
        return this.pipeline;
    }
    /**
     * @return Name of the Queue to bind to.
     * 
     */
    public String queueName() {
        return this.queueName;
    }
    /**
     * @return The script where the Durable Object is defined, if it is external to this Worker.
     * 
     */
    public String scriptName() {
        return this.scriptName;
    }
    /**
     * @return Name of the secret in the store.
     * 
     */
    public String secretName() {
        return this.secretName;
    }
    /**
     * @return Name of Worker to bind to.
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return ID of the store containing the secret.
     * 
     */
    public String storeId() {
        return this.storeId;
    }
    /**
     * @return The text value to use.
     * 
     */
    public String text() {
        return this.text;
    }
    /**
     * @return The kind of resource that the binding provides.
     * Available values: &#34;ai&#34;, &#34;analytics*engine&#34;, &#34;assets&#34;, &#34;browser&#34;, &#34;d1&#34;, &#34;dispatch*namespace&#34;, &#34;durable*object*namespace&#34;, &#34;hyperdrive&#34;, &#34;json&#34;, &#34;kv*namespace&#34;, &#34;mtls*certificate&#34;, &#34;plain*text&#34;, &#34;pipelines&#34;, &#34;queue&#34;, &#34;r2*bucket&#34;, &#34;secret*text&#34;, &#34;service&#34;, &#34;tail*consumer&#34;, &#34;vectorize&#34;, &#34;version*metadata&#34;, &#34;secrets*store*secret&#34;, &#34;secret*key&#34;, &#34;workflow&#34;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Allowed operations with the key. [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey#keyUsages).
     * 
     */
    public List<String> usages() {
        return this.usages;
    }
    /**
     * @return Name of the Workflow to bind to.
     * 
     */
    public String workflowName() {
        return this.workflowName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerVersionBinding defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String bucketName;
        private String certificateId;
        private String className;
        private String dataset;
        private String environment;
        private String format;
        private String id;
        private String indexName;
        private String json;
        private String keyBase64;
        private String keyJwk;
        private String name;
        private String namespace;
        private String namespaceId;
        private GetWorkerVersionBindingOutbound outbound;
        private String pipeline;
        private String queueName;
        private String scriptName;
        private String secretName;
        private String service;
        private String storeId;
        private String text;
        private String type;
        private List<String> usages;
        private String workflowName;
        public Builder() {}
        public Builder(GetWorkerVersionBinding defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.bucketName = defaults.bucketName;
    	      this.certificateId = defaults.certificateId;
    	      this.className = defaults.className;
    	      this.dataset = defaults.dataset;
    	      this.environment = defaults.environment;
    	      this.format = defaults.format;
    	      this.id = defaults.id;
    	      this.indexName = defaults.indexName;
    	      this.json = defaults.json;
    	      this.keyBase64 = defaults.keyBase64;
    	      this.keyJwk = defaults.keyJwk;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.namespaceId = defaults.namespaceId;
    	      this.outbound = defaults.outbound;
    	      this.pipeline = defaults.pipeline;
    	      this.queueName = defaults.queueName;
    	      this.scriptName = defaults.scriptName;
    	      this.secretName = defaults.secretName;
    	      this.service = defaults.service;
    	      this.storeId = defaults.storeId;
    	      this.text = defaults.text;
    	      this.type = defaults.type;
    	      this.usages = defaults.usages;
    	      this.workflowName = defaults.workflowName;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder className(String className) {
            if (className == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "className");
            }
            this.className = className;
            return this;
        }
        @CustomType.Setter
        public Builder dataset(String dataset) {
            if (dataset == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "dataset");
            }
            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder environment(String environment) {
            if (environment == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "environment");
            }
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            if (format == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "format");
            }
            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexName(String indexName) {
            if (indexName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "indexName");
            }
            this.indexName = indexName;
            return this;
        }
        @CustomType.Setter
        public Builder json(String json) {
            if (json == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "json");
            }
            this.json = json;
            return this;
        }
        @CustomType.Setter
        public Builder keyBase64(String keyBase64) {
            if (keyBase64 == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "keyBase64");
            }
            this.keyBase64 = keyBase64;
            return this;
        }
        @CustomType.Setter
        public Builder keyJwk(String keyJwk) {
            if (keyJwk == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "keyJwk");
            }
            this.keyJwk = keyJwk;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            if (namespace == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "namespace");
            }
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            if (namespaceId == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "namespaceId");
            }
            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder outbound(GetWorkerVersionBindingOutbound outbound) {
            if (outbound == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "outbound");
            }
            this.outbound = outbound;
            return this;
        }
        @CustomType.Setter
        public Builder pipeline(String pipeline) {
            if (pipeline == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "pipeline");
            }
            this.pipeline = pipeline;
            return this;
        }
        @CustomType.Setter
        public Builder queueName(String queueName) {
            if (queueName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "queueName");
            }
            this.queueName = queueName;
            return this;
        }
        @CustomType.Setter
        public Builder scriptName(String scriptName) {
            if (scriptName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "scriptName");
            }
            this.scriptName = scriptName;
            return this;
        }
        @CustomType.Setter
        public Builder secretName(String secretName) {
            if (secretName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "secretName");
            }
            this.secretName = secretName;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder storeId(String storeId) {
            if (storeId == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "storeId");
            }
            this.storeId = storeId;
            return this;
        }
        @CustomType.Setter
        public Builder text(String text) {
            if (text == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "text");
            }
            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder usages(List<String> usages) {
            if (usages == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "usages");
            }
            this.usages = usages;
            return this;
        }
        public Builder usages(String... usages) {
            return usages(List.of(usages));
        }
        @CustomType.Setter
        public Builder workflowName(String workflowName) {
            if (workflowName == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionBinding", "workflowName");
            }
            this.workflowName = workflowName;
            return this;
        }
        public GetWorkerVersionBinding build() {
            final var _resultValue = new GetWorkerVersionBinding();
            _resultValue.algorithm = algorithm;
            _resultValue.bucketName = bucketName;
            _resultValue.certificateId = certificateId;
            _resultValue.className = className;
            _resultValue.dataset = dataset;
            _resultValue.environment = environment;
            _resultValue.format = format;
            _resultValue.id = id;
            _resultValue.indexName = indexName;
            _resultValue.json = json;
            _resultValue.keyBase64 = keyBase64;
            _resultValue.keyJwk = keyJwk;
            _resultValue.name = name;
            _resultValue.namespace = namespace;
            _resultValue.namespaceId = namespaceId;
            _resultValue.outbound = outbound;
            _resultValue.pipeline = pipeline;
            _resultValue.queueName = queueName;
            _resultValue.scriptName = scriptName;
            _resultValue.secretName = secretName;
            _resultValue.service = service;
            _resultValue.storeId = storeId;
            _resultValue.text = text;
            _resultValue.type = type;
            _resultValue.usages = usages;
            _resultValue.workflowName = workflowName;
            return _resultValue;
        }
    }
}
