// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustAccessIdentityProviderConfigHeaderAttribute;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessIdentityProviderConfig {
    /**
     * @return Your companies TLD
     * 
     */
    private String appsDomain;
    /**
     * @return A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
     * 
     */
    private List<String> attributes;
    /**
     * @return The authorization_endpoint URL of your IdP
     * 
     */
    private String authUrl;
    /**
     * @return Your okta authorization server id
     * 
     */
    private String authorizationServerId;
    /**
     * @return Your centrify account url
     * 
     */
    private String centrifyAccount;
    /**
     * @return Your centrify app id
     * 
     */
    private String centrifyAppId;
    /**
     * @return The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
     * 
     */
    private String certsUrl;
    /**
     * @return Custom claims
     * 
     */
    private List<String> claims;
    /**
     * @return Your OAuth Client ID
     * 
     */
    private String clientId;
    /**
     * @return Your OAuth Client Secret
     * 
     */
    private String clientSecret;
    /**
     * @return Should Cloudflare try to load authentication contexts from your account
     * 
     */
    private Boolean conditionalAccessEnabled;
    /**
     * @return Your Azure directory uuid
     * 
     */
    private String directoryId;
    /**
     * @return The attribute name for email in the SAML response.
     * 
     */
    private String emailAttributeName;
    /**
     * @return The claim name for email in the id_token response.
     * 
     */
    private String emailClaimName;
    /**
     * @return Add a list of attribute names that will be returned in the response header from the Access callback.
     * 
     */
    private List<GetZeroTrustAccessIdentityProviderConfigHeaderAttribute> headerAttributes;
    /**
     * @return X509 certificate to verify the signature in the SAML authentication response
     * 
     */
    private List<String> idpPublicCerts;
    /**
     * @return IdP Entity ID or Issuer URL
     * 
     */
    private String issuerUrl;
    /**
     * @return Your okta account url
     * 
     */
    private String oktaAccount;
    /**
     * @return Your OneLogin account url
     * 
     */
    private String oneloginAccount;
    /**
     * @return Your PingOne environment identifier
     * 
     */
    private String pingEnvId;
    /**
     * @return Enable Proof Key for Code Exchange (PKCE)
     * 
     */
    private Boolean pkceEnabled;
    /**
     * @return Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
     * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
     * 
     */
    private String prompt;
    private String redirectUrl;
    /**
     * @return OAuth scopes
     * 
     */
    private List<String> scopes;
    /**
     * @return Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
     * 
     */
    private Boolean signRequest;
    /**
     * @return URL to send the SAML authentication requests to
     * 
     */
    private String ssoTargetUrl;
    /**
     * @return Should Cloudflare try to load groups from your account
     * 
     */
    private Boolean supportGroups;
    /**
     * @return The token_endpoint URL of your IdP
     * 
     */
    private String tokenUrl;

    private GetZeroTrustAccessIdentityProviderConfig() {}
    /**
     * @return Your companies TLD
     * 
     */
    public String appsDomain() {
        return this.appsDomain;
    }
    /**
     * @return A list of SAML attribute names that will be added to your signed JWT token and can be used in SAML policy rules.
     * 
     */
    public List<String> attributes() {
        return this.attributes;
    }
    /**
     * @return The authorization_endpoint URL of your IdP
     * 
     */
    public String authUrl() {
        return this.authUrl;
    }
    /**
     * @return Your okta authorization server id
     * 
     */
    public String authorizationServerId() {
        return this.authorizationServerId;
    }
    /**
     * @return Your centrify account url
     * 
     */
    public String centrifyAccount() {
        return this.centrifyAccount;
    }
    /**
     * @return Your centrify app id
     * 
     */
    public String centrifyAppId() {
        return this.centrifyAppId;
    }
    /**
     * @return The jwks_uri endpoint of your IdP to allow the IdP keys to sign the tokens
     * 
     */
    public String certsUrl() {
        return this.certsUrl;
    }
    /**
     * @return Custom claims
     * 
     */
    public List<String> claims() {
        return this.claims;
    }
    /**
     * @return Your OAuth Client ID
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Your OAuth Client Secret
     * 
     */
    public String clientSecret() {
        return this.clientSecret;
    }
    /**
     * @return Should Cloudflare try to load authentication contexts from your account
     * 
     */
    public Boolean conditionalAccessEnabled() {
        return this.conditionalAccessEnabled;
    }
    /**
     * @return Your Azure directory uuid
     * 
     */
    public String directoryId() {
        return this.directoryId;
    }
    /**
     * @return The attribute name for email in the SAML response.
     * 
     */
    public String emailAttributeName() {
        return this.emailAttributeName;
    }
    /**
     * @return The claim name for email in the id_token response.
     * 
     */
    public String emailClaimName() {
        return this.emailClaimName;
    }
    /**
     * @return Add a list of attribute names that will be returned in the response header from the Access callback.
     * 
     */
    public List<GetZeroTrustAccessIdentityProviderConfigHeaderAttribute> headerAttributes() {
        return this.headerAttributes;
    }
    /**
     * @return X509 certificate to verify the signature in the SAML authentication response
     * 
     */
    public List<String> idpPublicCerts() {
        return this.idpPublicCerts;
    }
    /**
     * @return IdP Entity ID or Issuer URL
     * 
     */
    public String issuerUrl() {
        return this.issuerUrl;
    }
    /**
     * @return Your okta account url
     * 
     */
    public String oktaAccount() {
        return this.oktaAccount;
    }
    /**
     * @return Your OneLogin account url
     * 
     */
    public String oneloginAccount() {
        return this.oneloginAccount;
    }
    /**
     * @return Your PingOne environment identifier
     * 
     */
    public String pingEnvId() {
        return this.pingEnvId;
    }
    /**
     * @return Enable Proof Key for Code Exchange (PKCE)
     * 
     */
    public Boolean pkceEnabled() {
        return this.pkceEnabled;
    }
    /**
     * @return Indicates the type of user interaction that is required. prompt=login forces the user to enter their credentials on that request, negating single-sign on. prompt=none is the opposite. It ensures that the user isn&#39;t presented with any interactive prompt. If the request can&#39;t be completed silently by using single-sign on, the Microsoft identity platform returns an interaction*required error. prompt=select*account interrupts single sign-on providing account selection experience listing all the accounts either in session or any remembered account or an option to choose to use a different account altogether.
     * Available values: &#34;login&#34;, &#34;select_account&#34;, &#34;none&#34;.
     * 
     */
    public String prompt() {
        return this.prompt;
    }
    public String redirectUrl() {
        return this.redirectUrl;
    }
    /**
     * @return OAuth scopes
     * 
     */
    public List<String> scopes() {
        return this.scopes;
    }
    /**
     * @return Sign the SAML authentication request with Access credentials. To verify the signature, use the public key from the Access certs endpoints.
     * 
     */
    public Boolean signRequest() {
        return this.signRequest;
    }
    /**
     * @return URL to send the SAML authentication requests to
     * 
     */
    public String ssoTargetUrl() {
        return this.ssoTargetUrl;
    }
    /**
     * @return Should Cloudflare try to load groups from your account
     * 
     */
    public Boolean supportGroups() {
        return this.supportGroups;
    }
    /**
     * @return The token_endpoint URL of your IdP
     * 
     */
    public String tokenUrl() {
        return this.tokenUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessIdentityProviderConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appsDomain;
        private List<String> attributes;
        private String authUrl;
        private String authorizationServerId;
        private String centrifyAccount;
        private String centrifyAppId;
        private String certsUrl;
        private List<String> claims;
        private String clientId;
        private String clientSecret;
        private Boolean conditionalAccessEnabled;
        private String directoryId;
        private String emailAttributeName;
        private String emailClaimName;
        private List<GetZeroTrustAccessIdentityProviderConfigHeaderAttribute> headerAttributes;
        private List<String> idpPublicCerts;
        private String issuerUrl;
        private String oktaAccount;
        private String oneloginAccount;
        private String pingEnvId;
        private Boolean pkceEnabled;
        private String prompt;
        private String redirectUrl;
        private List<String> scopes;
        private Boolean signRequest;
        private String ssoTargetUrl;
        private Boolean supportGroups;
        private String tokenUrl;
        public Builder() {}
        public Builder(GetZeroTrustAccessIdentityProviderConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appsDomain = defaults.appsDomain;
    	      this.attributes = defaults.attributes;
    	      this.authUrl = defaults.authUrl;
    	      this.authorizationServerId = defaults.authorizationServerId;
    	      this.centrifyAccount = defaults.centrifyAccount;
    	      this.centrifyAppId = defaults.centrifyAppId;
    	      this.certsUrl = defaults.certsUrl;
    	      this.claims = defaults.claims;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.conditionalAccessEnabled = defaults.conditionalAccessEnabled;
    	      this.directoryId = defaults.directoryId;
    	      this.emailAttributeName = defaults.emailAttributeName;
    	      this.emailClaimName = defaults.emailClaimName;
    	      this.headerAttributes = defaults.headerAttributes;
    	      this.idpPublicCerts = defaults.idpPublicCerts;
    	      this.issuerUrl = defaults.issuerUrl;
    	      this.oktaAccount = defaults.oktaAccount;
    	      this.oneloginAccount = defaults.oneloginAccount;
    	      this.pingEnvId = defaults.pingEnvId;
    	      this.pkceEnabled = defaults.pkceEnabled;
    	      this.prompt = defaults.prompt;
    	      this.redirectUrl = defaults.redirectUrl;
    	      this.scopes = defaults.scopes;
    	      this.signRequest = defaults.signRequest;
    	      this.ssoTargetUrl = defaults.ssoTargetUrl;
    	      this.supportGroups = defaults.supportGroups;
    	      this.tokenUrl = defaults.tokenUrl;
        }

        @CustomType.Setter
        public Builder appsDomain(String appsDomain) {
            if (appsDomain == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "appsDomain");
            }
            this.appsDomain = appsDomain;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(List<String> attributes) {
            if (attributes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "attributes");
            }
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }
        @CustomType.Setter
        public Builder authUrl(String authUrl) {
            if (authUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "authUrl");
            }
            this.authUrl = authUrl;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationServerId(String authorizationServerId) {
            if (authorizationServerId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "authorizationServerId");
            }
            this.authorizationServerId = authorizationServerId;
            return this;
        }
        @CustomType.Setter
        public Builder centrifyAccount(String centrifyAccount) {
            if (centrifyAccount == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "centrifyAccount");
            }
            this.centrifyAccount = centrifyAccount;
            return this;
        }
        @CustomType.Setter
        public Builder centrifyAppId(String centrifyAppId) {
            if (centrifyAppId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "centrifyAppId");
            }
            this.centrifyAppId = centrifyAppId;
            return this;
        }
        @CustomType.Setter
        public Builder certsUrl(String certsUrl) {
            if (certsUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "certsUrl");
            }
            this.certsUrl = certsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder claims(List<String> claims) {
            if (claims == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "claims");
            }
            this.claims = claims;
            return this;
        }
        public Builder claims(String... claims) {
            return claims(List.of(claims));
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            if (clientSecret == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "clientSecret");
            }
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder conditionalAccessEnabled(Boolean conditionalAccessEnabled) {
            if (conditionalAccessEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "conditionalAccessEnabled");
            }
            this.conditionalAccessEnabled = conditionalAccessEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder directoryId(String directoryId) {
            if (directoryId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "directoryId");
            }
            this.directoryId = directoryId;
            return this;
        }
        @CustomType.Setter
        public Builder emailAttributeName(String emailAttributeName) {
            if (emailAttributeName == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "emailAttributeName");
            }
            this.emailAttributeName = emailAttributeName;
            return this;
        }
        @CustomType.Setter
        public Builder emailClaimName(String emailClaimName) {
            if (emailClaimName == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "emailClaimName");
            }
            this.emailClaimName = emailClaimName;
            return this;
        }
        @CustomType.Setter
        public Builder headerAttributes(List<GetZeroTrustAccessIdentityProviderConfigHeaderAttribute> headerAttributes) {
            if (headerAttributes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "headerAttributes");
            }
            this.headerAttributes = headerAttributes;
            return this;
        }
        public Builder headerAttributes(GetZeroTrustAccessIdentityProviderConfigHeaderAttribute... headerAttributes) {
            return headerAttributes(List.of(headerAttributes));
        }
        @CustomType.Setter
        public Builder idpPublicCerts(List<String> idpPublicCerts) {
            if (idpPublicCerts == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "idpPublicCerts");
            }
            this.idpPublicCerts = idpPublicCerts;
            return this;
        }
        public Builder idpPublicCerts(String... idpPublicCerts) {
            return idpPublicCerts(List.of(idpPublicCerts));
        }
        @CustomType.Setter
        public Builder issuerUrl(String issuerUrl) {
            if (issuerUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "issuerUrl");
            }
            this.issuerUrl = issuerUrl;
            return this;
        }
        @CustomType.Setter
        public Builder oktaAccount(String oktaAccount) {
            if (oktaAccount == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "oktaAccount");
            }
            this.oktaAccount = oktaAccount;
            return this;
        }
        @CustomType.Setter
        public Builder oneloginAccount(String oneloginAccount) {
            if (oneloginAccount == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "oneloginAccount");
            }
            this.oneloginAccount = oneloginAccount;
            return this;
        }
        @CustomType.Setter
        public Builder pingEnvId(String pingEnvId) {
            if (pingEnvId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "pingEnvId");
            }
            this.pingEnvId = pingEnvId;
            return this;
        }
        @CustomType.Setter
        public Builder pkceEnabled(Boolean pkceEnabled) {
            if (pkceEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "pkceEnabled");
            }
            this.pkceEnabled = pkceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder prompt(String prompt) {
            if (prompt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "prompt");
            }
            this.prompt = prompt;
            return this;
        }
        @CustomType.Setter
        public Builder redirectUrl(String redirectUrl) {
            if (redirectUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "redirectUrl");
            }
            this.redirectUrl = redirectUrl;
            return this;
        }
        @CustomType.Setter
        public Builder scopes(List<String> scopes) {
            if (scopes == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "scopes");
            }
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }
        @CustomType.Setter
        public Builder signRequest(Boolean signRequest) {
            if (signRequest == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "signRequest");
            }
            this.signRequest = signRequest;
            return this;
        }
        @CustomType.Setter
        public Builder ssoTargetUrl(String ssoTargetUrl) {
            if (ssoTargetUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "ssoTargetUrl");
            }
            this.ssoTargetUrl = ssoTargetUrl;
            return this;
        }
        @CustomType.Setter
        public Builder supportGroups(Boolean supportGroups) {
            if (supportGroups == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "supportGroups");
            }
            this.supportGroups = supportGroups;
            return this;
        }
        @CustomType.Setter
        public Builder tokenUrl(String tokenUrl) {
            if (tokenUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProviderConfig", "tokenUrl");
            }
            this.tokenUrl = tokenUrl;
            return this;
        }
        public GetZeroTrustAccessIdentityProviderConfig build() {
            final var _resultValue = new GetZeroTrustAccessIdentityProviderConfig();
            _resultValue.appsDomain = appsDomain;
            _resultValue.attributes = attributes;
            _resultValue.authUrl = authUrl;
            _resultValue.authorizationServerId = authorizationServerId;
            _resultValue.centrifyAccount = centrifyAccount;
            _resultValue.centrifyAppId = centrifyAppId;
            _resultValue.certsUrl = certsUrl;
            _resultValue.claims = claims;
            _resultValue.clientId = clientId;
            _resultValue.clientSecret = clientSecret;
            _resultValue.conditionalAccessEnabled = conditionalAccessEnabled;
            _resultValue.directoryId = directoryId;
            _resultValue.emailAttributeName = emailAttributeName;
            _resultValue.emailClaimName = emailClaimName;
            _resultValue.headerAttributes = headerAttributes;
            _resultValue.idpPublicCerts = idpPublicCerts;
            _resultValue.issuerUrl = issuerUrl;
            _resultValue.oktaAccount = oktaAccount;
            _resultValue.oneloginAccount = oneloginAccount;
            _resultValue.pingEnvId = pingEnvId;
            _resultValue.pkceEnabled = pkceEnabled;
            _resultValue.prompt = prompt;
            _resultValue.redirectUrl = redirectUrl;
            _resultValue.scopes = scopes;
            _resultValue.signRequest = signRequest;
            _resultValue.ssoTargetUrl = ssoTargetUrl;
            _resultValue.supportGroups = supportGroups;
            _resultValue.tokenUrl = tokenUrl;
            return _resultValue;
        }
    }
}
