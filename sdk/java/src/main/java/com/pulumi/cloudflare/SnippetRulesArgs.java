// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.SnippetRulesRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class SnippetRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnippetRulesArgs Empty = new SnippetRulesArgs();

    /**
     * A list of snippet rules.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<SnippetRulesRuleArgs>> rules;

    /**
     * @return A list of snippet rules.
     * 
     */
    public Output<List<SnippetRulesRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * The unique ID of the zone.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The unique ID of the zone.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private SnippetRulesArgs() {}

    private SnippetRulesArgs(SnippetRulesArgs $) {
        this.rules = $.rules;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetRulesArgs $;

        public Builder() {
            $ = new SnippetRulesArgs();
        }

        public Builder(SnippetRulesArgs defaults) {
            $ = new SnippetRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<SnippetRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<SnippetRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(SnippetRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SnippetRulesArgs build() {
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("SnippetRulesArgs", "rules");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("SnippetRulesArgs", "zoneId");
            }
            return $;
        }
    }

}
