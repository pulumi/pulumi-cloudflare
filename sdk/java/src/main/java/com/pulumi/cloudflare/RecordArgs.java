// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.RecordDataArgs;
import com.pulumi.cloudflare.inputs.RecordSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordArgs Empty = new RecordArgs();

    /**
     * Comments or notes about the DNS record. This field has no effect on DNS responses.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Comments or notes about the DNS record. This field has no effect on DNS responses.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Components of a CAA record.
     * 
     */
    @Import(name="data")
    private @Nullable Output<RecordDataArgs> data;

    /**
     * @return Components of a CAA record.
     * 
     */
    public Optional<Output<RecordDataArgs>> data() {
        return Optional.ofNullable(this.data);
    }

    /**
     * DNS record name (or {@literal @} for the zone apex) in Punycode.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return DNS record name (or {@literal @} for the zone apex) in Punycode.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    /**
     * @return Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
     * 
     */
    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Whether the record is receiving the performance and security benefits of Cloudflare.
     * 
     */
    @Import(name="proxied")
    private @Nullable Output<Boolean> proxied;

    /**
     * @return Whether the record is receiving the performance and security benefits of Cloudflare.
     * 
     */
    public Optional<Output<Boolean>> proxied() {
        return Optional.ofNullable(this.proxied);
    }

    /**
     * Settings for the DNS record.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<RecordSettingsArgs> settings;

    /**
     * @return Settings for the DNS record.
     * 
     */
    public Optional<Output<RecordSettingsArgs>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Custom tags for the DNS record. This field has no effect on DNS responses.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Custom tags for the DNS record. This field has no effect on DNS responses.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     * 
     */
    @Import(name="ttl", required=true)
    private Output<Double> ttl;

    /**
     * @return Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
     * 
     */
    public Output<Double> ttl() {
        return this.ttl;
    }

    /**
     * Record type.
     * Available values: &#34;A&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Record type.
     * Available values: &#34;A&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private RecordArgs() {}

    private RecordArgs(RecordArgs $) {
        this.comment = $.comment;
        this.content = $.content;
        this.data = $.data;
        this.name = $.name;
        this.priority = $.priority;
        this.proxied = $.proxied;
        this.settings = $.settings;
        this.tags = $.tags;
        this.ttl = $.ttl;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordArgs $;

        public Builder() {
            $ = new RecordArgs();
        }

        public Builder(RecordArgs defaults) {
            $ = new RecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment Comments or notes about the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Comments or notes about the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param content A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param data Components of a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder data(@Nullable Output<RecordDataArgs> data) {
            $.data = data;
            return this;
        }

        /**
         * @param data Components of a CAA record.
         * 
         * @return builder
         * 
         */
        public Builder data(RecordDataArgs data) {
            return data(Output.of(data));
        }

        /**
         * @param name DNS record name (or {@literal @} for the zone apex) in Punycode.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name DNS record name (or {@literal @} for the zone apex) in Punycode.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Required for MX, SRV and URI records; unused by other record types. Records with lower priorities are preferred.
         * 
         * @return builder
         * 
         */
        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param proxied Whether the record is receiving the performance and security benefits of Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder proxied(@Nullable Output<Boolean> proxied) {
            $.proxied = proxied;
            return this;
        }

        /**
         * @param proxied Whether the record is receiving the performance and security benefits of Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder proxied(Boolean proxied) {
            return proxied(Output.of(proxied));
        }

        /**
         * @param settings Settings for the DNS record.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Output<RecordSettingsArgs> settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param settings Settings for the DNS record.
         * 
         * @return builder
         * 
         */
        public Builder settings(RecordSettingsArgs settings) {
            return settings(Output.of(settings));
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Custom tags for the DNS record. This field has no effect on DNS responses.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param ttl Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time To Live (TTL) of the DNS record in seconds. Setting to 1 means &#39;automatic&#39;. Value must be between 60 and 86400, with the minimum reduced to 30 for Enterprise zones.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param type Record type.
         * Available values: &#34;A&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Record type.
         * Available values: &#34;A&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public RecordArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RecordArgs", "name");
            }
            if ($.ttl == null) {
                throw new MissingRequiredPropertyException("RecordArgs", "ttl");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("RecordArgs", "type");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("RecordArgs", "zoneId");
            }
            return $;
        }
    }

}
