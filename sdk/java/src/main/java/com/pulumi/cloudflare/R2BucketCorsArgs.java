// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.R2BucketCorsRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class R2BucketCorsArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketCorsArgs Empty = new R2BucketCorsArgs();

    /**
     * Account ID
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account ID
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Name of the bucket
     * 
     */
    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    /**
     * @return Name of the bucket
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }

    @Import(name="rules")
    private @Nullable Output<List<R2BucketCorsRuleArgs>> rules;

    public Optional<Output<List<R2BucketCorsRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private R2BucketCorsArgs() {}

    private R2BucketCorsArgs(R2BucketCorsArgs $) {
        this.accountId = $.accountId;
        this.bucketName = $.bucketName;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketCorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketCorsArgs $;

        public Builder() {
            $ = new R2BucketCorsArgs();
        }

        public Builder(R2BucketCorsArgs defaults) {
            $ = new R2BucketCorsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param bucketName Name of the bucket
         * 
         * @return builder
         * 
         */
        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName Name of the bucket
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder rules(@Nullable Output<List<R2BucketCorsRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<R2BucketCorsRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(R2BucketCorsRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public R2BucketCorsArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("R2BucketCorsArgs", "accountId");
            }
            if ($.bucketName == null) {
                throw new MissingRequiredPropertyException("R2BucketCorsArgs", "bucketName");
            }
            return $;
        }
    }

}
