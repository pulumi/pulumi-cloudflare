// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DnsRecordSettings {
    /**
     * @return If enabled, causes the CNAME record to be resolved externally and the resulting address records (e.g., A and AAAA) to be returned instead of the CNAME record itself. This setting is unavailable for proxied records, since they are always flattened.
     * 
     */
    private @Nullable Boolean flattenCname;
    /**
     * @return When enabled, only A records will be generated, and AAAA records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    private @Nullable Boolean ipv4Only;
    /**
     * @return When enabled, only AAAA records will be generated, and A records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    private @Nullable Boolean ipv6Only;

    private DnsRecordSettings() {}
    /**
     * @return If enabled, causes the CNAME record to be resolved externally and the resulting address records (e.g., A and AAAA) to be returned instead of the CNAME record itself. This setting is unavailable for proxied records, since they are always flattened.
     * 
     */
    public Optional<Boolean> flattenCname() {
        return Optional.ofNullable(this.flattenCname);
    }
    /**
     * @return When enabled, only A records will be generated, and AAAA records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    public Optional<Boolean> ipv4Only() {
        return Optional.ofNullable(this.ipv4Only);
    }
    /**
     * @return When enabled, only AAAA records will be generated, and A records will not be created. This setting is intended for exceptional cases. Note that this option only applies to proxied records and it has no effect on whether Cloudflare communicates with the origin using IPv4 or IPv6.
     * 
     */
    public Optional<Boolean> ipv6Only() {
        return Optional.ofNullable(this.ipv6Only);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DnsRecordSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean flattenCname;
        private @Nullable Boolean ipv4Only;
        private @Nullable Boolean ipv6Only;
        public Builder() {}
        public Builder(DnsRecordSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.flattenCname = defaults.flattenCname;
    	      this.ipv4Only = defaults.ipv4Only;
    	      this.ipv6Only = defaults.ipv6Only;
        }

        @CustomType.Setter
        public Builder flattenCname(@Nullable Boolean flattenCname) {

            this.flattenCname = flattenCname;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Only(@Nullable Boolean ipv4Only) {

            this.ipv4Only = ipv4Only;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Only(@Nullable Boolean ipv6Only) {

            this.ipv6Only = ipv6Only;
            return this;
        }
        public DnsRecordSettings build() {
            final var _resultValue = new DnsRecordSettings();
            _resultValue.flattenCname = flattenCname;
            _resultValue.ipv4Only = ipv4Only;
            _resultValue.ipv6Only = ipv6Only;
            return _resultValue;
        }
    }
}
