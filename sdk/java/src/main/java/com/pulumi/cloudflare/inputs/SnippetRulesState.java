// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.SnippetRulesRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnippetRulesState extends com.pulumi.resources.ResourceArgs {

    public static final SnippetRulesState Empty = new SnippetRulesState();

    /**
     * An informative description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the rule should be executed.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule should be executed.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The expression defining which traffic will match the rule.
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return The expression defining which traffic will match the rule.
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
     * The timestamp of when the rule was last modified.
     * 
     */
    @Import(name="lastUpdated")
    private @Nullable Output<String> lastUpdated;

    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    public Optional<Output<String>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    /**
     * A list of snippet rules.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<SnippetRulesRuleArgs>> rules;

    /**
     * @return A list of snippet rules.
     * 
     */
    public Optional<Output<List<SnippetRulesRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * The identifying name of the snippet.
     * 
     */
    @Import(name="snippetName")
    private @Nullable Output<String> snippetName;

    /**
     * @return The identifying name of the snippet.
     * 
     */
    public Optional<Output<String>> snippetName() {
        return Optional.ofNullable(this.snippetName);
    }

    /**
     * The unique ID of the zone.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The unique ID of the zone.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private SnippetRulesState() {}

    private SnippetRulesState(SnippetRulesState $) {
        this.description = $.description;
        this.enabled = $.enabled;
        this.expression = $.expression;
        this.lastUpdated = $.lastUpdated;
        this.rules = $.rules;
        this.snippetName = $.snippetName;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnippetRulesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnippetRulesState $;

        public Builder() {
            $ = new SnippetRulesState();
        }

        public Builder(SnippetRulesState defaults) {
            $ = new SnippetRulesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An informative description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the rule should be executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule should be executed.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expression The expression defining which traffic will match the rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The expression defining which traffic will match the rule.
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param lastUpdated The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(@Nullable Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        /**
         * @param lastUpdated The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<SnippetRulesRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<SnippetRulesRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of snippet rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(SnippetRulesRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(@Nullable Output<String> snippetName) {
            $.snippetName = snippetName;
            return this;
        }

        /**
         * @param snippetName The identifying name of the snippet.
         * 
         * @return builder
         * 
         */
        public Builder snippetName(String snippetName) {
            return snippetName(Output.of(snippetName));
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The unique ID of the zone.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SnippetRulesState build() {
            return $;
        }
    }

}
