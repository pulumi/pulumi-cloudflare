// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class R2BucketSippyDestination {
    /**
     * @return ID of a Cloudflare API token.
     * This is the value labelled &#34;Access Key ID&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     */
    private @Nullable String accessKeyId;
    /**
     * @return Available values: &#34;r2&#34;.
     * 
     */
    private @Nullable String cloudProvider;
    /**
     * @return Value of a Cloudflare API token.
     * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     * Sippy will use this token when writing objects to R2, so it is
     * best to scope this token to the bucket you&#39;re enabling Sippy for.
     * 
     */
    private @Nullable String secretAccessKey;

    private R2BucketSippyDestination() {}
    /**
     * @return ID of a Cloudflare API token.
     * This is the value labelled &#34;Access Key ID&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    /**
     * @return Available values: &#34;r2&#34;.
     * 
     */
    public Optional<String> cloudProvider() {
        return Optional.ofNullable(this.cloudProvider);
    }
    /**
     * @return Value of a Cloudflare API token.
     * This is the value labelled &#34;Secret Access Key&#34; when creating an API.
     * token from the [R2 dashboard](https://dash.cloudflare.com/?to=/:account/r2/api-tokens).
     * 
     * Sippy will use this token when writing objects to R2, so it is
     * best to scope this token to the bucket you&#39;re enabling Sippy for.
     * 
     */
    public Optional<String> secretAccessKey() {
        return Optional.ofNullable(this.secretAccessKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(R2BucketSippyDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessKeyId;
        private @Nullable String cloudProvider;
        private @Nullable String secretAccessKey;
        public Builder() {}
        public Builder(R2BucketSippyDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.secretAccessKey = defaults.secretAccessKey;
        }

        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {

            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder cloudProvider(@Nullable String cloudProvider) {

            this.cloudProvider = cloudProvider;
            return this;
        }
        @CustomType.Setter
        public Builder secretAccessKey(@Nullable String secretAccessKey) {

            this.secretAccessKey = secretAccessKey;
            return this;
        }
        public R2BucketSippyDestination build() {
            final var _resultValue = new R2BucketSippyDestination();
            _resultValue.accessKeyId = accessKeyId;
            _resultValue.cloudProvider = cloudProvider;
            _resultValue.secretAccessKey = secretAccessKey;
            return _resultValue;
        }
    }
}
