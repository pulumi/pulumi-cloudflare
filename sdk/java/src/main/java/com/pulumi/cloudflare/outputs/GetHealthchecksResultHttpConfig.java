// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetHealthchecksResultHttpConfig {
    /**
     * @return Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    private Boolean allowInsecure;
    /**
     * @return A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    private String expectedBody;
    /**
     * @return The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    private List<String> expectedCodes;
    /**
     * @return Follow redirects if the origin returns a 3xx status code.
     * 
     */
    private Boolean followRedirects;
    /**
     * @return The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    private Map<String,List<String>> header;
    /**
     * @return The HTTP method to use for the health check.
     * 
     */
    private String method;
    /**
     * @return The endpoint path to health check against.
     * 
     */
    private String path;
    /**
     * @return Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    private Integer port;

    private GetHealthchecksResultHttpConfig() {}
    /**
     * @return Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    public Boolean allowInsecure() {
        return this.allowInsecure;
    }
    /**
     * @return A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    public String expectedBody() {
        return this.expectedBody;
    }
    /**
     * @return The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    public List<String> expectedCodes() {
        return this.expectedCodes;
    }
    /**
     * @return Follow redirects if the origin returns a 3xx status code.
     * 
     */
    public Boolean followRedirects() {
        return this.followRedirects;
    }
    /**
     * @return The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    public Map<String,List<String>> header() {
        return this.header;
    }
    /**
     * @return The HTTP method to use for the health check.
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return The endpoint path to health check against.
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    public Integer port() {
        return this.port;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHealthchecksResultHttpConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowInsecure;
        private String expectedBody;
        private List<String> expectedCodes;
        private Boolean followRedirects;
        private Map<String,List<String>> header;
        private String method;
        private String path;
        private Integer port;
        public Builder() {}
        public Builder(GetHealthchecksResultHttpConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.expectedBody = defaults.expectedBody;
    	      this.expectedCodes = defaults.expectedCodes;
    	      this.followRedirects = defaults.followRedirects;
    	      this.header = defaults.header;
    	      this.method = defaults.method;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder allowInsecure(Boolean allowInsecure) {
            if (allowInsecure == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "allowInsecure");
            }
            this.allowInsecure = allowInsecure;
            return this;
        }
        @CustomType.Setter
        public Builder expectedBody(String expectedBody) {
            if (expectedBody == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "expectedBody");
            }
            this.expectedBody = expectedBody;
            return this;
        }
        @CustomType.Setter
        public Builder expectedCodes(List<String> expectedCodes) {
            if (expectedCodes == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "expectedCodes");
            }
            this.expectedCodes = expectedCodes;
            return this;
        }
        public Builder expectedCodes(String... expectedCodes) {
            return expectedCodes(List.of(expectedCodes));
        }
        @CustomType.Setter
        public Builder followRedirects(Boolean followRedirects) {
            if (followRedirects == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "followRedirects");
            }
            this.followRedirects = followRedirects;
            return this;
        }
        @CustomType.Setter
        public Builder header(Map<String,List<String>> header) {
            if (header == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "header");
            }
            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetHealthchecksResultHttpConfig", "port");
            }
            this.port = port;
            return this;
        }
        public GetHealthchecksResultHttpConfig build() {
            final var _resultValue = new GetHealthchecksResultHttpConfig();
            _resultValue.allowInsecure = allowInsecure;
            _resultValue.expectedBody = expectedBody;
            _resultValue.expectedCodes = expectedCodes;
            _resultValue.followRedirects = followRedirects;
            _resultValue.header = header;
            _resultValue.method = method;
            _resultValue.path = path;
            _resultValue.port = port;
            return _resultValue;
        }
    }
}
