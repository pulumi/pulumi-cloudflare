// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RecordData {
    private @Nullable Integer algorithm;
    private @Nullable Double altitude;
    private @Nullable String certificate;
    private @Nullable String content;
    private @Nullable String digest;
    private @Nullable Integer digestType;
    private @Nullable String fingerprint;
    private @Nullable String flags;
    private @Nullable Integer keyTag;
    private @Nullable Integer latDegrees;
    private @Nullable String latDirection;
    private @Nullable Integer latMinutes;
    private @Nullable Double latSeconds;
    private @Nullable Integer longDegrees;
    private @Nullable String longDirection;
    private @Nullable Integer longMinutes;
    private @Nullable Double longSeconds;
    private @Nullable Integer matchingType;
    private @Nullable String name;
    private @Nullable Integer order;
    private @Nullable Integer port;
    private @Nullable Double precisionHorz;
    private @Nullable Double precisionVert;
    private @Nullable Integer preference;
    private @Nullable Integer priority;
    private @Nullable String proto;
    private @Nullable Integer protocol;
    private @Nullable String publicKey;
    private @Nullable String regex;
    private @Nullable String replacement;
    private @Nullable Integer selector;
    private @Nullable String service;
    private @Nullable Double size;
    private @Nullable String tag;
    private @Nullable String target;
    private @Nullable Integer type;
    private @Nullable Integer usage;
    private @Nullable String value;
    private @Nullable Integer weight;

    private RecordData() {}
    public Optional<Integer> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }
    public Optional<Double> altitude() {
        return Optional.ofNullable(this.altitude);
    }
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    public Optional<String> digest() {
        return Optional.ofNullable(this.digest);
    }
    public Optional<Integer> digestType() {
        return Optional.ofNullable(this.digestType);
    }
    public Optional<String> fingerprint() {
        return Optional.ofNullable(this.fingerprint);
    }
    public Optional<String> flags() {
        return Optional.ofNullable(this.flags);
    }
    public Optional<Integer> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }
    public Optional<Integer> latDegrees() {
        return Optional.ofNullable(this.latDegrees);
    }
    public Optional<String> latDirection() {
        return Optional.ofNullable(this.latDirection);
    }
    public Optional<Integer> latMinutes() {
        return Optional.ofNullable(this.latMinutes);
    }
    public Optional<Double> latSeconds() {
        return Optional.ofNullable(this.latSeconds);
    }
    public Optional<Integer> longDegrees() {
        return Optional.ofNullable(this.longDegrees);
    }
    public Optional<String> longDirection() {
        return Optional.ofNullable(this.longDirection);
    }
    public Optional<Integer> longMinutes() {
        return Optional.ofNullable(this.longMinutes);
    }
    public Optional<Double> longSeconds() {
        return Optional.ofNullable(this.longSeconds);
    }
    public Optional<Integer> matchingType() {
        return Optional.ofNullable(this.matchingType);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Integer> order() {
        return Optional.ofNullable(this.order);
    }
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    public Optional<Double> precisionHorz() {
        return Optional.ofNullable(this.precisionHorz);
    }
    public Optional<Double> precisionVert() {
        return Optional.ofNullable(this.precisionVert);
    }
    public Optional<Integer> preference() {
        return Optional.ofNullable(this.preference);
    }
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    public Optional<String> proto() {
        return Optional.ofNullable(this.proto);
    }
    public Optional<Integer> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    public Optional<String> regex() {
        return Optional.ofNullable(this.regex);
    }
    public Optional<String> replacement() {
        return Optional.ofNullable(this.replacement);
    }
    public Optional<Integer> selector() {
        return Optional.ofNullable(this.selector);
    }
    public Optional<String> service() {
        return Optional.ofNullable(this.service);
    }
    public Optional<Double> size() {
        return Optional.ofNullable(this.size);
    }
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }
    public Optional<Integer> type() {
        return Optional.ofNullable(this.type);
    }
    public Optional<Integer> usage() {
        return Optional.ofNullable(this.usage);
    }
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecordData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer algorithm;
        private @Nullable Double altitude;
        private @Nullable String certificate;
        private @Nullable String content;
        private @Nullable String digest;
        private @Nullable Integer digestType;
        private @Nullable String fingerprint;
        private @Nullable String flags;
        private @Nullable Integer keyTag;
        private @Nullable Integer latDegrees;
        private @Nullable String latDirection;
        private @Nullable Integer latMinutes;
        private @Nullable Double latSeconds;
        private @Nullable Integer longDegrees;
        private @Nullable String longDirection;
        private @Nullable Integer longMinutes;
        private @Nullable Double longSeconds;
        private @Nullable Integer matchingType;
        private @Nullable String name;
        private @Nullable Integer order;
        private @Nullable Integer port;
        private @Nullable Double precisionHorz;
        private @Nullable Double precisionVert;
        private @Nullable Integer preference;
        private @Nullable Integer priority;
        private @Nullable String proto;
        private @Nullable Integer protocol;
        private @Nullable String publicKey;
        private @Nullable String regex;
        private @Nullable String replacement;
        private @Nullable Integer selector;
        private @Nullable String service;
        private @Nullable Double size;
        private @Nullable String tag;
        private @Nullable String target;
        private @Nullable Integer type;
        private @Nullable Integer usage;
        private @Nullable String value;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(RecordData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.altitude = defaults.altitude;
    	      this.certificate = defaults.certificate;
    	      this.content = defaults.content;
    	      this.digest = defaults.digest;
    	      this.digestType = defaults.digestType;
    	      this.fingerprint = defaults.fingerprint;
    	      this.flags = defaults.flags;
    	      this.keyTag = defaults.keyTag;
    	      this.latDegrees = defaults.latDegrees;
    	      this.latDirection = defaults.latDirection;
    	      this.latMinutes = defaults.latMinutes;
    	      this.latSeconds = defaults.latSeconds;
    	      this.longDegrees = defaults.longDegrees;
    	      this.longDirection = defaults.longDirection;
    	      this.longMinutes = defaults.longMinutes;
    	      this.longSeconds = defaults.longSeconds;
    	      this.matchingType = defaults.matchingType;
    	      this.name = defaults.name;
    	      this.order = defaults.order;
    	      this.port = defaults.port;
    	      this.precisionHorz = defaults.precisionHorz;
    	      this.precisionVert = defaults.precisionVert;
    	      this.preference = defaults.preference;
    	      this.priority = defaults.priority;
    	      this.proto = defaults.proto;
    	      this.protocol = defaults.protocol;
    	      this.publicKey = defaults.publicKey;
    	      this.regex = defaults.regex;
    	      this.replacement = defaults.replacement;
    	      this.selector = defaults.selector;
    	      this.service = defaults.service;
    	      this.size = defaults.size;
    	      this.tag = defaults.tag;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
    	      this.usage = defaults.usage;
    	      this.value = defaults.value;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder algorithm(@Nullable Integer algorithm) {

            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder altitude(@Nullable Double altitude) {

            this.altitude = altitude;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {

            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder content(@Nullable String content) {

            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder digest(@Nullable String digest) {

            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder digestType(@Nullable Integer digestType) {

            this.digestType = digestType;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(@Nullable String fingerprint) {

            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder flags(@Nullable String flags) {

            this.flags = flags;
            return this;
        }
        @CustomType.Setter
        public Builder keyTag(@Nullable Integer keyTag) {

            this.keyTag = keyTag;
            return this;
        }
        @CustomType.Setter
        public Builder latDegrees(@Nullable Integer latDegrees) {

            this.latDegrees = latDegrees;
            return this;
        }
        @CustomType.Setter
        public Builder latDirection(@Nullable String latDirection) {

            this.latDirection = latDirection;
            return this;
        }
        @CustomType.Setter
        public Builder latMinutes(@Nullable Integer latMinutes) {

            this.latMinutes = latMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder latSeconds(@Nullable Double latSeconds) {

            this.latSeconds = latSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder longDegrees(@Nullable Integer longDegrees) {

            this.longDegrees = longDegrees;
            return this;
        }
        @CustomType.Setter
        public Builder longDirection(@Nullable String longDirection) {

            this.longDirection = longDirection;
            return this;
        }
        @CustomType.Setter
        public Builder longMinutes(@Nullable Integer longMinutes) {

            this.longMinutes = longMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder longSeconds(@Nullable Double longSeconds) {

            this.longSeconds = longSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder matchingType(@Nullable Integer matchingType) {

            this.matchingType = matchingType;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder order(@Nullable Integer order) {

            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder precisionHorz(@Nullable Double precisionHorz) {

            this.precisionHorz = precisionHorz;
            return this;
        }
        @CustomType.Setter
        public Builder precisionVert(@Nullable Double precisionVert) {

            this.precisionVert = precisionVert;
            return this;
        }
        @CustomType.Setter
        public Builder preference(@Nullable Integer preference) {

            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder proto(@Nullable String proto) {

            this.proto = proto;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable Integer protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {

            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder regex(@Nullable String regex) {

            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder replacement(@Nullable String replacement) {

            this.replacement = replacement;
            return this;
        }
        @CustomType.Setter
        public Builder selector(@Nullable Integer selector) {

            this.selector = selector;
            return this;
        }
        @CustomType.Setter
        public Builder service(@Nullable String service) {

            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Double size) {

            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder tag(@Nullable String tag) {

            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder target(@Nullable String target) {

            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable Integer type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder usage(@Nullable Integer usage) {

            this.usage = usage;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {

            this.weight = weight;
            return this;
        }
        public RecordData build() {
            final var _resultValue = new RecordData();
            _resultValue.algorithm = algorithm;
            _resultValue.altitude = altitude;
            _resultValue.certificate = certificate;
            _resultValue.content = content;
            _resultValue.digest = digest;
            _resultValue.digestType = digestType;
            _resultValue.fingerprint = fingerprint;
            _resultValue.flags = flags;
            _resultValue.keyTag = keyTag;
            _resultValue.latDegrees = latDegrees;
            _resultValue.latDirection = latDirection;
            _resultValue.latMinutes = latMinutes;
            _resultValue.latSeconds = latSeconds;
            _resultValue.longDegrees = longDegrees;
            _resultValue.longDirection = longDirection;
            _resultValue.longMinutes = longMinutes;
            _resultValue.longSeconds = longSeconds;
            _resultValue.matchingType = matchingType;
            _resultValue.name = name;
            _resultValue.order = order;
            _resultValue.port = port;
            _resultValue.precisionHorz = precisionHorz;
            _resultValue.precisionVert = precisionVert;
            _resultValue.preference = preference;
            _resultValue.priority = priority;
            _resultValue.proto = proto;
            _resultValue.protocol = protocol;
            _resultValue.publicKey = publicKey;
            _resultValue.regex = regex;
            _resultValue.replacement = replacement;
            _resultValue.selector = selector;
            _resultValue.service = service;
            _resultValue.size = size;
            _resultValue.tag = tag;
            _resultValue.target = target;
            _resultValue.type = type;
            _resultValue.usage = usage;
            _resultValue.value = value;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
