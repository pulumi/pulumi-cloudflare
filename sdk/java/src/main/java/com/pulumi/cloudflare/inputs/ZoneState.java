// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZoneAccountArgs;
import com.pulumi.cloudflare.inputs.ZoneMetaArgs;
import com.pulumi.cloudflare.inputs.ZoneOwnerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneState Empty = new ZoneState();

    @Import(name="account")
    private @Nullable Output<ZoneAccountArgs> account;

    public Optional<Output<ZoneAccountArgs>> account() {
        return Optional.ofNullable(this.account);
    }

    /**
     * The last time proof of ownership was detected and the zone was made
     * active
     * 
     */
    @Import(name="activatedOn")
    private @Nullable Output<String> activatedOn;

    /**
     * @return The last time proof of ownership was detected and the zone was made
     * active
     * 
     */
    public Optional<Output<String>> activatedOn() {
        return Optional.ofNullable(this.activatedOn);
    }

    /**
     * When the zone was created
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the zone was created
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     * 
     */
    @Import(name="developmentMode")
    private @Nullable Output<Double> developmentMode;

    /**
     * @return The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     * 
     */
    public Optional<Output<Double>> developmentMode() {
        return Optional.ofNullable(this.developmentMode);
    }

    /**
     * Metadata about the zone
     * 
     */
    @Import(name="meta")
    private @Nullable Output<ZoneMetaArgs> meta;

    /**
     * @return Metadata about the zone
     * 
     */
    public Optional<Output<ZoneMetaArgs>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * When the zone was last modified
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When the zone was last modified
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The domain name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The domain name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name servers Cloudflare assigns to a zone
     * 
     */
    @Import(name="nameServers")
    private @Nullable Output<List<String>> nameServers;

    /**
     * @return The name servers Cloudflare assigns to a zone
     * 
     */
    public Optional<Output<List<String>>> nameServers() {
        return Optional.ofNullable(this.nameServers);
    }

    /**
     * DNS host at the time of switching to Cloudflare
     * 
     */
    @Import(name="originalDnshost")
    private @Nullable Output<String> originalDnshost;

    /**
     * @return DNS host at the time of switching to Cloudflare
     * 
     */
    public Optional<Output<String>> originalDnshost() {
        return Optional.ofNullable(this.originalDnshost);
    }

    /**
     * Original name servers before moving to Cloudflare
     * 
     */
    @Import(name="originalNameServers")
    private @Nullable Output<List<String>> originalNameServers;

    /**
     * @return Original name servers before moving to Cloudflare
     * 
     */
    public Optional<Output<List<String>>> originalNameServers() {
        return Optional.ofNullable(this.originalNameServers);
    }

    /**
     * Registrar for the domain at the time of switching to Cloudflare
     * 
     */
    @Import(name="originalRegistrar")
    private @Nullable Output<String> originalRegistrar;

    /**
     * @return Registrar for the domain at the time of switching to Cloudflare
     * 
     */
    public Optional<Output<String>> originalRegistrar() {
        return Optional.ofNullable(this.originalRegistrar);
    }

    /**
     * The owner of the zone
     * 
     */
    @Import(name="owner")
    private @Nullable Output<ZoneOwnerArgs> owner;

    /**
     * @return The owner of the zone
     * 
     */
    public Optional<Output<ZoneOwnerArgs>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The zone status on Cloudflare.
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The zone status on Cloudflare.
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * An array of domains used for custom name servers. This is only
     * available for Business and Enterprise plans.
     * 
     */
    @Import(name="vanityNameServers")
    private @Nullable Output<List<String>> vanityNameServers;

    /**
     * @return An array of domains used for custom name servers. This is only
     * available for Business and Enterprise plans.
     * 
     */
    public Optional<Output<List<String>>> vanityNameServers() {
        return Optional.ofNullable(this.vanityNameServers);
    }

    /**
     * Verification key for partial zone setup.
     * 
     */
    @Import(name="verificationKey")
    private @Nullable Output<String> verificationKey;

    /**
     * @return Verification key for partial zone setup.
     * 
     */
    public Optional<Output<String>> verificationKey() {
        return Optional.ofNullable(this.verificationKey);
    }

    private ZoneState() {}

    private ZoneState(ZoneState $) {
        this.account = $.account;
        this.activatedOn = $.activatedOn;
        this.createdOn = $.createdOn;
        this.developmentMode = $.developmentMode;
        this.meta = $.meta;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.nameServers = $.nameServers;
        this.originalDnshost = $.originalDnshost;
        this.originalNameServers = $.originalNameServers;
        this.originalRegistrar = $.originalRegistrar;
        this.owner = $.owner;
        this.paused = $.paused;
        this.status = $.status;
        this.type = $.type;
        this.vanityNameServers = $.vanityNameServers;
        this.verificationKey = $.verificationKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneState $;

        public Builder() {
            $ = new ZoneState();
        }

        public Builder(ZoneState defaults) {
            $ = new ZoneState(Objects.requireNonNull(defaults));
        }

        public Builder account(@Nullable Output<ZoneAccountArgs> account) {
            $.account = account;
            return this;
        }

        public Builder account(ZoneAccountArgs account) {
            return account(Output.of(account));
        }

        /**
         * @param activatedOn The last time proof of ownership was detected and the zone was made
         * active
         * 
         * @return builder
         * 
         */
        public Builder activatedOn(@Nullable Output<String> activatedOn) {
            $.activatedOn = activatedOn;
            return this;
        }

        /**
         * @param activatedOn The last time proof of ownership was detected and the zone was made
         * active
         * 
         * @return builder
         * 
         */
        public Builder activatedOn(String activatedOn) {
            return activatedOn(Output.of(activatedOn));
        }

        /**
         * @param createdOn When the zone was created
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the zone was created
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param developmentMode The interval (in seconds) from when development mode expires
         * (positive integer) or last expired (negative integer) for the
         * domain. If development mode has never been enabled, this value is 0.
         * 
         * @return builder
         * 
         */
        public Builder developmentMode(@Nullable Output<Double> developmentMode) {
            $.developmentMode = developmentMode;
            return this;
        }

        /**
         * @param developmentMode The interval (in seconds) from when development mode expires
         * (positive integer) or last expired (negative integer) for the
         * domain. If development mode has never been enabled, this value is 0.
         * 
         * @return builder
         * 
         */
        public Builder developmentMode(Double developmentMode) {
            return developmentMode(Output.of(developmentMode));
        }

        /**
         * @param meta Metadata about the zone
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<ZoneMetaArgs> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta Metadata about the zone
         * 
         * @return builder
         * 
         */
        public Builder meta(ZoneMetaArgs meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param modifiedOn When the zone was last modified
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When the zone was last modified
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name The domain name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameServers The name servers Cloudflare assigns to a zone
         * 
         * @return builder
         * 
         */
        public Builder nameServers(@Nullable Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers The name servers Cloudflare assigns to a zone
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        /**
         * @param nameServers The name servers Cloudflare assigns to a zone
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        /**
         * @param originalDnshost DNS host at the time of switching to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalDnshost(@Nullable Output<String> originalDnshost) {
            $.originalDnshost = originalDnshost;
            return this;
        }

        /**
         * @param originalDnshost DNS host at the time of switching to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalDnshost(String originalDnshost) {
            return originalDnshost(Output.of(originalDnshost));
        }

        /**
         * @param originalNameServers Original name servers before moving to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalNameServers(@Nullable Output<List<String>> originalNameServers) {
            $.originalNameServers = originalNameServers;
            return this;
        }

        /**
         * @param originalNameServers Original name servers before moving to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalNameServers(List<String> originalNameServers) {
            return originalNameServers(Output.of(originalNameServers));
        }

        /**
         * @param originalNameServers Original name servers before moving to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalNameServers(String... originalNameServers) {
            return originalNameServers(List.of(originalNameServers));
        }

        /**
         * @param originalRegistrar Registrar for the domain at the time of switching to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalRegistrar(@Nullable Output<String> originalRegistrar) {
            $.originalRegistrar = originalRegistrar;
            return this;
        }

        /**
         * @param originalRegistrar Registrar for the domain at the time of switching to Cloudflare
         * 
         * @return builder
         * 
         */
        public Builder originalRegistrar(String originalRegistrar) {
            return originalRegistrar(Output.of(originalRegistrar));
        }

        /**
         * @param owner The owner of the zone
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<ZoneOwnerArgs> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner The owner of the zone
         * 
         * @return builder
         * 
         */
        public Builder owner(ZoneOwnerArgs owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param paused Indicates whether the zone is only using Cloudflare DNS services. A
         * true value means the zone will not receive security or performance
         * benefits.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused Indicates whether the zone is only using Cloudflare DNS services. A
         * true value means the zone will not receive security or performance
         * benefits.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param status The zone status on Cloudflare.
         * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The zone status on Cloudflare.
         * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type A full zone implies that DNS is hosted with Cloudflare. A partial zone is
         * typically a partner-hosted zone or a CNAME setup.
         * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type A full zone implies that DNS is hosted with Cloudflare. A partial zone is
         * typically a partner-hosted zone or a CNAME setup.
         * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vanityNameServers An array of domains used for custom name servers. This is only
         * available for Business and Enterprise plans.
         * 
         * @return builder
         * 
         */
        public Builder vanityNameServers(@Nullable Output<List<String>> vanityNameServers) {
            $.vanityNameServers = vanityNameServers;
            return this;
        }

        /**
         * @param vanityNameServers An array of domains used for custom name servers. This is only
         * available for Business and Enterprise plans.
         * 
         * @return builder
         * 
         */
        public Builder vanityNameServers(List<String> vanityNameServers) {
            return vanityNameServers(Output.of(vanityNameServers));
        }

        /**
         * @param vanityNameServers An array of domains used for custom name servers. This is only
         * available for Business and Enterprise plans.
         * 
         * @return builder
         * 
         */
        public Builder vanityNameServers(String... vanityNameServers) {
            return vanityNameServers(List.of(vanityNameServers));
        }

        /**
         * @param verificationKey Verification key for partial zone setup.
         * 
         * @return builder
         * 
         */
        public Builder verificationKey(@Nullable Output<String> verificationKey) {
            $.verificationKey = verificationKey;
            return this;
        }

        /**
         * @param verificationKey Verification key for partial zone setup.
         * 
         * @return builder
         * 
         */
        public Builder verificationKey(String verificationKey) {
            return verificationKey(Output.of(verificationKey));
        }

        public ZoneState build() {
            return $;
        }
    }

}
