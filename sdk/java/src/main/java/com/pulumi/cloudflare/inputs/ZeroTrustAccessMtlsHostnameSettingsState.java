// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustAccessMtlsHostnameSettingsSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessMtlsHostnameSettingsState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessMtlsHostnameSettingsState Empty = new ZeroTrustAccessMtlsHostnameSettingsState();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     * 
     */
    @Import(name="chinaNetwork")
    private @Nullable Output<Boolean> chinaNetwork;

    /**
     * @return Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
     * 
     */
    public Optional<Output<Boolean>> chinaNetwork() {
        return Optional.ofNullable(this.chinaNetwork);
    }

    /**
     * Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     * 
     */
    @Import(name="clientCertificateForwarding")
    private @Nullable Output<Boolean> clientCertificateForwarding;

    /**
     * @return Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
     * 
     */
    public Optional<Output<Boolean>> clientCertificateForwarding() {
        return Optional.ofNullable(this.clientCertificateForwarding);
    }

    /**
     * The hostname that these settings apply to.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname that these settings apply to.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    @Import(name="settings")
    private @Nullable Output<List<ZeroTrustAccessMtlsHostnameSettingsSettingArgs>> settings;

    public Optional<Output<List<ZeroTrustAccessMtlsHostnameSettingsSettingArgs>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZeroTrustAccessMtlsHostnameSettingsState() {}

    private ZeroTrustAccessMtlsHostnameSettingsState(ZeroTrustAccessMtlsHostnameSettingsState $) {
        this.accountId = $.accountId;
        this.chinaNetwork = $.chinaNetwork;
        this.clientCertificateForwarding = $.clientCertificateForwarding;
        this.hostname = $.hostname;
        this.settings = $.settings;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessMtlsHostnameSettingsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessMtlsHostnameSettingsState $;

        public Builder() {
            $ = new ZeroTrustAccessMtlsHostnameSettingsState();
        }

        public Builder(ZeroTrustAccessMtlsHostnameSettingsState defaults) {
            $ = new ZeroTrustAccessMtlsHostnameSettingsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param chinaNetwork Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
         * 
         * @return builder
         * 
         */
        public Builder chinaNetwork(@Nullable Output<Boolean> chinaNetwork) {
            $.chinaNetwork = chinaNetwork;
            return this;
        }

        /**
         * @param chinaNetwork Request client certificates for this hostname in China. Can only be set to true if this zone is china network enabled.
         * 
         * @return builder
         * 
         */
        public Builder chinaNetwork(Boolean chinaNetwork) {
            return chinaNetwork(Output.of(chinaNetwork));
        }

        /**
         * @param clientCertificateForwarding Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateForwarding(@Nullable Output<Boolean> clientCertificateForwarding) {
            $.clientCertificateForwarding = clientCertificateForwarding;
            return this;
        }

        /**
         * @param clientCertificateForwarding Client Certificate Forwarding is a feature that takes the client cert provided by the eyeball to the edge, and forwards it to the origin as a HTTP header to allow logging on the origin.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateForwarding(Boolean clientCertificateForwarding) {
            return clientCertificateForwarding(Output.of(clientCertificateForwarding));
        }

        /**
         * @param hostname The hostname that these settings apply to.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname that these settings apply to.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder settings(@Nullable Output<List<ZeroTrustAccessMtlsHostnameSettingsSettingArgs>> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(List<ZeroTrustAccessMtlsHostnameSettingsSettingArgs> settings) {
            return settings(Output.of(settings));
        }

        public Builder settings(ZeroTrustAccessMtlsHostnameSettingsSettingArgs... settings) {
            return settings(List.of(settings));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZeroTrustAccessMtlsHostnameSettingsState build() {
            return $;
        }
    }

}
