// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccessGroupExcludeArgs;
import com.pulumi.cloudflare.inputs.AccessGroupIncludeArgs;
import com.pulumi.cloudflare.inputs.AccessGroupRequireArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessGroupState extends com.pulumi.resources.ResourceArgs {

    public static final AccessGroupState Empty = new AccessGroupState();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<AccessGroupExcludeArgs>> excludes;

    /**
     * @return Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public Optional<Output<List<AccessGroupExcludeArgs>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    @Import(name="includes")
    private @Nullable Output<List<AccessGroupIncludeArgs>> includes;

    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public Optional<Output<List<AccessGroupIncludeArgs>>> includes() {
        return Optional.ofNullable(this.includes);
    }

    /**
     * Whether this is the default group
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return Whether this is the default group
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The name of the Access group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Access group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    @Import(name="requires")
    private @Nullable Output<List<AccessGroupRequireArgs>> requires;

    /**
     * @return Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
     * 
     */
    public Optional<Output<List<AccessGroupRequireArgs>>> requires() {
        return Optional.ofNullable(this.requires);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private AccessGroupState() {}

    private AccessGroupState(AccessGroupState $) {
        this.accountId = $.accountId;
        this.excludes = $.excludes;
        this.includes = $.includes;
        this.isDefault = $.isDefault;
        this.name = $.name;
        this.requires = $.requires;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessGroupState $;

        public Builder() {
            $ = new AccessGroupState();
        }

        public Builder(AccessGroupState defaults) {
            $ = new AccessGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<AccessGroupExcludeArgs>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<AccessGroupExcludeArgs> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes Rules evaluated with a NOT logical operator. To match a policy, a user cannot meet any of the Exclude rules.
         * 
         * @return builder
         * 
         */
        public Builder excludes(AccessGroupExcludeArgs... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(@Nullable Output<List<AccessGroupIncludeArgs>> includes) {
            $.includes = includes;
            return this;
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(List<AccessGroupIncludeArgs> includes) {
            return includes(Output.of(includes));
        }

        /**
         * @param includes Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
         * 
         * @return builder
         * 
         */
        public Builder includes(AccessGroupIncludeArgs... includes) {
            return includes(List.of(includes));
        }

        /**
         * @param isDefault Whether this is the default group
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault Whether this is the default group
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param name The name of the Access group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Access group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(@Nullable Output<List<AccessGroupRequireArgs>> requires) {
            $.requires = requires;
            return this;
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(List<AccessGroupRequireArgs> requires) {
            return requires(Output.of(requires));
        }

        /**
         * @param requires Rules evaluated with an AND logical operator. To match a policy, a user must meet all of the Require rules.
         * 
         * @return builder
         * 
         */
        public Builder requires(AccessGroupRequireArgs... requires) {
            return requires(List.of(requires));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public AccessGroupState build() {
            return $;
        }
    }

}
