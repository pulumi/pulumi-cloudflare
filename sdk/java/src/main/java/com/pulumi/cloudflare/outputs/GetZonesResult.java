// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZonesResultAccount;
import com.pulumi.cloudflare.outputs.GetZonesResultMeta;
import com.pulumi.cloudflare.outputs.GetZonesResultOwner;
import com.pulumi.cloudflare.outputs.GetZonesResultPlan;
import com.pulumi.cloudflare.outputs.GetZonesResultTenant;
import com.pulumi.cloudflare.outputs.GetZonesResultTenantUnit;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZonesResult {
    /**
     * @return The account the zone belongs to.
     * 
     */
    private GetZonesResultAccount account;
    /**
     * @return The last time proof of ownership was detected and the zone was made
     * active.
     * 
     */
    private String activatedOn;
    /**
     * @return Allows the customer to use a custom apex.
     * *Tenants Only Configuration*.
     * 
     */
    private String cnameSuffix;
    /**
     * @return When the zone was created.
     * 
     */
    private String createdOn;
    /**
     * @return The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     * 
     */
    private Double developmentMode;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return Metadata about the zone.
     * 
     */
    private GetZonesResultMeta meta;
    /**
     * @return When the zone was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return The domain name.
     * 
     */
    private String name;
    /**
     * @return The name servers Cloudflare assigns to a zone.
     * 
     */
    private List<String> nameServers;
    /**
     * @return DNS host at the time of switching to Cloudflare.
     * 
     */
    private String originalDnshost;
    /**
     * @return Original name servers before moving to Cloudflare.
     * 
     */
    private List<String> originalNameServers;
    /**
     * @return Registrar for the domain at the time of switching to Cloudflare.
     * 
     */
    private String originalRegistrar;
    /**
     * @return The owner of the zone.
     * 
     */
    private GetZonesResultOwner owner;
    /**
     * @return Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     * 
     */
    private Boolean paused;
    /**
     * @return Legacy permissions based on legacy user membership information.
     * 
     * @deprecated
     * This has been replaced by Account memberships.
     * 
     */
    @Deprecated /* This has been replaced by Account memberships. */
    private List<String> permissions;
    /**
     * @return A Zones subscription information.
     * 
     * @deprecated
     * Please use the `/zones/{zone_id}/subscription` API
     * to update a zone&#39;s plan. Changing this value will create/cancel
     * associated subscriptions. To view available plans for this zone,
     * see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/).
     * 
     */
    @Deprecated /* Please use the `/zones/{zone_id}/subscription` API
to update a zone's plan. Changing this value will create/cancel
associated subscriptions. To view available plans for this zone,
see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/). */
    private GetZonesResultPlan plan;
    /**
     * @return The zone status on Cloudflare.
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    private String status;
    /**
     * @return The root organizational unit that this zone belongs to (such as a tenant or organization).
     * 
     */
    private GetZonesResultTenant tenant;
    /**
     * @return The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
     * 
     */
    private GetZonesResultTenantUnit tenantUnit;
    /**
     * @return A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;, &#34;internal&#34;.
     * 
     */
    private String type;
    /**
     * @return An array of domains used for custom name servers. This is only available for Business and Enterprise plans.
     * 
     */
    private List<String> vanityNameServers;
    /**
     * @return Verification key for partial zone setup.
     * 
     */
    private String verificationKey;

    private GetZonesResult() {}
    /**
     * @return The account the zone belongs to.
     * 
     */
    public GetZonesResultAccount account() {
        return this.account;
    }
    /**
     * @return The last time proof of ownership was detected and the zone was made
     * active.
     * 
     */
    public String activatedOn() {
        return this.activatedOn;
    }
    /**
     * @return Allows the customer to use a custom apex.
     * *Tenants Only Configuration*.
     * 
     */
    public String cnameSuffix() {
        return this.cnameSuffix;
    }
    /**
     * @return When the zone was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return The interval (in seconds) from when development mode expires
     * (positive integer) or last expired (negative integer) for the
     * domain. If development mode has never been enabled, this value is 0.
     * 
     */
    public Double developmentMode() {
        return this.developmentMode;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Metadata about the zone.
     * 
     */
    public GetZonesResultMeta meta() {
        return this.meta;
    }
    /**
     * @return When the zone was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return The domain name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name servers Cloudflare assigns to a zone.
     * 
     */
    public List<String> nameServers() {
        return this.nameServers;
    }
    /**
     * @return DNS host at the time of switching to Cloudflare.
     * 
     */
    public String originalDnshost() {
        return this.originalDnshost;
    }
    /**
     * @return Original name servers before moving to Cloudflare.
     * 
     */
    public List<String> originalNameServers() {
        return this.originalNameServers;
    }
    /**
     * @return Registrar for the domain at the time of switching to Cloudflare.
     * 
     */
    public String originalRegistrar() {
        return this.originalRegistrar;
    }
    /**
     * @return The owner of the zone.
     * 
     */
    public GetZonesResultOwner owner() {
        return this.owner;
    }
    /**
     * @return Indicates whether the zone is only using Cloudflare DNS services. A
     * true value means the zone will not receive security or performance
     * benefits.
     * 
     */
    public Boolean paused() {
        return this.paused;
    }
    /**
     * @return Legacy permissions based on legacy user membership information.
     * 
     * @deprecated
     * This has been replaced by Account memberships.
     * 
     */
    @Deprecated /* This has been replaced by Account memberships. */
    public List<String> permissions() {
        return this.permissions;
    }
    /**
     * @return A Zones subscription information.
     * 
     * @deprecated
     * Please use the `/zones/{zone_id}/subscription` API
     * to update a zone&#39;s plan. Changing this value will create/cancel
     * associated subscriptions. To view available plans for this zone,
     * see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/).
     * 
     */
    @Deprecated /* Please use the `/zones/{zone_id}/subscription` API
to update a zone's plan. Changing this value will create/cancel
associated subscriptions. To view available plans for this zone,
see [Zone Plans](https://developers.cloudflare.com/api/resources/zones/subresources/plans/). */
    public GetZonesResultPlan plan() {
        return this.plan;
    }
    /**
     * @return The zone status on Cloudflare.
     * Available values: &#34;initializing&#34;, &#34;pending&#34;, &#34;active&#34;, &#34;moved&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The root organizational unit that this zone belongs to (such as a tenant or organization).
     * 
     */
    public GetZonesResultTenant tenant() {
        return this.tenant;
    }
    /**
     * @return The immediate parent organizational unit that this zone belongs to (such as under a tenant or sub-organization).
     * 
     */
    public GetZonesResultTenantUnit tenantUnit() {
        return this.tenantUnit;
    }
    /**
     * @return A full zone implies that DNS is hosted with Cloudflare. A partial zone is
     * typically a partner-hosted zone or a CNAME setup.
     * Available values: &#34;full&#34;, &#34;partial&#34;, &#34;secondary&#34;, &#34;internal&#34;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return An array of domains used for custom name servers. This is only available for Business and Enterprise plans.
     * 
     */
    public List<String> vanityNameServers() {
        return this.vanityNameServers;
    }
    /**
     * @return Verification key for partial zone setup.
     * 
     */
    public String verificationKey() {
        return this.verificationKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZonesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetZonesResultAccount account;
        private String activatedOn;
        private String cnameSuffix;
        private String createdOn;
        private Double developmentMode;
        private String id;
        private GetZonesResultMeta meta;
        private String modifiedOn;
        private String name;
        private List<String> nameServers;
        private String originalDnshost;
        private List<String> originalNameServers;
        private String originalRegistrar;
        private GetZonesResultOwner owner;
        private Boolean paused;
        private List<String> permissions;
        private GetZonesResultPlan plan;
        private String status;
        private GetZonesResultTenant tenant;
        private GetZonesResultTenantUnit tenantUnit;
        private String type;
        private List<String> vanityNameServers;
        private String verificationKey;
        public Builder() {}
        public Builder(GetZonesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.account = defaults.account;
    	      this.activatedOn = defaults.activatedOn;
    	      this.cnameSuffix = defaults.cnameSuffix;
    	      this.createdOn = defaults.createdOn;
    	      this.developmentMode = defaults.developmentMode;
    	      this.id = defaults.id;
    	      this.meta = defaults.meta;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.nameServers = defaults.nameServers;
    	      this.originalDnshost = defaults.originalDnshost;
    	      this.originalNameServers = defaults.originalNameServers;
    	      this.originalRegistrar = defaults.originalRegistrar;
    	      this.owner = defaults.owner;
    	      this.paused = defaults.paused;
    	      this.permissions = defaults.permissions;
    	      this.plan = defaults.plan;
    	      this.status = defaults.status;
    	      this.tenant = defaults.tenant;
    	      this.tenantUnit = defaults.tenantUnit;
    	      this.type = defaults.type;
    	      this.vanityNameServers = defaults.vanityNameServers;
    	      this.verificationKey = defaults.verificationKey;
        }

        @CustomType.Setter
        public Builder account(GetZonesResultAccount account) {
            if (account == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "account");
            }
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder activatedOn(String activatedOn) {
            if (activatedOn == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "activatedOn");
            }
            this.activatedOn = activatedOn;
            return this;
        }
        @CustomType.Setter
        public Builder cnameSuffix(String cnameSuffix) {
            if (cnameSuffix == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "cnameSuffix");
            }
            this.cnameSuffix = cnameSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder developmentMode(Double developmentMode) {
            if (developmentMode == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "developmentMode");
            }
            this.developmentMode = developmentMode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder meta(GetZonesResultMeta meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameServers(List<String> nameServers) {
            if (nameServers == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "nameServers");
            }
            this.nameServers = nameServers;
            return this;
        }
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }
        @CustomType.Setter
        public Builder originalDnshost(String originalDnshost) {
            if (originalDnshost == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "originalDnshost");
            }
            this.originalDnshost = originalDnshost;
            return this;
        }
        @CustomType.Setter
        public Builder originalNameServers(List<String> originalNameServers) {
            if (originalNameServers == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "originalNameServers");
            }
            this.originalNameServers = originalNameServers;
            return this;
        }
        public Builder originalNameServers(String... originalNameServers) {
            return originalNameServers(List.of(originalNameServers));
        }
        @CustomType.Setter
        public Builder originalRegistrar(String originalRegistrar) {
            if (originalRegistrar == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "originalRegistrar");
            }
            this.originalRegistrar = originalRegistrar;
            return this;
        }
        @CustomType.Setter
        public Builder owner(GetZonesResultOwner owner) {
            if (owner == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "owner");
            }
            this.owner = owner;
            return this;
        }
        @CustomType.Setter
        public Builder paused(Boolean paused) {
            if (paused == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "paused");
            }
            this.paused = paused;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<String> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder plan(GetZonesResultPlan plan) {
            if (plan == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "plan");
            }
            this.plan = plan;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tenant(GetZonesResultTenant tenant) {
            if (tenant == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "tenant");
            }
            this.tenant = tenant;
            return this;
        }
        @CustomType.Setter
        public Builder tenantUnit(GetZonesResultTenantUnit tenantUnit) {
            if (tenantUnit == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "tenantUnit");
            }
            this.tenantUnit = tenantUnit;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vanityNameServers(List<String> vanityNameServers) {
            if (vanityNameServers == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "vanityNameServers");
            }
            this.vanityNameServers = vanityNameServers;
            return this;
        }
        public Builder vanityNameServers(String... vanityNameServers) {
            return vanityNameServers(List.of(vanityNameServers));
        }
        @CustomType.Setter
        public Builder verificationKey(String verificationKey) {
            if (verificationKey == null) {
              throw new MissingRequiredPropertyException("GetZonesResult", "verificationKey");
            }
            this.verificationKey = verificationKey;
            return this;
        }
        public GetZonesResult build() {
            final var _resultValue = new GetZonesResult();
            _resultValue.account = account;
            _resultValue.activatedOn = activatedOn;
            _resultValue.cnameSuffix = cnameSuffix;
            _resultValue.createdOn = createdOn;
            _resultValue.developmentMode = developmentMode;
            _resultValue.id = id;
            _resultValue.meta = meta;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.nameServers = nameServers;
            _resultValue.originalDnshost = originalDnshost;
            _resultValue.originalNameServers = originalNameServers;
            _resultValue.originalRegistrar = originalRegistrar;
            _resultValue.owner = owner;
            _resultValue.paused = paused;
            _resultValue.permissions = permissions;
            _resultValue.plan = plan;
            _resultValue.status = status;
            _resultValue.tenant = tenant;
            _resultValue.tenantUnit = tenantUnit;
            _resultValue.type = type;
            _resultValue.vanityNameServers = vanityNameServers;
            _resultValue.verificationKey = verificationKey;
            return _resultValue;
        }
    }
}
