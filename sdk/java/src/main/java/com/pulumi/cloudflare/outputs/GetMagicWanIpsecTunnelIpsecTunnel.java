// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicWanIpsecTunnelIpsecTunnelBgp;
import com.pulumi.cloudflare.outputs.GetMagicWanIpsecTunnelIpsecTunnelBgpStatus;
import com.pulumi.cloudflare.outputs.GetMagicWanIpsecTunnelIpsecTunnelHealthCheck;
import com.pulumi.cloudflare.outputs.GetMagicWanIpsecTunnelIpsecTunnelPskMetadata;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicWanIpsecTunnelIpsecTunnel {
    /**
     * @return When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).
     * 
     */
    private Boolean allowNullCipher;
    private GetMagicWanIpsecTunnelIpsecTunnelBgp bgp;
    private GetMagicWanIpsecTunnelIpsecTunnelBgpStatus bgpStatus;
    /**
     * @return The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    private String cloudflareEndpoint;
    /**
     * @return The date and time the tunnel was created.
     * 
     */
    private String createdOn;
    /**
     * @return The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    private String customerEndpoint;
    /**
     * @return An optional description forthe IPsec tunnel.
     * 
     */
    private String description;
    private GetMagicWanIpsecTunnelIpsecTunnelHealthCheck healthCheck;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    private String interfaceAddress;
    /**
     * @return A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     * 
     */
    private String interfaceAddress6;
    /**
     * @return The date and time the tunnel was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    private String name;
    /**
     * @return The PSK metadata that includes when the PSK was generated.
     * 
     */
    private GetMagicWanIpsecTunnelIpsecTunnelPskMetadata pskMetadata;
    /**
     * @return If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    private Boolean replayProtection;

    private GetMagicWanIpsecTunnelIpsecTunnel() {}
    /**
     * @return When `true`, the tunnel can use a null-cipher (`ENCR_NULL`) in the ESP tunnel (Phase 2).
     * 
     */
    public Boolean allowNullCipher() {
        return this.allowNullCipher;
    }
    public GetMagicWanIpsecTunnelIpsecTunnelBgp bgp() {
        return this.bgp;
    }
    public GetMagicWanIpsecTunnelIpsecTunnelBgpStatus bgpStatus() {
        return this.bgpStatus;
    }
    /**
     * @return The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    public String cloudflareEndpoint() {
        return this.cloudflareEndpoint;
    }
    /**
     * @return The date and time the tunnel was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    public String customerEndpoint() {
        return this.customerEndpoint;
    }
    /**
     * @return An optional description forthe IPsec tunnel.
     * 
     */
    public String description() {
        return this.description;
    }
    public GetMagicWanIpsecTunnelIpsecTunnelHealthCheck healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    public String interfaceAddress() {
        return this.interfaceAddress;
    }
    /**
     * @return A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     * 
     */
    public String interfaceAddress6() {
        return this.interfaceAddress6;
    }
    /**
     * @return The date and time the tunnel was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The PSK metadata that includes when the PSK was generated.
     * 
     */
    public GetMagicWanIpsecTunnelIpsecTunnelPskMetadata pskMetadata() {
        return this.pskMetadata;
    }
    /**
     * @return If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    public Boolean replayProtection() {
        return this.replayProtection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicWanIpsecTunnelIpsecTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowNullCipher;
        private GetMagicWanIpsecTunnelIpsecTunnelBgp bgp;
        private GetMagicWanIpsecTunnelIpsecTunnelBgpStatus bgpStatus;
        private String cloudflareEndpoint;
        private String createdOn;
        private String customerEndpoint;
        private String description;
        private GetMagicWanIpsecTunnelIpsecTunnelHealthCheck healthCheck;
        private String id;
        private String interfaceAddress;
        private String interfaceAddress6;
        private String modifiedOn;
        private String name;
        private GetMagicWanIpsecTunnelIpsecTunnelPskMetadata pskMetadata;
        private Boolean replayProtection;
        public Builder() {}
        public Builder(GetMagicWanIpsecTunnelIpsecTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowNullCipher = defaults.allowNullCipher;
    	      this.bgp = defaults.bgp;
    	      this.bgpStatus = defaults.bgpStatus;
    	      this.cloudflareEndpoint = defaults.cloudflareEndpoint;
    	      this.createdOn = defaults.createdOn;
    	      this.customerEndpoint = defaults.customerEndpoint;
    	      this.description = defaults.description;
    	      this.healthCheck = defaults.healthCheck;
    	      this.id = defaults.id;
    	      this.interfaceAddress = defaults.interfaceAddress;
    	      this.interfaceAddress6 = defaults.interfaceAddress6;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.name = defaults.name;
    	      this.pskMetadata = defaults.pskMetadata;
    	      this.replayProtection = defaults.replayProtection;
        }

        @CustomType.Setter
        public Builder allowNullCipher(Boolean allowNullCipher) {
            if (allowNullCipher == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "allowNullCipher");
            }
            this.allowNullCipher = allowNullCipher;
            return this;
        }
        @CustomType.Setter
        public Builder bgp(GetMagicWanIpsecTunnelIpsecTunnelBgp bgp) {
            if (bgp == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "bgp");
            }
            this.bgp = bgp;
            return this;
        }
        @CustomType.Setter
        public Builder bgpStatus(GetMagicWanIpsecTunnelIpsecTunnelBgpStatus bgpStatus) {
            if (bgpStatus == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "bgpStatus");
            }
            this.bgpStatus = bgpStatus;
            return this;
        }
        @CustomType.Setter
        public Builder cloudflareEndpoint(String cloudflareEndpoint) {
            if (cloudflareEndpoint == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "cloudflareEndpoint");
            }
            this.cloudflareEndpoint = cloudflareEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder customerEndpoint(String customerEndpoint) {
            if (customerEndpoint == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "customerEndpoint");
            }
            this.customerEndpoint = customerEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(GetMagicWanIpsecTunnelIpsecTunnelHealthCheck healthCheck) {
            if (healthCheck == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "healthCheck");
            }
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceAddress(String interfaceAddress) {
            if (interfaceAddress == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "interfaceAddress");
            }
            this.interfaceAddress = interfaceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceAddress6(String interfaceAddress6) {
            if (interfaceAddress6 == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "interfaceAddress6");
            }
            this.interfaceAddress6 = interfaceAddress6;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pskMetadata(GetMagicWanIpsecTunnelIpsecTunnelPskMetadata pskMetadata) {
            if (pskMetadata == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "pskMetadata");
            }
            this.pskMetadata = pskMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder replayProtection(Boolean replayProtection) {
            if (replayProtection == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnel", "replayProtection");
            }
            this.replayProtection = replayProtection;
            return this;
        }
        public GetMagicWanIpsecTunnelIpsecTunnel build() {
            final var _resultValue = new GetMagicWanIpsecTunnelIpsecTunnel();
            _resultValue.allowNullCipher = allowNullCipher;
            _resultValue.bgp = bgp;
            _resultValue.bgpStatus = bgpStatus;
            _resultValue.cloudflareEndpoint = cloudflareEndpoint;
            _resultValue.createdOn = createdOn;
            _resultValue.customerEndpoint = customerEndpoint;
            _resultValue.description = description;
            _resultValue.healthCheck = healthCheck;
            _resultValue.id = id;
            _resultValue.interfaceAddress = interfaceAddress;
            _resultValue.interfaceAddress6 = interfaceAddress6;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.name = name;
            _resultValue.pskMetadata = pskMetadata;
            _resultValue.replayProtection = replayProtection;
            return _resultValue;
        }
    }
}
