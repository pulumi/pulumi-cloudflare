// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.UserAgentBlockingRuleConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class UserAgentBlockingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAgentBlockingRuleArgs Empty = new UserAgentBlockingRuleArgs();

    /**
     * The configuration object for the current rule.
     * 
     */
    @Import(name="configuration", required=true)
    private Output<UserAgentBlockingRuleConfigurationArgs> configuration;

    /**
     * @return The configuration object for the current rule.
     * 
     */
    public Output<UserAgentBlockingRuleConfigurationArgs> configuration() {
        return this.configuration;
    }

    /**
     * An informative summary of the rule.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return An informative summary of the rule.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The action to apply to a matched request. Available values: `block`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The action to apply to a matched request. Available values: `block`, `challenge`, `js_challenge`, `managed_challenge`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * When true, indicates that the rule is currently paused.
     * 
     */
    @Import(name="paused", required=true)
    private Output<Boolean> paused;

    /**
     * @return When true, indicates that the rule is currently paused.
     * 
     */
    public Output<Boolean> paused() {
        return this.paused;
    }

    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private UserAgentBlockingRuleArgs() {}

    private UserAgentBlockingRuleArgs(UserAgentBlockingRuleArgs $) {
        this.configuration = $.configuration;
        this.description = $.description;
        this.mode = $.mode;
        this.paused = $.paused;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAgentBlockingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAgentBlockingRuleArgs $;

        public Builder() {
            $ = new UserAgentBlockingRuleArgs();
        }

        public Builder(UserAgentBlockingRuleArgs defaults) {
            $ = new UserAgentBlockingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configuration The configuration object for the current rule.
         * 
         * @return builder
         * 
         */
        public Builder configuration(Output<UserAgentBlockingRuleConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The configuration object for the current rule.
         * 
         * @return builder
         * 
         */
        public Builder configuration(UserAgentBlockingRuleConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param description An informative summary of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param mode The action to apply to a matched request. Available values: `block`, `challenge`, `js_challenge`, `managed_challenge`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The action to apply to a matched request. Available values: `block`, `challenge`, `js_challenge`, `managed_challenge`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param paused When true, indicates that the rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused When true, indicates that the rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public UserAgentBlockingRuleArgs build() {
            if ($.configuration == null) {
                throw new MissingRequiredPropertyException("UserAgentBlockingRuleArgs", "configuration");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("UserAgentBlockingRuleArgs", "description");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("UserAgentBlockingRuleArgs", "mode");
            }
            if ($.paused == null) {
                throw new MissingRequiredPropertyException("UserAgentBlockingRuleArgs", "paused");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("UserAgentBlockingRuleArgs", "zoneId");
            }
            return $;
        }
    }

}
