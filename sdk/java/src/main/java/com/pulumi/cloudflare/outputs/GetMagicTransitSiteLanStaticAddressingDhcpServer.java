// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSiteLanStaticAddressingDhcpServer {
    /**
     * @return A valid IPv4 address.
     * 
     */
    private String dhcpPoolEnd;
    /**
     * @return A valid IPv4 address.
     * 
     */
    private String dhcpPoolStart;
    /**
     * @return A valid IPv4 address.
     * 
     */
    private String dnsServer;
    private List<String> dnsServers;
    /**
     * @return Mapping of MAC addresses to IP addresses
     * 
     */
    private Map<String,String> reservations;

    private GetMagicTransitSiteLanStaticAddressingDhcpServer() {}
    /**
     * @return A valid IPv4 address.
     * 
     */
    public String dhcpPoolEnd() {
        return this.dhcpPoolEnd;
    }
    /**
     * @return A valid IPv4 address.
     * 
     */
    public String dhcpPoolStart() {
        return this.dhcpPoolStart;
    }
    /**
     * @return A valid IPv4 address.
     * 
     */
    public String dnsServer() {
        return this.dnsServer;
    }
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Mapping of MAC addresses to IP addresses
     * 
     */
    public Map<String,String> reservations() {
        return this.reservations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteLanStaticAddressingDhcpServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dhcpPoolEnd;
        private String dhcpPoolStart;
        private String dnsServer;
        private List<String> dnsServers;
        private Map<String,String> reservations;
        public Builder() {}
        public Builder(GetMagicTransitSiteLanStaticAddressingDhcpServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dhcpPoolEnd = defaults.dhcpPoolEnd;
    	      this.dhcpPoolStart = defaults.dhcpPoolStart;
    	      this.dnsServer = defaults.dnsServer;
    	      this.dnsServers = defaults.dnsServers;
    	      this.reservations = defaults.reservations;
        }

        @CustomType.Setter
        public Builder dhcpPoolEnd(String dhcpPoolEnd) {
            if (dhcpPoolEnd == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanStaticAddressingDhcpServer", "dhcpPoolEnd");
            }
            this.dhcpPoolEnd = dhcpPoolEnd;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpPoolStart(String dhcpPoolStart) {
            if (dhcpPoolStart == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanStaticAddressingDhcpServer", "dhcpPoolStart");
            }
            this.dhcpPoolStart = dhcpPoolStart;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServer(String dnsServer) {
            if (dnsServer == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanStaticAddressingDhcpServer", "dnsServer");
            }
            this.dnsServer = dnsServer;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanStaticAddressingDhcpServer", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder reservations(Map<String,String> reservations) {
            if (reservations == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLanStaticAddressingDhcpServer", "reservations");
            }
            this.reservations = reservations;
            return this;
        }
        public GetMagicTransitSiteLanStaticAddressingDhcpServer build() {
            final var _resultValue = new GetMagicTransitSiteLanStaticAddressingDhcpServer();
            _resultValue.dhcpPoolEnd = dhcpPoolEnd;
            _resultValue.dhcpPoolStart = dhcpPoolStart;
            _resultValue.dnsServer = dnsServer;
            _resultValue.dnsServers = dnsServers;
            _resultValue.reservations = reservations;
            return _resultValue;
        }
    }
}
