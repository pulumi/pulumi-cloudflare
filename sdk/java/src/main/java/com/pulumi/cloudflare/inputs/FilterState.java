// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilterState extends com.pulumi.resources.ResourceArgs {

    public static final FilterState Empty = new FilterState();

    /**
     * An informative summary of the filter.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative summary of the filter.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    @Import(name="expression")
    private @Nullable Output<String> expression;

    /**
     * @return The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    /**
<<<<<<< HEAD
     * The unique identifier of the filter.
     * 
     */
    @Import(name="filterId")
    private @Nullable Output<String> filterId;

    /**
     * @return The unique identifier of the filter.
     * 
     */
    public Optional<Output<String>> filterId() {
        return Optional.ofNullable(this.filterId);
    }

    /**
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
     * When true, indicates that the filter is currently paused.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return When true, indicates that the filter is currently paused.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * A short reference tag. Allows you to select related filters.
     * 
     */
    @Import(name="ref")
    private @Nullable Output<String> ref;

    /**
     * @return A short reference tag. Allows you to select related filters.
     * 
     */
    public Optional<Output<String>> ref() {
        return Optional.ofNullable(this.ref);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private FilterState() {}

    private FilterState(FilterState $) {
        this.description = $.description;
        this.expression = $.expression;
        this.filterId = $.filterId;
        this.paused = $.paused;
        this.ref = $.ref;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterState $;

        public Builder() {
            $ = new FilterState();
        }

        public Builder(FilterState defaults) {
            $ = new FilterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description An informative summary of the filter.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the filter.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expression The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
         * 
         * @return builder
         * 
         */
        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
<<<<<<< HEAD
         * @param filterId The unique identifier of the filter.
         * 
         * @return builder
         * 
         */
        public Builder filterId(@Nullable Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        /**
         * @param filterId The unique identifier of the filter.
         * 
         * @return builder
         * 
         */
        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        /**
=======
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
         * @param paused When true, indicates that the filter is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused When true, indicates that the filter is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param ref A short reference tag. Allows you to select related filters.
         * 
         * @return builder
         * 
         */
        public Builder ref(@Nullable Output<String> ref) {
            $.ref = ref;
            return this;
        }

        /**
         * @param ref A short reference tag. Allows you to select related filters.
         * 
         * @return builder
         * 
         */
        public Builder ref(String ref) {
            return ref(Output.of(ref));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FilterState build() {
            return $;
        }
    }

}
