// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedHeadersManagedRequestHeaderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedHeadersManagedRequestHeaderArgs Empty = new ManagedHeadersManagedRequestHeaderArgs();

    /**
     * The Managed Transforms that this Managed Transform conflicts with.
     * 
     */
    @Import(name="conflictsWiths")
    private @Nullable Output<List<String>> conflictsWiths;

    /**
     * @return The Managed Transforms that this Managed Transform conflicts with.
     * 
     */
    public Optional<Output<List<String>>> conflictsWiths() {
        return Optional.ofNullable(this.conflictsWiths);
    }

    /**
     * Whether the Managed Transform is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether the Managed Transform is enabled.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
     * 
     */
    @Import(name="hasConflict")
    private @Nullable Output<Boolean> hasConflict;

    /**
     * @return Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
     * 
     */
    public Optional<Output<Boolean>> hasConflict() {
        return Optional.ofNullable(this.hasConflict);
    }

    /**
     * The human-readable identifier of the Managed Transform.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The human-readable identifier of the Managed Transform.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    private ManagedHeadersManagedRequestHeaderArgs() {}

    private ManagedHeadersManagedRequestHeaderArgs(ManagedHeadersManagedRequestHeaderArgs $) {
        this.conflictsWiths = $.conflictsWiths;
        this.enabled = $.enabled;
        this.hasConflict = $.hasConflict;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedHeadersManagedRequestHeaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedHeadersManagedRequestHeaderArgs $;

        public Builder() {
            $ = new ManagedHeadersManagedRequestHeaderArgs();
        }

        public Builder(ManagedHeadersManagedRequestHeaderArgs defaults) {
            $ = new ManagedHeadersManagedRequestHeaderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conflictsWiths The Managed Transforms that this Managed Transform conflicts with.
         * 
         * @return builder
         * 
         */
        public Builder conflictsWiths(@Nullable Output<List<String>> conflictsWiths) {
            $.conflictsWiths = conflictsWiths;
            return this;
        }

        /**
         * @param conflictsWiths The Managed Transforms that this Managed Transform conflicts with.
         * 
         * @return builder
         * 
         */
        public Builder conflictsWiths(List<String> conflictsWiths) {
            return conflictsWiths(Output.of(conflictsWiths));
        }

        /**
         * @param conflictsWiths The Managed Transforms that this Managed Transform conflicts with.
         * 
         * @return builder
         * 
         */
        public Builder conflictsWiths(String... conflictsWiths) {
            return conflictsWiths(List.of(conflictsWiths));
        }

        /**
         * @param enabled Whether the Managed Transform is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the Managed Transform is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hasConflict Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
         * 
         * @return builder
         * 
         */
        public Builder hasConflict(@Nullable Output<Boolean> hasConflict) {
            $.hasConflict = hasConflict;
            return this;
        }

        /**
         * @param hasConflict Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
         * 
         * @return builder
         * 
         */
        public Builder hasConflict(Boolean hasConflict) {
            return hasConflict(Output.of(hasConflict));
        }

        /**
         * @param id The human-readable identifier of the Managed Transform.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The human-readable identifier of the Managed Transform.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public ManagedHeadersManagedRequestHeaderArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("ManagedHeadersManagedRequestHeaderArgs", "enabled");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("ManagedHeadersManagedRequestHeaderArgs", "id");
            }
            return $;
        }
    }

}
