// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZoneLockdownsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZoneLockdownsArgs Empty = new GetZoneLockdownsArgs();

    /**
     * The timestamp of when the rule was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return The timestamp of when the rule was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="descriptionSearch")
    private @Nullable Output<String> descriptionSearch;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<Output<String>> descriptionSearch() {
        return Optional.ofNullable(this.descriptionSearch);
    }

    /**
     * A single IP address to search for in existing rules.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return A single IP address to search for in existing rules.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * A single IP address range to search for in existing rules.
     * 
     */
    @Import(name="ipRangeSearch")
    private @Nullable Output<String> ipRangeSearch;

    /**
     * @return A single IP address range to search for in existing rules.
     * 
     */
    public Optional<Output<String>> ipRangeSearch() {
        return Optional.ofNullable(this.ipRangeSearch);
    }

    /**
     * A single IP address to search for in existing rules.
     * 
     */
    @Import(name="ipSearch")
    private @Nullable Output<String> ipSearch;

    /**
     * @return A single IP address to search for in existing rules.
     * 
     */
    public Optional<Output<String>> ipSearch() {
        return Optional.ofNullable(this.ipSearch);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * The timestamp of when the rule was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    /**
     * @return The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * A single URI to search for in the list of URLs of existing rules.
     * 
     */
    @Import(name="uriSearch")
    private @Nullable Output<String> uriSearch;

    /**
     * @return A single URI to search for in the list of URLs of existing rules.
     * 
     */
    public Optional<Output<String>> uriSearch() {
        return Optional.ofNullable(this.uriSearch);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetZoneLockdownsArgs() {}

    private GetZoneLockdownsArgs(GetZoneLockdownsArgs $) {
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.descriptionSearch = $.descriptionSearch;
        this.ip = $.ip;
        this.ipRangeSearch = $.ipRangeSearch;
        this.ipSearch = $.ipSearch;
        this.maxItems = $.maxItems;
        this.modifiedOn = $.modifiedOn;
        this.priority = $.priority;
        this.uriSearch = $.uriSearch;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZoneLockdownsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZoneLockdownsArgs $;

        public Builder() {
            $ = new GetZoneLockdownsArgs();
        }

        public Builder(GetZoneLockdownsArgs defaults) {
            $ = new GetZoneLockdownsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdOn The timestamp of when the rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The timestamp of when the rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(@Nullable Output<String> descriptionSearch) {
            $.descriptionSearch = descriptionSearch;
            return this;
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(String descriptionSearch) {
            return descriptionSearch(Output.of(descriptionSearch));
        }

        /**
         * @param ip A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipRangeSearch A single IP address range to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipRangeSearch(@Nullable Output<String> ipRangeSearch) {
            $.ipRangeSearch = ipRangeSearch;
            return this;
        }

        /**
         * @param ipRangeSearch A single IP address range to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipRangeSearch(String ipRangeSearch) {
            return ipRangeSearch(Output.of(ipRangeSearch));
        }

        /**
         * @param ipSearch A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipSearch(@Nullable Output<String> ipSearch) {
            $.ipSearch = ipSearch;
            return this;
        }

        /**
         * @param ipSearch A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipSearch(String ipSearch) {
            return ipSearch(Output.of(ipSearch));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param modifiedOn The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param priority The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param uriSearch A single URI to search for in the list of URLs of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uriSearch(@Nullable Output<String> uriSearch) {
            $.uriSearch = uriSearch;
            return this;
        }

        /**
         * @param uriSearch A single URI to search for in the list of URLs of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uriSearch(String uriSearch) {
            return uriSearch(Output.of(uriSearch));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetZoneLockdownsArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetZoneLockdownsArgs", "zoneId");
            }
            return $;
        }
    }

}
