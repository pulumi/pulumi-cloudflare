// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZeroTrustNetworkHostnameRouteFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetZeroTrustNetworkHostnameRouteFilterArgs Empty = new GetZeroTrustNetworkHostnameRouteFilterArgs();

    /**
     * If set, only list hostname routes with the given comment.
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return If set, only list hostname routes with the given comment.
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    @Import(name="existedAt")
    private @Nullable Output<String> existedAt;

    /**
     * @return If provided, include only resources that were created (and not deleted) before this time. URL encoded.
     * 
     */
    public Optional<Output<String>> existedAt() {
        return Optional.ofNullable(this.existedAt);
    }

    /**
     * If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The hostname route ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The hostname route ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * If `true`, only return deleted hostname routes. If `false`, exclude deleted hostname routes.
     * 
     */
    @Import(name="isDeleted", required=true)
    private Output<Boolean> isDeleted;

    /**
     * @return If `true`, only return deleted hostname routes. If `false`, exclude deleted hostname routes.
     * 
     */
    public Output<Boolean> isDeleted() {
        return this.isDeleted;
    }

    /**
     * If set, only list hostname routes that point to a specific tunnel.
     * 
     */
    @Import(name="tunnelId")
    private @Nullable Output<String> tunnelId;

    /**
     * @return If set, only list hostname routes that point to a specific tunnel.
     * 
     */
    public Optional<Output<String>> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    private GetZeroTrustNetworkHostnameRouteFilterArgs() {}

    private GetZeroTrustNetworkHostnameRouteFilterArgs(GetZeroTrustNetworkHostnameRouteFilterArgs $) {
        this.comment = $.comment;
        this.existedAt = $.existedAt;
        this.hostname = $.hostname;
        this.id = $.id;
        this.isDeleted = $.isDeleted;
        this.tunnelId = $.tunnelId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZeroTrustNetworkHostnameRouteFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZeroTrustNetworkHostnameRouteFilterArgs $;

        public Builder() {
            $ = new GetZeroTrustNetworkHostnameRouteFilterArgs();
        }

        public Builder(GetZeroTrustNetworkHostnameRouteFilterArgs defaults) {
            $ = new GetZeroTrustNetworkHostnameRouteFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment If set, only list hostname routes with the given comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment If set, only list hostname routes with the given comment.
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(@Nullable Output<String> existedAt) {
            $.existedAt = existedAt;
            return this;
        }

        /**
         * @param existedAt If provided, include only resources that were created (and not deleted) before this time. URL encoded.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(String existedAt) {
            return existedAt(Output.of(existedAt));
        }

        /**
         * @param hostname If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname If set, only list hostname routes that contain a substring of the given value, the filter is case-insensitive.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param id The hostname route ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The hostname route ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isDeleted If `true`, only return deleted hostname routes. If `false`, exclude deleted hostname routes.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(Output<Boolean> isDeleted) {
            $.isDeleted = isDeleted;
            return this;
        }

        /**
         * @param isDeleted If `true`, only return deleted hostname routes. If `false`, exclude deleted hostname routes.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(Boolean isDeleted) {
            return isDeleted(Output.of(isDeleted));
        }

        /**
         * @param tunnelId If set, only list hostname routes that point to a specific tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(@Nullable Output<String> tunnelId) {
            $.tunnelId = tunnelId;
            return this;
        }

        /**
         * @param tunnelId If set, only list hostname routes that point to a specific tunnel.
         * 
         * @return builder
         * 
         */
        public Builder tunnelId(String tunnelId) {
            return tunnelId(Output.of(tunnelId));
        }

        public GetZeroTrustNetworkHostnameRouteFilterArgs build() {
            if ($.isDeleted == null) {
                throw new MissingRequiredPropertyException("GetZeroTrustNetworkHostnameRouteFilterArgs", "isDeleted");
            }
            return $;
        }
    }

}
