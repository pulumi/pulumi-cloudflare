// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAgentBlockingRulesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAgentBlockingRulesArgs Empty = new GetUserAgentBlockingRulesArgs();

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="descriptionSearch")
    private @Nullable Output<String> descriptionSearch;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<Output<String>> descriptionSearch() {
        return Optional.ofNullable(this.descriptionSearch);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * A string to search for in the user agent values of existing rules.
     * 
     */
    @Import(name="uaSearch")
    private @Nullable Output<String> uaSearch;

    /**
     * @return A string to search for in the user agent values of existing rules.
     * 
     */
    public Optional<Output<String>> uaSearch() {
        return Optional.ofNullable(this.uaSearch);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetUserAgentBlockingRulesArgs() {}

    private GetUserAgentBlockingRulesArgs(GetUserAgentBlockingRulesArgs $) {
        this.description = $.description;
        this.descriptionSearch = $.descriptionSearch;
        this.maxItems = $.maxItems;
        this.uaSearch = $.uaSearch;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAgentBlockingRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAgentBlockingRulesArgs $;

        public Builder() {
            $ = new GetUserAgentBlockingRulesArgs();
        }

        public Builder(GetUserAgentBlockingRulesArgs defaults) {
            $ = new GetUserAgentBlockingRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(@Nullable Output<String> descriptionSearch) {
            $.descriptionSearch = descriptionSearch;
            return this;
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(String descriptionSearch) {
            return descriptionSearch(Output.of(descriptionSearch));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param uaSearch A string to search for in the user agent values of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uaSearch(@Nullable Output<String> uaSearch) {
            $.uaSearch = uaSearch;
            return this;
        }

        /**
         * @param uaSearch A string to search for in the user agent values of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uaSearch(String uaSearch) {
            return uaSearch(Output.of(uaSearch));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetUserAgentBlockingRulesArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetUserAgentBlockingRulesArgs", "zoneId");
            }
            return $;
        }
    }

}
