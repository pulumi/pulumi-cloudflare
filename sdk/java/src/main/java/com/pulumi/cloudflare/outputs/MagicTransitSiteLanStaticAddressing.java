// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.MagicTransitSiteLanStaticAddressingDhcpRelay;
import com.pulumi.cloudflare.outputs.MagicTransitSiteLanStaticAddressingDhcpServer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class MagicTransitSiteLanStaticAddressing {
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private String address;
    private @Nullable MagicTransitSiteLanStaticAddressingDhcpRelay dhcpRelay;
    private @Nullable MagicTransitSiteLanStaticAddressingDhcpServer dhcpServer;
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private @Nullable String secondaryAddress;
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private @Nullable String virtualAddress;

    private MagicTransitSiteLanStaticAddressing() {}
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public String address() {
        return this.address;
    }
    public Optional<MagicTransitSiteLanStaticAddressingDhcpRelay> dhcpRelay() {
        return Optional.ofNullable(this.dhcpRelay);
    }
    public Optional<MagicTransitSiteLanStaticAddressingDhcpServer> dhcpServer() {
        return Optional.ofNullable(this.dhcpServer);
    }
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Optional<String> secondaryAddress() {
        return Optional.ofNullable(this.secondaryAddress);
    }
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Optional<String> virtualAddress() {
        return Optional.ofNullable(this.virtualAddress);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MagicTransitSiteLanStaticAddressing defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable MagicTransitSiteLanStaticAddressingDhcpRelay dhcpRelay;
        private @Nullable MagicTransitSiteLanStaticAddressingDhcpServer dhcpServer;
        private @Nullable String secondaryAddress;
        private @Nullable String virtualAddress;
        public Builder() {}
        public Builder(MagicTransitSiteLanStaticAddressing defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.dhcpRelay = defaults.dhcpRelay;
    	      this.dhcpServer = defaults.dhcpServer;
    	      this.secondaryAddress = defaults.secondaryAddress;
    	      this.virtualAddress = defaults.virtualAddress;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("MagicTransitSiteLanStaticAddressing", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpRelay(@Nullable MagicTransitSiteLanStaticAddressingDhcpRelay dhcpRelay) {

            this.dhcpRelay = dhcpRelay;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpServer(@Nullable MagicTransitSiteLanStaticAddressingDhcpServer dhcpServer) {

            this.dhcpServer = dhcpServer;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAddress(@Nullable String secondaryAddress) {

            this.secondaryAddress = secondaryAddress;
            return this;
        }
        @CustomType.Setter
        public Builder virtualAddress(@Nullable String virtualAddress) {

            this.virtualAddress = virtualAddress;
            return this;
        }
        public MagicTransitSiteLanStaticAddressing build() {
            final var _resultValue = new MagicTransitSiteLanStaticAddressing();
            _resultValue.address = address;
            _resultValue.dhcpRelay = dhcpRelay;
            _resultValue.dhcpServer = dhcpServer;
            _resultValue.secondaryAddress = secondaryAddress;
            _resultValue.virtualAddress = virtualAddress;
            return _resultValue;
        }
    }
}
