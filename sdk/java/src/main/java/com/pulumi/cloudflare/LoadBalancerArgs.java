// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.LoadBalancerCountryPoolArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerPopPoolArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRegionPoolArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerArgs Empty = new LoadBalancerArgs();

    /**
     * See country_pools above.
     * 
     */
    @Import(name="countryPools")
    private @Nullable Output<List<LoadBalancerCountryPoolArgs>> countryPools;

    /**
     * @return See country_pools above.
     * 
     */
    public Optional<Output<List<LoadBalancerCountryPoolArgs>>> countryPools() {
        return Optional.ofNullable(this.countryPools);
    }

    /**
     * A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
     * 
     */
    @Import(name="defaultPoolIds", required=true)
    private Output<List<String>> defaultPoolIds;

    /**
     * @return A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
     * 
     */
    public Output<List<String>> defaultPoolIds() {
        return this.defaultPoolIds;
    }

    /**
     * Free text description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Free text description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable or disable the load balancer. Defaults to `true` (enabled).
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enable or disable the load balancer. Defaults to `true` (enabled).
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    @Import(name="fallbackPoolId", required=true)
    private Output<String> fallbackPoolId;

    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public Output<String> fallbackPoolId() {
        return this.fallbackPoolId;
    }

    /**
     * Human readable name for this rule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Human readable name for this rule.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * See pop_pools above.
     * 
     */
    @Import(name="popPools")
    private @Nullable Output<List<LoadBalancerPopPoolArgs>> popPools;

    /**
     * @return See pop_pools above.
     * 
     */
    public Optional<Output<List<LoadBalancerPopPoolArgs>>> popPools() {
        return Optional.ofNullable(this.popPools);
    }

    /**
     * Whether the hostname gets Cloudflare&#39;s origin protection. Defaults to `false`.
     * 
     */
    @Import(name="proxied")
    private @Nullable Output<Boolean> proxied;

    /**
     * @return Whether the hostname gets Cloudflare&#39;s origin protection. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> proxied() {
        return Optional.ofNullable(this.proxied);
    }

    /**
     * See region_pools above.
     * 
     */
    @Import(name="regionPools")
    private @Nullable Output<List<LoadBalancerRegionPoolArgs>> regionPools;

    /**
     * @return See region_pools above.
     * 
     */
    public Optional<Output<List<LoadBalancerRegionPoolArgs>>> regionPools() {
        return Optional.ofNullable(this.regionPools);
    }

    /**
     * A list of conditions and overrides for each load balancer operation. See the field documentation below.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<LoadBalancerRuleArgs>> rules;

    /**
     * @return A list of conditions and overrides for each load balancer operation. See the field documentation below.
     * 
     */
    public Optional<Output<List<LoadBalancerRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * See field above.
     * 
     */
    @Import(name="sessionAffinity")
    private @Nullable Output<String> sessionAffinity;

    /**
     * @return See field above.
     * 
     */
    public Optional<Output<String>> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }

    /**
     * See field above.
     * 
     */
    @Import(name="sessionAffinityAttributes")
    private @Nullable Output<Map<String,String>> sessionAffinityAttributes;

    /**
     * @return See field above.
     * 
     */
    public Optional<Output<Map<String,String>>> sessionAffinityAttributes() {
        return Optional.ofNullable(this.sessionAffinityAttributes);
    }

    /**
     * See field above.
     * 
     */
    @Import(name="sessionAffinityTtl")
    private @Nullable Output<Integer> sessionAffinityTtl;

    /**
     * @return See field above.
     * 
     */
    public Optional<Output<Integer>> sessionAffinityTtl() {
        return Optional.ofNullable(this.sessionAffinityTtl);
    }

    /**
     * See field above.
     * 
     */
    @Import(name="steeringPolicy")
    private @Nullable Output<String> steeringPolicy;

    /**
     * @return See field above.
     * 
     */
    public Optional<Output<String>> steeringPolicy() {
        return Optional.ofNullable(this.steeringPolicy);
    }

    /**
     * See field above.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return See field above.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The zone ID to add the load balancer to.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone ID to add the load balancer to.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private LoadBalancerArgs() {}

    private LoadBalancerArgs(LoadBalancerArgs $) {
        this.countryPools = $.countryPools;
        this.defaultPoolIds = $.defaultPoolIds;
        this.description = $.description;
        this.enabled = $.enabled;
        this.fallbackPoolId = $.fallbackPoolId;
        this.name = $.name;
        this.popPools = $.popPools;
        this.proxied = $.proxied;
        this.regionPools = $.regionPools;
        this.rules = $.rules;
        this.sessionAffinity = $.sessionAffinity;
        this.sessionAffinityAttributes = $.sessionAffinityAttributes;
        this.sessionAffinityTtl = $.sessionAffinityTtl;
        this.steeringPolicy = $.steeringPolicy;
        this.ttl = $.ttl;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerArgs $;

        public Builder() {
            $ = new LoadBalancerArgs();
        }

        public Builder(LoadBalancerArgs defaults) {
            $ = new LoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param countryPools See country_pools above.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(@Nullable Output<List<LoadBalancerCountryPoolArgs>> countryPools) {
            $.countryPools = countryPools;
            return this;
        }

        /**
         * @param countryPools See country_pools above.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(List<LoadBalancerCountryPoolArgs> countryPools) {
            return countryPools(Output.of(countryPools));
        }

        /**
         * @param countryPools See country_pools above.
         * 
         * @return builder
         * 
         */
        public Builder countryPools(LoadBalancerCountryPoolArgs... countryPools) {
            return countryPools(List.of(countryPools));
        }

        /**
         * @param defaultPoolIds A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
         * 
         * @return builder
         * 
         */
        public Builder defaultPoolIds(Output<List<String>> defaultPoolIds) {
            $.defaultPoolIds = defaultPoolIds;
            return this;
        }

        /**
         * @param defaultPoolIds A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
         * 
         * @return builder
         * 
         */
        public Builder defaultPoolIds(List<String> defaultPoolIds) {
            return defaultPoolIds(Output.of(defaultPoolIds));
        }

        /**
         * @param defaultPoolIds A list of pool IDs ordered by their failover priority. Used whenever region/pop pools are not defined.
         * 
         * @return builder
         * 
         */
        public Builder defaultPoolIds(String... defaultPoolIds) {
            return defaultPoolIds(List.of(defaultPoolIds));
        }

        /**
         * @param description Free text description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Free text description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Enable or disable the load balancer. Defaults to `true` (enabled).
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enable or disable the load balancer. Defaults to `true` (enabled).
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fallbackPoolId The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPoolId(Output<String> fallbackPoolId) {
            $.fallbackPoolId = fallbackPoolId;
            return this;
        }

        /**
         * @param fallbackPoolId The pool ID to use when all other pools are detected as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPoolId(String fallbackPoolId) {
            return fallbackPoolId(Output.of(fallbackPoolId));
        }

        /**
         * @param name Human readable name for this rule.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human readable name for this rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param popPools See pop_pools above.
         * 
         * @return builder
         * 
         */
        public Builder popPools(@Nullable Output<List<LoadBalancerPopPoolArgs>> popPools) {
            $.popPools = popPools;
            return this;
        }

        /**
         * @param popPools See pop_pools above.
         * 
         * @return builder
         * 
         */
        public Builder popPools(List<LoadBalancerPopPoolArgs> popPools) {
            return popPools(Output.of(popPools));
        }

        /**
         * @param popPools See pop_pools above.
         * 
         * @return builder
         * 
         */
        public Builder popPools(LoadBalancerPopPoolArgs... popPools) {
            return popPools(List.of(popPools));
        }

        /**
         * @param proxied Whether the hostname gets Cloudflare&#39;s origin protection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder proxied(@Nullable Output<Boolean> proxied) {
            $.proxied = proxied;
            return this;
        }

        /**
         * @param proxied Whether the hostname gets Cloudflare&#39;s origin protection. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder proxied(Boolean proxied) {
            return proxied(Output.of(proxied));
        }

        /**
         * @param regionPools See region_pools above.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(@Nullable Output<List<LoadBalancerRegionPoolArgs>> regionPools) {
            $.regionPools = regionPools;
            return this;
        }

        /**
         * @param regionPools See region_pools above.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(List<LoadBalancerRegionPoolArgs> regionPools) {
            return regionPools(Output.of(regionPools));
        }

        /**
         * @param regionPools See region_pools above.
         * 
         * @return builder
         * 
         */
        public Builder regionPools(LoadBalancerRegionPoolArgs... regionPools) {
            return regionPools(List.of(regionPools));
        }

        /**
         * @param rules A list of conditions and overrides for each load balancer operation. See the field documentation below.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<LoadBalancerRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules A list of conditions and overrides for each load balancer operation. See the field documentation below.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<LoadBalancerRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules A list of conditions and overrides for each load balancer operation. See the field documentation below.
         * 
         * @return builder
         * 
         */
        public Builder rules(LoadBalancerRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param sessionAffinity See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(@Nullable Output<String> sessionAffinity) {
            $.sessionAffinity = sessionAffinity;
            return this;
        }

        /**
         * @param sessionAffinity See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinity(String sessionAffinity) {
            return sessionAffinity(Output.of(sessionAffinity));
        }

        /**
         * @param sessionAffinityAttributes See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(@Nullable Output<Map<String,String>> sessionAffinityAttributes) {
            $.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }

        /**
         * @param sessionAffinityAttributes See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityAttributes(Map<String,String> sessionAffinityAttributes) {
            return sessionAffinityAttributes(Output.of(sessionAffinityAttributes));
        }

        /**
         * @param sessionAffinityTtl See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(@Nullable Output<Integer> sessionAffinityTtl) {
            $.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }

        /**
         * @param sessionAffinityTtl See field above.
         * 
         * @return builder
         * 
         */
        public Builder sessionAffinityTtl(Integer sessionAffinityTtl) {
            return sessionAffinityTtl(Output.of(sessionAffinityTtl));
        }

        /**
         * @param steeringPolicy See field above.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(@Nullable Output<String> steeringPolicy) {
            $.steeringPolicy = steeringPolicy;
            return this;
        }

        /**
         * @param steeringPolicy See field above.
         * 
         * @return builder
         * 
         */
        public Builder steeringPolicy(String steeringPolicy) {
            return steeringPolicy(Output.of(steeringPolicy));
        }

        /**
         * @param ttl See field above.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl See field above.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param zoneId The zone ID to add the load balancer to.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone ID to add the load balancer to.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public LoadBalancerArgs build() {
            $.defaultPoolIds = Objects.requireNonNull($.defaultPoolIds, "expected parameter 'defaultPoolIds' to be non-null");
            $.fallbackPoolId = Objects.requireNonNull($.fallbackPoolId, "expected parameter 'fallbackPoolId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.zoneId = Objects.requireNonNull($.zoneId, "expected parameter 'zoneId' to be non-null");
            return $;
        }
    }

}
