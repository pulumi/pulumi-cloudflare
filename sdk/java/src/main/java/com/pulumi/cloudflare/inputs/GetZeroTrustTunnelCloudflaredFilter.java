// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZeroTrustTunnelCloudflaredFilter extends com.pulumi.resources.InvokeArgs {

    public static final GetZeroTrustTunnelCloudflaredFilter Empty = new GetZeroTrustTunnelCloudflaredFilter();

    @Import(name="excludePrefix")
    private @Nullable String excludePrefix;

    public Optional<String> excludePrefix() {
        return Optional.ofNullable(this.excludePrefix);
    }

    /**
     * If provided, include only tunnels that were created (and not deleted) before this time.
     * 
     */
    @Import(name="existedAt")
    private @Nullable String existedAt;

    /**
     * @return If provided, include only tunnels that were created (and not deleted) before this time.
     * 
     */
    public Optional<String> existedAt() {
        return Optional.ofNullable(this.existedAt);
    }

    @Import(name="includePrefix")
    private @Nullable String includePrefix;

    public Optional<String> includePrefix() {
        return Optional.ofNullable(this.includePrefix);
    }

    /**
     * If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
     * 
     */
    @Import(name="isDeleted")
    private @Nullable Boolean isDeleted;

    /**
     * @return If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
     * 
     */
    public Optional<Boolean> isDeleted() {
        return Optional.ofNullable(this.isDeleted);
    }

    /**
     * A user-friendly name for a tunnel.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return A user-friendly name for a tunnel.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * UUID of the tunnel.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return UUID of the tunnel.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="wasActiveAt")
    private @Nullable String wasActiveAt;

    public Optional<String> wasActiveAt() {
        return Optional.ofNullable(this.wasActiveAt);
    }

    @Import(name="wasInactiveAt")
    private @Nullable String wasInactiveAt;

    public Optional<String> wasInactiveAt() {
        return Optional.ofNullable(this.wasInactiveAt);
    }

    private GetZeroTrustTunnelCloudflaredFilter() {}

    private GetZeroTrustTunnelCloudflaredFilter(GetZeroTrustTunnelCloudflaredFilter $) {
        this.excludePrefix = $.excludePrefix;
        this.existedAt = $.existedAt;
        this.includePrefix = $.includePrefix;
        this.isDeleted = $.isDeleted;
        this.name = $.name;
        this.status = $.status;
        this.uuid = $.uuid;
        this.wasActiveAt = $.wasActiveAt;
        this.wasInactiveAt = $.wasInactiveAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZeroTrustTunnelCloudflaredFilter defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZeroTrustTunnelCloudflaredFilter $;

        public Builder() {
            $ = new GetZeroTrustTunnelCloudflaredFilter();
        }

        public Builder(GetZeroTrustTunnelCloudflaredFilter defaults) {
            $ = new GetZeroTrustTunnelCloudflaredFilter(Objects.requireNonNull(defaults));
        }

        public Builder excludePrefix(@Nullable String excludePrefix) {
            $.excludePrefix = excludePrefix;
            return this;
        }

        /**
         * @param existedAt If provided, include only tunnels that were created (and not deleted) before this time.
         * 
         * @return builder
         * 
         */
        public Builder existedAt(@Nullable String existedAt) {
            $.existedAt = existedAt;
            return this;
        }

        public Builder includePrefix(@Nullable String includePrefix) {
            $.includePrefix = includePrefix;
            return this;
        }

        /**
         * @param isDeleted If `true`, only include deleted tunnels. If `false`, exclude deleted tunnels. If empty, all tunnels will be included.
         * 
         * @return builder
         * 
         */
        public Builder isDeleted(@Nullable Boolean isDeleted) {
            $.isDeleted = isDeleted;
            return this;
        }

        /**
         * @param name A user-friendly name for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param status The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param uuid UUID of the tunnel.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder wasActiveAt(@Nullable String wasActiveAt) {
            $.wasActiveAt = wasActiveAt;
            return this;
        }

        public Builder wasInactiveAt(@Nullable String wasInactiveAt) {
            $.wasInactiveAt = wasInactiveAt;
            return this;
        }

        public GetZeroTrustTunnelCloudflaredFilter build() {
            return $;
        }
    }

}
