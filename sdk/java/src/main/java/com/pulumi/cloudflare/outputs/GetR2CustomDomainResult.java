// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetR2CustomDomainStatus;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetR2CustomDomainResult {
    /**
     * @return Account ID.
     * 
     */
    private String accountId;
    /**
     * @return Name of the bucket.
     * 
     */
    private String bucketName;
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    private List<String> ciphers;
    /**
     * @return Name of the custom domain.
     * 
     */
    private String domain;
    /**
     * @return Whether this bucket is publicly accessible at the specified custom domain.
     * 
     */
    private Boolean enabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: &#34;1.0&#34;, &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    private String minTls;
    private GetR2CustomDomainStatus status;
    /**
     * @return Zone ID of the custom domain resides in.
     * 
     */
    private String zoneId;
    /**
     * @return Zone that the custom domain resides in.
     * 
     */
    private String zoneName;

    private GetR2CustomDomainResult() {}
    /**
     * @return Account ID.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Name of the bucket.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    public List<String> ciphers() {
        return this.ciphers;
    }
    /**
     * @return Name of the custom domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Whether this bucket is publicly accessible at the specified custom domain.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Minimum TLS Version the custom domain will accept for incoming connections. If not set, defaults to 1.0.
     * Available values: &#34;1.0&#34;, &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    public String minTls() {
        return this.minTls;
    }
    public GetR2CustomDomainStatus status() {
        return this.status;
    }
    /**
     * @return Zone ID of the custom domain resides in.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }
    /**
     * @return Zone that the custom domain resides in.
     * 
     */
    public String zoneName() {
        return this.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetR2CustomDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String bucketName;
        private List<String> ciphers;
        private String domain;
        private Boolean enabled;
        private String id;
        private String minTls;
        private GetR2CustomDomainStatus status;
        private String zoneId;
        private String zoneName;
        public Builder() {}
        public Builder(GetR2CustomDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.bucketName = defaults.bucketName;
    	      this.ciphers = defaults.ciphers;
    	      this.domain = defaults.domain;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.minTls = defaults.minTls;
    	      this.status = defaults.status;
    	      this.zoneId = defaults.zoneId;
    	      this.zoneName = defaults.zoneName;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder ciphers(List<String> ciphers) {
            if (ciphers == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "ciphers");
            }
            this.ciphers = ciphers;
            return this;
        }
        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder minTls(String minTls) {
            if (minTls == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "minTls");
            }
            this.minTls = minTls;
            return this;
        }
        @CustomType.Setter
        public Builder status(GetR2CustomDomainStatus status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneName(String zoneName) {
            if (zoneName == null) {
              throw new MissingRequiredPropertyException("GetR2CustomDomainResult", "zoneName");
            }
            this.zoneName = zoneName;
            return this;
        }
        public GetR2CustomDomainResult build() {
            final var _resultValue = new GetR2CustomDomainResult();
            _resultValue.accountId = accountId;
            _resultValue.bucketName = bucketName;
            _resultValue.ciphers = ciphers;
            _resultValue.domain = domain;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.minTls = minTls;
            _resultValue.status = status;
            _resultValue.zoneId = zoneId;
            _resultValue.zoneName = zoneName;
            return _resultValue;
        }
    }
}
