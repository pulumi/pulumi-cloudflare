// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicTransitSiteLanNatArgs;
import com.pulumi.cloudflare.inputs.MagicTransitSiteLanRoutedSubnetArgs;
import com.pulumi.cloudflare.inputs.MagicTransitSiteLanStaticAddressingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteLanArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteLanArgs Empty = new MagicTransitSiteLanArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    @Import(name="haLink")
    private @Nullable Output<Boolean> haLink;

    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    public Optional<Output<Boolean>> haLink() {
        return Optional.ofNullable(this.haLink);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="nat")
    private @Nullable Output<MagicTransitSiteLanNatArgs> nat;

    public Optional<Output<MagicTransitSiteLanNatArgs>> nat() {
        return Optional.ofNullable(this.nat);
    }

    @Import(name="physport", required=true)
    private Output<Integer> physport;

    public Output<Integer> physport() {
        return this.physport;
    }

    @Import(name="routedSubnets")
    private @Nullable Output<List<MagicTransitSiteLanRoutedSubnetArgs>> routedSubnets;

    public Optional<Output<List<MagicTransitSiteLanRoutedSubnetArgs>>> routedSubnets() {
        return Optional.ofNullable(this.routedSubnets);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="siteId", required=true)
    private Output<String> siteId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    @Import(name="staticAddressing")
    private @Nullable Output<MagicTransitSiteLanStaticAddressingArgs> staticAddressing;

    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    public Optional<Output<MagicTransitSiteLanStaticAddressingArgs>> staticAddressing() {
        return Optional.ofNullable(this.staticAddressing);
    }

    /**
     * VLAN ID. Use zero for untagged.
     * 
     */
    @Import(name="vlanTag")
    private @Nullable Output<Integer> vlanTag;

    /**
     * @return VLAN ID. Use zero for untagged.
     * 
     */
    public Optional<Output<Integer>> vlanTag() {
        return Optional.ofNullable(this.vlanTag);
    }

    private MagicTransitSiteLanArgs() {}

    private MagicTransitSiteLanArgs(MagicTransitSiteLanArgs $) {
        this.accountId = $.accountId;
        this.haLink = $.haLink;
        this.name = $.name;
        this.nat = $.nat;
        this.physport = $.physport;
        this.routedSubnets = $.routedSubnets;
        this.siteId = $.siteId;
        this.staticAddressing = $.staticAddressing;
        this.vlanTag = $.vlanTag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteLanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteLanArgs $;

        public Builder() {
            $ = new MagicTransitSiteLanArgs();
        }

        public Builder(MagicTransitSiteLanArgs defaults) {
            $ = new MagicTransitSiteLanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param haLink mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
         * 
         * @return builder
         * 
         */
        public Builder haLink(@Nullable Output<Boolean> haLink) {
            $.haLink = haLink;
            return this;
        }

        /**
         * @param haLink mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
         * 
         * @return builder
         * 
         */
        public Builder haLink(Boolean haLink) {
            return haLink(Output.of(haLink));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nat(@Nullable Output<MagicTransitSiteLanNatArgs> nat) {
            $.nat = nat;
            return this;
        }

        public Builder nat(MagicTransitSiteLanNatArgs nat) {
            return nat(Output.of(nat));
        }

        public Builder physport(Output<Integer> physport) {
            $.physport = physport;
            return this;
        }

        public Builder physport(Integer physport) {
            return physport(Output.of(physport));
        }

        public Builder routedSubnets(@Nullable Output<List<MagicTransitSiteLanRoutedSubnetArgs>> routedSubnets) {
            $.routedSubnets = routedSubnets;
            return this;
        }

        public Builder routedSubnets(List<MagicTransitSiteLanRoutedSubnetArgs> routedSubnets) {
            return routedSubnets(Output.of(routedSubnets));
        }

        public Builder routedSubnets(MagicTransitSiteLanRoutedSubnetArgs... routedSubnets) {
            return routedSubnets(List.of(routedSubnets));
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param staticAddressing If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
         * 
         * @return builder
         * 
         */
        public Builder staticAddressing(@Nullable Output<MagicTransitSiteLanStaticAddressingArgs> staticAddressing) {
            $.staticAddressing = staticAddressing;
            return this;
        }

        /**
         * @param staticAddressing If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
         * 
         * @return builder
         * 
         */
        public Builder staticAddressing(MagicTransitSiteLanStaticAddressingArgs staticAddressing) {
            return staticAddressing(Output.of(staticAddressing));
        }

        /**
         * @param vlanTag VLAN ID. Use zero for untagged.
         * 
         * @return builder
         * 
         */
        public Builder vlanTag(@Nullable Output<Integer> vlanTag) {
            $.vlanTag = vlanTag;
            return this;
        }

        /**
         * @param vlanTag VLAN ID. Use zero for untagged.
         * 
         * @return builder
         * 
         */
        public Builder vlanTag(Integer vlanTag) {
            return vlanTag(Output.of(vlanTag));
        }

        public MagicTransitSiteLanArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteLanArgs", "accountId");
            }
            if ($.physport == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteLanArgs", "physport");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteLanArgs", "siteId");
            }
            return $;
        }
    }

}
