// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetR2BucketLifecycleRuleAbortMultipartUploadsTransition;
import com.pulumi.cloudflare.outputs.GetR2BucketLifecycleRuleConditions;
import com.pulumi.cloudflare.outputs.GetR2BucketLifecycleRuleDeleteObjectsTransition;
import com.pulumi.cloudflare.outputs.GetR2BucketLifecycleRuleStorageClassTransition;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetR2BucketLifecycleRule {
    /**
     * @return Transition to abort ongoing multipart uploads
     * 
     */
    private GetR2BucketLifecycleRuleAbortMultipartUploadsTransition abortMultipartUploadsTransition;
    /**
     * @return Conditions that apply to all transitions of this rule
     * 
     */
    private GetR2BucketLifecycleRuleConditions conditions;
    /**
     * @return Transition to delete objects
     * 
     */
    private GetR2BucketLifecycleRuleDeleteObjectsTransition deleteObjectsTransition;
    /**
     * @return Whether or not this rule is in effect
     * 
     */
    private Boolean enabled;
    /**
     * @return Unique identifier for this rule
     * 
     */
    private String id;
    /**
     * @return Transitions to change the storage class of objects
     * 
     */
    private List<GetR2BucketLifecycleRuleStorageClassTransition> storageClassTransitions;

    private GetR2BucketLifecycleRule() {}
    /**
     * @return Transition to abort ongoing multipart uploads
     * 
     */
    public GetR2BucketLifecycleRuleAbortMultipartUploadsTransition abortMultipartUploadsTransition() {
        return this.abortMultipartUploadsTransition;
    }
    /**
     * @return Conditions that apply to all transitions of this rule
     * 
     */
    public GetR2BucketLifecycleRuleConditions conditions() {
        return this.conditions;
    }
    /**
     * @return Transition to delete objects
     * 
     */
    public GetR2BucketLifecycleRuleDeleteObjectsTransition deleteObjectsTransition() {
        return this.deleteObjectsTransition;
    }
    /**
     * @return Whether or not this rule is in effect
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Unique identifier for this rule
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Transitions to change the storage class of objects
     * 
     */
    public List<GetR2BucketLifecycleRuleStorageClassTransition> storageClassTransitions() {
        return this.storageClassTransitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetR2BucketLifecycleRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetR2BucketLifecycleRuleAbortMultipartUploadsTransition abortMultipartUploadsTransition;
        private GetR2BucketLifecycleRuleConditions conditions;
        private GetR2BucketLifecycleRuleDeleteObjectsTransition deleteObjectsTransition;
        private Boolean enabled;
        private String id;
        private List<GetR2BucketLifecycleRuleStorageClassTransition> storageClassTransitions;
        public Builder() {}
        public Builder(GetR2BucketLifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortMultipartUploadsTransition = defaults.abortMultipartUploadsTransition;
    	      this.conditions = defaults.conditions;
    	      this.deleteObjectsTransition = defaults.deleteObjectsTransition;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.storageClassTransitions = defaults.storageClassTransitions;
        }

        @CustomType.Setter
        public Builder abortMultipartUploadsTransition(GetR2BucketLifecycleRuleAbortMultipartUploadsTransition abortMultipartUploadsTransition) {
            if (abortMultipartUploadsTransition == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "abortMultipartUploadsTransition");
            }
            this.abortMultipartUploadsTransition = abortMultipartUploadsTransition;
            return this;
        }
        @CustomType.Setter
        public Builder conditions(GetR2BucketLifecycleRuleConditions conditions) {
            if (conditions == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "conditions");
            }
            this.conditions = conditions;
            return this;
        }
        @CustomType.Setter
        public Builder deleteObjectsTransition(GetR2BucketLifecycleRuleDeleteObjectsTransition deleteObjectsTransition) {
            if (deleteObjectsTransition == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "deleteObjectsTransition");
            }
            this.deleteObjectsTransition = deleteObjectsTransition;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder storageClassTransitions(List<GetR2BucketLifecycleRuleStorageClassTransition> storageClassTransitions) {
            if (storageClassTransitions == null) {
              throw new MissingRequiredPropertyException("GetR2BucketLifecycleRule", "storageClassTransitions");
            }
            this.storageClassTransitions = storageClassTransitions;
            return this;
        }
        public Builder storageClassTransitions(GetR2BucketLifecycleRuleStorageClassTransition... storageClassTransitions) {
            return storageClassTransitions(List.of(storageClassTransitions));
        }
        public GetR2BucketLifecycleRule build() {
            final var _resultValue = new GetR2BucketLifecycleRule();
            _resultValue.abortMultipartUploadsTransition = abortMultipartUploadsTransition;
            _resultValue.conditions = conditions;
            _resultValue.deleteObjectsTransition = deleteObjectsTransition;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.storageClassTransitions = storageClassTransitions;
            return _resultValue;
        }
    }
}
