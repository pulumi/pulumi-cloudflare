// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.ZeroTrustTunnelCloudflaredConfigConfigIngressRule;
import com.pulumi.cloudflare.outputs.ZeroTrustTunnelCloudflaredConfigConfigOriginRequest;
import com.pulumi.cloudflare.outputs.ZeroTrustTunnelCloudflaredConfigConfigWarpRouting;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZeroTrustTunnelCloudflaredConfigConfig {
    /**
     * @return Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. Last rule must match all requests, e.g `service = &#34;http_status:503&#34;`. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
     * 
     */
    private List<ZeroTrustTunnelCloudflaredConfigConfigIngressRule> ingressRules;
    private @Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequest originRequest;
    /**
     * @return If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
     * 
     */
    private @Nullable ZeroTrustTunnelCloudflaredConfigConfigWarpRouting warpRouting;

    private ZeroTrustTunnelCloudflaredConfigConfig() {}
    /**
     * @return Each incoming request received by cloudflared causes cloudflared to send a request to a local service. This section configures the rules that determine which requests are sent to which local services. Last rule must match all requests, e.g `service = &#34;http_status:503&#34;`. [Read more](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/local/local-management/ingress/).
     * 
     */
    public List<ZeroTrustTunnelCloudflaredConfigConfigIngressRule> ingressRules() {
        return this.ingressRules;
    }
    public Optional<ZeroTrustTunnelCloudflaredConfigConfigOriginRequest> originRequest() {
        return Optional.ofNullable(this.originRequest);
    }
    /**
     * @return If you&#39;re exposing a [private network](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/private-net/), you need to add the `warp-routing` key and set it to `true`.
     * 
     */
    public Optional<ZeroTrustTunnelCloudflaredConfigConfigWarpRouting> warpRouting() {
        return Optional.ofNullable(this.warpRouting);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZeroTrustTunnelCloudflaredConfigConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<ZeroTrustTunnelCloudflaredConfigConfigIngressRule> ingressRules;
        private @Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequest originRequest;
        private @Nullable ZeroTrustTunnelCloudflaredConfigConfigWarpRouting warpRouting;
        public Builder() {}
        public Builder(ZeroTrustTunnelCloudflaredConfigConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ingressRules = defaults.ingressRules;
    	      this.originRequest = defaults.originRequest;
    	      this.warpRouting = defaults.warpRouting;
        }

        @CustomType.Setter
        public Builder ingressRules(List<ZeroTrustTunnelCloudflaredConfigConfigIngressRule> ingressRules) {
            if (ingressRules == null) {
              throw new MissingRequiredPropertyException("ZeroTrustTunnelCloudflaredConfigConfig", "ingressRules");
            }
            this.ingressRules = ingressRules;
            return this;
        }
        public Builder ingressRules(ZeroTrustTunnelCloudflaredConfigConfigIngressRule... ingressRules) {
            return ingressRules(List.of(ingressRules));
        }
        @CustomType.Setter
        public Builder originRequest(@Nullable ZeroTrustTunnelCloudflaredConfigConfigOriginRequest originRequest) {

            this.originRequest = originRequest;
            return this;
        }
        @CustomType.Setter
        public Builder warpRouting(@Nullable ZeroTrustTunnelCloudflaredConfigConfigWarpRouting warpRouting) {

            this.warpRouting = warpRouting;
            return this;
        }
        public ZeroTrustTunnelCloudflaredConfigConfig build() {
            final var _resultValue = new ZeroTrustTunnelCloudflaredConfigConfig();
            _resultValue.ingressRules = ingressRules;
            _resultValue.originRequest = originRequest;
            _resultValue.warpRouting = warpRouting;
            return _resultValue;
        }
    }
}
