// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.DlpProfileContextAwarenessArgs;
import com.pulumi.cloudflare.inputs.DlpProfileEntryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DlpProfileState extends com.pulumi.resources.ResourceArgs {

    public static final DlpProfileState Empty = new DlpProfileState();

    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Related DLP policies will trigger when the match count exceeds the number set.
     * 
     */
    @Import(name="allowedMatchCount")
    private @Nullable Output<Integer> allowedMatchCount;

    /**
     * @return Related DLP policies will trigger when the match count exceeds the number set.
     * 
     */
    public Optional<Output<Integer>> allowedMatchCount() {
        return Optional.ofNullable(this.allowedMatchCount);
    }

    /**
     * Scan the context of predefined entries to only return matches surrounded by keywords.
     * 
     */
    @Import(name="contextAwareness")
    private @Nullable Output<DlpProfileContextAwarenessArgs> contextAwareness;

    /**
     * @return Scan the context of predefined entries to only return matches surrounded by keywords.
     * 
     */
    public Optional<Output<DlpProfileContextAwarenessArgs>> contextAwareness() {
        return Optional.ofNullable(this.contextAwareness);
    }

    /**
     * Brief summary of the profile and its intended use.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Brief summary of the profile and its intended use.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of entries to apply to the profile.
     * 
     */
    @Import(name="entries")
    private @Nullable Output<List<DlpProfileEntryArgs>> entries;

    /**
     * @return List of entries to apply to the profile.
     * 
     */
    public Optional<Output<List<DlpProfileEntryArgs>>> entries() {
        return Optional.ofNullable(this.entries);
    }

    /**
     * Name of the profile. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the profile. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DlpProfileState() {}

    private DlpProfileState(DlpProfileState $) {
        this.accountId = $.accountId;
        this.allowedMatchCount = $.allowedMatchCount;
        this.contextAwareness = $.contextAwareness;
        this.description = $.description;
        this.entries = $.entries;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DlpProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DlpProfileState $;

        public Builder() {
            $ = new DlpProfileState();
        }

        public Builder(DlpProfileState defaults) {
            $ = new DlpProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedMatchCount Related DLP policies will trigger when the match count exceeds the number set.
         * 
         * @return builder
         * 
         */
        public Builder allowedMatchCount(@Nullable Output<Integer> allowedMatchCount) {
            $.allowedMatchCount = allowedMatchCount;
            return this;
        }

        /**
         * @param allowedMatchCount Related DLP policies will trigger when the match count exceeds the number set.
         * 
         * @return builder
         * 
         */
        public Builder allowedMatchCount(Integer allowedMatchCount) {
            return allowedMatchCount(Output.of(allowedMatchCount));
        }

        /**
         * @param contextAwareness Scan the context of predefined entries to only return matches surrounded by keywords.
         * 
         * @return builder
         * 
         */
        public Builder contextAwareness(@Nullable Output<DlpProfileContextAwarenessArgs> contextAwareness) {
            $.contextAwareness = contextAwareness;
            return this;
        }

        /**
         * @param contextAwareness Scan the context of predefined entries to only return matches surrounded by keywords.
         * 
         * @return builder
         * 
         */
        public Builder contextAwareness(DlpProfileContextAwarenessArgs contextAwareness) {
            return contextAwareness(Output.of(contextAwareness));
        }

        /**
         * @param description Brief summary of the profile and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Brief summary of the profile and its intended use.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(@Nullable Output<List<DlpProfileEntryArgs>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(List<DlpProfileEntryArgs> entries) {
            return entries(Output.of(entries));
        }

        /**
         * @param entries List of entries to apply to the profile.
         * 
         * @return builder
         * 
         */
        public Builder entries(DlpProfileEntryArgs... entries) {
            return entries(List.of(entries));
        }

        /**
         * @param name Name of the profile. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the profile. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the profile. Available values: `custom`, `predefined`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DlpProfileState build() {
            return $;
        }
    }

}
