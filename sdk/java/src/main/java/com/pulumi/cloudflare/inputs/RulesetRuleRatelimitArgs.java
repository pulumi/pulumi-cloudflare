// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleRatelimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleRatelimitArgs Empty = new RulesetRuleRatelimitArgs();

    /**
     * Characteristics of the request on which the rate limit counter will be incremented.
     * 
     */
    @Import(name="characteristics", required=true)
    private Output<List<String>> characteristics;

    /**
     * @return Characteristics of the request on which the rate limit counter will be incremented.
     * 
     */
    public Output<List<String>> characteristics() {
        return this.characteristics;
    }

    /**
     * An expression that defines when the rate limit counter should be incremented. It defaults to the same as the rule&#39;s expression.
     * 
     */
    @Import(name="countingExpression")
    private @Nullable Output<String> countingExpression;

    /**
     * @return An expression that defines when the rate limit counter should be incremented. It defaults to the same as the rule&#39;s expression.
     * 
     */
    public Optional<Output<String>> countingExpression() {
        return Optional.ofNullable(this.countingExpression);
    }

    /**
     * Period of time in seconds after which the action will be disabled following its first execution.
     * 
     */
    @Import(name="mitigationTimeout")
    private @Nullable Output<Integer> mitigationTimeout;

    /**
     * @return Period of time in seconds after which the action will be disabled following its first execution.
     * 
     */
    public Optional<Output<Integer>> mitigationTimeout() {
        return Optional.ofNullable(this.mitigationTimeout);
    }

    /**
     * Period in seconds over which the counter is being incremented.
     * 
     */
    @Import(name="period", required=true)
    private Output<Integer> period;

    /**
     * @return Period in seconds over which the counter is being incremented.
     * 
     */
    public Output<Integer> period() {
        return this.period;
    }

    /**
     * The threshold of requests per period after which the action will be executed for the first time.
     * 
     */
    @Import(name="requestsPerPeriod")
    private @Nullable Output<Integer> requestsPerPeriod;

    /**
     * @return The threshold of requests per period after which the action will be executed for the first time.
     * 
     */
    public Optional<Output<Integer>> requestsPerPeriod() {
        return Optional.ofNullable(this.requestsPerPeriod);
    }

    /**
     * Whether counting is only performed when an origin is reached.
     * 
     */
    @Import(name="requestsToOrigin")
    private @Nullable Output<Boolean> requestsToOrigin;

    /**
     * @return Whether counting is only performed when an origin is reached.
     * 
     */
    public Optional<Output<Boolean>> requestsToOrigin() {
        return Optional.ofNullable(this.requestsToOrigin);
    }

    /**
     * The score threshold per period for which the action will be executed the first time.
     * 
     */
    @Import(name="scorePerPeriod")
    private @Nullable Output<Integer> scorePerPeriod;

    /**
     * @return The score threshold per period for which the action will be executed the first time.
     * 
     */
    public Optional<Output<Integer>> scorePerPeriod() {
        return Optional.ofNullable(this.scorePerPeriod);
    }

    /**
     * A response header name provided by the origin, which contains the score to increment rate limit counter with.
     * 
     */
    @Import(name="scoreResponseHeaderName")
    private @Nullable Output<String> scoreResponseHeaderName;

    /**
     * @return A response header name provided by the origin, which contains the score to increment rate limit counter with.
     * 
     */
    public Optional<Output<String>> scoreResponseHeaderName() {
        return Optional.ofNullable(this.scoreResponseHeaderName);
    }

    private RulesetRuleRatelimitArgs() {}

    private RulesetRuleRatelimitArgs(RulesetRuleRatelimitArgs $) {
        this.characteristics = $.characteristics;
        this.countingExpression = $.countingExpression;
        this.mitigationTimeout = $.mitigationTimeout;
        this.period = $.period;
        this.requestsPerPeriod = $.requestsPerPeriod;
        this.requestsToOrigin = $.requestsToOrigin;
        this.scorePerPeriod = $.scorePerPeriod;
        this.scoreResponseHeaderName = $.scoreResponseHeaderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleRatelimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleRatelimitArgs $;

        public Builder() {
            $ = new RulesetRuleRatelimitArgs();
        }

        public Builder(RulesetRuleRatelimitArgs defaults) {
            $ = new RulesetRuleRatelimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param characteristics Characteristics of the request on which the rate limit counter will be incremented.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(Output<List<String>> characteristics) {
            $.characteristics = characteristics;
            return this;
        }

        /**
         * @param characteristics Characteristics of the request on which the rate limit counter will be incremented.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(List<String> characteristics) {
            return characteristics(Output.of(characteristics));
        }

        /**
         * @param characteristics Characteristics of the request on which the rate limit counter will be incremented.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(String... characteristics) {
            return characteristics(List.of(characteristics));
        }

        /**
         * @param countingExpression An expression that defines when the rate limit counter should be incremented. It defaults to the same as the rule&#39;s expression.
         * 
         * @return builder
         * 
         */
        public Builder countingExpression(@Nullable Output<String> countingExpression) {
            $.countingExpression = countingExpression;
            return this;
        }

        /**
         * @param countingExpression An expression that defines when the rate limit counter should be incremented. It defaults to the same as the rule&#39;s expression.
         * 
         * @return builder
         * 
         */
        public Builder countingExpression(String countingExpression) {
            return countingExpression(Output.of(countingExpression));
        }

        /**
         * @param mitigationTimeout Period of time in seconds after which the action will be disabled following its first execution.
         * 
         * @return builder
         * 
         */
        public Builder mitigationTimeout(@Nullable Output<Integer> mitigationTimeout) {
            $.mitigationTimeout = mitigationTimeout;
            return this;
        }

        /**
         * @param mitigationTimeout Period of time in seconds after which the action will be disabled following its first execution.
         * 
         * @return builder
         * 
         */
        public Builder mitigationTimeout(Integer mitigationTimeout) {
            return mitigationTimeout(Output.of(mitigationTimeout));
        }

        /**
         * @param period Period in seconds over which the counter is being incremented.
         * 
         * @return builder
         * 
         */
        public Builder period(Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Period in seconds over which the counter is being incremented.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param requestsPerPeriod The threshold of requests per period after which the action will be executed for the first time.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerPeriod(@Nullable Output<Integer> requestsPerPeriod) {
            $.requestsPerPeriod = requestsPerPeriod;
            return this;
        }

        /**
         * @param requestsPerPeriod The threshold of requests per period after which the action will be executed for the first time.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerPeriod(Integer requestsPerPeriod) {
            return requestsPerPeriod(Output.of(requestsPerPeriod));
        }

        /**
         * @param requestsToOrigin Whether counting is only performed when an origin is reached.
         * 
         * @return builder
         * 
         */
        public Builder requestsToOrigin(@Nullable Output<Boolean> requestsToOrigin) {
            $.requestsToOrigin = requestsToOrigin;
            return this;
        }

        /**
         * @param requestsToOrigin Whether counting is only performed when an origin is reached.
         * 
         * @return builder
         * 
         */
        public Builder requestsToOrigin(Boolean requestsToOrigin) {
            return requestsToOrigin(Output.of(requestsToOrigin));
        }

        /**
         * @param scorePerPeriod The score threshold per period for which the action will be executed the first time.
         * 
         * @return builder
         * 
         */
        public Builder scorePerPeriod(@Nullable Output<Integer> scorePerPeriod) {
            $.scorePerPeriod = scorePerPeriod;
            return this;
        }

        /**
         * @param scorePerPeriod The score threshold per period for which the action will be executed the first time.
         * 
         * @return builder
         * 
         */
        public Builder scorePerPeriod(Integer scorePerPeriod) {
            return scorePerPeriod(Output.of(scorePerPeriod));
        }

        /**
         * @param scoreResponseHeaderName A response header name provided by the origin, which contains the score to increment rate limit counter with.
         * 
         * @return builder
         * 
         */
        public Builder scoreResponseHeaderName(@Nullable Output<String> scoreResponseHeaderName) {
            $.scoreResponseHeaderName = scoreResponseHeaderName;
            return this;
        }

        /**
         * @param scoreResponseHeaderName A response header name provided by the origin, which contains the score to increment rate limit counter with.
         * 
         * @return builder
         * 
         */
        public Builder scoreResponseHeaderName(String scoreResponseHeaderName) {
            return scoreResponseHeaderName(Output.of(scoreResponseHeaderName));
        }

        public RulesetRuleRatelimitArgs build() {
            if ($.characteristics == null) {
                throw new MissingRequiredPropertyException("RulesetRuleRatelimitArgs", "characteristics");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("RulesetRuleRatelimitArgs", "period");
            }
            return $;
        }
    }

}
