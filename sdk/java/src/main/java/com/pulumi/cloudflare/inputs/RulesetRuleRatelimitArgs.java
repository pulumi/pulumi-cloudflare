// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleRatelimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleRatelimitArgs Empty = new RulesetRuleRatelimitArgs();

    /**
     * List of parameters that define how Cloudflare tracks the request rate for this rule.
     * 
     */
    @Import(name="characteristics")
    private @Nullable Output<List<String>> characteristics;

    /**
     * @return List of parameters that define how Cloudflare tracks the request rate for this rule.
     * 
     */
    public Optional<Output<List<String>>> characteristics() {
        return Optional.ofNullable(this.characteristics);
    }

    /**
     * Criteria for counting HTTP requests to trigger the Rate Limiting action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language) documentation for all available fields, operators, and functions.
     * 
     */
    @Import(name="countingExpression")
    private @Nullable Output<String> countingExpression;

    /**
     * @return Criteria for counting HTTP requests to trigger the Rate Limiting action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language) documentation for all available fields, operators, and functions.
     * 
     */
    public Optional<Output<String>> countingExpression() {
        return Optional.ofNullable(this.countingExpression);
    }

    /**
     * Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
     * 
     */
    @Import(name="mitigationTimeout")
    private @Nullable Output<Integer> mitigationTimeout;

    /**
     * @return Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
     * 
     */
    public Optional<Output<Integer>> mitigationTimeout() {
        return Optional.ofNullable(this.mitigationTimeout);
    }

    /**
     * The period of time to consider (in seconds) when evaluating the request rate.
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return The period of time to consider (in seconds) when evaluating the request rate.
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * The number of requests over the period of time that will trigger the Rate Limiting rule.
     * 
     */
    @Import(name="requestsPerPeriod")
    private @Nullable Output<Integer> requestsPerPeriod;

    /**
     * @return The number of requests over the period of time that will trigger the Rate Limiting rule.
     * 
     */
    public Optional<Output<Integer>> requestsPerPeriod() {
        return Optional.ofNullable(this.requestsPerPeriod);
    }

    /**
     * Whether to include requests to origin within the Rate Limiting count.
     * 
     */
    @Import(name="requestsToOrigin", required=true)
    private Output<Boolean> requestsToOrigin;

    /**
     * @return Whether to include requests to origin within the Rate Limiting count.
     * 
     */
    public Output<Boolean> requestsToOrigin() {
        return this.requestsToOrigin;
    }

    /**
     * The maximum aggregate score over the period of time that will trigger Rate Limiting rule.
     * 
     */
    @Import(name="scorePerPeriod")
    private @Nullable Output<Integer> scorePerPeriod;

    /**
     * @return The maximum aggregate score over the period of time that will trigger Rate Limiting rule.
     * 
     */
    public Optional<Output<Integer>> scorePerPeriod() {
        return Optional.ofNullable(this.scorePerPeriod);
    }

    /**
     * Name of HTTP header in the response, set by the origin server, with the score for the current request.
     * 
     */
    @Import(name="scoreResponseHeaderName")
    private @Nullable Output<String> scoreResponseHeaderName;

    /**
     * @return Name of HTTP header in the response, set by the origin server, with the score for the current request.
     * 
     */
    public Optional<Output<String>> scoreResponseHeaderName() {
        return Optional.ofNullable(this.scoreResponseHeaderName);
    }

    private RulesetRuleRatelimitArgs() {}

    private RulesetRuleRatelimitArgs(RulesetRuleRatelimitArgs $) {
        this.characteristics = $.characteristics;
        this.countingExpression = $.countingExpression;
        this.mitigationTimeout = $.mitigationTimeout;
        this.period = $.period;
        this.requestsPerPeriod = $.requestsPerPeriod;
        this.requestsToOrigin = $.requestsToOrigin;
        this.scorePerPeriod = $.scorePerPeriod;
        this.scoreResponseHeaderName = $.scoreResponseHeaderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleRatelimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleRatelimitArgs $;

        public Builder() {
            $ = new RulesetRuleRatelimitArgs();
        }

        public Builder(RulesetRuleRatelimitArgs defaults) {
            $ = new RulesetRuleRatelimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param characteristics List of parameters that define how Cloudflare tracks the request rate for this rule.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(@Nullable Output<List<String>> characteristics) {
            $.characteristics = characteristics;
            return this;
        }

        /**
         * @param characteristics List of parameters that define how Cloudflare tracks the request rate for this rule.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(List<String> characteristics) {
            return characteristics(Output.of(characteristics));
        }

        /**
         * @param characteristics List of parameters that define how Cloudflare tracks the request rate for this rule.
         * 
         * @return builder
         * 
         */
        public Builder characteristics(String... characteristics) {
            return characteristics(List.of(characteristics));
        }

        /**
         * @param countingExpression Criteria for counting HTTP requests to trigger the Rate Limiting action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language) documentation for all available fields, operators, and functions.
         * 
         * @return builder
         * 
         */
        public Builder countingExpression(@Nullable Output<String> countingExpression) {
            $.countingExpression = countingExpression;
            return this;
        }

        /**
         * @param countingExpression Criteria for counting HTTP requests to trigger the Rate Limiting action. Uses the Firewall Rules expression language based on Wireshark display filters. Refer to the [Firewall Rules language](https://developers.cloudflare.com/firewall/cf-firewall-language) documentation for all available fields, operators, and functions.
         * 
         * @return builder
         * 
         */
        public Builder countingExpression(String countingExpression) {
            return countingExpression(Output.of(countingExpression));
        }

        /**
         * @param mitigationTimeout Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
         * 
         * @return builder
         * 
         */
        public Builder mitigationTimeout(@Nullable Output<Integer> mitigationTimeout) {
            $.mitigationTimeout = mitigationTimeout;
            return this;
        }

        /**
         * @param mitigationTimeout Once the request rate is reached, the Rate Limiting rule blocks further requests for the period of time defined in this field.
         * 
         * @return builder
         * 
         */
        public Builder mitigationTimeout(Integer mitigationTimeout) {
            return mitigationTimeout(Output.of(mitigationTimeout));
        }

        /**
         * @param period The period of time to consider (in seconds) when evaluating the request rate.
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period The period of time to consider (in seconds) when evaluating the request rate.
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param requestsPerPeriod The number of requests over the period of time that will trigger the Rate Limiting rule.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerPeriod(@Nullable Output<Integer> requestsPerPeriod) {
            $.requestsPerPeriod = requestsPerPeriod;
            return this;
        }

        /**
         * @param requestsPerPeriod The number of requests over the period of time that will trigger the Rate Limiting rule.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerPeriod(Integer requestsPerPeriod) {
            return requestsPerPeriod(Output.of(requestsPerPeriod));
        }

        /**
         * @param requestsToOrigin Whether to include requests to origin within the Rate Limiting count.
         * 
         * @return builder
         * 
         */
        public Builder requestsToOrigin(Output<Boolean> requestsToOrigin) {
            $.requestsToOrigin = requestsToOrigin;
            return this;
        }

        /**
         * @param requestsToOrigin Whether to include requests to origin within the Rate Limiting count.
         * 
         * @return builder
         * 
         */
        public Builder requestsToOrigin(Boolean requestsToOrigin) {
            return requestsToOrigin(Output.of(requestsToOrigin));
        }

        /**
         * @param scorePerPeriod The maximum aggregate score over the period of time that will trigger Rate Limiting rule.
         * 
         * @return builder
         * 
         */
        public Builder scorePerPeriod(@Nullable Output<Integer> scorePerPeriod) {
            $.scorePerPeriod = scorePerPeriod;
            return this;
        }

        /**
         * @param scorePerPeriod The maximum aggregate score over the period of time that will trigger Rate Limiting rule.
         * 
         * @return builder
         * 
         */
        public Builder scorePerPeriod(Integer scorePerPeriod) {
            return scorePerPeriod(Output.of(scorePerPeriod));
        }

        /**
         * @param scoreResponseHeaderName Name of HTTP header in the response, set by the origin server, with the score for the current request.
         * 
         * @return builder
         * 
         */
        public Builder scoreResponseHeaderName(@Nullable Output<String> scoreResponseHeaderName) {
            $.scoreResponseHeaderName = scoreResponseHeaderName;
            return this;
        }

        /**
         * @param scoreResponseHeaderName Name of HTTP header in the response, set by the origin server, with the score for the current request.
         * 
         * @return builder
         * 
         */
        public Builder scoreResponseHeaderName(String scoreResponseHeaderName) {
            return scoreResponseHeaderName(Output.of(scoreResponseHeaderName));
        }

        public RulesetRuleRatelimitArgs build() {
            $.requestsToOrigin = Objects.requireNonNull($.requestsToOrigin, "expected parameter 'requestsToOrigin' to be non-null");
            return $;
        }
    }

}
