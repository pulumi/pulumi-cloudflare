// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ImageVariantOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageVariantArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageVariantArgs Empty = new ImageVariantArgs();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    @Import(name="neverRequireSignedUrls")
    private @Nullable Output<Boolean> neverRequireSignedUrls;

    /**
     * @return Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    public Optional<Output<Boolean>> neverRequireSignedUrls() {
        return Optional.ofNullable(this.neverRequireSignedUrls);
    }

    /**
     * Allows you to define image resizing sizes for different use cases.
     * 
     */
    @Import(name="options", required=true)
    private Output<ImageVariantOptionsArgs> options;

    /**
     * @return Allows you to define image resizing sizes for different use cases.
     * 
     */
    public Output<ImageVariantOptionsArgs> options() {
        return this.options;
    }

    private ImageVariantArgs() {}

    private ImageVariantArgs(ImageVariantArgs $) {
        this.accountId = $.accountId;
        this.neverRequireSignedUrls = $.neverRequireSignedUrls;
        this.options = $.options;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVariantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVariantArgs $;

        public Builder() {
            $ = new ImageVariantArgs();
        }

        public Builder(ImageVariantArgs defaults) {
            $ = new ImageVariantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(@Nullable Output<Boolean> neverRequireSignedUrls) {
            $.neverRequireSignedUrls = neverRequireSignedUrls;
            return this;
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(Boolean neverRequireSignedUrls) {
            return neverRequireSignedUrls(Output.of(neverRequireSignedUrls));
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(Output<ImageVariantOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(ImageVariantOptionsArgs options) {
            return options(Output.of(options));
        }

        public ImageVariantArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ImageVariantArgs", "accountId");
            }
            if ($.options == null) {
                throw new MissingRequiredPropertyException("ImageVariantArgs", "options");
            }
            return $;
        }
    }

}
