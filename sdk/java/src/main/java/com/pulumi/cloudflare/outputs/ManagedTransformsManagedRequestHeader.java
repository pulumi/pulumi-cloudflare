// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ManagedTransformsManagedRequestHeader {
    /**
     * @return The Managed Transforms that this Managed Transform conflicts with.
     * 
     */
    private @Nullable List<String> conflictsWiths;
    /**
     * @return Whether the Managed Transform is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
     * 
     */
    private @Nullable Boolean hasConflict;
    /**
     * @return The human-readable identifier of the Managed Transform.
     * 
     */
    private String id;

    private ManagedTransformsManagedRequestHeader() {}
    /**
     * @return The Managed Transforms that this Managed Transform conflicts with.
     * 
     */
    public List<String> conflictsWiths() {
        return this.conflictsWiths == null ? List.of() : this.conflictsWiths;
    }
    /**
     * @return Whether the Managed Transform is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Whether the Managed Transform conflicts with the currently-enabled Managed Transforms.
     * 
     */
    public Optional<Boolean> hasConflict() {
        return Optional.ofNullable(this.hasConflict);
    }
    /**
     * @return The human-readable identifier of the Managed Transform.
     * 
     */
    public String id() {
        return this.id;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedTransformsManagedRequestHeader defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> conflictsWiths;
        private Boolean enabled;
        private @Nullable Boolean hasConflict;
        private String id;
        public Builder() {}
        public Builder(ManagedTransformsManagedRequestHeader defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictsWiths = defaults.conflictsWiths;
    	      this.enabled = defaults.enabled;
    	      this.hasConflict = defaults.hasConflict;
    	      this.id = defaults.id;
        }

        @CustomType.Setter
        public Builder conflictsWiths(@Nullable List<String> conflictsWiths) {

            this.conflictsWiths = conflictsWiths;
            return this;
        }
        public Builder conflictsWiths(String... conflictsWiths) {
            return conflictsWiths(List.of(conflictsWiths));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("ManagedTransformsManagedRequestHeader", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder hasConflict(@Nullable Boolean hasConflict) {

            this.hasConflict = hasConflict;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ManagedTransformsManagedRequestHeader", "id");
            }
            this.id = id;
            return this;
        }
        public ManagedTransformsManagedRequestHeader build() {
            final var _resultValue = new ManagedTransformsManagedRequestHeader();
            _resultValue.conflictsWiths = conflictsWiths;
            _resultValue.enabled = enabled;
            _resultValue.hasConflict = hasConflict;
            _resultValue.id = id;
            return _resultValue;
        }
    }
}
