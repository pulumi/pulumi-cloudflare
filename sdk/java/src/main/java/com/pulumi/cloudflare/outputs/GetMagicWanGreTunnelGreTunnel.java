// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicWanGreTunnelGreTunnelBgp;
import com.pulumi.cloudflare.outputs.GetMagicWanGreTunnelGreTunnelBgpStatus;
import com.pulumi.cloudflare.outputs.GetMagicWanGreTunnelGreTunnelHealthCheck;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicWanGreTunnelGreTunnel {
    private GetMagicWanGreTunnelGreTunnelBgp bgp;
    private GetMagicWanGreTunnelGreTunnelBgpStatus bgpStatus;
    /**
     * @return The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    private String cloudflareGreEndpoint;
    /**
     * @return The date and time the tunnel was created.
     * 
     */
    private String createdOn;
    /**
     * @return The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    private String customerGreEndpoint;
    /**
     * @return An optional description of the GRE tunnel.
     * 
     */
    private String description;
    private GetMagicWanGreTunnelGreTunnelHealthCheck healthCheck;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    private String interfaceAddress;
    /**
     * @return A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     * 
     */
    private String interfaceAddress6;
    /**
     * @return The date and time the tunnel was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     * 
     */
    private Integer mtu;
    /**
     * @return The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     * 
     */
    private String name;
    /**
     * @return Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    private Integer ttl;

    private GetMagicWanGreTunnelGreTunnel() {}
    public GetMagicWanGreTunnelGreTunnelBgp bgp() {
        return this.bgp;
    }
    public GetMagicWanGreTunnelGreTunnelBgpStatus bgpStatus() {
        return this.bgpStatus;
    }
    /**
     * @return The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    public String cloudflareGreEndpoint() {
        return this.cloudflareGreEndpoint;
    }
    /**
     * @return The date and time the tunnel was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    public String customerGreEndpoint() {
        return this.customerGreEndpoint;
    }
    /**
     * @return An optional description of the GRE tunnel.
     * 
     */
    public String description() {
        return this.description;
    }
    public GetMagicWanGreTunnelGreTunnelHealthCheck healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    public String interfaceAddress() {
        return this.interfaceAddress;
    }
    /**
     * @return A 127 bit IPV6 prefix from within the virtual*subnet6 prefix space with the address being the first IP of the subnet and not same as the address of virtual*subnet6. Eg if virtual*subnet6 is 2606:54c1:7:0:a9fe:12d2::/127 , interface*address6 could be 2606:54c1:7:0:a9fe:12d2:1:200/127
     * 
     */
    public String interfaceAddress6() {
        return this.interfaceAddress6;
    }
    /**
     * @return The date and time the tunnel was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicWanGreTunnelGreTunnel defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetMagicWanGreTunnelGreTunnelBgp bgp;
        private GetMagicWanGreTunnelGreTunnelBgpStatus bgpStatus;
        private String cloudflareGreEndpoint;
        private String createdOn;
        private String customerGreEndpoint;
        private String description;
        private GetMagicWanGreTunnelGreTunnelHealthCheck healthCheck;
        private String id;
        private String interfaceAddress;
        private String interfaceAddress6;
        private String modifiedOn;
        private Integer mtu;
        private String name;
        private Integer ttl;
        public Builder() {}
        public Builder(GetMagicWanGreTunnelGreTunnel defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgp = defaults.bgp;
    	      this.bgpStatus = defaults.bgpStatus;
    	      this.cloudflareGreEndpoint = defaults.cloudflareGreEndpoint;
    	      this.createdOn = defaults.createdOn;
    	      this.customerGreEndpoint = defaults.customerGreEndpoint;
    	      this.description = defaults.description;
    	      this.healthCheck = defaults.healthCheck;
    	      this.id = defaults.id;
    	      this.interfaceAddress = defaults.interfaceAddress;
    	      this.interfaceAddress6 = defaults.interfaceAddress6;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder bgp(GetMagicWanGreTunnelGreTunnelBgp bgp) {
            if (bgp == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "bgp");
            }
            this.bgp = bgp;
            return this;
        }
        @CustomType.Setter
        public Builder bgpStatus(GetMagicWanGreTunnelGreTunnelBgpStatus bgpStatus) {
            if (bgpStatus == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "bgpStatus");
            }
            this.bgpStatus = bgpStatus;
            return this;
        }
        @CustomType.Setter
        public Builder cloudflareGreEndpoint(String cloudflareGreEndpoint) {
            if (cloudflareGreEndpoint == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "cloudflareGreEndpoint");
            }
            this.cloudflareGreEndpoint = cloudflareGreEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder customerGreEndpoint(String customerGreEndpoint) {
            if (customerGreEndpoint == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "customerGreEndpoint");
            }
            this.customerGreEndpoint = customerGreEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(GetMagicWanGreTunnelGreTunnelHealthCheck healthCheck) {
            if (healthCheck == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "healthCheck");
            }
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceAddress(String interfaceAddress) {
            if (interfaceAddress == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "interfaceAddress");
            }
            this.interfaceAddress = interfaceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceAddress6(String interfaceAddress6) {
            if (interfaceAddress6 == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "interfaceAddress6");
            }
            this.interfaceAddress6 = interfaceAddress6;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetMagicWanGreTunnelGreTunnel", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        public GetMagicWanGreTunnelGreTunnel build() {
            final var _resultValue = new GetMagicWanGreTunnelGreTunnel();
            _resultValue.bgp = bgp;
            _resultValue.bgpStatus = bgpStatus;
            _resultValue.cloudflareGreEndpoint = cloudflareGreEndpoint;
            _resultValue.createdOn = createdOn;
            _resultValue.customerGreEndpoint = customerGreEndpoint;
            _resultValue.description = description;
            _resultValue.healthCheck = healthCheck;
            _resultValue.id = id;
            _resultValue.interfaceAddress = interfaceAddress;
            _resultValue.interfaceAddress6 = interfaceAddress6;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.mtu = mtu;
            _resultValue.name = name;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
