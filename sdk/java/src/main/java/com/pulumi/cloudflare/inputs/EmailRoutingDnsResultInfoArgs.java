// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailRoutingDnsResultInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailRoutingDnsResultInfoArgs Empty = new EmailRoutingDnsResultInfoArgs();

    /**
     * Total number of results for the requested service.
     * 
     */
    @Import(name="count")
    private @Nullable Output<Double> count;

    /**
     * @return Total number of results for the requested service.
     * 
     */
    public Optional<Output<Double>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Current page within paginated list of results.
     * 
     */
    @Import(name="page")
    private @Nullable Output<Double> page;

    /**
     * @return Current page within paginated list of results.
     * 
     */
    public Optional<Output<Double>> page() {
        return Optional.ofNullable(this.page);
    }

    /**
     * Number of results per page of results.
     * 
     */
    @Import(name="perPage")
    private @Nullable Output<Double> perPage;

    /**
     * @return Number of results per page of results.
     * 
     */
    public Optional<Output<Double>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    /**
     * Total results available without any search parameters.
     * 
     */
    @Import(name="totalCount")
    private @Nullable Output<Double> totalCount;

    /**
     * @return Total results available without any search parameters.
     * 
     */
    public Optional<Output<Double>> totalCount() {
        return Optional.ofNullable(this.totalCount);
    }

    private EmailRoutingDnsResultInfoArgs() {}

    private EmailRoutingDnsResultInfoArgs(EmailRoutingDnsResultInfoArgs $) {
        this.count = $.count;
        this.page = $.page;
        this.perPage = $.perPage;
        this.totalCount = $.totalCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailRoutingDnsResultInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailRoutingDnsResultInfoArgs $;

        public Builder() {
            $ = new EmailRoutingDnsResultInfoArgs();
        }

        public Builder(EmailRoutingDnsResultInfoArgs defaults) {
            $ = new EmailRoutingDnsResultInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Total number of results for the requested service.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Output<Double> count) {
            $.count = count;
            return this;
        }

        /**
         * @param count Total number of results for the requested service.
         * 
         * @return builder
         * 
         */
        public Builder count(Double count) {
            return count(Output.of(count));
        }

        /**
         * @param page Current page within paginated list of results.
         * 
         * @return builder
         * 
         */
        public Builder page(@Nullable Output<Double> page) {
            $.page = page;
            return this;
        }

        /**
         * @param page Current page within paginated list of results.
         * 
         * @return builder
         * 
         */
        public Builder page(Double page) {
            return page(Output.of(page));
        }

        /**
         * @param perPage Number of results per page of results.
         * 
         * @return builder
         * 
         */
        public Builder perPage(@Nullable Output<Double> perPage) {
            $.perPage = perPage;
            return this;
        }

        /**
         * @param perPage Number of results per page of results.
         * 
         * @return builder
         * 
         */
        public Builder perPage(Double perPage) {
            return perPage(Output.of(perPage));
        }

        /**
         * @param totalCount Total results available without any search parameters.
         * 
         * @return builder
         * 
         */
        public Builder totalCount(@Nullable Output<Double> totalCount) {
            $.totalCount = totalCount;
            return this;
        }

        /**
         * @param totalCount Total results available without any search parameters.
         * 
         * @return builder
         * 
         */
        public Builder totalCount(Double totalCount) {
            return totalCount(Output.of(totalCount));
        }

        public EmailRoutingDnsResultInfoArgs build() {
            return $;
        }
    }

}
