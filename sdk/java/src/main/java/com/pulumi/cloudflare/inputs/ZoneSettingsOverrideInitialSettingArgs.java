// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZoneSettingsOverrideInitialSettingMinifyArgs;
import com.pulumi.cloudflare.inputs.ZoneSettingsOverrideInitialSettingMobileRedirectArgs;
import com.pulumi.cloudflare.inputs.ZoneSettingsOverrideInitialSettingSecurityHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneSettingsOverrideInitialSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneSettingsOverrideInitialSettingArgs Empty = new ZoneSettingsOverrideInitialSettingArgs();

    @Import(name="alwaysOnline")
    private @Nullable Output<String> alwaysOnline;

    public Optional<Output<String>> alwaysOnline() {
        return Optional.ofNullable(this.alwaysOnline);
    }

    @Import(name="alwaysUseHttps")
    private @Nullable Output<String> alwaysUseHttps;

    public Optional<Output<String>> alwaysUseHttps() {
        return Optional.ofNullable(this.alwaysUseHttps);
    }

    @Import(name="automaticHttpsRewrites")
    private @Nullable Output<String> automaticHttpsRewrites;

    public Optional<Output<String>> automaticHttpsRewrites() {
        return Optional.ofNullable(this.automaticHttpsRewrites);
    }

    @Import(name="binaryAst")
    private @Nullable Output<String> binaryAst;

    public Optional<Output<String>> binaryAst() {
        return Optional.ofNullable(this.binaryAst);
    }

    @Import(name="brotli")
    private @Nullable Output<String> brotli;

    public Optional<Output<String>> brotli() {
        return Optional.ofNullable(this.brotli);
    }

    @Import(name="browserCacheTtl")
    private @Nullable Output<Integer> browserCacheTtl;

    public Optional<Output<Integer>> browserCacheTtl() {
        return Optional.ofNullable(this.browserCacheTtl);
    }

    @Import(name="browserCheck")
    private @Nullable Output<String> browserCheck;

    public Optional<Output<String>> browserCheck() {
        return Optional.ofNullable(this.browserCheck);
    }

    /**
     * Allowed values: &#34;aggressive&#34; (default) - delivers a different resource each time the query string changes, &#34;basic&#34; - delivers resources from cache when there is no query string, &#34;simplified&#34; - delivers the same resource to everyone independent of the query string.
     * 
     */
    @Import(name="cacheLevel")
    private @Nullable Output<String> cacheLevel;

    /**
     * @return Allowed values: &#34;aggressive&#34; (default) - delivers a different resource each time the query string changes, &#34;basic&#34; - delivers resources from cache when there is no query string, &#34;simplified&#34; - delivers the same resource to everyone independent of the query string.
     * 
     */
    public Optional<Output<String>> cacheLevel() {
        return Optional.ofNullable(this.cacheLevel);
    }

    @Import(name="challengeTtl")
    private @Nullable Output<Integer> challengeTtl;

    public Optional<Output<Integer>> challengeTtl() {
        return Optional.ofNullable(this.challengeTtl);
    }

    /**
     * An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    @Import(name="ciphers")
    private @Nullable Output<List<String>> ciphers;

    /**
     * @return An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
     * 
     */
    public Optional<Output<List<String>>> ciphers() {
        return Optional.ofNullable(this.ciphers);
    }

    /**
     * Allowed values: &#34;flatten_at_root&#34; (default), &#34;flatten_all&#34;, &#34;flatten_none&#34;.
     * 
     */
    @Import(name="cnameFlattening")
    private @Nullable Output<String> cnameFlattening;

    /**
     * @return Allowed values: &#34;flatten_at_root&#34; (default), &#34;flatten_all&#34;, &#34;flatten_none&#34;.
     * 
     */
    public Optional<Output<String>> cnameFlattening() {
        return Optional.ofNullable(this.cnameFlattening);
    }

    @Import(name="developmentMode")
    private @Nullable Output<String> developmentMode;

    public Optional<Output<String>> developmentMode() {
        return Optional.ofNullable(this.developmentMode);
    }

    @Import(name="earlyHints")
    private @Nullable Output<String> earlyHints;

    public Optional<Output<String>> earlyHints() {
        return Optional.ofNullable(this.earlyHints);
    }

    @Import(name="emailObfuscation")
    private @Nullable Output<String> emailObfuscation;

    public Optional<Output<String>> emailObfuscation() {
        return Optional.ofNullable(this.emailObfuscation);
    }

    @Import(name="filterLogsToCloudflare")
    private @Nullable Output<String> filterLogsToCloudflare;

    public Optional<Output<String>> filterLogsToCloudflare() {
        return Optional.ofNullable(this.filterLogsToCloudflare);
    }

    /**
     * Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;custom&#34;.
     * 
     */
    @Import(name="h2Prioritization")
    private @Nullable Output<String> h2Prioritization;

    /**
     * @return Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;custom&#34;.
     * 
     */
    public Optional<Output<String>> h2Prioritization() {
        return Optional.ofNullable(this.h2Prioritization);
    }

    @Import(name="hotlinkProtection")
    private @Nullable Output<String> hotlinkProtection;

    public Optional<Output<String>> hotlinkProtection() {
        return Optional.ofNullable(this.hotlinkProtection);
    }

    @Import(name="http2")
    private @Nullable Output<String> http2;

    public Optional<Output<String>> http2() {
        return Optional.ofNullable(this.http2);
    }

    @Import(name="http3")
    private @Nullable Output<String> http3;

    public Optional<Output<String>> http3() {
        return Optional.ofNullable(this.http3);
    }

    /**
     * Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;open&#34;.
     * 
     */
    @Import(name="imageResizing")
    private @Nullable Output<String> imageResizing;

    /**
     * @return Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;open&#34;.
     * 
     */
    public Optional<Output<String>> imageResizing() {
        return Optional.ofNullable(this.imageResizing);
    }

    @Import(name="ipGeolocation")
    private @Nullable Output<String> ipGeolocation;

    public Optional<Output<String>> ipGeolocation() {
        return Optional.ofNullable(this.ipGeolocation);
    }

    @Import(name="ipv6")
    private @Nullable Output<String> ipv6;

    public Optional<Output<String>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    @Import(name="logToCloudflare")
    private @Nullable Output<String> logToCloudflare;

    public Optional<Output<String>> logToCloudflare() {
        return Optional.ofNullable(this.logToCloudflare);
    }

    @Import(name="maxUpload")
    private @Nullable Output<Integer> maxUpload;

    public Optional<Output<Integer>> maxUpload() {
        return Optional.ofNullable(this.maxUpload);
    }

    /**
     * Allowed values: &#34;1.0&#34; (default), &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    @Import(name="minTlsVersion")
    private @Nullable Output<String> minTlsVersion;

    /**
     * @return Allowed values: &#34;1.0&#34; (default), &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
     * 
     */
    public Optional<Output<String>> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }

    @Import(name="minify")
    private @Nullable Output<ZoneSettingsOverrideInitialSettingMinifyArgs> minify;

    public Optional<Output<ZoneSettingsOverrideInitialSettingMinifyArgs>> minify() {
        return Optional.ofNullable(this.minify);
    }

    @Import(name="mirage")
    private @Nullable Output<String> mirage;

    public Optional<Output<String>> mirage() {
        return Optional.ofNullable(this.mirage);
    }

    @Import(name="mobileRedirect")
    private @Nullable Output<ZoneSettingsOverrideInitialSettingMobileRedirectArgs> mobileRedirect;

    public Optional<Output<ZoneSettingsOverrideInitialSettingMobileRedirectArgs>> mobileRedirect() {
        return Optional.ofNullable(this.mobileRedirect);
    }

    @Import(name="opportunisticEncryption")
    private @Nullable Output<String> opportunisticEncryption;

    public Optional<Output<String>> opportunisticEncryption() {
        return Optional.ofNullable(this.opportunisticEncryption);
    }

    @Import(name="opportunisticOnion")
    private @Nullable Output<String> opportunisticOnion;

    public Optional<Output<String>> opportunisticOnion() {
        return Optional.ofNullable(this.opportunisticOnion);
    }

    @Import(name="orangeToOrange")
    private @Nullable Output<String> orangeToOrange;

    public Optional<Output<String>> orangeToOrange() {
        return Optional.ofNullable(this.orangeToOrange);
    }

    @Import(name="originErrorPagePassThru")
    private @Nullable Output<String> originErrorPagePassThru;

    public Optional<Output<String>> originErrorPagePassThru() {
        return Optional.ofNullable(this.originErrorPagePassThru);
    }

    /**
     * Allowed values: &#34;1&#34; (default on Enterprise), &#34;2&#34; (default)
     * 
     */
    @Import(name="originMaxHttpVersion")
    private @Nullable Output<String> originMaxHttpVersion;

    /**
     * @return Allowed values: &#34;1&#34; (default on Enterprise), &#34;2&#34; (default)
     * 
     */
    public Optional<Output<String>> originMaxHttpVersion() {
        return Optional.ofNullable(this.originMaxHttpVersion);
    }

    /**
     * Allowed values: &#34;off&#34; (default), &#34;lossless&#34;, &#34;lossy&#34;.
     * 
     */
    @Import(name="polish")
    private @Nullable Output<String> polish;

    /**
     * @return Allowed values: &#34;off&#34; (default), &#34;lossless&#34;, &#34;lossy&#34;.
     * 
     */
    public Optional<Output<String>> polish() {
        return Optional.ofNullable(this.polish);
    }

    @Import(name="prefetchPreload")
    private @Nullable Output<String> prefetchPreload;

    public Optional<Output<String>> prefetchPreload() {
        return Optional.ofNullable(this.prefetchPreload);
    }

    @Import(name="privacyPass")
    private @Nullable Output<String> privacyPass;

    public Optional<Output<String>> privacyPass() {
        return Optional.ofNullable(this.privacyPass);
    }

    @Import(name="proxyReadTimeout")
    private @Nullable Output<String> proxyReadTimeout;

    public Optional<Output<String>> proxyReadTimeout() {
        return Optional.ofNullable(this.proxyReadTimeout);
    }

    /**
     * Allowed values: &#34;off&#34; (default), &#34;add_header&#34;, &#34;overwrite_header&#34;.
     * 
     */
    @Import(name="pseudoIpv4")
    private @Nullable Output<String> pseudoIpv4;

    /**
     * @return Allowed values: &#34;off&#34; (default), &#34;add_header&#34;, &#34;overwrite_header&#34;.
     * 
     */
    public Optional<Output<String>> pseudoIpv4() {
        return Optional.ofNullable(this.pseudoIpv4);
    }

    @Import(name="responseBuffering")
    private @Nullable Output<String> responseBuffering;

    public Optional<Output<String>> responseBuffering() {
        return Optional.ofNullable(this.responseBuffering);
    }

    @Import(name="rocketLoader")
    private @Nullable Output<String> rocketLoader;

    public Optional<Output<String>> rocketLoader() {
        return Optional.ofNullable(this.rocketLoader);
    }

    @Import(name="securityHeader")
    private @Nullable Output<ZoneSettingsOverrideInitialSettingSecurityHeaderArgs> securityHeader;

    public Optional<Output<ZoneSettingsOverrideInitialSettingSecurityHeaderArgs>> securityHeader() {
        return Optional.ofNullable(this.securityHeader);
    }

    /**
     * Allowed values: &#34;off&#34; (Enterprise only), &#34;essentially_off&#34;, &#34;low&#34;, &#34;medium&#34; (default), &#34;high&#34;, &#34;under_attack&#34;.
     * 
     */
    @Import(name="securityLevel")
    private @Nullable Output<String> securityLevel;

    /**
     * @return Allowed values: &#34;off&#34; (Enterprise only), &#34;essentially_off&#34;, &#34;low&#34;, &#34;medium&#34; (default), &#34;high&#34;, &#34;under_attack&#34;.
     * 
     */
    public Optional<Output<String>> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }

    @Import(name="serverSideExclude")
    private @Nullable Output<String> serverSideExclude;

    public Optional<Output<String>> serverSideExclude() {
        return Optional.ofNullable(this.serverSideExclude);
    }

    @Import(name="sortQueryStringForCache")
    private @Nullable Output<String> sortQueryStringForCache;

    public Optional<Output<String>> sortQueryStringForCache() {
        return Optional.ofNullable(this.sortQueryStringForCache);
    }

    /**
     * Allowed values: &#34;off&#34; (default), &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<String> ssl;

    /**
     * @return Allowed values: &#34;off&#34; (default), &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
     * 
     */
    public Optional<Output<String>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * @deprecated
     * tls_1_2_only has been deprecated in favour of using `min_tls_version = &#34;1.2&#34;` instead.
     * 
     */
    @Deprecated /* tls_1_2_only has been deprecated in favour of using `min_tls_version = ""1.2""` instead. */
    @Import(name="tls12Only")
    private @Nullable Output<String> tls12Only;

    /**
     * @deprecated
     * tls_1_2_only has been deprecated in favour of using `min_tls_version = &#34;1.2&#34;` instead.
     * 
     */
    @Deprecated /* tls_1_2_only has been deprecated in favour of using `min_tls_version = ""1.2""` instead. */
    public Optional<Output<String>> tls12Only() {
        return Optional.ofNullable(this.tls12Only);
    }

    /**
     * Allowed values: &#34;off&#34; (default), &#34;on&#34;, &#34;zrt&#34;.
     * 
     */
    @Import(name="tls13")
    private @Nullable Output<String> tls13;

    /**
     * @return Allowed values: &#34;off&#34; (default), &#34;on&#34;, &#34;zrt&#34;.
     * 
     */
    public Optional<Output<String>> tls13() {
        return Optional.ofNullable(this.tls13);
    }

    @Import(name="tlsClientAuth")
    private @Nullable Output<String> tlsClientAuth;

    public Optional<Output<String>> tlsClientAuth() {
        return Optional.ofNullable(this.tlsClientAuth);
    }

    @Import(name="trueClientIpHeader")
    private @Nullable Output<String> trueClientIpHeader;

    public Optional<Output<String>> trueClientIpHeader() {
        return Optional.ofNullable(this.trueClientIpHeader);
    }

    @Import(name="universalSsl")
    private @Nullable Output<String> universalSsl;

    public Optional<Output<String>> universalSsl() {
        return Optional.ofNullable(this.universalSsl);
    }

    @Import(name="visitorIp")
    private @Nullable Output<String> visitorIp;

    public Optional<Output<String>> visitorIp() {
        return Optional.ofNullable(this.visitorIp);
    }

    @Import(name="waf")
    private @Nullable Output<String> waf;

    public Optional<Output<String>> waf() {
        return Optional.ofNullable(this.waf);
    }

    /**
     * . Note that the value specified will be ignored unless `polish` is turned on (i.e. is &#34;lossless&#34; or &#34;lossy&#34;)
     * 
     */
    @Import(name="webp")
    private @Nullable Output<String> webp;

    /**
     * @return . Note that the value specified will be ignored unless `polish` is turned on (i.e. is &#34;lossless&#34; or &#34;lossy&#34;)
     * 
     */
    public Optional<Output<String>> webp() {
        return Optional.ofNullable(this.webp);
    }

    @Import(name="websockets")
    private @Nullable Output<String> websockets;

    public Optional<Output<String>> websockets() {
        return Optional.ofNullable(this.websockets);
    }

    @Import(name="zeroRtt")
    private @Nullable Output<String> zeroRtt;

    public Optional<Output<String>> zeroRtt() {
        return Optional.ofNullable(this.zeroRtt);
    }

    private ZoneSettingsOverrideInitialSettingArgs() {}

    private ZoneSettingsOverrideInitialSettingArgs(ZoneSettingsOverrideInitialSettingArgs $) {
        this.alwaysOnline = $.alwaysOnline;
        this.alwaysUseHttps = $.alwaysUseHttps;
        this.automaticHttpsRewrites = $.automaticHttpsRewrites;
        this.binaryAst = $.binaryAst;
        this.brotli = $.brotli;
        this.browserCacheTtl = $.browserCacheTtl;
        this.browserCheck = $.browserCheck;
        this.cacheLevel = $.cacheLevel;
        this.challengeTtl = $.challengeTtl;
        this.ciphers = $.ciphers;
        this.cnameFlattening = $.cnameFlattening;
        this.developmentMode = $.developmentMode;
        this.earlyHints = $.earlyHints;
        this.emailObfuscation = $.emailObfuscation;
        this.filterLogsToCloudflare = $.filterLogsToCloudflare;
        this.h2Prioritization = $.h2Prioritization;
        this.hotlinkProtection = $.hotlinkProtection;
        this.http2 = $.http2;
        this.http3 = $.http3;
        this.imageResizing = $.imageResizing;
        this.ipGeolocation = $.ipGeolocation;
        this.ipv6 = $.ipv6;
        this.logToCloudflare = $.logToCloudflare;
        this.maxUpload = $.maxUpload;
        this.minTlsVersion = $.minTlsVersion;
        this.minify = $.minify;
        this.mirage = $.mirage;
        this.mobileRedirect = $.mobileRedirect;
        this.opportunisticEncryption = $.opportunisticEncryption;
        this.opportunisticOnion = $.opportunisticOnion;
        this.orangeToOrange = $.orangeToOrange;
        this.originErrorPagePassThru = $.originErrorPagePassThru;
        this.originMaxHttpVersion = $.originMaxHttpVersion;
        this.polish = $.polish;
        this.prefetchPreload = $.prefetchPreload;
        this.privacyPass = $.privacyPass;
        this.proxyReadTimeout = $.proxyReadTimeout;
        this.pseudoIpv4 = $.pseudoIpv4;
        this.responseBuffering = $.responseBuffering;
        this.rocketLoader = $.rocketLoader;
        this.securityHeader = $.securityHeader;
        this.securityLevel = $.securityLevel;
        this.serverSideExclude = $.serverSideExclude;
        this.sortQueryStringForCache = $.sortQueryStringForCache;
        this.ssl = $.ssl;
        this.tls12Only = $.tls12Only;
        this.tls13 = $.tls13;
        this.tlsClientAuth = $.tlsClientAuth;
        this.trueClientIpHeader = $.trueClientIpHeader;
        this.universalSsl = $.universalSsl;
        this.visitorIp = $.visitorIp;
        this.waf = $.waf;
        this.webp = $.webp;
        this.websockets = $.websockets;
        this.zeroRtt = $.zeroRtt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneSettingsOverrideInitialSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneSettingsOverrideInitialSettingArgs $;

        public Builder() {
            $ = new ZoneSettingsOverrideInitialSettingArgs();
        }

        public Builder(ZoneSettingsOverrideInitialSettingArgs defaults) {
            $ = new ZoneSettingsOverrideInitialSettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder alwaysOnline(@Nullable Output<String> alwaysOnline) {
            $.alwaysOnline = alwaysOnline;
            return this;
        }

        public Builder alwaysOnline(String alwaysOnline) {
            return alwaysOnline(Output.of(alwaysOnline));
        }

        public Builder alwaysUseHttps(@Nullable Output<String> alwaysUseHttps) {
            $.alwaysUseHttps = alwaysUseHttps;
            return this;
        }

        public Builder alwaysUseHttps(String alwaysUseHttps) {
            return alwaysUseHttps(Output.of(alwaysUseHttps));
        }

        public Builder automaticHttpsRewrites(@Nullable Output<String> automaticHttpsRewrites) {
            $.automaticHttpsRewrites = automaticHttpsRewrites;
            return this;
        }

        public Builder automaticHttpsRewrites(String automaticHttpsRewrites) {
            return automaticHttpsRewrites(Output.of(automaticHttpsRewrites));
        }

        public Builder binaryAst(@Nullable Output<String> binaryAst) {
            $.binaryAst = binaryAst;
            return this;
        }

        public Builder binaryAst(String binaryAst) {
            return binaryAst(Output.of(binaryAst));
        }

        public Builder brotli(@Nullable Output<String> brotli) {
            $.brotli = brotli;
            return this;
        }

        public Builder brotli(String brotli) {
            return brotli(Output.of(brotli));
        }

        public Builder browserCacheTtl(@Nullable Output<Integer> browserCacheTtl) {
            $.browserCacheTtl = browserCacheTtl;
            return this;
        }

        public Builder browserCacheTtl(Integer browserCacheTtl) {
            return browserCacheTtl(Output.of(browserCacheTtl));
        }

        public Builder browserCheck(@Nullable Output<String> browserCheck) {
            $.browserCheck = browserCheck;
            return this;
        }

        public Builder browserCheck(String browserCheck) {
            return browserCheck(Output.of(browserCheck));
        }

        /**
         * @param cacheLevel Allowed values: &#34;aggressive&#34; (default) - delivers a different resource each time the query string changes, &#34;basic&#34; - delivers resources from cache when there is no query string, &#34;simplified&#34; - delivers the same resource to everyone independent of the query string.
         * 
         * @return builder
         * 
         */
        public Builder cacheLevel(@Nullable Output<String> cacheLevel) {
            $.cacheLevel = cacheLevel;
            return this;
        }

        /**
         * @param cacheLevel Allowed values: &#34;aggressive&#34; (default) - delivers a different resource each time the query string changes, &#34;basic&#34; - delivers resources from cache when there is no query string, &#34;simplified&#34; - delivers the same resource to everyone independent of the query string.
         * 
         * @return builder
         * 
         */
        public Builder cacheLevel(String cacheLevel) {
            return cacheLevel(Output.of(cacheLevel));
        }

        public Builder challengeTtl(@Nullable Output<Integer> challengeTtl) {
            $.challengeTtl = challengeTtl;
            return this;
        }

        public Builder challengeTtl(Integer challengeTtl) {
            return challengeTtl(Output.of(challengeTtl));
        }

        /**
         * @param ciphers An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(@Nullable Output<List<String>> ciphers) {
            $.ciphers = ciphers;
            return this;
        }

        /**
         * @param ciphers An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(List<String> ciphers) {
            return ciphers(Output.of(ciphers));
        }

        /**
         * @param ciphers An allowlist of ciphers for TLS termination. These ciphers must be in the BoringSSL format.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(String... ciphers) {
            return ciphers(List.of(ciphers));
        }

        /**
         * @param cnameFlattening Allowed values: &#34;flatten_at_root&#34; (default), &#34;flatten_all&#34;, &#34;flatten_none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cnameFlattening(@Nullable Output<String> cnameFlattening) {
            $.cnameFlattening = cnameFlattening;
            return this;
        }

        /**
         * @param cnameFlattening Allowed values: &#34;flatten_at_root&#34; (default), &#34;flatten_all&#34;, &#34;flatten_none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder cnameFlattening(String cnameFlattening) {
            return cnameFlattening(Output.of(cnameFlattening));
        }

        public Builder developmentMode(@Nullable Output<String> developmentMode) {
            $.developmentMode = developmentMode;
            return this;
        }

        public Builder developmentMode(String developmentMode) {
            return developmentMode(Output.of(developmentMode));
        }

        public Builder earlyHints(@Nullable Output<String> earlyHints) {
            $.earlyHints = earlyHints;
            return this;
        }

        public Builder earlyHints(String earlyHints) {
            return earlyHints(Output.of(earlyHints));
        }

        public Builder emailObfuscation(@Nullable Output<String> emailObfuscation) {
            $.emailObfuscation = emailObfuscation;
            return this;
        }

        public Builder emailObfuscation(String emailObfuscation) {
            return emailObfuscation(Output.of(emailObfuscation));
        }

        public Builder filterLogsToCloudflare(@Nullable Output<String> filterLogsToCloudflare) {
            $.filterLogsToCloudflare = filterLogsToCloudflare;
            return this;
        }

        public Builder filterLogsToCloudflare(String filterLogsToCloudflare) {
            return filterLogsToCloudflare(Output.of(filterLogsToCloudflare));
        }

        /**
         * @param h2Prioritization Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;custom&#34;.
         * 
         * @return builder
         * 
         */
        public Builder h2Prioritization(@Nullable Output<String> h2Prioritization) {
            $.h2Prioritization = h2Prioritization;
            return this;
        }

        /**
         * @param h2Prioritization Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;custom&#34;.
         * 
         * @return builder
         * 
         */
        public Builder h2Prioritization(String h2Prioritization) {
            return h2Prioritization(Output.of(h2Prioritization));
        }

        public Builder hotlinkProtection(@Nullable Output<String> hotlinkProtection) {
            $.hotlinkProtection = hotlinkProtection;
            return this;
        }

        public Builder hotlinkProtection(String hotlinkProtection) {
            return hotlinkProtection(Output.of(hotlinkProtection));
        }

        public Builder http2(@Nullable Output<String> http2) {
            $.http2 = http2;
            return this;
        }

        public Builder http2(String http2) {
            return http2(Output.of(http2));
        }

        public Builder http3(@Nullable Output<String> http3) {
            $.http3 = http3;
            return this;
        }

        public Builder http3(String http3) {
            return http3(Output.of(http3));
        }

        /**
         * @param imageResizing Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;open&#34;.
         * 
         * @return builder
         * 
         */
        public Builder imageResizing(@Nullable Output<String> imageResizing) {
            $.imageResizing = imageResizing;
            return this;
        }

        /**
         * @param imageResizing Allowed values: &#34;on&#34;, &#34;off&#34; (default), &#34;open&#34;.
         * 
         * @return builder
         * 
         */
        public Builder imageResizing(String imageResizing) {
            return imageResizing(Output.of(imageResizing));
        }

        public Builder ipGeolocation(@Nullable Output<String> ipGeolocation) {
            $.ipGeolocation = ipGeolocation;
            return this;
        }

        public Builder ipGeolocation(String ipGeolocation) {
            return ipGeolocation(Output.of(ipGeolocation));
        }

        public Builder ipv6(@Nullable Output<String> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        public Builder ipv6(String ipv6) {
            return ipv6(Output.of(ipv6));
        }

        public Builder logToCloudflare(@Nullable Output<String> logToCloudflare) {
            $.logToCloudflare = logToCloudflare;
            return this;
        }

        public Builder logToCloudflare(String logToCloudflare) {
            return logToCloudflare(Output.of(logToCloudflare));
        }

        public Builder maxUpload(@Nullable Output<Integer> maxUpload) {
            $.maxUpload = maxUpload;
            return this;
        }

        public Builder maxUpload(Integer maxUpload) {
            return maxUpload(Output.of(maxUpload));
        }

        /**
         * @param minTlsVersion Allowed values: &#34;1.0&#34; (default), &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(@Nullable Output<String> minTlsVersion) {
            $.minTlsVersion = minTlsVersion;
            return this;
        }

        /**
         * @param minTlsVersion Allowed values: &#34;1.0&#34; (default), &#34;1.1&#34;, &#34;1.2&#34;, &#34;1.3&#34;.
         * 
         * @return builder
         * 
         */
        public Builder minTlsVersion(String minTlsVersion) {
            return minTlsVersion(Output.of(minTlsVersion));
        }

        public Builder minify(@Nullable Output<ZoneSettingsOverrideInitialSettingMinifyArgs> minify) {
            $.minify = minify;
            return this;
        }

        public Builder minify(ZoneSettingsOverrideInitialSettingMinifyArgs minify) {
            return minify(Output.of(minify));
        }

        public Builder mirage(@Nullable Output<String> mirage) {
            $.mirage = mirage;
            return this;
        }

        public Builder mirage(String mirage) {
            return mirage(Output.of(mirage));
        }

        public Builder mobileRedirect(@Nullable Output<ZoneSettingsOverrideInitialSettingMobileRedirectArgs> mobileRedirect) {
            $.mobileRedirect = mobileRedirect;
            return this;
        }

        public Builder mobileRedirect(ZoneSettingsOverrideInitialSettingMobileRedirectArgs mobileRedirect) {
            return mobileRedirect(Output.of(mobileRedirect));
        }

        public Builder opportunisticEncryption(@Nullable Output<String> opportunisticEncryption) {
            $.opportunisticEncryption = opportunisticEncryption;
            return this;
        }

        public Builder opportunisticEncryption(String opportunisticEncryption) {
            return opportunisticEncryption(Output.of(opportunisticEncryption));
        }

        public Builder opportunisticOnion(@Nullable Output<String> opportunisticOnion) {
            $.opportunisticOnion = opportunisticOnion;
            return this;
        }

        public Builder opportunisticOnion(String opportunisticOnion) {
            return opportunisticOnion(Output.of(opportunisticOnion));
        }

        public Builder orangeToOrange(@Nullable Output<String> orangeToOrange) {
            $.orangeToOrange = orangeToOrange;
            return this;
        }

        public Builder orangeToOrange(String orangeToOrange) {
            return orangeToOrange(Output.of(orangeToOrange));
        }

        public Builder originErrorPagePassThru(@Nullable Output<String> originErrorPagePassThru) {
            $.originErrorPagePassThru = originErrorPagePassThru;
            return this;
        }

        public Builder originErrorPagePassThru(String originErrorPagePassThru) {
            return originErrorPagePassThru(Output.of(originErrorPagePassThru));
        }

        /**
         * @param originMaxHttpVersion Allowed values: &#34;1&#34; (default on Enterprise), &#34;2&#34; (default)
         * 
         * @return builder
         * 
         */
        public Builder originMaxHttpVersion(@Nullable Output<String> originMaxHttpVersion) {
            $.originMaxHttpVersion = originMaxHttpVersion;
            return this;
        }

        /**
         * @param originMaxHttpVersion Allowed values: &#34;1&#34; (default on Enterprise), &#34;2&#34; (default)
         * 
         * @return builder
         * 
         */
        public Builder originMaxHttpVersion(String originMaxHttpVersion) {
            return originMaxHttpVersion(Output.of(originMaxHttpVersion));
        }

        /**
         * @param polish Allowed values: &#34;off&#34; (default), &#34;lossless&#34;, &#34;lossy&#34;.
         * 
         * @return builder
         * 
         */
        public Builder polish(@Nullable Output<String> polish) {
            $.polish = polish;
            return this;
        }

        /**
         * @param polish Allowed values: &#34;off&#34; (default), &#34;lossless&#34;, &#34;lossy&#34;.
         * 
         * @return builder
         * 
         */
        public Builder polish(String polish) {
            return polish(Output.of(polish));
        }

        public Builder prefetchPreload(@Nullable Output<String> prefetchPreload) {
            $.prefetchPreload = prefetchPreload;
            return this;
        }

        public Builder prefetchPreload(String prefetchPreload) {
            return prefetchPreload(Output.of(prefetchPreload));
        }

        public Builder privacyPass(@Nullable Output<String> privacyPass) {
            $.privacyPass = privacyPass;
            return this;
        }

        public Builder privacyPass(String privacyPass) {
            return privacyPass(Output.of(privacyPass));
        }

        public Builder proxyReadTimeout(@Nullable Output<String> proxyReadTimeout) {
            $.proxyReadTimeout = proxyReadTimeout;
            return this;
        }

        public Builder proxyReadTimeout(String proxyReadTimeout) {
            return proxyReadTimeout(Output.of(proxyReadTimeout));
        }

        /**
         * @param pseudoIpv4 Allowed values: &#34;off&#34; (default), &#34;add_header&#34;, &#34;overwrite_header&#34;.
         * 
         * @return builder
         * 
         */
        public Builder pseudoIpv4(@Nullable Output<String> pseudoIpv4) {
            $.pseudoIpv4 = pseudoIpv4;
            return this;
        }

        /**
         * @param pseudoIpv4 Allowed values: &#34;off&#34; (default), &#34;add_header&#34;, &#34;overwrite_header&#34;.
         * 
         * @return builder
         * 
         */
        public Builder pseudoIpv4(String pseudoIpv4) {
            return pseudoIpv4(Output.of(pseudoIpv4));
        }

        public Builder responseBuffering(@Nullable Output<String> responseBuffering) {
            $.responseBuffering = responseBuffering;
            return this;
        }

        public Builder responseBuffering(String responseBuffering) {
            return responseBuffering(Output.of(responseBuffering));
        }

        public Builder rocketLoader(@Nullable Output<String> rocketLoader) {
            $.rocketLoader = rocketLoader;
            return this;
        }

        public Builder rocketLoader(String rocketLoader) {
            return rocketLoader(Output.of(rocketLoader));
        }

        public Builder securityHeader(@Nullable Output<ZoneSettingsOverrideInitialSettingSecurityHeaderArgs> securityHeader) {
            $.securityHeader = securityHeader;
            return this;
        }

        public Builder securityHeader(ZoneSettingsOverrideInitialSettingSecurityHeaderArgs securityHeader) {
            return securityHeader(Output.of(securityHeader));
        }

        /**
         * @param securityLevel Allowed values: &#34;off&#34; (Enterprise only), &#34;essentially_off&#34;, &#34;low&#34;, &#34;medium&#34; (default), &#34;high&#34;, &#34;under_attack&#34;.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(@Nullable Output<String> securityLevel) {
            $.securityLevel = securityLevel;
            return this;
        }

        /**
         * @param securityLevel Allowed values: &#34;off&#34; (Enterprise only), &#34;essentially_off&#34;, &#34;low&#34;, &#34;medium&#34; (default), &#34;high&#34;, &#34;under_attack&#34;.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(String securityLevel) {
            return securityLevel(Output.of(securityLevel));
        }

        public Builder serverSideExclude(@Nullable Output<String> serverSideExclude) {
            $.serverSideExclude = serverSideExclude;
            return this;
        }

        public Builder serverSideExclude(String serverSideExclude) {
            return serverSideExclude(Output.of(serverSideExclude));
        }

        public Builder sortQueryStringForCache(@Nullable Output<String> sortQueryStringForCache) {
            $.sortQueryStringForCache = sortQueryStringForCache;
            return this;
        }

        public Builder sortQueryStringForCache(String sortQueryStringForCache) {
            return sortQueryStringForCache(Output.of(sortQueryStringForCache));
        }

        /**
         * @param ssl Allowed values: &#34;off&#34; (default), &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<String> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl Allowed values: &#34;off&#34; (default), &#34;flexible&#34;, &#34;full&#34;, &#34;strict&#34;, &#34;origin_pull&#34;.
         * 
         * @return builder
         * 
         */
        public Builder ssl(String ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * tls_1_2_only has been deprecated in favour of using `min_tls_version = &#34;1.2&#34;` instead.
         * 
         */
        @Deprecated /* tls_1_2_only has been deprecated in favour of using `min_tls_version = ""1.2""` instead. */
        public Builder tls12Only(@Nullable Output<String> tls12Only) {
            $.tls12Only = tls12Only;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * tls_1_2_only has been deprecated in favour of using `min_tls_version = &#34;1.2&#34;` instead.
         * 
         */
        @Deprecated /* tls_1_2_only has been deprecated in favour of using `min_tls_version = ""1.2""` instead. */
        public Builder tls12Only(String tls12Only) {
            return tls12Only(Output.of(tls12Only));
        }

        /**
         * @param tls13 Allowed values: &#34;off&#34; (default), &#34;on&#34;, &#34;zrt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tls13(@Nullable Output<String> tls13) {
            $.tls13 = tls13;
            return this;
        }

        /**
         * @param tls13 Allowed values: &#34;off&#34; (default), &#34;on&#34;, &#34;zrt&#34;.
         * 
         * @return builder
         * 
         */
        public Builder tls13(String tls13) {
            return tls13(Output.of(tls13));
        }

        public Builder tlsClientAuth(@Nullable Output<String> tlsClientAuth) {
            $.tlsClientAuth = tlsClientAuth;
            return this;
        }

        public Builder tlsClientAuth(String tlsClientAuth) {
            return tlsClientAuth(Output.of(tlsClientAuth));
        }

        public Builder trueClientIpHeader(@Nullable Output<String> trueClientIpHeader) {
            $.trueClientIpHeader = trueClientIpHeader;
            return this;
        }

        public Builder trueClientIpHeader(String trueClientIpHeader) {
            return trueClientIpHeader(Output.of(trueClientIpHeader));
        }

        public Builder universalSsl(@Nullable Output<String> universalSsl) {
            $.universalSsl = universalSsl;
            return this;
        }

        public Builder universalSsl(String universalSsl) {
            return universalSsl(Output.of(universalSsl));
        }

        public Builder visitorIp(@Nullable Output<String> visitorIp) {
            $.visitorIp = visitorIp;
            return this;
        }

        public Builder visitorIp(String visitorIp) {
            return visitorIp(Output.of(visitorIp));
        }

        public Builder waf(@Nullable Output<String> waf) {
            $.waf = waf;
            return this;
        }

        public Builder waf(String waf) {
            return waf(Output.of(waf));
        }

        /**
         * @param webp . Note that the value specified will be ignored unless `polish` is turned on (i.e. is &#34;lossless&#34; or &#34;lossy&#34;)
         * 
         * @return builder
         * 
         */
        public Builder webp(@Nullable Output<String> webp) {
            $.webp = webp;
            return this;
        }

        /**
         * @param webp . Note that the value specified will be ignored unless `polish` is turned on (i.e. is &#34;lossless&#34; or &#34;lossy&#34;)
         * 
         * @return builder
         * 
         */
        public Builder webp(String webp) {
            return webp(Output.of(webp));
        }

        public Builder websockets(@Nullable Output<String> websockets) {
            $.websockets = websockets;
            return this;
        }

        public Builder websockets(String websockets) {
            return websockets(Output.of(websockets));
        }

        public Builder zeroRtt(@Nullable Output<String> zeroRtt) {
            $.zeroRtt = zeroRtt;
            return this;
        }

        public Builder zeroRtt(String zeroRtt) {
            return zeroRtt(Output.of(zeroRtt));
        }

        public ZoneSettingsOverrideInitialSettingArgs build() {
            return $;
        }
    }

}
