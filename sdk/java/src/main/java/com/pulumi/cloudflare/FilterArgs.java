// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterArgs Empty = new FilterArgs();

    /**
     * The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    @Import(name="expression", required=true)
    private Output<String> expression;

    /**
     * @return The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
     * 
     */
    public Output<String> expression() {
        return this.expression;
    }

    /**
     * The unique identifier of the filter.
     * 
     */
    @Import(name="filterId")
    private @Nullable Output<String> filterId;

    /**
     * @return The unique identifier of the filter.
     * 
     */
    public Optional<Output<String>> filterId() {
        return Optional.ofNullable(this.filterId);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private FilterArgs() {}

    private FilterArgs(FilterArgs $) {
        this.expression = $.expression;
        this.filterId = $.filterId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterArgs $;

        public Builder() {
            $ = new FilterArgs();
        }

        public Builder(FilterArgs defaults) {
            $ = new FilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expression The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
         * 
         * @return builder
         * 
         */
        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param expression The filter expression. For more information, refer to [Expressions](https://developers.cloudflare.com/ruleset-engine/rules-language/expressions/).
         * 
         * @return builder
         * 
         */
        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        /**
         * @param filterId The unique identifier of the filter.
         * 
         * @return builder
         * 
         */
        public Builder filterId(@Nullable Output<String> filterId) {
            $.filterId = filterId;
            return this;
        }

        /**
         * @param filterId The unique identifier of the filter.
         * 
         * @return builder
         * 
         */
        public Builder filterId(String filterId) {
            return filterId(Output.of(filterId));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public FilterArgs build() {
            if ($.expression == null) {
                throw new MissingRequiredPropertyException("FilterArgs", "expression");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("FilterArgs", "zoneId");
            }
            return $;
        }
    }

}
