// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetLoadBalancerPoolsPoolLoadSheddingArgs;
import com.pulumi.cloudflare.inputs.GetLoadBalancerPoolsPoolOriginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetLoadBalancerPoolsPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetLoadBalancerPoolsPoolArgs Empty = new GetLoadBalancerPoolsPoolArgs();

    /**
     * List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
     * 
     */
    @Import(name="checkRegions", required=true)
    private Output<List<String>> checkRegions;

    /**
     * @return List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
     * 
     */
    public Output<List<String>> checkRegions() {
        return this.checkRegions;
    }

    /**
     * The RFC3339 timestamp of when the load balancer was created.
     * 
     */
    @Import(name="createdOn", required=true)
    private Output<String> createdOn;

    /**
     * @return The RFC3339 timestamp of when the load balancer was created.
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }

    /**
     * Brief description of the Load Balancer Pool intention.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Brief description of the Load Balancer Pool intention.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * ID for this load balancer pool.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return ID for this load balancer pool.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Latitude this pool is physically located at; used for proximity steering.
     * 
     */
    @Import(name="latitude", required=true)
    private Output<Double> latitude;

    /**
     * @return Latitude this pool is physically located at; used for proximity steering.
     * 
     */
    public Output<Double> latitude() {
        return this.latitude;
    }

    /**
     * Setting for controlling load shedding for this pool.
     * 
     */
    @Import(name="loadSheddings", required=true)
    private Output<List<GetLoadBalancerPoolsPoolLoadSheddingArgs>> loadSheddings;

    /**
     * @return Setting for controlling load shedding for this pool.
     * 
     */
    public Output<List<GetLoadBalancerPoolsPoolLoadSheddingArgs>> loadSheddings() {
        return this.loadSheddings;
    }

    /**
     * Longitude this pool is physically located at; used for proximity steering.
     * 
     */
    @Import(name="longitude", required=true)
    private Output<Double> longitude;

    /**
     * @return Longitude this pool is physically located at; used for proximity steering.
     * 
     */
    public Output<Double> longitude() {
        return this.longitude;
    }

    /**
     * Minimum number of origins that must be healthy for this pool to serve traffic.
     * 
     */
    @Import(name="minimumOrigins", required=true)
    private Output<Integer> minimumOrigins;

    /**
     * @return Minimum number of origins that must be healthy for this pool to serve traffic.
     * 
     */
    public Output<Integer> minimumOrigins() {
        return this.minimumOrigins;
    }

    /**
     * The RFC3339 timestamp of when the load balancer was last modified.
     * 
     */
    @Import(name="modifiedOn", required=true)
    private Output<String> modifiedOn;

    /**
     * @return The RFC3339 timestamp of when the load balancer was last modified.
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }

    /**
     * ID of the Monitor to use for health checking origins within this pool.
     * 
     */
    @Import(name="monitor", required=true)
    private Output<String> monitor;

    /**
     * @return ID of the Monitor to use for health checking origins within this pool.
     * 
     */
    public Output<String> monitor() {
        return this.monitor;
    }

    /**
     * Short name (tag) for the pool.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Short name (tag) for the pool.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
     * 
     */
    @Import(name="notificationEmail", required=true)
    private Output<String> notificationEmail;

    /**
     * @return Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
     * 
     */
    public Output<String> notificationEmail() {
        return this.notificationEmail;
    }

    /**
     * The list of origins within this pool.
     * 
     */
    @Import(name="origins", required=true)
    private Output<List<GetLoadBalancerPoolsPoolOriginArgs>> origins;

    /**
     * @return The list of origins within this pool.
     * 
     */
    public Output<List<GetLoadBalancerPoolsPoolOriginArgs>> origins() {
        return this.origins;
    }

    private GetLoadBalancerPoolsPoolArgs() {}

    private GetLoadBalancerPoolsPoolArgs(GetLoadBalancerPoolsPoolArgs $) {
        this.checkRegions = $.checkRegions;
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.enabled = $.enabled;
        this.id = $.id;
        this.latitude = $.latitude;
        this.loadSheddings = $.loadSheddings;
        this.longitude = $.longitude;
        this.minimumOrigins = $.minimumOrigins;
        this.modifiedOn = $.modifiedOn;
        this.monitor = $.monitor;
        this.name = $.name;
        this.notificationEmail = $.notificationEmail;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLoadBalancerPoolsPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLoadBalancerPoolsPoolArgs $;

        public Builder() {
            $ = new GetLoadBalancerPoolsPoolArgs();
        }

        public Builder(GetLoadBalancerPoolsPoolArgs defaults) {
            $ = new GetLoadBalancerPoolsPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkRegions List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(Output<List<String>> checkRegions) {
            $.checkRegions = checkRegions;
            return this;
        }

        /**
         * @param checkRegions List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(List<String> checkRegions) {
            return checkRegions(Output.of(checkRegions));
        }

        /**
         * @param checkRegions List of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://support.cloudflare.com/hc/en-us/articles/115000540888-Load-Balancing-Geographic-Regions).
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }

        /**
         * @param createdOn The RFC3339 timestamp of when the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The RFC3339 timestamp of when the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param description Brief description of the Load Balancer Pool intention.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Brief description of the Load Balancer Pool intention.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether this pool is enabled. Disabled pools will not receive traffic and are excluded from health checks.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id ID for this load balancer pool.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID for this load balancer pool.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param latitude Latitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude Latitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param loadSheddings Setting for controlling load shedding for this pool.
         * 
         * @return builder
         * 
         */
        public Builder loadSheddings(Output<List<GetLoadBalancerPoolsPoolLoadSheddingArgs>> loadSheddings) {
            $.loadSheddings = loadSheddings;
            return this;
        }

        /**
         * @param loadSheddings Setting for controlling load shedding for this pool.
         * 
         * @return builder
         * 
         */
        public Builder loadSheddings(List<GetLoadBalancerPoolsPoolLoadSheddingArgs> loadSheddings) {
            return loadSheddings(Output.of(loadSheddings));
        }

        /**
         * @param loadSheddings Setting for controlling load shedding for this pool.
         * 
         * @return builder
         * 
         */
        public Builder loadSheddings(GetLoadBalancerPoolsPoolLoadSheddingArgs... loadSheddings) {
            return loadSheddings(List.of(loadSheddings));
        }

        /**
         * @param longitude Longitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude Longitude this pool is physically located at; used for proximity steering.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param minimumOrigins Minimum number of origins that must be healthy for this pool to serve traffic.
         * 
         * @return builder
         * 
         */
        public Builder minimumOrigins(Output<Integer> minimumOrigins) {
            $.minimumOrigins = minimumOrigins;
            return this;
        }

        /**
         * @param minimumOrigins Minimum number of origins that must be healthy for this pool to serve traffic.
         * 
         * @return builder
         * 
         */
        public Builder minimumOrigins(Integer minimumOrigins) {
            return minimumOrigins(Output.of(minimumOrigins));
        }

        /**
         * @param modifiedOn The RFC3339 timestamp of when the load balancer was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn The RFC3339 timestamp of when the load balancer was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param monitor ID of the Monitor to use for health checking origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder monitor(Output<String> monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param monitor ID of the Monitor to use for health checking origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder monitor(String monitor) {
            return monitor(Output.of(monitor));
        }

        /**
         * @param name Short name (tag) for the pool.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Short name (tag) for the pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notificationEmail Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmail(Output<String> notificationEmail) {
            $.notificationEmail = notificationEmail;
            return this;
        }

        /**
         * @param notificationEmail Email address to send health status notifications to. Multiple emails are set as a comma delimited list.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmail(String notificationEmail) {
            return notificationEmail(Output.of(notificationEmail));
        }

        /**
         * @param origins The list of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder origins(Output<List<GetLoadBalancerPoolsPoolOriginArgs>> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins The list of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder origins(List<GetLoadBalancerPoolsPoolOriginArgs> origins) {
            return origins(Output.of(origins));
        }

        /**
         * @param origins The list of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder origins(GetLoadBalancerPoolsPoolOriginArgs... origins) {
            return origins(List.of(origins));
        }

        public GetLoadBalancerPoolsPoolArgs build() {
            if ($.checkRegions == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "checkRegions");
            }
            if ($.createdOn == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "createdOn");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "description");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "enabled");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "id");
            }
            if ($.latitude == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "latitude");
            }
            if ($.loadSheddings == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "loadSheddings");
            }
            if ($.longitude == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "longitude");
            }
            if ($.minimumOrigins == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "minimumOrigins");
            }
            if ($.modifiedOn == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "modifiedOn");
            }
            if ($.monitor == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "monitor");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "name");
            }
            if ($.notificationEmail == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "notificationEmail");
            }
            if ($.origins == null) {
                throw new MissingRequiredPropertyException("GetLoadBalancerPoolsPoolArgs", "origins");
            }
            return $;
        }
    }

}
