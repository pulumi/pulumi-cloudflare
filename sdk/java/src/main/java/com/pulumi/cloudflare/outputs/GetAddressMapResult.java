// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAddressMapIp;
import com.pulumi.cloudflare.outputs.GetAddressMapMembership;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAddressMapResult {
    /**
     * @return Identifier of a Cloudflare account.
     * 
     */
    private String accountId;
    /**
     * @return Identifier of an Address Map.
     * 
     */
    private @Nullable String addressMapId;
    /**
     * @return If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     * 
     */
    private Boolean canDelete;
    /**
     * @return If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     * 
     */
    private Boolean canModifyIps;
    private String createdAt;
    /**
     * @return If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    private String defaultSni;
    /**
     * @return An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    private String description;
    /**
     * @return Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return Identifier of an Address Map.
     * 
     */
    private String id;
    /**
     * @return The set of IPs on the Address Map.
     * 
     */
    private List<GetAddressMapIp> ips;
    /**
     * @return Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     * 
     */
    private List<GetAddressMapMembership> memberships;
    private String modifiedAt;

    private GetAddressMapResult() {}
    /**
     * @return Identifier of a Cloudflare account.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Identifier of an Address Map.
     * 
     */
    public Optional<String> addressMapId() {
        return Optional.ofNullable(this.addressMapId);
    }
    /**
     * @return If set to false, then the Address Map cannot be deleted via API. This is true for Cloudflare-managed maps.
     * 
     */
    public Boolean canDelete() {
        return this.canDelete;
    }
    /**
     * @return If set to false, then the IPs on the Address Map cannot be modified via the API. This is true for Cloudflare-managed maps.
     * 
     */
    public Boolean canModifyIps() {
        return this.canModifyIps;
    }
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return If you have legacy TLS clients which do not send the TLS server name indicator, then you can specify one default SNI on the map. If Cloudflare receives a TLS handshake from a client without an SNI, it will respond with the default SNI on those IPs. The default SNI can be any valid zone or subdomain owned by the account.
     * 
     */
    public String defaultSni() {
        return this.defaultSni;
    }
    /**
     * @return An optional description field which may be used to describe the types of IPs or zones on the map.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether the Address Map is enabled or not. Cloudflare&#39;s DNS will not respond with IP addresses on an Address Map until the map is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Identifier of an Address Map.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The set of IPs on the Address Map.
     * 
     */
    public List<GetAddressMapIp> ips() {
        return this.ips;
    }
    /**
     * @return Zones and Accounts which will be assigned IPs on this Address Map. A zone membership will take priority over an account membership.
     * 
     */
    public List<GetAddressMapMembership> memberships() {
        return this.memberships;
    }
    public String modifiedAt() {
        return this.modifiedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAddressMapResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private @Nullable String addressMapId;
        private Boolean canDelete;
        private Boolean canModifyIps;
        private String createdAt;
        private String defaultSni;
        private String description;
        private Boolean enabled;
        private String id;
        private List<GetAddressMapIp> ips;
        private List<GetAddressMapMembership> memberships;
        private String modifiedAt;
        public Builder() {}
        public Builder(GetAddressMapResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.addressMapId = defaults.addressMapId;
    	      this.canDelete = defaults.canDelete;
    	      this.canModifyIps = defaults.canModifyIps;
    	      this.createdAt = defaults.createdAt;
    	      this.defaultSni = defaults.defaultSni;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.ips = defaults.ips;
    	      this.memberships = defaults.memberships;
    	      this.modifiedAt = defaults.modifiedAt;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder addressMapId(@Nullable String addressMapId) {

            this.addressMapId = addressMapId;
            return this;
        }
        @CustomType.Setter
        public Builder canDelete(Boolean canDelete) {
            if (canDelete == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "canDelete");
            }
            this.canDelete = canDelete;
            return this;
        }
        @CustomType.Setter
        public Builder canModifyIps(Boolean canModifyIps) {
            if (canModifyIps == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "canModifyIps");
            }
            this.canModifyIps = canModifyIps;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder defaultSni(String defaultSni) {
            if (defaultSni == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "defaultSni");
            }
            this.defaultSni = defaultSni;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<GetAddressMapIp> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(GetAddressMapIp... ips) {
            return ips(List.of(ips));
        }
        @CustomType.Setter
        public Builder memberships(List<GetAddressMapMembership> memberships) {
            if (memberships == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "memberships");
            }
            this.memberships = memberships;
            return this;
        }
        public Builder memberships(GetAddressMapMembership... memberships) {
            return memberships(List.of(memberships));
        }
        @CustomType.Setter
        public Builder modifiedAt(String modifiedAt) {
            if (modifiedAt == null) {
              throw new MissingRequiredPropertyException("GetAddressMapResult", "modifiedAt");
            }
            this.modifiedAt = modifiedAt;
            return this;
        }
        public GetAddressMapResult build() {
            final var _resultValue = new GetAddressMapResult();
            _resultValue.accountId = accountId;
            _resultValue.addressMapId = addressMapId;
            _resultValue.canDelete = canDelete;
            _resultValue.canModifyIps = canModifyIps;
            _resultValue.createdAt = createdAt;
            _resultValue.defaultSni = defaultSni;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.ips = ips;
            _resultValue.memberships = memberships;
            _resultValue.modifiedAt = modifiedAt;
            return _resultValue;
        }
    }
}
