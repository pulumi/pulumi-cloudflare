// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class MagicNetworkMonitoringConfigurationWarpDeviceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicNetworkMonitoringConfigurationWarpDeviceArgs Empty = new MagicNetworkMonitoringConfigurationWarpDeviceArgs();

    /**
     * Unique identifier for the warp device.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique identifier for the warp device.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Name of the warp device.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the warp device.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
     * 
     */
    @Import(name="routerIp", required=true)
    private Output<String> routerIp;

    /**
     * @return IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
     * 
     */
    public Output<String> routerIp() {
        return this.routerIp;
    }

    private MagicNetworkMonitoringConfigurationWarpDeviceArgs() {}

    private MagicNetworkMonitoringConfigurationWarpDeviceArgs(MagicNetworkMonitoringConfigurationWarpDeviceArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.routerIp = $.routerIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicNetworkMonitoringConfigurationWarpDeviceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicNetworkMonitoringConfigurationWarpDeviceArgs $;

        public Builder() {
            $ = new MagicNetworkMonitoringConfigurationWarpDeviceArgs();
        }

        public Builder(MagicNetworkMonitoringConfigurationWarpDeviceArgs defaults) {
            $ = new MagicNetworkMonitoringConfigurationWarpDeviceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Unique identifier for the warp device.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for the warp device.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the warp device.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the warp device.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param routerIp IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
         * 
         * @return builder
         * 
         */
        public Builder routerIp(Output<String> routerIp) {
            $.routerIp = routerIp;
            return this;
        }

        /**
         * @param routerIp IPv4 CIDR of the router sourcing flow data associated with this warp device. Only /32 addresses are currently supported.
         * 
         * @return builder
         * 
         */
        public Builder routerIp(String routerIp) {
            return routerIp(Output.of(routerIp));
        }

        public MagicNetworkMonitoringConfigurationWarpDeviceArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("MagicNetworkMonitoringConfigurationWarpDeviceArgs", "id");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MagicNetworkMonitoringConfigurationWarpDeviceArgs", "name");
            }
            if ($.routerIp == null) {
                throw new MissingRequiredPropertyException("MagicNetworkMonitoringConfigurationWarpDeviceArgs", "routerIp");
            }
            return $;
        }
    }

}
