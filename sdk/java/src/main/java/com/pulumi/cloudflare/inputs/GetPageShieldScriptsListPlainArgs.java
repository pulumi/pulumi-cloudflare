// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPageShieldScriptsListPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPageShieldScriptsListPlainArgs Empty = new GetPageShieldScriptsListPlainArgs();

    /**
     * The direction used to sort returned scripts.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    /**
     * @return The direction used to sort returned scripts.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
     * 
     */
    @Import(name="excludeCdnCgi")
    private @Nullable Boolean excludeCdnCgi;

    /**
     * @return When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
     * 
     */
    public Optional<Boolean> excludeCdnCgi() {
        return Optional.ofNullable(this.excludeCdnCgi);
    }

    /**
     * When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
     * content matches and they share the same url host and zone hostname. In such case, we return the most
     * recent script for the URL host and zone hostname combination.
     * 
     */
    @Import(name="excludeDuplicates")
    private @Nullable Boolean excludeDuplicates;

    /**
     * @return When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
     * content matches and they share the same url host and zone hostname. In such case, we return the most
     * recent script for the URL host and zone hostname combination.
     * 
     */
    public Optional<Boolean> excludeDuplicates() {
        return Optional.ofNullable(this.excludeDuplicates);
    }

    /**
     * Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    @Import(name="excludeUrls")
    private @Nullable String excludeUrls;

    /**
     * @return Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
     * 
     */
    public Optional<String> excludeUrls() {
        return Optional.ofNullable(this.excludeUrls);
    }

    /**
     * Export the list of scripts as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    @Import(name="export")
    private @Nullable String export;

    /**
     * @return Export the list of scripts as a file.
     * Available values: &#34;csv&#34;.
     * 
     */
    public Optional<String> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * Includes scripts that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    @Import(name="hosts")
    private @Nullable String hosts;

    /**
     * @return Includes scripts that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    public Optional<String> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    @Import(name="orderBy")
    private @Nullable String orderBy;

    public Optional<String> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    @Import(name="page")
    private @Nullable String page;

    public Optional<String> page() {
        return Optional.ofNullable(this.page);
    }

    @Import(name="pageUrl")
    private @Nullable String pageUrl;

    public Optional<String> pageUrl() {
        return Optional.ofNullable(this.pageUrl);
    }

    @Import(name="perPage")
    private @Nullable Double perPage;

    public Optional<Double> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    @Import(name="prioritizeMalicious")
    private @Nullable Boolean prioritizeMalicious;

    public Optional<Boolean> prioritizeMalicious() {
        return Optional.ofNullable(this.prioritizeMalicious);
    }

    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="urls")
    private @Nullable String urls;

    public Optional<String> urls() {
        return Optional.ofNullable(this.urls);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetPageShieldScriptsListPlainArgs() {}

    private GetPageShieldScriptsListPlainArgs(GetPageShieldScriptsListPlainArgs $) {
        this.direction = $.direction;
        this.excludeCdnCgi = $.excludeCdnCgi;
        this.excludeDuplicates = $.excludeDuplicates;
        this.excludeUrls = $.excludeUrls;
        this.export = $.export;
        this.hosts = $.hosts;
        this.maxItems = $.maxItems;
        this.orderBy = $.orderBy;
        this.page = $.page;
        this.pageUrl = $.pageUrl;
        this.perPage = $.perPage;
        this.prioritizeMalicious = $.prioritizeMalicious;
        this.status = $.status;
        this.urls = $.urls;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPageShieldScriptsListPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPageShieldScriptsListPlainArgs $;

        public Builder() {
            $ = new GetPageShieldScriptsListPlainArgs();
        }

        public Builder(GetPageShieldScriptsListPlainArgs defaults) {
            $ = new GetPageShieldScriptsListPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction used to sort returned scripts.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param excludeCdnCgi When true, excludes scripts seen in a `/cdn-cgi` path from the returned scripts. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder excludeCdnCgi(@Nullable Boolean excludeCdnCgi) {
            $.excludeCdnCgi = excludeCdnCgi;
            return this;
        }

        /**
         * @param excludeDuplicates When true, excludes duplicate scripts. We consider a script duplicate of another if their javascript
         * content matches and they share the same url host and zone hostname. In such case, we return the most
         * recent script for the URL host and zone hostname combination.
         * 
         * @return builder
         * 
         */
        public Builder excludeDuplicates(@Nullable Boolean excludeDuplicates) {
            $.excludeDuplicates = excludeDuplicates;
            return this;
        }

        /**
         * @param excludeUrls Excludes scripts whose URL contains one of the URL-encoded URLs separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder excludeUrls(@Nullable String excludeUrls) {
            $.excludeUrls = excludeUrls;
            return this;
        }

        /**
         * @param export Export the list of scripts as a file.
         * Available values: &#34;csv&#34;.
         * 
         * @return builder
         * 
         */
        public Builder export(@Nullable String export) {
            $.export = export;
            return this;
        }

        /**
         * @param hosts Includes scripts that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable String hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        public Builder orderBy(@Nullable String orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public Builder page(@Nullable String page) {
            $.page = page;
            return this;
        }

        public Builder pageUrl(@Nullable String pageUrl) {
            $.pageUrl = pageUrl;
            return this;
        }

        public Builder perPage(@Nullable Double perPage) {
            $.perPage = perPage;
            return this;
        }

        public Builder prioritizeMalicious(@Nullable Boolean prioritizeMalicious) {
            $.prioritizeMalicious = prioritizeMalicious;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder urls(@Nullable String urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetPageShieldScriptsListPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetPageShieldScriptsListPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
