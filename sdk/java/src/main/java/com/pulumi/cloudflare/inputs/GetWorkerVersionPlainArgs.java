// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetWorkerVersionPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetWorkerVersionPlainArgs Empty = new GetWorkerVersionPlainArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private String accountId;

    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Whether to include the `modules` property of the version in the response, which contains code and sourcemap content and may add several megabytes to the response size.
     * Available values: &#34;modules&#34;.
     * 
     */
    @Import(name="include")
    private @Nullable String include;

    /**
     * @return Whether to include the `modules` property of the version in the response, which contains code and sourcemap content and may add several megabytes to the response size.
     * Available values: &#34;modules&#34;.
     * 
     */
    public Optional<String> include() {
        return Optional.ofNullable(this.include);
    }

    /**
     * Identifier for the version, which can be ID or the literal &#34;latest&#34; to operate on the most recently created version.
     * 
     */
    @Import(name="versionId")
    private @Nullable String versionId;

    /**
     * @return Identifier for the version, which can be ID or the literal &#34;latest&#34; to operate on the most recently created version.
     * 
     */
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    /**
     * Identifier for the Worker, which can be ID or name.
     * 
     */
    @Import(name="workerId", required=true)
    private String workerId;

    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public String workerId() {
        return this.workerId;
    }

    private GetWorkerVersionPlainArgs() {}

    private GetWorkerVersionPlainArgs(GetWorkerVersionPlainArgs $) {
        this.accountId = $.accountId;
        this.include = $.include;
        this.versionId = $.versionId;
        this.workerId = $.workerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetWorkerVersionPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetWorkerVersionPlainArgs $;

        public Builder() {
            $ = new GetWorkerVersionPlainArgs();
        }

        public Builder(GetWorkerVersionPlainArgs defaults) {
            $ = new GetWorkerVersionPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param include Whether to include the `modules` property of the version in the response, which contains code and sourcemap content and may add several megabytes to the response size.
         * Available values: &#34;modules&#34;.
         * 
         * @return builder
         * 
         */
        public Builder include(@Nullable String include) {
            $.include = include;
            return this;
        }

        /**
         * @param versionId Identifier for the version, which can be ID or the literal &#34;latest&#34; to operate on the most recently created version.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable String versionId) {
            $.versionId = versionId;
            return this;
        }

        /**
         * @param workerId Identifier for the Worker, which can be ID or name.
         * 
         * @return builder
         * 
         */
        public Builder workerId(String workerId) {
            $.workerId = workerId;
            return this;
        }

        public GetWorkerVersionPlainArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetWorkerVersionPlainArgs", "accountId");
            }
            if ($.workerId == null) {
                throw new MissingRequiredPropertyException("GetWorkerVersionPlainArgs", "workerId");
            }
            return $;
        }
    }

}
