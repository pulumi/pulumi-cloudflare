// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AuthenticatedOriginPullsConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AuthenticatedOriginPullsState extends com.pulumi.resources.ResourceArgs {

    public static final AuthenticatedOriginPullsState Empty = new AuthenticatedOriginPullsState();

    /**
     * Identifier.
     * 
     */
    @Import(name="certId")
    private @Nullable Output<String> certId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> certId() {
        return Optional.ofNullable(this.certId);
    }

    /**
     * Status of the certificate or the association.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    @Import(name="certStatus")
    private @Nullable Output<String> certStatus;

    /**
     * @return Status of the certificate or the association.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    public Optional<Output<String>> certStatus() {
        return Optional.ofNullable(this.certStatus);
    }

    /**
     * The time when the certificate was updated.
     * 
     */
    @Import(name="certUpdatedAt")
    private @Nullable Output<String> certUpdatedAt;

    /**
     * @return The time when the certificate was updated.
     * 
     */
    public Optional<Output<String>> certUpdatedAt() {
        return Optional.ofNullable(this.certUpdatedAt);
    }

    /**
     * The time when the certificate was uploaded.
     * 
     */
    @Import(name="certUploadedOn")
    private @Nullable Output<String> certUploadedOn;

    /**
     * @return The time when the certificate was uploaded.
     * 
     */
    public Optional<Output<String>> certUploadedOn() {
        return Optional.ofNullable(this.certUploadedOn);
    }

    /**
     * The hostname certificate.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    /**
     * @return The hostname certificate.
     * 
     */
    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="configs")
    private @Nullable Output<List<AuthenticatedOriginPullsConfigArgs>> configs;

    public Optional<Output<List<AuthenticatedOriginPullsConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * The time when the certificate was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The time when the certificate was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The date when the certificate expires.
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    /**
     * @return The date when the certificate expires.
     * 
     */
    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * The hostname on the origin for which the client certificate uploaded will be used.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname on the origin for which the client certificate uploaded will be used.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The certificate authority that issued the certificate.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * The hostname certificate&#39;s private key.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The hostname certificate&#39;s private key.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The serial number on the uploaded certificate.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<String> serialNumber;

    /**
     * @return The serial number on the uploaded certificate.
     * 
     */
    public Optional<Output<String>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * The type of hash used for the certificate.
     * 
     */
    @Import(name="signature")
    private @Nullable Output<String> signature;

    /**
     * @return The type of hash used for the certificate.
     * 
     */
    public Optional<Output<String>> signature() {
        return Optional.ofNullable(this.signature);
    }

    /**
     * Status of the certificate or the association.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the certificate or the association.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The time when the certificate was updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The time when the certificate was updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private AuthenticatedOriginPullsState() {}

    private AuthenticatedOriginPullsState(AuthenticatedOriginPullsState $) {
        this.certId = $.certId;
        this.certStatus = $.certStatus;
        this.certUpdatedAt = $.certUpdatedAt;
        this.certUploadedOn = $.certUploadedOn;
        this.certificate = $.certificate;
        this.configs = $.configs;
        this.createdAt = $.createdAt;
        this.enabled = $.enabled;
        this.expiresOn = $.expiresOn;
        this.hostname = $.hostname;
        this.issuer = $.issuer;
        this.privateKey = $.privateKey;
        this.serialNumber = $.serialNumber;
        this.signature = $.signature;
        this.status = $.status;
        this.updatedAt = $.updatedAt;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthenticatedOriginPullsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthenticatedOriginPullsState $;

        public Builder() {
            $ = new AuthenticatedOriginPullsState();
        }

        public Builder(AuthenticatedOriginPullsState defaults) {
            $ = new AuthenticatedOriginPullsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder certId(@Nullable Output<String> certId) {
            $.certId = certId;
            return this;
        }

        /**
         * @param certId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder certId(String certId) {
            return certId(Output.of(certId));
        }

        /**
         * @param certStatus Status of the certificate or the association.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certStatus(@Nullable Output<String> certStatus) {
            $.certStatus = certStatus;
            return this;
        }

        /**
         * @param certStatus Status of the certificate or the association.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certStatus(String certStatus) {
            return certStatus(Output.of(certStatus));
        }

        /**
         * @param certUpdatedAt The time when the certificate was updated.
         * 
         * @return builder
         * 
         */
        public Builder certUpdatedAt(@Nullable Output<String> certUpdatedAt) {
            $.certUpdatedAt = certUpdatedAt;
            return this;
        }

        /**
         * @param certUpdatedAt The time when the certificate was updated.
         * 
         * @return builder
         * 
         */
        public Builder certUpdatedAt(String certUpdatedAt) {
            return certUpdatedAt(Output.of(certUpdatedAt));
        }

        /**
         * @param certUploadedOn The time when the certificate was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder certUploadedOn(@Nullable Output<String> certUploadedOn) {
            $.certUploadedOn = certUploadedOn;
            return this;
        }

        /**
         * @param certUploadedOn The time when the certificate was uploaded.
         * 
         * @return builder
         * 
         */
        public Builder certUploadedOn(String certUploadedOn) {
            return certUploadedOn(Output.of(certUploadedOn));
        }

        /**
         * @param certificate The hostname certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The hostname certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder configs(@Nullable Output<List<AuthenticatedOriginPullsConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        public Builder configs(List<AuthenticatedOriginPullsConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        public Builder configs(AuthenticatedOriginPullsConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param createdAt The time when the certificate was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The time when the certificate was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param enabled Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether hostname-level authenticated origin pulls is enabled. A null value voids the association.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param expiresOn The date when the certificate expires.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        /**
         * @param expiresOn The date when the certificate expires.
         * 
         * @return builder
         * 
         */
        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        /**
         * @param hostname The hostname on the origin for which the client certificate uploaded will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname on the origin for which the client certificate uploaded will be used.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param issuer The certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param privateKey The hostname certificate&#39;s private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The hostname certificate&#39;s private key.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param serialNumber The serial number on the uploaded certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<String> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber The serial number on the uploaded certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param signature The type of hash used for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder signature(@Nullable Output<String> signature) {
            $.signature = signature;
            return this;
        }

        /**
         * @param signature The type of hash used for the certificate.
         * 
         * @return builder
         * 
         */
        public Builder signature(String signature) {
            return signature(Output.of(signature));
        }

        /**
         * @param status Status of the certificate or the association.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the certificate or the association.
         * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatedAt The time when the certificate was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The time when the certificate was updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public AuthenticatedOriginPullsState build() {
            return $;
        }
    }

}
