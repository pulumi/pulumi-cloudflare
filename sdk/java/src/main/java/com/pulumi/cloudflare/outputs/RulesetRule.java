// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.RulesetRuleActionParameters;
import com.pulumi.cloudflare.outputs.RulesetRuleExposedCredentialCheck;
import com.pulumi.cloudflare.outputs.RulesetRuleLogging;
import com.pulumi.cloudflare.outputs.RulesetRuleRatelimit;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRule {
    /**
     * @return The action to perform when the rule matches.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;ddos*dynamic&#34;, &#34;execute&#34;, &#34;force*connection*close&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;log*custom*field&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*cache*settings&#34;, &#34;set*config&#34;, &#34;skip&#34;.
     * 
     */
    private String action;
    /**
     * @return The parameters configuring the rule&#39;s action.
     * 
     */
    private @Nullable RulesetRuleActionParameters actionParameters;
    /**
     * @return An informative description of the rule.
     * 
     */
    private @Nullable String description;
    /**
     * @return Whether the rule should be executed.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Configuration for exposed credential checking.
     * 
     */
    private @Nullable RulesetRuleExposedCredentialCheck exposedCredentialCheck;
    /**
     * @return The expression defining which traffic will match the rule.
     * 
     */
    private String expression;
    /**
     * @return The unique ID of the rule.
     * 
     */
    private @Nullable String id;
    /**
     * @return An object configuring the rule&#39;s logging behavior.
     * 
     */
    private @Nullable RulesetRuleLogging logging;
    /**
     * @return An object configuring the rule&#39;s rate limit behavior.
     * 
     */
    private @Nullable RulesetRuleRatelimit ratelimit;
    /**
     * @return The reference of the rule (the rule&#39;s ID by default).
     * 
     */
    private @Nullable String ref;

    private RulesetRule() {}
    /**
     * @return The action to perform when the rule matches.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;compress*response&#34;, &#34;ddos*dynamic&#34;, &#34;execute&#34;, &#34;force*connection*close&#34;, &#34;js*challenge&#34;, &#34;log&#34;, &#34;log*custom*field&#34;, &#34;managed*challenge&#34;, &#34;redirect&#34;, &#34;rewrite&#34;, &#34;route&#34;, &#34;score&#34;, &#34;serve*error&#34;, &#34;set*cache*settings&#34;, &#34;set*config&#34;, &#34;skip&#34;.
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return The parameters configuring the rule&#39;s action.
     * 
     */
    public Optional<RulesetRuleActionParameters> actionParameters() {
        return Optional.ofNullable(this.actionParameters);
    }
    /**
     * @return An informative description of the rule.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Whether the rule should be executed.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Configuration for exposed credential checking.
     * 
     */
    public Optional<RulesetRuleExposedCredentialCheck> exposedCredentialCheck() {
        return Optional.ofNullable(this.exposedCredentialCheck);
    }
    /**
     * @return The expression defining which traffic will match the rule.
     * 
     */
    public String expression() {
        return this.expression;
    }
    /**
     * @return The unique ID of the rule.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return An object configuring the rule&#39;s logging behavior.
     * 
     */
    public Optional<RulesetRuleLogging> logging() {
        return Optional.ofNullable(this.logging);
    }
    /**
     * @return An object configuring the rule&#39;s rate limit behavior.
     * 
     */
    public Optional<RulesetRuleRatelimit> ratelimit() {
        return Optional.ofNullable(this.ratelimit);
    }
    /**
     * @return The reference of the rule (the rule&#39;s ID by default).
     * 
     */
    public Optional<String> ref() {
        return Optional.ofNullable(this.ref);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable RulesetRuleActionParameters actionParameters;
        private @Nullable String description;
        private @Nullable Boolean enabled;
        private @Nullable RulesetRuleExposedCredentialCheck exposedCredentialCheck;
        private String expression;
        private @Nullable String id;
        private @Nullable RulesetRuleLogging logging;
        private @Nullable RulesetRuleRatelimit ratelimit;
        private @Nullable String ref;
        public Builder() {}
        public Builder(RulesetRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.actionParameters = defaults.actionParameters;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.exposedCredentialCheck = defaults.exposedCredentialCheck;
    	      this.expression = defaults.expression;
    	      this.id = defaults.id;
    	      this.logging = defaults.logging;
    	      this.ratelimit = defaults.ratelimit;
    	      this.ref = defaults.ref;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("RulesetRule", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder actionParameters(@Nullable RulesetRuleActionParameters actionParameters) {

            this.actionParameters = actionParameters;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder exposedCredentialCheck(@Nullable RulesetRuleExposedCredentialCheck exposedCredentialCheck) {

            this.exposedCredentialCheck = exposedCredentialCheck;
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("RulesetRule", "expression");
            }
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logging(@Nullable RulesetRuleLogging logging) {

            this.logging = logging;
            return this;
        }
        @CustomType.Setter
        public Builder ratelimit(@Nullable RulesetRuleRatelimit ratelimit) {

            this.ratelimit = ratelimit;
            return this;
        }
        @CustomType.Setter
        public Builder ref(@Nullable String ref) {

            this.ref = ref;
            return this;
        }
        public RulesetRule build() {
            final var _resultValue = new RulesetRule();
            _resultValue.action = action;
            _resultValue.actionParameters = actionParameters;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.exposedCredentialCheck = exposedCredentialCheck;
            _resultValue.expression = expression;
            _resultValue.id = id;
            _resultValue.logging = logging;
            _resultValue.ratelimit = ratelimit;
            _resultValue.ref = ref;
            return _resultValue;
        }
    }
}
