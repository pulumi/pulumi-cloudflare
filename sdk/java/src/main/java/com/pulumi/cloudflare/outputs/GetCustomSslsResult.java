// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetCustomSslsResultGeoRestrictions;
import com.pulumi.cloudflare.outputs.GetCustomSslsResultKeylessServer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCustomSslsResult {
    /**
     * @return A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
     * 
     */
    private String bundleMethod;
    /**
     * @return When the certificate from the authority expires.
     * 
     */
    private String expiresOn;
    /**
     * @return Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance.
     * 
     */
    private GetCustomSslsResultGeoRestrictions geoRestrictions;
    private List<String> hosts;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    private String issuer;
    private GetCustomSslsResultKeylessServer keylessServer;
    /**
     * @return When the certificate was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO*3166-1*alpha-2#Officially*assigned*code_elements) can be chosen, such as &#39;country: IN&#39;, as well as &#39;region: EU&#39; which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
     * 
     */
    private String policy;
    /**
     * @return The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping &#39;legacy*custom&#39; certificates, but &#39;legacy*custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
     * 
     */
    private Double priority;
    /**
     * @return The type of hash used for the certificate.
     * 
     */
    private String signature;
    /**
     * @return Status of the zone&#39;s custom SSL.
     * 
     */
    private String status;
    /**
     * @return When the certificate was uploaded to Cloudflare.
     * 
     */
    private String uploadedOn;
    /**
     * @return Identifier
     * 
     */
    private String zoneId;

    private GetCustomSslsResult() {}
    /**
     * @return A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it.
     * 
     */
    public String bundleMethod() {
        return this.bundleMethod;
    }
    /**
     * @return When the certificate from the authority expires.
     * 
     */
    public String expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return Specify the region where your private key can be held locally for optimal TLS performance. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Options allow distribution to only to U.S. data centers, only to E.U. data centers, or only to highest security data centers. Default distribution is to all Cloudflare datacenters, for optimal performance.
     * 
     */
    public GetCustomSslsResultGeoRestrictions geoRestrictions() {
        return this.geoRestrictions;
    }
    public List<String> hosts() {
        return this.hosts;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    public GetCustomSslsResultKeylessServer keylessServer() {
        return this.keylessServer;
    }
    /**
     * @return When the certificate was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Specify the policy that determines the region where your private key will be held locally. HTTPS connections to any excluded data center will still be fully encrypted, but will incur some latency while Keyless SSL is used to complete the handshake with the nearest allowed data center. Any combination of countries, specified by their two letter country code (https://en.wikipedia.org/wiki/ISO*3166-1*alpha-2#Officially*assigned*code_elements) can be chosen, such as &#39;country: IN&#39;, as well as &#39;region: EU&#39; which refers to the EU region. If there are too few data centers satisfying the policy, it will be rejected.
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return The order/priority in which the certificate will be used in a request. The higher priority will break ties across overlapping &#39;legacy*custom&#39; certificates, but &#39;legacy*custom&#39; certificates will always supercede &#39;sni_custom&#39; certificates.
     * 
     */
    public Double priority() {
        return this.priority;
    }
    /**
     * @return The type of hash used for the certificate.
     * 
     */
    public String signature() {
        return this.signature;
    }
    /**
     * @return Status of the zone&#39;s custom SSL.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return When the certificate was uploaded to Cloudflare.
     * 
     */
    public String uploadedOn() {
        return this.uploadedOn;
    }
    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomSslsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bundleMethod;
        private String expiresOn;
        private GetCustomSslsResultGeoRestrictions geoRestrictions;
        private List<String> hosts;
        private String id;
        private String issuer;
        private GetCustomSslsResultKeylessServer keylessServer;
        private String modifiedOn;
        private String policy;
        private Double priority;
        private String signature;
        private String status;
        private String uploadedOn;
        private String zoneId;
        public Builder() {}
        public Builder(GetCustomSslsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bundleMethod = defaults.bundleMethod;
    	      this.expiresOn = defaults.expiresOn;
    	      this.geoRestrictions = defaults.geoRestrictions;
    	      this.hosts = defaults.hosts;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.keylessServer = defaults.keylessServer;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.policy = defaults.policy;
    	      this.priority = defaults.priority;
    	      this.signature = defaults.signature;
    	      this.status = defaults.status;
    	      this.uploadedOn = defaults.uploadedOn;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder bundleMethod(String bundleMethod) {
            if (bundleMethod == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "bundleMethod");
            }
            this.bundleMethod = bundleMethod;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(String expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder geoRestrictions(GetCustomSslsResultGeoRestrictions geoRestrictions) {
            if (geoRestrictions == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "geoRestrictions");
            }
            this.geoRestrictions = geoRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            if (hosts == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "hosts");
            }
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder keylessServer(GetCustomSslsResultKeylessServer keylessServer) {
            if (keylessServer == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "keylessServer");
            }
            this.keylessServer = keylessServer;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Double priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder signature(String signature) {
            if (signature == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "signature");
            }
            this.signature = signature;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uploadedOn(String uploadedOn) {
            if (uploadedOn == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "uploadedOn");
            }
            this.uploadedOn = uploadedOn;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetCustomSslsResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetCustomSslsResult build() {
            final var _resultValue = new GetCustomSslsResult();
            _resultValue.bundleMethod = bundleMethod;
            _resultValue.expiresOn = expiresOn;
            _resultValue.geoRestrictions = geoRestrictions;
            _resultValue.hosts = hosts;
            _resultValue.id = id;
            _resultValue.issuer = issuer;
            _resultValue.keylessServer = keylessServer;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.policy = policy;
            _resultValue.priority = priority;
            _resultValue.signature = signature;
            _resultValue.status = status;
            _resultValue.uploadedOn = uploadedOn;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
