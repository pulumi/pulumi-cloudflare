// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicNetworkMonitoringRuleState extends com.pulumi.resources.ResourceArgs {

    public static final MagicNetworkMonitoringRuleState Empty = new MagicNetworkMonitoringRuleState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     * 
     */
    @Import(name="automaticAdvertisement")
    private @Nullable Output<Boolean> automaticAdvertisement;

    /**
     * @return Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
     * 
     */
    public Optional<Output<Boolean>> automaticAdvertisement() {
        return Optional.ofNullable(this.automaticAdvertisement);
    }

    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Double> bandwidth;

    /**
     * @return The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    public Optional<Output<Double>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    @Import(name="bandwidthThreshold")
    private @Nullable Output<Double> bandwidthThreshold;

    /**
     * @return The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    public Optional<Output<Double>> bandwidthThreshold() {
        return Optional.ofNullable(this.bandwidthThreshold);
    }

    /**
     * The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;].
     * Available values: &#34;1m&#34;, &#34;5m&#34;, &#34;10m&#34;, &#34;15m&#34;, &#34;20m&#34;, &#34;30m&#34;, &#34;45m&#34;, &#34;60m&#34;.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;].
     * Available values: &#34;1m&#34;, &#34;5m&#34;, &#34;10m&#34;, &#34;15m&#34;, &#34;20m&#34;, &#34;30m&#34;, &#34;45m&#34;, &#34;60m&#34;.
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    @Import(name="packetThreshold")
    private @Nullable Output<Double> packetThreshold;

    /**
     * @return The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
     * 
     */
    public Optional<Output<Double>> packetThreshold() {
        return Optional.ofNullable(this.packetThreshold);
    }

    /**
     * Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.
     * Available values: &#34;exact&#34;, &#34;subnet&#34;, &#34;supernet&#34;.
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<String> prefixMatch;

    /**
     * @return Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.
     * Available values: &#34;exact&#34;, &#34;subnet&#34;, &#34;supernet&#34;.
     * 
     */
    public Optional<Output<String>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    @Import(name="prefixes")
    private @Nullable Output<List<String>> prefixes;

    public Optional<Output<List<String>>> prefixes() {
        return Optional.ofNullable(this.prefixes);
    }

    /**
     * MNM rule type.
     * Available values: &#34;threshold&#34;, &#34;zscore&#34;, &#34;advanced_ddos&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return MNM rule type.
     * Available values: &#34;threshold&#34;, &#34;zscore&#34;, &#34;advanced_ddos&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Level of sensitivity set for zscore rules.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;.
     * 
     */
    @Import(name="zscoreSensitivity")
    private @Nullable Output<String> zscoreSensitivity;

    /**
     * @return Level of sensitivity set for zscore rules.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;.
     * 
     */
    public Optional<Output<String>> zscoreSensitivity() {
        return Optional.ofNullable(this.zscoreSensitivity);
    }

    /**
     * Target of the zscore rule analysis.
     * Available values: &#34;bits&#34;, &#34;packets&#34;.
     * 
     */
    @Import(name="zscoreTarget")
    private @Nullable Output<String> zscoreTarget;

    /**
     * @return Target of the zscore rule analysis.
     * Available values: &#34;bits&#34;, &#34;packets&#34;.
     * 
     */
    public Optional<Output<String>> zscoreTarget() {
        return Optional.ofNullable(this.zscoreTarget);
    }

    private MagicNetworkMonitoringRuleState() {}

    private MagicNetworkMonitoringRuleState(MagicNetworkMonitoringRuleState $) {
        this.accountId = $.accountId;
        this.automaticAdvertisement = $.automaticAdvertisement;
        this.bandwidth = $.bandwidth;
        this.bandwidthThreshold = $.bandwidthThreshold;
        this.duration = $.duration;
        this.name = $.name;
        this.packetThreshold = $.packetThreshold;
        this.prefixMatch = $.prefixMatch;
        this.prefixes = $.prefixes;
        this.type = $.type;
        this.zscoreSensitivity = $.zscoreSensitivity;
        this.zscoreTarget = $.zscoreTarget;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicNetworkMonitoringRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicNetworkMonitoringRuleState $;

        public Builder() {
            $ = new MagicNetworkMonitoringRuleState();
        }

        public Builder(MagicNetworkMonitoringRuleState defaults) {
            $ = new MagicNetworkMonitoringRuleState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param automaticAdvertisement Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
         * 
         * @return builder
         * 
         */
        public Builder automaticAdvertisement(@Nullable Output<Boolean> automaticAdvertisement) {
            $.automaticAdvertisement = automaticAdvertisement;
            return this;
        }

        /**
         * @param automaticAdvertisement Toggle on if you would like Cloudflare to automatically advertise the IP Prefixes within the rule via Magic Transit when the rule is triggered. Only available for users of Magic Transit.
         * 
         * @return builder
         * 
         */
        public Builder automaticAdvertisement(Boolean automaticAdvertisement) {
            return automaticAdvertisement(Output.of(automaticAdvertisement));
        }

        /**
         * @param bandwidth The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Double> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Double bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bandwidthThreshold The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthThreshold(@Nullable Output<Double> bandwidthThreshold) {
            $.bandwidthThreshold = bandwidthThreshold;
            return this;
        }

        /**
         * @param bandwidthThreshold The number of bits per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder bandwidthThreshold(Double bandwidthThreshold) {
            return bandwidthThreshold(Output.of(bandwidthThreshold));
        }

        /**
         * @param duration The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;].
         * Available values: &#34;1m&#34;, &#34;5m&#34;, &#34;10m&#34;, &#34;15m&#34;, &#34;20m&#34;, &#34;30m&#34;, &#34;45m&#34;, &#34;60m&#34;.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The amount of time that the rule threshold must be exceeded to send an alert notification. The final value must be equivalent to one of the following 8 values [&#34;1m&#34;,&#34;5m&#34;,&#34;10m&#34;,&#34;15m&#34;,&#34;20m&#34;,&#34;30m&#34;,&#34;45m&#34;,&#34;60m&#34;].
         * Available values: &#34;1m&#34;, &#34;5m&#34;, &#34;10m&#34;, &#34;15m&#34;, &#34;20m&#34;, &#34;30m&#34;, &#34;45m&#34;, &#34;60m&#34;.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param name The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule. Must be unique. Supports characters A-Z, a-z, 0-9, underscore (_), dash (-), period (.), and tilde (~). You can’t have a space in the rule name. Max 256 characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param packetThreshold The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder packetThreshold(@Nullable Output<Double> packetThreshold) {
            $.packetThreshold = packetThreshold;
            return this;
        }

        /**
         * @param packetThreshold The number of packets per second for the rule. When this value is exceeded for the set duration, an alert notification is sent. Minimum of 1 and no maximum.
         * 
         * @return builder
         * 
         */
        public Builder packetThreshold(Double packetThreshold) {
            return packetThreshold(Output.of(packetThreshold));
        }

        /**
         * @param prefixMatch Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.
         * Available values: &#34;exact&#34;, &#34;subnet&#34;, &#34;supernet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<String> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch Prefix match type to be applied for a prefix auto advertisement when using an advanced_ddos rule.
         * Available values: &#34;exact&#34;, &#34;subnet&#34;, &#34;supernet&#34;.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        public Builder prefixes(@Nullable Output<List<String>> prefixes) {
            $.prefixes = prefixes;
            return this;
        }

        public Builder prefixes(List<String> prefixes) {
            return prefixes(Output.of(prefixes));
        }

        public Builder prefixes(String... prefixes) {
            return prefixes(List.of(prefixes));
        }

        /**
         * @param type MNM rule type.
         * Available values: &#34;threshold&#34;, &#34;zscore&#34;, &#34;advanced_ddos&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type MNM rule type.
         * Available values: &#34;threshold&#34;, &#34;zscore&#34;, &#34;advanced_ddos&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zscoreSensitivity Level of sensitivity set for zscore rules.
         * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;.
         * 
         * @return builder
         * 
         */
        public Builder zscoreSensitivity(@Nullable Output<String> zscoreSensitivity) {
            $.zscoreSensitivity = zscoreSensitivity;
            return this;
        }

        /**
         * @param zscoreSensitivity Level of sensitivity set for zscore rules.
         * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;.
         * 
         * @return builder
         * 
         */
        public Builder zscoreSensitivity(String zscoreSensitivity) {
            return zscoreSensitivity(Output.of(zscoreSensitivity));
        }

        /**
         * @param zscoreTarget Target of the zscore rule analysis.
         * Available values: &#34;bits&#34;, &#34;packets&#34;.
         * 
         * @return builder
         * 
         */
        public Builder zscoreTarget(@Nullable Output<String> zscoreTarget) {
            $.zscoreTarget = zscoreTarget;
            return this;
        }

        /**
         * @param zscoreTarget Target of the zscore rule analysis.
         * Available values: &#34;bits&#34;, &#34;packets&#34;.
         * 
         * @return builder
         * 
         */
        public Builder zscoreTarget(String zscoreTarget) {
            return zscoreTarget(Output.of(zscoreTarget));
        }

        public MagicNetworkMonitoringRuleState build() {
            return $;
        }
    }

}
