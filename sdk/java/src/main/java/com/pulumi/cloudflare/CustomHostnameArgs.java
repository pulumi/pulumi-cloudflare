// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.CustomHostnameSslArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomHostnameArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomHostnameArgs Empty = new CustomHostnameArgs();

    /**
     * Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    @Import(name="customMetadata")
    private @Nullable Output<Map<String,String>> customMetadata;

    /**
     * @return Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    public Optional<Output<Map<String,String>>> customMetadata() {
        return Optional.ofNullable(this.customMetadata);
    }

    /**
     * a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    @Import(name="customOriginServer")
    private @Nullable Output<String> customOriginServer;

    /**
     * @return a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    public Optional<Output<String>> customOriginServer() {
        return Optional.ofNullable(this.customOriginServer);
    }

    /**
     * A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    @Import(name="customOriginSni")
    private @Nullable Output<String> customOriginSni;

    /**
     * @return A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    public Optional<Output<String>> customOriginSni() {
        return Optional.ofNullable(this.customOriginSni);
    }

    /**
     * The custom hostname that will point to your hostname via CNAME.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The custom hostname that will point to your hostname via CNAME.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * SSL properties used when creating the custom hostname.
     * 
     */
    @Import(name="ssl", required=true)
    private Output<CustomHostnameSslArgs> ssl;

    /**
     * @return SSL properties used when creating the custom hostname.
     * 
     */
    public Output<CustomHostnameSslArgs> ssl() {
        return this.ssl;
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private CustomHostnameArgs() {}

    private CustomHostnameArgs(CustomHostnameArgs $) {
        this.customMetadata = $.customMetadata;
        this.customOriginServer = $.customOriginServer;
        this.customOriginSni = $.customOriginSni;
        this.hostname = $.hostname;
        this.ssl = $.ssl;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomHostnameArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomHostnameArgs $;

        public Builder() {
            $ = new CustomHostnameArgs();
        }

        public Builder(CustomHostnameArgs defaults) {
            $ = new CustomHostnameArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customMetadata Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(@Nullable Output<Map<String,String>> customMetadata) {
            $.customMetadata = customMetadata;
            return this;
        }

        /**
         * @param customMetadata Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
         * 
         * @return builder
         * 
         */
        public Builder customMetadata(Map<String,String> customMetadata) {
            return customMetadata(Output.of(customMetadata));
        }

        /**
         * @param customOriginServer a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(@Nullable Output<String> customOriginServer) {
            $.customOriginServer = customOriginServer;
            return this;
        }

        /**
         * @param customOriginServer a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
         * 
         * @return builder
         * 
         */
        public Builder customOriginServer(String customOriginServer) {
            return customOriginServer(Output.of(customOriginServer));
        }

        /**
         * @param customOriginSni A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(@Nullable Output<String> customOriginSni) {
            $.customOriginSni = customOriginSni;
            return this;
        }

        /**
         * @param customOriginSni A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
         * 
         * @return builder
         * 
         */
        public Builder customOriginSni(String customOriginSni) {
            return customOriginSni(Output.of(customOriginSni));
        }

        /**
         * @param hostname The custom hostname that will point to your hostname via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The custom hostname that will point to your hostname via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param ssl SSL properties used when creating the custom hostname.
         * 
         * @return builder
         * 
         */
        public Builder ssl(Output<CustomHostnameSslArgs> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl SSL properties used when creating the custom hostname.
         * 
         * @return builder
         * 
         */
        public Builder ssl(CustomHostnameSslArgs ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CustomHostnameArgs build() {
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("CustomHostnameArgs", "hostname");
            }
            if ($.ssl == null) {
                throw new MissingRequiredPropertyException("CustomHostnameArgs", "ssl");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("CustomHostnameArgs", "zoneId");
            }
            return $;
        }
    }

}
