// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaValidationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaValidationSettingsArgs Empty = new SchemaValidationSettingsArgs();

    /**
     * The default mitigation action used
     * Mitigation actions are as follows:
     * 
     *   - `&#34;log&#34;` - log request when request does not conform to schema
     *   - `&#34;block&#34;` - deny access to the site when request does not conform to schema
     *   - `&#34;none&#34;` - skip running schema validation
     *     Available values: &#34;none&#34;, &#34;log&#34;, &#34;block&#34;.
     * 
     */
    @Import(name="validationDefaultMitigationAction", required=true)
    private Output<String> validationDefaultMitigationAction;

    /**
     * @return The default mitigation action used
     * Mitigation actions are as follows:
     * 
     *   - `&#34;log&#34;` - log request when request does not conform to schema
     *   - `&#34;block&#34;` - deny access to the site when request does not conform to schema
     *   - `&#34;none&#34;` - skip running schema validation
     *     Available values: &#34;none&#34;, &#34;log&#34;, &#34;block&#34;.
     * 
     */
    public Output<String> validationDefaultMitigationAction() {
        return this.validationDefaultMitigationAction;
    }

    /**
     * When set, this overrides both zone level and operation level mitigation actions.
     * 
     *   - `&#34;none&#34;` - skip running schema validation entirely for the request
     *   - `null` - clears any existing override
     *     Available values: &#34;none&#34;.
     * 
     */
    @Import(name="validationOverrideMitigationAction")
    private @Nullable Output<String> validationOverrideMitigationAction;

    /**
     * @return When set, this overrides both zone level and operation level mitigation actions.
     * 
     *   - `&#34;none&#34;` - skip running schema validation entirely for the request
     *   - `null` - clears any existing override
     *     Available values: &#34;none&#34;.
     * 
     */
    public Optional<Output<String>> validationOverrideMitigationAction() {
        return Optional.ofNullable(this.validationOverrideMitigationAction);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private SchemaValidationSettingsArgs() {}

    private SchemaValidationSettingsArgs(SchemaValidationSettingsArgs $) {
        this.validationDefaultMitigationAction = $.validationDefaultMitigationAction;
        this.validationOverrideMitigationAction = $.validationOverrideMitigationAction;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaValidationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaValidationSettingsArgs $;

        public Builder() {
            $ = new SchemaValidationSettingsArgs();
        }

        public Builder(SchemaValidationSettingsArgs defaults) {
            $ = new SchemaValidationSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param validationDefaultMitigationAction The default mitigation action used
         * Mitigation actions are as follows:
         * 
         *   - `&#34;log&#34;` - log request when request does not conform to schema
         *   - `&#34;block&#34;` - deny access to the site when request does not conform to schema
         *   - `&#34;none&#34;` - skip running schema validation
         *     Available values: &#34;none&#34;, &#34;log&#34;, &#34;block&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationDefaultMitigationAction(Output<String> validationDefaultMitigationAction) {
            $.validationDefaultMitigationAction = validationDefaultMitigationAction;
            return this;
        }

        /**
         * @param validationDefaultMitigationAction The default mitigation action used
         * Mitigation actions are as follows:
         * 
         *   - `&#34;log&#34;` - log request when request does not conform to schema
         *   - `&#34;block&#34;` - deny access to the site when request does not conform to schema
         *   - `&#34;none&#34;` - skip running schema validation
         *     Available values: &#34;none&#34;, &#34;log&#34;, &#34;block&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationDefaultMitigationAction(String validationDefaultMitigationAction) {
            return validationDefaultMitigationAction(Output.of(validationDefaultMitigationAction));
        }

        /**
         * @param validationOverrideMitigationAction When set, this overrides both zone level and operation level mitigation actions.
         * 
         *   - `&#34;none&#34;` - skip running schema validation entirely for the request
         *   - `null` - clears any existing override
         *     Available values: &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationOverrideMitigationAction(@Nullable Output<String> validationOverrideMitigationAction) {
            $.validationOverrideMitigationAction = validationOverrideMitigationAction;
            return this;
        }

        /**
         * @param validationOverrideMitigationAction When set, this overrides both zone level and operation level mitigation actions.
         * 
         *   - `&#34;none&#34;` - skip running schema validation entirely for the request
         *   - `null` - clears any existing override
         *     Available values: &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationOverrideMitigationAction(String validationOverrideMitigationAction) {
            return validationOverrideMitigationAction(Output.of(validationOverrideMitigationAction));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SchemaValidationSettingsArgs build() {
            if ($.validationDefaultMitigationAction == null) {
                throw new MissingRequiredPropertyException("SchemaValidationSettingsArgs", "validationDefaultMitigationAction");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("SchemaValidationSettingsArgs", "zoneId");
            }
            return $;
        }
    }

}
