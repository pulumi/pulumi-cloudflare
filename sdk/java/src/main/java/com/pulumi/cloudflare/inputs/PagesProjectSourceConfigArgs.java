// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PagesProjectSourceConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final PagesProjectSourceConfigArgs Empty = new PagesProjectSourceConfigArgs();

    /**
     * Toggle deployments on this repo. Defaults to `true`.
     * 
     */
    @Import(name="deploymentsEnabled")
    private @Nullable Output<Boolean> deploymentsEnabled;

    /**
     * @return Toggle deployments on this repo. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> deploymentsEnabled() {
        return Optional.ofNullable(this.deploymentsEnabled);
    }

    /**
     * Project owner username. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="owner")
    private @Nullable Output<String> owner;

    /**
     * @return Project owner username. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Enable Pages to comment on Pull Requests. Defaults to `true`.
     * 
     */
    @Import(name="prCommentsEnabled")
    private @Nullable Output<Boolean> prCommentsEnabled;

    /**
     * @return Enable Pages to comment on Pull Requests. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> prCommentsEnabled() {
        return Optional.ofNullable(this.prCommentsEnabled);
    }

    /**
     * Branches will be excluded from automatic deployment.
     * 
     */
    @Import(name="previewBranchExcludes")
    private @Nullable Output<List<String>> previewBranchExcludes;

    /**
     * @return Branches will be excluded from automatic deployment.
     * 
     */
    public Optional<Output<List<String>>> previewBranchExcludes() {
        return Optional.ofNullable(this.previewBranchExcludes);
    }

    /**
     * Branches will be included for automatic deployment.
     * 
     */
    @Import(name="previewBranchIncludes")
    private @Nullable Output<List<String>> previewBranchIncludes;

    /**
     * @return Branches will be included for automatic deployment.
     * 
     */
    public Optional<Output<List<String>>> previewBranchIncludes() {
        return Optional.ofNullable(this.previewBranchIncludes);
    }

    /**
     * Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
     * 
     */
    @Import(name="previewDeploymentSetting")
    private @Nullable Output<String> previewDeploymentSetting;

    /**
     * @return Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
     * 
     */
    public Optional<Output<String>> previewDeploymentSetting() {
        return Optional.ofNullable(this.previewDeploymentSetting);
    }

    /**
     * Project production branch name.
     * 
     */
    @Import(name="productionBranch", required=true)
    private Output<String> productionBranch;

    /**
     * @return Project production branch name.
     * 
     */
    public Output<String> productionBranch() {
        return this.productionBranch;
    }

    /**
     * Enable production deployments. Defaults to `true`.
     * 
     */
    @Import(name="productionDeploymentEnabled")
    private @Nullable Output<Boolean> productionDeploymentEnabled;

    /**
     * @return Enable production deployments. Defaults to `true`.
     * 
     */
    public Optional<Output<Boolean>> productionDeploymentEnabled() {
        return Optional.ofNullable(this.productionDeploymentEnabled);
    }

    /**
     * Project repository name. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="repoName")
    private @Nullable Output<String> repoName;

    /**
     * @return Project repository name. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<String>> repoName() {
        return Optional.ofNullable(this.repoName);
    }

    private PagesProjectSourceConfigArgs() {}

    private PagesProjectSourceConfigArgs(PagesProjectSourceConfigArgs $) {
        this.deploymentsEnabled = $.deploymentsEnabled;
        this.owner = $.owner;
        this.prCommentsEnabled = $.prCommentsEnabled;
        this.previewBranchExcludes = $.previewBranchExcludes;
        this.previewBranchIncludes = $.previewBranchIncludes;
        this.previewDeploymentSetting = $.previewDeploymentSetting;
        this.productionBranch = $.productionBranch;
        this.productionDeploymentEnabled = $.productionDeploymentEnabled;
        this.repoName = $.repoName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PagesProjectSourceConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PagesProjectSourceConfigArgs $;

        public Builder() {
            $ = new PagesProjectSourceConfigArgs();
        }

        public Builder(PagesProjectSourceConfigArgs defaults) {
            $ = new PagesProjectSourceConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deploymentsEnabled Toggle deployments on this repo. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsEnabled(@Nullable Output<Boolean> deploymentsEnabled) {
            $.deploymentsEnabled = deploymentsEnabled;
            return this;
        }

        /**
         * @param deploymentsEnabled Toggle deployments on this repo. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder deploymentsEnabled(Boolean deploymentsEnabled) {
            return deploymentsEnabled(Output.of(deploymentsEnabled));
        }

        /**
         * @param owner Project owner username. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable Output<String> owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param owner Project owner username. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder owner(String owner) {
            return owner(Output.of(owner));
        }

        /**
         * @param prCommentsEnabled Enable Pages to comment on Pull Requests. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder prCommentsEnabled(@Nullable Output<Boolean> prCommentsEnabled) {
            $.prCommentsEnabled = prCommentsEnabled;
            return this;
        }

        /**
         * @param prCommentsEnabled Enable Pages to comment on Pull Requests. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder prCommentsEnabled(Boolean prCommentsEnabled) {
            return prCommentsEnabled(Output.of(prCommentsEnabled));
        }

        /**
         * @param previewBranchExcludes Branches will be excluded from automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchExcludes(@Nullable Output<List<String>> previewBranchExcludes) {
            $.previewBranchExcludes = previewBranchExcludes;
            return this;
        }

        /**
         * @param previewBranchExcludes Branches will be excluded from automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchExcludes(List<String> previewBranchExcludes) {
            return previewBranchExcludes(Output.of(previewBranchExcludes));
        }

        /**
         * @param previewBranchExcludes Branches will be excluded from automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchExcludes(String... previewBranchExcludes) {
            return previewBranchExcludes(List.of(previewBranchExcludes));
        }

        /**
         * @param previewBranchIncludes Branches will be included for automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchIncludes(@Nullable Output<List<String>> previewBranchIncludes) {
            $.previewBranchIncludes = previewBranchIncludes;
            return this;
        }

        /**
         * @param previewBranchIncludes Branches will be included for automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchIncludes(List<String> previewBranchIncludes) {
            return previewBranchIncludes(Output.of(previewBranchIncludes));
        }

        /**
         * @param previewBranchIncludes Branches will be included for automatic deployment.
         * 
         * @return builder
         * 
         */
        public Builder previewBranchIncludes(String... previewBranchIncludes) {
            return previewBranchIncludes(List.of(previewBranchIncludes));
        }

        /**
         * @param previewDeploymentSetting Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
         * 
         * @return builder
         * 
         */
        public Builder previewDeploymentSetting(@Nullable Output<String> previewDeploymentSetting) {
            $.previewDeploymentSetting = previewDeploymentSetting;
            return this;
        }

        /**
         * @param previewDeploymentSetting Preview Deployment Setting. Available values: `custom`, `all`, `none`. Defaults to `all`.
         * 
         * @return builder
         * 
         */
        public Builder previewDeploymentSetting(String previewDeploymentSetting) {
            return previewDeploymentSetting(Output.of(previewDeploymentSetting));
        }

        /**
         * @param productionBranch Project production branch name.
         * 
         * @return builder
         * 
         */
        public Builder productionBranch(Output<String> productionBranch) {
            $.productionBranch = productionBranch;
            return this;
        }

        /**
         * @param productionBranch Project production branch name.
         * 
         * @return builder
         * 
         */
        public Builder productionBranch(String productionBranch) {
            return productionBranch(Output.of(productionBranch));
        }

        /**
         * @param productionDeploymentEnabled Enable production deployments. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder productionDeploymentEnabled(@Nullable Output<Boolean> productionDeploymentEnabled) {
            $.productionDeploymentEnabled = productionDeploymentEnabled;
            return this;
        }

        /**
         * @param productionDeploymentEnabled Enable production deployments. Defaults to `true`.
         * 
         * @return builder
         * 
         */
        public Builder productionDeploymentEnabled(Boolean productionDeploymentEnabled) {
            return productionDeploymentEnabled(Output.of(productionDeploymentEnabled));
        }

        /**
         * @param repoName Project repository name. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder repoName(@Nullable Output<String> repoName) {
            $.repoName = repoName;
            return this;
        }

        /**
         * @param repoName Project repository name. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder repoName(String repoName) {
            return repoName(Output.of(repoName));
        }

        public PagesProjectSourceConfigArgs build() {
            if ($.productionBranch == null) {
                throw new MissingRequiredPropertyException("PagesProjectSourceConfigArgs", "productionBranch");
            }
            return $;
        }
    }

}
