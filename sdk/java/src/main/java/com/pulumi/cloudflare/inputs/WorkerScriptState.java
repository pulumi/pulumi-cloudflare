// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkerScriptAssetsArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptBindingArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptLimitsArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptNamedHandlerArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptObservabilityArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptPlacementArgs;
import com.pulumi.cloudflare.inputs.WorkerScriptTailConsumerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerScriptState extends com.pulumi.resources.ResourceArgs {

    public static final WorkerScriptState Empty = new WorkerScriptState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Configuration for assets within a Worker.
     * 
     */
    @Import(name="assets")
    private @Nullable Output<WorkerScriptAssetsArgs> assets;

    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    public Optional<Output<WorkerScriptAssetsArgs>> assets() {
        return Optional.ofNullable(this.assets);
    }

    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    @Import(name="bindings")
    private @Nullable Output<List<WorkerScriptBindingArgs>> bindings;

    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    public Optional<Output<List<WorkerScriptBindingArgs>>> bindings() {
        return Optional.ofNullable(this.bindings);
    }

    /**
     * Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     * 
     */
    @Import(name="bodyPart")
    private @Nullable Output<String> bodyPart;

    /**
     * @return Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     * 
     */
    public Optional<Output<String>> bodyPart() {
        return Optional.ofNullable(this.bodyPart);
    }

    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    @Import(name="compatibilityDate")
    private @Nullable Output<String> compatibilityDate;

    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    public Optional<Output<String>> compatibilityDate() {
        return Optional.ofNullable(this.compatibilityDate);
    }

    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    @Import(name="compatibilityFlags")
    private @Nullable Output<List<String>> compatibilityFlags;

    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    public Optional<Output<List<String>>> compatibilityFlags() {
        return Optional.ofNullable(this.compatibilityFlags);
    }

    /**
     * Module or Service Worker contents of the Worker. Conflicts with `content_file`.
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return Module or Service Worker contents of the Worker. Conflicts with `content_file`.
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `content_sha256`.
     * 
     */
    @Import(name="contentFile")
    private @Nullable Output<String> contentFile;

    /**
     * @return Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `content_sha256`.
     * 
     */
    public Optional<Output<String>> contentFile() {
        return Optional.ofNullable(this.contentFile);
    }

    /**
     * SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `content_file` is specified.
     * 
     */
    @Import(name="contentSha256")
    private @Nullable Output<String> contentSha256;

    /**
     * @return SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `content_file` is specified.
     * 
     */
    public Optional<Output<String>> contentSha256() {
        return Optional.ofNullable(this.contentSha256);
    }

    /**
     * Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. &#34;text/x-python&#34;).
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. &#34;text/x-python&#34;).
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * When the script was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return When the script was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * The names of handlers exported as part of the default export.
     * 
     */
    @Import(name="handlers")
    private @Nullable Output<List<String>> handlers;

    /**
     * @return The names of handlers exported as part of the default export.
     * 
     */
    public Optional<Output<List<String>>> handlers() {
        return Optional.ofNullable(this.handlers);
    }

    /**
     * Whether a Worker contains assets.
     * 
     */
    @Import(name="hasAssets")
    private @Nullable Output<Boolean> hasAssets;

    /**
     * @return Whether a Worker contains assets.
     * 
     */
    public Optional<Output<Boolean>> hasAssets() {
        return Optional.ofNullable(this.hasAssets);
    }

    /**
     * Whether a Worker contains modules.
     * 
     */
    @Import(name="hasModules")
    private @Nullable Output<Boolean> hasModules;

    /**
     * @return Whether a Worker contains modules.
     * 
     */
    public Optional<Output<Boolean>> hasModules() {
        return Optional.ofNullable(this.hasModules);
    }

    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     * 
     */
    @Import(name="keepAssets")
    private @Nullable Output<Boolean> keepAssets;

    /**
     * @return Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     * 
     */
    public Optional<Output<Boolean>> keepAssets() {
        return Optional.ofNullable(this.keepAssets);
    }

    /**
     * List of binding types to keep from previous_upload.
     * 
     */
    @Import(name="keepBindings")
    private @Nullable Output<List<String>> keepBindings;

    /**
     * @return List of binding types to keep from previous_upload.
     * 
     */
    public Optional<Output<List<String>>> keepBindings() {
        return Optional.ofNullable(this.keepBindings);
    }

    /**
     * The client most recently used to deploy this Worker.
     * 
     */
    @Import(name="lastDeployedFrom")
    private @Nullable Output<String> lastDeployedFrom;

    /**
     * @return The client most recently used to deploy this Worker.
     * 
     */
    public Optional<Output<String>> lastDeployedFrom() {
        return Optional.ofNullable(this.lastDeployedFrom);
    }

    /**
     * Limits to apply for this Worker.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<WorkerScriptLimitsArgs> limits;

    /**
     * @return Limits to apply for this Worker.
     * 
     */
    public Optional<Output<WorkerScriptLimitsArgs>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Whether Logpush is turned on for the Worker.
     * 
     */
    @Import(name="logpush")
    private @Nullable Output<Boolean> logpush;

    /**
     * @return Whether Logpush is turned on for the Worker.
     * 
     */
    public Optional<Output<Boolean>> logpush() {
        return Optional.ofNullable(this.logpush);
    }

    /**
     * Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     * 
     */
    @Import(name="mainModule")
    private @Nullable Output<String> mainModule;

    /**
     * @return Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     * 
     */
    public Optional<Output<String>> mainModule() {
        return Optional.ofNullable(this.mainModule);
    }

    /**
     * The tag of the Durable Object migration that was most recently applied for this Worker.
     * 
     */
    @Import(name="migrationTag")
    private @Nullable Output<String> migrationTag;

    /**
     * @return The tag of the Durable Object migration that was most recently applied for this Worker.
     * 
     */
    public Optional<Output<String>> migrationTag() {
        return Optional.ofNullable(this.migrationTag);
    }

    /**
     * When the script was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return When the script was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Named exports, such as Durable Object class implementations and named entrypoints.
     * 
     */
    @Import(name="namedHandlers")
    private @Nullable Output<List<WorkerScriptNamedHandlerArgs>> namedHandlers;

    /**
     * @return Named exports, such as Durable Object class implementations and named entrypoints.
     * 
     */
    public Optional<Output<List<WorkerScriptNamedHandlerArgs>>> namedHandlers() {
        return Optional.ofNullable(this.namedHandlers);
    }

    /**
     * Observability settings for the Worker.
     * 
     */
    @Import(name="observability")
    private @Nullable Output<WorkerScriptObservabilityArgs> observability;

    /**
     * @return Observability settings for the Worker.
     * 
     */
    public Optional<Output<WorkerScriptObservabilityArgs>> observability() {
        return Optional.ofNullable(this.observability);
    }

    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    @Import(name="placement")
    private @Nullable Output<WorkerScriptPlacementArgs> placement;

    /**
     * @return Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    public Optional<Output<WorkerScriptPlacementArgs>> placement() {
        return Optional.ofNullable(this.placement);
    }

    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Import(name="scriptName")
    private @Nullable Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Optional<Output<String>> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }

    @Import(name="startupTimeMs")
    private @Nullable Output<Integer> startupTimeMs;

    public Optional<Output<Integer>> startupTimeMs() {
        return Optional.ofNullable(this.startupTimeMs);
    }

    /**
     * List of Workers that will consume logs from the attached Worker.
     * 
     */
    @Import(name="tailConsumers")
    private @Nullable Output<List<WorkerScriptTailConsumerArgs>> tailConsumers;

    /**
     * @return List of Workers that will consume logs from the attached Worker.
     * 
     */
    public Optional<Output<List<WorkerScriptTailConsumerArgs>>> tailConsumers() {
        return Optional.ofNullable(this.tailConsumers);
    }

    /**
     * Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     */
    @Import(name="usageModel")
    private @Nullable Output<String> usageModel;

    /**
     * @return Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     */
    public Optional<Output<String>> usageModel() {
        return Optional.ofNullable(this.usageModel);
    }

    private WorkerScriptState() {}

    private WorkerScriptState(WorkerScriptState $) {
        this.accountId = $.accountId;
        this.assets = $.assets;
        this.bindings = $.bindings;
        this.bodyPart = $.bodyPart;
        this.compatibilityDate = $.compatibilityDate;
        this.compatibilityFlags = $.compatibilityFlags;
        this.content = $.content;
        this.contentFile = $.contentFile;
        this.contentSha256 = $.contentSha256;
        this.contentType = $.contentType;
        this.createdOn = $.createdOn;
        this.etag = $.etag;
        this.handlers = $.handlers;
        this.hasAssets = $.hasAssets;
        this.hasModules = $.hasModules;
        this.keepAssets = $.keepAssets;
        this.keepBindings = $.keepBindings;
        this.lastDeployedFrom = $.lastDeployedFrom;
        this.limits = $.limits;
        this.logpush = $.logpush;
        this.mainModule = $.mainModule;
        this.migrationTag = $.migrationTag;
        this.modifiedOn = $.modifiedOn;
        this.namedHandlers = $.namedHandlers;
        this.observability = $.observability;
        this.placement = $.placement;
        this.scriptName = $.scriptName;
        this.startupTimeMs = $.startupTimeMs;
        this.tailConsumers = $.tailConsumers;
        this.usageModel = $.usageModel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerScriptState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerScriptState $;

        public Builder() {
            $ = new WorkerScriptState();
        }

        public Builder(WorkerScriptState defaults) {
            $ = new WorkerScriptState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param assets Configuration for assets within a Worker.
         * 
         * @return builder
         * 
         */
        public Builder assets(@Nullable Output<WorkerScriptAssetsArgs> assets) {
            $.assets = assets;
            return this;
        }

        /**
         * @param assets Configuration for assets within a Worker.
         * 
         * @return builder
         * 
         */
        public Builder assets(WorkerScriptAssetsArgs assets) {
            return assets(Output.of(assets));
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(@Nullable Output<List<WorkerScriptBindingArgs>> bindings) {
            $.bindings = bindings;
            return this;
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(List<WorkerScriptBindingArgs> bindings) {
            return bindings(Output.of(bindings));
        }

        /**
         * @param bindings List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
         * 
         * @return builder
         * 
         */
        public Builder bindings(WorkerScriptBindingArgs... bindings) {
            return bindings(List.of(bindings));
        }

        /**
         * @param bodyPart Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
         * 
         * @return builder
         * 
         */
        public Builder bodyPart(@Nullable Output<String> bodyPart) {
            $.bodyPart = bodyPart;
            return this;
        }

        /**
         * @param bodyPart Name of the uploaded file that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
         * 
         * @return builder
         * 
         */
        public Builder bodyPart(String bodyPart) {
            return bodyPart(Output.of(bodyPart));
        }

        /**
         * @param compatibilityDate Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityDate(@Nullable Output<String> compatibilityDate) {
            $.compatibilityDate = compatibilityDate;
            return this;
        }

        /**
         * @param compatibilityDate Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityDate(String compatibilityDate) {
            return compatibilityDate(Output.of(compatibilityDate));
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(@Nullable Output<List<String>> compatibilityFlags) {
            $.compatibilityFlags = compatibilityFlags;
            return this;
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(List<String> compatibilityFlags) {
            return compatibilityFlags(Output.of(compatibilityFlags));
        }

        /**
         * @param compatibilityFlags Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityFlags(String... compatibilityFlags) {
            return compatibilityFlags(List.of(compatibilityFlags));
        }

        /**
         * @param content Module or Service Worker contents of the Worker. Conflicts with `content_file`.
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content Module or Service Worker contents of the Worker. Conflicts with `content_file`.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentFile Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `content_sha256`.
         * 
         * @return builder
         * 
         */
        public Builder contentFile(@Nullable Output<String> contentFile) {
            $.contentFile = contentFile;
            return this;
        }

        /**
         * @param contentFile Path to a file containing the Module or Service Worker contents of the Worker. Conflicts with `content`. Must be paired with `content_sha256`.
         * 
         * @return builder
         * 
         */
        public Builder contentFile(String contentFile) {
            return contentFile(Output.of(contentFile));
        }

        /**
         * @param contentSha256 SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `content_file` is specified.
         * 
         * @return builder
         * 
         */
        public Builder contentSha256(@Nullable Output<String> contentSha256) {
            $.contentSha256 = contentSha256;
            return this;
        }

        /**
         * @param contentSha256 SHA-256 hash of the Worker contents. Used to trigger updates when source code changes. Must be provided when `content_file` is specified.
         * 
         * @return builder
         * 
         */
        public Builder contentSha256(String contentSha256) {
            return contentSha256(Output.of(contentSha256));
        }

        /**
         * @param contentType Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. &#34;text/x-python&#34;).
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType Content-Type of the Worker. Required if uploading a non-JavaScript Worker (e.g. &#34;text/x-python&#34;).
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param createdOn When the script was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn When the script was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param etag Hashed script content, can be used in a If-None-Match header when updating.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag Hashed script content, can be used in a If-None-Match header when updating.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param handlers The names of handlers exported as part of the default export.
         * 
         * @return builder
         * 
         */
        public Builder handlers(@Nullable Output<List<String>> handlers) {
            $.handlers = handlers;
            return this;
        }

        /**
         * @param handlers The names of handlers exported as part of the default export.
         * 
         * @return builder
         * 
         */
        public Builder handlers(List<String> handlers) {
            return handlers(Output.of(handlers));
        }

        /**
         * @param handlers The names of handlers exported as part of the default export.
         * 
         * @return builder
         * 
         */
        public Builder handlers(String... handlers) {
            return handlers(List.of(handlers));
        }

        /**
         * @param hasAssets Whether a Worker contains assets.
         * 
         * @return builder
         * 
         */
        public Builder hasAssets(@Nullable Output<Boolean> hasAssets) {
            $.hasAssets = hasAssets;
            return this;
        }

        /**
         * @param hasAssets Whether a Worker contains assets.
         * 
         * @return builder
         * 
         */
        public Builder hasAssets(Boolean hasAssets) {
            return hasAssets(Output.of(hasAssets));
        }

        /**
         * @param hasModules Whether a Worker contains modules.
         * 
         * @return builder
         * 
         */
        public Builder hasModules(@Nullable Output<Boolean> hasModules) {
            $.hasModules = hasModules;
            return this;
        }

        /**
         * @param hasModules Whether a Worker contains modules.
         * 
         * @return builder
         * 
         */
        public Builder hasModules(Boolean hasModules) {
            return hasModules(Output.of(hasModules));
        }

        /**
         * @param keepAssets Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
         * 
         * @return builder
         * 
         */
        public Builder keepAssets(@Nullable Output<Boolean> keepAssets) {
            $.keepAssets = keepAssets;
            return this;
        }

        /**
         * @param keepAssets Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
         * 
         * @return builder
         * 
         */
        public Builder keepAssets(Boolean keepAssets) {
            return keepAssets(Output.of(keepAssets));
        }

        /**
         * @param keepBindings List of binding types to keep from previous_upload.
         * 
         * @return builder
         * 
         */
        public Builder keepBindings(@Nullable Output<List<String>> keepBindings) {
            $.keepBindings = keepBindings;
            return this;
        }

        /**
         * @param keepBindings List of binding types to keep from previous_upload.
         * 
         * @return builder
         * 
         */
        public Builder keepBindings(List<String> keepBindings) {
            return keepBindings(Output.of(keepBindings));
        }

        /**
         * @param keepBindings List of binding types to keep from previous_upload.
         * 
         * @return builder
         * 
         */
        public Builder keepBindings(String... keepBindings) {
            return keepBindings(List.of(keepBindings));
        }

        /**
         * @param lastDeployedFrom The client most recently used to deploy this Worker.
         * 
         * @return builder
         * 
         */
        public Builder lastDeployedFrom(@Nullable Output<String> lastDeployedFrom) {
            $.lastDeployedFrom = lastDeployedFrom;
            return this;
        }

        /**
         * @param lastDeployedFrom The client most recently used to deploy this Worker.
         * 
         * @return builder
         * 
         */
        public Builder lastDeployedFrom(String lastDeployedFrom) {
            return lastDeployedFrom(Output.of(lastDeployedFrom));
        }

        /**
         * @param limits Limits to apply for this Worker.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<WorkerScriptLimitsArgs> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits Limits to apply for this Worker.
         * 
         * @return builder
         * 
         */
        public Builder limits(WorkerScriptLimitsArgs limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param logpush Whether Logpush is turned on for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logpush(@Nullable Output<Boolean> logpush) {
            $.logpush = logpush;
            return this;
        }

        /**
         * @param logpush Whether Logpush is turned on for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logpush(Boolean logpush) {
            return logpush(Output.of(logpush));
        }

        /**
         * @param mainModule Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
         * 
         * @return builder
         * 
         */
        public Builder mainModule(@Nullable Output<String> mainModule) {
            $.mainModule = mainModule;
            return this;
        }

        /**
         * @param mainModule Name of the uploaded file that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
         * 
         * @return builder
         * 
         */
        public Builder mainModule(String mainModule) {
            return mainModule(Output.of(mainModule));
        }

        /**
         * @param migrationTag The tag of the Durable Object migration that was most recently applied for this Worker.
         * 
         * @return builder
         * 
         */
        public Builder migrationTag(@Nullable Output<String> migrationTag) {
            $.migrationTag = migrationTag;
            return this;
        }

        /**
         * @param migrationTag The tag of the Durable Object migration that was most recently applied for this Worker.
         * 
         * @return builder
         * 
         */
        public Builder migrationTag(String migrationTag) {
            return migrationTag(Output.of(migrationTag));
        }

        /**
         * @param modifiedOn When the script was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn When the script was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param namedHandlers Named exports, such as Durable Object class implementations and named entrypoints.
         * 
         * @return builder
         * 
         */
        public Builder namedHandlers(@Nullable Output<List<WorkerScriptNamedHandlerArgs>> namedHandlers) {
            $.namedHandlers = namedHandlers;
            return this;
        }

        /**
         * @param namedHandlers Named exports, such as Durable Object class implementations and named entrypoints.
         * 
         * @return builder
         * 
         */
        public Builder namedHandlers(List<WorkerScriptNamedHandlerArgs> namedHandlers) {
            return namedHandlers(Output.of(namedHandlers));
        }

        /**
         * @param namedHandlers Named exports, such as Durable Object class implementations and named entrypoints.
         * 
         * @return builder
         * 
         */
        public Builder namedHandlers(WorkerScriptNamedHandlerArgs... namedHandlers) {
            return namedHandlers(List.of(namedHandlers));
        }

        /**
         * @param observability Observability settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder observability(@Nullable Output<WorkerScriptObservabilityArgs> observability) {
            $.observability = observability;
            return this;
        }

        /**
         * @param observability Observability settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder observability(WorkerScriptObservabilityArgs observability) {
            return observability(Output.of(observability));
        }

        /**
         * @param placement Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * 
         * @return builder
         * 
         */
        public Builder placement(@Nullable Output<WorkerScriptPlacementArgs> placement) {
            $.placement = placement;
            return this;
        }

        /**
         * @param placement Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * 
         * @return builder
         * 
         */
        public Builder placement(WorkerScriptPlacementArgs placement) {
            return placement(Output.of(placement));
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(@Nullable Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        /**
         * @param scriptName Name of the script, used in URLs and route configuration.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        public Builder startupTimeMs(@Nullable Output<Integer> startupTimeMs) {
            $.startupTimeMs = startupTimeMs;
            return this;
        }

        public Builder startupTimeMs(Integer startupTimeMs) {
            return startupTimeMs(Output.of(startupTimeMs));
        }

        /**
         * @param tailConsumers List of Workers that will consume logs from the attached Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(@Nullable Output<List<WorkerScriptTailConsumerArgs>> tailConsumers) {
            $.tailConsumers = tailConsumers;
            return this;
        }

        /**
         * @param tailConsumers List of Workers that will consume logs from the attached Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(List<WorkerScriptTailConsumerArgs> tailConsumers) {
            return tailConsumers(Output.of(tailConsumers));
        }

        /**
         * @param tailConsumers List of Workers that will consume logs from the attached Worker.
         * 
         * @return builder
         * 
         */
        public Builder tailConsumers(WorkerScriptTailConsumerArgs... tailConsumers) {
            return tailConsumers(List.of(tailConsumers));
        }

        /**
         * @param usageModel Usage model for the Worker invocations.
         * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
         * 
         * @return builder
         * 
         */
        public Builder usageModel(@Nullable Output<String> usageModel) {
            $.usageModel = usageModel;
            return this;
        }

        /**
         * @param usageModel Usage model for the Worker invocations.
         * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
         * 
         * @return builder
         * 
         */
        public Builder usageModel(String usageModel) {
            return usageModel(Output.of(usageModel));
        }

        public WorkerScriptState build() {
            return $;
        }
    }

}
