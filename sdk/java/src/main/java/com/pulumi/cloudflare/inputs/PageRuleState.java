// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.PageRuleActionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PageRuleState extends com.pulumi.resources.ResourceArgs {

    public static final PageRuleState Empty = new PageRuleState();

    @Import(name="actions")
    private @Nullable Output<PageRuleActionsArgs> actions;

    public Optional<Output<PageRuleActionsArgs>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * The timestamp of when the Page Rule was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return The timestamp of when the Page Rule was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * The timestamp of when the Page Rule was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return The timestamp of when the Page Rule was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return The priority of the rule, used to define which Page Rule is processed
     * over another. A higher number indicates a higher priority. For example,
     * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
     * specific Page Rule to take precedence (rule B: `/images/special/*`),
     * specify a higher priority for rule B so it overrides rule A.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The status of the Page Rule.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the Page Rule.
     * Available values: &#34;active&#34;, &#34;disabled&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="target")
    private @Nullable Output<String> target;

    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private PageRuleState() {}

    private PageRuleState(PageRuleState $) {
        this.actions = $.actions;
        this.createdOn = $.createdOn;
        this.modifiedOn = $.modifiedOn;
        this.priority = $.priority;
        this.status = $.status;
        this.target = $.target;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PageRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PageRuleState $;

        public Builder() {
            $ = new PageRuleState();
        }

        public Builder(PageRuleState defaults) {
            $ = new PageRuleState(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<PageRuleActionsArgs> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(PageRuleActionsArgs actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param createdOn The timestamp of when the Page Rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The timestamp of when the Page Rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param modifiedOn The timestamp of when the Page Rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn The timestamp of when the Page Rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param priority The priority of the rule, used to define which Page Rule is processed
         * over another. A higher number indicates a higher priority. For example,
         * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
         * specific Page Rule to take precedence (rule B: `/images/special/*`),
         * specify a higher priority for rule B so it overrides rule A.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the rule, used to define which Page Rule is processed
         * over another. A higher number indicates a higher priority. For example,
         * if you have a catch-all Page Rule (rule A: `/images/*`) but want a more
         * specific Page Rule to take precedence (rule B: `/images/special/*`),
         * specify a higher priority for rule B so it overrides rule A.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param status The status of the Page Rule.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the Page Rule.
         * Available values: &#34;active&#34;, &#34;disabled&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public PageRuleState build() {
            return $;
        }
    }

}
