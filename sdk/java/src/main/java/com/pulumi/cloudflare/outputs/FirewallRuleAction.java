// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.FirewallRuleActionResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirewallRuleAction {
    /**
     * @return The action to perform.
     * 
     */
    private @Nullable String mode;
    /**
     * @return A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
     * Notes: If you omit this object, Cloudflare will use the default HTML error page. If &#34;mode&#34; is &#34;challenge&#34;, &#34;managed*challenge&#34;, or &#34;js*challenge&#34;, Cloudflare will use the zone challenge pages and you should not provide the &#34;response&#34; object.
     * 
     */
    private @Nullable FirewallRuleActionResponse response;
    /**
     * @return The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
     * Notes: If &#34;mode&#34; is &#34;challenge&#34;, &#34;managed*challenge&#34;, or &#34;js*challenge&#34;, Cloudflare will use the zone&#39;s Challenge Passage time and you should not provide this value.
     * 
     */
    private @Nullable Double timeout;

    private FirewallRuleAction() {}
    /**
     * @return The action to perform.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }
    /**
     * @return A custom content type and reponse to return when the threshold is exceeded. The custom response configured in this object will override the custom error for the zone. This object is optional.
     * Notes: If you omit this object, Cloudflare will use the default HTML error page. If &#34;mode&#34; is &#34;challenge&#34;, &#34;managed*challenge&#34;, or &#34;js*challenge&#34;, Cloudflare will use the zone challenge pages and you should not provide the &#34;response&#34; object.
     * 
     */
    public Optional<FirewallRuleActionResponse> response() {
        return Optional.ofNullable(this.response);
    }
    /**
     * @return The time in seconds during which Cloudflare will perform the mitigation action. Must be an integer value greater than or equal to the period.
     * Notes: If &#34;mode&#34; is &#34;challenge&#34;, &#34;managed*challenge&#34;, or &#34;js*challenge&#34;, Cloudflare will use the zone&#39;s Challenge Passage time and you should not provide this value.
     * 
     */
    public Optional<Double> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirewallRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String mode;
        private @Nullable FirewallRuleActionResponse response;
        private @Nullable Double timeout;
        public Builder() {}
        public Builder(FirewallRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mode = defaults.mode;
    	      this.response = defaults.response;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder mode(@Nullable String mode) {

            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable FirewallRuleActionResponse response) {

            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Double timeout) {

            this.timeout = timeout;
            return this;
        }
        public FirewallRuleAction build() {
            final var _resultValue = new FirewallRuleAction();
            _resultValue.mode = mode;
            _resultValue.response = response;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
