// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkersScriptsResultPlacement;
import com.pulumi.cloudflare.outputs.GetWorkersScriptsResultTailConsumer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkersScriptsResult {
    /**
     * @return When the script was created.
     * 
     */
    private String createdOn;
    /**
     * @return Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    private String etag;
    /**
     * @return Whether a Worker contains assets.
     * 
     */
    private Boolean hasAssets;
    /**
     * @return Whether a Worker contains modules.
     * 
     */
    private Boolean hasModules;
    /**
     * @return The id of the script in the Workers system. Usually the script name.
     * 
     */
    private String id;
    /**
     * @return Whether Logpush is turned on for the Worker.
     * 
     */
    private Boolean logpush;
    /**
     * @return When the script was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    private GetWorkersScriptsResultPlacement placement;
    /**
     * @return Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;smart&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    private String placementMode;
    /**
     * @return Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    private String placementStatus;
    /**
     * @return List of Workers that will consume logs from the attached Worker.
     * 
     */
    private List<GetWorkersScriptsResultTailConsumer> tailConsumers;
    /**
     * @return Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;.
     * 
     */
    private String usageModel;

    private GetWorkersScriptsResult() {}
    /**
     * @return When the script was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Whether a Worker contains assets.
     * 
     */
    public Boolean hasAssets() {
        return this.hasAssets;
    }
    /**
     * @return Whether a Worker contains modules.
     * 
     */
    public Boolean hasModules() {
        return this.hasModules;
    }
    /**
     * @return The id of the script in the Workers system. Usually the script name.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether Logpush is turned on for the Worker.
     * 
     */
    public Boolean logpush() {
        return this.logpush;
    }
    /**
     * @return When the script was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    public GetWorkersScriptsResultPlacement placement() {
        return this.placement;
    }
    /**
     * @return Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;smart&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public String placementMode() {
        return this.placementMode;
    }
    /**
     * @return Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public String placementStatus() {
        return this.placementStatus;
    }
    /**
     * @return List of Workers that will consume logs from the attached Worker.
     * 
     */
    public List<GetWorkersScriptsResultTailConsumer> tailConsumers() {
        return this.tailConsumers;
    }
    /**
     * @return Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;.
     * 
     */
    public String usageModel() {
        return this.usageModel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkersScriptsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdOn;
        private String etag;
        private Boolean hasAssets;
        private Boolean hasModules;
        private String id;
        private Boolean logpush;
        private String modifiedOn;
        private GetWorkersScriptsResultPlacement placement;
        private String placementMode;
        private String placementStatus;
        private List<GetWorkersScriptsResultTailConsumer> tailConsumers;
        private String usageModel;
        public Builder() {}
        public Builder(GetWorkersScriptsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdOn = defaults.createdOn;
    	      this.etag = defaults.etag;
    	      this.hasAssets = defaults.hasAssets;
    	      this.hasModules = defaults.hasModules;
    	      this.id = defaults.id;
    	      this.logpush = defaults.logpush;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.placement = defaults.placement;
    	      this.placementMode = defaults.placementMode;
    	      this.placementStatus = defaults.placementStatus;
    	      this.tailConsumers = defaults.tailConsumers;
    	      this.usageModel = defaults.usageModel;
        }

        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder etag(String etag) {
            if (etag == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "etag");
            }
            this.etag = etag;
            return this;
        }
        @CustomType.Setter
        public Builder hasAssets(Boolean hasAssets) {
            if (hasAssets == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "hasAssets");
            }
            this.hasAssets = hasAssets;
            return this;
        }
        @CustomType.Setter
        public Builder hasModules(Boolean hasModules) {
            if (hasModules == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "hasModules");
            }
            this.hasModules = hasModules;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logpush(Boolean logpush) {
            if (logpush == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "logpush");
            }
            this.logpush = logpush;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder placement(GetWorkersScriptsResultPlacement placement) {
            if (placement == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "placement");
            }
            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder placementMode(String placementMode) {
            if (placementMode == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "placementMode");
            }
            this.placementMode = placementMode;
            return this;
        }
        @CustomType.Setter
        public Builder placementStatus(String placementStatus) {
            if (placementStatus == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "placementStatus");
            }
            this.placementStatus = placementStatus;
            return this;
        }
        @CustomType.Setter
        public Builder tailConsumers(List<GetWorkersScriptsResultTailConsumer> tailConsumers) {
            if (tailConsumers == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "tailConsumers");
            }
            this.tailConsumers = tailConsumers;
            return this;
        }
        public Builder tailConsumers(GetWorkersScriptsResultTailConsumer... tailConsumers) {
            return tailConsumers(List.of(tailConsumers));
        }
        @CustomType.Setter
        public Builder usageModel(String usageModel) {
            if (usageModel == null) {
              throw new MissingRequiredPropertyException("GetWorkersScriptsResult", "usageModel");
            }
            this.usageModel = usageModel;
            return this;
        }
        public GetWorkersScriptsResult build() {
            final var _resultValue = new GetWorkersScriptsResult();
            _resultValue.createdOn = createdOn;
            _resultValue.etag = etag;
            _resultValue.hasAssets = hasAssets;
            _resultValue.hasModules = hasModules;
            _resultValue.id = id;
            _resultValue.logpush = logpush;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.placement = placement;
            _resultValue.placementMode = placementMode;
            _resultValue.placementStatus = placementStatus;
            _resultValue.tailConsumers = tailConsumers;
            _resultValue.usageModel = usageModel;
            return _resultValue;
        }
    }
}
