// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDnsRecordsResultData {
    /**
     * @return Algorithm.
     * 
     */
    private Double algorithm;
    /**
     * @return Altitude of location in meters.
     * 
     */
    private Double altitude;
    /**
     * @return Certificate.
     * 
     */
    private String certificate;
    /**
     * @return Digest.
     * 
     */
    private String digest;
    /**
     * @return Digest Type.
     * 
     */
    private Double digestType;
    /**
     * @return fingerprint.
     * 
     */
    private String fingerprint;
    /**
     * @return Flags for the CAA record.
     * 
     */
    private Object flags;
    /**
     * @return Key Tag.
     * 
     */
    private Double keyTag;
    /**
     * @return Degrees of latitude.
     * 
     */
    private Double latDegrees;
    /**
     * @return Latitude direction.
     * Available values: &#34;N&#34;, &#34;S&#34;.
     * 
     */
    private String latDirection;
    /**
     * @return Minutes of latitude.
     * 
     */
    private Double latMinutes;
    /**
     * @return Seconds of latitude.
     * 
     */
    private Double latSeconds;
    /**
     * @return Degrees of longitude.
     * 
     */
    private Double longDegrees;
    /**
     * @return Longitude direction.
     * Available values: &#34;E&#34;, &#34;W&#34;.
     * 
     */
    private String longDirection;
    /**
     * @return Minutes of longitude.
     * 
     */
    private Double longMinutes;
    /**
     * @return Seconds of longitude.
     * 
     */
    private Double longSeconds;
    /**
     * @return Matching Type.
     * 
     */
    private Double matchingType;
    /**
     * @return Order.
     * 
     */
    private Double order;
    /**
     * @return The port of the service.
     * 
     */
    private Double port;
    /**
     * @return Horizontal precision of location.
     * 
     */
    private Double precisionHorz;
    /**
     * @return Vertical precision of location.
     * 
     */
    private Double precisionVert;
    /**
     * @return Preference.
     * 
     */
    private Double preference;
    /**
     * @return priority.
     * 
     */
    private Double priority;
    /**
     * @return Protocol.
     * 
     */
    private Double protocol;
    /**
     * @return Public Key.
     * 
     */
    private String publicKey;
    /**
     * @return Regex.
     * 
     */
    private String regex;
    /**
     * @return Replacement.
     * 
     */
    private String replacement;
    /**
     * @return Selector.
     * 
     */
    private Double selector;
    /**
     * @return Service.
     * 
     */
    private String service;
    /**
     * @return Size of location in meters.
     * 
     */
    private Double size;
    /**
     * @return Name of the property controlled by this record (e.g.: issue, issuewild, iodef).
     * 
     */
    private String tag;
    /**
     * @return target.
     * 
     */
    private String target;
    /**
     * @return Type.
     * 
     */
    private Double type;
    /**
     * @return Usage.
     * 
     */
    private Double usage;
    /**
     * @return Value of the record. This field&#39;s semantics depend on the chosen tag.
     * 
     */
    private String value;
    /**
     * @return The record weight.
     * 
     */
    private Double weight;

    private GetDnsRecordsResultData() {}
    /**
     * @return Algorithm.
     * 
     */
    public Double algorithm() {
        return this.algorithm;
    }
    /**
     * @return Altitude of location in meters.
     * 
     */
    public Double altitude() {
        return this.altitude;
    }
    /**
     * @return Certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Digest.
     * 
     */
    public String digest() {
        return this.digest;
    }
    /**
     * @return Digest Type.
     * 
     */
    public Double digestType() {
        return this.digestType;
    }
    /**
     * @return fingerprint.
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Flags for the CAA record.
     * 
     */
    public Object flags() {
        return this.flags;
    }
    /**
     * @return Key Tag.
     * 
     */
    public Double keyTag() {
        return this.keyTag;
    }
    /**
     * @return Degrees of latitude.
     * 
     */
    public Double latDegrees() {
        return this.latDegrees;
    }
    /**
     * @return Latitude direction.
     * Available values: &#34;N&#34;, &#34;S&#34;.
     * 
     */
    public String latDirection() {
        return this.latDirection;
    }
    /**
     * @return Minutes of latitude.
     * 
     */
    public Double latMinutes() {
        return this.latMinutes;
    }
    /**
     * @return Seconds of latitude.
     * 
     */
    public Double latSeconds() {
        return this.latSeconds;
    }
    /**
     * @return Degrees of longitude.
     * 
     */
    public Double longDegrees() {
        return this.longDegrees;
    }
    /**
     * @return Longitude direction.
     * Available values: &#34;E&#34;, &#34;W&#34;.
     * 
     */
    public String longDirection() {
        return this.longDirection;
    }
    /**
     * @return Minutes of longitude.
     * 
     */
    public Double longMinutes() {
        return this.longMinutes;
    }
    /**
     * @return Seconds of longitude.
     * 
     */
    public Double longSeconds() {
        return this.longSeconds;
    }
    /**
     * @return Matching Type.
     * 
     */
    public Double matchingType() {
        return this.matchingType;
    }
    /**
     * @return Order.
     * 
     */
    public Double order() {
        return this.order;
    }
    /**
     * @return The port of the service.
     * 
     */
    public Double port() {
        return this.port;
    }
    /**
     * @return Horizontal precision of location.
     * 
     */
    public Double precisionHorz() {
        return this.precisionHorz;
    }
    /**
     * @return Vertical precision of location.
     * 
     */
    public Double precisionVert() {
        return this.precisionVert;
    }
    /**
     * @return Preference.
     * 
     */
    public Double preference() {
        return this.preference;
    }
    /**
     * @return priority.
     * 
     */
    public Double priority() {
        return this.priority;
    }
    /**
     * @return Protocol.
     * 
     */
    public Double protocol() {
        return this.protocol;
    }
    /**
     * @return Public Key.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return Regex.
     * 
     */
    public String regex() {
        return this.regex;
    }
    /**
     * @return Replacement.
     * 
     */
    public String replacement() {
        return this.replacement;
    }
    /**
     * @return Selector.
     * 
     */
    public Double selector() {
        return this.selector;
    }
    /**
     * @return Service.
     * 
     */
    public String service() {
        return this.service;
    }
    /**
     * @return Size of location in meters.
     * 
     */
    public Double size() {
        return this.size;
    }
    /**
     * @return Name of the property controlled by this record (e.g.: issue, issuewild, iodef).
     * 
     */
    public String tag() {
        return this.tag;
    }
    /**
     * @return target.
     * 
     */
    public String target() {
        return this.target;
    }
    /**
     * @return Type.
     * 
     */
    public Double type() {
        return this.type;
    }
    /**
     * @return Usage.
     * 
     */
    public Double usage() {
        return this.usage;
    }
    /**
     * @return Value of the record. This field&#39;s semantics depend on the chosen tag.
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return The record weight.
     * 
     */
    public Double weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsRecordsResultData defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double algorithm;
        private Double altitude;
        private String certificate;
        private String digest;
        private Double digestType;
        private String fingerprint;
        private Object flags;
        private Double keyTag;
        private Double latDegrees;
        private String latDirection;
        private Double latMinutes;
        private Double latSeconds;
        private Double longDegrees;
        private String longDirection;
        private Double longMinutes;
        private Double longSeconds;
        private Double matchingType;
        private Double order;
        private Double port;
        private Double precisionHorz;
        private Double precisionVert;
        private Double preference;
        private Double priority;
        private Double protocol;
        private String publicKey;
        private String regex;
        private String replacement;
        private Double selector;
        private String service;
        private Double size;
        private String tag;
        private String target;
        private Double type;
        private Double usage;
        private String value;
        private Double weight;
        public Builder() {}
        public Builder(GetDnsRecordsResultData defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.altitude = defaults.altitude;
    	      this.certificate = defaults.certificate;
    	      this.digest = defaults.digest;
    	      this.digestType = defaults.digestType;
    	      this.fingerprint = defaults.fingerprint;
    	      this.flags = defaults.flags;
    	      this.keyTag = defaults.keyTag;
    	      this.latDegrees = defaults.latDegrees;
    	      this.latDirection = defaults.latDirection;
    	      this.latMinutes = defaults.latMinutes;
    	      this.latSeconds = defaults.latSeconds;
    	      this.longDegrees = defaults.longDegrees;
    	      this.longDirection = defaults.longDirection;
    	      this.longMinutes = defaults.longMinutes;
    	      this.longSeconds = defaults.longSeconds;
    	      this.matchingType = defaults.matchingType;
    	      this.order = defaults.order;
    	      this.port = defaults.port;
    	      this.precisionHorz = defaults.precisionHorz;
    	      this.precisionVert = defaults.precisionVert;
    	      this.preference = defaults.preference;
    	      this.priority = defaults.priority;
    	      this.protocol = defaults.protocol;
    	      this.publicKey = defaults.publicKey;
    	      this.regex = defaults.regex;
    	      this.replacement = defaults.replacement;
    	      this.selector = defaults.selector;
    	      this.service = defaults.service;
    	      this.size = defaults.size;
    	      this.tag = defaults.tag;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
    	      this.usage = defaults.usage;
    	      this.value = defaults.value;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder algorithm(Double algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder altitude(Double altitude) {
            if (altitude == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "altitude");
            }
            this.altitude = altitude;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder digest(String digest) {
            if (digest == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "digest");
            }
            this.digest = digest;
            return this;
        }
        @CustomType.Setter
        public Builder digestType(Double digestType) {
            if (digestType == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "digestType");
            }
            this.digestType = digestType;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder flags(Object flags) {
            if (flags == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "flags");
            }
            this.flags = flags;
            return this;
        }
        @CustomType.Setter
        public Builder keyTag(Double keyTag) {
            if (keyTag == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "keyTag");
            }
            this.keyTag = keyTag;
            return this;
        }
        @CustomType.Setter
        public Builder latDegrees(Double latDegrees) {
            if (latDegrees == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "latDegrees");
            }
            this.latDegrees = latDegrees;
            return this;
        }
        @CustomType.Setter
        public Builder latDirection(String latDirection) {
            if (latDirection == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "latDirection");
            }
            this.latDirection = latDirection;
            return this;
        }
        @CustomType.Setter
        public Builder latMinutes(Double latMinutes) {
            if (latMinutes == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "latMinutes");
            }
            this.latMinutes = latMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder latSeconds(Double latSeconds) {
            if (latSeconds == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "latSeconds");
            }
            this.latSeconds = latSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder longDegrees(Double longDegrees) {
            if (longDegrees == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "longDegrees");
            }
            this.longDegrees = longDegrees;
            return this;
        }
        @CustomType.Setter
        public Builder longDirection(String longDirection) {
            if (longDirection == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "longDirection");
            }
            this.longDirection = longDirection;
            return this;
        }
        @CustomType.Setter
        public Builder longMinutes(Double longMinutes) {
            if (longMinutes == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "longMinutes");
            }
            this.longMinutes = longMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder longSeconds(Double longSeconds) {
            if (longSeconds == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "longSeconds");
            }
            this.longSeconds = longSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder matchingType(Double matchingType) {
            if (matchingType == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "matchingType");
            }
            this.matchingType = matchingType;
            return this;
        }
        @CustomType.Setter
        public Builder order(Double order) {
            if (order == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "order");
            }
            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder port(Double port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder precisionHorz(Double precisionHorz) {
            if (precisionHorz == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "precisionHorz");
            }
            this.precisionHorz = precisionHorz;
            return this;
        }
        @CustomType.Setter
        public Builder precisionVert(Double precisionVert) {
            if (precisionVert == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "precisionVert");
            }
            this.precisionVert = precisionVert;
            return this;
        }
        @CustomType.Setter
        public Builder preference(Double preference) {
            if (preference == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "preference");
            }
            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Double priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(Double protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder regex(String regex) {
            if (regex == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "regex");
            }
            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder replacement(String replacement) {
            if (replacement == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "replacement");
            }
            this.replacement = replacement;
            return this;
        }
        @CustomType.Setter
        public Builder selector(Double selector) {
            if (selector == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "selector");
            }
            this.selector = selector;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            if (service == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "service");
            }
            this.service = service;
            return this;
        }
        @CustomType.Setter
        public Builder size(Double size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder tag(String tag) {
            if (tag == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "tag");
            }
            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder target(String target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(Double type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder usage(Double usage) {
            if (usage == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "usage");
            }
            this.usage = usage;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Double weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("GetDnsRecordsResultData", "weight");
            }
            this.weight = weight;
            return this;
        }
        public GetDnsRecordsResultData build() {
            final var _resultValue = new GetDnsRecordsResultData();
            _resultValue.algorithm = algorithm;
            _resultValue.altitude = altitude;
            _resultValue.certificate = certificate;
            _resultValue.digest = digest;
            _resultValue.digestType = digestType;
            _resultValue.fingerprint = fingerprint;
            _resultValue.flags = flags;
            _resultValue.keyTag = keyTag;
            _resultValue.latDegrees = latDegrees;
            _resultValue.latDirection = latDirection;
            _resultValue.latMinutes = latMinutes;
            _resultValue.latSeconds = latSeconds;
            _resultValue.longDegrees = longDegrees;
            _resultValue.longDirection = longDirection;
            _resultValue.longMinutes = longMinutes;
            _resultValue.longSeconds = longSeconds;
            _resultValue.matchingType = matchingType;
            _resultValue.order = order;
            _resultValue.port = port;
            _resultValue.precisionHorz = precisionHorz;
            _resultValue.precisionVert = precisionVert;
            _resultValue.preference = preference;
            _resultValue.priority = priority;
            _resultValue.protocol = protocol;
            _resultValue.publicKey = publicKey;
            _resultValue.regex = regex;
            _resultValue.replacement = replacement;
            _resultValue.selector = selector;
            _resultValue.service = service;
            _resultValue.size = size;
            _resultValue.tag = tag;
            _resultValue.target = target;
            _resultValue.type = type;
            _resultValue.usage = usage;
            _resultValue.value = value;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
