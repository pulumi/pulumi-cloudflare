// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class ImageVariantOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageVariantOptionsArgs Empty = new ImageVariantOptionsArgs();

    /**
     * The fit property describes how the width and height dimensions should be interpreted.
     * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
     * 
     */
    @Import(name="fit", required=true)
    private Output<String> fit;

    /**
     * @return The fit property describes how the width and height dimensions should be interpreted.
     * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
     * 
     */
    public Output<String> fit() {
        return this.fit;
    }

    /**
     * Maximum height in image pixels.
     * 
     */
    @Import(name="height", required=true)
    private Output<Double> height;

    /**
     * @return Maximum height in image pixels.
     * 
     */
    public Output<Double> height() {
        return this.height;
    }

    /**
     * What EXIF data should be preserved in the output image.
     * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
     * 
     */
    @Import(name="metadata", required=true)
    private Output<String> metadata;

    /**
     * @return What EXIF data should be preserved in the output image.
     * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
     * 
     */
    public Output<String> metadata() {
        return this.metadata;
    }

    /**
     * Maximum width in image pixels.
     * 
     */
    @Import(name="width", required=true)
    private Output<Double> width;

    /**
     * @return Maximum width in image pixels.
     * 
     */
    public Output<Double> width() {
        return this.width;
    }

    private ImageVariantOptionsArgs() {}

    private ImageVariantOptionsArgs(ImageVariantOptionsArgs $) {
        this.fit = $.fit;
        this.height = $.height;
        this.metadata = $.metadata;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVariantOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVariantOptionsArgs $;

        public Builder() {
            $ = new ImageVariantOptionsArgs();
        }

        public Builder(ImageVariantOptionsArgs defaults) {
            $ = new ImageVariantOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param fit The fit property describes how the width and height dimensions should be interpreted.
         * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fit(Output<String> fit) {
            $.fit = fit;
            return this;
        }

        /**
         * @param fit The fit property describes how the width and height dimensions should be interpreted.
         * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
         * 
         * @return builder
         * 
         */
        public Builder fit(String fit) {
            return fit(Output.of(fit));
        }

        /**
         * @param height Maximum height in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder height(Output<Double> height) {
            $.height = height;
            return this;
        }

        /**
         * @param height Maximum height in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder height(Double height) {
            return height(Output.of(height));
        }

        /**
         * @param metadata What EXIF data should be preserved in the output image.
         * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder metadata(Output<String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata What EXIF data should be preserved in the output image.
         * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder metadata(String metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param width Maximum width in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(Output<Double> width) {
            $.width = width;
            return this;
        }

        /**
         * @param width Maximum width in image pixels.
         * 
         * @return builder
         * 
         */
        public Builder width(Double width) {
            return width(Output.of(width));
        }

        public ImageVariantOptionsArgs build() {
            if ($.fit == null) {
                throw new MissingRequiredPropertyException("ImageVariantOptionsArgs", "fit");
            }
            if ($.height == null) {
                throw new MissingRequiredPropertyException("ImageVariantOptionsArgs", "height");
            }
            if ($.metadata == null) {
                throw new MissingRequiredPropertyException("ImageVariantOptionsArgs", "metadata");
            }
            if ($.width == null) {
                throw new MissingRequiredPropertyException("ImageVariantOptionsArgs", "width");
            }
            return $;
        }
    }

}
