// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustTunnelWarpConnectorConnection;
import com.pulumi.cloudflare.outputs.GetZeroTrustTunnelWarpConnectorFilter;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetZeroTrustTunnelWarpConnectorResult {
    /**
     * @return Cloudflare account ID
     * 
     */
    private String accountId;
    /**
     * @return Cloudflare account ID
     * 
     */
    private String accountTag;
    /**
     * @return Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    private String configSrc;
    /**
     * @return The Cloudflare Tunnel connections between your origin and Cloudflare&#39;s edge.
     * 
     * @deprecated
     * This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
     * 
     */
    @Deprecated /* This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections` */
    private List<GetZeroTrustTunnelWarpConnectorConnection> connections;
    /**
     * @return Timestamp of when the tunnel established at least one connection to Cloudflare&#39;s edge. If `null`, the tunnel is inactive.
     * 
     */
    private String connsActiveAt;
    /**
     * @return Timestamp of when the tunnel became inactive (no connections to Cloudflare&#39;s edge). If `null`, the tunnel is active.
     * 
     */
    private String connsInactiveAt;
    /**
     * @return Timestamp of when the resource was created.
     * 
     */
    private String createdAt;
    /**
     * @return Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     * 
     */
    private String deletedAt;
    private @Nullable GetZeroTrustTunnelWarpConnectorFilter filter;
    /**
     * @return UUID of the tunnel.
     * 
     */
    private String id;
    /**
     * @return Metadata associated with the tunnel.
     * 
     */
    private String metadata;
    /**
     * @return A user-friendly name for a tunnel.
     * 
     */
    private String name;
    /**
     * @return If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
     * 
     * @deprecated
     * Use the config_src field instead.
     * 
     */
    @Deprecated /* Use the config_src field instead. */
    private Boolean remoteConfig;
    /**
     * @return The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
     * 
     */
    private String status;
    /**
     * @return The type of tunnel.
     * Available values: &#34;cfd*tunnel&#34;, &#34;warp*connector&#34;, &#34;warp&#34;, &#34;magic&#34;, &#34;ip_sec&#34;, &#34;gre&#34;, &#34;cni&#34;.
     * 
     */
    private String tunType;
    /**
     * @return UUID of the tunnel.
     * 
     */
    private @Nullable String tunnelId;

    private GetZeroTrustTunnelWarpConnectorResult() {}
    /**
     * @return Cloudflare account ID
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Cloudflare account ID
     * 
     */
    public String accountTag() {
        return this.accountTag;
    }
    /**
     * @return Indicates if this is a locally or remotely configured tunnel. If `local`, manage the tunnel using a YAML file on the origin machine. If `cloudflare`, manage the tunnel on the Zero Trust dashboard.
     * Available values: &#34;local&#34;, &#34;cloudflare&#34;.
     * 
     */
    public String configSrc() {
        return this.configSrc;
    }
    /**
     * @return The Cloudflare Tunnel connections between your origin and Cloudflare&#39;s edge.
     * 
     * @deprecated
     * This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections`
     * 
     */
    @Deprecated /* This field will start returning an empty array. To fetch the connections of a given tunnel, please use the dedicated endpoint `/accounts/{account_id}/{tunnel_type}/{tunnel_id}/connections` */
    public List<GetZeroTrustTunnelWarpConnectorConnection> connections() {
        return this.connections;
    }
    /**
     * @return Timestamp of when the tunnel established at least one connection to Cloudflare&#39;s edge. If `null`, the tunnel is inactive.
     * 
     */
    public String connsActiveAt() {
        return this.connsActiveAt;
    }
    /**
     * @return Timestamp of when the tunnel became inactive (no connections to Cloudflare&#39;s edge). If `null`, the tunnel is active.
     * 
     */
    public String connsInactiveAt() {
        return this.connsInactiveAt;
    }
    /**
     * @return Timestamp of when the resource was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Timestamp of when the resource was deleted. If `null`, the resource has not been deleted.
     * 
     */
    public String deletedAt() {
        return this.deletedAt;
    }
    public Optional<GetZeroTrustTunnelWarpConnectorFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return UUID of the tunnel.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Metadata associated with the tunnel.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return A user-friendly name for a tunnel.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return If `true`, the tunnel can be configured remotely from the Zero Trust dashboard. If `false`, the tunnel must be configured locally on the origin machine.
     * 
     * @deprecated
     * Use the config_src field instead.
     * 
     */
    @Deprecated /* Use the config_src field instead. */
    public Boolean remoteConfig() {
        return this.remoteConfig;
    }
    /**
     * @return The status of the tunnel. Valid values are `inactive` (tunnel has never been run), `degraded` (tunnel is active and able to serve traffic but in an unhealthy state), `healthy` (tunnel is active and able to serve traffic), or `down` (tunnel can not serve traffic as it has no connections to the Cloudflare Edge).
     * Available values: &#34;inactive&#34;, &#34;degraded&#34;, &#34;healthy&#34;, &#34;down&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The type of tunnel.
     * Available values: &#34;cfd*tunnel&#34;, &#34;warp*connector&#34;, &#34;warp&#34;, &#34;magic&#34;, &#34;ip_sec&#34;, &#34;gre&#34;, &#34;cni&#34;.
     * 
     */
    public String tunType() {
        return this.tunType;
    }
    /**
     * @return UUID of the tunnel.
     * 
     */
    public Optional<String> tunnelId() {
        return Optional.ofNullable(this.tunnelId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustTunnelWarpConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String accountTag;
        private String configSrc;
        private List<GetZeroTrustTunnelWarpConnectorConnection> connections;
        private String connsActiveAt;
        private String connsInactiveAt;
        private String createdAt;
        private String deletedAt;
        private @Nullable GetZeroTrustTunnelWarpConnectorFilter filter;
        private String id;
        private String metadata;
        private String name;
        private Boolean remoteConfig;
        private String status;
        private String tunType;
        private @Nullable String tunnelId;
        public Builder() {}
        public Builder(GetZeroTrustTunnelWarpConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.accountTag = defaults.accountTag;
    	      this.configSrc = defaults.configSrc;
    	      this.connections = defaults.connections;
    	      this.connsActiveAt = defaults.connsActiveAt;
    	      this.connsInactiveAt = defaults.connsInactiveAt;
    	      this.createdAt = defaults.createdAt;
    	      this.deletedAt = defaults.deletedAt;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.remoteConfig = defaults.remoteConfig;
    	      this.status = defaults.status;
    	      this.tunType = defaults.tunType;
    	      this.tunnelId = defaults.tunnelId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder accountTag(String accountTag) {
            if (accountTag == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "accountTag");
            }
            this.accountTag = accountTag;
            return this;
        }
        @CustomType.Setter
        public Builder configSrc(String configSrc) {
            if (configSrc == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "configSrc");
            }
            this.configSrc = configSrc;
            return this;
        }
        @CustomType.Setter
        public Builder connections(List<GetZeroTrustTunnelWarpConnectorConnection> connections) {
            if (connections == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "connections");
            }
            this.connections = connections;
            return this;
        }
        public Builder connections(GetZeroTrustTunnelWarpConnectorConnection... connections) {
            return connections(List.of(connections));
        }
        @CustomType.Setter
        public Builder connsActiveAt(String connsActiveAt) {
            if (connsActiveAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "connsActiveAt");
            }
            this.connsActiveAt = connsActiveAt;
            return this;
        }
        @CustomType.Setter
        public Builder connsInactiveAt(String connsInactiveAt) {
            if (connsInactiveAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "connsInactiveAt");
            }
            this.connsInactiveAt = connsInactiveAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder deletedAt(String deletedAt) {
            if (deletedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "deletedAt");
            }
            this.deletedAt = deletedAt;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetZeroTrustTunnelWarpConnectorFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder remoteConfig(Boolean remoteConfig) {
            if (remoteConfig == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "remoteConfig");
            }
            this.remoteConfig = remoteConfig;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tunType(String tunType) {
            if (tunType == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustTunnelWarpConnectorResult", "tunType");
            }
            this.tunType = tunType;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelId(@Nullable String tunnelId) {

            this.tunnelId = tunnelId;
            return this;
        }
        public GetZeroTrustTunnelWarpConnectorResult build() {
            final var _resultValue = new GetZeroTrustTunnelWarpConnectorResult();
            _resultValue.accountId = accountId;
            _resultValue.accountTag = accountTag;
            _resultValue.configSrc = configSrc;
            _resultValue.connections = connections;
            _resultValue.connsActiveAt = connsActiveAt;
            _resultValue.connsInactiveAt = connsInactiveAt;
            _resultValue.createdAt = createdAt;
            _resultValue.deletedAt = deletedAt;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.metadata = metadata;
            _resultValue.name = name;
            _resultValue.remoteConfig = remoteConfig;
            _resultValue.status = status;
            _resultValue.tunType = tunType;
            _resultValue.tunnelId = tunnelId;
            return _resultValue;
        }
    }
}
