// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.HyperdriveConfigCachingArgs;
import com.pulumi.cloudflare.inputs.HyperdriveConfigOriginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HyperdriveConfigState extends com.pulumi.resources.ResourceArgs {

    public static final HyperdriveConfigState Empty = new HyperdriveConfigState();

    /**
     * The account identifier to target for the resource.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The caching details for the Hyperdrive configuration.
     * 
     */
    @Import(name="caching")
    private @Nullable Output<HyperdriveConfigCachingArgs> caching;

    /**
     * @return The caching details for the Hyperdrive configuration.
     * 
     */
    public Optional<Output<HyperdriveConfigCachingArgs>> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * The name of the Hyperdrive configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Hyperdrive configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The origin details for the Hyperdrive configuration.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<HyperdriveConfigOriginArgs> origin;

    /**
     * @return The origin details for the Hyperdrive configuration.
     * 
     */
    public Optional<Output<HyperdriveConfigOriginArgs>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The identifier of this resource. This is the hyperdrive config value.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The identifier of this resource. This is the hyperdrive config value.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private HyperdriveConfigState() {}

    private HyperdriveConfigState(HyperdriveConfigState $) {
        this.accountId = $.accountId;
        this.caching = $.caching;
        this.name = $.name;
        this.origin = $.origin;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperdriveConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperdriveConfigState $;

        public Builder() {
            $ = new HyperdriveConfigState();
        }

        public Builder(HyperdriveConfigState defaults) {
            $ = new HyperdriveConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier to target for the resource.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param caching The caching details for the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder caching(@Nullable Output<HyperdriveConfigCachingArgs> caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param caching The caching details for the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder caching(HyperdriveConfigCachingArgs caching) {
            return caching(Output.of(caching));
        }

        /**
         * @param name The name of the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param origin The origin details for the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<HyperdriveConfigOriginArgs> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The origin details for the Hyperdrive configuration.
         * 
         * @return builder
         * 
         */
        public Builder origin(HyperdriveConfigOriginArgs origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param resourceId The identifier of this resource. This is the hyperdrive config value.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The identifier of this resource. This is the hyperdrive config value.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public HyperdriveConfigState build() {
            return $;
        }
    }

}
