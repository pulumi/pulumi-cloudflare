// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerPoolsResultLoadShedding {
    /**
     * @return The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
     * 
     */
    private Double defaultPercent;
    /**
     * @return The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
     * Available values: &#34;random&#34;, &#34;hash&#34;.
     * 
     */
    private String defaultPolicy;
    /**
     * @return The percent of existing sessions to shed from the pool, according to the session policy.
     * 
     */
    private Double sessionPercent;
    /**
     * @return Only the hash policy is supported for existing sessions (to avoid exponential decay).
     * Available values: &#34;hash&#34;.
     * 
     */
    private String sessionPolicy;

    private GetLoadBalancerPoolsResultLoadShedding() {}
    /**
     * @return The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
     * 
     */
    public Double defaultPercent() {
        return this.defaultPercent;
    }
    /**
     * @return The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
     * Available values: &#34;random&#34;, &#34;hash&#34;.
     * 
     */
    public String defaultPolicy() {
        return this.defaultPolicy;
    }
    /**
     * @return The percent of existing sessions to shed from the pool, according to the session policy.
     * 
     */
    public Double sessionPercent() {
        return this.sessionPercent;
    }
    /**
     * @return Only the hash policy is supported for existing sessions (to avoid exponential decay).
     * Available values: &#34;hash&#34;.
     * 
     */
    public String sessionPolicy() {
        return this.sessionPolicy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerPoolsResultLoadShedding defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double defaultPercent;
        private String defaultPolicy;
        private Double sessionPercent;
        private String sessionPolicy;
        public Builder() {}
        public Builder(GetLoadBalancerPoolsResultLoadShedding defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultPercent = defaults.defaultPercent;
    	      this.defaultPolicy = defaults.defaultPolicy;
    	      this.sessionPercent = defaults.sessionPercent;
    	      this.sessionPolicy = defaults.sessionPolicy;
        }

        @CustomType.Setter
        public Builder defaultPercent(Double defaultPercent) {
            if (defaultPercent == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolsResultLoadShedding", "defaultPercent");
            }
            this.defaultPercent = defaultPercent;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPolicy(String defaultPolicy) {
            if (defaultPolicy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolsResultLoadShedding", "defaultPolicy");
            }
            this.defaultPolicy = defaultPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPercent(Double sessionPercent) {
            if (sessionPercent == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolsResultLoadShedding", "sessionPercent");
            }
            this.sessionPercent = sessionPercent;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPolicy(String sessionPolicy) {
            if (sessionPolicy == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolsResultLoadShedding", "sessionPolicy");
            }
            this.sessionPolicy = sessionPolicy;
            return this;
        }
        public GetLoadBalancerPoolsResultLoadShedding build() {
            final var _resultValue = new GetLoadBalancerPoolsResultLoadShedding();
            _resultValue.defaultPercent = defaultPercent;
            _resultValue.defaultPolicy = defaultPolicy;
            _resultValue.sessionPercent = sessionPercent;
            _resultValue.sessionPolicy = sessionPolicy;
            return _resultValue;
        }
    }
}
