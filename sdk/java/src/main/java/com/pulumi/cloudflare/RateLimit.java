// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.RateLimitArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.RateLimitState;
import com.pulumi.cloudflare.outputs.RateLimitAction;
import com.pulumi.cloudflare.outputs.RateLimitBypass;
import com.pulumi.cloudflare.outputs.RateLimitMatch;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * &gt; `cloudflare.RateLimit` is in a deprecation phase until June 15th, 2025.
 *   During this time period, this resource is still
 *   fully supported but you are strongly advised to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.RateLimit;
 * import com.pulumi.cloudflare.RateLimitArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitActionArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitActionResponseArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchRequestArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchResponseArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleRateLimit = new RateLimit("exampleRateLimit", RateLimitArgs.builder()
 *             .zoneId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .action(RateLimitActionArgs.builder()
 *                 .mode("simulate")
 *                 .response(RateLimitActionResponseArgs.builder()
 *                     .body("<error>This request has been rate-limited.</error>")
 *                     .contentType("text/xml")
 *                     .build())
 *                 .timeout(86400)
 *                 .build())
 *             .match(RateLimitMatchArgs.builder()
 *                 .headers(RateLimitMatchHeaderArgs.builder()
 *                     .name("Cf-Cache-Status")
 *                     .op("eq")
 *                     .value("HIT")
 *                     .build())
 *                 .request(RateLimitMatchRequestArgs.builder()
 *                     .methods(                    
 *                         "GET",
 *                         "POST")
 *                     .schemes(                    
 *                         "HTTP",
 *                         "HTTPS")
 *                     .url("*.example.org/path*")
 *                     .build())
 *                 .response(RateLimitMatchResponseArgs.builder()
 *                     .originTraffic(true)
 *                     .build())
 *                 .build())
 *             .period(900)
 *             .threshold(60)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/rateLimit:RateLimit example &#39;&lt;zone_id&gt;/&lt;rate_limit_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/rateLimit:RateLimit")
public class RateLimit extends com.pulumi.resources.CustomResource {
    /**
     * The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    @Export(name="action", refs={RateLimitAction.class}, tree="[0]")
    private Output<RateLimitAction> action;

    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public Output<RateLimitAction> action() {
        return this.action;
    }
    /**
     * Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    @Export(name="bypasses", refs={List.class,RateLimitBypass.class}, tree="[0,1]")
    private Output<List<RateLimitBypass>> bypasses;

    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    public Output<List<RateLimitBypass>> bypasses() {
        return this.bypasses;
    }
    /**
     * An informative summary of the rate limit. This value is sanitized and any tags will be removed.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return An informative summary of the rate limit. This value is sanitized and any tags will be removed.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * When true, indicates that the rate limit is currently disabled.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> disabled;

    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    @Export(name="match", refs={RateLimitMatch.class}, tree="[0]")
    private Output<RateLimitMatch> match;

    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    public Output<RateLimitMatch> match() {
        return this.match;
    }
    /**
     * The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    @Export(name="period", refs={Double.class}, tree="[0]")
    private Output<Double> period;

    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    public Output<Double> period() {
        return this.period;
    }
    /**
     * The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    @Export(name="threshold", refs={Double.class}, tree="[0]")
    private Output<Double> threshold;

    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }
    /**
     * Identifier
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RateLimit(java.lang.String name) {
        this(name, RateLimitArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RateLimit(java.lang.String name, RateLimitArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RateLimit(java.lang.String name, RateLimitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/rateLimit:RateLimit", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private RateLimit(java.lang.String name, Output<java.lang.String> id, @Nullable RateLimitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/rateLimit:RateLimit", name, state, makeResourceOptions(options, id), false);
    }

    private static RateLimitArgs makeArgs(RateLimitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RateLimitArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RateLimit get(java.lang.String name, Output<java.lang.String> id, @Nullable RateLimitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RateLimit(name, id, state, options);
    }
}
