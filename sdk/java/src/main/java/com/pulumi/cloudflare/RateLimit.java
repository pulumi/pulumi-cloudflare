// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.RateLimitArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.RateLimitState;
import com.pulumi.cloudflare.outputs.RateLimitAction;
import com.pulumi.cloudflare.outputs.RateLimitCorrelate;
import com.pulumi.cloudflare.outputs.RateLimitMatch;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Cloudflare rate limit resource for a given zone. This can
 * be used to limit the traffic you receive zone-wide, or matching more
 * specific types of requests/responses.
 * 
 * &gt; `cloudflare.RateLimit` is in a deprecation phase that will last for 14
 *   months (July 1st, 2024). During this time period, this resource is still
 *   fully supported but you are strongly advised to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.RateLimit;
 * import com.pulumi.cloudflare.RateLimitArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchRequestArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitMatchResponseArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitActionArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitActionResponseArgs;
 * import com.pulumi.cloudflare.inputs.RateLimitCorrelateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new RateLimit("example", RateLimitArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .threshold(2000)
 *             .period(2)
 *             .match(RateLimitMatchArgs.builder()
 *                 .request(RateLimitMatchRequestArgs.builder()
 *                     .urlPattern(String.format("%s/*", cloudflareZone))
 *                     .schemes(                    
 *                         "HTTP",
 *                         "HTTPS")
 *                     .methods(                    
 *                         "GET",
 *                         "POST",
 *                         "PUT",
 *                         "DELETE",
 *                         "PATCH",
 *                         "HEAD")
 *                     .build())
 *                 .response(RateLimitMatchResponseArgs.builder()
 *                     .statuses(                    
 *                         200,
 *                         201,
 *                         202,
 *                         301,
 *                         429)
 *                     .originTraffic(false)
 *                     .headers(                    
 *                         Map.ofEntries(
 *                             Map.entry("name", "Host"),
 *                             Map.entry("op", "eq"),
 *                             Map.entry("value", "localhost")
 *                         ),
 *                         Map.ofEntries(
 *                             Map.entry("name", "X-Example"),
 *                             Map.entry("op", "ne"),
 *                             Map.entry("value", "my-example")
 *                         ))
 *                     .build())
 *                 .build())
 *             .action(RateLimitActionArgs.builder()
 *                 .mode("simulate")
 *                 .timeout(43200)
 *                 .response(RateLimitActionResponseArgs.builder()
 *                     .contentType("text/plain")
 *                     .body("custom response body")
 *                     .build())
 *                 .build())
 *             .correlate(RateLimitCorrelateArgs.builder()
 *                 .by("nat")
 *                 .build())
 *             .disabled(false)
 *             .description("example rate limit for a zone")
 *             .bypassUrlPatterns(            
 *                 "example.com/bypass1",
 *                 "example.com/bypass2")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/rateLimit:RateLimit example &lt;zone_id&gt;/&lt;rate_limit_id&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/rateLimit:RateLimit")
public class RateLimit extends com.pulumi.resources.CustomResource {
    /**
     * The action to be performed when the threshold of matched traffic within the period defined is exceeded.
     * 
     */
    @Export(name="action", refs={RateLimitAction.class}, tree="[0]")
    private Output<RateLimitAction> action;

    /**
     * @return The action to be performed when the threshold of matched traffic within the period defined is exceeded.
     * 
     */
    public Output<RateLimitAction> action() {
        return this.action;
    }
    @Export(name="bypassUrlPatterns", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> bypassUrlPatterns;

    public Output<Optional<List<String>>> bypassUrlPatterns() {
        return Codegen.optional(this.bypassUrlPatterns);
    }
    /**
     * Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
     * 
     */
    @Export(name="correlate", refs={RateLimitCorrelate.class}, tree="[0]")
    private Output</* @Nullable */ RateLimitCorrelate> correlate;

    /**
     * @return Determines how rate limiting is applied. By default if not specified, rate limiting applies to the clients IP address.
     * 
     */
    public Output<Optional<RateLimitCorrelate>> correlate() {
        return Codegen.optional(this.correlate);
    }
    /**
     * A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A note that you can use to describe the reason for a rate limit. This value is sanitized and all tags are removed.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Whether this ratelimit is currently disabled. Defaults to `false`.
     * 
     */
    @Export(name="disabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> disabled;

    /**
     * @return Whether this ratelimit is currently disabled. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> disabled() {
        return Codegen.optional(this.disabled);
    }
    /**
     * Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
     * 
     */
    @Export(name="match", refs={RateLimitMatch.class}, tree="[0]")
    private Output<RateLimitMatch> match;

    /**
     * @return Determines which traffic the rate limit counts towards the threshold. By default matches all traffic in the zone.
     * 
     */
    public Output<RateLimitMatch> match() {
        return this.match;
    }
    /**
     * The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
     * 
     */
    @Export(name="period", refs={Integer.class}, tree="[0]")
    private Output<Integer> period;

    /**
     * @return The time in seconds to count matching traffic. If the count exceeds threshold within this period the action will be performed.
     * 
     */
    public Output<Integer> period() {
        return this.period;
    }
    /**
     * The threshold that triggers the rate limit mitigations, combine with period.
     * 
     */
    @Export(name="threshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> threshold;

    /**
     * @return The threshold that triggers the rate limit mitigations, combine with period.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public RateLimit(String name) {
        this(name, RateLimitArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public RateLimit(String name, RateLimitArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public RateLimit(String name, RateLimitArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/rateLimit:RateLimit", name, args == null ? RateLimitArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private RateLimit(String name, Output<String> id, @Nullable RateLimitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/rateLimit:RateLimit", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static RateLimit get(String name, Output<String> id, @Nullable RateLimitState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new RateLimit(name, id, state, options);
    }
}
