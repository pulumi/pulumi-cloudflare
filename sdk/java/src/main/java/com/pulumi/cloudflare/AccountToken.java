// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.AccountTokenArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.AccountTokenState;
import com.pulumi.cloudflare.outputs.AccountTokenCondition;
import com.pulumi.cloudflare.outputs.AccountTokenPolicy;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.AccountToken;
 * import com.pulumi.cloudflare.AccountTokenArgs;
 * import com.pulumi.cloudflare.inputs.AccountTokenPolicyArgs;
 * import com.pulumi.cloudflare.inputs.AccountTokenConditionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleAccountToken = new AccountToken("exampleAccountToken", AccountTokenArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .name("readonly token")
 *             .policies(AccountTokenPolicyArgs.builder()
 *                 .effect("allow")
 *                 .permission_groups(List.of(                
 *                     Map.ofEntries(
 *                         Map.entry("id", "c8fed203ed3043cba015a93ad1616f1f"),
 *                         Map.entry("meta", Map.ofEntries(
 *                             Map.entry("key", "key"),
 *                             Map.entry("value", "value")
 *                         ))
 *                     ),
 *                     Map.ofEntries(
 *                         Map.entry("id", "82e64a83756745bbbb1c9c2701bf816b"),
 *                         Map.entry("meta", Map.ofEntries(
 *                             Map.entry("key", "key"),
 *                             Map.entry("value", "value")
 *                         ))
 *                     )))
 *                 .resources(Map.of("foo", "string"))
 *                 .build())
 *             .condition(AccountTokenConditionArgs.builder()
 *                 .request_ip(Map.ofEntries(
 *                     Map.entry("in", List.of(                    
 *                         "123.123.123.0/24",
 *                         "2606:4700::/32")),
 *                     Map.entry("notIn", List.of(                    
 *                         "123.123.123.100/24",
 *                         "2606:4700:4700::/48"))
 *                 ))
 *                 .build())
 *             .expiresOn("2020-01-01T00:00:00Z")
 *             .notBefore("2018-07-01T05:20:00Z")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/accountToken:AccountToken example &#39;&lt;account_id&gt;/&lt;token_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/accountToken:AccountToken")
public class AccountToken extends com.pulumi.resources.CustomResource {
    /**
     * Account identifier tag.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    @Export(name="condition", refs={AccountTokenCondition.class}, tree="[0]")
    private Output</* @Nullable */ AccountTokenCondition> condition;

    public Output<Optional<AccountTokenCondition>> condition() {
        return Codegen.optional(this.condition);
    }
    /**
     * The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    @Export(name="expiresOn", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> expiresOn;

    /**
     * @return The expiration time on or after which the JWT MUST NOT be accepted for processing.
     * 
     */
    public Output<Optional<String>> expiresOn() {
        return Codegen.optional(this.expiresOn);
    }
    /**
     * The time on which the token was created.
     * 
     */
    @Export(name="issuedOn", refs={String.class}, tree="[0]")
    private Output<String> issuedOn;

    /**
     * @return The time on which the token was created.
     * 
     */
    public Output<String> issuedOn() {
        return this.issuedOn;
    }
    /**
     * Last time the token was used.
     * 
     */
    @Export(name="lastUsedOn", refs={String.class}, tree="[0]")
    private Output<String> lastUsedOn;

    /**
     * @return Last time the token was used.
     * 
     */
    public Output<String> lastUsedOn() {
        return this.lastUsedOn;
    }
    /**
     * Last time the token was modified.
     * 
     */
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    /**
     * @return Last time the token was modified.
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * Token name.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Token name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The time before which the token MUST NOT be accepted for processing.
     * 
     */
    @Export(name="notBefore", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> notBefore;

    /**
     * @return The time before which the token MUST NOT be accepted for processing.
     * 
     */
    public Output<Optional<String>> notBefore() {
        return Codegen.optional(this.notBefore);
    }
    /**
     * List of access policies assigned to the token.
     * 
     */
    @Export(name="policies", refs={List.class,AccountTokenPolicy.class}, tree="[0,1]")
    private Output<List<AccountTokenPolicy>> policies;

    /**
     * @return List of access policies assigned to the token.
     * 
     */
    public Output<List<AccountTokenPolicy>> policies() {
        return this.policies;
    }
    /**
     * Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of the token.
     * Available values: &#34;active&#34;, &#34;disabled&#34;, &#34;expired&#34;.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The token value.
     * 
     */
    @Export(name="value", refs={String.class}, tree="[0]")
    private Output<String> value;

    /**
     * @return The token value.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AccountToken(java.lang.String name) {
        this(name, AccountTokenArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AccountToken(java.lang.String name, AccountTokenArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AccountToken(java.lang.String name, AccountTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/accountToken:AccountToken", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private AccountToken(java.lang.String name, Output<java.lang.String> id, @Nullable AccountTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/accountToken:AccountToken", name, state, makeResourceOptions(options, id), false);
    }

    private static AccountTokenArgs makeArgs(AccountTokenArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AccountTokenArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "value"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AccountToken get(java.lang.String name, Output<java.lang.String> id, @Nullable AccountTokenState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AccountToken(name, id, state, options);
    }
}
