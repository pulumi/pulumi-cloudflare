// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.DlpProfileEntryPatternArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DlpProfileEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DlpProfileEntryArgs Empty = new DlpProfileEntryArgs();

    /**
     * Whether the entry is active. Defaults to `false`.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the entry is active. Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Unique entry identifier.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Unique entry identifier.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the entry to deploy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the entry to deploy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="pattern")
    private @Nullable Output<DlpProfileEntryPatternArgs> pattern;

    public Optional<Output<DlpProfileEntryPatternArgs>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    private DlpProfileEntryArgs() {}

    private DlpProfileEntryArgs(DlpProfileEntryArgs $) {
        this.enabled = $.enabled;
        this.id = $.id;
        this.name = $.name;
        this.pattern = $.pattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DlpProfileEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DlpProfileEntryArgs $;

        public Builder() {
            $ = new DlpProfileEntryArgs();
        }

        public Builder(DlpProfileEntryArgs defaults) {
            $ = new DlpProfileEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the entry is active. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the entry is active. Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id Unique entry identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique entry identifier.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the entry to deploy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the entry to deploy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pattern(@Nullable Output<DlpProfileEntryPatternArgs> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(DlpProfileEntryPatternArgs pattern) {
            return pattern(Output.of(pattern));
        }

        public DlpProfileEntryArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DlpProfileEntryArgs", "name");
            }
            return $;
        }
    }

}
