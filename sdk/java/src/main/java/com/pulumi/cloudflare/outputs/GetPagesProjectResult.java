// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetPagesProjectBuildConfig;
import com.pulumi.cloudflare.outputs.GetPagesProjectCanonicalDeployment;
import com.pulumi.cloudflare.outputs.GetPagesProjectDeploymentConfigs;
import com.pulumi.cloudflare.outputs.GetPagesProjectLatestDeployment;
import com.pulumi.cloudflare.outputs.GetPagesProjectSource;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPagesProjectResult {
    /**
     * @return Identifier
     * 
     */
    private String accountId;
    /**
     * @return Configs for the project build process.
     * 
     */
    private GetPagesProjectBuildConfig buildConfig;
    /**
     * @return Most recent deployment to the repo.
     * 
     */
    private GetPagesProjectCanonicalDeployment canonicalDeployment;
    /**
     * @return When the project was created.
     * 
     */
    private String createdOn;
    /**
     * @return Configs for deployments in a project.
     * 
     */
    private GetPagesProjectDeploymentConfigs deploymentConfigs;
    /**
     * @return A list of associated custom domains for the project.
     * 
     */
    private List<String> domains;
    /**
     * @return Id of the project.
     * 
     */
    private String id;
    /**
     * @return Most recent deployment to the repo.
     * 
     */
    private GetPagesProjectLatestDeployment latestDeployment;
    /**
     * @return Name of the project.
     * 
     */
    private String name;
    /**
     * @return Production branch of the project. Used to identify production deployments.
     * 
     */
    private String productionBranch;
    /**
     * @return Name of the project.
     * 
     */
    private String projectName;
    private GetPagesProjectSource source;
    /**
     * @return The Cloudflare subdomain associated with the project.
     * 
     */
    private String subdomain;

    private GetPagesProjectResult() {}
    /**
     * @return Identifier
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Configs for the project build process.
     * 
     */
    public GetPagesProjectBuildConfig buildConfig() {
        return this.buildConfig;
    }
    /**
     * @return Most recent deployment to the repo.
     * 
     */
    public GetPagesProjectCanonicalDeployment canonicalDeployment() {
        return this.canonicalDeployment;
    }
    /**
     * @return When the project was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Configs for deployments in a project.
     * 
     */
    public GetPagesProjectDeploymentConfigs deploymentConfigs() {
        return this.deploymentConfigs;
    }
    /**
     * @return A list of associated custom domains for the project.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return Id of the project.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Most recent deployment to the repo.
     * 
     */
    public GetPagesProjectLatestDeployment latestDeployment() {
        return this.latestDeployment;
    }
    /**
     * @return Name of the project.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Production branch of the project. Used to identify production deployments.
     * 
     */
    public String productionBranch() {
        return this.productionBranch;
    }
    /**
     * @return Name of the project.
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    public GetPagesProjectSource source() {
        return this.source;
    }
    /**
     * @return The Cloudflare subdomain associated with the project.
     * 
     */
    public String subdomain() {
        return this.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPagesProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private GetPagesProjectBuildConfig buildConfig;
        private GetPagesProjectCanonicalDeployment canonicalDeployment;
        private String createdOn;
        private GetPagesProjectDeploymentConfigs deploymentConfigs;
        private List<String> domains;
        private String id;
        private GetPagesProjectLatestDeployment latestDeployment;
        private String name;
        private String productionBranch;
        private String projectName;
        private GetPagesProjectSource source;
        private String subdomain;
        public Builder() {}
        public Builder(GetPagesProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.buildConfig = defaults.buildConfig;
    	      this.canonicalDeployment = defaults.canonicalDeployment;
    	      this.createdOn = defaults.createdOn;
    	      this.deploymentConfigs = defaults.deploymentConfigs;
    	      this.domains = defaults.domains;
    	      this.id = defaults.id;
    	      this.latestDeployment = defaults.latestDeployment;
    	      this.name = defaults.name;
    	      this.productionBranch = defaults.productionBranch;
    	      this.projectName = defaults.projectName;
    	      this.source = defaults.source;
    	      this.subdomain = defaults.subdomain;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder buildConfig(GetPagesProjectBuildConfig buildConfig) {
            if (buildConfig == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "buildConfig");
            }
            this.buildConfig = buildConfig;
            return this;
        }
        @CustomType.Setter
        public Builder canonicalDeployment(GetPagesProjectCanonicalDeployment canonicalDeployment) {
            if (canonicalDeployment == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "canonicalDeployment");
            }
            this.canonicalDeployment = canonicalDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder deploymentConfigs(GetPagesProjectDeploymentConfigs deploymentConfigs) {
            if (deploymentConfigs == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "deploymentConfigs");
            }
            this.deploymentConfigs = deploymentConfigs;
            return this;
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder latestDeployment(GetPagesProjectLatestDeployment latestDeployment) {
            if (latestDeployment == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "latestDeployment");
            }
            this.latestDeployment = latestDeployment;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder productionBranch(String productionBranch) {
            if (productionBranch == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "productionBranch");
            }
            this.productionBranch = productionBranch;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder source(GetPagesProjectSource source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(String subdomain) {
            if (subdomain == null) {
              throw new MissingRequiredPropertyException("GetPagesProjectResult", "subdomain");
            }
            this.subdomain = subdomain;
            return this;
        }
        public GetPagesProjectResult build() {
            final var _resultValue = new GetPagesProjectResult();
            _resultValue.accountId = accountId;
            _resultValue.buildConfig = buildConfig;
            _resultValue.canonicalDeployment = canonicalDeployment;
            _resultValue.createdOn = createdOn;
            _resultValue.deploymentConfigs = deploymentConfigs;
            _resultValue.domains = domains;
            _resultValue.id = id;
            _resultValue.latestDeployment = latestDeployment;
            _resultValue.name = name;
            _resultValue.productionBranch = productionBranch;
            _resultValue.projectName = projectName;
            _resultValue.source = source;
            _resultValue.subdomain = subdomain;
            return _resultValue;
        }
    }
}
