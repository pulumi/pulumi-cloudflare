// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HealthcheckHttpConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final HealthcheckHttpConfigArgs Empty = new HealthcheckHttpConfigArgs();

    /**
     * Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    @Import(name="allowInsecure")
    private @Nullable Output<Boolean> allowInsecure;

    /**
     * @return Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    /**
     * A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    @Import(name="expectedBody")
    private @Nullable Output<String> expectedBody;

    /**
     * @return A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    public Optional<Output<String>> expectedBody() {
        return Optional.ofNullable(this.expectedBody);
    }

    /**
     * The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    @Import(name="expectedCodes")
    private @Nullable Output<List<String>> expectedCodes;

    /**
     * @return The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    public Optional<Output<List<String>>> expectedCodes() {
        return Optional.ofNullable(this.expectedCodes);
    }

    /**
     * Follow redirects if the origin returns a 3xx status code.
     * 
     */
    @Import(name="followRedirects")
    private @Nullable Output<Boolean> followRedirects;

    /**
     * @return Follow redirects if the origin returns a 3xx status code.
     * 
     */
    public Optional<Output<Boolean>> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }

    /**
     * The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    @Import(name="header")
    private @Nullable Output<Map<String,List<String>>> header;

    /**
     * @return The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * The HTTP method to use for the health check.
     * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return The HTTP method to use for the health check.
     * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The endpoint path to health check against.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The endpoint path to health check against.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    private HealthcheckHttpConfigArgs() {}

    private HealthcheckHttpConfigArgs(HealthcheckHttpConfigArgs $) {
        this.allowInsecure = $.allowInsecure;
        this.expectedBody = $.expectedBody;
        this.expectedCodes = $.expectedCodes;
        this.followRedirects = $.followRedirects;
        this.header = $.header;
        this.method = $.method;
        this.path = $.path;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthcheckHttpConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthcheckHttpConfigArgs $;

        public Builder() {
            $ = new HealthcheckHttpConfigArgs();
        }

        public Builder(HealthcheckHttpConfigArgs defaults) {
            $ = new HealthcheckHttpConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowInsecure Do not validate the certificate when the health check uses HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        /**
         * @param allowInsecure Do not validate the certificate when the health check uses HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        /**
         * @param expectedBody A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder expectedBody(@Nullable Output<String> expectedBody) {
            $.expectedBody = expectedBody;
            return this;
        }

        /**
         * @param expectedBody A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
         * 
         * @return builder
         * 
         */
        public Builder expectedBody(String expectedBody) {
            return expectedBody(Output.of(expectedBody));
        }

        /**
         * @param expectedCodes The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
         * 
         * @return builder
         * 
         */
        public Builder expectedCodes(@Nullable Output<List<String>> expectedCodes) {
            $.expectedCodes = expectedCodes;
            return this;
        }

        /**
         * @param expectedCodes The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
         * 
         * @return builder
         * 
         */
        public Builder expectedCodes(List<String> expectedCodes) {
            return expectedCodes(Output.of(expectedCodes));
        }

        /**
         * @param expectedCodes The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
         * 
         * @return builder
         * 
         */
        public Builder expectedCodes(String... expectedCodes) {
            return expectedCodes(List.of(expectedCodes));
        }

        /**
         * @param followRedirects Follow redirects if the origin returns a 3xx status code.
         * 
         * @return builder
         * 
         */
        public Builder followRedirects(@Nullable Output<Boolean> followRedirects) {
            $.followRedirects = followRedirects;
            return this;
        }

        /**
         * @param followRedirects Follow redirects if the origin returns a 3xx status code.
         * 
         * @return builder
         * 
         */
        public Builder followRedirects(Boolean followRedirects) {
            return followRedirects(Output.of(followRedirects));
        }

        /**
         * @param header The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Output<Map<String,List<String>>> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
         * 
         * @return builder
         * 
         */
        public Builder header(Map<String,List<String>> header) {
            return header(Output.of(header));
        }

        /**
         * @param method The HTTP method to use for the health check.
         * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method The HTTP method to use for the health check.
         * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param path The endpoint path to health check against.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The endpoint path to health check against.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public HealthcheckHttpConfigArgs build() {
            return $;
        }
    }

}
