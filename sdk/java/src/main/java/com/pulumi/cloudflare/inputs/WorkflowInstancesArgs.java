// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkflowInstancesArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkflowInstancesArgs Empty = new WorkflowInstancesArgs();

    @Import(name="complete")
    private @Nullable Output<Double> complete;

    public Optional<Output<Double>> complete() {
        return Optional.ofNullable(this.complete);
    }

    @Import(name="errored")
    private @Nullable Output<Double> errored;

    public Optional<Output<Double>> errored() {
        return Optional.ofNullable(this.errored);
    }

    @Import(name="paused")
    private @Nullable Output<Double> paused;

    public Optional<Output<Double>> paused() {
        return Optional.ofNullable(this.paused);
    }

    @Import(name="queued")
    private @Nullable Output<Double> queued;

    public Optional<Output<Double>> queued() {
        return Optional.ofNullable(this.queued);
    }

    @Import(name="running")
    private @Nullable Output<Double> running;

    public Optional<Output<Double>> running() {
        return Optional.ofNullable(this.running);
    }

    @Import(name="terminated")
    private @Nullable Output<Double> terminated;

    public Optional<Output<Double>> terminated() {
        return Optional.ofNullable(this.terminated);
    }

    @Import(name="waiting")
    private @Nullable Output<Double> waiting;

    public Optional<Output<Double>> waiting() {
        return Optional.ofNullable(this.waiting);
    }

    @Import(name="waitingForPause")
    private @Nullable Output<Double> waitingForPause;

    public Optional<Output<Double>> waitingForPause() {
        return Optional.ofNullable(this.waitingForPause);
    }

    private WorkflowInstancesArgs() {}

    private WorkflowInstancesArgs(WorkflowInstancesArgs $) {
        this.complete = $.complete;
        this.errored = $.errored;
        this.paused = $.paused;
        this.queued = $.queued;
        this.running = $.running;
        this.terminated = $.terminated;
        this.waiting = $.waiting;
        this.waitingForPause = $.waitingForPause;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkflowInstancesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkflowInstancesArgs $;

        public Builder() {
            $ = new WorkflowInstancesArgs();
        }

        public Builder(WorkflowInstancesArgs defaults) {
            $ = new WorkflowInstancesArgs(Objects.requireNonNull(defaults));
        }

        public Builder complete(@Nullable Output<Double> complete) {
            $.complete = complete;
            return this;
        }

        public Builder complete(Double complete) {
            return complete(Output.of(complete));
        }

        public Builder errored(@Nullable Output<Double> errored) {
            $.errored = errored;
            return this;
        }

        public Builder errored(Double errored) {
            return errored(Output.of(errored));
        }

        public Builder paused(@Nullable Output<Double> paused) {
            $.paused = paused;
            return this;
        }

        public Builder paused(Double paused) {
            return paused(Output.of(paused));
        }

        public Builder queued(@Nullable Output<Double> queued) {
            $.queued = queued;
            return this;
        }

        public Builder queued(Double queued) {
            return queued(Output.of(queued));
        }

        public Builder running(@Nullable Output<Double> running) {
            $.running = running;
            return this;
        }

        public Builder running(Double running) {
            return running(Output.of(running));
        }

        public Builder terminated(@Nullable Output<Double> terminated) {
            $.terminated = terminated;
            return this;
        }

        public Builder terminated(Double terminated) {
            return terminated(Output.of(terminated));
        }

        public Builder waiting(@Nullable Output<Double> waiting) {
            $.waiting = waiting;
            return this;
        }

        public Builder waiting(Double waiting) {
            return waiting(Output.of(waiting));
        }

        public Builder waitingForPause(@Nullable Output<Double> waitingForPause) {
            $.waitingForPause = waitingForPause;
            return this;
        }

        public Builder waitingForPause(Double waitingForPause) {
            return waitingForPause(Output.of(waitingForPause));
        }

        public WorkflowInstancesArgs build() {
            return $;
        }
    }

}
