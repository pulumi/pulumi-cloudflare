// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetImageVariantVariantOptions;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetImageVariantVariant {
    private String id;
    /**
     * @return Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    private Boolean neverRequireSignedUrls;
    /**
     * @return Allows you to define image resizing sizes for different use cases.
     * 
     */
    private GetImageVariantVariantOptions options;

    private GetImageVariantVariant() {}
    public String id() {
        return this.id;
    }
    /**
     * @return Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    public Boolean neverRequireSignedUrls() {
        return this.neverRequireSignedUrls;
    }
    /**
     * @return Allows you to define image resizing sizes for different use cases.
     * 
     */
    public GetImageVariantVariantOptions options() {
        return this.options;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageVariantVariant defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Boolean neverRequireSignedUrls;
        private GetImageVariantVariantOptions options;
        public Builder() {}
        public Builder(GetImageVariantVariant defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.neverRequireSignedUrls = defaults.neverRequireSignedUrls;
    	      this.options = defaults.options;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageVariantVariant", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder neverRequireSignedUrls(Boolean neverRequireSignedUrls) {
            if (neverRequireSignedUrls == null) {
              throw new MissingRequiredPropertyException("GetImageVariantVariant", "neverRequireSignedUrls");
            }
            this.neverRequireSignedUrls = neverRequireSignedUrls;
            return this;
        }
        @CustomType.Setter
        public Builder options(GetImageVariantVariantOptions options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetImageVariantVariant", "options");
            }
            this.options = options;
            return this;
        }
        public GetImageVariantVariant build() {
            final var _resultValue = new GetImageVariantVariant();
            _resultValue.id = id;
            _resultValue.neverRequireSignedUrls = neverRequireSignedUrls;
            _resultValue.options = options;
            return _resultValue;
        }
    }
}
