// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.IpListItemArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpListArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpListArgs Empty = new IpListArgs();

    /**
     * The ID of the account where the IP List is being created.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The ID of the account where the IP List is being created.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * A note that can be used to annotate the List. Maximum Length: 500
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A note that can be used to annotate the List. Maximum Length: 500
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="items")
    private @Nullable Output<List<IpListItemArgs>> items;

    public Optional<Output<List<IpListItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * The kind of values in the List. Valid values: `ip`.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return The kind of values in the List. Valid values: `ip`.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private IpListArgs() {}

    private IpListArgs(IpListArgs $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.items = $.items;
        this.kind = $.kind;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpListArgs $;

        public Builder() {
            $ = new IpListArgs();
        }

        public Builder(IpListArgs defaults) {
            $ = new IpListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The ID of the account where the IP List is being created.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The ID of the account where the IP List is being created.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description A note that can be used to annotate the List. Maximum Length: 500
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A note that can be used to annotate the List. Maximum Length: 500
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder items(@Nullable Output<List<IpListItemArgs>> items) {
            $.items = items;
            return this;
        }

        public Builder items(List<IpListItemArgs> items) {
            return items(Output.of(items));
        }

        public Builder items(IpListItemArgs... items) {
            return items(List.of(items));
        }

        /**
         * @param kind The kind of values in the List. Valid values: `ip`.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of values in the List. Valid values: `ip`.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the list (used in filter expressions). Valid pattern: `^[a-zA-Z0-9_]+$`. Maximum Length: 50
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public IpListArgs build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
