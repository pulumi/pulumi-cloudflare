// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneSettingState extends com.pulumi.resources.ResourceArgs {

    public static final ZoneSettingState Empty = new ZoneSettingState();

    /**
     * Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
     * 
     */
    @Import(name="editable")
    private @Nullable Output<Boolean> editable;

    /**
     * @return Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
     * 
     */
    public Optional<Output<Boolean>> editable() {
        return Optional.ofNullable(this.editable);
    }

    /**
     * ssl-recommender enrollment setting.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return ssl-recommender enrollment setting.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * last time this setting was modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return last time this setting was modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * Setting name
     * 
     */
    @Import(name="settingId")
    private @Nullable Output<String> settingId;

    /**
     * @return Setting name
     * 
     */
    public Optional<Output<String>> settingId() {
        return Optional.ofNullable(this.settingId);
    }

    /**
     * Value of the zone setting.
     * Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
     * 
     */
    @Import(name="timeRemaining")
    private @Nullable Output<Double> timeRemaining;

    /**
     * @return Value of the zone setting.
     * Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
     * 
     */
    public Optional<Output<Double>> timeRemaining() {
        return Optional.ofNullable(this.timeRemaining);
    }

    /**
     * Current value of the zone setting.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Object> value;

    /**
     * @return Current value of the zone setting.
     * 
     */
    public Optional<Output<Object>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZoneSettingState() {}

    private ZoneSettingState(ZoneSettingState $) {
        this.editable = $.editable;
        this.enabled = $.enabled;
        this.modifiedOn = $.modifiedOn;
        this.settingId = $.settingId;
        this.timeRemaining = $.timeRemaining;
        this.value = $.value;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneSettingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneSettingState $;

        public Builder() {
            $ = new ZoneSettingState();
        }

        public Builder(ZoneSettingState defaults) {
            $ = new ZoneSettingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param editable Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
         * 
         * @return builder
         * 
         */
        public Builder editable(@Nullable Output<Boolean> editable) {
            $.editable = editable;
            return this;
        }

        /**
         * @param editable Whether or not this setting can be modified for this zone (based on your Cloudflare plan level).
         * 
         * @return builder
         * 
         */
        public Builder editable(Boolean editable) {
            return editable(Output.of(editable));
        }

        /**
         * @param enabled ssl-recommender enrollment setting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled ssl-recommender enrollment setting.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param modifiedOn last time this setting was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn last time this setting was modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param settingId Setting name
         * 
         * @return builder
         * 
         */
        public Builder settingId(@Nullable Output<String> settingId) {
            $.settingId = settingId;
            return this;
        }

        /**
         * @param settingId Setting name
         * 
         * @return builder
         * 
         */
        public Builder settingId(String settingId) {
            return settingId(Output.of(settingId));
        }

        /**
         * @param timeRemaining Value of the zone setting.
         * Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
         * 
         * @return builder
         * 
         */
        public Builder timeRemaining(@Nullable Output<Double> timeRemaining) {
            $.timeRemaining = timeRemaining;
            return this;
        }

        /**
         * @param timeRemaining Value of the zone setting.
         * Notes: The interval (in seconds) from when development mode expires (positive integer) or last expired (negative integer) for the domain. If development mode has never been enabled, this value is false.
         * 
         * @return builder
         * 
         */
        public Builder timeRemaining(Double timeRemaining) {
            return timeRemaining(Output.of(timeRemaining));
        }

        /**
         * @param value Current value of the zone setting.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Object> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Current value of the zone setting.
         * 
         * @return builder
         * 
         */
        public Builder value(Object value) {
            return value(Output.of(value));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneSettingState build() {
            return $;
        }
    }

}
