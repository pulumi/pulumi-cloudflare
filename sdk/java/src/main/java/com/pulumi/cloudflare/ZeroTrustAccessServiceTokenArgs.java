// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessServiceTokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessServiceTokenArgs Empty = new ZeroTrustAccessServiceTokenArgs();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * A version number identifying the current `clientSecret` associated with the service token. Incrementing it triggers a rotation; the previous secret will still be accepted until the time indicated by `previousClientSecretExpiresAt`.
     * 
     */
    @Import(name="clientSecretVersion")
    private @Nullable Output<Double> clientSecretVersion;

    /**
     * @return A version number identifying the current `clientSecret` associated with the service token. Incrementing it triggers a rotation; the previous secret will still be accepted until the time indicated by `previousClientSecretExpiresAt`.
     * 
     */
    public Optional<Output<Double>> clientSecretVersion() {
        return Optional.ofNullable(this.clientSecretVersion);
    }

    /**
     * The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
     * 
     */
    @Import(name="duration")
    private @Nullable Output<String> duration;

    /**
     * @return The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
     * 
     */
    public Optional<Output<String>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * The name of the service token.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the service token.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The expiration of the previous `clientSecret`. This can be modified at any point after a rotation. For example, you may extend it further into the future if you need more time to update services with the new secret; or move it into the past to immediately invalidate the previous token in case of compromise.
     * 
     */
    @Import(name="previousClientSecretExpiresAt")
    private @Nullable Output<String> previousClientSecretExpiresAt;

    /**
     * @return The expiration of the previous `clientSecret`. This can be modified at any point after a rotation. For example, you may extend it further into the future if you need more time to update services with the new secret; or move it into the past to immediately invalidate the previous token in case of compromise.
     * 
     */
    public Optional<Output<String>> previousClientSecretExpiresAt() {
        return Optional.ofNullable(this.previousClientSecretExpiresAt);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ZeroTrustAccessServiceTokenArgs() {}

    private ZeroTrustAccessServiceTokenArgs(ZeroTrustAccessServiceTokenArgs $) {
        this.accountId = $.accountId;
        this.clientSecretVersion = $.clientSecretVersion;
        this.duration = $.duration;
        this.name = $.name;
        this.previousClientSecretExpiresAt = $.previousClientSecretExpiresAt;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessServiceTokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessServiceTokenArgs $;

        public Builder() {
            $ = new ZeroTrustAccessServiceTokenArgs();
        }

        public Builder(ZeroTrustAccessServiceTokenArgs defaults) {
            $ = new ZeroTrustAccessServiceTokenArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param clientSecretVersion A version number identifying the current `clientSecret` associated with the service token. Incrementing it triggers a rotation; the previous secret will still be accepted until the time indicated by `previousClientSecretExpiresAt`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretVersion(@Nullable Output<Double> clientSecretVersion) {
            $.clientSecretVersion = clientSecretVersion;
            return this;
        }

        /**
         * @param clientSecretVersion A version number identifying the current `clientSecret` associated with the service token. Incrementing it triggers a rotation; the previous secret will still be accepted until the time indicated by `previousClientSecretExpiresAt`.
         * 
         * @return builder
         * 
         */
        public Builder clientSecretVersion(Double clientSecretVersion) {
            return clientSecretVersion(Output.of(clientSecretVersion));
        }

        /**
         * @param duration The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<String> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration The duration for how long the service token will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h. The default is 1 year in hours (8760h).
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param name The name of the service token.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the service token.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param previousClientSecretExpiresAt The expiration of the previous `clientSecret`. This can be modified at any point after a rotation. For example, you may extend it further into the future if you need more time to update services with the new secret; or move it into the past to immediately invalidate the previous token in case of compromise.
         * 
         * @return builder
         * 
         */
        public Builder previousClientSecretExpiresAt(@Nullable Output<String> previousClientSecretExpiresAt) {
            $.previousClientSecretExpiresAt = previousClientSecretExpiresAt;
            return this;
        }

        /**
         * @param previousClientSecretExpiresAt The expiration of the previous `clientSecret`. This can be modified at any point after a rotation. For example, you may extend it further into the future if you need more time to update services with the new secret; or move it into the past to immediately invalidate the previous token in case of compromise.
         * 
         * @return builder
         * 
         */
        public Builder previousClientSecretExpiresAt(String previousClientSecretExpiresAt) {
            return previousClientSecretExpiresAt(Output.of(previousClientSecretExpiresAt));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZeroTrustAccessServiceTokenArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessServiceTokenArgs", "name");
            }
            return $;
        }
    }

}
