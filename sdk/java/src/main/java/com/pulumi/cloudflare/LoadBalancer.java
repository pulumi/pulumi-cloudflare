// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.LoadBalancerArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.LoadBalancerState;
import com.pulumi.cloudflare.outputs.LoadBalancerAdaptiveRouting;
import com.pulumi.cloudflare.outputs.LoadBalancerLocationStrategy;
import com.pulumi.cloudflare.outputs.LoadBalancerRandomSteering;
import com.pulumi.cloudflare.outputs.LoadBalancerRule;
import com.pulumi.cloudflare.outputs.LoadBalancerSessionAffinityAttributes;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example &#39;&lt;zone_id&gt;/&lt;load_balancer_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/loadBalancer:LoadBalancer")
public class LoadBalancer extends com.pulumi.resources.CustomResource {
    /**
     * Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    @Export(name="adaptiveRouting", refs={LoadBalancerAdaptiveRouting.class}, tree="[0]")
    private Output<LoadBalancerAdaptiveRouting> adaptiveRouting;

    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public Output<LoadBalancerAdaptiveRouting> adaptiveRouting() {
        return this.adaptiveRouting;
    }
    /**
     * A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    @Export(name="countryPools", refs={Map.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Map<String,List<String>>> countryPools;

    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Output<Map<String,List<String>>> countryPools() {
        return this.countryPools;
    }
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    @Export(name="defaultPools", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> defaultPools;

    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    public Output<List<String>> defaultPools() {
        return this.defaultPools;
    }
    /**
     * Object description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Object description.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Whether to enable (the default) this load balancer.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether to enable (the default) this load balancer.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    @Export(name="fallbackPool", refs={String.class}, tree="[0]")
    private Output<String> fallbackPool;

    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public Output<String> fallbackPool() {
        return this.fallbackPool;
    }
    /**
     * Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    @Export(name="locationStrategy", refs={LoadBalancerLocationStrategy.class}, tree="[0]")
    private Output<LoadBalancerLocationStrategy> locationStrategy;

    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    public Output<LoadBalancerLocationStrategy> locationStrategy() {
        return this.locationStrategy;
    }
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The DNS hostname to associate with your Load Balancer. If this hostname already exists as a DNS record in Cloudflare&#39;s DNS, the Load Balancer will take precedence and the DNS record will not be used.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of networks where Load Balancer or Pool is enabled.
     * 
     */
    @Export(name="networks", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> networks;

    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    public Output<List<String>> networks() {
        return this.networks;
    }
    /**
     * Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    @Export(name="popPools", refs={Map.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Map<String,List<String>>> popPools;

    /**
     * @return Enterprise only: A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Output<Map<String,List<String>>> popPools() {
        return this.popPools;
    }
    /**
     * Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    @Export(name="proxied", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> proxied;

    /**
     * @return Whether the hostname should be gray clouded (false) or orange clouded (true).
     * 
     */
    public Output<Boolean> proxied() {
        return this.proxied;
    }
    /**
     * Configures pool weights.
     * 
     */
    @Export(name="randomSteering", refs={LoadBalancerRandomSteering.class}, tree="[0]")
    private Output<LoadBalancerRandomSteering> randomSteering;

    /**
     * @return Configures pool weights.
     * 
     */
    public Output<LoadBalancerRandomSteering> randomSteering() {
        return this.randomSteering;
    }
    /**
     * A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    @Export(name="regionPools", refs={Map.class,String.class,List.class}, tree="[0,1,[2,1]]")
    private Output<Map<String,List<String>>> regionPools;

    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Output<Map<String,List<String>>> regionPools() {
        return this.regionPools;
    }
    /**
     * BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    @Export(name="rules", refs={List.class,LoadBalancerRule.class}, tree="[0,1]")
    private Output<List<LoadBalancerRule>> rules;

    /**
     * @return BETA Field Not General Access: A list of rules for this load balancer to execute.
     * 
     */
    public Output<List<LoadBalancerRule>> rules() {
        return this.rules;
    }
    /**
     * Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
     * 
     */
    @Export(name="sessionAffinity", refs={String.class}, tree="[0]")
    private Output<String> sessionAffinity;

    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are: - `&#34;cookie&#34;`: On the first request to a proxied load balancer, a cookie is generated, encoding information of which origin the request will be forwarded to. Subsequent requests, by the same client to the same load balancer, will be sent to the origin server the cookie encodes, for the duration of the cookie and as long as the origin server remains healthy. If the cookie has expired or the origin server is unhealthy, then a new origin server is calculated and used. - `&#34;ip_cookie&#34;`: Behaves the same as `&#34;cookie&#34;` except the initial origin selection is stable and based on the client&#39;s ip address. - `&#34;header&#34;`: On the first request to a proxied load balancer, a session key based on the configured HTTP headers (see `session_affinity_attributes.headers`) is generated, encoding the request headers used for storing in the load balancer session state which origin the request will be forwarded to. Subsequent requests to the load balancer with the same headers will be sent to the same origin server, for the duration of the session and as long as the origin server remains healthy. If the session has been idle for the duration of `session_affinity_ttl` seconds or the origin server is unhealthy, then a new origin server is calculated and used. See `headers` in `session_affinity_attributes` for additional required configuration.
     * Available values: &#34;none&#34;, &#34;cookie&#34;, &#34;ip_cookie&#34;, &#34;header&#34;.
     * 
     */
    public Output<String> sessionAffinity() {
        return this.sessionAffinity;
    }
    /**
     * Configures attributes for session affinity.
     * 
     */
    @Export(name="sessionAffinityAttributes", refs={LoadBalancerSessionAffinityAttributes.class}, tree="[0]")
    private Output<LoadBalancerSessionAffinityAttributes> sessionAffinityAttributes;

    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public Output<LoadBalancerSessionAffinityAttributes> sessionAffinityAttributes() {
        return this.sessionAffinityAttributes;
    }
    /**
     * Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    @Export(name="sessionAffinityTtl", refs={Double.class}, tree="[0]")
    private Output<Double> sessionAffinityTtl;

    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are: - `&#34;cookie&#34;` / `&#34;ip_cookie&#34;`: The current default of 23 hours will be used unless explicitly set. The accepted range of values is between [1800, 604800]. - `&#34;header&#34;`: The current default of 1800 seconds will be used unless explicitly set. The accepted range of values is between [30, 3600]. Note: With session affinity by header, sessions only expire after they haven&#39;t been used for the number of seconds specified.
     * 
     */
    public Output<Double> sessionAffinityTtl() {
        return this.sessionAffinityTtl;
    }
    /**
     * Steering Policy for this load balancer.
     * 
     */
    @Export(name="steeringPolicy", refs={String.class}, tree="[0]")
    private Output<String> steeringPolicy;

    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public Output<String> steeringPolicy() {
        return this.steeringPolicy;
    }
    /**
     * Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    @Export(name="ttl", refs={Double.class}, tree="[0]")
    private Output<Double> ttl;

    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Output<Double> ttl() {
        return this.ttl;
    }
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    public Output<String> zoneId() {
        return this.zoneId;
    }
    @Export(name="zoneName", refs={String.class}, tree="[0]")
    private Output<String> zoneName;

    public Output<String> zoneName() {
        return this.zoneName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadBalancer(java.lang.String name) {
        this(name, LoadBalancerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadBalancer(java.lang.String name, LoadBalancerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadBalancer(java.lang.String name, LoadBalancerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/loadBalancer:LoadBalancer", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private LoadBalancer(java.lang.String name, Output<java.lang.String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/loadBalancer:LoadBalancer", name, state, makeResourceOptions(options, id), false);
    }

    private static LoadBalancerArgs makeArgs(LoadBalancerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? LoadBalancerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadBalancer get(java.lang.String name, Output<java.lang.String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadBalancer(name, id, state, options);
    }
}
