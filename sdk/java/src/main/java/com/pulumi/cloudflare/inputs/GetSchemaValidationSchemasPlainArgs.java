// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetSchemaValidationSchemasFilter;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSchemaValidationSchemasPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSchemaValidationSchemasPlainArgs Empty = new GetSchemaValidationSchemasPlainArgs();

    @Import(name="filter")
    private @Nullable GetSchemaValidationSchemasFilter filter;

    public Optional<GetSchemaValidationSchemasFilter> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    @Import(name="omitSource")
    private @Nullable Boolean omitSource;

    /**
     * @return Omit the source-files of schemas and only retrieve their meta-data.
     * 
     */
    public Optional<Boolean> omitSource() {
        return Optional.ofNullable(this.omitSource);
    }

    /**
     * UUID.
     * 
     */
    @Import(name="schemaId")
    private @Nullable String schemaId;

    /**
     * @return UUID.
     * 
     */
    public Optional<String> schemaId() {
        return Optional.ofNullable(this.schemaId);
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetSchemaValidationSchemasPlainArgs() {}

    private GetSchemaValidationSchemasPlainArgs(GetSchemaValidationSchemasPlainArgs $) {
        this.filter = $.filter;
        this.omitSource = $.omitSource;
        this.schemaId = $.schemaId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSchemaValidationSchemasPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSchemaValidationSchemasPlainArgs $;

        public Builder() {
            $ = new GetSchemaValidationSchemasPlainArgs();
        }

        public Builder(GetSchemaValidationSchemasPlainArgs defaults) {
            $ = new GetSchemaValidationSchemasPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder filter(@Nullable GetSchemaValidationSchemasFilter filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param omitSource Omit the source-files of schemas and only retrieve their meta-data.
         * 
         * @return builder
         * 
         */
        public Builder omitSource(@Nullable Boolean omitSource) {
            $.omitSource = omitSource;
            return this;
        }

        /**
         * @param schemaId UUID.
         * 
         * @return builder
         * 
         */
        public Builder schemaId(@Nullable String schemaId) {
            $.schemaId = schemaId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetSchemaValidationSchemasPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetSchemaValidationSchemasPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
