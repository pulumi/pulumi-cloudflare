// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class D1DatabaseState extends com.pulumi.resources.ResourceArgs {

    public static final D1DatabaseState Empty = new D1DatabaseState();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Specifies the timestamp the resource was created as an ISO8601 string.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Specifies the timestamp the resource was created as an ISO8601 string.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The D1 database&#39;s size, in bytes.
     * 
     */
    @Import(name="fileSize")
    private @Nullable Output<Double> fileSize;

    /**
     * @return The D1 database&#39;s size, in bytes.
     * 
     */
    public Optional<Output<Double>> fileSize() {
        return Optional.ofNullable(this.fileSize);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="numTables")
    private @Nullable Output<Double> numTables;

    public Optional<Output<Double>> numTables() {
        return Optional.ofNullable(this.numTables);
    }

    /**
     * Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
     * 
     */
    @Import(name="primaryLocationHint")
    private @Nullable Output<String> primaryLocationHint;

    /**
     * @return Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
     * 
     */
    public Optional<Output<String>> primaryLocationHint() {
        return Optional.ofNullable(this.primaryLocationHint);
    }

    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private D1DatabaseState() {}

    private D1DatabaseState(D1DatabaseState $) {
        this.accountId = $.accountId;
        this.createdAt = $.createdAt;
        this.fileSize = $.fileSize;
        this.name = $.name;
        this.numTables = $.numTables;
        this.primaryLocationHint = $.primaryLocationHint;
        this.uuid = $.uuid;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(D1DatabaseState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private D1DatabaseState $;

        public Builder() {
            $ = new D1DatabaseState();
        }

        public Builder(D1DatabaseState defaults) {
            $ = new D1DatabaseState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createdAt Specifies the timestamp the resource was created as an ISO8601 string.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Specifies the timestamp the resource was created as an ISO8601 string.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param fileSize The D1 database&#39;s size, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder fileSize(@Nullable Output<Double> fileSize) {
            $.fileSize = fileSize;
            return this;
        }

        /**
         * @param fileSize The D1 database&#39;s size, in bytes.
         * 
         * @return builder
         * 
         */
        public Builder fileSize(Double fileSize) {
            return fileSize(Output.of(fileSize));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder numTables(@Nullable Output<Double> numTables) {
            $.numTables = numTables;
            return this;
        }

        public Builder numTables(Double numTables) {
            return numTables(Output.of(numTables));
        }

        /**
         * @param primaryLocationHint Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocationHint(@Nullable Output<String> primaryLocationHint) {
            $.primaryLocationHint = primaryLocationHint;
            return this;
        }

        /**
         * @param primaryLocationHint Specify the region to create the D1 primary, if available. If this option is omitted, the D1 will be created as close as possible to the current user.
         * 
         * @return builder
         * 
         */
        public Builder primaryLocationHint(String primaryLocationHint) {
            return primaryLocationHint(Output.of(primaryLocationHint));
        }

        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public D1DatabaseState build() {
            return $;
        }
    }

}
