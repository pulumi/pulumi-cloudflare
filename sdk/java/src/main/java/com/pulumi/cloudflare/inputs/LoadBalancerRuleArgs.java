// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.LoadBalancerRuleFixedResponseArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerRuleOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerRuleArgs Empty = new LoadBalancerRuleArgs();

    @Import(name="condition")
    private @Nullable Output<String> condition;

    public Optional<Output<String>> condition() {
        return Optional.ofNullable(this.condition);
    }

    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    @Import(name="fixedResponse")
    private @Nullable Output<LoadBalancerRuleFixedResponseArgs> fixedResponse;

    public Optional<Output<LoadBalancerRuleFixedResponseArgs>> fixedResponse() {
        return Optional.ofNullable(this.fixedResponse);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="overrides")
    private @Nullable Output<List<LoadBalancerRuleOverrideArgs>> overrides;

    public Optional<Output<List<LoadBalancerRuleOverrideArgs>>> overrides() {
        return Optional.ofNullable(this.overrides);
    }

    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="terminates")
    private @Nullable Output<Boolean> terminates;

    public Optional<Output<Boolean>> terminates() {
        return Optional.ofNullable(this.terminates);
    }

    private LoadBalancerRuleArgs() {}

    private LoadBalancerRuleArgs(LoadBalancerRuleArgs $) {
        this.condition = $.condition;
        this.disabled = $.disabled;
        this.fixedResponse = $.fixedResponse;
        this.name = $.name;
        this.overrides = $.overrides;
        this.priority = $.priority;
        this.terminates = $.terminates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerRuleArgs $;

        public Builder() {
            $ = new LoadBalancerRuleArgs();
        }

        public Builder(LoadBalancerRuleArgs defaults) {
            $ = new LoadBalancerRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(@Nullable Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        public Builder fixedResponse(@Nullable Output<LoadBalancerRuleFixedResponseArgs> fixedResponse) {
            $.fixedResponse = fixedResponse;
            return this;
        }

        public Builder fixedResponse(LoadBalancerRuleFixedResponseArgs fixedResponse) {
            return fixedResponse(Output.of(fixedResponse));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder overrides(@Nullable Output<List<LoadBalancerRuleOverrideArgs>> overrides) {
            $.overrides = overrides;
            return this;
        }

        public Builder overrides(List<LoadBalancerRuleOverrideArgs> overrides) {
            return overrides(Output.of(overrides));
        }

        public Builder overrides(LoadBalancerRuleOverrideArgs... overrides) {
            return overrides(List.of(overrides));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder terminates(@Nullable Output<Boolean> terminates) {
            $.terminates = terminates;
            return this;
        }

        public Builder terminates(Boolean terminates) {
            return terminates(Output.of(terminates));
        }

        public LoadBalancerRuleArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
