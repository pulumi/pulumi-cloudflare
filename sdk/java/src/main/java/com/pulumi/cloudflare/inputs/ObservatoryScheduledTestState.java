// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestScheduleArgs;
import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestTestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservatoryScheduledTestState extends com.pulumi.resources.ResourceArgs {

    public static final ObservatoryScheduledTestState Empty = new ObservatoryScheduledTestState();

    /**
     * The frequency of the test.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return The frequency of the test.
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * A test region.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return A test region.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The test schedule.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<ObservatoryScheduledTestScheduleArgs> schedule;

    /**
     * @return The test schedule.
     * 
     */
    public Optional<Output<ObservatoryScheduledTestScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="test")
    private @Nullable Output<ObservatoryScheduledTestTestArgs> test;

    public Optional<Output<ObservatoryScheduledTestTestArgs>> test() {
        return Optional.ofNullable(this.test);
    }

    /**
     * A URL.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return A URL.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private ObservatoryScheduledTestState() {}

    private ObservatoryScheduledTestState(ObservatoryScheduledTestState $) {
        this.frequency = $.frequency;
        this.region = $.region;
        this.schedule = $.schedule;
        this.test = $.test;
        this.url = $.url;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservatoryScheduledTestState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservatoryScheduledTestState $;

        public Builder() {
            $ = new ObservatoryScheduledTestState();
        }

        public Builder(ObservatoryScheduledTestState defaults) {
            $ = new ObservatoryScheduledTestState(Objects.requireNonNull(defaults));
        }

        /**
         * @param frequency The frequency of the test.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The frequency of the test.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param region A test region.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A test region.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param schedule The test schedule.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<ObservatoryScheduledTestScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule The test schedule.
         * 
         * @return builder
         * 
         */
        public Builder schedule(ObservatoryScheduledTestScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder test(@Nullable Output<ObservatoryScheduledTestTestArgs> test) {
            $.test = test;
            return this;
        }

        public Builder test(ObservatoryScheduledTestTestArgs test) {
            return test(Output.of(test));
        }

        /**
         * @param url A URL.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url A URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ObservatoryScheduledTestState build() {
            return $;
        }
    }

}
