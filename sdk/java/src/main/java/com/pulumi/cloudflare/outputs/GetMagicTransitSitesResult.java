// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSitesResultLocation;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSitesResult {
    /**
     * @return Magic Connector identifier tag.
     * 
     */
    private String connectorId;
    private String description;
    /**
     * @return Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     * 
     */
    private Boolean haMode;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return Location of site in latitude and longitude.
     * 
     */
    private GetMagicTransitSitesResultLocation location;
    /**
     * @return The name of the site.
     * 
     */
    private String name;
    /**
     * @return Magic Connector identifier tag. Used when high availability mode is on.
     * 
     */
    private String secondaryConnectorId;

    private GetMagicTransitSitesResult() {}
    /**
     * @return Magic Connector identifier tag.
     * 
     */
    public String connectorId() {
        return this.connectorId;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return Site high availability mode. If set to true, the site can have two connectors and runs in high availability mode.
     * 
     */
    public Boolean haMode() {
        return this.haMode;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Location of site in latitude and longitude.
     * 
     */
    public GetMagicTransitSitesResultLocation location() {
        return this.location;
    }
    /**
     * @return The name of the site.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Magic Connector identifier tag. Used when high availability mode is on.
     * 
     */
    public String secondaryConnectorId() {
        return this.secondaryConnectorId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSitesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String connectorId;
        private String description;
        private Boolean haMode;
        private String id;
        private GetMagicTransitSitesResultLocation location;
        private String name;
        private String secondaryConnectorId;
        public Builder() {}
        public Builder(GetMagicTransitSitesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorId = defaults.connectorId;
    	      this.description = defaults.description;
    	      this.haMode = defaults.haMode;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.secondaryConnectorId = defaults.secondaryConnectorId;
        }

        @CustomType.Setter
        public Builder connectorId(String connectorId) {
            if (connectorId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "connectorId");
            }
            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder haMode(Boolean haMode) {
            if (haMode == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "haMode");
            }
            this.haMode = haMode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(GetMagicTransitSitesResultLocation location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryConnectorId(String secondaryConnectorId) {
            if (secondaryConnectorId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSitesResult", "secondaryConnectorId");
            }
            this.secondaryConnectorId = secondaryConnectorId;
            return this;
        }
        public GetMagicTransitSitesResult build() {
            final var _resultValue = new GetMagicTransitSitesResult();
            _resultValue.connectorId = connectorId;
            _resultValue.description = description;
            _resultValue.haMode = haMode;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.secondaryConnectorId = secondaryConnectorId;
            return _resultValue;
        }
    }
}
