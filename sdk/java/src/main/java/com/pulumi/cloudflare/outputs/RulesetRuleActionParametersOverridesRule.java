// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleActionParametersOverridesRule {
    /**
     * @return Action to perform in the ruleset rule. Available values: `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `serve_error`, `skip`.
     * 
     */
    private @Nullable String action;
    /**
     * @return Whether the rule is active.
     * 
     * @deprecated
     * Use `status` instead. Continuing to use `enabled` will result in an inconsistent state for your Ruleset configuration.
     * 
     */
    @Deprecated /* Use `status` instead. Continuing to use `enabled` will result in an inconsistent state for your Ruleset configuration. */
    private @Nullable Boolean enabled;
    /**
     * @return Unique rule identifier.
     * 
     */
    private @Nullable String id;
    private @Nullable Integer scoreThreshold;
    private @Nullable String sensitivityLevel;
    private @Nullable String status;

    private RulesetRuleActionParametersOverridesRule() {}
    /**
     * @return Action to perform in the ruleset rule. Available values: `block`, `challenge`, `ddos_dynamic`, `execute`, `force_connection_close`, `js_challenge`, `log`, `log_custom_field`, `managed_challenge`, `redirect`, `rewrite`, `route`, `score`, `set_cache_settings`, `serve_error`, `skip`.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Whether the rule is active.
     * 
     * @deprecated
     * Use `status` instead. Continuing to use `enabled` will result in an inconsistent state for your Ruleset configuration.
     * 
     */
    @Deprecated /* Use `status` instead. Continuing to use `enabled` will result in an inconsistent state for your Ruleset configuration. */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Unique rule identifier.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    public Optional<Integer> scoreThreshold() {
        return Optional.ofNullable(this.scoreThreshold);
    }
    public Optional<String> sensitivityLevel() {
        return Optional.ofNullable(this.sensitivityLevel);
    }
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleActionParametersOverridesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable Boolean enabled;
        private @Nullable String id;
        private @Nullable Integer scoreThreshold;
        private @Nullable String sensitivityLevel;
        private @Nullable String status;
        public Builder() {}
        public Builder(RulesetRuleActionParametersOverridesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.scoreThreshold = defaults.scoreThreshold;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder scoreThreshold(@Nullable Integer scoreThreshold) {
            this.scoreThreshold = scoreThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder sensitivityLevel(@Nullable String sensitivityLevel) {
            this.sensitivityLevel = sensitivityLevel;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }
        public RulesetRuleActionParametersOverridesRule build() {
            final var o = new RulesetRuleActionParametersOverridesRule();
            o.action = action;
            o.enabled = enabled;
            o.id = id;
            o.scoreThreshold = scoreThreshold;
            o.sensitivityLevel = sensitivityLevel;
            o.status = status;
            return o;
        }
    }
}
