// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RulesetRuleActionParametersOverridesRule {
    /**
     * @return The action to override the rule with.
     * 
     */
    private @Nullable String action;
    /**
     * @return Whether to enable execution of the rule.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The ID of the rule to override.
     * 
     */
    private String id;
    /**
     * @return The score threshold to use for the rule.
     * 
     */
    private @Nullable Integer scoreThreshold;
    /**
     * @return The sensitivity level to use for the rule. This option is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    private @Nullable String sensitivityLevel;

    private RulesetRuleActionParametersOverridesRule() {}
    /**
     * @return The action to override the rule with.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }
    /**
     * @return Whether to enable execution of the rule.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The ID of the rule to override.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The score threshold to use for the rule.
     * 
     */
    public Optional<Integer> scoreThreshold() {
        return Optional.ofNullable(this.scoreThreshold);
    }
    /**
     * @return The sensitivity level to use for the rule. This option is only applicable for DDoS phases.
     * Available values: &#34;default&#34;, &#34;medium&#34;, &#34;low&#34;, &#34;eoff&#34;.
     * 
     */
    public Optional<String> sensitivityLevel() {
        return Optional.ofNullable(this.sensitivityLevel);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesetRuleActionParametersOverridesRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String action;
        private @Nullable Boolean enabled;
        private String id;
        private @Nullable Integer scoreThreshold;
        private @Nullable String sensitivityLevel;
        public Builder() {}
        public Builder(RulesetRuleActionParametersOverridesRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.scoreThreshold = defaults.scoreThreshold;
    	      this.sensitivityLevel = defaults.sensitivityLevel;
        }

        @CustomType.Setter
        public Builder action(@Nullable String action) {

            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("RulesetRuleActionParametersOverridesRule", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder scoreThreshold(@Nullable Integer scoreThreshold) {

            this.scoreThreshold = scoreThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder sensitivityLevel(@Nullable String sensitivityLevel) {

            this.sensitivityLevel = sensitivityLevel;
            return this;
        }
        public RulesetRuleActionParametersOverridesRule build() {
            final var _resultValue = new RulesetRuleActionParametersOverridesRule();
            _resultValue.action = action;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.scoreThreshold = scoreThreshold;
            _resultValue.sensitivityLevel = sensitivityLevel;
            return _resultValue;
        }
    }
}
