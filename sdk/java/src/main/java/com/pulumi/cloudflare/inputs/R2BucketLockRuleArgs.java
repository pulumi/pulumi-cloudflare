// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.R2BucketLockRuleConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class R2BucketLockRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketLockRuleArgs Empty = new R2BucketLockRuleArgs();

    /**
     * Condition to apply a lock rule to an object for how long in seconds
     * 
     */
    @Import(name="condition", required=true)
    private Output<R2BucketLockRuleConditionArgs> condition;

    /**
     * @return Condition to apply a lock rule to an object for how long in seconds
     * 
     */
    public Output<R2BucketLockRuleConditionArgs> condition() {
        return this.condition;
    }

    /**
     * Whether or not this rule is in effect
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether or not this rule is in effect
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Unique identifier for this rule
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique identifier for this rule
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    private R2BucketLockRuleArgs() {}

    private R2BucketLockRuleArgs(R2BucketLockRuleArgs $) {
        this.condition = $.condition;
        this.enabled = $.enabled;
        this.id = $.id;
        this.prefix = $.prefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketLockRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketLockRuleArgs $;

        public Builder() {
            $ = new R2BucketLockRuleArgs();
        }

        public Builder(R2BucketLockRuleArgs defaults) {
            $ = new R2BucketLockRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condition Condition to apply a lock rule to an object for how long in seconds
         * 
         * @return builder
         * 
         */
        public Builder condition(Output<R2BucketLockRuleConditionArgs> condition) {
            $.condition = condition;
            return this;
        }

        /**
         * @param condition Condition to apply a lock rule to an object for how long in seconds
         * 
         * @return builder
         * 
         */
        public Builder condition(R2BucketLockRuleConditionArgs condition) {
            return condition(Output.of(condition));
        }

        /**
         * @param enabled Whether or not this rule is in effect
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not this rule is in effect
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id Unique identifier for this rule
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for this rule
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param prefix Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Rule will only apply to objects/uploads in the bucket that start with the given prefix, an empty prefix can be provided to scope rule to all objects/uploads
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public R2BucketLockRuleArgs build() {
            if ($.condition == null) {
                throw new MissingRequiredPropertyException("R2BucketLockRuleArgs", "condition");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("R2BucketLockRuleArgs", "enabled");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("R2BucketLockRuleArgs", "id");
            }
            return $;
        }
    }

}
