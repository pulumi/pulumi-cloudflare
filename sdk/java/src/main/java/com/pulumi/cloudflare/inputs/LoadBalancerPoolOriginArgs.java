// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.LoadBalancerPoolOriginHeaderArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerPoolOriginArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerPoolOriginArgs Empty = new LoadBalancerPoolOriginArgs();

    /**
     * The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual*network*id must also be set.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual*network*id must also be set.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * This field shows up only if the origin is disabled. This field is set with the time the origin was disabled.
     * 
     */
    @Import(name="disabledAt")
    private @Nullable Output<String> disabledAt;

    /**
     * @return This field shows up only if the origin is disabled. This field is set with the time the origin was disabled.
     * 
     */
    public Optional<Output<String>> disabledAt() {
        return Optional.ofNullable(this.disabledAt);
    }

    /**
     * Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The request header is used to pass additional information with an HTTP request. Currently supported header is &#39;Host&#39;.
     * 
     */
    @Import(name="header")
    private @Nullable Output<LoadBalancerPoolOriginHeaderArgs> header;

    /**
     * @return The request header is used to pass additional information with an HTTP request. Currently supported header is &#39;Host&#39;.
     * 
     */
    public Optional<Output<LoadBalancerPoolOriginHeaderArgs>> header() {
        return Optional.ofNullable(this.header);
    }

    /**
     * A human-identifiable name for the origin.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A human-identifiable name for the origin.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The port for upstream connections. A value of 0 means the default port for the protocol will be used.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port for upstream connections. A value of 0 means the default port for the protocol will be used.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    /**
     * The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Double> weight;

    /**
     * @return The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
     * 
     */
    public Optional<Output<Double>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private LoadBalancerPoolOriginArgs() {}

    private LoadBalancerPoolOriginArgs(LoadBalancerPoolOriginArgs $) {
        this.address = $.address;
        this.disabledAt = $.disabledAt;
        this.enabled = $.enabled;
        this.header = $.header;
        this.name = $.name;
        this.port = $.port;
        this.virtualNetworkId = $.virtualNetworkId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerPoolOriginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerPoolOriginArgs $;

        public Builder() {
            $ = new LoadBalancerPoolOriginArgs();
        }

        public Builder(LoadBalancerPoolOriginArgs defaults) {
            $ = new LoadBalancerPoolOriginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual*network*id must also be set.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The IP address (IPv4 or IPv6) of the origin, or its publicly addressable hostname. Hostnames entered here should resolve directly to the origin, and not be a hostname proxied by Cloudflare. To set an internal/reserved address, virtual*network*id must also be set.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param disabledAt This field shows up only if the origin is disabled. This field is set with the time the origin was disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabledAt(@Nullable Output<String> disabledAt) {
            $.disabledAt = disabledAt;
            return this;
        }

        /**
         * @param disabledAt This field shows up only if the origin is disabled. This field is set with the time the origin was disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabledAt(String disabledAt) {
            return disabledAt(Output.of(disabledAt));
        }

        /**
         * @param enabled Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable (the default) this origin within the pool. Disabled origins will not receive traffic and are excluded from health checks. The origin will only be disabled for the current pool.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param header The request header is used to pass additional information with an HTTP request. Currently supported header is &#39;Host&#39;.
         * 
         * @return builder
         * 
         */
        public Builder header(@Nullable Output<LoadBalancerPoolOriginHeaderArgs> header) {
            $.header = header;
            return this;
        }

        /**
         * @param header The request header is used to pass additional information with an HTTP request. Currently supported header is &#39;Host&#39;.
         * 
         * @return builder
         * 
         */
        public Builder header(LoadBalancerPoolOriginHeaderArgs header) {
            return header(Output.of(header));
        }

        /**
         * @param name A human-identifiable name for the origin.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A human-identifiable name for the origin.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port for upstream connections. A value of 0 means the default port for the protocol will be used.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port for upstream connections. A value of 0 means the default port for the protocol will be used.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param virtualNetworkId The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId The virtual network subnet ID the origin belongs in. Virtual network must also belong to the account.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        /**
         * @param weight The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        /**
         * @param weight The weight of this origin relative to other origins in the pool. Based on the configured weight the total traffic is distributed among origins within the pool.
         * 
         * @return builder
         * 
         */
        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public LoadBalancerPoolOriginArgs build() {
            return $;
        }
    }

}
