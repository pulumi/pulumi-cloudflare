// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultCorsHeaders;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultDestination;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultFooterLink;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultLandingPageDesign;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultPolicy;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultSaasApp;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultScimConfig;
import com.pulumi.cloudflare.outputs.GetZeroTrustAccessApplicationsResultTargetCriteria;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessApplicationsResult {
    /**
     * @return When set to true, users can authenticate to this application using their WARP session.  When set to false this application will always require direct IdP authentication. This setting always overrides the organization setting for WARP authentication.
     * 
     */
    private Boolean allowAuthenticateViaWarp;
    /**
     * @return The identity providers your users can select when connecting to this application. Defaults to all IdPs configured in your account.
     * 
     */
    private List<String> allowedIdps;
    /**
     * @return The image URL of the logo shown in the App Launcher header.
     * 
     */
    private String appLauncherLogoUrl;
    /**
     * @return Displays the application in the App Launcher.
     * 
     */
    private Boolean appLauncherVisible;
    /**
     * @return Audience tag.
     * 
     */
    private String aud;
    /**
     * @return When set to `true`, users skip the identity provider selection step during login. You must specify only one identity provider in allowed_idps.
     * 
     */
    private Boolean autoRedirectToIdentity;
    /**
     * @return The background color of the App Launcher page.
     * 
     */
    private String bgColor;
    private GetZeroTrustAccessApplicationsResultCorsHeaders corsHeaders;
    private String createdAt;
    /**
     * @return The custom error message shown to a user when they are denied access to the application.
     * 
     */
    private String customDenyMessage;
    /**
     * @return The custom URL a user is redirected to when they are denied access to the application when failing identity-based rules.
     * 
     */
    private String customDenyUrl;
    /**
     * @return The custom URL a user is redirected to when they are denied access to the application when failing non-identity rules.
     * 
     */
    private String customNonIdentityDenyUrl;
    /**
     * @return The custom pages that will be displayed when applicable for this application
     * 
     */
    private List<String> customPages;
    /**
     * @return List of destinations secured by Access. This supersedes `self_hosted_domains` to allow for more flexibility in defining different types of domains. If `destinations` are provided, then `self_hosted_domains` will be ignored.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultDestination> destinations;
    /**
     * @return The primary hostname and path secured by Access. This domain will be displayed if the app is visible in the App Launcher.
     * 
     */
    private String domain;
    /**
     * @return Enables the binding cookie, which increases security against compromised authorization tokens and CSRF attacks.
     * 
     */
    private Boolean enableBindingCookie;
    /**
     * @return The links in the App Launcher footer.
     * 
     */
    private List<GetZeroTrustAccessApplicationsResultFooterLink> footerLinks;
    /**
     * @return The background color of the App Launcher header.
     * 
     */
    private String headerBgColor;
    /**
     * @return Enables the HttpOnly cookie attribute, which increases security against XSS attacks.
     * 
     */
    private Boolean httpOnlyCookieAttribute;
    /**
     * @return UUID
     * 
     */
    private String id;
    /**
     * @return The design of the App Launcher landing page shown to users when they log in.
     * 
     */
    private GetZeroTrustAccessApplicationsResultLandingPageDesign landingPageDesign;
    /**
     * @return The image URL for the logo shown in the App Launcher dashboard.
     * 
     */
    private String logoUrl;
    /**
     * @return The name of the application.
     * 
     */
    private String name;
    /**
     * @return Allows options preflight requests to bypass Access authentication and go directly to the origin. Cannot turn on if cors_headers is set.
     * 
     */
    private Boolean optionsPreflightBypass;
    /**
     * @return Enables cookie paths to scope an application&#39;s JWT to the application path. If disabled, the JWT will scope to the hostname by default
     * 
     */
    private Boolean pathCookieAttribute;
    private List<GetZeroTrustAccessApplicationsResultPolicy> policies;
    private GetZeroTrustAccessApplicationsResultSaasApp saasApp;
    /**
     * @return Sets the SameSite cookie setting, which provides increased security against CSRF attacks.
     * 
     */
    private String sameSiteCookieAttribute;
    /**
     * @return Configuration for provisioning to this application via SCIM. This is currently in closed beta.
     * 
     */
    private GetZeroTrustAccessApplicationsResultScimConfig scimConfig;
    /**
     * @return List of public domains that Access will secure. This field is deprecated in favor of `destinations` and will be supported until **November 21, 2025.** If `destinations` are provided, then `self_hosted_domains` will be ignored.
     * 
     */
    private List<String> selfHostedDomains;
    /**
     * @return Returns a 401 status code when the request is blocked by a Service Auth policy.
     * 
     */
    private Boolean serviceAuth401Redirect;
    /**
     * @return The amount of time that tokens issued for this application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     * 
     */
    private String sessionDuration;
    /**
     * @return Determines when to skip the App Launcher landing page.
     * 
     */
    private Boolean skipAppLauncherLoginPage;
    /**
     * @return Enables automatic authentication through cloudflared.
     * 
     */
    private Boolean skipInterstitial;
    /**
     * @return The tags you want assigned to an application. Tags are used to filter applications in the App Launcher dashboard.
     * 
     */
    private List<String> tags;
    private List<GetZeroTrustAccessApplicationsResultTargetCriteria> targetCriterias;
    /**
     * @return The application type.
     * 
     */
    private String type;
    private String updatedAt;

    private GetZeroTrustAccessApplicationsResult() {}
    /**
     * @return When set to true, users can authenticate to this application using their WARP session.  When set to false this application will always require direct IdP authentication. This setting always overrides the organization setting for WARP authentication.
     * 
     */
    public Boolean allowAuthenticateViaWarp() {
        return this.allowAuthenticateViaWarp;
    }
    /**
     * @return The identity providers your users can select when connecting to this application. Defaults to all IdPs configured in your account.
     * 
     */
    public List<String> allowedIdps() {
        return this.allowedIdps;
    }
    /**
     * @return The image URL of the logo shown in the App Launcher header.
     * 
     */
    public String appLauncherLogoUrl() {
        return this.appLauncherLogoUrl;
    }
    /**
     * @return Displays the application in the App Launcher.
     * 
     */
    public Boolean appLauncherVisible() {
        return this.appLauncherVisible;
    }
    /**
     * @return Audience tag.
     * 
     */
    public String aud() {
        return this.aud;
    }
    /**
     * @return When set to `true`, users skip the identity provider selection step during login. You must specify only one identity provider in allowed_idps.
     * 
     */
    public Boolean autoRedirectToIdentity() {
        return this.autoRedirectToIdentity;
    }
    /**
     * @return The background color of the App Launcher page.
     * 
     */
    public String bgColor() {
        return this.bgColor;
    }
    public GetZeroTrustAccessApplicationsResultCorsHeaders corsHeaders() {
        return this.corsHeaders;
    }
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The custom error message shown to a user when they are denied access to the application.
     * 
     */
    public String customDenyMessage() {
        return this.customDenyMessage;
    }
    /**
     * @return The custom URL a user is redirected to when they are denied access to the application when failing identity-based rules.
     * 
     */
    public String customDenyUrl() {
        return this.customDenyUrl;
    }
    /**
     * @return The custom URL a user is redirected to when they are denied access to the application when failing non-identity rules.
     * 
     */
    public String customNonIdentityDenyUrl() {
        return this.customNonIdentityDenyUrl;
    }
    /**
     * @return The custom pages that will be displayed when applicable for this application
     * 
     */
    public List<String> customPages() {
        return this.customPages;
    }
    /**
     * @return List of destinations secured by Access. This supersedes `self_hosted_domains` to allow for more flexibility in defining different types of domains. If `destinations` are provided, then `self_hosted_domains` will be ignored.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultDestination> destinations() {
        return this.destinations;
    }
    /**
     * @return The primary hostname and path secured by Access. This domain will be displayed if the app is visible in the App Launcher.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Enables the binding cookie, which increases security against compromised authorization tokens and CSRF attacks.
     * 
     */
    public Boolean enableBindingCookie() {
        return this.enableBindingCookie;
    }
    /**
     * @return The links in the App Launcher footer.
     * 
     */
    public List<GetZeroTrustAccessApplicationsResultFooterLink> footerLinks() {
        return this.footerLinks;
    }
    /**
     * @return The background color of the App Launcher header.
     * 
     */
    public String headerBgColor() {
        return this.headerBgColor;
    }
    /**
     * @return Enables the HttpOnly cookie attribute, which increases security against XSS attacks.
     * 
     */
    public Boolean httpOnlyCookieAttribute() {
        return this.httpOnlyCookieAttribute;
    }
    /**
     * @return UUID
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The design of the App Launcher landing page shown to users when they log in.
     * 
     */
    public GetZeroTrustAccessApplicationsResultLandingPageDesign landingPageDesign() {
        return this.landingPageDesign;
    }
    /**
     * @return The image URL for the logo shown in the App Launcher dashboard.
     * 
     */
    public String logoUrl() {
        return this.logoUrl;
    }
    /**
     * @return The name of the application.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Allows options preflight requests to bypass Access authentication and go directly to the origin. Cannot turn on if cors_headers is set.
     * 
     */
    public Boolean optionsPreflightBypass() {
        return this.optionsPreflightBypass;
    }
    /**
     * @return Enables cookie paths to scope an application&#39;s JWT to the application path. If disabled, the JWT will scope to the hostname by default
     * 
     */
    public Boolean pathCookieAttribute() {
        return this.pathCookieAttribute;
    }
    public List<GetZeroTrustAccessApplicationsResultPolicy> policies() {
        return this.policies;
    }
    public GetZeroTrustAccessApplicationsResultSaasApp saasApp() {
        return this.saasApp;
    }
    /**
     * @return Sets the SameSite cookie setting, which provides increased security against CSRF attacks.
     * 
     */
    public String sameSiteCookieAttribute() {
        return this.sameSiteCookieAttribute;
    }
    /**
     * @return Configuration for provisioning to this application via SCIM. This is currently in closed beta.
     * 
     */
    public GetZeroTrustAccessApplicationsResultScimConfig scimConfig() {
        return this.scimConfig;
    }
    /**
     * @return List of public domains that Access will secure. This field is deprecated in favor of `destinations` and will be supported until **November 21, 2025.** If `destinations` are provided, then `self_hosted_domains` will be ignored.
     * 
     */
    public List<String> selfHostedDomains() {
        return this.selfHostedDomains;
    }
    /**
     * @return Returns a 401 status code when the request is blocked by a Service Auth policy.
     * 
     */
    public Boolean serviceAuth401Redirect() {
        return this.serviceAuth401Redirect;
    }
    /**
     * @return The amount of time that tokens issued for this application will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or Âµs), ms, s, m, h.
     * 
     */
    public String sessionDuration() {
        return this.sessionDuration;
    }
    /**
     * @return Determines when to skip the App Launcher landing page.
     * 
     */
    public Boolean skipAppLauncherLoginPage() {
        return this.skipAppLauncherLoginPage;
    }
    /**
     * @return Enables automatic authentication through cloudflared.
     * 
     */
    public Boolean skipInterstitial() {
        return this.skipInterstitial;
    }
    /**
     * @return The tags you want assigned to an application. Tags are used to filter applications in the App Launcher dashboard.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    public List<GetZeroTrustAccessApplicationsResultTargetCriteria> targetCriterias() {
        return this.targetCriterias;
    }
    /**
     * @return The application type.
     * 
     */
    public String type() {
        return this.type;
    }
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessApplicationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowAuthenticateViaWarp;
        private List<String> allowedIdps;
        private String appLauncherLogoUrl;
        private Boolean appLauncherVisible;
        private String aud;
        private Boolean autoRedirectToIdentity;
        private String bgColor;
        private GetZeroTrustAccessApplicationsResultCorsHeaders corsHeaders;
        private String createdAt;
        private String customDenyMessage;
        private String customDenyUrl;
        private String customNonIdentityDenyUrl;
        private List<String> customPages;
        private List<GetZeroTrustAccessApplicationsResultDestination> destinations;
        private String domain;
        private Boolean enableBindingCookie;
        private List<GetZeroTrustAccessApplicationsResultFooterLink> footerLinks;
        private String headerBgColor;
        private Boolean httpOnlyCookieAttribute;
        private String id;
        private GetZeroTrustAccessApplicationsResultLandingPageDesign landingPageDesign;
        private String logoUrl;
        private String name;
        private Boolean optionsPreflightBypass;
        private Boolean pathCookieAttribute;
        private List<GetZeroTrustAccessApplicationsResultPolicy> policies;
        private GetZeroTrustAccessApplicationsResultSaasApp saasApp;
        private String sameSiteCookieAttribute;
        private GetZeroTrustAccessApplicationsResultScimConfig scimConfig;
        private List<String> selfHostedDomains;
        private Boolean serviceAuth401Redirect;
        private String sessionDuration;
        private Boolean skipAppLauncherLoginPage;
        private Boolean skipInterstitial;
        private List<String> tags;
        private List<GetZeroTrustAccessApplicationsResultTargetCriteria> targetCriterias;
        private String type;
        private String updatedAt;
        public Builder() {}
        public Builder(GetZeroTrustAccessApplicationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowAuthenticateViaWarp = defaults.allowAuthenticateViaWarp;
    	      this.allowedIdps = defaults.allowedIdps;
    	      this.appLauncherLogoUrl = defaults.appLauncherLogoUrl;
    	      this.appLauncherVisible = defaults.appLauncherVisible;
    	      this.aud = defaults.aud;
    	      this.autoRedirectToIdentity = defaults.autoRedirectToIdentity;
    	      this.bgColor = defaults.bgColor;
    	      this.corsHeaders = defaults.corsHeaders;
    	      this.createdAt = defaults.createdAt;
    	      this.customDenyMessage = defaults.customDenyMessage;
    	      this.customDenyUrl = defaults.customDenyUrl;
    	      this.customNonIdentityDenyUrl = defaults.customNonIdentityDenyUrl;
    	      this.customPages = defaults.customPages;
    	      this.destinations = defaults.destinations;
    	      this.domain = defaults.domain;
    	      this.enableBindingCookie = defaults.enableBindingCookie;
    	      this.footerLinks = defaults.footerLinks;
    	      this.headerBgColor = defaults.headerBgColor;
    	      this.httpOnlyCookieAttribute = defaults.httpOnlyCookieAttribute;
    	      this.id = defaults.id;
    	      this.landingPageDesign = defaults.landingPageDesign;
    	      this.logoUrl = defaults.logoUrl;
    	      this.name = defaults.name;
    	      this.optionsPreflightBypass = defaults.optionsPreflightBypass;
    	      this.pathCookieAttribute = defaults.pathCookieAttribute;
    	      this.policies = defaults.policies;
    	      this.saasApp = defaults.saasApp;
    	      this.sameSiteCookieAttribute = defaults.sameSiteCookieAttribute;
    	      this.scimConfig = defaults.scimConfig;
    	      this.selfHostedDomains = defaults.selfHostedDomains;
    	      this.serviceAuth401Redirect = defaults.serviceAuth401Redirect;
    	      this.sessionDuration = defaults.sessionDuration;
    	      this.skipAppLauncherLoginPage = defaults.skipAppLauncherLoginPage;
    	      this.skipInterstitial = defaults.skipInterstitial;
    	      this.tags = defaults.tags;
    	      this.targetCriterias = defaults.targetCriterias;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder allowAuthenticateViaWarp(Boolean allowAuthenticateViaWarp) {
            if (allowAuthenticateViaWarp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "allowAuthenticateViaWarp");
            }
            this.allowAuthenticateViaWarp = allowAuthenticateViaWarp;
            return this;
        }
        @CustomType.Setter
        public Builder allowedIdps(List<String> allowedIdps) {
            if (allowedIdps == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "allowedIdps");
            }
            this.allowedIdps = allowedIdps;
            return this;
        }
        public Builder allowedIdps(String... allowedIdps) {
            return allowedIdps(List.of(allowedIdps));
        }
        @CustomType.Setter
        public Builder appLauncherLogoUrl(String appLauncherLogoUrl) {
            if (appLauncherLogoUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "appLauncherLogoUrl");
            }
            this.appLauncherLogoUrl = appLauncherLogoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder appLauncherVisible(Boolean appLauncherVisible) {
            if (appLauncherVisible == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "appLauncherVisible");
            }
            this.appLauncherVisible = appLauncherVisible;
            return this;
        }
        @CustomType.Setter
        public Builder aud(String aud) {
            if (aud == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "aud");
            }
            this.aud = aud;
            return this;
        }
        @CustomType.Setter
        public Builder autoRedirectToIdentity(Boolean autoRedirectToIdentity) {
            if (autoRedirectToIdentity == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "autoRedirectToIdentity");
            }
            this.autoRedirectToIdentity = autoRedirectToIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder bgColor(String bgColor) {
            if (bgColor == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "bgColor");
            }
            this.bgColor = bgColor;
            return this;
        }
        @CustomType.Setter
        public Builder corsHeaders(GetZeroTrustAccessApplicationsResultCorsHeaders corsHeaders) {
            if (corsHeaders == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "corsHeaders");
            }
            this.corsHeaders = corsHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customDenyMessage(String customDenyMessage) {
            if (customDenyMessage == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "customDenyMessage");
            }
            this.customDenyMessage = customDenyMessage;
            return this;
        }
        @CustomType.Setter
        public Builder customDenyUrl(String customDenyUrl) {
            if (customDenyUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "customDenyUrl");
            }
            this.customDenyUrl = customDenyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder customNonIdentityDenyUrl(String customNonIdentityDenyUrl) {
            if (customNonIdentityDenyUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "customNonIdentityDenyUrl");
            }
            this.customNonIdentityDenyUrl = customNonIdentityDenyUrl;
            return this;
        }
        @CustomType.Setter
        public Builder customPages(List<String> customPages) {
            if (customPages == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "customPages");
            }
            this.customPages = customPages;
            return this;
        }
        public Builder customPages(String... customPages) {
            return customPages(List.of(customPages));
        }
        @CustomType.Setter
        public Builder destinations(List<GetZeroTrustAccessApplicationsResultDestination> destinations) {
            if (destinations == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "destinations");
            }
            this.destinations = destinations;
            return this;
        }
        public Builder destinations(GetZeroTrustAccessApplicationsResultDestination... destinations) {
            return destinations(List.of(destinations));
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enableBindingCookie(Boolean enableBindingCookie) {
            if (enableBindingCookie == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "enableBindingCookie");
            }
            this.enableBindingCookie = enableBindingCookie;
            return this;
        }
        @CustomType.Setter
        public Builder footerLinks(List<GetZeroTrustAccessApplicationsResultFooterLink> footerLinks) {
            if (footerLinks == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "footerLinks");
            }
            this.footerLinks = footerLinks;
            return this;
        }
        public Builder footerLinks(GetZeroTrustAccessApplicationsResultFooterLink... footerLinks) {
            return footerLinks(List.of(footerLinks));
        }
        @CustomType.Setter
        public Builder headerBgColor(String headerBgColor) {
            if (headerBgColor == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "headerBgColor");
            }
            this.headerBgColor = headerBgColor;
            return this;
        }
        @CustomType.Setter
        public Builder httpOnlyCookieAttribute(Boolean httpOnlyCookieAttribute) {
            if (httpOnlyCookieAttribute == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "httpOnlyCookieAttribute");
            }
            this.httpOnlyCookieAttribute = httpOnlyCookieAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder landingPageDesign(GetZeroTrustAccessApplicationsResultLandingPageDesign landingPageDesign) {
            if (landingPageDesign == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "landingPageDesign");
            }
            this.landingPageDesign = landingPageDesign;
            return this;
        }
        @CustomType.Setter
        public Builder logoUrl(String logoUrl) {
            if (logoUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "logoUrl");
            }
            this.logoUrl = logoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optionsPreflightBypass(Boolean optionsPreflightBypass) {
            if (optionsPreflightBypass == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "optionsPreflightBypass");
            }
            this.optionsPreflightBypass = optionsPreflightBypass;
            return this;
        }
        @CustomType.Setter
        public Builder pathCookieAttribute(Boolean pathCookieAttribute) {
            if (pathCookieAttribute == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "pathCookieAttribute");
            }
            this.pathCookieAttribute = pathCookieAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetZeroTrustAccessApplicationsResultPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetZeroTrustAccessApplicationsResultPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder saasApp(GetZeroTrustAccessApplicationsResultSaasApp saasApp) {
            if (saasApp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "saasApp");
            }
            this.saasApp = saasApp;
            return this;
        }
        @CustomType.Setter
        public Builder sameSiteCookieAttribute(String sameSiteCookieAttribute) {
            if (sameSiteCookieAttribute == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "sameSiteCookieAttribute");
            }
            this.sameSiteCookieAttribute = sameSiteCookieAttribute;
            return this;
        }
        @CustomType.Setter
        public Builder scimConfig(GetZeroTrustAccessApplicationsResultScimConfig scimConfig) {
            if (scimConfig == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "scimConfig");
            }
            this.scimConfig = scimConfig;
            return this;
        }
        @CustomType.Setter
        public Builder selfHostedDomains(List<String> selfHostedDomains) {
            if (selfHostedDomains == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "selfHostedDomains");
            }
            this.selfHostedDomains = selfHostedDomains;
            return this;
        }
        public Builder selfHostedDomains(String... selfHostedDomains) {
            return selfHostedDomains(List.of(selfHostedDomains));
        }
        @CustomType.Setter
        public Builder serviceAuth401Redirect(Boolean serviceAuth401Redirect) {
            if (serviceAuth401Redirect == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "serviceAuth401Redirect");
            }
            this.serviceAuth401Redirect = serviceAuth401Redirect;
            return this;
        }
        @CustomType.Setter
        public Builder sessionDuration(String sessionDuration) {
            if (sessionDuration == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "sessionDuration");
            }
            this.sessionDuration = sessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder skipAppLauncherLoginPage(Boolean skipAppLauncherLoginPage) {
            if (skipAppLauncherLoginPage == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "skipAppLauncherLoginPage");
            }
            this.skipAppLauncherLoginPage = skipAppLauncherLoginPage;
            return this;
        }
        @CustomType.Setter
        public Builder skipInterstitial(Boolean skipInterstitial) {
            if (skipInterstitial == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "skipInterstitial");
            }
            this.skipInterstitial = skipInterstitial;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder targetCriterias(List<GetZeroTrustAccessApplicationsResultTargetCriteria> targetCriterias) {
            if (targetCriterias == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "targetCriterias");
            }
            this.targetCriterias = targetCriterias;
            return this;
        }
        public Builder targetCriterias(GetZeroTrustAccessApplicationsResultTargetCriteria... targetCriterias) {
            return targetCriterias(List.of(targetCriterias));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessApplicationsResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetZeroTrustAccessApplicationsResult build() {
            final var _resultValue = new GetZeroTrustAccessApplicationsResult();
            _resultValue.allowAuthenticateViaWarp = allowAuthenticateViaWarp;
            _resultValue.allowedIdps = allowedIdps;
            _resultValue.appLauncherLogoUrl = appLauncherLogoUrl;
            _resultValue.appLauncherVisible = appLauncherVisible;
            _resultValue.aud = aud;
            _resultValue.autoRedirectToIdentity = autoRedirectToIdentity;
            _resultValue.bgColor = bgColor;
            _resultValue.corsHeaders = corsHeaders;
            _resultValue.createdAt = createdAt;
            _resultValue.customDenyMessage = customDenyMessage;
            _resultValue.customDenyUrl = customDenyUrl;
            _resultValue.customNonIdentityDenyUrl = customNonIdentityDenyUrl;
            _resultValue.customPages = customPages;
            _resultValue.destinations = destinations;
            _resultValue.domain = domain;
            _resultValue.enableBindingCookie = enableBindingCookie;
            _resultValue.footerLinks = footerLinks;
            _resultValue.headerBgColor = headerBgColor;
            _resultValue.httpOnlyCookieAttribute = httpOnlyCookieAttribute;
            _resultValue.id = id;
            _resultValue.landingPageDesign = landingPageDesign;
            _resultValue.logoUrl = logoUrl;
            _resultValue.name = name;
            _resultValue.optionsPreflightBypass = optionsPreflightBypass;
            _resultValue.pathCookieAttribute = pathCookieAttribute;
            _resultValue.policies = policies;
            _resultValue.saasApp = saasApp;
            _resultValue.sameSiteCookieAttribute = sameSiteCookieAttribute;
            _resultValue.scimConfig = scimConfig;
            _resultValue.selfHostedDomains = selfHostedDomains;
            _resultValue.serviceAuth401Redirect = serviceAuth401Redirect;
            _resultValue.sessionDuration = sessionDuration;
            _resultValue.skipAppLauncherLoginPage = skipAppLauncherLoginPage;
            _resultValue.skipInterstitial = skipInterstitial;
            _resultValue.tags = tags;
            _resultValue.targetCriterias = targetCriterias;
            _resultValue.type = type;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
