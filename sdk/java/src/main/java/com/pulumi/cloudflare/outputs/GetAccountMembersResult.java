// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAccountMembersResultPolicy;
import com.pulumi.cloudflare.outputs.GetAccountMembersResultRole;
import com.pulumi.cloudflare.outputs.GetAccountMembersResultUser;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAccountMembersResult {
    /**
     * @return The contact email address of the user.
     * 
     */
    private String email;
    /**
     * @return Membership identifier tag.
     * 
     */
    private String id;
    /**
     * @return Access policy for the membership
     * 
     */
    private List<GetAccountMembersResultPolicy> policies;
    /**
     * @return Roles assigned to this Member.
     * 
     */
    private List<GetAccountMembersResultRole> roles;
    /**
     * @return A member&#39;s status in the account.
     * Available values: &#34;accepted&#34;, &#34;pending&#34;.
     * 
     */
    private String status;
    /**
     * @return Details of the user associated to the membership.
     * 
     */
    private GetAccountMembersResultUser user;

    private GetAccountMembersResult() {}
    /**
     * @return The contact email address of the user.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return Membership identifier tag.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Access policy for the membership
     * 
     */
    public List<GetAccountMembersResultPolicy> policies() {
        return this.policies;
    }
    /**
     * @return Roles assigned to this Member.
     * 
     */
    public List<GetAccountMembersResultRole> roles() {
        return this.roles;
    }
    /**
     * @return A member&#39;s status in the account.
     * Available values: &#34;accepted&#34;, &#34;pending&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Details of the user associated to the membership.
     * 
     */
    public GetAccountMembersResultUser user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountMembersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String email;
        private String id;
        private List<GetAccountMembersResultPolicy> policies;
        private List<GetAccountMembersResultRole> roles;
        private String status;
        private GetAccountMembersResultUser user;
        public Builder() {}
        public Builder(GetAccountMembersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.policies = defaults.policies;
    	      this.roles = defaults.roles;
    	      this.status = defaults.status;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetAccountMembersResultPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetAccountMembersResultPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder roles(List<GetAccountMembersResultRole> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(GetAccountMembersResultRole... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder user(GetAccountMembersResultUser user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetAccountMembersResult", "user");
            }
            this.user = user;
            return this;
        }
        public GetAccountMembersResult build() {
            final var _resultValue = new GetAccountMembersResult();
            _resultValue.email = email;
            _resultValue.id = id;
            _resultValue.policies = policies;
            _resultValue.roles = roles;
            _resultValue.status = status;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
