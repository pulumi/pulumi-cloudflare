// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccountMemberPolicyArgs;
import com.pulumi.cloudflare.inputs.AccountMemberUserArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountMemberState extends com.pulumi.resources.ResourceArgs {

    public static final AccountMemberState Empty = new AccountMemberState();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The contact email address of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The contact email address of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * Array of policies associated with this member.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<List<AccountMemberPolicyArgs>> policies;

    /**
     * @return Array of policies associated with this member.
     * 
     */
    public Optional<Output<List<AccountMemberPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * Array of roles associated with this member.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Array of roles associated with this member.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Available values: &#34;accepted&#34;, &#34;pending&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Available values: &#34;accepted&#34;, &#34;pending&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Details of the user associated to the membership.
     * 
     */
    @Import(name="user")
    private @Nullable Output<AccountMemberUserArgs> user;

    /**
     * @return Details of the user associated to the membership.
     * 
     */
    public Optional<Output<AccountMemberUserArgs>> user() {
        return Optional.ofNullable(this.user);
    }

    private AccountMemberState() {}

    private AccountMemberState(AccountMemberState $) {
        this.accountId = $.accountId;
        this.email = $.email;
        this.policies = $.policies;
        this.roles = $.roles;
        this.status = $.status;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountMemberState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountMemberState $;

        public Builder() {
            $ = new AccountMemberState();
        }

        public Builder(AccountMemberState defaults) {
            $ = new AccountMemberState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param email The contact email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The contact email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param policies Array of policies associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder policies(@Nullable Output<List<AccountMemberPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        /**
         * @param policies Array of policies associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder policies(List<AccountMemberPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        /**
         * @param policies Array of policies associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder policies(AccountMemberPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param roles Array of roles associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Array of roles associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Array of roles associated with this member.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param status Available values: &#34;accepted&#34;, &#34;pending&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Available values: &#34;accepted&#34;, &#34;pending&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param user Details of the user associated to the membership.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<AccountMemberUserArgs> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Details of the user associated to the membership.
         * 
         * @return builder
         * 
         */
        public Builder user(AccountMemberUserArgs user) {
            return user(Output.of(user));
        }

        public AccountMemberState build() {
            return $;
        }
    }

}
