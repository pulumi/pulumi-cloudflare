// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.GetAccountDnsSettingsInternalViewsName;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccountDnsSettingsInternalViewsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccountDnsSettingsInternalViewsPlainArgs Empty = new GetAccountDnsSettingsInternalViewsPlainArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private String accountId;

    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }

    /**
     * Direction to order DNS views in.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    /**
     * @return Direction to order DNS views in.
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    @Import(name="match")
    private @Nullable String match;

    /**
     * @return Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
     * Available values: &#34;any&#34;, &#34;all&#34;.
     * 
     */
    public Optional<String> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    @Import(name="name")
    private @Nullable GetAccountDnsSettingsInternalViewsName name;

    public Optional<GetAccountDnsSettingsInternalViewsName> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Field to order DNS views by.
     * Available values: &#34;name&#34;, &#34;created*on&#34;, &#34;modified*on&#34;.
     * 
     */
    @Import(name="order")
    private @Nullable String order;

    /**
     * @return Field to order DNS views by.
     * Available values: &#34;name&#34;, &#34;created*on&#34;, &#34;modified*on&#34;.
     * 
     */
    public Optional<String> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * A zone ID that exists in the zones list for the view.
     * 
     */
    @Import(name="zoneId")
    private @Nullable String zoneId;

    /**
     * @return A zone ID that exists in the zones list for the view.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    /**
     * A zone name that exists in the zones list for the view.
     * 
     */
    @Import(name="zoneName")
    private @Nullable String zoneName;

    /**
     * @return A zone name that exists in the zones list for the view.
     * 
     */
    public Optional<String> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    private GetAccountDnsSettingsInternalViewsPlainArgs() {}

    private GetAccountDnsSettingsInternalViewsPlainArgs(GetAccountDnsSettingsInternalViewsPlainArgs $) {
        this.accountId = $.accountId;
        this.direction = $.direction;
        this.match = $.match;
        this.maxItems = $.maxItems;
        this.name = $.name;
        this.order = $.order;
        this.zoneId = $.zoneId;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccountDnsSettingsInternalViewsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccountDnsSettingsInternalViewsPlainArgs $;

        public Builder() {
            $ = new GetAccountDnsSettingsInternalViewsPlainArgs();
        }

        public Builder(GetAccountDnsSettingsInternalViewsPlainArgs defaults) {
            $ = new GetAccountDnsSettingsInternalViewsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param direction Direction to order DNS views in.
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param match Whether to match all search requirements or at least one (any). If set to `all`, acts like a logical AND between filters. If set to `any`, acts like a logical OR instead.
         * Available values: &#34;any&#34;, &#34;all&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable String match) {
            $.match = match;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        public Builder name(@Nullable GetAccountDnsSettingsInternalViewsName name) {
            $.name = name;
            return this;
        }

        /**
         * @param order Field to order DNS views by.
         * Available values: &#34;name&#34;, &#34;created*on&#34;, &#34;modified*on&#34;.
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable String order) {
            $.order = order;
            return this;
        }

        /**
         * @param zoneId A zone ID that exists in the zones list for the view.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneName A zone name that exists in the zones list for the view.
         * 
         * @return builder
         * 
         */
        public Builder zoneName(@Nullable String zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        public GetAccountDnsSettingsInternalViewsPlainArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetAccountDnsSettingsInternalViewsPlainArgs", "accountId");
            }
            return $;
        }
    }

}
