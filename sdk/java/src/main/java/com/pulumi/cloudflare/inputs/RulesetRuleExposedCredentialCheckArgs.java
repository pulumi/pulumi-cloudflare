// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class RulesetRuleExposedCredentialCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleExposedCredentialCheckArgs Empty = new RulesetRuleExposedCredentialCheckArgs();

    /**
     * An expression that selects the password used in the credentials check.
     * 
     */
    @Import(name="passwordExpression", required=true)
    private Output<String> passwordExpression;

    /**
     * @return An expression that selects the password used in the credentials check.
     * 
     */
    public Output<String> passwordExpression() {
        return this.passwordExpression;
    }

    /**
     * An expression that selects the user ID used in the credentials check.
     * 
     */
    @Import(name="usernameExpression", required=true)
    private Output<String> usernameExpression;

    /**
     * @return An expression that selects the user ID used in the credentials check.
     * 
     */
    public Output<String> usernameExpression() {
        return this.usernameExpression;
    }

    private RulesetRuleExposedCredentialCheckArgs() {}

    private RulesetRuleExposedCredentialCheckArgs(RulesetRuleExposedCredentialCheckArgs $) {
        this.passwordExpression = $.passwordExpression;
        this.usernameExpression = $.usernameExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleExposedCredentialCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleExposedCredentialCheckArgs $;

        public Builder() {
            $ = new RulesetRuleExposedCredentialCheckArgs();
        }

        public Builder(RulesetRuleExposedCredentialCheckArgs defaults) {
            $ = new RulesetRuleExposedCredentialCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordExpression An expression that selects the password used in the credentials check.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpression(Output<String> passwordExpression) {
            $.passwordExpression = passwordExpression;
            return this;
        }

        /**
         * @param passwordExpression An expression that selects the password used in the credentials check.
         * 
         * @return builder
         * 
         */
        public Builder passwordExpression(String passwordExpression) {
            return passwordExpression(Output.of(passwordExpression));
        }

        /**
         * @param usernameExpression An expression that selects the user ID used in the credentials check.
         * 
         * @return builder
         * 
         */
        public Builder usernameExpression(Output<String> usernameExpression) {
            $.usernameExpression = usernameExpression;
            return this;
        }

        /**
         * @param usernameExpression An expression that selects the user ID used in the credentials check.
         * 
         * @return builder
         * 
         */
        public Builder usernameExpression(String usernameExpression) {
            return usernameExpression(Output.of(usernameExpression));
        }

        public RulesetRuleExposedCredentialCheckArgs build() {
            if ($.passwordExpression == null) {
                throw new MissingRequiredPropertyException("RulesetRuleExposedCredentialCheckArgs", "passwordExpression");
            }
            if ($.usernameExpression == null) {
                throw new MissingRequiredPropertyException("RulesetRuleExposedCredentialCheckArgs", "usernameExpression");
            }
            return $;
        }
    }

}
