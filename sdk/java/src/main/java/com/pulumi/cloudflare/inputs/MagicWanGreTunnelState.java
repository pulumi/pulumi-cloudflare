// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicWanGreTunnelGreTunnelArgs;
import com.pulumi.cloudflare.inputs.MagicWanGreTunnelHealthCheckArgs;
import com.pulumi.cloudflare.inputs.MagicWanGreTunnelModifiedGreTunnelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicWanGreTunnelState extends com.pulumi.resources.ResourceArgs {

    public static final MagicWanGreTunnelState Empty = new MagicWanGreTunnelState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    @Import(name="cloudflareGreEndpoint")
    private @Nullable Output<String> cloudflareGreEndpoint;

    /**
     * @return The IP address assigned to the Cloudflare side of the GRE tunnel.
     * 
     */
    public Optional<Output<String>> cloudflareGreEndpoint() {
        return Optional.ofNullable(this.cloudflareGreEndpoint);
    }

    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    @Import(name="customerGreEndpoint")
    private @Nullable Output<String> customerGreEndpoint;

    /**
     * @return The IP address assigned to the customer side of the GRE tunnel.
     * 
     */
    public Optional<Output<String>> customerGreEndpoint() {
        return Optional.ofNullable(this.customerGreEndpoint);
    }

    /**
     * An optional description of the GRE tunnel.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of the GRE tunnel.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="greTunnel")
    private @Nullable Output<MagicWanGreTunnelGreTunnelArgs> greTunnel;

    public Optional<Output<MagicWanGreTunnelGreTunnelArgs>> greTunnel() {
        return Optional.ofNullable(this.greTunnel);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="greTunnelId")
    private @Nullable Output<String> greTunnelId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> greTunnelId() {
        return Optional.ofNullable(this.greTunnelId);
    }

    @Import(name="greTunnels")
    private @Nullable Output<List<MagicWanGreTunnelGreTunnelArgs>> greTunnels;

    public Optional<Output<List<MagicWanGreTunnelGreTunnelArgs>>> greTunnels() {
        return Optional.ofNullable(this.greTunnels);
    }

    @Import(name="healthCheck")
    private @Nullable Output<MagicWanGreTunnelHealthCheckArgs> healthCheck;

    public Optional<Output<MagicWanGreTunnelHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    @Import(name="interfaceAddress")
    private @Nullable Output<String> interfaceAddress;

    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    public Optional<Output<String>> interfaceAddress() {
        return Optional.ofNullable(this.interfaceAddress);
    }

    @Import(name="modified")
    private @Nullable Output<Boolean> modified;

    public Optional<Output<Boolean>> modified() {
        return Optional.ofNullable(this.modified);
    }

    @Import(name="modifiedGreTunnel")
    private @Nullable Output<MagicWanGreTunnelModifiedGreTunnelArgs> modifiedGreTunnel;

    public Optional<Output<MagicWanGreTunnelModifiedGreTunnelArgs>> modifiedGreTunnel() {
        return Optional.ofNullable(this.modifiedGreTunnel);
    }

    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return Time To Live (TTL) in number of hops of the GRE tunnel.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private MagicWanGreTunnelState() {}

    private MagicWanGreTunnelState(MagicWanGreTunnelState $) {
        this.accountId = $.accountId;
        this.cloudflareGreEndpoint = $.cloudflareGreEndpoint;
        this.customerGreEndpoint = $.customerGreEndpoint;
        this.description = $.description;
        this.greTunnel = $.greTunnel;
        this.greTunnelId = $.greTunnelId;
        this.greTunnels = $.greTunnels;
        this.healthCheck = $.healthCheck;
        this.interfaceAddress = $.interfaceAddress;
        this.modified = $.modified;
        this.modifiedGreTunnel = $.modifiedGreTunnel;
        this.mtu = $.mtu;
        this.name = $.name;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicWanGreTunnelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicWanGreTunnelState $;

        public Builder() {
            $ = new MagicWanGreTunnelState();
        }

        public Builder(MagicWanGreTunnelState defaults) {
            $ = new MagicWanGreTunnelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param cloudflareGreEndpoint The IP address assigned to the Cloudflare side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareGreEndpoint(@Nullable Output<String> cloudflareGreEndpoint) {
            $.cloudflareGreEndpoint = cloudflareGreEndpoint;
            return this;
        }

        /**
         * @param cloudflareGreEndpoint The IP address assigned to the Cloudflare side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareGreEndpoint(String cloudflareGreEndpoint) {
            return cloudflareGreEndpoint(Output.of(cloudflareGreEndpoint));
        }

        /**
         * @param customerGreEndpoint The IP address assigned to the customer side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder customerGreEndpoint(@Nullable Output<String> customerGreEndpoint) {
            $.customerGreEndpoint = customerGreEndpoint;
            return this;
        }

        /**
         * @param customerGreEndpoint The IP address assigned to the customer side of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder customerGreEndpoint(String customerGreEndpoint) {
            return customerGreEndpoint(Output.of(customerGreEndpoint));
        }

        /**
         * @param description An optional description of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder greTunnel(@Nullable Output<MagicWanGreTunnelGreTunnelArgs> greTunnel) {
            $.greTunnel = greTunnel;
            return this;
        }

        public Builder greTunnel(MagicWanGreTunnelGreTunnelArgs greTunnel) {
            return greTunnel(Output.of(greTunnel));
        }

        /**
         * @param greTunnelId Identifier
         * 
         * @return builder
         * 
         */
        public Builder greTunnelId(@Nullable Output<String> greTunnelId) {
            $.greTunnelId = greTunnelId;
            return this;
        }

        /**
         * @param greTunnelId Identifier
         * 
         * @return builder
         * 
         */
        public Builder greTunnelId(String greTunnelId) {
            return greTunnelId(Output.of(greTunnelId));
        }

        public Builder greTunnels(@Nullable Output<List<MagicWanGreTunnelGreTunnelArgs>> greTunnels) {
            $.greTunnels = greTunnels;
            return this;
        }

        public Builder greTunnels(List<MagicWanGreTunnelGreTunnelArgs> greTunnels) {
            return greTunnels(Output.of(greTunnels));
        }

        public Builder greTunnels(MagicWanGreTunnelGreTunnelArgs... greTunnels) {
            return greTunnels(List.of(greTunnels));
        }

        public Builder healthCheck(@Nullable Output<MagicWanGreTunnelHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(MagicWanGreTunnelHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(@Nullable Output<String> interfaceAddress) {
            $.interfaceAddress = interfaceAddress;
            return this;
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(String interfaceAddress) {
            return interfaceAddress(Output.of(interfaceAddress));
        }

        public Builder modified(@Nullable Output<Boolean> modified) {
            $.modified = modified;
            return this;
        }

        public Builder modified(Boolean modified) {
            return modified(Output.of(modified));
        }

        public Builder modifiedGreTunnel(@Nullable Output<MagicWanGreTunnelModifiedGreTunnelArgs> modifiedGreTunnel) {
            $.modifiedGreTunnel = modifiedGreTunnel;
            return this;
        }

        public Builder modifiedGreTunnel(MagicWanGreTunnelModifiedGreTunnelArgs modifiedGreTunnel) {
            return modifiedGreTunnel(Output.of(modifiedGreTunnel));
        }

        /**
         * @param mtu Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Maximum Transmission Unit (MTU) in bytes for the GRE tunnel. The minimum value is 576.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tunnel. The name cannot contain spaces or special characters, must be 15 characters or less, and cannot share a name with another GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ttl Time To Live (TTL) in number of hops of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl Time To Live (TTL) in number of hops of the GRE tunnel.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public MagicWanGreTunnelState build() {
            return $;
        }
    }

}
