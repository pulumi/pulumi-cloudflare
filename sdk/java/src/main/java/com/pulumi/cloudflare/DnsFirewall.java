// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.DnsFirewallArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.DnsFirewallState;
import com.pulumi.cloudflare.outputs.DnsFirewallAttackMitigation;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.DnsFirewall;
 * import com.pulumi.cloudflare.DnsFirewallArgs;
 * import com.pulumi.cloudflare.inputs.DnsFirewallAttackMitigationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleDnsFirewall = new DnsFirewall("exampleDnsFirewall", DnsFirewallArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
<<<<<<< HEAD
=======
 *             .name("My Awesome DNS Firewall cluster")
 *             .upstreamIps(            
 *                 "192.0.2.1",
 *                 "198.51.100.1",
 *                 "2001:DB8:100::CF")
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
 *             .attackMitigation(DnsFirewallAttackMitigationArgs.builder()
 *                 .enabled(true)
 *                 .only_when_upstream_unhealthy(false)
 *                 .build())
 *             .deprecateAnyRequests(true)
 *             .ecsFallback(false)
 *             .maximumCacheTtl(900)
 *             .minimumCacheTtl(60)
<<<<<<< HEAD
 *             .name("My Awesome DNS Firewall cluster")
 *             .negativeCacheTtl(900)
 *             .ratelimit(600)
 *             .retries(2)
 *             .upstreamIps(            
 *                 "192.0.2.1",
 *                 "198.51.100.1",
 *                 "string")
=======
 *             .negativeCacheTtl(900)
 *             .ratelimit(600)
 *             .retries(2)
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/dnsFirewall:DnsFirewall example &#39;&lt;account_id&gt;/&lt;dns_firewall_id&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/dnsFirewall:DnsFirewall")
public class DnsFirewall extends com.pulumi.resources.CustomResource {
    /**
     * Identifier
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Attack mitigation settings
     * 
     */
    @Export(name="attackMitigation", refs={DnsFirewallAttackMitigation.class}, tree="[0]")
    private Output<DnsFirewallAttackMitigation> attackMitigation;

    /**
     * @return Attack mitigation settings
     * 
     */
    public Output<DnsFirewallAttackMitigation> attackMitigation() {
        return this.attackMitigation;
    }
    /**
     * Whether to refuse to answer queries for the ANY type
     * 
     */
    @Export(name="deprecateAnyRequests", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deprecateAnyRequests;

    /**
     * @return Whether to refuse to answer queries for the ANY type
     * 
     */
    public Output<Optional<Boolean>> deprecateAnyRequests() {
        return Codegen.optional(this.deprecateAnyRequests);
    }
    @Export(name="dnsFirewallIps", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> dnsFirewallIps;

    public Output<List<String>> dnsFirewallIps() {
        return this.dnsFirewallIps;
    }
    /**
     * Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     * 
     */
    @Export(name="ecsFallback", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ecsFallback;

    /**
     * @return Whether to forward client IP (resolver) subnet if no EDNS Client Subnet is sent
     * 
     */
    public Output<Optional<Boolean>> ecsFallback() {
        return Codegen.optional(this.ecsFallback);
    }
    /**
     * Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     * 
     */
    @Export(name="maximumCacheTtl", refs={Double.class}, tree="[0]")
    private Output<Double> maximumCacheTtl;

    /**
     * @return Maximum DNS cache TTL This setting sets an upper bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Higher TTLs will be decreased to the maximum defined here for caching purposes.
     * 
     */
    public Output<Double> maximumCacheTtl() {
        return this.maximumCacheTtl;
    }
    /**
     * Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     * 
     */
    @Export(name="minimumCacheTtl", refs={Double.class}, tree="[0]")
    private Output<Double> minimumCacheTtl;

    /**
     * @return Minimum DNS cache TTL This setting sets a lower bound on DNS TTLs for purposes of caching between DNS Firewall and the upstream servers. Lower TTLs will be increased to the minimum defined here for caching purposes.
     * 
     */
    public Output<Double> minimumCacheTtl() {
        return this.minimumCacheTtl;
    }
    /**
     * Last modification of DNS Firewall cluster
     * 
     */
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    /**
     * @return Last modification of DNS Firewall cluster
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * DNS Firewall cluster name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
<<<<<<< HEAD
    private Output</* @Nullable */ String> name;
=======
    private Output<String> name;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580

    /**
     * @return DNS Firewall cluster name
     * 
     */
<<<<<<< HEAD
    public Output<Optional<String>> name() {
        return Codegen.optional(this.name);
=======
    public Output<String> name() {
        return this.name;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    }
    /**
     * Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     * 
     */
    @Export(name="negativeCacheTtl", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> negativeCacheTtl;

    /**
     * @return Negative DNS cache TTL This setting controls how long DNS Firewall should cache negative responses (e.g., NXDOMAIN) from the upstream servers.
     * 
     */
    public Output<Optional<Double>> negativeCacheTtl() {
        return Codegen.optional(this.negativeCacheTtl);
    }
    /**
     * Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     * 
     */
    @Export(name="ratelimit", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> ratelimit;

    /**
     * @return Ratelimit in queries per second per datacenter (applies to DNS queries sent to the upstream nameservers configured on the cluster)
     * 
     */
    public Output<Optional<Double>> ratelimit() {
        return Codegen.optional(this.ratelimit);
    }
    /**
     * Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     * 
     */
    @Export(name="retries", refs={Double.class}, tree="[0]")
    private Output<Double> retries;

    /**
     * @return Number of retries for fetching DNS responses from upstream nameservers (not counting the initial attempt)
     * 
     */
    public Output<Double> retries() {
        return this.retries;
    }
    @Export(name="upstreamIps", refs={List.class,String.class}, tree="[0,1]")
<<<<<<< HEAD
    private Output</* @Nullable */ List<String>> upstreamIps;

    public Output<Optional<List<String>>> upstreamIps() {
        return Codegen.optional(this.upstreamIps);
=======
    private Output<List<String>> upstreamIps;

    public Output<List<String>> upstreamIps() {
        return this.upstreamIps;
>>>>>>> 5daf78d00237b27958698f41a3d5f5b7e342d580
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DnsFirewall(java.lang.String name) {
        this(name, DnsFirewallArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DnsFirewall(java.lang.String name, DnsFirewallArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DnsFirewall(java.lang.String name, DnsFirewallArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/dnsFirewall:DnsFirewall", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DnsFirewall(java.lang.String name, Output<java.lang.String> id, @Nullable DnsFirewallState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/dnsFirewall:DnsFirewall", name, state, makeResourceOptions(options, id), false);
    }

    private static DnsFirewallArgs makeArgs(DnsFirewallArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DnsFirewallArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DnsFirewall get(java.lang.String name, Output<java.lang.String> id, @Nullable DnsFirewallState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DnsFirewall(name, id, state, options);
    }
}
