// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersScriptAssetsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersScriptAssetsConfigArgs Empty = new WorkersScriptAssetsConfigArgs();

    /**
     * The contents of a _headers file (used to attach custom headers on asset responses)
     * 
     */
    @Import(name="_headers")
    private @Nullable Output<String> _headers;

    /**
     * @return The contents of a _headers file (used to attach custom headers on asset responses)
     * 
     */
    public Optional<Output<String>> _headers() {
        return Optional.ofNullable(this._headers);
    }

    /**
     * The contents of a _redirects file (used to apply redirects or proxy paths ahead of asset serving)
     * 
     */
    @Import(name="_redirects")
    private @Nullable Output<String> _redirects;

    /**
     * @return The contents of a _redirects file (used to apply redirects or proxy paths ahead of asset serving)
     * 
     */
    public Optional<Output<String>> _redirects() {
        return Optional.ofNullable(this._redirects);
    }

    /**
     * Determines the redirects and rewrites of requests for HTML content.
     * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
     * 
     */
    @Import(name="htmlHandling")
    private @Nullable Output<String> htmlHandling;

    /**
     * @return Determines the redirects and rewrites of requests for HTML content.
     * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
     * 
     */
    public Optional<Output<String>> htmlHandling() {
        return Optional.ofNullable(this.htmlHandling);
    }

    /**
     * Determines the response when a request does not match a static asset, and there is no Worker script.
     * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
     * 
     */
    @Import(name="notFoundHandling")
    private @Nullable Output<String> notFoundHandling;

    /**
     * @return Determines the response when a request does not match a static asset, and there is no Worker script.
     * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
     * 
     */
    public Optional<Output<String>> notFoundHandling() {
        return Optional.ofNullable(this.notFoundHandling);
    }

    /**
     * When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
     * 
     */
    @Import(name="runWorkerFirst")
    private @Nullable Output<Boolean> runWorkerFirst;

    /**
     * @return When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
     * 
     */
    public Optional<Output<Boolean>> runWorkerFirst() {
        return Optional.ofNullable(this.runWorkerFirst);
    }

    /**
     * When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    @Import(name="serveDirectly")
    private @Nullable Output<Boolean> serveDirectly;

    /**
     * @return When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public Optional<Output<Boolean>> serveDirectly() {
        return Optional.ofNullable(this.serveDirectly);
    }

    private WorkersScriptAssetsConfigArgs() {}

    private WorkersScriptAssetsConfigArgs(WorkersScriptAssetsConfigArgs $) {
        this._headers = $._headers;
        this._redirects = $._redirects;
        this.htmlHandling = $.htmlHandling;
        this.notFoundHandling = $.notFoundHandling;
        this.runWorkerFirst = $.runWorkerFirst;
        this.serveDirectly = $.serveDirectly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersScriptAssetsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersScriptAssetsConfigArgs $;

        public Builder() {
            $ = new WorkersScriptAssetsConfigArgs();
        }

        public Builder(WorkersScriptAssetsConfigArgs defaults) {
            $ = new WorkersScriptAssetsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param _headers The contents of a _headers file (used to attach custom headers on asset responses)
         * 
         * @return builder
         * 
         */
        public Builder _headers(@Nullable Output<String> _headers) {
            $._headers = _headers;
            return this;
        }

        /**
         * @param _headers The contents of a _headers file (used to attach custom headers on asset responses)
         * 
         * @return builder
         * 
         */
        public Builder _headers(String _headers) {
            return _headers(Output.of(_headers));
        }

        /**
         * @param _redirects The contents of a _redirects file (used to apply redirects or proxy paths ahead of asset serving)
         * 
         * @return builder
         * 
         */
        public Builder _redirects(@Nullable Output<String> _redirects) {
            $._redirects = _redirects;
            return this;
        }

        /**
         * @param _redirects The contents of a _redirects file (used to apply redirects or proxy paths ahead of asset serving)
         * 
         * @return builder
         * 
         */
        public Builder _redirects(String _redirects) {
            return _redirects(Output.of(_redirects));
        }

        /**
         * @param htmlHandling Determines the redirects and rewrites of requests for HTML content.
         * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder htmlHandling(@Nullable Output<String> htmlHandling) {
            $.htmlHandling = htmlHandling;
            return this;
        }

        /**
         * @param htmlHandling Determines the redirects and rewrites of requests for HTML content.
         * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder htmlHandling(String htmlHandling) {
            return htmlHandling(Output.of(htmlHandling));
        }

        /**
         * @param notFoundHandling Determines the response when a request does not match a static asset, and there is no Worker script.
         * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notFoundHandling(@Nullable Output<String> notFoundHandling) {
            $.notFoundHandling = notFoundHandling;
            return this;
        }

        /**
         * @param notFoundHandling Determines the response when a request does not match a static asset, and there is no Worker script.
         * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notFoundHandling(String notFoundHandling) {
            return notFoundHandling(Output.of(notFoundHandling));
        }

        /**
         * @param runWorkerFirst When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
         * 
         * @return builder
         * 
         */
        public Builder runWorkerFirst(@Nullable Output<Boolean> runWorkerFirst) {
            $.runWorkerFirst = runWorkerFirst;
            return this;
        }

        /**
         * @param runWorkerFirst When true, requests will always invoke the Worker script. Otherwise, attempt to serve an asset matching the request, falling back to the Worker script.
         * 
         * @return builder
         * 
         */
        public Builder runWorkerFirst(Boolean runWorkerFirst) {
            return runWorkerFirst(Output.of(runWorkerFirst));
        }

        /**
         * @param serveDirectly When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder serveDirectly(@Nullable Output<Boolean> serveDirectly) {
            $.serveDirectly = serveDirectly;
            return this;
        }

        /**
         * @param serveDirectly When true and the incoming request matches an asset, that will be served instead of invoking the Worker script. When false, requests will always invoke the Worker script.
         * 
         * @return builder
         * 
         * @deprecated
         * This attribute is deprecated.
         * 
         */
        @Deprecated /* This attribute is deprecated. */
        public Builder serveDirectly(Boolean serveDirectly) {
            return serveDirectly(Output.of(serveDirectly));
        }

        public WorkersScriptAssetsConfigArgs build() {
            return $;
        }
    }

}
