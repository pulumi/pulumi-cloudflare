// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetAccessRulesResultConfiguration;
import com.pulumi.cloudflare.outputs.GetAccessRulesResultScope;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAccessRulesResult {
    /**
     * @return The available actions that a rule can apply to a matched request.
     * 
     */
    private List<String> allowedModes;
    /**
     * @return The rule configuration.
     * 
     */
    private GetAccessRulesResultConfiguration configuration;
    /**
     * @return The timestamp of when the rule was created.
     * 
     */
    private String createdOn;
    /**
     * @return The unique identifier of the IP Access rule.
     * 
     */
    private String id;
    /**
     * @return The action to apply to a matched request.
     * 
     */
    private String mode;
    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return An informative summary of the rule, typically used as a reminder or explanation.
     * 
     */
    private String notes;
    /**
     * @return All zones owned by the user will have the rule applied.
     * 
     */
    private GetAccessRulesResultScope scope;

    private GetAccessRulesResult() {}
    /**
     * @return The available actions that a rule can apply to a matched request.
     * 
     */
    public List<String> allowedModes() {
        return this.allowedModes;
    }
    /**
     * @return The rule configuration.
     * 
     */
    public GetAccessRulesResultConfiguration configuration() {
        return this.configuration;
    }
    /**
     * @return The timestamp of when the rule was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return The unique identifier of the IP Access rule.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The action to apply to a matched request.
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return An informative summary of the rule, typically used as a reminder or explanation.
     * 
     */
    public String notes() {
        return this.notes;
    }
    /**
     * @return All zones owned by the user will have the rule applied.
     * 
     */
    public GetAccessRulesResultScope scope() {
        return this.scope;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessRulesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowedModes;
        private GetAccessRulesResultConfiguration configuration;
        private String createdOn;
        private String id;
        private String mode;
        private String modifiedOn;
        private String notes;
        private GetAccessRulesResultScope scope;
        public Builder() {}
        public Builder(GetAccessRulesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedModes = defaults.allowedModes;
    	      this.configuration = defaults.configuration;
    	      this.createdOn = defaults.createdOn;
    	      this.id = defaults.id;
    	      this.mode = defaults.mode;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.notes = defaults.notes;
    	      this.scope = defaults.scope;
        }

        @CustomType.Setter
        public Builder allowedModes(List<String> allowedModes) {
            if (allowedModes == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "allowedModes");
            }
            this.allowedModes = allowedModes;
            return this;
        }
        public Builder allowedModes(String... allowedModes) {
            return allowedModes(List.of(allowedModes));
        }
        @CustomType.Setter
        public Builder configuration(GetAccessRulesResultConfiguration configuration) {
            if (configuration == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "configuration");
            }
            this.configuration = configuration;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            if (notes == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "notes");
            }
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder scope(GetAccessRulesResultScope scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetAccessRulesResult", "scope");
            }
            this.scope = scope;
            return this;
        }
        public GetAccessRulesResult build() {
            final var _resultValue = new GetAccessRulesResult();
            _resultValue.allowedModes = allowedModes;
            _resultValue.configuration = configuration;
            _resultValue.createdOn = createdOn;
            _resultValue.id = id;
            _resultValue.mode = mode;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.notes = notes;
            _resultValue.scope = scope;
            return _resultValue;
        }
    }
}
