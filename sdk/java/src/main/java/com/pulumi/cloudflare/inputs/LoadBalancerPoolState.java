// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.LoadBalancerPoolLoadSheddingArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerPoolNotificationFilterArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerPoolOriginArgs;
import com.pulumi.cloudflare.inputs.LoadBalancerPoolOriginSteeringArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerPoolState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerPoolState Empty = new LoadBalancerPoolState();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * A list of regions from which to run health checks. Null means every Cloudflare data center.
     * 
     */
    @Import(name="checkRegions")
    private @Nullable Output<List<String>> checkRegions;

    /**
     * @return A list of regions from which to run health checks. Null means every Cloudflare data center.
     * 
     */
    public Optional<Output<List<String>>> checkRegions() {
        return Optional.ofNullable(this.checkRegions);
    }

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A human-readable description of the pool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A human-readable description of the pool.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     * 
     */
    @Import(name="disabledAt")
    private @Nullable Output<String> disabledAt;

    /**
     * @return This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     * 
     */
    public Optional<Output<String>> disabledAt() {
        return Optional.ofNullable(this.disabledAt);
    }

    /**
     * Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     * 
     */
    @Import(name="latitude")
    private @Nullable Output<Double> latitude;

    /**
     * @return The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     * 
     */
    public Optional<Output<Double>> latitude() {
        return Optional.ofNullable(this.latitude);
    }

    /**
     * Configures load shedding policies and percentages for the pool.
     * 
     */
    @Import(name="loadShedding")
    private @Nullable Output<LoadBalancerPoolLoadSheddingArgs> loadShedding;

    /**
     * @return Configures load shedding policies and percentages for the pool.
     * 
     */
    public Optional<Output<LoadBalancerPoolLoadSheddingArgs>> loadShedding() {
        return Optional.ofNullable(this.loadShedding);
    }

    /**
     * The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     * 
     */
    @Import(name="longitude")
    private @Nullable Output<Double> longitude;

    /**
     * @return The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     * 
     */
    public Optional<Output<Double>> longitude() {
        return Optional.ofNullable(this.longitude);
    }

    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     * 
     */
    @Import(name="minimumOrigins")
    private @Nullable Output<Integer> minimumOrigins;

    /**
     * @return The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     * 
     */
    public Optional<Output<Integer>> minimumOrigins() {
        return Optional.ofNullable(this.minimumOrigins);
    }

    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The ID of the Monitor to use for checking the health of origins within this pool.
     * 
     */
    @Import(name="monitor")
    private @Nullable Output<String> monitor;

    /**
     * @return The ID of the Monitor to use for checking the health of origins within this pool.
     * 
     */
    public Optional<Output<String>> monitor() {
        return Optional.ofNullable(this.monitor);
    }

    /**
     * A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of networks where Load Balancer or Pool is enabled.
     * 
     */
    @Import(name="networks")
    private @Nullable Output<List<String>> networks;

    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    public Optional<Output<List<String>>> networks() {
        return Optional.ofNullable(this.networks);
    }

    /**
     * This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     * 
     */
    @Import(name="notificationEmail")
    private @Nullable Output<String> notificationEmail;

    /**
     * @return This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     * 
     */
    public Optional<Output<String>> notificationEmail() {
        return Optional.ofNullable(this.notificationEmail);
    }

    /**
     * Filter pool and origin health notifications by resource type or health status. Use null to reset.
     * 
     */
    @Import(name="notificationFilter")
    private @Nullable Output<LoadBalancerPoolNotificationFilterArgs> notificationFilter;

    /**
     * @return Filter pool and origin health notifications by resource type or health status. Use null to reset.
     * 
     */
    public Optional<Output<LoadBalancerPoolNotificationFilterArgs>> notificationFilter() {
        return Optional.ofNullable(this.notificationFilter);
    }

    /**
     * Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     * 
     */
    @Import(name="originSteering")
    private @Nullable Output<LoadBalancerPoolOriginSteeringArgs> originSteering;

    /**
     * @return Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     * 
     */
    public Optional<Output<LoadBalancerPoolOriginSteeringArgs>> originSteering() {
        return Optional.ofNullable(this.originSteering);
    }

    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     * 
     */
    @Import(name="origins")
    private @Nullable Output<List<LoadBalancerPoolOriginArgs>> origins;

    /**
     * @return The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     * 
     */
    public Optional<Output<List<LoadBalancerPoolOriginArgs>>> origins() {
        return Optional.ofNullable(this.origins);
    }

    private LoadBalancerPoolState() {}

    private LoadBalancerPoolState(LoadBalancerPoolState $) {
        this.accountId = $.accountId;
        this.checkRegions = $.checkRegions;
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.disabledAt = $.disabledAt;
        this.enabled = $.enabled;
        this.latitude = $.latitude;
        this.loadShedding = $.loadShedding;
        this.longitude = $.longitude;
        this.minimumOrigins = $.minimumOrigins;
        this.modifiedOn = $.modifiedOn;
        this.monitor = $.monitor;
        this.name = $.name;
        this.networks = $.networks;
        this.notificationEmail = $.notificationEmail;
        this.notificationFilter = $.notificationFilter;
        this.originSteering = $.originSteering;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerPoolState $;

        public Builder() {
            $ = new LoadBalancerPoolState();
        }

        public Builder(LoadBalancerPoolState defaults) {
            $ = new LoadBalancerPoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means every Cloudflare data center.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(@Nullable Output<List<String>> checkRegions) {
            $.checkRegions = checkRegions;
            return this;
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means every Cloudflare data center.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(List<String> checkRegions) {
            return checkRegions(Output.of(checkRegions));
        }

        /**
         * @param checkRegions A list of regions from which to run health checks. Null means every Cloudflare data center.
         * 
         * @return builder
         * 
         */
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param description A human-readable description of the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A human-readable description of the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabledAt This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
         * 
         * @return builder
         * 
         */
        public Builder disabledAt(@Nullable Output<String> disabledAt) {
            $.disabledAt = disabledAt;
            return this;
        }

        /**
         * @param disabledAt This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
         * 
         * @return builder
         * 
         */
        public Builder disabledAt(String disabledAt) {
            return disabledAt(Output.of(disabledAt));
        }

        /**
         * @param enabled Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param latitude The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
         * 
         * @return builder
         * 
         */
        public Builder latitude(@Nullable Output<Double> latitude) {
            $.latitude = latitude;
            return this;
        }

        /**
         * @param latitude The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
         * 
         * @return builder
         * 
         */
        public Builder latitude(Double latitude) {
            return latitude(Output.of(latitude));
        }

        /**
         * @param loadShedding Configures load shedding policies and percentages for the pool.
         * 
         * @return builder
         * 
         */
        public Builder loadShedding(@Nullable Output<LoadBalancerPoolLoadSheddingArgs> loadShedding) {
            $.loadShedding = loadShedding;
            return this;
        }

        /**
         * @param loadShedding Configures load shedding policies and percentages for the pool.
         * 
         * @return builder
         * 
         */
        public Builder loadShedding(LoadBalancerPoolLoadSheddingArgs loadShedding) {
            return loadShedding(Output.of(loadShedding));
        }

        /**
         * @param longitude The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
         * 
         * @return builder
         * 
         */
        public Builder longitude(@Nullable Output<Double> longitude) {
            $.longitude = longitude;
            return this;
        }

        /**
         * @param longitude The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
         * 
         * @return builder
         * 
         */
        public Builder longitude(Double longitude) {
            return longitude(Output.of(longitude));
        }

        /**
         * @param minimumOrigins The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
         * 
         * @return builder
         * 
         */
        public Builder minimumOrigins(@Nullable Output<Integer> minimumOrigins) {
            $.minimumOrigins = minimumOrigins;
            return this;
        }

        /**
         * @param minimumOrigins The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
         * 
         * @return builder
         * 
         */
        public Builder minimumOrigins(Integer minimumOrigins) {
            return minimumOrigins(Output.of(minimumOrigins));
        }

        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param monitor The ID of the Monitor to use for checking the health of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder monitor(@Nullable Output<String> monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param monitor The ID of the Monitor to use for checking the health of origins within this pool.
         * 
         * @return builder
         * 
         */
        public Builder monitor(String monitor) {
            return monitor(Output.of(monitor));
        }

        /**
         * @param name A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(@Nullable Output<List<String>> networks) {
            $.networks = networks;
            return this;
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(List<String> networks) {
            return networks(Output.of(networks));
        }

        /**
         * @param networks List of networks where Load Balancer or Pool is enabled.
         * 
         * @return builder
         * 
         */
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }

        /**
         * @param notificationEmail This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmail(@Nullable Output<String> notificationEmail) {
            $.notificationEmail = notificationEmail;
            return this;
        }

        /**
         * @param notificationEmail This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
         * 
         * @return builder
         * 
         */
        public Builder notificationEmail(String notificationEmail) {
            return notificationEmail(Output.of(notificationEmail));
        }

        /**
         * @param notificationFilter Filter pool and origin health notifications by resource type or health status. Use null to reset.
         * 
         * @return builder
         * 
         */
        public Builder notificationFilter(@Nullable Output<LoadBalancerPoolNotificationFilterArgs> notificationFilter) {
            $.notificationFilter = notificationFilter;
            return this;
        }

        /**
         * @param notificationFilter Filter pool and origin health notifications by resource type or health status. Use null to reset.
         * 
         * @return builder
         * 
         */
        public Builder notificationFilter(LoadBalancerPoolNotificationFilterArgs notificationFilter) {
            return notificationFilter(Output.of(notificationFilter));
        }

        /**
         * @param originSteering Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
         * 
         * @return builder
         * 
         */
        public Builder originSteering(@Nullable Output<LoadBalancerPoolOriginSteeringArgs> originSteering) {
            $.originSteering = originSteering;
            return this;
        }

        /**
         * @param originSteering Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
         * 
         * @return builder
         * 
         */
        public Builder originSteering(LoadBalancerPoolOriginSteeringArgs originSteering) {
            return originSteering(Output.of(originSteering));
        }

        /**
         * @param origins The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
         * 
         * @return builder
         * 
         */
        public Builder origins(@Nullable Output<List<LoadBalancerPoolOriginArgs>> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
         * 
         * @return builder
         * 
         */
        public Builder origins(List<LoadBalancerPoolOriginArgs> origins) {
            return origins(Output.of(origins));
        }

        /**
         * @param origins The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
         * 
         * @return builder
         * 
         */
        public Builder origins(LoadBalancerPoolOriginArgs... origins) {
            return origins(List.of(origins));
        }

        public LoadBalancerPoolState build() {
            return $;
        }
    }

}
