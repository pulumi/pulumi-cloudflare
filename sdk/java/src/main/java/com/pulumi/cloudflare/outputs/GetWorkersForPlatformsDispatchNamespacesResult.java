// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetWorkersForPlatformsDispatchNamespacesResult {
    /**
     * @return Identifier.
     * 
     */
    private String createdBy;
    /**
     * @return When the script was created.
     * 
     */
    private String createdOn;
    /**
     * @return Identifier.
     * 
     */
    private String modifiedBy;
    /**
     * @return When the script was last modified.
     * 
     */
    private String modifiedOn;
    /**
     * @return API Resource UUID tag.
     * 
     */
    private String namespaceId;
    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    private String namespaceName;
    /**
     * @return The current number of scripts in this Dispatch Namespace.
     * 
     */
    private Integer scriptCount;
    /**
     * @return Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
     * 
     */
    private Boolean trustedWorkers;

    private GetWorkersForPlatformsDispatchNamespacesResult() {}
    /**
     * @return Identifier.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return When the script was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Identifier.
     * 
     */
    public String modifiedBy() {
        return this.modifiedBy;
    }
    /**
     * @return When the script was last modified.
     * 
     */
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return API Resource UUID tag.
     * 
     */
    public String namespaceId() {
        return this.namespaceId;
    }
    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    public String namespaceName() {
        return this.namespaceName;
    }
    /**
     * @return The current number of scripts in this Dispatch Namespace.
     * 
     */
    public Integer scriptCount() {
        return this.scriptCount;
    }
    /**
     * @return Whether the Workers in the namespace are executed in a &#34;trusted&#34; manner. When a Worker is trusted, it has access to the shared caches for the zone in the Cache API, and has access to the `request.cf` object on incoming Requests. When a Worker is untrusted, caches are not shared across the zone, and `request.cf` is undefined. By default, Workers in a namespace are &#34;untrusted&#34;.
     * 
     */
    public Boolean trustedWorkers() {
        return this.trustedWorkers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkersForPlatformsDispatchNamespacesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdBy;
        private String createdOn;
        private String modifiedBy;
        private String modifiedOn;
        private String namespaceId;
        private String namespaceName;
        private Integer scriptCount;
        private Boolean trustedWorkers;
        public Builder() {}
        public Builder(GetWorkersForPlatformsDispatchNamespacesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdBy = defaults.createdBy;
    	      this.createdOn = defaults.createdOn;
    	      this.modifiedBy = defaults.modifiedBy;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.namespaceId = defaults.namespaceId;
    	      this.namespaceName = defaults.namespaceName;
    	      this.scriptCount = defaults.scriptCount;
    	      this.trustedWorkers = defaults.trustedWorkers;
        }

        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            if (createdBy == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "createdBy");
            }
            this.createdBy = createdBy;
            return this;
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedBy(String modifiedBy) {
            if (modifiedBy == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "modifiedBy");
            }
            this.modifiedBy = modifiedBy;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceId(String namespaceId) {
            if (namespaceId == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "namespaceId");
            }
            this.namespaceId = namespaceId;
            return this;
        }
        @CustomType.Setter
        public Builder namespaceName(String namespaceName) {
            if (namespaceName == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "namespaceName");
            }
            this.namespaceName = namespaceName;
            return this;
        }
        @CustomType.Setter
        public Builder scriptCount(Integer scriptCount) {
            if (scriptCount == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "scriptCount");
            }
            this.scriptCount = scriptCount;
            return this;
        }
        @CustomType.Setter
        public Builder trustedWorkers(Boolean trustedWorkers) {
            if (trustedWorkers == null) {
              throw new MissingRequiredPropertyException("GetWorkersForPlatformsDispatchNamespacesResult", "trustedWorkers");
            }
            this.trustedWorkers = trustedWorkers;
            return this;
        }
        public GetWorkersForPlatformsDispatchNamespacesResult build() {
            final var _resultValue = new GetWorkersForPlatformsDispatchNamespacesResult();
            _resultValue.createdBy = createdBy;
            _resultValue.createdOn = createdOn;
            _resultValue.modifiedBy = modifiedBy;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.namespaceId = namespaceId;
            _resultValue.namespaceName = namespaceName;
            _resultValue.scriptCount = scriptCount;
            _resultValue.trustedWorkers = trustedWorkers;
            return _resultValue;
        }
    }
}
