// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.AccessRuleConfigurationArgs;
import com.pulumi.cloudflare.inputs.AccessRuleScopeArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessRuleState extends com.pulumi.resources.ResourceArgs {

    public static final AccessRuleState Empty = new AccessRuleState();

    /**
     * The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The available actions that a rule can apply to a matched request.
     * 
     */
    @Import(name="allowedModes")
    private @Nullable Output<List<String>> allowedModes;

    /**
     * @return The available actions that a rule can apply to a matched request.
     * 
     */
    public Optional<Output<List<String>>> allowedModes() {
        return Optional.ofNullable(this.allowedModes);
    }

    /**
     * The rule configuration.
     * 
     */
    @Import(name="configuration")
    private @Nullable Output<AccessRuleConfigurationArgs> configuration;

    /**
     * @return The rule configuration.
     * 
     */
    public Optional<Output<AccessRuleConfigurationArgs>> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * The timestamp of when the rule was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    /**
     * @return The timestamp of when the rule was created.
     * 
     */
    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The action to apply to a matched request.
     * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The timestamp of when the rule was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * An informative summary of the rule, typically used as a reminder or explanation.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return An informative summary of the rule, typically used as a reminder or explanation.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * All zones owned by the user will have the rule applied.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<AccessRuleScopeArgs> scope;

    /**
     * @return All zones owned by the user will have the rule applied.
     * 
     */
    public Optional<Output<AccessRuleScopeArgs>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private AccessRuleState() {}

    private AccessRuleState(AccessRuleState $) {
        this.accountId = $.accountId;
        this.allowedModes = $.allowedModes;
        this.configuration = $.configuration;
        this.createdOn = $.createdOn;
        this.mode = $.mode;
        this.modifiedOn = $.modifiedOn;
        this.notes = $.notes;
        this.scope = $.scope;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessRuleState $;

        public Builder() {
            $ = new AccessRuleState();
        }

        public Builder(AccessRuleState defaults) {
            $ = new AccessRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowedModes The available actions that a rule can apply to a matched request.
         * 
         * @return builder
         * 
         */
        public Builder allowedModes(@Nullable Output<List<String>> allowedModes) {
            $.allowedModes = allowedModes;
            return this;
        }

        /**
         * @param allowedModes The available actions that a rule can apply to a matched request.
         * 
         * @return builder
         * 
         */
        public Builder allowedModes(List<String> allowedModes) {
            return allowedModes(Output.of(allowedModes));
        }

        /**
         * @param allowedModes The available actions that a rule can apply to a matched request.
         * 
         * @return builder
         * 
         */
        public Builder allowedModes(String... allowedModes) {
            return allowedModes(List.of(allowedModes));
        }

        /**
         * @param configuration The rule configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(@Nullable Output<AccessRuleConfigurationArgs> configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param configuration The rule configuration.
         * 
         * @return builder
         * 
         */
        public Builder configuration(AccessRuleConfigurationArgs configuration) {
            return configuration(Output.of(configuration));
        }

        /**
         * @param createdOn The timestamp of when the rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param createdOn The timestamp of when the rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The action to apply to a matched request.
         * Available values: &#34;block&#34;, &#34;challenge&#34;, &#34;whitelist&#34;, &#34;js*challenge&#34;, &#34;managed*challenge&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param modifiedOn The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param modifiedOn The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param notes An informative summary of the rule, typically used as a reminder or explanation.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes An informative summary of the rule, typically used as a reminder or explanation.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param scope All zones owned by the user will have the rule applied.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<AccessRuleScopeArgs> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope All zones owned by the user will have the rule applied.
         * 
         * @return builder
         * 
         */
        public Builder scope(AccessRuleScopeArgs scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public AccessRuleState build() {
            return $;
        }
    }

}
