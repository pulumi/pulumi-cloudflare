// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestTestDesktopReportArgs;
import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestTestMobileReportArgs;
import com.pulumi.cloudflare.inputs.ObservatoryScheduledTestTestRegionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObservatoryScheduledTestTestArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObservatoryScheduledTestTestArgs Empty = new ObservatoryScheduledTestTestArgs();

    @Import(name="date")
    private @Nullable Output<String> date;

    public Optional<Output<String>> date() {
        return Optional.ofNullable(this.date);
    }

    /**
     * The Lighthouse report.
     * 
     */
    @Import(name="desktopReport")
    private @Nullable Output<ObservatoryScheduledTestTestDesktopReportArgs> desktopReport;

    /**
     * @return The Lighthouse report.
     * 
     */
    public Optional<Output<ObservatoryScheduledTestTestDesktopReportArgs>> desktopReport() {
        return Optional.ofNullable(this.desktopReport);
    }

    /**
     * UUID
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return UUID
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The Lighthouse report.
     * 
     */
    @Import(name="mobileReport")
    private @Nullable Output<ObservatoryScheduledTestTestMobileReportArgs> mobileReport;

    /**
     * @return The Lighthouse report.
     * 
     */
    public Optional<Output<ObservatoryScheduledTestTestMobileReportArgs>> mobileReport() {
        return Optional.ofNullable(this.mobileReport);
    }

    /**
     * A test region with a label.
     * 
     */
    @Import(name="region")
    private @Nullable Output<ObservatoryScheduledTestTestRegionArgs> region;

    /**
     * @return A test region with a label.
     * 
     */
    public Optional<Output<ObservatoryScheduledTestTestRegionArgs>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The frequency of the test.
     * 
     */
    @Import(name="scheduleFrequency")
    private @Nullable Output<String> scheduleFrequency;

    /**
     * @return The frequency of the test.
     * 
     */
    public Optional<Output<String>> scheduleFrequency() {
        return Optional.ofNullable(this.scheduleFrequency);
    }

    /**
     * A URL.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return A URL.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ObservatoryScheduledTestTestArgs() {}

    private ObservatoryScheduledTestTestArgs(ObservatoryScheduledTestTestArgs $) {
        this.date = $.date;
        this.desktopReport = $.desktopReport;
        this.id = $.id;
        this.mobileReport = $.mobileReport;
        this.region = $.region;
        this.scheduleFrequency = $.scheduleFrequency;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObservatoryScheduledTestTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObservatoryScheduledTestTestArgs $;

        public Builder() {
            $ = new ObservatoryScheduledTestTestArgs();
        }

        public Builder(ObservatoryScheduledTestTestArgs defaults) {
            $ = new ObservatoryScheduledTestTestArgs(Objects.requireNonNull(defaults));
        }

        public Builder date(@Nullable Output<String> date) {
            $.date = date;
            return this;
        }

        public Builder date(String date) {
            return date(Output.of(date));
        }

        /**
         * @param desktopReport The Lighthouse report.
         * 
         * @return builder
         * 
         */
        public Builder desktopReport(@Nullable Output<ObservatoryScheduledTestTestDesktopReportArgs> desktopReport) {
            $.desktopReport = desktopReport;
            return this;
        }

        /**
         * @param desktopReport The Lighthouse report.
         * 
         * @return builder
         * 
         */
        public Builder desktopReport(ObservatoryScheduledTestTestDesktopReportArgs desktopReport) {
            return desktopReport(Output.of(desktopReport));
        }

        /**
         * @param id UUID
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id UUID
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mobileReport The Lighthouse report.
         * 
         * @return builder
         * 
         */
        public Builder mobileReport(@Nullable Output<ObservatoryScheduledTestTestMobileReportArgs> mobileReport) {
            $.mobileReport = mobileReport;
            return this;
        }

        /**
         * @param mobileReport The Lighthouse report.
         * 
         * @return builder
         * 
         */
        public Builder mobileReport(ObservatoryScheduledTestTestMobileReportArgs mobileReport) {
            return mobileReport(Output.of(mobileReport));
        }

        /**
         * @param region A test region with a label.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<ObservatoryScheduledTestTestRegionArgs> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region A test region with a label.
         * 
         * @return builder
         * 
         */
        public Builder region(ObservatoryScheduledTestTestRegionArgs region) {
            return region(Output.of(region));
        }

        /**
         * @param scheduleFrequency The frequency of the test.
         * 
         * @return builder
         * 
         */
        public Builder scheduleFrequency(@Nullable Output<String> scheduleFrequency) {
            $.scheduleFrequency = scheduleFrequency;
            return this;
        }

        /**
         * @param scheduleFrequency The frequency of the test.
         * 
         * @return builder
         * 
         */
        public Builder scheduleFrequency(String scheduleFrequency) {
            return scheduleFrequency(Output.of(scheduleFrequency));
        }

        /**
         * @param url A URL.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url A URL.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ObservatoryScheduledTestTestArgs build() {
            return $;
        }
    }

}
