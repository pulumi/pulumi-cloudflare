// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs Empty = new ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs();

    /**
     * Specify whether to log all requests to this service.
     * 
     */
    @Import(name="logAll")
    private @Nullable Output<Boolean> logAll;

    /**
     * @return Specify whether to log all requests to this service.
     * 
     */
    public Optional<Output<Boolean>> logAll() {
        return Optional.ofNullable(this.logAll);
    }

    /**
     * Specify whether to log only blocking requests to this service.
     * 
     */
    @Import(name="logBlocks")
    private @Nullable Output<Boolean> logBlocks;

    /**
     * @return Specify whether to log only blocking requests to this service.
     * 
     */
    public Optional<Output<Boolean>> logBlocks() {
        return Optional.ofNullable(this.logBlocks);
    }

    private ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs() {}

    private ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs(ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs $) {
        this.logAll = $.logAll;
        this.logBlocks = $.logBlocks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs $;

        public Builder() {
            $ = new ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs();
        }

        public Builder(ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs defaults) {
            $ = new ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logAll Specify whether to log all requests to this service.
         * 
         * @return builder
         * 
         */
        public Builder logAll(@Nullable Output<Boolean> logAll) {
            $.logAll = logAll;
            return this;
        }

        /**
         * @param logAll Specify whether to log all requests to this service.
         * 
         * @return builder
         * 
         */
        public Builder logAll(Boolean logAll) {
            return logAll(Output.of(logAll));
        }

        /**
         * @param logBlocks Specify whether to log only blocking requests to this service.
         * 
         * @return builder
         * 
         */
        public Builder logBlocks(@Nullable Output<Boolean> logBlocks) {
            $.logBlocks = logBlocks;
            return this;
        }

        /**
         * @param logBlocks Specify whether to log only blocking requests to this service.
         * 
         * @return builder
         * 
         */
        public Builder logBlocks(Boolean logBlocks) {
            return logBlocks(Output.of(logBlocks));
        }

        public ZeroTrustGatewayLoggingSettingsByRuleTypeHttpArgs build() {
            return $;
        }
    }

}
