// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.RulesetArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.RulesetState;
import com.pulumi.cloudflare.outputs.RulesetRule;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The [Cloudflare Ruleset Engine](https://developers.cloudflare.com/firewall/cf-rulesets)
 * allows you to create and deploy rules and rulesets.
 * 
 * The engine syntax, inspired by the Wireshark Display Filter language, is the
 * same syntax used in custom Firewall Rules. Cloudflare uses the Ruleset Engine
 * in different products, allowing you to configure several products using the same
 * basic syntax.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.Ruleset;
 * import com.pulumi.cloudflare.RulesetArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOverridesArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersUriArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersUriPathArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersUriQueryArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleRatelimitArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersOriginArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersEdgeTtlArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersBrowserTtlArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersServeStaleArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyQueryStringArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyHeaderArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyCookieArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyUserArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyHostArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersFromListArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersFromValueArgs;
 * import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersFromValueTargetUrlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Magic Transit
 *         var magicTransitExample = new Ruleset("magicTransitExample", RulesetArgs.builder()
 *             .accountId("f037e56e89293a057740de681ac9abbe")
 *             .name("account magic transit")
 *             .description("example magic transit ruleset description")
 *             .kind("root")
 *             .phase("magic_transit")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("allow")
 *                 .expression("tcp.dstport in { 32768..65535 }")
 *                 .description("Allow TCP Ephemeral Ports")
 *                 .build())
 *             .build());
 * 
 *         // Zone-level WAF Managed Ruleset
 *         var zoneLevelManagedWaf = new Ruleset("zoneLevelManagedWaf", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("managed WAF")
 *             .description("managed WAF ruleset description")
 *             .kind("zone")
 *             .phase("http_request_firewall_managed")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("execute")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .id("efb7b8c949ac4650a09736fc376e9aee")
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("Execute Cloudflare Managed Ruleset on my zone-level phase entry point ruleset")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Zone-level WAF with tag-based overrides
 *         var zoneLevelManagedWafWithCategoryBasedOverrides = new Ruleset("zoneLevelManagedWafWithCategoryBasedOverrides", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("managed WAF with tag-based overrides")
 *             .description("managed WAF with tag-based overrides ruleset description")
 *             .kind("zone")
 *             .phase("http_request_firewall_managed")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("execute")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .id("efb7b8c949ac4650a09736fc376e9aee")
 *                     .overrides(RulesetRuleActionParametersOverridesArgs.builder()
 *                         .categories(                        
 *                             RulesetRuleActionParametersOverridesCategoryArgs.builder()
 *                                 .category("wordpress")
 *                                 .action("block")
 *                                 .enabled(true)
 *                                 .build(),
 *                             RulesetRuleActionParametersOverridesCategoryArgs.builder()
 *                                 .category("joomla")
 *                                 .action("block")
 *                                 .enabled(true)
 *                                 .build())
 *                         .build())
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("overrides to only enable wordpress rules to block")
 *                 .enabled(false)
 *                 .build())
 *             .build());
 * 
 *         // Rewrite the URI path component to a static path
 *         var transformUriRulePath = new Ruleset("transformUriRulePath", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("transform rule for URI path")
 *             .description("change the URI path to a new static path")
 *             .kind("zone")
 *             .phase("http_request_transform")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("rewrite")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .uri(RulesetRuleActionParametersUriArgs.builder()
 *                         .path(RulesetRuleActionParametersUriPathArgs.builder()
 *                             .value("/my-new-route")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .expression("(http.host eq \"example.com\" and http.request.uri.path eq \"/old-path\")")
 *                 .description("example URI path transform rule")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Rewrite the URI query component to a static query
 *         var transformUriRuleQuery = new Ruleset("transformUriRuleQuery", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("transform rule for URI query parameter")
 *             .description("change the URI query to a new static query")
 *             .kind("zone")
 *             .phase("http_request_transform")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("rewrite")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .uri(RulesetRuleActionParametersUriArgs.builder()
 *                         .query(RulesetRuleActionParametersUriQueryArgs.builder()
 *                             .value("old=new_again")
 *                             .build())
 *                         .build())
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("URI transformation query example")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Rewrite HTTP headers to a modified values
 *         var transformUriHttpHeaders = new Ruleset("transformUriHttpHeaders", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("transform rule for HTTP headers")
 *             .description("modify HTTP headers before reaching origin")
 *             .kind("zone")
 *             .phase("http_request_late_transform")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("rewrite")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .headers(                    
 *                         RulesetRuleActionParametersHeaderArgs.builder()
 *                             .name("example-http-header-1")
 *                             .operation("set")
 *                             .value("my-http-header-value-1")
 *                             .build(),
 *                         RulesetRuleActionParametersHeaderArgs.builder()
 *                             .name("example-http-header-2")
 *                             .operation("set")
 *                             .expression("cf.zone.name")
 *                             .build(),
 *                         RulesetRuleActionParametersHeaderArgs.builder()
 *                             .name("example-http-header-3-to-remove")
 *                             .operation("remove")
 *                             .build())
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("example request header transform rule")
 *                 .enabled(false)
 *                 .build())
 *             .build());
 * 
 *         // HTTP rate limit for an API route
 *         var rateLimitingExample = new Ruleset("rateLimitingExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("restrict API requests count")
 *             .description("apply HTTP rate limiting for a route")
 *             .kind("zone")
 *             .phase("http_ratelimit")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("block")
 *                 .ratelimit(RulesetRuleRatelimitArgs.builder()
 *                     .characteristics(                    
 *                         "cf.colo.id",
 *                         "ip.src")
 *                     .period(60)
 *                     .requestsPerPeriod(100)
 *                     .mitigationTimeout(600)
 *                     .build())
 *                 .expression("(http.request.uri.path matches \"^/api/\")")
 *                 .description("rate limit for API")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Change origin for an API route
 *         var httpOriginExample = new Ruleset("httpOriginExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("Change to some origin")
 *             .description("Change origin for a route")
 *             .kind("zone")
 *             .phase("http_request_origin")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("route")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .hostHeader("some.host")
 *                     .origin(RulesetRuleActionParametersOriginArgs.builder()
 *                         .host("some.host")
 *                         .port(80)
 *                         .build())
 *                     .build())
 *                 .expression("(http.request.uri.path matches \"^/api/\")")
 *                 .description("change origin to some.host")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Custom fields logging
 *         var customFieldsLoggingExample = new Ruleset("customFieldsLoggingExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("log custom fields")
 *             .description("add custom fields to logging")
 *             .kind("zone")
 *             .phase("http_log_custom_fields")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("log_custom_field")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .requestFields(                    
 *                         "content-type",
 *                         "x-forwarded-for",
 *                         "host")
 *                     .responseFields(                    
 *                         "server",
 *                         "content-type",
 *                         "allow")
 *                     .cookieFields(                    
 *                         "__ga",
 *                         "accountNumber",
 *                         "__cfruid")
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("log custom fields rule")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Custom cache keys + settings
 *         var cacheSettingsExample = new Ruleset("cacheSettingsExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("set cache settings")
 *             .description("set cache settings for the request")
 *             .kind("zone")
 *             .phase("http_request_cache_settings")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("set_cache_settings")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .edgeTtl(RulesetRuleActionParametersEdgeTtlArgs.builder()
 *                         .mode("override_origin")
 *                         .default_(60)
 *                         .statusCodeTtls(                        
 *                             RulesetRuleActionParametersEdgeTtlStatusCodeTtlArgs.builder()
 *                                 .statusCode(200)
 *                                 .value(50)
 *                                 .build(),
 *                             RulesetRuleActionParametersEdgeTtlStatusCodeTtlArgs.builder()
 *                                 .statusCodeRange(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *                                 .value(30)
 *                                 .build())
 *                         .build())
 *                     .browserTtl(RulesetRuleActionParametersBrowserTtlArgs.builder()
 *                         .mode("respect_origin")
 *                         .build())
 *                     .serveStale(RulesetRuleActionParametersServeStaleArgs.builder()
 *                         .disableStaleWhileUpdating(true)
 *                         .build())
 *                     .respectStrongEtags(true)
 *                     .cacheKey(RulesetRuleActionParametersCacheKeyArgs.builder()
 *                         .ignoreQueryStringsOrder(false)
 *                         .cacheDeceptionArmor(true)
 *                         .customKey(RulesetRuleActionParametersCacheKeyCustomKeyArgs.builder()
 *                             .queryString(RulesetRuleActionParametersCacheKeyCustomKeyQueryStringArgs.builder()
 *                                 .excludes("*")
 *                                 .build())
 *                             .header(RulesetRuleActionParametersCacheKeyCustomKeyHeaderArgs.builder()
 *                                 .includes(                                
 *                                     "habc",
 *                                     "hdef")
 *                                 .checkPresences(                                
 *                                     "habc_t",
 *                                     "hdef_t")
 *                                 .excludeOrigin(true)
 *                                 .build())
 *                             .cookie(RulesetRuleActionParametersCacheKeyCustomKeyCookieArgs.builder()
 *                                 .includes(                                
 *                                     "cabc",
 *                                     "cdef")
 *                                 .checkPresences(                                
 *                                     "cabc_t",
 *                                     "cdef_t")
 *                                 .build())
 *                             .user(RulesetRuleActionParametersCacheKeyCustomKeyUserArgs.builder()
 *                                 .deviceType(true)
 *                                 .geo(false)
 *                                 .build())
 *                             .host(RulesetRuleActionParametersCacheKeyCustomKeyHostArgs.builder()
 *                                 .resolved(true)
 *                                 .build())
 *                             .build())
 *                         .build())
 *                     .originErrorPagePassthru(false)
 *                     .build())
 *                 .expression("(http.host eq \"example.host.com\")")
 *                 .description("set cache settings rule")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Redirects based on a List resource
 *         var redirectFromListExample = new Ruleset("redirectFromListExample", RulesetArgs.builder()
 *             .accountId("f037e56e89293a057740de681ac9abbe")
 *             .name("redirects")
 *             .description("Redirect ruleset")
 *             .kind("root")
 *             .phase("http_request_redirect")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("redirect")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .fromList(RulesetRuleActionParametersFromListArgs.builder()
 *                         .name("redirect_list")
 *                         .key("http.request.full_uri")
 *                         .build())
 *                     .build())
 *                 .expression("http.request.full_uri in $redirect_list")
 *                 .description("Apply redirects from redirect_list")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Dynamic Redirects from value resource
 *         var redirectFromValueExample = new Ruleset("redirectFromValueExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("redirects")
 *             .description("Redirect ruleset")
 *             .kind("zone")
 *             .phase("http_request_dynamic_redirect")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("redirect")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .fromValue(RulesetRuleActionParametersFromValueArgs.builder()
 *                         .statusCode(301)
 *                         .targetUrl(RulesetRuleActionParametersFromValueTargetUrlArgs.builder()
 *                             .value("some_host.com")
 *                             .build())
 *                         .preserveQueryString(true)
 *                         .build())
 *                     .build())
 *                 .expression("(http.request.uri.path matches \"^/api/\")")
 *                 .description("Apply redirect from value")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Serve some custom error response
 *         var httpCustomErrorExample = new Ruleset("httpCustomErrorExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("Serve some error response")
 *             .description("Serve some error response")
 *             .kind("zone")
 *             .phase("http_custom_errors")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("serve_error")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .content("some error html")
 *                     .contentType("text/html")
 *                     .statusCode("530")
 *                     .build())
 *                 .expression("(http.request.uri.path matches \"^/api/\")")
 *                 .description("serve some error response")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Set Configuration Rules for an API route
 *         var httpConfigRulesExample = new Ruleset("httpConfigRulesExample", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("set config rules")
 *             .description("set config rules for request")
 *             .kind("zone")
 *             .phase("http_config_settings")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("set_config")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .emailObfuscation(true)
 *                     .bic(true)
 *                     .build())
 *                 .expression("(http.request.uri.path matches \"^/api/\")")
 *                 .description("set config rules for matching request")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *         // Set compress algorithm for response.
 *         var responseCompressBrotliHtml = new Ruleset("responseCompressBrotliHtml", RulesetArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("Brotli response compression for HTML")
 *             .description("Response compression ruleset")
 *             .kind("zone")
 *             .phase("http_response_compression")
 *             .rules(RulesetRuleArgs.builder()
 *                 .action("compress_response")
 *                 .actionParameters(RulesetRuleActionParametersArgs.builder()
 *                     .algorithms(                    
 *                         RulesetRuleActionParametersAlgorithmArgs.builder()
 *                             .name("brotli")
 *                             .build(),
 *                         RulesetRuleActionParametersAlgorithmArgs.builder()
 *                             .name("auto")
 *                             .build())
 *                     .build())
 *                 .expression("http.response.content_type.media_type == \"text/html\"")
 *                 .description("Prefer brotli compression for HTML")
 *                 .enabled(true)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Import an account scoped Ruleset configuration.
 * 
 * ```sh
 * $ pulumi import cloudflare:index/ruleset:Ruleset example account/&lt;account_id&gt;/&lt;ruleset_id&gt;
 * ```
 * 
 * Import a zone scoped Ruleset configuration.
 * 
 * ```sh
 * $ pulumi import cloudflare:index/ruleset:Ruleset example zone/&lt;zone_id&gt;/&lt;ruleset_id&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/ruleset:Ruleset")
public class Ruleset extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier to target for the resource.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Output<Optional<String>> accountId() {
        return Codegen.optional(this.accountId);
    }
    /**
     * Brief summary of the ruleset and its intended use.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return Brief summary of the ruleset and its intended use.
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Type of Ruleset to create. Available values: `custom`, `managed`, `root`, `zone`.
     * 
     */
    @Export(name="kind", refs={String.class}, tree="[0]")
    private Output<String> kind;

    /**
     * @return Type of Ruleset to create. Available values: `custom`, `managed`, `root`, `zone`.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * Name of the ruleset.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the ruleset.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Point in the request/response lifecycle where the ruleset will be created. Available values: `ddos_l4`, `ddos_l7`, `http_config_settings`, `http_custom_errors`, `http_log_custom_fields`, `http_ratelimit`, `http_request_cache_settings`, `http_request_dynamic_redirect`, `http_request_firewall_custom`, `http_request_firewall_managed`, `http_request_late_transform`, `http_request_origin`, `http_request_redirect`, `http_request_sanitize`, `http_request_sbfm`, `http_request_transform`, `http_response_compression`, `http_response_firewall_managed`, `http_response_headers_transform`, `magic_transit`.
     * 
     */
    @Export(name="phase", refs={String.class}, tree="[0]")
    private Output<String> phase;

    /**
     * @return Point in the request/response lifecycle where the ruleset will be created. Available values: `ddos_l4`, `ddos_l7`, `http_config_settings`, `http_custom_errors`, `http_log_custom_fields`, `http_ratelimit`, `http_request_cache_settings`, `http_request_dynamic_redirect`, `http_request_firewall_custom`, `http_request_firewall_managed`, `http_request_late_transform`, `http_request_origin`, `http_request_redirect`, `http_request_sanitize`, `http_request_sbfm`, `http_request_transform`, `http_response_compression`, `http_response_firewall_managed`, `http_response_headers_transform`, `magic_transit`.
     * 
     */
    public Output<String> phase() {
        return this.phase;
    }
    /**
     * List of rules to apply to the ruleset.
     * 
     */
    @Export(name="rules", refs={List.class,RulesetRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RulesetRule>> rules;

    /**
     * @return List of rules to apply to the ruleset.
     * 
     */
    public Output<Optional<List<RulesetRule>>> rules() {
        return Codegen.optional(this.rules);
    }
    /**
     * The zone identifier to target for the resource.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> zoneId;

    /**
     * @return The zone identifier to target for the resource.
     * 
     */
    public Output<Optional<String>> zoneId() {
        return Codegen.optional(this.zoneId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Ruleset(java.lang.String name) {
        this(name, RulesetArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Ruleset(java.lang.String name, RulesetArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Ruleset(java.lang.String name, RulesetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/ruleset:Ruleset", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Ruleset(java.lang.String name, Output<java.lang.String> id, @Nullable RulesetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/ruleset:Ruleset", name, state, makeResourceOptions(options, id), false);
    }

    private static RulesetArgs makeArgs(RulesetArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? RulesetArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Ruleset get(java.lang.String name, Output<java.lang.String> id, @Nullable RulesetState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Ruleset(name, id, state, options);
    }
}
