// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteLanStaticAddressingDhcpServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteLanStaticAddressingDhcpServerArgs Empty = new MagicTransitSiteLanStaticAddressingDhcpServerArgs();

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="dhcpPoolEnd")
    private @Nullable Output<String> dhcpPoolEnd;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Optional<Output<String>> dhcpPoolEnd() {
        return Optional.ofNullable(this.dhcpPoolEnd);
    }

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="dhcpPoolStart")
    private @Nullable Output<String> dhcpPoolStart;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Optional<Output<String>> dhcpPoolStart() {
        return Optional.ofNullable(this.dhcpPoolStart);
    }

    /**
     * A valid IPv4 address.
     * 
     */
    @Import(name="dnsServer")
    private @Nullable Output<String> dnsServer;

    /**
     * @return A valid IPv4 address.
     * 
     */
    public Optional<Output<String>> dnsServer() {
        return Optional.ofNullable(this.dnsServer);
    }

    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Mapping of MAC addresses to IP addresses
     * 
     */
    @Import(name="reservations")
    private @Nullable Output<Map<String,String>> reservations;

    /**
     * @return Mapping of MAC addresses to IP addresses
     * 
     */
    public Optional<Output<Map<String,String>>> reservations() {
        return Optional.ofNullable(this.reservations);
    }

    private MagicTransitSiteLanStaticAddressingDhcpServerArgs() {}

    private MagicTransitSiteLanStaticAddressingDhcpServerArgs(MagicTransitSiteLanStaticAddressingDhcpServerArgs $) {
        this.dhcpPoolEnd = $.dhcpPoolEnd;
        this.dhcpPoolStart = $.dhcpPoolStart;
        this.dnsServer = $.dnsServer;
        this.dnsServers = $.dnsServers;
        this.reservations = $.reservations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteLanStaticAddressingDhcpServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteLanStaticAddressingDhcpServerArgs $;

        public Builder() {
            $ = new MagicTransitSiteLanStaticAddressingDhcpServerArgs();
        }

        public Builder(MagicTransitSiteLanStaticAddressingDhcpServerArgs defaults) {
            $ = new MagicTransitSiteLanStaticAddressingDhcpServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhcpPoolEnd A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dhcpPoolEnd(@Nullable Output<String> dhcpPoolEnd) {
            $.dhcpPoolEnd = dhcpPoolEnd;
            return this;
        }

        /**
         * @param dhcpPoolEnd A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dhcpPoolEnd(String dhcpPoolEnd) {
            return dhcpPoolEnd(Output.of(dhcpPoolEnd));
        }

        /**
         * @param dhcpPoolStart A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dhcpPoolStart(@Nullable Output<String> dhcpPoolStart) {
            $.dhcpPoolStart = dhcpPoolStart;
            return this;
        }

        /**
         * @param dhcpPoolStart A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dhcpPoolStart(String dhcpPoolStart) {
            return dhcpPoolStart(Output.of(dhcpPoolStart));
        }

        /**
         * @param dnsServer A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dnsServer(@Nullable Output<String> dnsServer) {
            $.dnsServer = dnsServer;
            return this;
        }

        /**
         * @param dnsServer A valid IPv4 address.
         * 
         * @return builder
         * 
         */
        public Builder dnsServer(String dnsServer) {
            return dnsServer(Output.of(dnsServer));
        }

        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param reservations Mapping of MAC addresses to IP addresses
         * 
         * @return builder
         * 
         */
        public Builder reservations(@Nullable Output<Map<String,String>> reservations) {
            $.reservations = reservations;
            return this;
        }

        /**
         * @param reservations Mapping of MAC addresses to IP addresses
         * 
         * @return builder
         * 
         */
        public Builder reservations(Map<String,String> reservations) {
            return reservations(Output.of(reservations));
        }

        public MagicTransitSiteLanStaticAddressingDhcpServerArgs build() {
            return $;
        }
    }

}
