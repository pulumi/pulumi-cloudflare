// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class ImageVariantOptions {
    /**
     * @return The fit property describes how the width and height dimensions should be interpreted.
     * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
     * 
     */
    private String fit;
    /**
     * @return Maximum height in image pixels.
     * 
     */
    private Double height;
    /**
     * @return What EXIF data should be preserved in the output image.
     * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
     * 
     */
    private String metadata;
    /**
     * @return Maximum width in image pixels.
     * 
     */
    private Double width;

    private ImageVariantOptions() {}
    /**
     * @return The fit property describes how the width and height dimensions should be interpreted.
     * Available values: &#34;scale-down&#34;, &#34;contain&#34;, &#34;cover&#34;, &#34;crop&#34;, &#34;pad&#34;.
     * 
     */
    public String fit() {
        return this.fit;
    }
    /**
     * @return Maximum height in image pixels.
     * 
     */
    public Double height() {
        return this.height;
    }
    /**
     * @return What EXIF data should be preserved in the output image.
     * Available values: &#34;keep&#34;, &#34;copyright&#34;, &#34;none&#34;.
     * 
     */
    public String metadata() {
        return this.metadata;
    }
    /**
     * @return Maximum width in image pixels.
     * 
     */
    public Double width() {
        return this.width;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageVariantOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String fit;
        private Double height;
        private String metadata;
        private Double width;
        public Builder() {}
        public Builder(ImageVariantOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fit = defaults.fit;
    	      this.height = defaults.height;
    	      this.metadata = defaults.metadata;
    	      this.width = defaults.width;
        }

        @CustomType.Setter
        public Builder fit(String fit) {
            if (fit == null) {
              throw new MissingRequiredPropertyException("ImageVariantOptions", "fit");
            }
            this.fit = fit;
            return this;
        }
        @CustomType.Setter
        public Builder height(Double height) {
            if (height == null) {
              throw new MissingRequiredPropertyException("ImageVariantOptions", "height");
            }
            this.height = height;
            return this;
        }
        @CustomType.Setter
        public Builder metadata(String metadata) {
            if (metadata == null) {
              throw new MissingRequiredPropertyException("ImageVariantOptions", "metadata");
            }
            this.metadata = metadata;
            return this;
        }
        @CustomType.Setter
        public Builder width(Double width) {
            if (width == null) {
              throw new MissingRequiredPropertyException("ImageVariantOptions", "width");
            }
            this.width = width;
            return this;
        }
        public ImageVariantOptions build() {
            final var _resultValue = new ImageVariantOptions();
            _resultValue.fit = fit;
            _resultValue.height = height;
            _resultValue.metadata = metadata;
            _resultValue.width = width;
            return _resultValue;
        }
    }
}
