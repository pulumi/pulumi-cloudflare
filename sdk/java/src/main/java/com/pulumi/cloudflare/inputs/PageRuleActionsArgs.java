// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.PageRuleActionsCacheKeyFieldsArgs;
import com.pulumi.cloudflare.inputs.PageRuleActionsCacheTtlByStatusArgs;
import com.pulumi.cloudflare.inputs.PageRuleActionsForwardingUrlArgs;
import com.pulumi.cloudflare.inputs.PageRuleActionsMinifyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PageRuleActionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PageRuleActionsArgs Empty = new PageRuleActionsArgs();

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="alwaysUseHttps")
    private @Nullable Output<Boolean> alwaysUseHttps;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> alwaysUseHttps() {
        return Optional.ofNullable(this.alwaysUseHttps);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="automaticHttpsRewrites")
    private @Nullable Output<String> automaticHttpsRewrites;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> automaticHttpsRewrites() {
        return Optional.ofNullable(this.automaticHttpsRewrites);
    }

    /**
     * The Time To Live for the browser cache. `0` means &#39;Respect Existing Headers&#39;
     * 
     */
    @Import(name="browserCacheTtl")
    private @Nullable Output<String> browserCacheTtl;

    /**
     * @return The Time To Live for the browser cache. `0` means &#39;Respect Existing Headers&#39;
     * 
     */
    public Optional<Output<String>> browserCacheTtl() {
        return Optional.ofNullable(this.browserCacheTtl);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="browserCheck")
    private @Nullable Output<String> browserCheck;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> browserCheck() {
        return Optional.ofNullable(this.browserCheck);
    }

    /**
     * String value of cookie name to conditionally bypass cache the page.
     * 
     */
    @Import(name="bypassCacheOnCookie")
    private @Nullable Output<String> bypassCacheOnCookie;

    /**
     * @return String value of cookie name to conditionally bypass cache the page.
     * 
     */
    public Optional<Output<String>> bypassCacheOnCookie() {
        return Optional.ofNullable(this.bypassCacheOnCookie);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="cacheByDeviceType")
    private @Nullable Output<String> cacheByDeviceType;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> cacheByDeviceType() {
        return Optional.ofNullable(this.cacheByDeviceType);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="cacheDeceptionArmor")
    private @Nullable Output<String> cacheDeceptionArmor;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> cacheDeceptionArmor() {
        return Optional.ofNullable(this.cacheDeceptionArmor);
    }

    /**
     * Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
     * 
     */
    @Import(name="cacheKeyFields")
    private @Nullable Output<PageRuleActionsCacheKeyFieldsArgs> cacheKeyFields;

    /**
     * @return Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
     * 
     */
    public Optional<Output<PageRuleActionsCacheKeyFieldsArgs>> cacheKeyFields() {
        return Optional.ofNullable(this.cacheKeyFields);
    }

    /**
     * Whether to set the cache level to `&#34;bypass&#34;`, `&#34;basic&#34;`, `&#34;simplified&#34;`, `&#34;aggressive&#34;`, or `&#34;cache_everything&#34;`.
     * 
     */
    @Import(name="cacheLevel")
    private @Nullable Output<String> cacheLevel;

    /**
     * @return Whether to set the cache level to `&#34;bypass&#34;`, `&#34;basic&#34;`, `&#34;simplified&#34;`, `&#34;aggressive&#34;`, or `&#34;cache_everything&#34;`.
     * 
     */
    public Optional<Output<String>> cacheLevel() {
        return Optional.ofNullable(this.cacheLevel);
    }

    /**
     * String value of cookie name to conditionally cache the page.
     * 
     */
    @Import(name="cacheOnCookie")
    private @Nullable Output<String> cacheOnCookie;

    /**
     * @return String value of cookie name to conditionally cache the page.
     * 
     */
    public Optional<Output<String>> cacheOnCookie() {
        return Optional.ofNullable(this.cacheOnCookie);
    }

    /**
     * Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
     * 
     */
    @Import(name="cacheTtlByStatuses")
    private @Nullable Output<List<PageRuleActionsCacheTtlByStatusArgs>> cacheTtlByStatuses;

    /**
     * @return Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
     * 
     */
    public Optional<Output<List<PageRuleActionsCacheTtlByStatusArgs>>> cacheTtlByStatuses() {
        return Optional.ofNullable(this.cacheTtlByStatuses);
    }

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="disableApps")
    private @Nullable Output<Boolean> disableApps;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> disableApps() {
        return Optional.ofNullable(this.disableApps);
    }

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="disablePerformance")
    private @Nullable Output<Boolean> disablePerformance;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> disablePerformance() {
        return Optional.ofNullable(this.disablePerformance);
    }

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="disableRailgun")
    private @Nullable Output<Boolean> disableRailgun;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> disableRailgun() {
        return Optional.ofNullable(this.disableRailgun);
    }

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="disableSecurity")
    private @Nullable Output<Boolean> disableSecurity;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> disableSecurity() {
        return Optional.ofNullable(this.disableSecurity);
    }

    /**
     * Boolean of whether this action is enabled. Default: false.
     * 
     */
    @Import(name="disableZaraz")
    private @Nullable Output<Boolean> disableZaraz;

    /**
     * @return Boolean of whether this action is enabled. Default: false.
     * 
     */
    public Optional<Output<Boolean>> disableZaraz() {
        return Optional.ofNullable(this.disableZaraz);
    }

    /**
     * The Time To Live for the edge cache.
     * 
     */
    @Import(name="edgeCacheTtl")
    private @Nullable Output<Integer> edgeCacheTtl;

    /**
     * @return The Time To Live for the edge cache.
     * 
     */
    public Optional<Output<Integer>> edgeCacheTtl() {
        return Optional.ofNullable(this.edgeCacheTtl);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="emailObfuscation")
    private @Nullable Output<String> emailObfuscation;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> emailObfuscation() {
        return Optional.ofNullable(this.emailObfuscation);
    }

    /**
     * Whether origin Cache-Control action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="explicitCacheControl")
    private @Nullable Output<String> explicitCacheControl;

    /**
     * @return Whether origin Cache-Control action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> explicitCacheControl() {
        return Optional.ofNullable(this.explicitCacheControl);
    }

    /**
     * The URL to forward to, and with what status. See below.
     * 
     */
    @Import(name="forwardingUrl")
    private @Nullable Output<PageRuleActionsForwardingUrlArgs> forwardingUrl;

    /**
     * @return The URL to forward to, and with what status. See below.
     * 
     */
    public Optional<Output<PageRuleActionsForwardingUrlArgs>> forwardingUrl() {
        return Optional.ofNullable(this.forwardingUrl);
    }

    /**
     * Value of the Host header to send.
     * 
     */
    @Import(name="hostHeaderOverride")
    private @Nullable Output<String> hostHeaderOverride;

    /**
     * @return Value of the Host header to send.
     * 
     */
    public Optional<Output<String>> hostHeaderOverride() {
        return Optional.ofNullable(this.hostHeaderOverride);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="ipGeolocation")
    private @Nullable Output<String> ipGeolocation;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> ipGeolocation() {
        return Optional.ofNullable(this.ipGeolocation);
    }

    /**
     * The configuration for HTML, CSS and JS minification. See below for full list of options.
     * 
     */
    @Import(name="minifies")
    private @Nullable Output<List<PageRuleActionsMinifyArgs>> minifies;

    /**
     * @return The configuration for HTML, CSS and JS minification. See below for full list of options.
     * 
     */
    public Optional<Output<List<PageRuleActionsMinifyArgs>>> minifies() {
        return Optional.ofNullable(this.minifies);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="mirage")
    private @Nullable Output<String> mirage;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> mirage() {
        return Optional.ofNullable(this.mirage);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="opportunisticEncryption")
    private @Nullable Output<String> opportunisticEncryption;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> opportunisticEncryption() {
        return Optional.ofNullable(this.opportunisticEncryption);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="originErrorPagePassThru")
    private @Nullable Output<String> originErrorPagePassThru;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> originErrorPagePassThru() {
        return Optional.ofNullable(this.originErrorPagePassThru);
    }

    /**
     * Whether this action is `&#34;off&#34;`, `&#34;lossless&#34;` or `&#34;lossy&#34;`.
     * 
     */
    @Import(name="polish")
    private @Nullable Output<String> polish;

    /**
     * @return Whether this action is `&#34;off&#34;`, `&#34;lossless&#34;` or `&#34;lossy&#34;`.
     * 
     */
    public Optional<Output<String>> polish() {
        return Optional.ofNullable(this.polish);
    }

    /**
     * Overridden origin server name.
     * 
     */
    @Import(name="resolveOverride")
    private @Nullable Output<String> resolveOverride;

    /**
     * @return Overridden origin server name.
     * 
     */
    public Optional<Output<String>> resolveOverride() {
        return Optional.ofNullable(this.resolveOverride);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="respectStrongEtag")
    private @Nullable Output<String> respectStrongEtag;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> respectStrongEtag() {
        return Optional.ofNullable(this.respectStrongEtag);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="responseBuffering")
    private @Nullable Output<String> responseBuffering;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> responseBuffering() {
        return Optional.ofNullable(this.responseBuffering);
    }

    /**
     * Whether to set the rocket loader to `&#34;on&#34;`, `&#34;off&#34;`.
     * 
     */
    @Import(name="rocketLoader")
    private @Nullable Output<String> rocketLoader;

    /**
     * @return Whether to set the rocket loader to `&#34;on&#34;`, `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> rocketLoader() {
        return Optional.ofNullable(this.rocketLoader);
    }

    /**
     * Whether to set the security level to `&#34;off&#34;`, `&#34;essentially_off&#34;`, `&#34;low&#34;`, `&#34;medium&#34;`, `&#34;high&#34;`, or `&#34;under_attack&#34;`.
     * 
     */
    @Import(name="securityLevel")
    private @Nullable Output<String> securityLevel;

    /**
     * @return Whether to set the security level to `&#34;off&#34;`, `&#34;essentially_off&#34;`, `&#34;low&#34;`, `&#34;medium&#34;`, `&#34;high&#34;`, or `&#34;under_attack&#34;`.
     * 
     */
    public Optional<Output<String>> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="serverSideExclude")
    private @Nullable Output<String> serverSideExclude;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> serverSideExclude() {
        return Optional.ofNullable(this.serverSideExclude);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="sortQueryStringForCache")
    private @Nullable Output<String> sortQueryStringForCache;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> sortQueryStringForCache() {
        return Optional.ofNullable(this.sortQueryStringForCache);
    }

    /**
     * Whether to set the SSL mode to `&#34;off&#34;`, `&#34;flexible&#34;`, `&#34;full&#34;`, `&#34;strict&#34;`, or `&#34;origin_pull&#34;`.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<String> ssl;

    /**
     * @return Whether to set the SSL mode to `&#34;off&#34;`, `&#34;flexible&#34;`, `&#34;full&#34;`, `&#34;strict&#34;`, or `&#34;origin_pull&#34;`.
     * 
     */
    public Optional<Output<String>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="trueClientIpHeader")
    private @Nullable Output<String> trueClientIpHeader;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> trueClientIpHeader() {
        return Optional.ofNullable(this.trueClientIpHeader);
    }

    /**
     * Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    @Import(name="waf")
    private @Nullable Output<String> waf;

    /**
     * @return Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
     * 
     */
    public Optional<Output<String>> waf() {
        return Optional.ofNullable(this.waf);
    }

    private PageRuleActionsArgs() {}

    private PageRuleActionsArgs(PageRuleActionsArgs $) {
        this.alwaysUseHttps = $.alwaysUseHttps;
        this.automaticHttpsRewrites = $.automaticHttpsRewrites;
        this.browserCacheTtl = $.browserCacheTtl;
        this.browserCheck = $.browserCheck;
        this.bypassCacheOnCookie = $.bypassCacheOnCookie;
        this.cacheByDeviceType = $.cacheByDeviceType;
        this.cacheDeceptionArmor = $.cacheDeceptionArmor;
        this.cacheKeyFields = $.cacheKeyFields;
        this.cacheLevel = $.cacheLevel;
        this.cacheOnCookie = $.cacheOnCookie;
        this.cacheTtlByStatuses = $.cacheTtlByStatuses;
        this.disableApps = $.disableApps;
        this.disablePerformance = $.disablePerformance;
        this.disableRailgun = $.disableRailgun;
        this.disableSecurity = $.disableSecurity;
        this.disableZaraz = $.disableZaraz;
        this.edgeCacheTtl = $.edgeCacheTtl;
        this.emailObfuscation = $.emailObfuscation;
        this.explicitCacheControl = $.explicitCacheControl;
        this.forwardingUrl = $.forwardingUrl;
        this.hostHeaderOverride = $.hostHeaderOverride;
        this.ipGeolocation = $.ipGeolocation;
        this.minifies = $.minifies;
        this.mirage = $.mirage;
        this.opportunisticEncryption = $.opportunisticEncryption;
        this.originErrorPagePassThru = $.originErrorPagePassThru;
        this.polish = $.polish;
        this.resolveOverride = $.resolveOverride;
        this.respectStrongEtag = $.respectStrongEtag;
        this.responseBuffering = $.responseBuffering;
        this.rocketLoader = $.rocketLoader;
        this.securityLevel = $.securityLevel;
        this.serverSideExclude = $.serverSideExclude;
        this.sortQueryStringForCache = $.sortQueryStringForCache;
        this.ssl = $.ssl;
        this.trueClientIpHeader = $.trueClientIpHeader;
        this.waf = $.waf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PageRuleActionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PageRuleActionsArgs $;

        public Builder() {
            $ = new PageRuleActionsArgs();
        }

        public Builder(PageRuleActionsArgs defaults) {
            $ = new PageRuleActionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alwaysUseHttps Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder alwaysUseHttps(@Nullable Output<Boolean> alwaysUseHttps) {
            $.alwaysUseHttps = alwaysUseHttps;
            return this;
        }

        /**
         * @param alwaysUseHttps Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder alwaysUseHttps(Boolean alwaysUseHttps) {
            return alwaysUseHttps(Output.of(alwaysUseHttps));
        }

        /**
         * @param automaticHttpsRewrites Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder automaticHttpsRewrites(@Nullable Output<String> automaticHttpsRewrites) {
            $.automaticHttpsRewrites = automaticHttpsRewrites;
            return this;
        }

        /**
         * @param automaticHttpsRewrites Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder automaticHttpsRewrites(String automaticHttpsRewrites) {
            return automaticHttpsRewrites(Output.of(automaticHttpsRewrites));
        }

        /**
         * @param browserCacheTtl The Time To Live for the browser cache. `0` means &#39;Respect Existing Headers&#39;
         * 
         * @return builder
         * 
         */
        public Builder browserCacheTtl(@Nullable Output<String> browserCacheTtl) {
            $.browserCacheTtl = browserCacheTtl;
            return this;
        }

        /**
         * @param browserCacheTtl The Time To Live for the browser cache. `0` means &#39;Respect Existing Headers&#39;
         * 
         * @return builder
         * 
         */
        public Builder browserCacheTtl(String browserCacheTtl) {
            return browserCacheTtl(Output.of(browserCacheTtl));
        }

        /**
         * @param browserCheck Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder browserCheck(@Nullable Output<String> browserCheck) {
            $.browserCheck = browserCheck;
            return this;
        }

        /**
         * @param browserCheck Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder browserCheck(String browserCheck) {
            return browserCheck(Output.of(browserCheck));
        }

        /**
         * @param bypassCacheOnCookie String value of cookie name to conditionally bypass cache the page.
         * 
         * @return builder
         * 
         */
        public Builder bypassCacheOnCookie(@Nullable Output<String> bypassCacheOnCookie) {
            $.bypassCacheOnCookie = bypassCacheOnCookie;
            return this;
        }

        /**
         * @param bypassCacheOnCookie String value of cookie name to conditionally bypass cache the page.
         * 
         * @return builder
         * 
         */
        public Builder bypassCacheOnCookie(String bypassCacheOnCookie) {
            return bypassCacheOnCookie(Output.of(bypassCacheOnCookie));
        }

        /**
         * @param cacheByDeviceType Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheByDeviceType(@Nullable Output<String> cacheByDeviceType) {
            $.cacheByDeviceType = cacheByDeviceType;
            return this;
        }

        /**
         * @param cacheByDeviceType Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheByDeviceType(String cacheByDeviceType) {
            return cacheByDeviceType(Output.of(cacheByDeviceType));
        }

        /**
         * @param cacheDeceptionArmor Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(@Nullable Output<String> cacheDeceptionArmor) {
            $.cacheDeceptionArmor = cacheDeceptionArmor;
            return this;
        }

        /**
         * @param cacheDeceptionArmor Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(String cacheDeceptionArmor) {
            return cacheDeceptionArmor(Output.of(cacheDeceptionArmor));
        }

        /**
         * @param cacheKeyFields Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyFields(@Nullable Output<PageRuleActionsCacheKeyFieldsArgs> cacheKeyFields) {
            $.cacheKeyFields = cacheKeyFields;
            return this;
        }

        /**
         * @param cacheKeyFields Controls how Cloudflare creates Cache Keys used to identify files in cache. See below for full description.
         * 
         * @return builder
         * 
         */
        public Builder cacheKeyFields(PageRuleActionsCacheKeyFieldsArgs cacheKeyFields) {
            return cacheKeyFields(Output.of(cacheKeyFields));
        }

        /**
         * @param cacheLevel Whether to set the cache level to `&#34;bypass&#34;`, `&#34;basic&#34;`, `&#34;simplified&#34;`, `&#34;aggressive&#34;`, or `&#34;cache_everything&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheLevel(@Nullable Output<String> cacheLevel) {
            $.cacheLevel = cacheLevel;
            return this;
        }

        /**
         * @param cacheLevel Whether to set the cache level to `&#34;bypass&#34;`, `&#34;basic&#34;`, `&#34;simplified&#34;`, `&#34;aggressive&#34;`, or `&#34;cache_everything&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder cacheLevel(String cacheLevel) {
            return cacheLevel(Output.of(cacheLevel));
        }

        /**
         * @param cacheOnCookie String value of cookie name to conditionally cache the page.
         * 
         * @return builder
         * 
         */
        public Builder cacheOnCookie(@Nullable Output<String> cacheOnCookie) {
            $.cacheOnCookie = cacheOnCookie;
            return this;
        }

        /**
         * @param cacheOnCookie String value of cookie name to conditionally cache the page.
         * 
         * @return builder
         * 
         */
        public Builder cacheOnCookie(String cacheOnCookie) {
            return cacheOnCookie(Output.of(cacheOnCookie));
        }

        /**
         * @param cacheTtlByStatuses Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
         * 
         * @return builder
         * 
         */
        public Builder cacheTtlByStatuses(@Nullable Output<List<PageRuleActionsCacheTtlByStatusArgs>> cacheTtlByStatuses) {
            $.cacheTtlByStatuses = cacheTtlByStatuses;
            return this;
        }

        /**
         * @param cacheTtlByStatuses Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
         * 
         * @return builder
         * 
         */
        public Builder cacheTtlByStatuses(List<PageRuleActionsCacheTtlByStatusArgs> cacheTtlByStatuses) {
            return cacheTtlByStatuses(Output.of(cacheTtlByStatuses));
        }

        /**
         * @param cacheTtlByStatuses Set cache TTL based on the response status from the origin web server. Can be specified multiple times. See below for full description.
         * 
         * @return builder
         * 
         */
        public Builder cacheTtlByStatuses(PageRuleActionsCacheTtlByStatusArgs... cacheTtlByStatuses) {
            return cacheTtlByStatuses(List.of(cacheTtlByStatuses));
        }

        /**
         * @param disableApps Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableApps(@Nullable Output<Boolean> disableApps) {
            $.disableApps = disableApps;
            return this;
        }

        /**
         * @param disableApps Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableApps(Boolean disableApps) {
            return disableApps(Output.of(disableApps));
        }

        /**
         * @param disablePerformance Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disablePerformance(@Nullable Output<Boolean> disablePerformance) {
            $.disablePerformance = disablePerformance;
            return this;
        }

        /**
         * @param disablePerformance Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disablePerformance(Boolean disablePerformance) {
            return disablePerformance(Output.of(disablePerformance));
        }

        /**
         * @param disableRailgun Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableRailgun(@Nullable Output<Boolean> disableRailgun) {
            $.disableRailgun = disableRailgun;
            return this;
        }

        /**
         * @param disableRailgun Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableRailgun(Boolean disableRailgun) {
            return disableRailgun(Output.of(disableRailgun));
        }

        /**
         * @param disableSecurity Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableSecurity(@Nullable Output<Boolean> disableSecurity) {
            $.disableSecurity = disableSecurity;
            return this;
        }

        /**
         * @param disableSecurity Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableSecurity(Boolean disableSecurity) {
            return disableSecurity(Output.of(disableSecurity));
        }

        /**
         * @param disableZaraz Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableZaraz(@Nullable Output<Boolean> disableZaraz) {
            $.disableZaraz = disableZaraz;
            return this;
        }

        /**
         * @param disableZaraz Boolean of whether this action is enabled. Default: false.
         * 
         * @return builder
         * 
         */
        public Builder disableZaraz(Boolean disableZaraz) {
            return disableZaraz(Output.of(disableZaraz));
        }

        /**
         * @param edgeCacheTtl The Time To Live for the edge cache.
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheTtl(@Nullable Output<Integer> edgeCacheTtl) {
            $.edgeCacheTtl = edgeCacheTtl;
            return this;
        }

        /**
         * @param edgeCacheTtl The Time To Live for the edge cache.
         * 
         * @return builder
         * 
         */
        public Builder edgeCacheTtl(Integer edgeCacheTtl) {
            return edgeCacheTtl(Output.of(edgeCacheTtl));
        }

        /**
         * @param emailObfuscation Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder emailObfuscation(@Nullable Output<String> emailObfuscation) {
            $.emailObfuscation = emailObfuscation;
            return this;
        }

        /**
         * @param emailObfuscation Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder emailObfuscation(String emailObfuscation) {
            return emailObfuscation(Output.of(emailObfuscation));
        }

        /**
         * @param explicitCacheControl Whether origin Cache-Control action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder explicitCacheControl(@Nullable Output<String> explicitCacheControl) {
            $.explicitCacheControl = explicitCacheControl;
            return this;
        }

        /**
         * @param explicitCacheControl Whether origin Cache-Control action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder explicitCacheControl(String explicitCacheControl) {
            return explicitCacheControl(Output.of(explicitCacheControl));
        }

        /**
         * @param forwardingUrl The URL to forward to, and with what status. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingUrl(@Nullable Output<PageRuleActionsForwardingUrlArgs> forwardingUrl) {
            $.forwardingUrl = forwardingUrl;
            return this;
        }

        /**
         * @param forwardingUrl The URL to forward to, and with what status. See below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingUrl(PageRuleActionsForwardingUrlArgs forwardingUrl) {
            return forwardingUrl(Output.of(forwardingUrl));
        }

        /**
         * @param hostHeaderOverride Value of the Host header to send.
         * 
         * @return builder
         * 
         */
        public Builder hostHeaderOverride(@Nullable Output<String> hostHeaderOverride) {
            $.hostHeaderOverride = hostHeaderOverride;
            return this;
        }

        /**
         * @param hostHeaderOverride Value of the Host header to send.
         * 
         * @return builder
         * 
         */
        public Builder hostHeaderOverride(String hostHeaderOverride) {
            return hostHeaderOverride(Output.of(hostHeaderOverride));
        }

        /**
         * @param ipGeolocation Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder ipGeolocation(@Nullable Output<String> ipGeolocation) {
            $.ipGeolocation = ipGeolocation;
            return this;
        }

        /**
         * @param ipGeolocation Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder ipGeolocation(String ipGeolocation) {
            return ipGeolocation(Output.of(ipGeolocation));
        }

        /**
         * @param minifies The configuration for HTML, CSS and JS minification. See below for full list of options.
         * 
         * @return builder
         * 
         */
        public Builder minifies(@Nullable Output<List<PageRuleActionsMinifyArgs>> minifies) {
            $.minifies = minifies;
            return this;
        }

        /**
         * @param minifies The configuration for HTML, CSS and JS minification. See below for full list of options.
         * 
         * @return builder
         * 
         */
        public Builder minifies(List<PageRuleActionsMinifyArgs> minifies) {
            return minifies(Output.of(minifies));
        }

        /**
         * @param minifies The configuration for HTML, CSS and JS minification. See below for full list of options.
         * 
         * @return builder
         * 
         */
        public Builder minifies(PageRuleActionsMinifyArgs... minifies) {
            return minifies(List.of(minifies));
        }

        /**
         * @param mirage Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder mirage(@Nullable Output<String> mirage) {
            $.mirage = mirage;
            return this;
        }

        /**
         * @param mirage Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder mirage(String mirage) {
            return mirage(Output.of(mirage));
        }

        /**
         * @param opportunisticEncryption Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder opportunisticEncryption(@Nullable Output<String> opportunisticEncryption) {
            $.opportunisticEncryption = opportunisticEncryption;
            return this;
        }

        /**
         * @param opportunisticEncryption Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder opportunisticEncryption(String opportunisticEncryption) {
            return opportunisticEncryption(Output.of(opportunisticEncryption));
        }

        /**
         * @param originErrorPagePassThru Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder originErrorPagePassThru(@Nullable Output<String> originErrorPagePassThru) {
            $.originErrorPagePassThru = originErrorPagePassThru;
            return this;
        }

        /**
         * @param originErrorPagePassThru Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder originErrorPagePassThru(String originErrorPagePassThru) {
            return originErrorPagePassThru(Output.of(originErrorPagePassThru));
        }

        /**
         * @param polish Whether this action is `&#34;off&#34;`, `&#34;lossless&#34;` or `&#34;lossy&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder polish(@Nullable Output<String> polish) {
            $.polish = polish;
            return this;
        }

        /**
         * @param polish Whether this action is `&#34;off&#34;`, `&#34;lossless&#34;` or `&#34;lossy&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder polish(String polish) {
            return polish(Output.of(polish));
        }

        /**
         * @param resolveOverride Overridden origin server name.
         * 
         * @return builder
         * 
         */
        public Builder resolveOverride(@Nullable Output<String> resolveOverride) {
            $.resolveOverride = resolveOverride;
            return this;
        }

        /**
         * @param resolveOverride Overridden origin server name.
         * 
         * @return builder
         * 
         */
        public Builder resolveOverride(String resolveOverride) {
            return resolveOverride(Output.of(resolveOverride));
        }

        /**
         * @param respectStrongEtag Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder respectStrongEtag(@Nullable Output<String> respectStrongEtag) {
            $.respectStrongEtag = respectStrongEtag;
            return this;
        }

        /**
         * @param respectStrongEtag Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder respectStrongEtag(String respectStrongEtag) {
            return respectStrongEtag(Output.of(respectStrongEtag));
        }

        /**
         * @param responseBuffering Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder responseBuffering(@Nullable Output<String> responseBuffering) {
            $.responseBuffering = responseBuffering;
            return this;
        }

        /**
         * @param responseBuffering Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder responseBuffering(String responseBuffering) {
            return responseBuffering(Output.of(responseBuffering));
        }

        /**
         * @param rocketLoader Whether to set the rocket loader to `&#34;on&#34;`, `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder rocketLoader(@Nullable Output<String> rocketLoader) {
            $.rocketLoader = rocketLoader;
            return this;
        }

        /**
         * @param rocketLoader Whether to set the rocket loader to `&#34;on&#34;`, `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder rocketLoader(String rocketLoader) {
            return rocketLoader(Output.of(rocketLoader));
        }

        /**
         * @param securityLevel Whether to set the security level to `&#34;off&#34;`, `&#34;essentially_off&#34;`, `&#34;low&#34;`, `&#34;medium&#34;`, `&#34;high&#34;`, or `&#34;under_attack&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(@Nullable Output<String> securityLevel) {
            $.securityLevel = securityLevel;
            return this;
        }

        /**
         * @param securityLevel Whether to set the security level to `&#34;off&#34;`, `&#34;essentially_off&#34;`, `&#34;low&#34;`, `&#34;medium&#34;`, `&#34;high&#34;`, or `&#34;under_attack&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(String securityLevel) {
            return securityLevel(Output.of(securityLevel));
        }

        /**
         * @param serverSideExclude Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder serverSideExclude(@Nullable Output<String> serverSideExclude) {
            $.serverSideExclude = serverSideExclude;
            return this;
        }

        /**
         * @param serverSideExclude Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder serverSideExclude(String serverSideExclude) {
            return serverSideExclude(Output.of(serverSideExclude));
        }

        /**
         * @param sortQueryStringForCache Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sortQueryStringForCache(@Nullable Output<String> sortQueryStringForCache) {
            $.sortQueryStringForCache = sortQueryStringForCache;
            return this;
        }

        /**
         * @param sortQueryStringForCache Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder sortQueryStringForCache(String sortQueryStringForCache) {
            return sortQueryStringForCache(Output.of(sortQueryStringForCache));
        }

        /**
         * @param ssl Whether to set the SSL mode to `&#34;off&#34;`, `&#34;flexible&#34;`, `&#34;full&#34;`, `&#34;strict&#34;`, or `&#34;origin_pull&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<String> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl Whether to set the SSL mode to `&#34;off&#34;`, `&#34;flexible&#34;`, `&#34;full&#34;`, `&#34;strict&#34;`, or `&#34;origin_pull&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder ssl(String ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param trueClientIpHeader Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder trueClientIpHeader(@Nullable Output<String> trueClientIpHeader) {
            $.trueClientIpHeader = trueClientIpHeader;
            return this;
        }

        /**
         * @param trueClientIpHeader Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder trueClientIpHeader(String trueClientIpHeader) {
            return trueClientIpHeader(Output.of(trueClientIpHeader));
        }

        /**
         * @param waf Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder waf(@Nullable Output<String> waf) {
            $.waf = waf;
            return this;
        }

        /**
         * @param waf Whether this action is `&#34;on&#34;` or `&#34;off&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder waf(String waf) {
            return waf(Output.of(waf));
        }

        public PageRuleActionsArgs build() {
            return $;
        }
    }

}
