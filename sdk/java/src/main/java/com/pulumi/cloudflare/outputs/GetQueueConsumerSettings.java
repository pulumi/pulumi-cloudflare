// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;

@CustomType
public final class GetQueueConsumerSettings {
    /**
     * @return The maximum number of messages to include in a batch.
     * 
     */
    private Double batchSize;
    /**
     * @return Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    private Double maxConcurrency;
    /**
     * @return The maximum number of retries
     * 
     */
    private Double maxRetries;
    /**
     * @return The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    private Double maxWaitTimeMs;
    /**
     * @return The number of seconds to delay before making the message available for another attempt.
     * 
     */
    private Double retryDelay;
    /**
     * @return The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    private Double visibilityTimeoutMs;

    private GetQueueConsumerSettings() {}
    /**
     * @return The maximum number of messages to include in a batch.
     * 
     */
    public Double batchSize() {
        return this.batchSize;
    }
    /**
     * @return Maximum number of concurrent consumers that may consume from this Queue. Set to `null` to automatically opt in to the platform&#39;s maximum (recommended).
     * 
     */
    public Double maxConcurrency() {
        return this.maxConcurrency;
    }
    /**
     * @return The maximum number of retries
     * 
     */
    public Double maxRetries() {
        return this.maxRetries;
    }
    /**
     * @return The number of milliseconds to wait for a batch to fill up before attempting to deliver it
     * 
     */
    public Double maxWaitTimeMs() {
        return this.maxWaitTimeMs;
    }
    /**
     * @return The number of seconds to delay before making the message available for another attempt.
     * 
     */
    public Double retryDelay() {
        return this.retryDelay;
    }
    /**
     * @return The number of milliseconds that a message is exclusively leased. After the timeout, the message becomes available for another attempt.
     * 
     */
    public Double visibilityTimeoutMs() {
        return this.visibilityTimeoutMs;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetQueueConsumerSettings defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double batchSize;
        private Double maxConcurrency;
        private Double maxRetries;
        private Double maxWaitTimeMs;
        private Double retryDelay;
        private Double visibilityTimeoutMs;
        public Builder() {}
        public Builder(GetQueueConsumerSettings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchSize = defaults.batchSize;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxRetries = defaults.maxRetries;
    	      this.maxWaitTimeMs = defaults.maxWaitTimeMs;
    	      this.retryDelay = defaults.retryDelay;
    	      this.visibilityTimeoutMs = defaults.visibilityTimeoutMs;
        }

        @CustomType.Setter
        public Builder batchSize(Double batchSize) {
            if (batchSize == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "batchSize");
            }
            this.batchSize = batchSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxConcurrency(Double maxConcurrency) {
            if (maxConcurrency == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "maxConcurrency");
            }
            this.maxConcurrency = maxConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder maxRetries(Double maxRetries) {
            if (maxRetries == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "maxRetries");
            }
            this.maxRetries = maxRetries;
            return this;
        }
        @CustomType.Setter
        public Builder maxWaitTimeMs(Double maxWaitTimeMs) {
            if (maxWaitTimeMs == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "maxWaitTimeMs");
            }
            this.maxWaitTimeMs = maxWaitTimeMs;
            return this;
        }
        @CustomType.Setter
        public Builder retryDelay(Double retryDelay) {
            if (retryDelay == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "retryDelay");
            }
            this.retryDelay = retryDelay;
            return this;
        }
        @CustomType.Setter
        public Builder visibilityTimeoutMs(Double visibilityTimeoutMs) {
            if (visibilityTimeoutMs == null) {
              throw new MissingRequiredPropertyException("GetQueueConsumerSettings", "visibilityTimeoutMs");
            }
            this.visibilityTimeoutMs = visibilityTimeoutMs;
            return this;
        }
        public GetQueueConsumerSettings build() {
            final var _resultValue = new GetQueueConsumerSettings();
            _resultValue.batchSize = batchSize;
            _resultValue.maxConcurrency = maxConcurrency;
            _resultValue.maxRetries = maxRetries;
            _resultValue.maxWaitTimeMs = maxWaitTimeMs;
            _resultValue.retryDelay = retryDelay;
            _resultValue.visibilityTimeoutMs = visibilityTimeoutMs;
            return _resultValue;
        }
    }
}
