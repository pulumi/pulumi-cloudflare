// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TunnelConfigConfigIngressOriginRequestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelConfigConfigIngressArgs extends com.pulumi.resources.ResourceArgs {

    public static final TunnelConfigConfigIngressArgs Empty = new TunnelConfigConfigIngressArgs();

    /**
     * Public hostname for this service.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Public hostname for this service.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
     * 
     */
    @Import(name="originRequest")
    private @Nullable Output<TunnelConfigConfigIngressOriginRequestArgs> originRequest;

    /**
     * @return Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
     * 
     */
    public Optional<Output<TunnelConfigConfigIngressOriginRequestArgs>> originRequest() {
        return Optional.ofNullable(this.originRequest);
    }

    /**
     * Requests with this path route to this public hostname.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Requests with this path route to this public hostname.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Protocol and address of destination server. Supported protocols: http://, https://, unix://, tcp://, ssh://, rdp://, unix+tls://, smb://. Alternatively can return a HTTP status code http*status:[code] e.g. &#39;http*status:404&#39;.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return Protocol and address of destination server. Supported protocols: http://, https://, unix://, tcp://, ssh://, rdp://, unix+tls://, smb://. Alternatively can return a HTTP status code http*status:[code] e.g. &#39;http*status:404&#39;.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private TunnelConfigConfigIngressArgs() {}

    private TunnelConfigConfigIngressArgs(TunnelConfigConfigIngressArgs $) {
        this.hostname = $.hostname;
        this.originRequest = $.originRequest;
        this.path = $.path;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelConfigConfigIngressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelConfigConfigIngressArgs $;

        public Builder() {
            $ = new TunnelConfigConfigIngressArgs();
        }

        public Builder(TunnelConfigConfigIngressArgs defaults) {
            $ = new TunnelConfigConfigIngressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostname Public hostname for this service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Public hostname for this service.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param originRequest Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
         * 
         * @return builder
         * 
         */
        public Builder originRequest(@Nullable Output<TunnelConfigConfigIngressOriginRequestArgs> originRequest) {
            $.originRequest = originRequest;
            return this;
        }

        /**
         * @param originRequest Configuration parameters for the public hostname specific connection settings between cloudflared and origin server.
         * 
         * @return builder
         * 
         */
        public Builder originRequest(TunnelConfigConfigIngressOriginRequestArgs originRequest) {
            return originRequest(Output.of(originRequest));
        }

        /**
         * @param path Requests with this path route to this public hostname.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Requests with this path route to this public hostname.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param service Protocol and address of destination server. Supported protocols: http://, https://, unix://, tcp://, ssh://, rdp://, unix+tls://, smb://. Alternatively can return a HTTP status code http*status:[code] e.g. &#39;http*status:404&#39;.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Protocol and address of destination server. Supported protocols: http://, https://, unix://, tcp://, ssh://, rdp://, unix+tls://, smb://. Alternatively can return a HTTP status code http*status:[code] e.g. &#39;http*status:404&#39;.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public TunnelConfigConfigIngressArgs build() {
            if ($.service == null) {
                throw new MissingRequiredPropertyException("TunnelConfigConfigIngressArgs", "service");
            }
            return $;
        }
    }

}
