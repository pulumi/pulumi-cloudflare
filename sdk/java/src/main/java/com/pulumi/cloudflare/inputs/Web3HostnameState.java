// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Web3HostnameState extends com.pulumi.resources.ResourceArgs {

    public static final Web3HostnameState Empty = new Web3HostnameState();

    @Import(name="createdOn")
    private @Nullable Output<String> createdOn;

    public Optional<Output<String>> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * An optional description of the hostname.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description of the hostname.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * DNSLink value used if the target is ipfs.
     * 
     */
    @Import(name="dnslink")
    private @Nullable Output<String> dnslink;

    /**
     * @return DNSLink value used if the target is ipfs.
     * 
     */
    public Optional<Output<String>> dnslink() {
        return Optional.ofNullable(this.dnslink);
    }

    @Import(name="modifiedOn")
    private @Nullable Output<String> modifiedOn;

    public Optional<Output<String>> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The hostname that will point to the target gateway via CNAME.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The hostname that will point to the target gateway via CNAME.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;deleting&#34;, &#34;error&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;deleting&#34;, &#34;error&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Target gateway of the hostname.
     * Available values: &#34;ethereum&#34;, &#34;ipfs&#34;, &#34;ipfs*universal*path&#34;.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    /**
     * @return Target gateway of the hostname.
     * Available values: &#34;ethereum&#34;, &#34;ipfs&#34;, &#34;ipfs*universal*path&#34;.
     * 
     */
    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private Web3HostnameState() {}

    private Web3HostnameState(Web3HostnameState $) {
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.dnslink = $.dnslink;
        this.modifiedOn = $.modifiedOn;
        this.name = $.name;
        this.status = $.status;
        this.target = $.target;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Web3HostnameState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Web3HostnameState $;

        public Builder() {
            $ = new Web3HostnameState();
        }

        public Builder(Web3HostnameState defaults) {
            $ = new Web3HostnameState(Objects.requireNonNull(defaults));
        }

        public Builder createdOn(@Nullable Output<String> createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder createdOn(String createdOn) {
            return createdOn(Output.of(createdOn));
        }

        /**
         * @param description An optional description of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description of the hostname.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnslink DNSLink value used if the target is ipfs.
         * 
         * @return builder
         * 
         */
        public Builder dnslink(@Nullable Output<String> dnslink) {
            $.dnslink = dnslink;
            return this;
        }

        /**
         * @param dnslink DNSLink value used if the target is ipfs.
         * 
         * @return builder
         * 
         */
        public Builder dnslink(String dnslink) {
            return dnslink(Output.of(dnslink));
        }

        public Builder modifiedOn(@Nullable Output<String> modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        public Builder modifiedOn(String modifiedOn) {
            return modifiedOn(Output.of(modifiedOn));
        }

        /**
         * @param name The hostname that will point to the target gateway via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The hostname that will point to the target gateway via CNAME.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Status of the hostname&#39;s activation.
         * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;deleting&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the hostname&#39;s activation.
         * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;deleting&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param target Target gateway of the hostname.
         * Available values: &#34;ethereum&#34;, &#34;ipfs&#34;, &#34;ipfs*universal*path&#34;.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Target gateway of the hostname.
         * Available values: &#34;ethereum&#34;, &#34;ipfs&#34;, &#34;ipfs*universal*path&#34;.
         * 
         * @return builder
         * 
         */
        public Builder target(String target) {
            return target(Output.of(target));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public Web3HostnameState build() {
            return $;
        }
    }

}
