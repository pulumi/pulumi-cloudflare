// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicWanIpsecTunnelHealthCheckArgs;
import com.pulumi.cloudflare.inputs.MagicWanIpsecTunnelIpsecTunnelArgs;
import com.pulumi.cloudflare.inputs.MagicWanIpsecTunnelModifiedIpsecTunnelArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicWanIpsecTunnelState extends com.pulumi.resources.ResourceArgs {

    public static final MagicWanIpsecTunnelState Empty = new MagicWanIpsecTunnelState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    @Import(name="cloudflareEndpoint")
    private @Nullable Output<String> cloudflareEndpoint;

    /**
     * @return The IP address assigned to the Cloudflare side of the IPsec tunnel.
     * 
     */
    public Optional<Output<String>> cloudflareEndpoint() {
        return Optional.ofNullable(this.cloudflareEndpoint);
    }

    /**
     * The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    @Import(name="customerEndpoint")
    private @Nullable Output<String> customerEndpoint;

    /**
     * @return The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
     * 
     */
    public Optional<Output<String>> customerEndpoint() {
        return Optional.ofNullable(this.customerEndpoint);
    }

    /**
     * An optional description forthe IPsec tunnel.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional description forthe IPsec tunnel.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="healthCheck")
    private @Nullable Output<MagicWanIpsecTunnelHealthCheckArgs> healthCheck;

    public Optional<Output<MagicWanIpsecTunnelHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    @Import(name="interfaceAddress")
    private @Nullable Output<String> interfaceAddress;

    /**
     * @return A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
     * 
     */
    public Optional<Output<String>> interfaceAddress() {
        return Optional.ofNullable(this.interfaceAddress);
    }

    @Import(name="ipsecTunnel")
    private @Nullable Output<MagicWanIpsecTunnelIpsecTunnelArgs> ipsecTunnel;

    public Optional<Output<MagicWanIpsecTunnelIpsecTunnelArgs>> ipsecTunnel() {
        return Optional.ofNullable(this.ipsecTunnel);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="ipsecTunnelId")
    private @Nullable Output<String> ipsecTunnelId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> ipsecTunnelId() {
        return Optional.ofNullable(this.ipsecTunnelId);
    }

    @Import(name="ipsecTunnels")
    private @Nullable Output<List<MagicWanIpsecTunnelIpsecTunnelArgs>> ipsecTunnels;

    public Optional<Output<List<MagicWanIpsecTunnelIpsecTunnelArgs>>> ipsecTunnels() {
        return Optional.ofNullable(this.ipsecTunnels);
    }

    @Import(name="modified")
    private @Nullable Output<Boolean> modified;

    public Optional<Output<Boolean>> modified() {
        return Optional.ofNullable(this.modified);
    }

    @Import(name="modifiedIpsecTunnel")
    private @Nullable Output<MagicWanIpsecTunnelModifiedIpsecTunnelArgs> modifiedIpsecTunnel;

    public Optional<Output<MagicWanIpsecTunnelModifiedIpsecTunnelArgs>> modifiedIpsecTunnel() {
        return Optional.ofNullable(this.modifiedIpsecTunnel);
    }

    /**
     * The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the IPsec tunnel. The name cannot share a name with other tunnels.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A randomly generated or provided string for use in the IPsec tunnel.
     * 
     */
    @Import(name="psk")
    private @Nullable Output<String> psk;

    /**
     * @return A randomly generated or provided string for use in the IPsec tunnel.
     * 
     */
    public Optional<Output<String>> psk() {
        return Optional.ofNullable(this.psk);
    }

    /**
     * If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    @Import(name="replayProtection")
    private @Nullable Output<Boolean> replayProtection;

    /**
     * @return If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
     * 
     */
    public Optional<Output<Boolean>> replayProtection() {
        return Optional.ofNullable(this.replayProtection);
    }

    private MagicWanIpsecTunnelState() {}

    private MagicWanIpsecTunnelState(MagicWanIpsecTunnelState $) {
        this.accountId = $.accountId;
        this.cloudflareEndpoint = $.cloudflareEndpoint;
        this.customerEndpoint = $.customerEndpoint;
        this.description = $.description;
        this.healthCheck = $.healthCheck;
        this.interfaceAddress = $.interfaceAddress;
        this.ipsecTunnel = $.ipsecTunnel;
        this.ipsecTunnelId = $.ipsecTunnelId;
        this.ipsecTunnels = $.ipsecTunnels;
        this.modified = $.modified;
        this.modifiedIpsecTunnel = $.modifiedIpsecTunnel;
        this.name = $.name;
        this.psk = $.psk;
        this.replayProtection = $.replayProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicWanIpsecTunnelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicWanIpsecTunnelState $;

        public Builder() {
            $ = new MagicWanIpsecTunnelState();
        }

        public Builder(MagicWanIpsecTunnelState defaults) {
            $ = new MagicWanIpsecTunnelState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param cloudflareEndpoint The IP address assigned to the Cloudflare side of the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpoint(@Nullable Output<String> cloudflareEndpoint) {
            $.cloudflareEndpoint = cloudflareEndpoint;
            return this;
        }

        /**
         * @param cloudflareEndpoint The IP address assigned to the Cloudflare side of the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareEndpoint(String cloudflareEndpoint) {
            return cloudflareEndpoint(Output.of(cloudflareEndpoint));
        }

        /**
         * @param customerEndpoint The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
         * 
         * @return builder
         * 
         */
        public Builder customerEndpoint(@Nullable Output<String> customerEndpoint) {
            $.customerEndpoint = customerEndpoint;
            return this;
        }

        /**
         * @param customerEndpoint The IP address assigned to the customer side of the IPsec tunnel. Not required, but must be set for proactive traceroutes to work.
         * 
         * @return builder
         * 
         */
        public Builder customerEndpoint(String customerEndpoint) {
            return customerEndpoint(Output.of(customerEndpoint));
        }

        /**
         * @param description An optional description forthe IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional description forthe IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder healthCheck(@Nullable Output<MagicWanIpsecTunnelHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        public Builder healthCheck(MagicWanIpsecTunnelHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(@Nullable Output<String> interfaceAddress) {
            $.interfaceAddress = interfaceAddress;
            return this;
        }

        /**
         * @param interfaceAddress A 31-bit prefix (/31 in CIDR notation) supporting two hosts, one for each side of the tunnel. Select the subnet from the following private IP space: 10.0.0.0–10.255.255.255, 172.16.0.0–172.31.255.255, 192.168.0.0–192.168.255.255.
         * 
         * @return builder
         * 
         */
        public Builder interfaceAddress(String interfaceAddress) {
            return interfaceAddress(Output.of(interfaceAddress));
        }

        public Builder ipsecTunnel(@Nullable Output<MagicWanIpsecTunnelIpsecTunnelArgs> ipsecTunnel) {
            $.ipsecTunnel = ipsecTunnel;
            return this;
        }

        public Builder ipsecTunnel(MagicWanIpsecTunnelIpsecTunnelArgs ipsecTunnel) {
            return ipsecTunnel(Output.of(ipsecTunnel));
        }

        /**
         * @param ipsecTunnelId Identifier
         * 
         * @return builder
         * 
         */
        public Builder ipsecTunnelId(@Nullable Output<String> ipsecTunnelId) {
            $.ipsecTunnelId = ipsecTunnelId;
            return this;
        }

        /**
         * @param ipsecTunnelId Identifier
         * 
         * @return builder
         * 
         */
        public Builder ipsecTunnelId(String ipsecTunnelId) {
            return ipsecTunnelId(Output.of(ipsecTunnelId));
        }

        public Builder ipsecTunnels(@Nullable Output<List<MagicWanIpsecTunnelIpsecTunnelArgs>> ipsecTunnels) {
            $.ipsecTunnels = ipsecTunnels;
            return this;
        }

        public Builder ipsecTunnels(List<MagicWanIpsecTunnelIpsecTunnelArgs> ipsecTunnels) {
            return ipsecTunnels(Output.of(ipsecTunnels));
        }

        public Builder ipsecTunnels(MagicWanIpsecTunnelIpsecTunnelArgs... ipsecTunnels) {
            return ipsecTunnels(List.of(ipsecTunnels));
        }

        public Builder modified(@Nullable Output<Boolean> modified) {
            $.modified = modified;
            return this;
        }

        public Builder modified(Boolean modified) {
            return modified(Output.of(modified));
        }

        public Builder modifiedIpsecTunnel(@Nullable Output<MagicWanIpsecTunnelModifiedIpsecTunnelArgs> modifiedIpsecTunnel) {
            $.modifiedIpsecTunnel = modifiedIpsecTunnel;
            return this;
        }

        public Builder modifiedIpsecTunnel(MagicWanIpsecTunnelModifiedIpsecTunnelArgs modifiedIpsecTunnel) {
            return modifiedIpsecTunnel(Output.of(modifiedIpsecTunnel));
        }

        /**
         * @param name The name of the IPsec tunnel. The name cannot share a name with other tunnels.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the IPsec tunnel. The name cannot share a name with other tunnels.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param psk A randomly generated or provided string for use in the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder psk(@Nullable Output<String> psk) {
            $.psk = psk;
            return this;
        }

        /**
         * @param psk A randomly generated or provided string for use in the IPsec tunnel.
         * 
         * @return builder
         * 
         */
        public Builder psk(String psk) {
            return psk(Output.of(psk));
        }

        /**
         * @param replayProtection If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
         * 
         * @return builder
         * 
         */
        public Builder replayProtection(@Nullable Output<Boolean> replayProtection) {
            $.replayProtection = replayProtection;
            return this;
        }

        /**
         * @param replayProtection If `true`, then IPsec replay protection will be supported in the Cloudflare-to-customer direction.
         * 
         * @return builder
         * 
         */
        public Builder replayProtection(Boolean replayProtection) {
            return replayProtection(Output.of(replayProtection));
        }

        public MagicWanIpsecTunnelState build() {
            return $;
        }
    }

}
