// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicTransitSiteLanStaticAddressingDhcpRelayArgs;
import com.pulumi.cloudflare.inputs.MagicTransitSiteLanStaticAddressingDhcpServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteLanStaticAddressingArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteLanStaticAddressingArgs Empty = new MagicTransitSiteLanStaticAddressingArgs();

    /**
     * A valid CIDR notation representing an IP range.
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    @Import(name="dhcpRelay")
    private @Nullable Output<MagicTransitSiteLanStaticAddressingDhcpRelayArgs> dhcpRelay;

    public Optional<Output<MagicTransitSiteLanStaticAddressingDhcpRelayArgs>> dhcpRelay() {
        return Optional.ofNullable(this.dhcpRelay);
    }

    @Import(name="dhcpServer")
    private @Nullable Output<MagicTransitSiteLanStaticAddressingDhcpServerArgs> dhcpServer;

    public Optional<Output<MagicTransitSiteLanStaticAddressingDhcpServerArgs>> dhcpServer() {
        return Optional.ofNullable(this.dhcpServer);
    }

    /**
     * A valid CIDR notation representing an IP range.
     * 
     */
    @Import(name="secondaryAddress")
    private @Nullable Output<String> secondaryAddress;

    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Optional<Output<String>> secondaryAddress() {
        return Optional.ofNullable(this.secondaryAddress);
    }

    /**
     * A valid CIDR notation representing an IP range.
     * 
     */
    @Import(name="virtualAddress")
    private @Nullable Output<String> virtualAddress;

    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public Optional<Output<String>> virtualAddress() {
        return Optional.ofNullable(this.virtualAddress);
    }

    private MagicTransitSiteLanStaticAddressingArgs() {}

    private MagicTransitSiteLanStaticAddressingArgs(MagicTransitSiteLanStaticAddressingArgs $) {
        this.address = $.address;
        this.dhcpRelay = $.dhcpRelay;
        this.dhcpServer = $.dhcpServer;
        this.secondaryAddress = $.secondaryAddress;
        this.virtualAddress = $.virtualAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteLanStaticAddressingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteLanStaticAddressingArgs $;

        public Builder() {
            $ = new MagicTransitSiteLanStaticAddressingArgs();
        }

        public Builder(MagicTransitSiteLanStaticAddressingArgs defaults) {
            $ = new MagicTransitSiteLanStaticAddressingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        public Builder dhcpRelay(@Nullable Output<MagicTransitSiteLanStaticAddressingDhcpRelayArgs> dhcpRelay) {
            $.dhcpRelay = dhcpRelay;
            return this;
        }

        public Builder dhcpRelay(MagicTransitSiteLanStaticAddressingDhcpRelayArgs dhcpRelay) {
            return dhcpRelay(Output.of(dhcpRelay));
        }

        public Builder dhcpServer(@Nullable Output<MagicTransitSiteLanStaticAddressingDhcpServerArgs> dhcpServer) {
            $.dhcpServer = dhcpServer;
            return this;
        }

        public Builder dhcpServer(MagicTransitSiteLanStaticAddressingDhcpServerArgs dhcpServer) {
            return dhcpServer(Output.of(dhcpServer));
        }

        /**
         * @param secondaryAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAddress(@Nullable Output<String> secondaryAddress) {
            $.secondaryAddress = secondaryAddress;
            return this;
        }

        /**
         * @param secondaryAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder secondaryAddress(String secondaryAddress) {
            return secondaryAddress(Output.of(secondaryAddress));
        }

        /**
         * @param virtualAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder virtualAddress(@Nullable Output<String> virtualAddress) {
            $.virtualAddress = virtualAddress;
            return this;
        }

        /**
         * @param virtualAddress A valid CIDR notation representing an IP range.
         * 
         * @return builder
         * 
         */
        public Builder virtualAddress(String virtualAddress) {
            return virtualAddress(Output.of(virtualAddress));
        }

        public MagicTransitSiteLanStaticAddressingArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteLanStaticAddressingArgs", "address");
            }
            return $;
        }
    }

}
