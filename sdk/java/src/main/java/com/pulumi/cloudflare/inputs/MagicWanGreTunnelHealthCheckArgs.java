// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.MagicWanGreTunnelHealthCheckTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicWanGreTunnelHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicWanGreTunnelHealthCheckArgs Empty = new MagicWanGreTunnelHealthCheckArgs();

    /**
     * The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Determines whether to run healthchecks for a tunnel.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Determines whether to run healthchecks for a tunnel.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * How frequent the health check is run. The default value is `mid`.
     * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
     * 
     */
    @Import(name="rate")
    private @Nullable Output<String> rate;

    /**
     * @return How frequent the health check is run. The default value is `mid`.
     * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
     * 
     */
    public Optional<Output<String>> rate() {
        return Optional.ofNullable(this.rate);
    }

    /**
     * The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    @Import(name="target")
    private @Nullable Output<MagicWanGreTunnelHealthCheckTargetArgs> target;

    /**
     * @return The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    public Optional<Output<MagicWanGreTunnelHealthCheckTargetArgs>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The type of healthcheck to run, reply or request. The default value is `reply`.
     * Available values: &#34;reply&#34;, &#34;request&#34;.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of healthcheck to run, reply or request. The default value is `reply`.
     * Available values: &#34;reply&#34;, &#34;request&#34;.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private MagicWanGreTunnelHealthCheckArgs() {}

    private MagicWanGreTunnelHealthCheckArgs(MagicWanGreTunnelHealthCheckArgs $) {
        this.direction = $.direction;
        this.enabled = $.enabled;
        this.rate = $.rate;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicWanGreTunnelHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicWanGreTunnelHealthCheckArgs $;

        public Builder() {
            $ = new MagicWanGreTunnelHealthCheckArgs();
        }

        public Builder(MagicWanGreTunnelHealthCheckArgs defaults) {
            $ = new MagicWanGreTunnelHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
         * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
         * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param enabled Determines whether to run healthchecks for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Determines whether to run healthchecks for a tunnel.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param rate How frequent the health check is run. The default value is `mid`.
         * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rate(@Nullable Output<String> rate) {
            $.rate = rate;
            return this;
        }

        /**
         * @param rate How frequent the health check is run. The default value is `mid`.
         * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
         * 
         * @return builder
         * 
         */
        public Builder rate(String rate) {
            return rate(Output.of(rate));
        }

        /**
         * @param target The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable Output<MagicWanGreTunnelHealthCheckTargetArgs> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
         * 
         * @return builder
         * 
         */
        public Builder target(MagicWanGreTunnelHealthCheckTargetArgs target) {
            return target(Output.of(target));
        }

        /**
         * @param type The type of healthcheck to run, reply or request. The default value is `reply`.
         * Available values: &#34;reply&#34;, &#34;request&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of healthcheck to run, reply or request. The default value is `reply`.
         * Available values: &#34;reply&#34;, &#34;request&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MagicWanGreTunnelHealthCheckArgs build() {
            return $;
        }
    }

}
