// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetLoadBalancerPoolFilter;
import com.pulumi.cloudflare.outputs.GetLoadBalancerPoolLoadShedding;
import com.pulumi.cloudflare.outputs.GetLoadBalancerPoolNotificationFilter;
import com.pulumi.cloudflare.outputs.GetLoadBalancerPoolOrigin;
import com.pulumi.cloudflare.outputs.GetLoadBalancerPoolOriginSteering;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetLoadBalancerPoolResult {
    /**
     * @return Identifier.
     * 
     */
    private String accountId;
    /**
     * @return A list of regions from which to run health checks. Null means every Cloudflare data center.
     * 
     */
    private List<String> checkRegions;
    private String createdOn;
    /**
     * @return A human-readable description of the pool.
     * 
     */
    private String description;
    /**
     * @return This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     * 
     */
    private String disabledAt;
    /**
     * @return Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     * 
     */
    private Boolean enabled;
    private @Nullable GetLoadBalancerPoolFilter filter;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     * 
     */
    private Double latitude;
    /**
     * @return Configures load shedding policies and percentages for the pool.
     * 
     */
    private GetLoadBalancerPoolLoadShedding loadShedding;
    /**
     * @return The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     * 
     */
    private Double longitude;
    /**
     * @return The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     * 
     */
    private Integer minimumOrigins;
    private String modifiedOn;
    /**
     * @return The ID of the Monitor to use for checking the health of origins within this pool.
     * 
     */
    private String monitor;
    /**
     * @return The ID of the Monitor Group to use for checking the health of origins within this pool.
     * 
     */
    private String monitorGroup;
    /**
     * @return A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     * 
     */
    private String name;
    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    private List<String> networks;
    /**
     * @return This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     * 
     */
    private String notificationEmail;
    /**
     * @return Filter pool and origin health notifications by resource type or health status. Use null to reset.
     * 
     */
    private GetLoadBalancerPoolNotificationFilter notificationFilter;
    /**
     * @return Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     * 
     */
    private GetLoadBalancerPoolOriginSteering originSteering;
    /**
     * @return The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     * 
     */
    private List<GetLoadBalancerPoolOrigin> origins;
    private @Nullable String poolId;

    private GetLoadBalancerPoolResult() {}
    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return A list of regions from which to run health checks. Null means every Cloudflare data center.
     * 
     */
    public List<String> checkRegions() {
        return this.checkRegions;
    }
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return A human-readable description of the pool.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return This field shows up only if the pool is disabled. This field is set with the time the pool was disabled at.
     * 
     */
    public String disabledAt() {
        return this.disabledAt;
    }
    /**
     * @return Whether to enable (the default) or disable this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any).
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    public Optional<GetLoadBalancerPoolFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The latitude of the data center containing the origins used in this pool in decimal degrees. If this is set, longitude must also be set.
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return Configures load shedding policies and percentages for the pool.
     * 
     */
    public GetLoadBalancerPoolLoadShedding loadShedding() {
        return this.loadShedding;
    }
    /**
     * @return The longitude of the data center containing the origins used in this pool in decimal degrees. If this is set, latitude must also be set.
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and will failover to the next available pool.
     * 
     */
    public Integer minimumOrigins() {
        return this.minimumOrigins;
    }
    public String modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * @return The ID of the Monitor to use for checking the health of origins within this pool.
     * 
     */
    public String monitor() {
        return this.monitor;
    }
    /**
     * @return The ID of the Monitor Group to use for checking the health of origins within this pool.
     * 
     */
    public String monitorGroup() {
        return this.monitorGroup;
    }
    /**
     * @return A short name (tag) for the pool. Only alphanumeric characters, hyphens, and underscores are allowed.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of networks where Load Balancer or Pool is enabled.
     * 
     */
    public List<String> networks() {
        return this.networks;
    }
    /**
     * @return This field is now deprecated. It has been moved to Cloudflare&#39;s Centralized Notification service https://developers.cloudflare.com/fundamentals/notifications/. The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     * 
     */
    public String notificationEmail() {
        return this.notificationEmail;
    }
    /**
     * @return Filter pool and origin health notifications by resource type or health status. Use null to reset.
     * 
     */
    public GetLoadBalancerPoolNotificationFilter notificationFilter() {
        return this.notificationFilter;
    }
    /**
     * @return Configures origin steering for the pool. Controls how origins are selected for new sessions and traffic without session affinity.
     * 
     */
    public GetLoadBalancerPoolOriginSteering originSteering() {
        return this.originSteering;
    }
    /**
     * @return The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     * 
     */
    public List<GetLoadBalancerPoolOrigin> origins() {
        return this.origins;
    }
    public Optional<String> poolId() {
        return Optional.ofNullable(this.poolId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<String> checkRegions;
        private String createdOn;
        private String description;
        private String disabledAt;
        private Boolean enabled;
        private @Nullable GetLoadBalancerPoolFilter filter;
        private String id;
        private Double latitude;
        private GetLoadBalancerPoolLoadShedding loadShedding;
        private Double longitude;
        private Integer minimumOrigins;
        private String modifiedOn;
        private String monitor;
        private String monitorGroup;
        private String name;
        private List<String> networks;
        private String notificationEmail;
        private GetLoadBalancerPoolNotificationFilter notificationFilter;
        private GetLoadBalancerPoolOriginSteering originSteering;
        private List<GetLoadBalancerPoolOrigin> origins;
        private @Nullable String poolId;
        public Builder() {}
        public Builder(GetLoadBalancerPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.checkRegions = defaults.checkRegions;
    	      this.createdOn = defaults.createdOn;
    	      this.description = defaults.description;
    	      this.disabledAt = defaults.disabledAt;
    	      this.enabled = defaults.enabled;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.latitude = defaults.latitude;
    	      this.loadShedding = defaults.loadShedding;
    	      this.longitude = defaults.longitude;
    	      this.minimumOrigins = defaults.minimumOrigins;
    	      this.modifiedOn = defaults.modifiedOn;
    	      this.monitor = defaults.monitor;
    	      this.monitorGroup = defaults.monitorGroup;
    	      this.name = defaults.name;
    	      this.networks = defaults.networks;
    	      this.notificationEmail = defaults.notificationEmail;
    	      this.notificationFilter = defaults.notificationFilter;
    	      this.originSteering = defaults.originSteering;
    	      this.origins = defaults.origins;
    	      this.poolId = defaults.poolId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder checkRegions(List<String> checkRegions) {
            if (checkRegions == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "checkRegions");
            }
            this.checkRegions = checkRegions;
            return this;
        }
        public Builder checkRegions(String... checkRegions) {
            return checkRegions(List.of(checkRegions));
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabledAt(String disabledAt) {
            if (disabledAt == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "disabledAt");
            }
            this.disabledAt = disabledAt;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetLoadBalancerPoolFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder latitude(Double latitude) {
            if (latitude == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "latitude");
            }
            this.latitude = latitude;
            return this;
        }
        @CustomType.Setter
        public Builder loadShedding(GetLoadBalancerPoolLoadShedding loadShedding) {
            if (loadShedding == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "loadShedding");
            }
            this.loadShedding = loadShedding;
            return this;
        }
        @CustomType.Setter
        public Builder longitude(Double longitude) {
            if (longitude == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "longitude");
            }
            this.longitude = longitude;
            return this;
        }
        @CustomType.Setter
        public Builder minimumOrigins(Integer minimumOrigins) {
            if (minimumOrigins == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "minimumOrigins");
            }
            this.minimumOrigins = minimumOrigins;
            return this;
        }
        @CustomType.Setter
        public Builder modifiedOn(String modifiedOn) {
            if (modifiedOn == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "modifiedOn");
            }
            this.modifiedOn = modifiedOn;
            return this;
        }
        @CustomType.Setter
        public Builder monitor(String monitor) {
            if (monitor == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "monitor");
            }
            this.monitor = monitor;
            return this;
        }
        @CustomType.Setter
        public Builder monitorGroup(String monitorGroup) {
            if (monitorGroup == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "monitorGroup");
            }
            this.monitorGroup = monitorGroup;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networks(List<String> networks) {
            if (networks == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "networks");
            }
            this.networks = networks;
            return this;
        }
        public Builder networks(String... networks) {
            return networks(List.of(networks));
        }
        @CustomType.Setter
        public Builder notificationEmail(String notificationEmail) {
            if (notificationEmail == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "notificationEmail");
            }
            this.notificationEmail = notificationEmail;
            return this;
        }
        @CustomType.Setter
        public Builder notificationFilter(GetLoadBalancerPoolNotificationFilter notificationFilter) {
            if (notificationFilter == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "notificationFilter");
            }
            this.notificationFilter = notificationFilter;
            return this;
        }
        @CustomType.Setter
        public Builder originSteering(GetLoadBalancerPoolOriginSteering originSteering) {
            if (originSteering == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "originSteering");
            }
            this.originSteering = originSteering;
            return this;
        }
        @CustomType.Setter
        public Builder origins(List<GetLoadBalancerPoolOrigin> origins) {
            if (origins == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerPoolResult", "origins");
            }
            this.origins = origins;
            return this;
        }
        public Builder origins(GetLoadBalancerPoolOrigin... origins) {
            return origins(List.of(origins));
        }
        @CustomType.Setter
        public Builder poolId(@Nullable String poolId) {

            this.poolId = poolId;
            return this;
        }
        public GetLoadBalancerPoolResult build() {
            final var _resultValue = new GetLoadBalancerPoolResult();
            _resultValue.accountId = accountId;
            _resultValue.checkRegions = checkRegions;
            _resultValue.createdOn = createdOn;
            _resultValue.description = description;
            _resultValue.disabledAt = disabledAt;
            _resultValue.enabled = enabled;
            _resultValue.filter = filter;
            _resultValue.id = id;
            _resultValue.latitude = latitude;
            _resultValue.loadShedding = loadShedding;
            _resultValue.longitude = longitude;
            _resultValue.minimumOrigins = minimumOrigins;
            _resultValue.modifiedOn = modifiedOn;
            _resultValue.monitor = monitor;
            _resultValue.monitorGroup = monitorGroup;
            _resultValue.name = name;
            _resultValue.networks = networks;
            _resultValue.notificationEmail = notificationEmail;
            _resultValue.notificationFilter = notificationFilter;
            _resultValue.originSteering = originSteering;
            _resultValue.origins = origins;
            _resultValue.poolId = poolId;
            return _resultValue;
        }
    }
}
