// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicWanIpsecTunnelIpsecTunnelHealthCheckTarget;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicWanIpsecTunnelIpsecTunnelHealthCheck {
    /**
     * @return The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
     * 
     */
    private String direction;
    /**
     * @return Determines whether to run healthchecks for a tunnel.
     * 
     */
    private Boolean enabled;
    /**
     * @return How frequent the health check is run. The default value is `mid`.
     * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
     * 
     */
    private String rate;
    /**
     * @return The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    private GetMagicWanIpsecTunnelIpsecTunnelHealthCheckTarget target;
    /**
     * @return The type of healthcheck to run, reply or request. The default value is `reply`.
     * Available values: &#34;reply&#34;, &#34;request&#34;.
     * 
     */
    private String type;

    private GetMagicWanIpsecTunnelIpsecTunnelHealthCheck() {}
    /**
     * @return The direction of the flow of the healthcheck. Either unidirectional, where the probe comes to you via the tunnel and the result comes back to Cloudflare via the open Internet, or bidirectional where both the probe and result come and go via the tunnel.
     * Available values: &#34;unidirectional&#34;, &#34;bidirectional&#34;.
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return Determines whether to run healthchecks for a tunnel.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return How frequent the health check is run. The default value is `mid`.
     * Available values: &#34;low&#34;, &#34;mid&#34;, &#34;high&#34;.
     * 
     */
    public String rate() {
        return this.rate;
    }
    /**
     * @return The destination address in a request type health check. After the healthcheck is decapsulated at the customer end of the tunnel, the ICMP echo will be forwarded to this address. This field defaults to `customer_gre_endpoint address`. This field is ignored for bidirectional healthchecks as the interface*address (not assigned to the Cloudflare side of the tunnel) is used as the target. Must be in object form if the x-magic-new-hc-target header is set to true and string form if x-magic-new-hc-target is absent or set to false.
     * 
     */
    public GetMagicWanIpsecTunnelIpsecTunnelHealthCheckTarget target() {
        return this.target;
    }
    /**
     * @return The type of healthcheck to run, reply or request. The default value is `reply`.
     * Available values: &#34;reply&#34;, &#34;request&#34;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicWanIpsecTunnelIpsecTunnelHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String direction;
        private Boolean enabled;
        private String rate;
        private GetMagicWanIpsecTunnelIpsecTunnelHealthCheckTarget target;
        private String type;
        public Builder() {}
        public Builder(GetMagicWanIpsecTunnelIpsecTunnelHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.direction = defaults.direction;
    	      this.enabled = defaults.enabled;
    	      this.rate = defaults.rate;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnelHealthCheck", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnelHealthCheck", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder rate(String rate) {
            if (rate == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnelHealthCheck", "rate");
            }
            this.rate = rate;
            return this;
        }
        @CustomType.Setter
        public Builder target(GetMagicWanIpsecTunnelIpsecTunnelHealthCheckTarget target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnelHealthCheck", "target");
            }
            this.target = target;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetMagicWanIpsecTunnelIpsecTunnelHealthCheck", "type");
            }
            this.type = type;
            return this;
        }
        public GetMagicWanIpsecTunnelIpsecTunnelHealthCheck build() {
            final var _resultValue = new GetMagicWanIpsecTunnelIpsecTunnelHealthCheck();
            _resultValue.direction = direction;
            _resultValue.enabled = enabled;
            _resultValue.rate = rate;
            _resultValue.target = target;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
