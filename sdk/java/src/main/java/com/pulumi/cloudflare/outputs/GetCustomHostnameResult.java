// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetCustomHostnameFilter;
import com.pulumi.cloudflare.outputs.GetCustomHostnameOwnershipVerification;
import com.pulumi.cloudflare.outputs.GetCustomHostnameOwnershipVerificationHttp;
import com.pulumi.cloudflare.outputs.GetCustomHostnameSsl;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCustomHostnameResult {
    /**
     * @return This is the time the hostname was created.
     * 
     */
    private String createdAt;
    /**
     * @return Identifier.
     * 
     */
    private @Nullable String customHostnameId;
    /**
     * @return Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    private Map<String,String> customMetadata;
    /**
     * @return a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    private String customOriginServer;
    /**
     * @return A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    private String customOriginSni;
    private @Nullable GetCustomHostnameFilter filter;
    /**
     * @return The custom hostname that will point to your hostname via CNAME.
     * 
     */
    private String hostname;
    /**
     * @return Identifier.
     * 
     */
    private String id;
    /**
     * @return This is a record which can be placed to activate a hostname.
     * 
     */
    private GetCustomHostnameOwnershipVerification ownershipVerification;
    /**
     * @return This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    private GetCustomHostnameOwnershipVerificationHttp ownershipVerificationHttp;
    private GetCustomHostnameSsl ssl;
    /**
     * @return Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;active*redeploying&#34;, &#34;moved&#34;, &#34;pending*deletion&#34;, &#34;deleted&#34;, &#34;pending*blocked&#34;, &#34;pending*migration&#34;, &#34;pending*provisioned&#34;, &#34;test*pending&#34;, &#34;test*active&#34;, &#34;test*active*apex&#34;, &#34;test*blocked&#34;, &#34;test_failed&#34;, &#34;provisioned&#34;, &#34;blocked&#34;.
     * 
     */
    private String status;
    /**
     * @return These are errors that were encountered while trying to activate a hostname.
     * 
     */
    private List<String> verificationErrors;
    /**
     * @return Identifier.
     * 
     */
    private String zoneId;

    private GetCustomHostnameResult() {}
    /**
     * @return This is the time the hostname was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Identifier.
     * 
     */
    public Optional<String> customHostnameId() {
        return Optional.ofNullable(this.customHostnameId);
    }
    /**
     * @return Unique key/value metadata for this hostname. These are per-hostname (customer) settings.
     * 
     */
    public Map<String,String> customMetadata() {
        return this.customMetadata;
    }
    /**
     * @return a valid hostname that’s been added to your DNS zone as an A, AAAA, or CNAME record.
     * 
     */
    public String customOriginServer() {
        return this.customOriginServer;
    }
    /**
     * @return A hostname that will be sent to your custom origin server as SNI for TLS handshake. This can be a valid subdomain of the zone or custom origin server name or the string &#39;:request*host*header:&#39; which will cause the host header in the request to be used as SNI. Not configurable with default/fallback origin server.
     * 
     */
    public String customOriginSni() {
        return this.customOriginSni;
    }
    public Optional<GetCustomHostnameFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return The custom hostname that will point to your hostname via CNAME.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return This is a record which can be placed to activate a hostname.
     * 
     */
    public GetCustomHostnameOwnershipVerification ownershipVerification() {
        return this.ownershipVerification;
    }
    /**
     * @return This presents the token to be served by the given http url to activate a hostname.
     * 
     */
    public GetCustomHostnameOwnershipVerificationHttp ownershipVerificationHttp() {
        return this.ownershipVerificationHttp;
    }
    public GetCustomHostnameSsl ssl() {
        return this.ssl;
    }
    /**
     * @return Status of the hostname&#39;s activation.
     * Available values: &#34;active&#34;, &#34;pending&#34;, &#34;active*redeploying&#34;, &#34;moved&#34;, &#34;pending*deletion&#34;, &#34;deleted&#34;, &#34;pending*blocked&#34;, &#34;pending*migration&#34;, &#34;pending*provisioned&#34;, &#34;test*pending&#34;, &#34;test*active&#34;, &#34;test*active*apex&#34;, &#34;test*blocked&#34;, &#34;test_failed&#34;, &#34;provisioned&#34;, &#34;blocked&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return These are errors that were encountered while trying to activate a hostname.
     * 
     */
    public List<String> verificationErrors() {
        return this.verificationErrors;
    }
    /**
     * @return Identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomHostnameResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private @Nullable String customHostnameId;
        private Map<String,String> customMetadata;
        private String customOriginServer;
        private String customOriginSni;
        private @Nullable GetCustomHostnameFilter filter;
        private String hostname;
        private String id;
        private GetCustomHostnameOwnershipVerification ownershipVerification;
        private GetCustomHostnameOwnershipVerificationHttp ownershipVerificationHttp;
        private GetCustomHostnameSsl ssl;
        private String status;
        private List<String> verificationErrors;
        private String zoneId;
        public Builder() {}
        public Builder(GetCustomHostnameResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.customHostnameId = defaults.customHostnameId;
    	      this.customMetadata = defaults.customMetadata;
    	      this.customOriginServer = defaults.customOriginServer;
    	      this.customOriginSni = defaults.customOriginSni;
    	      this.filter = defaults.filter;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.ownershipVerification = defaults.ownershipVerification;
    	      this.ownershipVerificationHttp = defaults.ownershipVerificationHttp;
    	      this.ssl = defaults.ssl;
    	      this.status = defaults.status;
    	      this.verificationErrors = defaults.verificationErrors;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customHostnameId(@Nullable String customHostnameId) {

            this.customHostnameId = customHostnameId;
            return this;
        }
        @CustomType.Setter
        public Builder customMetadata(Map<String,String> customMetadata) {
            if (customMetadata == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "customMetadata");
            }
            this.customMetadata = customMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder customOriginServer(String customOriginServer) {
            if (customOriginServer == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "customOriginServer");
            }
            this.customOriginServer = customOriginServer;
            return this;
        }
        @CustomType.Setter
        public Builder customOriginSni(String customOriginSni) {
            if (customOriginSni == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "customOriginSni");
            }
            this.customOriginSni = customOriginSni;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable GetCustomHostnameFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ownershipVerification(GetCustomHostnameOwnershipVerification ownershipVerification) {
            if (ownershipVerification == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "ownershipVerification");
            }
            this.ownershipVerification = ownershipVerification;
            return this;
        }
        @CustomType.Setter
        public Builder ownershipVerificationHttp(GetCustomHostnameOwnershipVerificationHttp ownershipVerificationHttp) {
            if (ownershipVerificationHttp == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "ownershipVerificationHttp");
            }
            this.ownershipVerificationHttp = ownershipVerificationHttp;
            return this;
        }
        @CustomType.Setter
        public Builder ssl(GetCustomHostnameSsl ssl) {
            if (ssl == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "ssl");
            }
            this.ssl = ssl;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder verificationErrors(List<String> verificationErrors) {
            if (verificationErrors == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "verificationErrors");
            }
            this.verificationErrors = verificationErrors;
            return this;
        }
        public Builder verificationErrors(String... verificationErrors) {
            return verificationErrors(List.of(verificationErrors));
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetCustomHostnameResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetCustomHostnameResult build() {
            final var _resultValue = new GetCustomHostnameResult();
            _resultValue.createdAt = createdAt;
            _resultValue.customHostnameId = customHostnameId;
            _resultValue.customMetadata = customMetadata;
            _resultValue.customOriginServer = customOriginServer;
            _resultValue.customOriginSni = customOriginSni;
            _resultValue.filter = filter;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.ownershipVerification = ownershipVerification;
            _resultValue.ownershipVerificationHttp = ownershipVerificationHttp;
            _resultValue.ssl = ssl;
            _resultValue.status = status;
            _resultValue.verificationErrors = verificationErrors;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
