// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ImageVariantOptionsArgs;
import com.pulumi.cloudflare.inputs.ImageVariantVariantArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageVariantState extends com.pulumi.resources.ResourceArgs {

    public static final ImageVariantState Empty = new ImageVariantState();

    /**
     * Account identifier tag.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Account identifier tag.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    @Import(name="neverRequireSignedUrls")
    private @Nullable Output<Boolean> neverRequireSignedUrls;

    /**
     * @return Indicates whether the variant can access an image without a signature, regardless of image access control.
     * 
     */
    public Optional<Output<Boolean>> neverRequireSignedUrls() {
        return Optional.ofNullable(this.neverRequireSignedUrls);
    }

    /**
     * Allows you to define image resizing sizes for different use cases.
     * 
     */
    @Import(name="options")
    private @Nullable Output<ImageVariantOptionsArgs> options;

    /**
     * @return Allows you to define image resizing sizes for different use cases.
     * 
     */
    public Optional<Output<ImageVariantOptionsArgs>> options() {
        return Optional.ofNullable(this.options);
    }

    @Import(name="variant")
    private @Nullable Output<ImageVariantVariantArgs> variant;

    public Optional<Output<ImageVariantVariantArgs>> variant() {
        return Optional.ofNullable(this.variant);
    }

    private ImageVariantState() {}

    private ImageVariantState(ImageVariantState $) {
        this.accountId = $.accountId;
        this.neverRequireSignedUrls = $.neverRequireSignedUrls;
        this.options = $.options;
        this.variant = $.variant;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageVariantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageVariantState $;

        public Builder() {
            $ = new ImageVariantState();
        }

        public Builder(ImageVariantState defaults) {
            $ = new ImageVariantState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(@Nullable Output<Boolean> neverRequireSignedUrls) {
            $.neverRequireSignedUrls = neverRequireSignedUrls;
            return this;
        }

        /**
         * @param neverRequireSignedUrls Indicates whether the variant can access an image without a signature, regardless of image access control.
         * 
         * @return builder
         * 
         */
        public Builder neverRequireSignedUrls(Boolean neverRequireSignedUrls) {
            return neverRequireSignedUrls(Output.of(neverRequireSignedUrls));
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<ImageVariantOptionsArgs> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Allows you to define image resizing sizes for different use cases.
         * 
         * @return builder
         * 
         */
        public Builder options(ImageVariantOptionsArgs options) {
            return options(Output.of(options));
        }

        public Builder variant(@Nullable Output<ImageVariantVariantArgs> variant) {
            $.variant = variant;
            return this;
        }

        public Builder variant(ImageVariantVariantArgs variant) {
            return variant(Output.of(variant));
        }

        public ImageVariantState build() {
            return $;
        }
    }

}
