// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccountMemberUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccountMemberUserArgs Empty = new AccountMemberUserArgs();

    /**
     * The contact email address of the user.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The contact email address of the user.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * User&#39;s first name
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return User&#39;s first name
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * User&#39;s last name
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return User&#39;s last name
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    @Import(name="twoFactorAuthenticationEnabled")
    private @Nullable Output<Boolean> twoFactorAuthenticationEnabled;

    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    public Optional<Output<Boolean>> twoFactorAuthenticationEnabled() {
        return Optional.ofNullable(this.twoFactorAuthenticationEnabled);
    }

    private AccountMemberUserArgs() {}

    private AccountMemberUserArgs(AccountMemberUserArgs $) {
        this.email = $.email;
        this.firstName = $.firstName;
        this.id = $.id;
        this.lastName = $.lastName;
        this.twoFactorAuthenticationEnabled = $.twoFactorAuthenticationEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountMemberUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountMemberUserArgs $;

        public Builder() {
            $ = new AccountMemberUserArgs();
        }

        public Builder(AccountMemberUserArgs defaults) {
            $ = new AccountMemberUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The contact email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The contact email address of the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User&#39;s first name
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User&#39;s last name
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param twoFactorAuthenticationEnabled Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationEnabled(@Nullable Output<Boolean> twoFactorAuthenticationEnabled) {
            $.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            return this;
        }

        /**
         * @param twoFactorAuthenticationEnabled Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
         * 
         * @return builder
         * 
         */
        public Builder twoFactorAuthenticationEnabled(Boolean twoFactorAuthenticationEnabled) {
            return twoFactorAuthenticationEnabled(Output.of(twoFactorAuthenticationEnabled));
        }

        public AccountMemberUserArgs build() {
            return $;
        }
    }

}
