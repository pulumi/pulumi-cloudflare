// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRateLimitsResultAction;
import com.pulumi.cloudflare.outputs.GetRateLimitsResultBypass;
import com.pulumi.cloudflare.outputs.GetRateLimitsResultMatch;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRateLimitsResult {
    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    private GetRateLimitsResultAction action;
    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    private List<GetRateLimitsResultBypass> bypasses;
    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    private String description;
    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    private Boolean disabled;
    /**
     * @return The unique identifier of the rate limit.
     * 
     */
    private String id;
    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    private GetRateLimitsResultMatch match;
    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    private Double period;
    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    private Double threshold;

    private GetRateLimitsResult() {}
    /**
     * @return The action to perform when the threshold of matched traffic within the configured period is exceeded.
     * 
     */
    public GetRateLimitsResultAction action() {
        return this.action;
    }
    /**
     * @return Criteria specifying when the current rate limit should be bypassed. You can specify that the rate limit should not apply to one or more URLs.
     * 
     */
    public List<GetRateLimitsResultBypass> bypasses() {
        return this.bypasses;
    }
    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return When true, indicates that the rate limit is currently disabled.
     * 
     */
    public Boolean disabled() {
        return this.disabled;
    }
    /**
     * @return The unique identifier of the rate limit.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Determines which traffic the rate limit counts towards the threshold.
     * 
     */
    public GetRateLimitsResultMatch match() {
        return this.match;
    }
    /**
     * @return The time in seconds (an integer value) to count matching traffic. If the count exceeds the configured threshold within this period, Cloudflare will perform the configured action.
     * 
     */
    public Double period() {
        return this.period;
    }
    /**
     * @return The threshold that will trigger the configured mitigation action. Configure this value along with the `period` property to establish a threshold per period.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRateLimitsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetRateLimitsResultAction action;
        private List<GetRateLimitsResultBypass> bypasses;
        private String description;
        private Boolean disabled;
        private String id;
        private GetRateLimitsResultMatch match;
        private Double period;
        private Double threshold;
        public Builder() {}
        public Builder(GetRateLimitsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.bypasses = defaults.bypasses;
    	      this.description = defaults.description;
    	      this.disabled = defaults.disabled;
    	      this.id = defaults.id;
    	      this.match = defaults.match;
    	      this.period = defaults.period;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder action(GetRateLimitsResultAction action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder bypasses(List<GetRateLimitsResultBypass> bypasses) {
            if (bypasses == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "bypasses");
            }
            this.bypasses = bypasses;
            return this;
        }
        public Builder bypasses(GetRateLimitsResultBypass... bypasses) {
            return bypasses(List.of(bypasses));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabled(Boolean disabled) {
            if (disabled == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "disabled");
            }
            this.disabled = disabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder match(GetRateLimitsResultMatch match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder period(Double period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetRateLimitsResult", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetRateLimitsResult build() {
            final var _resultValue = new GetRateLimitsResult();
            _resultValue.action = action;
            _resultValue.bypasses = bypasses;
            _resultValue.description = description;
            _resultValue.disabled = disabled;
            _resultValue.id = id;
            _resultValue.match = match;
            _resultValue.period = period;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
