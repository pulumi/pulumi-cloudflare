// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.WorkersScriptObservabilityLogsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersScriptObservabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersScriptObservabilityArgs Empty = new WorkersScriptObservabilityArgs();

    /**
     * Whether observability is enabled for the Worker.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether observability is enabled for the Worker.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
     * 
     */
    @Import(name="headSamplingRate")
    private @Nullable Output<Double> headSamplingRate;

    /**
     * @return The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
     * 
     */
    public Optional<Output<Double>> headSamplingRate() {
        return Optional.ofNullable(this.headSamplingRate);
    }

    /**
     * Log settings for the Worker.
     * 
     */
    @Import(name="logs")
    private @Nullable Output<WorkersScriptObservabilityLogsArgs> logs;

    /**
     * @return Log settings for the Worker.
     * 
     */
    public Optional<Output<WorkersScriptObservabilityLogsArgs>> logs() {
        return Optional.ofNullable(this.logs);
    }

    private WorkersScriptObservabilityArgs() {}

    private WorkersScriptObservabilityArgs(WorkersScriptObservabilityArgs $) {
        this.enabled = $.enabled;
        this.headSamplingRate = $.headSamplingRate;
        this.logs = $.logs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersScriptObservabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersScriptObservabilityArgs $;

        public Builder() {
            $ = new WorkersScriptObservabilityArgs();
        }

        public Builder(WorkersScriptObservabilityArgs defaults) {
            $ = new WorkersScriptObservabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether observability is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether observability is enabled for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param headSamplingRate The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
         * 
         * @return builder
         * 
         */
        public Builder headSamplingRate(@Nullable Output<Double> headSamplingRate) {
            $.headSamplingRate = headSamplingRate;
            return this;
        }

        /**
         * @param headSamplingRate The sampling rate for incoming requests. From 0 to 1 (1 = 100%, 0.1 = 10%). Default is 1.
         * 
         * @return builder
         * 
         */
        public Builder headSamplingRate(Double headSamplingRate) {
            return headSamplingRate(Output.of(headSamplingRate));
        }

        /**
         * @param logs Log settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logs(@Nullable Output<WorkersScriptObservabilityLogsArgs> logs) {
            $.logs = logs;
            return this;
        }

        /**
         * @param logs Log settings for the Worker.
         * 
         * @return builder
         * 
         */
        public Builder logs(WorkersScriptObservabilityLogsArgs logs) {
            return logs(Output.of(logs));
        }

        public WorkersScriptObservabilityArgs build() {
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("WorkersScriptObservabilityArgs", "enabled");
            }
            return $;
        }
    }

}
