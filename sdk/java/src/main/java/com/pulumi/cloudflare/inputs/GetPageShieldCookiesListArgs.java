// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPageShieldCookiesListArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPageShieldCookiesListArgs Empty = new GetPageShieldCookiesListArgs();

    /**
     * The direction used to sort returned cookies.&#39;
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return The direction used to sort returned cookies.&#39;
     * Available values: &#34;asc&#34;, &#34;desc&#34;.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Filters the returned cookies that match the specified domain attribute
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Filters the returned cookies that match the specified domain attribute
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Export the list of cookies as a file, limited to 50000 entries.
     * Available values: &#34;csv&#34;.
     * 
     */
    @Import(name="export")
    private @Nullable Output<String> export;

    /**
     * @return Export the list of cookies as a file, limited to 50000 entries.
     * Available values: &#34;csv&#34;.
     * 
     */
    public Optional<Output<String>> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * Includes cookies that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<String> hosts;

    /**
     * @return Includes cookies that match one or more URL-encoded hostnames separated by commas.
     * 
     */
    public Optional<Output<String>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="httpOnly")
    private @Nullable Output<Boolean> httpOnly;

    public Optional<Output<Boolean>> httpOnly() {
        return Optional.ofNullable(this.httpOnly);
    }

    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="orderBy")
    private @Nullable Output<String> orderBy;

    public Optional<Output<String>> orderBy() {
        return Optional.ofNullable(this.orderBy);
    }

    @Import(name="page")
    private @Nullable Output<String> page;

    public Optional<Output<String>> page() {
        return Optional.ofNullable(this.page);
    }

    @Import(name="pageUrl")
    private @Nullable Output<String> pageUrl;

    public Optional<Output<String>> pageUrl() {
        return Optional.ofNullable(this.pageUrl);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="perPage")
    private @Nullable Output<Double> perPage;

    public Optional<Output<Double>> perPage() {
        return Optional.ofNullable(this.perPage);
    }

    @Import(name="sameSite")
    private @Nullable Output<String> sameSite;

    public Optional<Output<String>> sameSite() {
        return Optional.ofNullable(this.sameSite);
    }

    @Import(name="secure")
    private @Nullable Output<Boolean> secure;

    public Optional<Output<Boolean>> secure() {
        return Optional.ofNullable(this.secure);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private GetPageShieldCookiesListArgs() {}

    private GetPageShieldCookiesListArgs(GetPageShieldCookiesListArgs $) {
        this.direction = $.direction;
        this.domain = $.domain;
        this.export = $.export;
        this.hosts = $.hosts;
        this.httpOnly = $.httpOnly;
        this.maxItems = $.maxItems;
        this.name = $.name;
        this.orderBy = $.orderBy;
        this.page = $.page;
        this.pageUrl = $.pageUrl;
        this.path = $.path;
        this.perPage = $.perPage;
        this.sameSite = $.sameSite;
        this.secure = $.secure;
        this.type = $.type;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPageShieldCookiesListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPageShieldCookiesListArgs $;

        public Builder() {
            $ = new GetPageShieldCookiesListArgs();
        }

        public Builder(GetPageShieldCookiesListArgs defaults) {
            $ = new GetPageShieldCookiesListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction used to sort returned cookies.&#39;
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction used to sort returned cookies.&#39;
         * Available values: &#34;asc&#34;, &#34;desc&#34;.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param domain Filters the returned cookies that match the specified domain attribute
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Filters the returned cookies that match the specified domain attribute
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param export Export the list of cookies as a file, limited to 50000 entries.
         * Available values: &#34;csv&#34;.
         * 
         * @return builder
         * 
         */
        public Builder export(@Nullable Output<String> export) {
            $.export = export;
            return this;
        }

        /**
         * @param export Export the list of cookies as a file, limited to 50000 entries.
         * Available values: &#34;csv&#34;.
         * 
         * @return builder
         * 
         */
        public Builder export(String export) {
            return export(Output.of(export));
        }

        /**
         * @param hosts Includes cookies that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Includes cookies that match one or more URL-encoded hostnames separated by commas.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder httpOnly(@Nullable Output<Boolean> httpOnly) {
            $.httpOnly = httpOnly;
            return this;
        }

        public Builder httpOnly(Boolean httpOnly) {
            return httpOnly(Output.of(httpOnly));
        }

        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orderBy(@Nullable Output<String> orderBy) {
            $.orderBy = orderBy;
            return this;
        }

        public Builder orderBy(String orderBy) {
            return orderBy(Output.of(orderBy));
        }

        public Builder page(@Nullable Output<String> page) {
            $.page = page;
            return this;
        }

        public Builder page(String page) {
            return page(Output.of(page));
        }

        public Builder pageUrl(@Nullable Output<String> pageUrl) {
            $.pageUrl = pageUrl;
            return this;
        }

        public Builder pageUrl(String pageUrl) {
            return pageUrl(Output.of(pageUrl));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder perPage(@Nullable Output<Double> perPage) {
            $.perPage = perPage;
            return this;
        }

        public Builder perPage(Double perPage) {
            return perPage(Output.of(perPage));
        }

        public Builder sameSite(@Nullable Output<String> sameSite) {
            $.sameSite = sameSite;
            return this;
        }

        public Builder sameSite(String sameSite) {
            return sameSite(Output.of(sameSite));
        }

        public Builder secure(@Nullable Output<Boolean> secure) {
            $.secure = secure;
            return this;
        }

        public Builder secure(Boolean secure) {
            return secure(Output.of(secure));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public GetPageShieldCookiesListArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetPageShieldCookiesListArgs", "zoneId");
            }
            return $;
        }
    }

}
