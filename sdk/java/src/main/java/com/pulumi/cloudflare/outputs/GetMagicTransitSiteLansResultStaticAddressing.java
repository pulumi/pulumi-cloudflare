// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLansResultStaticAddressingDhcpRelay;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLansResultStaticAddressingDhcpServer;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSiteLansResultStaticAddressing {
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private String address;
    private GetMagicTransitSiteLansResultStaticAddressingDhcpRelay dhcpRelay;
    private GetMagicTransitSiteLansResultStaticAddressingDhcpServer dhcpServer;
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private String secondaryAddress;
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    private String virtualAddress;

    private GetMagicTransitSiteLansResultStaticAddressing() {}
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public String address() {
        return this.address;
    }
    public GetMagicTransitSiteLansResultStaticAddressingDhcpRelay dhcpRelay() {
        return this.dhcpRelay;
    }
    public GetMagicTransitSiteLansResultStaticAddressingDhcpServer dhcpServer() {
        return this.dhcpServer;
    }
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public String secondaryAddress() {
        return this.secondaryAddress;
    }
    /**
     * @return A valid CIDR notation representing an IP range.
     * 
     */
    public String virtualAddress() {
        return this.virtualAddress;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteLansResultStaticAddressing defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private GetMagicTransitSiteLansResultStaticAddressingDhcpRelay dhcpRelay;
        private GetMagicTransitSiteLansResultStaticAddressingDhcpServer dhcpServer;
        private String secondaryAddress;
        private String virtualAddress;
        public Builder() {}
        public Builder(GetMagicTransitSiteLansResultStaticAddressing defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.dhcpRelay = defaults.dhcpRelay;
    	      this.dhcpServer = defaults.dhcpServer;
    	      this.secondaryAddress = defaults.secondaryAddress;
    	      this.virtualAddress = defaults.virtualAddress;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResultStaticAddressing", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpRelay(GetMagicTransitSiteLansResultStaticAddressingDhcpRelay dhcpRelay) {
            if (dhcpRelay == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResultStaticAddressing", "dhcpRelay");
            }
            this.dhcpRelay = dhcpRelay;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpServer(GetMagicTransitSiteLansResultStaticAddressingDhcpServer dhcpServer) {
            if (dhcpServer == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResultStaticAddressing", "dhcpServer");
            }
            this.dhcpServer = dhcpServer;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryAddress(String secondaryAddress) {
            if (secondaryAddress == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResultStaticAddressing", "secondaryAddress");
            }
            this.secondaryAddress = secondaryAddress;
            return this;
        }
        @CustomType.Setter
        public Builder virtualAddress(String virtualAddress) {
            if (virtualAddress == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResultStaticAddressing", "virtualAddress");
            }
            this.virtualAddress = virtualAddress;
            return this;
        }
        public GetMagicTransitSiteLansResultStaticAddressing build() {
            final var _resultValue = new GetMagicTransitSiteLansResultStaticAddressing();
            _resultValue.address = address;
            _resultValue.dhcpRelay = dhcpRelay;
            _resultValue.dhcpServer = dhcpServer;
            _resultValue.secondaryAddress = secondaryAddress;
            _resultValue.virtualAddress = virtualAddress;
            return _resultValue;
        }
    }
}
