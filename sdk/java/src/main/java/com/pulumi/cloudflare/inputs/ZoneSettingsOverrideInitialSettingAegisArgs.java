// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneSettingsOverrideInitialSettingAegisArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneSettingsOverrideInitialSettingAegisArgs Empty = new ZoneSettingsOverrideInitialSettingAegisArgs();

    /**
     * Whether Aegis zone setting is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether Aegis zone setting is enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Egress pool id which refers to a grouping of dedicated egress IPs through which Cloudflare will connect to origin.
     * 
     */
    @Import(name="poolId")
    private @Nullable Output<String> poolId;

    /**
     * @return Egress pool id which refers to a grouping of dedicated egress IPs through which Cloudflare will connect to origin.
     * 
     */
    public Optional<Output<String>> poolId() {
        return Optional.ofNullable(this.poolId);
    }

    private ZoneSettingsOverrideInitialSettingAegisArgs() {}

    private ZoneSettingsOverrideInitialSettingAegisArgs(ZoneSettingsOverrideInitialSettingAegisArgs $) {
        this.enabled = $.enabled;
        this.poolId = $.poolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneSettingsOverrideInitialSettingAegisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneSettingsOverrideInitialSettingAegisArgs $;

        public Builder() {
            $ = new ZoneSettingsOverrideInitialSettingAegisArgs();
        }

        public Builder(ZoneSettingsOverrideInitialSettingAegisArgs defaults) {
            $ = new ZoneSettingsOverrideInitialSettingAegisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether Aegis zone setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether Aegis zone setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param poolId Egress pool id which refers to a grouping of dedicated egress IPs through which Cloudflare will connect to origin.
         * 
         * @return builder
         * 
         */
        public Builder poolId(@Nullable Output<String> poolId) {
            $.poolId = poolId;
            return this;
        }

        /**
         * @param poolId Egress pool id which refers to a grouping of dedicated egress IPs through which Cloudflare will connect to origin.
         * 
         * @return builder
         * 
         */
        public Builder poolId(String poolId) {
            return poolId(Output.of(poolId));
        }

        public ZoneSettingsOverrideInitialSettingAegisArgs build() {
            return $;
        }
    }

}
