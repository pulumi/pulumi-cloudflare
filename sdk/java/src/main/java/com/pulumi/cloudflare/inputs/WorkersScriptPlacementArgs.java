// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersScriptPlacementArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkersScriptPlacementArgs Empty = new WorkersScriptPlacementArgs();

    /**
     * Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;smart&#34;.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;smart&#34;.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private WorkersScriptPlacementArgs() {}

    private WorkersScriptPlacementArgs(WorkersScriptPlacementArgs $) {
        this.mode = $.mode;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersScriptPlacementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersScriptPlacementArgs $;

        public Builder() {
            $ = new WorkersScriptPlacementArgs();
        }

        public Builder(WorkersScriptPlacementArgs defaults) {
            $ = new WorkersScriptPlacementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param mode Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * Available values: &#34;smart&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Enables [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * Available values: &#34;smart&#34;.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param status Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
         * Available values: &#34;SUCCESS&#34;, &#34;UNSUPPORTED*APPLICATION&#34;, &#34;INSUFFICIENT*INVOCATIONS&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public WorkersScriptPlacementArgs build() {
            return $;
        }
    }

}
