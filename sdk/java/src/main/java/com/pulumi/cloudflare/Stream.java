// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.StreamArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.StreamState;
import com.pulumi.cloudflare.outputs.StreamInput;
import com.pulumi.cloudflare.outputs.StreamPlayback;
import com.pulumi.cloudflare.outputs.StreamStatus;
import com.pulumi.cloudflare.outputs.StreamWatermark;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.Stream;
 * import com.pulumi.cloudflare.StreamArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleStream = new Stream("exampleStream", StreamArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="cloudflare:index/stream:Stream")
public class Stream extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier tag.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    @Export(name="allowedOrigins", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> allowedOrigins;

    /**
     * @return Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    public Output<Optional<List<String>>> allowedOrigins() {
        return Codegen.optional(this.allowedOrigins);
    }
    /**
     * The date and time the media item was created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return The date and time the media item was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * A user-defined identifier for the media creator.
     * 
     */
    @Export(name="creator", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> creator;

    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    public Output<Optional<String>> creator() {
        return Codegen.optional(this.creator);
    }
    /**
     * The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    @Export(name="duration", refs={Double.class}, tree="[0]")
    private Output<Double> duration;

    /**
     * @return The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    public Output<Double> duration() {
        return this.duration;
    }
    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> identifier;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Output<Optional<String>> identifier() {
        return Codegen.optional(this.identifier);
    }
    @Export(name="input", refs={StreamInput.class}, tree="[0]")
    private Output<StreamInput> input;

    public Output<StreamInput> input() {
        return this.input;
    }
    /**
     * The live input ID used to upload a video with Stream Live.
     * 
     */
    @Export(name="liveInput", refs={String.class}, tree="[0]")
    private Output<String> liveInput;

    /**
     * @return The live input ID used to upload a video with Stream Live.
     * 
     */
    public Output<String> liveInput() {
        return this.liveInput;
    }
    /**
     * The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    @Export(name="maxDurationSeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxDurationSeconds;

    /**
     * @return The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    public Output<Optional<Integer>> maxDurationSeconds() {
        return Codegen.optional(this.maxDurationSeconds);
    }
    /**
     * A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    @Export(name="meta", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    public Output<Optional<String>> meta() {
        return Codegen.optional(this.meta);
    }
    /**
     * The date and time the media item was last modified.
     * 
     */
    @Export(name="modified", refs={String.class}, tree="[0]")
    private Output<String> modified;

    /**
     * @return The date and time the media item was last modified.
     * 
     */
    public Output<String> modified() {
        return this.modified;
    }
    @Export(name="playback", refs={StreamPlayback.class}, tree="[0]")
    private Output<StreamPlayback> playback;

    public Output<StreamPlayback> playback() {
        return this.playback;
    }
    /**
     * The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    @Export(name="preview", refs={String.class}, tree="[0]")
    private Output<String> preview;

    /**
     * @return The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    public Output<String> preview() {
        return this.preview;
    }
    /**
     * Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    @Export(name="readyToStream", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> readyToStream;

    /**
     * @return Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public Output<Boolean> readyToStream() {
        return this.readyToStream;
    }
    /**
     * Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    @Export(name="readyToStreamAt", refs={String.class}, tree="[0]")
    private Output<String> readyToStreamAt;

    /**
     * @return Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public Output<String> readyToStreamAt() {
        return this.readyToStreamAt;
    }
    /**
     * Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    @Export(name="requireSignedUrls", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    public Output<Boolean> requireSignedUrls() {
        return this.requireSignedUrls;
    }
    /**
     * Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    @Export(name="scheduledDeletion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> scheduledDeletion;

    /**
     * @return Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    public Output<Optional<String>> scheduledDeletion() {
        return Codegen.optional(this.scheduledDeletion);
    }
    /**
     * The size of the media item in bytes.
     * 
     */
    @Export(name="size", refs={Double.class}, tree="[0]")
    private Output<Double> size;

    /**
     * @return The size of the media item in bytes.
     * 
     */
    public Output<Double> size() {
        return this.size;
    }
    /**
     * Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    @Export(name="status", refs={StreamStatus.class}, tree="[0]")
    private Output<StreamStatus> status;

    /**
     * @return Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    public Output<StreamStatus> status() {
        return this.status;
    }
    /**
     * The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    @Export(name="thumbnail", refs={String.class}, tree="[0]")
    private Output<String> thumbnail;

    /**
     * @return The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    public Output<String> thumbnail() {
        return this.thumbnail;
    }
    /**
     * The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    @Export(name="thumbnailTimestampPct", refs={Double.class}, tree="[0]")
    private Output<Double> thumbnailTimestampPct;

    /**
     * @return The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    public Output<Double> thumbnailTimestampPct() {
        return this.thumbnailTimestampPct;
    }
    /**
     * A Cloudflare-generated unique identifier for a media item.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    @Export(name="uploadExpiry", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> uploadExpiry;

    /**
     * @return The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    public Output<Optional<String>> uploadExpiry() {
        return Codegen.optional(this.uploadExpiry);
    }
    /**
     * The date and time the media item was uploaded.
     * 
     */
    @Export(name="uploaded", refs={String.class}, tree="[0]")
    private Output<String> uploaded;

    /**
     * @return The date and time the media item was uploaded.
     * 
     */
    public Output<String> uploaded() {
        return this.uploaded;
    }
    @Export(name="watermark", refs={StreamWatermark.class}, tree="[0]")
    private Output<StreamWatermark> watermark;

    public Output<StreamWatermark> watermark() {
        return this.watermark;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Stream(java.lang.String name) {
        this(name, StreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Stream(java.lang.String name, StreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Stream(java.lang.String name, StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/stream:Stream", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Stream(java.lang.String name, Output<java.lang.String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/stream:Stream", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamArgs makeArgs(StreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Stream get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Stream(name, id, state, options);
    }
}
