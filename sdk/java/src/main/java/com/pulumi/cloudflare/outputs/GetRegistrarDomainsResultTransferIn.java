// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRegistrarDomainsResultTransferIn {
    /**
     * @return Form of authorization has been accepted by the registrant.
     * Available values: &#34;needed&#34;, &#34;ok&#34;.
     * 
     */
    private String acceptFoa;
    /**
     * @return Shows transfer status with the registry.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;rejected&#34;, &#34;unknown&#34;.
     * 
     */
    private String approveTransfer;
    /**
     * @return Indicates if cancellation is still possible.
     * 
     */
    private Boolean canCancelTransfer;
    /**
     * @return Privacy guards are disabled at the foreign registrar.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;unknown&#34;.
     * 
     */
    private String disablePrivacy;
    /**
     * @return Auth code has been entered and verified.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;rejected&#34;.
     * 
     */
    private String enterAuthCode;
    /**
     * @return Domain is unlocked at the foreign registrar.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;unknown&#34;.
     * 
     */
    private String unlockDomain;

    private GetRegistrarDomainsResultTransferIn() {}
    /**
     * @return Form of authorization has been accepted by the registrant.
     * Available values: &#34;needed&#34;, &#34;ok&#34;.
     * 
     */
    public String acceptFoa() {
        return this.acceptFoa;
    }
    /**
     * @return Shows transfer status with the registry.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;rejected&#34;, &#34;unknown&#34;.
     * 
     */
    public String approveTransfer() {
        return this.approveTransfer;
    }
    /**
     * @return Indicates if cancellation is still possible.
     * 
     */
    public Boolean canCancelTransfer() {
        return this.canCancelTransfer;
    }
    /**
     * @return Privacy guards are disabled at the foreign registrar.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;unknown&#34;.
     * 
     */
    public String disablePrivacy() {
        return this.disablePrivacy;
    }
    /**
     * @return Auth code has been entered and verified.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;rejected&#34;.
     * 
     */
    public String enterAuthCode() {
        return this.enterAuthCode;
    }
    /**
     * @return Domain is unlocked at the foreign registrar.
     * Available values: &#34;needed&#34;, &#34;ok&#34;, &#34;pending&#34;, &#34;trying&#34;, &#34;unknown&#34;.
     * 
     */
    public String unlockDomain() {
        return this.unlockDomain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistrarDomainsResultTransferIn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceptFoa;
        private String approveTransfer;
        private Boolean canCancelTransfer;
        private String disablePrivacy;
        private String enterAuthCode;
        private String unlockDomain;
        public Builder() {}
        public Builder(GetRegistrarDomainsResultTransferIn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptFoa = defaults.acceptFoa;
    	      this.approveTransfer = defaults.approveTransfer;
    	      this.canCancelTransfer = defaults.canCancelTransfer;
    	      this.disablePrivacy = defaults.disablePrivacy;
    	      this.enterAuthCode = defaults.enterAuthCode;
    	      this.unlockDomain = defaults.unlockDomain;
        }

        @CustomType.Setter
        public Builder acceptFoa(String acceptFoa) {
            if (acceptFoa == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "acceptFoa");
            }
            this.acceptFoa = acceptFoa;
            return this;
        }
        @CustomType.Setter
        public Builder approveTransfer(String approveTransfer) {
            if (approveTransfer == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "approveTransfer");
            }
            this.approveTransfer = approveTransfer;
            return this;
        }
        @CustomType.Setter
        public Builder canCancelTransfer(Boolean canCancelTransfer) {
            if (canCancelTransfer == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "canCancelTransfer");
            }
            this.canCancelTransfer = canCancelTransfer;
            return this;
        }
        @CustomType.Setter
        public Builder disablePrivacy(String disablePrivacy) {
            if (disablePrivacy == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "disablePrivacy");
            }
            this.disablePrivacy = disablePrivacy;
            return this;
        }
        @CustomType.Setter
        public Builder enterAuthCode(String enterAuthCode) {
            if (enterAuthCode == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "enterAuthCode");
            }
            this.enterAuthCode = enterAuthCode;
            return this;
        }
        @CustomType.Setter
        public Builder unlockDomain(String unlockDomain) {
            if (unlockDomain == null) {
              throw new MissingRequiredPropertyException("GetRegistrarDomainsResultTransferIn", "unlockDomain");
            }
            this.unlockDomain = unlockDomain;
            return this;
        }
        public GetRegistrarDomainsResultTransferIn build() {
            final var _resultValue = new GetRegistrarDomainsResultTransferIn();
            _resultValue.acceptFoa = acceptFoa;
            _resultValue.approveTransfer = approveTransfer;
            _resultValue.canCancelTransfer = canCancelTransfer;
            _resultValue.disablePrivacy = disablePrivacy;
            _resultValue.enterAuthCode = enterAuthCode;
            _resultValue.unlockDomain = unlockDomain;
            return _resultValue;
        }
    }
}
