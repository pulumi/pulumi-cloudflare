// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs Empty = new ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs();

    /**
     * The ID of your Github identity provider.
     * 
     */
    @Import(name="identityProviderId", required=true)
    private Output<String> identityProviderId;

    /**
     * @return The ID of your Github identity provider.
     * 
     */
    public Output<String> identityProviderId() {
        return this.identityProviderId;
    }

    /**
     * The name of the organization.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the organization.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the team
     * 
     */
    @Import(name="team")
    private @Nullable Output<String> team;

    /**
     * @return The name of the team
     * 
     */
    public Optional<Output<String>> team() {
        return Optional.ofNullable(this.team);
    }

    private ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs() {}

    private ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs(ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs $) {
        this.identityProviderId = $.identityProviderId;
        this.name = $.name;
        this.team = $.team;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs $;

        public Builder() {
            $ = new ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs();
        }

        public Builder(ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs defaults) {
            $ = new ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identityProviderId The ID of your Github identity provider.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderId(Output<String> identityProviderId) {
            $.identityProviderId = identityProviderId;
            return this;
        }

        /**
         * @param identityProviderId The ID of your Github identity provider.
         * 
         * @return builder
         * 
         */
        public Builder identityProviderId(String identityProviderId) {
            return identityProviderId(Output.of(identityProviderId));
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the organization.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param team The name of the team
         * 
         * @return builder
         * 
         */
        public Builder team(@Nullable Output<String> team) {
            $.team = team;
            return this;
        }

        /**
         * @param team The name of the team
         * 
         * @return builder
         * 
         */
        public Builder team(String team) {
            return team(Output.of(team));
        }

        public ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs build() {
            if ($.identityProviderId == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs", "identityProviderId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ZeroTrustAccessApplicationPolicyRequireGithubOrganizationArgs", "name");
            }
            return $;
        }
    }

}
