// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DnsZoneTransfersAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsZoneTransfersAclArgs Empty = new DnsZoneTransfersAclArgs();

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     * 
     */
    @Import(name="ipRange", required=true)
    private Output<String> ipRange;

    /**
     * @return Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
     * 
     */
    public Output<String> ipRange() {
        return this.ipRange;
    }

    /**
     * The name of the acl.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the acl.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DnsZoneTransfersAclArgs() {}

    private DnsZoneTransfersAclArgs(DnsZoneTransfersAclArgs $) {
        this.accountId = $.accountId;
        this.ipRange = $.ipRange;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsZoneTransfersAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsZoneTransfersAclArgs $;

        public Builder() {
            $ = new DnsZoneTransfersAclArgs();
        }

        public Builder(DnsZoneTransfersAclArgs defaults) {
            $ = new DnsZoneTransfersAclArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param ipRange Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        /**
         * @param ipRange Allowed IPv4/IPv6 address range of primary or secondary nameservers. This will be applied for the entire account. The IP range is used to allow additional NOTIFY IPs for secondary zones and IPs Cloudflare allows AXFR/IXFR requests from for primary zones. CIDRs are limited to a maximum of /24 for IPv4 and /64 for IPv6 respectively.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        /**
         * @param name The name of the acl.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the acl.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DnsZoneTransfersAclArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersAclArgs", "accountId");
            }
            if ($.ipRange == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersAclArgs", "ipRange");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DnsZoneTransfersAclArgs", "name");
            }
            return $;
        }
    }

}
