// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetRulesetRuleActionParametersCacheReserve {
    /**
     * @return Whether Cache Reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to Cache Reserve.
     * 
     */
    private Boolean eligible;
    /**
     * @return The minimum file size eligible for storage in Cache Reserve.
     * 
     */
    private Integer minimumFileSize;

    private GetRulesetRuleActionParametersCacheReserve() {}
    /**
     * @return Whether Cache Reserve is enabled. If this is true and a request meets eligibility criteria, Cloudflare will write the resource to Cache Reserve.
     * 
     */
    public Boolean eligible() {
        return this.eligible;
    }
    /**
     * @return The minimum file size eligible for storage in Cache Reserve.
     * 
     */
    public Integer minimumFileSize() {
        return this.minimumFileSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetRuleActionParametersCacheReserve defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean eligible;
        private Integer minimumFileSize;
        public Builder() {}
        public Builder(GetRulesetRuleActionParametersCacheReserve defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eligible = defaults.eligible;
    	      this.minimumFileSize = defaults.minimumFileSize;
        }

        @CustomType.Setter
        public Builder eligible(Boolean eligible) {
            if (eligible == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersCacheReserve", "eligible");
            }
            this.eligible = eligible;
            return this;
        }
        @CustomType.Setter
        public Builder minimumFileSize(Integer minimumFileSize) {
            if (minimumFileSize == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersCacheReserve", "minimumFileSize");
            }
            this.minimumFileSize = minimumFileSize;
            return this;
        }
        public GetRulesetRuleActionParametersCacheReserve build() {
            final var _resultValue = new GetRulesetRuleActionParametersCacheReserve();
            _resultValue.eligible = eligible;
            _resultValue.minimumFileSize = minimumFileSize;
            return _resultValue;
        }
    }
}
