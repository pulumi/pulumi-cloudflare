// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.CertificatePackValidationErrorArgs;
import com.pulumi.cloudflare.inputs.CertificatePackValidationRecordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificatePackArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificatePackArgs Empty = new CertificatePackArgs();

    /**
     * Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="certificateAuthority", required=true)
    private Output<String> certificateAuthority;

    /**
     * @return Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }

    /**
     * Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="cloudflareBranding")
    private @Nullable Output<Boolean> cloudflareBranding;

    /**
     * @return Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<Boolean>> cloudflareBranding() {
        return Optional.ofNullable(this.cloudflareBranding);
    }

    /**
     * List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="hosts", required=true)
    private Output<List<String>> hosts;

    /**
     * @return List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<List<String>> hosts() {
        return this.hosts;
    }

    /**
     * Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    @Import(name="validationErrors")
    private @Nullable Output<List<CertificatePackValidationErrorArgs>> validationErrors;

    public Optional<Output<List<CertificatePackValidationErrorArgs>>> validationErrors() {
        return Optional.ofNullable(this.validationErrors);
    }

    /**
     * Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="validationMethod", required=true)
    private Output<String> validationMethod;

    /**
     * @return Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> validationMethod() {
        return this.validationMethod;
    }

    @Import(name="validationRecords")
    private @Nullable Output<List<CertificatePackValidationRecordArgs>> validationRecords;

    public Optional<Output<List<CertificatePackValidationRecordArgs>>> validationRecords() {
        return Optional.ofNullable(this.validationRecords);
    }

    /**
     * How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="validityDays", required=true)
    private Output<Integer> validityDays;

    /**
     * @return How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<Integer> validityDays() {
        return this.validityDays;
    }

    /**
     * Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="waitForActiveStatus")
    private @Nullable Output<Boolean> waitForActiveStatus;

    /**
     * @return Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Optional<Output<Boolean>> waitForActiveStatus() {
        return Optional.ofNullable(this.waitForActiveStatus);
    }

    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private CertificatePackArgs() {}

    private CertificatePackArgs(CertificatePackArgs $) {
        this.certificateAuthority = $.certificateAuthority;
        this.cloudflareBranding = $.cloudflareBranding;
        this.hosts = $.hosts;
        this.type = $.type;
        this.validationErrors = $.validationErrors;
        this.validationMethod = $.validationMethod;
        this.validationRecords = $.validationRecords;
        this.validityDays = $.validityDays;
        this.waitForActiveStatus = $.waitForActiveStatus;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificatePackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificatePackArgs $;

        public Builder() {
            $ = new CertificatePackArgs();
        }

        public Builder(CertificatePackArgs defaults) {
            $ = new CertificatePackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority Which certificate authority to issue the certificate pack. Available values: `digicert`, `lets_encrypt`, `google`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param cloudflareBranding Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder cloudflareBranding(@Nullable Output<Boolean> cloudflareBranding) {
            $.cloudflareBranding = cloudflareBranding;
            return this;
        }

        /**
         * @param cloudflareBranding Whether or not to include Cloudflare branding. This will add `sni.cloudflaressl.com` as the Common Name if set to `true`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder cloudflareBranding(Boolean cloudflareBranding) {
            return cloudflareBranding(Output.of(cloudflareBranding));
        }

        /**
         * @param hosts List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder hosts(Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts List of hostnames to provision the certificate pack for. The zone name must be included as a host. Note: If using Let&#39;s Encrypt, you cannot use individual subdomains and only a wildcard for subdomain is available. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param type Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate pack configuration type. Available values: `advanced`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder validationErrors(@Nullable Output<List<CertificatePackValidationErrorArgs>> validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public Builder validationErrors(List<CertificatePackValidationErrorArgs> validationErrors) {
            return validationErrors(Output.of(validationErrors));
        }

        public Builder validationErrors(CertificatePackValidationErrorArgs... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }

        /**
         * @param validationMethod Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validationMethod(Output<String> validationMethod) {
            $.validationMethod = validationMethod;
            return this;
        }

        /**
         * @param validationMethod Which validation method to use in order to prove domain ownership. Available values: `txt`, `http`, `email`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validationMethod(String validationMethod) {
            return validationMethod(Output.of(validationMethod));
        }

        public Builder validationRecords(@Nullable Output<List<CertificatePackValidationRecordArgs>> validationRecords) {
            $.validationRecords = validationRecords;
            return this;
        }

        public Builder validationRecords(List<CertificatePackValidationRecordArgs> validationRecords) {
            return validationRecords(Output.of(validationRecords));
        }

        public Builder validationRecords(CertificatePackValidationRecordArgs... validationRecords) {
            return validationRecords(List.of(validationRecords));
        }

        /**
         * @param validityDays How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validityDays(Output<Integer> validityDays) {
            $.validityDays = validityDays;
            return this;
        }

        /**
         * @param validityDays How long the certificate is valid for. Note: If using Let&#39;s Encrypt, this value can only be 90 days. Available values: `14`, `30`, `90`, `365`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder validityDays(Integer validityDays) {
            return validityDays(Output.of(validityDays));
        }

        /**
         * @param waitForActiveStatus Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder waitForActiveStatus(@Nullable Output<Boolean> waitForActiveStatus) {
            $.waitForActiveStatus = waitForActiveStatus;
            return this;
        }

        /**
         * @param waitForActiveStatus Whether or not to wait for a certificate pack to reach status `active` during creation. Defaults to `false`. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder waitForActiveStatus(Boolean waitForActiveStatus) {
            return waitForActiveStatus(Output.of(waitForActiveStatus));
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CertificatePackArgs build() {
            if ($.certificateAuthority == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "certificateAuthority");
            }
            if ($.hosts == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "hosts");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "type");
            }
            if ($.validationMethod == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "validationMethod");
            }
            if ($.validityDays == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "validityDays");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "zoneId");
            }
            return $;
        }
    }

}
