// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificatePackArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificatePackArgs Empty = new CertificatePackArgs();

    /**
     * Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    @Import(name="certificateAuthority", required=true)
    private Output<String> certificateAuthority;

    /**
     * @return Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
     * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }

    /**
     * Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     * 
     */
    @Import(name="cloudflareBranding")
    private @Nullable Output<Boolean> cloudflareBranding;

    /**
     * @return Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
     * 
     */
    public Optional<Output<Boolean>> cloudflareBranding() {
        return Optional.ofNullable(this.cloudflareBranding);
    }

    /**
     * Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     * 
     */
    @Import(name="hosts", required=true)
    private Output<List<String>> hosts;

    /**
     * @return Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
     * 
     */
    public Output<List<String>> hosts() {
        return this.hosts;
    }

    /**
     * Type of certificate pack.
     * Available values: &#34;advanced&#34;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of certificate pack.
     * Available values: &#34;advanced&#34;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Validation Method selected for the order.
     * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
     * 
     */
    @Import(name="validationMethod", required=true)
    private Output<String> validationMethod;

    /**
     * @return Validation Method selected for the order.
     * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
     * 
     */
    public Output<String> validationMethod() {
        return this.validationMethod;
    }

    /**
     * Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     * 
     */
    @Import(name="validityDays", required=true)
    private Output<Integer> validityDays;

    /**
     * @return Validity Days selected for the order.
     * Available values: 14, 30, 90, 365.
     * 
     */
    public Output<Integer> validityDays() {
        return this.validityDays;
    }

    /**
     * Identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private CertificatePackArgs() {}

    private CertificatePackArgs(CertificatePackArgs $) {
        this.certificateAuthority = $.certificateAuthority;
        this.cloudflareBranding = $.cloudflareBranding;
        this.hosts = $.hosts;
        this.type = $.type;
        this.validationMethod = $.validationMethod;
        this.validityDays = $.validityDays;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificatePackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificatePackArgs $;

        public Builder() {
            $ = new CertificatePackArgs();
        }

        public Builder(CertificatePackArgs defaults) {
            $ = new CertificatePackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
         * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority Certificate Authority selected for the order.  For information on any certificate authority specific details or restrictions [see this page for more details.](https://developers.cloudflare.com/ssl/reference/certificate-authorities)
         * Available values: &#34;google&#34;, &#34;lets*encrypt&#34;, &#34;ssl*com&#34;.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param cloudflareBranding Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareBranding(@Nullable Output<Boolean> cloudflareBranding) {
            $.cloudflareBranding = cloudflareBranding;
            return this;
        }

        /**
         * @param cloudflareBranding Whether or not to add Cloudflare Branding for the order.  This will add a subdomain of sni.cloudflaressl.com as the Common Name if set to true.
         * 
         * @return builder
         * 
         */
        public Builder cloudflareBranding(Boolean cloudflareBranding) {
            return cloudflareBranding(Output.of(cloudflareBranding));
        }

        /**
         * @param hosts Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
         * 
         * @return builder
         * 
         */
        public Builder hosts(Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts Comma separated list of valid host names for the certificate packs. Must contain the zone apex, may not contain more than 50 hosts, and may not be empty.
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param type Type of certificate pack.
         * Available values: &#34;advanced&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of certificate pack.
         * Available values: &#34;advanced&#34;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validationMethod Validation Method selected for the order.
         * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationMethod(Output<String> validationMethod) {
            $.validationMethod = validationMethod;
            return this;
        }

        /**
         * @param validationMethod Validation Method selected for the order.
         * Available values: &#34;txt&#34;, &#34;http&#34;, &#34;email&#34;.
         * 
         * @return builder
         * 
         */
        public Builder validationMethod(String validationMethod) {
            return validationMethod(Output.of(validationMethod));
        }

        /**
         * @param validityDays Validity Days selected for the order.
         * Available values: 14, 30, 90, 365.
         * 
         * @return builder
         * 
         */
        public Builder validityDays(Output<Integer> validityDays) {
            $.validityDays = validityDays;
            return this;
        }

        /**
         * @param validityDays Validity Days selected for the order.
         * Available values: 14, 30, 90, 365.
         * 
         * @return builder
         * 
         */
        public Builder validityDays(Integer validityDays) {
            return validityDays(Output.of(validityDays));
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public CertificatePackArgs build() {
            if ($.certificateAuthority == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "certificateAuthority");
            }
            if ($.hosts == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "hosts");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "type");
            }
            if ($.validationMethod == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "validationMethod");
            }
            if ($.validityDays == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "validityDays");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("CertificatePackArgs", "zoneId");
            }
            return $;
        }
    }

}
