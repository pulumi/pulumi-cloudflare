// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetUserAgentBlockingRulesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetUserAgentBlockingRulesPlainArgs Empty = new GetUserAgentBlockingRulesPlainArgs();

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="descriptionSearch")
    private @Nullable String descriptionSearch;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<String> descriptionSearch() {
        return Optional.ofNullable(this.descriptionSearch);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * A string to search for in the user agent values of existing rules.
     * 
     */
    @Import(name="uaSearch")
    private @Nullable String uaSearch;

    /**
     * @return A string to search for in the user agent values of existing rules.
     * 
     */
    public Optional<String> uaSearch() {
        return Optional.ofNullable(this.uaSearch);
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetUserAgentBlockingRulesPlainArgs() {}

    private GetUserAgentBlockingRulesPlainArgs(GetUserAgentBlockingRulesPlainArgs $) {
        this.description = $.description;
        this.descriptionSearch = $.descriptionSearch;
        this.maxItems = $.maxItems;
        this.uaSearch = $.uaSearch;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserAgentBlockingRulesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserAgentBlockingRulesPlainArgs $;

        public Builder() {
            $ = new GetUserAgentBlockingRulesPlainArgs();
        }

        public Builder(GetUserAgentBlockingRulesPlainArgs defaults) {
            $ = new GetUserAgentBlockingRulesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(@Nullable String descriptionSearch) {
            $.descriptionSearch = descriptionSearch;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param uaSearch A string to search for in the user agent values of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uaSearch(@Nullable String uaSearch) {
            $.uaSearch = uaSearch;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetUserAgentBlockingRulesPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetUserAgentBlockingRulesPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
