// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustAccessIdentityProvidersResultScimConfig {
    /**
     * @return A flag to enable or disable SCIM for the identity provider.
     * 
     */
    private Boolean enabled;
    /**
     * @return Indicates how a SCIM event updates a user identity used for policy evaluation. Use &#34;automatic&#34; to automatically update a user&#39;s identity and augment it with fields from the SCIM user resource. Use &#34;reauth&#34; to force re-authentication on group membership updates, user identity update will only occur after successful re-authentication. With &#34;reauth&#34; identities will not contain fields from the SCIM user resource. With &#34;no*action&#34; identities will not be changed by SCIM updates in any way and users will not be prompted to reauthenticate.
     * Available values: &#34;automatic&#34;, &#34;reauth&#34;, &#34;no*action&#34;.
     * 
     */
    private String identityUpdateBehavior;
    /**
     * @return The base URL of Cloudflare&#39;s SCIM V2.0 API endpoint.
     * 
     */
    private String scimBaseUrl;
    /**
     * @return A flag to remove a user&#39;s seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.
     * 
     */
    private Boolean seatDeprovision;
    /**
     * @return A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it at /access/identity*providers/:idpID/refresh*scim_secret.
     * 
     */
    private String secret;
    /**
     * @return A flag to enable revoking a user&#39;s session in Access and Gateway when they have been deprovisioned in the Identity Provider.
     * 
     */
    private Boolean userDeprovision;

    private GetZeroTrustAccessIdentityProvidersResultScimConfig() {}
    /**
     * @return A flag to enable or disable SCIM for the identity provider.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Indicates how a SCIM event updates a user identity used for policy evaluation. Use &#34;automatic&#34; to automatically update a user&#39;s identity and augment it with fields from the SCIM user resource. Use &#34;reauth&#34; to force re-authentication on group membership updates, user identity update will only occur after successful re-authentication. With &#34;reauth&#34; identities will not contain fields from the SCIM user resource. With &#34;no*action&#34; identities will not be changed by SCIM updates in any way and users will not be prompted to reauthenticate.
     * Available values: &#34;automatic&#34;, &#34;reauth&#34;, &#34;no*action&#34;.
     * 
     */
    public String identityUpdateBehavior() {
        return this.identityUpdateBehavior;
    }
    /**
     * @return The base URL of Cloudflare&#39;s SCIM V2.0 API endpoint.
     * 
     */
    public String scimBaseUrl() {
        return this.scimBaseUrl;
    }
    /**
     * @return A flag to remove a user&#39;s seat in Zero Trust when they have been deprovisioned in the Identity Provider.  This cannot be enabled unless user_deprovision is also enabled.
     * 
     */
    public Boolean seatDeprovision() {
        return this.seatDeprovision;
    }
    /**
     * @return A read-only token generated when the SCIM integration is enabled for the first time.  It is redacted on subsequent requests.  If you lose this you will need to refresh it at /access/identity*providers/:idpID/refresh*scim_secret.
     * 
     */
    public String secret() {
        return this.secret;
    }
    /**
     * @return A flag to enable revoking a user&#39;s session in Access and Gateway when they have been deprovisioned in the Identity Provider.
     * 
     */
    public Boolean userDeprovision() {
        return this.userDeprovision;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustAccessIdentityProvidersResultScimConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enabled;
        private String identityUpdateBehavior;
        private String scimBaseUrl;
        private Boolean seatDeprovision;
        private String secret;
        private Boolean userDeprovision;
        public Builder() {}
        public Builder(GetZeroTrustAccessIdentityProvidersResultScimConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.identityUpdateBehavior = defaults.identityUpdateBehavior;
    	      this.scimBaseUrl = defaults.scimBaseUrl;
    	      this.seatDeprovision = defaults.seatDeprovision;
    	      this.secret = defaults.secret;
    	      this.userDeprovision = defaults.userDeprovision;
        }

        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder identityUpdateBehavior(String identityUpdateBehavior) {
            if (identityUpdateBehavior == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "identityUpdateBehavior");
            }
            this.identityUpdateBehavior = identityUpdateBehavior;
            return this;
        }
        @CustomType.Setter
        public Builder scimBaseUrl(String scimBaseUrl) {
            if (scimBaseUrl == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "scimBaseUrl");
            }
            this.scimBaseUrl = scimBaseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder seatDeprovision(Boolean seatDeprovision) {
            if (seatDeprovision == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "seatDeprovision");
            }
            this.seatDeprovision = seatDeprovision;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "secret");
            }
            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder userDeprovision(Boolean userDeprovision) {
            if (userDeprovision == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustAccessIdentityProvidersResultScimConfig", "userDeprovision");
            }
            this.userDeprovision = userDeprovision;
            return this;
        }
        public GetZeroTrustAccessIdentityProvidersResultScimConfig build() {
            final var _resultValue = new GetZeroTrustAccessIdentityProvidersResultScimConfig();
            _resultValue.enabled = enabled;
            _resultValue.identityUpdateBehavior = identityUpdateBehavior;
            _resultValue.scimBaseUrl = scimBaseUrl;
            _resultValue.seatDeprovision = seatDeprovision;
            _resultValue.secret = secret;
            _resultValue.userDeprovision = userDeprovision;
            return _resultValue;
        }
    }
}
