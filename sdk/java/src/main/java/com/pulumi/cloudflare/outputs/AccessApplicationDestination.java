// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessApplicationDestination {
    /**
     * @return The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    private @Nullable String cidr;
    /**
     * @return The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    private @Nullable String hostname;
    /**
     * @return The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    private @Nullable String l4Protocol;
    /**
     * @return The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    private @Nullable String portRange;
    /**
     * @return The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    private @Nullable String type;
    /**
     * @return The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
     * 
     */
    private @Nullable String uri;
    /**
     * @return The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    private @Nullable String vnetId;

    private AccessApplicationDestination() {}
    /**
     * @return The private CIDR of the destination. Only valid when type=private. IPs are computed as /32 cidr. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<String> cidr() {
        return Optional.ofNullable(this.cidr);
    }
    /**
     * @return The private hostname of the destination. Only valid when type=private. Private hostnames currently match only Server Name Indications (SNI). Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return The l4 protocol that matches this destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<String> l4Protocol() {
        return Optional.ofNullable(this.l4Protocol);
    }
    /**
     * @return The port range of the destination. Only valid when type=private. Single ports are supported. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<String> portRange() {
        return Optional.ofNullable(this.portRange);
    }
    /**
     * @return The destination type. Available values: `public`, `private`. Defaults to `public`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return The public URI of the destination. Can include a domain and path with wildcards. Only valid when type=public.
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }
    /**
     * @return The VNet ID of the destination. Only valid when type=private. Private destinations are an early access feature and gated behind a feature flag.
     * 
     */
    public Optional<String> vnetId() {
        return Optional.ofNullable(this.vnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessApplicationDestination defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cidr;
        private @Nullable String hostname;
        private @Nullable String l4Protocol;
        private @Nullable String portRange;
        private @Nullable String type;
        private @Nullable String uri;
        private @Nullable String vnetId;
        public Builder() {}
        public Builder(AccessApplicationDestination defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidr = defaults.cidr;
    	      this.hostname = defaults.hostname;
    	      this.l4Protocol = defaults.l4Protocol;
    	      this.portRange = defaults.portRange;
    	      this.type = defaults.type;
    	      this.uri = defaults.uri;
    	      this.vnetId = defaults.vnetId;
        }

        @CustomType.Setter
        public Builder cidr(@Nullable String cidr) {

            this.cidr = cidr;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder l4Protocol(@Nullable String l4Protocol) {

            this.l4Protocol = l4Protocol;
            return this;
        }
        @CustomType.Setter
        public Builder portRange(@Nullable String portRange) {

            this.portRange = portRange;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder vnetId(@Nullable String vnetId) {

            this.vnetId = vnetId;
            return this;
        }
        public AccessApplicationDestination build() {
            final var _resultValue = new AccessApplicationDestination();
            _resultValue.cidr = cidr;
            _resultValue.hostname = hostname;
            _resultValue.l4Protocol = l4Protocol;
            _resultValue.portRange = portRange;
            _resultValue.type = type;
            _resultValue.uri = uri;
            _resultValue.vnetId = vnetId;
            return _resultValue;
        }
    }
}
