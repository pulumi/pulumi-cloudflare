// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRulesetRule;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRulesetResult {
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    private @Nullable String accountId;
    /**
     * @return An informative description of the ruleset.
     * 
     */
    private String description;
    /**
     * @return The unique ID of the ruleset.
     * 
     */
    private String id;
    /**
     * @return The kind of the ruleset.
     * Available values: &#34;managed&#34;, &#34;custom&#34;, &#34;root&#34;, &#34;zone&#34;.
     * 
     */
    private String kind;
    /**
     * @return The timestamp of when the ruleset was last modified.
     * 
     */
    private String lastUpdated;
    /**
     * @return The human-readable name of the ruleset.
     * 
     */
    private String name;
    /**
     * @return The phase of the ruleset.
     * Available values: &#34;ddos*l4&#34;, &#34;ddos*l7&#34;, &#34;http*config*settings&#34;, &#34;http*custom*errors&#34;, &#34;http*log*custom*fields&#34;, &#34;http*ratelimit&#34;, &#34;http*request*cache*settings&#34;, &#34;http*request*dynamic*redirect&#34;, &#34;http*request*firewall*custom&#34;, &#34;http*request*firewall*managed&#34;, &#34;http*request*late*transform&#34;, &#34;http*request*origin&#34;, &#34;http*request*redirect&#34;, &#34;http*request*sanitize&#34;, &#34;http*request*sbfm&#34;, &#34;http*request*transform&#34;, &#34;http*response*compression&#34;, &#34;http*response*firewall*managed&#34;, &#34;http*response*headers*transform&#34;, &#34;magic*transit&#34;, &#34;magic*transit*ids*managed&#34;, &#34;magic*transit*managed&#34;, &#34;magic*transit_ratelimit&#34;.
     * 
     */
    private String phase;
    /**
     * @return The list of rules in the ruleset.
     * 
     */
    private List<GetRulesetRule> rules;
    /**
     * @return The unique ID of the ruleset.
     * 
     */
    private @Nullable String rulesetId;
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    private @Nullable String zoneId;

    private GetRulesetResult() {}
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return An informative description of the ruleset.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The unique ID of the ruleset.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The kind of the ruleset.
     * Available values: &#34;managed&#34;, &#34;custom&#34;, &#34;root&#34;, &#34;zone&#34;.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return The timestamp of when the ruleset was last modified.
     * 
     */
    public String lastUpdated() {
        return this.lastUpdated;
    }
    /**
     * @return The human-readable name of the ruleset.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The phase of the ruleset.
     * Available values: &#34;ddos*l4&#34;, &#34;ddos*l7&#34;, &#34;http*config*settings&#34;, &#34;http*custom*errors&#34;, &#34;http*log*custom*fields&#34;, &#34;http*ratelimit&#34;, &#34;http*request*cache*settings&#34;, &#34;http*request*dynamic*redirect&#34;, &#34;http*request*firewall*custom&#34;, &#34;http*request*firewall*managed&#34;, &#34;http*request*late*transform&#34;, &#34;http*request*origin&#34;, &#34;http*request*redirect&#34;, &#34;http*request*sanitize&#34;, &#34;http*request*sbfm&#34;, &#34;http*request*transform&#34;, &#34;http*response*compression&#34;, &#34;http*response*firewall*managed&#34;, &#34;http*response*headers*transform&#34;, &#34;magic*transit&#34;, &#34;magic*transit*ids*managed&#34;, &#34;magic*transit*managed&#34;, &#34;magic*transit_ratelimit&#34;.
     * 
     */
    public String phase() {
        return this.phase;
    }
    /**
     * @return The list of rules in the ruleset.
     * 
     */
    public List<GetRulesetRule> rules() {
        return this.rules;
    }
    /**
     * @return The unique ID of the ruleset.
     * 
     */
    public Optional<String> rulesetId() {
        return Optional.ofNullable(this.rulesetId);
    }
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private String description;
        private String id;
        private String kind;
        private String lastUpdated;
        private String name;
        private String phase;
        private List<GetRulesetRule> rules;
        private @Nullable String rulesetId;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(GetRulesetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.lastUpdated = defaults.lastUpdated;
    	      this.name = defaults.name;
    	      this.phase = defaults.phase;
    	      this.rules = defaults.rules;
    	      this.rulesetId = defaults.rulesetId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {

            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdated(String lastUpdated) {
            if (lastUpdated == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "lastUpdated");
            }
            this.lastUpdated = lastUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder phase(String phase) {
            if (phase == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "phase");
            }
            this.phase = phase;
            return this;
        }
        @CustomType.Setter
        public Builder rules(List<GetRulesetRule> rules) {
            if (rules == null) {
              throw new MissingRequiredPropertyException("GetRulesetResult", "rules");
            }
            this.rules = rules;
            return this;
        }
        public Builder rules(GetRulesetRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder rulesetId(@Nullable String rulesetId) {

            this.rulesetId = rulesetId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public GetRulesetResult build() {
            final var _resultValue = new GetRulesetResult();
            _resultValue.accountId = accountId;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.kind = kind;
            _resultValue.lastUpdated = lastUpdated;
            _resultValue.name = name;
            _resultValue.phase = phase;
            _resultValue.rules = rules;
            _resultValue.rulesetId = rulesetId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
