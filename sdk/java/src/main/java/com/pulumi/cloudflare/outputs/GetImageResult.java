// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageResult {
    /**
     * @return Account identifier tag.
     * 
     */
    private String accountId;
    /**
     * @return Image file name.
     * 
     */
    private String filename;
    /**
     * @return Image unique identifier.
     * 
     */
    private String id;
    /**
     * @return Image unique identifier.
     * 
     */
    private String imageId;
    /**
     * @return User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    private String meta;
    /**
     * @return Indicates whether the image can be a accessed only using it&#39;s UID. If set to true, a signed token needs to be generated with a signing key to view the image.
     * 
     */
    private Boolean requireSignedUrls;
    /**
     * @return When the media item was uploaded.
     * 
     */
    private String uploaded;
    /**
     * @return Object specifying available variants for an image.
     * 
     */
    private List<String> variants;

    private GetImageResult() {}
    /**
     * @return Account identifier tag.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Image file name.
     * 
     */
    public String filename() {
        return this.filename;
    }
    /**
     * @return Image unique identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Image unique identifier.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return User modifiable key-value store. Can be used for keeping references to another system of record for managing images. Metadata must not exceed 1024 bytes.
     * 
     */
    public String meta() {
        return this.meta;
    }
    /**
     * @return Indicates whether the image can be a accessed only using it&#39;s UID. If set to true, a signed token needs to be generated with a signing key to view the image.
     * 
     */
    public Boolean requireSignedUrls() {
        return this.requireSignedUrls;
    }
    /**
     * @return When the media item was uploaded.
     * 
     */
    public String uploaded() {
        return this.uploaded;
    }
    /**
     * @return Object specifying available variants for an image.
     * 
     */
    public List<String> variants() {
        return this.variants;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String filename;
        private String id;
        private String imageId;
        private String meta;
        private Boolean requireSignedUrls;
        private String uploaded;
        private List<String> variants;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.filename = defaults.filename;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.meta = defaults.meta;
    	      this.requireSignedUrls = defaults.requireSignedUrls;
    	      this.uploaded = defaults.uploaded;
    	      this.variants = defaults.variants;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder filename(String filename) {
            if (filename == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "filename");
            }
            this.filename = filename;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder meta(String meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            if (requireSignedUrls == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "requireSignedUrls");
            }
            this.requireSignedUrls = requireSignedUrls;
            return this;
        }
        @CustomType.Setter
        public Builder uploaded(String uploaded) {
            if (uploaded == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "uploaded");
            }
            this.uploaded = uploaded;
            return this;
        }
        @CustomType.Setter
        public Builder variants(List<String> variants) {
            if (variants == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "variants");
            }
            this.variants = variants;
            return this;
        }
        public Builder variants(String... variants) {
            return variants(List.of(variants));
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.accountId = accountId;
            _resultValue.filename = filename;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.meta = meta;
            _resultValue.requireSignedUrls = requireSignedUrls;
            _resultValue.uploaded = uploaded;
            _resultValue.variants = variants;
            return _resultValue;
        }
    }
}
