// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.WorkersScriptArgs;
import com.pulumi.cloudflare.inputs.WorkersScriptState;
import com.pulumi.cloudflare.outputs.WorkersScriptAnalyticsEngineBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptD1DatabaseBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptKvNamespaceBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptPlacement;
import com.pulumi.cloudflare.outputs.WorkersScriptPlainTextBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptQueueBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptR2BucketBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptSecretTextBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptServiceBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptWebassemblyBinding;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Cloudflare worker script resource. In order for a script to be active, you&#39;ll also need to setup a `cloudflare.WorkerRoute`.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.WorkersKvNamespace;
 * import com.pulumi.cloudflare.WorkersKvNamespaceArgs;
 * import com.pulumi.cloudflare.WorkersScript;
 * import com.pulumi.cloudflare.WorkersScriptArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptKvNamespaceBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptPlainTextBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptSecretTextBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptWebassemblyBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptServiceBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptR2BucketBindingArgs;
 * import com.pulumi.cloudflare.inputs.WorkersScriptAnalyticsEngineBindingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myNamespace = new WorkersKvNamespace("myNamespace", WorkersKvNamespaceArgs.builder()
 *             .accountId("f037e56e89293a057740de681ac9abbe")
 *             .title("example")
 *             .build());
 * 
 *         // Sets the script with the name "script_1"
 *         var myScript = new WorkersScript("myScript", WorkersScriptArgs.builder()
 *             .accountId("f037e56e89293a057740de681ac9abbe")
 *             .name("script_1")
 *             .content(StdFunctions.file(FileArgs.builder()
 *                 .input("script.js")
 *                 .build()).result())
 *             .kvNamespaceBindings(WorkersScriptKvNamespaceBindingArgs.builder()
 *                 .name("MY_EXAMPLE_KV_NAMESPACE")
 *                 .namespaceId(myNamespace.id())
 *                 .build())
 *             .plainTextBindings(WorkersScriptPlainTextBindingArgs.builder()
 *                 .name("MY_EXAMPLE_PLAIN_TEXT")
 *                 .text("foobar")
 *                 .build())
 *             .secretTextBindings(WorkersScriptSecretTextBindingArgs.builder()
 *                 .name("MY_EXAMPLE_SECRET_TEXT")
 *                 .text(secretFooValue)
 *                 .build())
 *             .webassemblyBindings(WorkersScriptWebassemblyBindingArgs.builder()
 *                 .name("MY_EXAMPLE_WASM")
 *                 .module(StdFunctions.filebase64(Filebase64Args.builder()
 *                     .input("example.wasm")
 *                     .build()).result())
 *                 .build())
 *             .serviceBindings(WorkersScriptServiceBindingArgs.builder()
 *                 .name("MY_SERVICE_BINDING")
 *                 .service("MY_SERVICE")
 *                 .environment("production")
 *                 .build())
 *             .r2BucketBindings(WorkersScriptR2BucketBindingArgs.builder()
 *                 .name("MY_BUCKET")
 *                 .bucketName("MY_BUCKET_NAME")
 *                 .build())
 *             .analyticsEngineBindings(WorkersScriptAnalyticsEngineBindingArgs.builder()
 *                 .name("MY_DATASET")
 *                 .dataset("dataset1")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/workersScript:WorkersScript example &lt;account_id&gt;/&lt;script_name&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/workersScript:WorkersScript")
public class WorkersScript extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier to target for the resource.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account identifier to target for the resource.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    @Export(name="analyticsEngineBindings", refs={List.class,WorkersScriptAnalyticsEngineBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptAnalyticsEngineBinding>> analyticsEngineBindings;

    public Output<Optional<List<WorkersScriptAnalyticsEngineBinding>>> analyticsEngineBindings() {
        return Codegen.optional(this.analyticsEngineBindings);
    }
    /**
     * The date to use for the compatibility flag.
     * 
     */
    @Export(name="compatibilityDate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compatibilityDate;

    /**
     * @return The date to use for the compatibility flag.
     * 
     */
    public Output<Optional<String>> compatibilityDate() {
        return Codegen.optional(this.compatibilityDate);
    }
    /**
     * Compatibility flags used for Worker Scripts.
     * 
     */
    @Export(name="compatibilityFlags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> compatibilityFlags;

    /**
     * @return Compatibility flags used for Worker Scripts.
     * 
     */
    public Output<List<String>> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    /**
     * The script content.
     * 
     */
    @Export(name="content", refs={String.class}, tree="[0]")
    private Output<String> content;

    /**
     * @return The script content.
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    @Export(name="d1DatabaseBindings", refs={List.class,WorkersScriptD1DatabaseBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptD1DatabaseBinding>> d1DatabaseBindings;

    public Output<Optional<List<WorkersScriptD1DatabaseBinding>>> d1DatabaseBindings() {
        return Codegen.optional(this.d1DatabaseBindings);
    }
    /**
     * Name of the Workers for Platforms dispatch namespace.
     * 
     */
    @Export(name="dispatchNamespace", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dispatchNamespace;

    /**
     * @return Name of the Workers for Platforms dispatch namespace.
     * 
     */
    public Output<Optional<String>> dispatchNamespace() {
        return Codegen.optional(this.dispatchNamespace);
    }
    @Export(name="kvNamespaceBindings", refs={List.class,WorkersScriptKvNamespaceBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptKvNamespaceBinding>> kvNamespaceBindings;

    public Output<Optional<List<WorkersScriptKvNamespaceBinding>>> kvNamespaceBindings() {
        return Codegen.optional(this.kvNamespaceBindings);
    }
    /**
     * Enabling allows Worker events to be sent to a defined Logpush destination.
     * 
     */
    @Export(name="logpush", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> logpush;

    /**
     * @return Enabling allows Worker events to be sent to a defined Logpush destination.
     * 
     */
    public Output<Optional<Boolean>> logpush() {
        return Codegen.optional(this.logpush);
    }
    /**
     * Whether to upload Worker as a module.
     * 
     */
    @Export(name="module", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> module;

    /**
     * @return Whether to upload Worker as a module.
     * 
     */
    public Output<Optional<Boolean>> module() {
        return Codegen.optional(this.module);
    }
    /**
     * The name for the script. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name for the script. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="placements", refs={List.class,WorkersScriptPlacement.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptPlacement>> placements;

    public Output<Optional<List<WorkersScriptPlacement>>> placements() {
        return Codegen.optional(this.placements);
    }
    @Export(name="plainTextBindings", refs={List.class,WorkersScriptPlainTextBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptPlainTextBinding>> plainTextBindings;

    public Output<Optional<List<WorkersScriptPlainTextBinding>>> plainTextBindings() {
        return Codegen.optional(this.plainTextBindings);
    }
    @Export(name="queueBindings", refs={List.class,WorkersScriptQueueBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptQueueBinding>> queueBindings;

    public Output<Optional<List<WorkersScriptQueueBinding>>> queueBindings() {
        return Codegen.optional(this.queueBindings);
    }
    @Export(name="r2BucketBindings", refs={List.class,WorkersScriptR2BucketBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptR2BucketBinding>> r2BucketBindings;

    public Output<Optional<List<WorkersScriptR2BucketBinding>>> r2BucketBindings() {
        return Codegen.optional(this.r2BucketBindings);
    }
    @Export(name="secretTextBindings", refs={List.class,WorkersScriptSecretTextBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptSecretTextBinding>> secretTextBindings;

    public Output<Optional<List<WorkersScriptSecretTextBinding>>> secretTextBindings() {
        return Codegen.optional(this.secretTextBindings);
    }
    @Export(name="serviceBindings", refs={List.class,WorkersScriptServiceBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptServiceBinding>> serviceBindings;

    public Output<Optional<List<WorkersScriptServiceBinding>>> serviceBindings() {
        return Codegen.optional(this.serviceBindings);
    }
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> tags;

    public Output<List<String>> tags() {
        return this.tags;
    }
    @Export(name="webassemblyBindings", refs={List.class,WorkersScriptWebassemblyBinding.class}, tree="[0,1]")
    private Output</* @Nullable */ List<WorkersScriptWebassemblyBinding>> webassemblyBindings;

    public Output<Optional<List<WorkersScriptWebassemblyBinding>>> webassemblyBindings() {
        return Codegen.optional(this.webassemblyBindings);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WorkersScript(java.lang.String name) {
        this(name, WorkersScriptArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WorkersScript(java.lang.String name, WorkersScriptArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WorkersScript(java.lang.String name, WorkersScriptArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workersScript:WorkersScript", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WorkersScript(java.lang.String name, Output<java.lang.String> id, @Nullable WorkersScriptState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workersScript:WorkersScript", name, state, makeResourceOptions(options, id), false);
    }

    private static WorkersScriptArgs makeArgs(WorkersScriptArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WorkersScriptArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WorkersScript get(java.lang.String name, Output<java.lang.String> id, @Nullable WorkersScriptState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WorkersScript(name, id, state, options);
    }
}
