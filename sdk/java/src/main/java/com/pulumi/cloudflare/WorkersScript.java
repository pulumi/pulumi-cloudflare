// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.WorkersScriptArgs;
import com.pulumi.cloudflare.inputs.WorkersScriptState;
import com.pulumi.cloudflare.outputs.WorkersScriptAssets;
import com.pulumi.cloudflare.outputs.WorkersScriptBinding;
import com.pulumi.cloudflare.outputs.WorkersScriptMigrations;
import com.pulumi.cloudflare.outputs.WorkersScriptObservability;
import com.pulumi.cloudflare.outputs.WorkersScriptPlacement;
import com.pulumi.cloudflare.outputs.WorkersScriptTailConsumer;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/workersScript:WorkersScript example &#39;&lt;account_id&gt;/&lt;script_name&gt;&#39;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/workersScript:WorkersScript")
public class WorkersScript extends com.pulumi.resources.CustomResource {
    /**
     * Identifier.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * Configuration for assets within a Worker
     * 
     */
    @Export(name="assets", refs={WorkersScriptAssets.class}, tree="[0]")
    private Output</* @Nullable */ WorkersScriptAssets> assets;

    /**
     * @return Configuration for assets within a Worker
     * 
     */
    public Output<Optional<WorkersScriptAssets>> assets() {
        return Codegen.optional(this.assets);
    }
    /**
     * List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    @Export(name="bindings", refs={List.class,WorkersScriptBinding.class}, tree="[0,1]")
    private Output<List<WorkersScriptBinding>> bindings;

    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    public Output<List<WorkersScriptBinding>> bindings() {
        return this.bindings;
    }
    /**
     * Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     * 
     */
    @Export(name="bodyPart", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bodyPart;

    /**
     * @return Name of the part in the multipart request that contains the script (e.g. the file adding a listener to the `fetch` event). Indicates a `service worker syntax` Worker.
     * 
     */
    public Output<Optional<String>> bodyPart() {
        return Codegen.optional(this.bodyPart);
    }
    /**
     * Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    @Export(name="compatibilityDate", refs={String.class}, tree="[0]")
    private Output<String> compatibilityDate;

    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    public Output<String> compatibilityDate() {
        return this.compatibilityDate;
    }
    /**
     * Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    @Export(name="compatibilityFlags", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> compatibilityFlags;

    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    public Output<List<String>> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    /**
     * Module or Service Worker contents of the Worker.
     * 
     */
    @Export(name="content", refs={String.class}, tree="[0]")
    private Output<String> content;

    /**
     * @return Module or Service Worker contents of the Worker.
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    /**
     * When the script was created.
     * 
     */
    @Export(name="createdOn", refs={String.class}, tree="[0]")
    private Output<String> createdOn;

    /**
     * @return When the script was created.
     * 
     */
    public Output<String> createdOn() {
        return this.createdOn;
    }
    /**
     * Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    @Export(name="etag", refs={String.class}, tree="[0]")
    private Output<String> etag;

    /**
     * @return Hashed script content, can be used in a If-None-Match header when updating.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * Whether a Worker contains assets.
     * 
     */
    @Export(name="hasAssets", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hasAssets;

    /**
     * @return Whether a Worker contains assets.
     * 
     */
    public Output<Boolean> hasAssets() {
        return this.hasAssets;
    }
    /**
     * Whether a Worker contains modules.
     * 
     */
    @Export(name="hasModules", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> hasModules;

    /**
     * @return Whether a Worker contains modules.
     * 
     */
    public Output<Boolean> hasModules() {
        return this.hasModules;
    }
    /**
     * Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     * 
     */
    @Export(name="keepAssets", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> keepAssets;

    /**
     * @return Retain assets which exist for a previously uploaded Worker version; used in lieu of providing a completion token.
     * 
     */
    public Output<Optional<Boolean>> keepAssets() {
        return Codegen.optional(this.keepAssets);
    }
    /**
     * List of binding types to keep from previous_upload.
     * 
     */
    @Export(name="keepBindings", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> keepBindings;

    /**
     * @return List of binding types to keep from previous_upload.
     * 
     */
    public Output<Optional<List<String>>> keepBindings() {
        return Codegen.optional(this.keepBindings);
    }
    /**
     * Whether Logpush is turned on for the Worker.
     * 
     */
    @Export(name="logpush", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> logpush;

    /**
     * @return Whether Logpush is turned on for the Worker.
     * 
     */
    public Output<Boolean> logpush() {
        return this.logpush;
    }
    /**
     * Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     * 
     */
    @Export(name="mainModule", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mainModule;

    /**
     * @return Name of the part in the multipart request that contains the main module (e.g. the file exporting a `fetch` handler). Indicates a `module syntax` Worker.
     * 
     */
    public Output<Optional<String>> mainModule() {
        return Codegen.optional(this.mainModule);
    }
    /**
     * Migrations to apply for Durable Objects associated with this Worker.
     * 
     */
    @Export(name="migrations", refs={WorkersScriptMigrations.class}, tree="[0]")
    private Output<WorkersScriptMigrations> migrations;

    /**
     * @return Migrations to apply for Durable Objects associated with this Worker.
     * 
     */
    public Output<WorkersScriptMigrations> migrations() {
        return this.migrations;
    }
    /**
     * When the script was last modified.
     * 
     */
    @Export(name="modifiedOn", refs={String.class}, tree="[0]")
    private Output<String> modifiedOn;

    /**
     * @return When the script was last modified.
     * 
     */
    public Output<String> modifiedOn() {
        return this.modifiedOn;
    }
    /**
     * Observability settings for the Worker.
     * 
     */
    @Export(name="observability", refs={WorkersScriptObservability.class}, tree="[0]")
    private Output</* @Nullable */ WorkersScriptObservability> observability;

    /**
     * @return Observability settings for the Worker.
     * 
     */
    public Output<Optional<WorkersScriptObservability>> observability() {
        return Codegen.optional(this.observability);
    }
    /**
     * Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    @Export(name="placement", refs={WorkersScriptPlacement.class}, tree="[0]")
    private Output<WorkersScriptPlacement> placement;

    /**
     * @return Configuration for [Smart Placement](https://developers.cloudflare.com/workers/configuration/smart-placement).
     * 
     */
    public Output<WorkersScriptPlacement> placement() {
        return this.placement;
    }
    /**
     * Name of the script, used in URLs and route configuration.
     * 
     */
    @Export(name="scriptName", refs={String.class}, tree="[0]")
    private Output<String> scriptName;

    /**
     * @return Name of the script, used in URLs and route configuration.
     * 
     */
    public Output<String> scriptName() {
        return this.scriptName;
    }
    @Export(name="startupTimeMs", refs={Integer.class}, tree="[0]")
    private Output<Integer> startupTimeMs;

    public Output<Integer> startupTimeMs() {
        return this.startupTimeMs;
    }
    /**
     * List of Workers that will consume logs from the attached Worker.
     * 
     */
    @Export(name="tailConsumers", refs={List.class,WorkersScriptTailConsumer.class}, tree="[0,1]")
    private Output<List<WorkersScriptTailConsumer>> tailConsumers;

    /**
     * @return List of Workers that will consume logs from the attached Worker.
     * 
     */
    public Output<List<WorkersScriptTailConsumer>> tailConsumers() {
        return this.tailConsumers;
    }
    /**
     * Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;.
     * 
     */
    @Export(name="usageModel", refs={String.class}, tree="[0]")
    private Output<String> usageModel;

    /**
     * @return Usage model for the Worker invocations.
     * Available values: &#34;standard&#34;.
     * 
     */
    public Output<String> usageModel() {
        return this.usageModel;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public WorkersScript(java.lang.String name) {
        this(name, WorkersScriptArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public WorkersScript(java.lang.String name, WorkersScriptArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public WorkersScript(java.lang.String name, WorkersScriptArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workersScript:WorkersScript", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private WorkersScript(java.lang.String name, Output<java.lang.String> id, @Nullable WorkersScriptState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/workersScript:WorkersScript", name, state, makeResourceOptions(options, id), false);
    }

    private static WorkersScriptArgs makeArgs(WorkersScriptArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? WorkersScriptArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("cloudflare:index/workerScript:WorkerScript").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static WorkersScript get(java.lang.String name, Output<java.lang.String> id, @Nullable WorkersScriptState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new WorkersScript(name, id, state, options);
    }
}
