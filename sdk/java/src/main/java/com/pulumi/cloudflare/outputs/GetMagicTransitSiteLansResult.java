// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLansResultNat;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLansResultRoutedSubnet;
import com.pulumi.cloudflare.outputs.GetMagicTransitSiteLansResultStaticAddressing;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMagicTransitSiteLansResult {
    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    private Boolean haLink;
    /**
     * @return Identifier
     * 
     */
    private String id;
    private String name;
    private GetMagicTransitSiteLansResultNat nat;
    private Integer physport;
    private List<GetMagicTransitSiteLansResultRoutedSubnet> routedSubnets;
    /**
     * @return Identifier
     * 
     */
    private String siteId;
    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    private GetMagicTransitSiteLansResultStaticAddressing staticAddressing;
    /**
     * @return VLAN ID. Use zero for untagged.
     * 
     */
    private Integer vlanTag;

    private GetMagicTransitSiteLansResult() {}
    /**
     * @return mark true to use this LAN for HA probing. only works for site with HA turned on. only one LAN can be set as the ha_link.
     * 
     */
    public Boolean haLink() {
        return this.haLink;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public GetMagicTransitSiteLansResultNat nat() {
        return this.nat;
    }
    public Integer physport() {
        return this.physport;
    }
    public List<GetMagicTransitSiteLansResultRoutedSubnet> routedSubnets() {
        return this.routedSubnets;
    }
    /**
     * @return Identifier
     * 
     */
    public String siteId() {
        return this.siteId;
    }
    /**
     * @return If the site is not configured in high availability mode, this configuration is optional (if omitted, use DHCP). However, if in high availability mode, static*address is required along with secondary and virtual address.
     * 
     */
    public GetMagicTransitSiteLansResultStaticAddressing staticAddressing() {
        return this.staticAddressing;
    }
    /**
     * @return VLAN ID. Use zero for untagged.
     * 
     */
    public Integer vlanTag() {
        return this.vlanTag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitSiteLansResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean haLink;
        private String id;
        private String name;
        private GetMagicTransitSiteLansResultNat nat;
        private Integer physport;
        private List<GetMagicTransitSiteLansResultRoutedSubnet> routedSubnets;
        private String siteId;
        private GetMagicTransitSiteLansResultStaticAddressing staticAddressing;
        private Integer vlanTag;
        public Builder() {}
        public Builder(GetMagicTransitSiteLansResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.haLink = defaults.haLink;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nat = defaults.nat;
    	      this.physport = defaults.physport;
    	      this.routedSubnets = defaults.routedSubnets;
    	      this.siteId = defaults.siteId;
    	      this.staticAddressing = defaults.staticAddressing;
    	      this.vlanTag = defaults.vlanTag;
        }

        @CustomType.Setter
        public Builder haLink(Boolean haLink) {
            if (haLink == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "haLink");
            }
            this.haLink = haLink;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat(GetMagicTransitSiteLansResultNat nat) {
            if (nat == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "nat");
            }
            this.nat = nat;
            return this;
        }
        @CustomType.Setter
        public Builder physport(Integer physport) {
            if (physport == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "physport");
            }
            this.physport = physport;
            return this;
        }
        @CustomType.Setter
        public Builder routedSubnets(List<GetMagicTransitSiteLansResultRoutedSubnet> routedSubnets) {
            if (routedSubnets == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "routedSubnets");
            }
            this.routedSubnets = routedSubnets;
            return this;
        }
        public Builder routedSubnets(GetMagicTransitSiteLansResultRoutedSubnet... routedSubnets) {
            return routedSubnets(List.of(routedSubnets));
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder staticAddressing(GetMagicTransitSiteLansResultStaticAddressing staticAddressing) {
            if (staticAddressing == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "staticAddressing");
            }
            this.staticAddressing = staticAddressing;
            return this;
        }
        @CustomType.Setter
        public Builder vlanTag(Integer vlanTag) {
            if (vlanTag == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitSiteLansResult", "vlanTag");
            }
            this.vlanTag = vlanTag;
            return this;
        }
        public GetMagicTransitSiteLansResult build() {
            final var _resultValue = new GetMagicTransitSiteLansResult();
            _resultValue.haLink = haLink;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nat = nat;
            _resultValue.physport = physport;
            _resultValue.routedSubnets = routedSubnets;
            _resultValue.siteId = siteId;
            _resultValue.staticAddressing = staticAddressing;
            _resultValue.vlanTag = vlanTag;
            return _resultValue;
        }
    }
}
