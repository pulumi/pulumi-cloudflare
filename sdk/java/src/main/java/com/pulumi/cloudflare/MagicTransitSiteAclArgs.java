// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.MagicTransitSiteAclLan1Args;
import com.pulumi.cloudflare.inputs.MagicTransitSiteAclLan2Args;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteAclArgs extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteAclArgs Empty = new MagicTransitSiteAclArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Description for the ACL.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the ACL.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     * 
     */
    @Import(name="forwardLocally")
    private @Nullable Output<Boolean> forwardLocally;

    /**
     * @return The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
     * 
     */
    public Optional<Output<Boolean>> forwardLocally() {
        return Optional.ofNullable(this.forwardLocally);
    }

    @Import(name="lan1", required=true)
    private Output<MagicTransitSiteAclLan1Args> lan1;

    public Output<MagicTransitSiteAclLan1Args> lan1() {
        return this.lan1;
    }

    @Import(name="lan2", required=true)
    private Output<MagicTransitSiteAclLan2Args> lan2;

    public Output<MagicTransitSiteAclLan2Args> lan2() {
        return this.lan2;
    }

    /**
     * The name of the ACL.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the ACL.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="protocols")
    private @Nullable Output<List<String>> protocols;

    public Optional<Output<List<String>>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="siteId", required=true)
    private Output<String> siteId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> siteId() {
        return this.siteId;
    }

    /**
     * The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
     * 
     */
    @Import(name="unidirectional")
    private @Nullable Output<Boolean> unidirectional;

    /**
     * @return The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
     * 
     */
    public Optional<Output<Boolean>> unidirectional() {
        return Optional.ofNullable(this.unidirectional);
    }

    private MagicTransitSiteAclArgs() {}

    private MagicTransitSiteAclArgs(MagicTransitSiteAclArgs $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.forwardLocally = $.forwardLocally;
        this.lan1 = $.lan1;
        this.lan2 = $.lan2;
        this.name = $.name;
        this.protocols = $.protocols;
        this.siteId = $.siteId;
        this.unidirectional = $.unidirectional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteAclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteAclArgs $;

        public Builder() {
            $ = new MagicTransitSiteAclArgs();
        }

        public Builder(MagicTransitSiteAclArgs defaults) {
            $ = new MagicTransitSiteAclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description Description for the ACL.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the ACL.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param forwardLocally The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
         * 
         * @return builder
         * 
         */
        public Builder forwardLocally(@Nullable Output<Boolean> forwardLocally) {
            $.forwardLocally = forwardLocally;
            return this;
        }

        /**
         * @param forwardLocally The desired forwarding action for this ACL policy. If set to &#34;false&#34;, the policy will forward traffic to Cloudflare. If set to &#34;true&#34;, the policy will forward traffic locally on the Magic Connector. If not included in request, will default to false.
         * 
         * @return builder
         * 
         */
        public Builder forwardLocally(Boolean forwardLocally) {
            return forwardLocally(Output.of(forwardLocally));
        }

        public Builder lan1(Output<MagicTransitSiteAclLan1Args> lan1) {
            $.lan1 = lan1;
            return this;
        }

        public Builder lan1(MagicTransitSiteAclLan1Args lan1) {
            return lan1(Output.of(lan1));
        }

        public Builder lan2(Output<MagicTransitSiteAclLan2Args> lan2) {
            $.lan2 = lan2;
            return this;
        }

        public Builder lan2(MagicTransitSiteAclLan2Args lan2) {
            return lan2(Output.of(lan2));
        }

        /**
         * @param name The name of the ACL.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the ACL.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder protocols(@Nullable Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        /**
         * @param siteId Identifier
         * 
         * @return builder
         * 
         */
        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        /**
         * @param unidirectional The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
         * 
         * @return builder
         * 
         */
        public Builder unidirectional(@Nullable Output<Boolean> unidirectional) {
            $.unidirectional = unidirectional;
            return this;
        }

        /**
         * @param unidirectional The desired traffic direction for this ACL policy. If set to &#34;false&#34;, the policy will allow bidirectional traffic. If set to &#34;true&#34;, the policy will only allow traffic in one direction. If not included in request, will default to false.
         * 
         * @return builder
         * 
         */
        public Builder unidirectional(Boolean unidirectional) {
            return unidirectional(Output.of(unidirectional));
        }

        public MagicTransitSiteAclArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclArgs", "accountId");
            }
            if ($.lan1 == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclArgs", "lan1");
            }
            if ($.lan2 == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclArgs", "lan2");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclArgs", "name");
            }
            if ($.siteId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclArgs", "siteId");
            }
            return $;
        }
    }

}
