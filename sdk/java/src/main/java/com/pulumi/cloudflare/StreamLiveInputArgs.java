// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.StreamLiveInputRecordingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamLiveInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamLiveInputArgs Empty = new StreamLiveInputArgs();

    /**
     * Identifier.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Sets the creator ID asssociated with this live input.
     * 
     */
    @Import(name="defaultCreator")
    private @Nullable Output<String> defaultCreator;

    /**
     * @return Sets the creator ID asssociated with this live input.
     * 
     */
    public Optional<Output<String>> defaultCreator() {
        return Optional.ofNullable(this.defaultCreator);
    }

    /**
     * Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    @Import(name="deleteRecordingAfterDays")
    private @Nullable Output<Double> deleteRecordingAfterDays;

    /**
     * @return Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
     * 
     */
    public Optional<Output<Double>> deleteRecordingAfterDays() {
        return Optional.ofNullable(this.deleteRecordingAfterDays);
    }

    /**
     * A unique identifier for a live input.
     * 
     */
    @Import(name="liveInputIdentifier")
    private @Nullable Output<String> liveInputIdentifier;

    /**
     * @return A unique identifier for a live input.
     * 
     */
    public Optional<Output<String>> liveInputIdentifier() {
        return Optional.ofNullable(this.liveInputIdentifier);
    }

    /**
     * A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    @Import(name="meta")
    private @Nullable Output<String> meta;

    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing live inputs.
     * 
     */
    public Optional<Output<String>> meta() {
        return Optional.ofNullable(this.meta);
    }

    /**
     * Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    @Import(name="recording")
    private @Nullable Output<StreamLiveInputRecordingArgs> recording;

    /**
     * @return Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
     * 
     */
    public Optional<Output<StreamLiveInputRecordingArgs>> recording() {
        return Optional.ofNullable(this.recording);
    }

    private StreamLiveInputArgs() {}

    private StreamLiveInputArgs(StreamLiveInputArgs $) {
        this.accountId = $.accountId;
        this.defaultCreator = $.defaultCreator;
        this.deleteRecordingAfterDays = $.deleteRecordingAfterDays;
        this.liveInputIdentifier = $.liveInputIdentifier;
        this.meta = $.meta;
        this.recording = $.recording;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamLiveInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamLiveInputArgs $;

        public Builder() {
            $ = new StreamLiveInputArgs();
        }

        public Builder(StreamLiveInputArgs defaults) {
            $ = new StreamLiveInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param defaultCreator Sets the creator ID asssociated with this live input.
         * 
         * @return builder
         * 
         */
        public Builder defaultCreator(@Nullable Output<String> defaultCreator) {
            $.defaultCreator = defaultCreator;
            return this;
        }

        /**
         * @param defaultCreator Sets the creator ID asssociated with this live input.
         * 
         * @return builder
         * 
         */
        public Builder defaultCreator(String defaultCreator) {
            return defaultCreator(Output.of(defaultCreator));
        }

        /**
         * @param deleteRecordingAfterDays Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRecordingAfterDays(@Nullable Output<Double> deleteRecordingAfterDays) {
            $.deleteRecordingAfterDays = deleteRecordingAfterDays;
            return this;
        }

        /**
         * @param deleteRecordingAfterDays Indicates the number of days after which the live inputs recordings will be deleted. When a stream completes and the recording is ready, the value is used to calculate a scheduled deletion date for that recording. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion.
         * 
         * @return builder
         * 
         */
        public Builder deleteRecordingAfterDays(Double deleteRecordingAfterDays) {
            return deleteRecordingAfterDays(Output.of(deleteRecordingAfterDays));
        }

        /**
         * @param liveInputIdentifier A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder liveInputIdentifier(@Nullable Output<String> liveInputIdentifier) {
            $.liveInputIdentifier = liveInputIdentifier;
            return this;
        }

        /**
         * @param liveInputIdentifier A unique identifier for a live input.
         * 
         * @return builder
         * 
         */
        public Builder liveInputIdentifier(String liveInputIdentifier) {
            return liveInputIdentifier(Output.of(liveInputIdentifier));
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing live inputs.
         * 
         * @return builder
         * 
         */
        public Builder meta(@Nullable Output<String> meta) {
            $.meta = meta;
            return this;
        }

        /**
         * @param meta A user modifiable key-value store used to reference other systems of record for managing live inputs.
         * 
         * @return builder
         * 
         */
        public Builder meta(String meta) {
            return meta(Output.of(meta));
        }

        /**
         * @param recording Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder recording(@Nullable Output<StreamLiveInputRecordingArgs> recording) {
            $.recording = recording;
            return this;
        }

        /**
         * @param recording Records the input to a Cloudflare Stream video. Behavior depends on the mode. In most cases, the video will initially be viewable as a live video and transition to on-demand after a condition is satisfied.
         * 
         * @return builder
         * 
         */
        public Builder recording(StreamLiveInputRecordingArgs recording) {
            return recording(Output.of(recording));
        }

        public StreamLiveInputArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("StreamLiveInputArgs", "accountId");
            }
            return $;
        }
    }

}
