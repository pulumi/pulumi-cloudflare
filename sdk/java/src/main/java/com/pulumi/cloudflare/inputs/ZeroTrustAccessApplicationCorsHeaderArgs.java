// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustAccessApplicationCorsHeaderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustAccessApplicationCorsHeaderArgs Empty = new ZeroTrustAccessApplicationCorsHeaderArgs();

    /**
     * Value to determine whether all HTTP headers are exposed.
     * 
     */
    @Import(name="allowAllHeaders")
    private @Nullable Output<Boolean> allowAllHeaders;

    /**
     * @return Value to determine whether all HTTP headers are exposed.
     * 
     */
    public Optional<Output<Boolean>> allowAllHeaders() {
        return Optional.ofNullable(this.allowAllHeaders);
    }

    /**
     * Value to determine whether all methods are exposed.
     * 
     */
    @Import(name="allowAllMethods")
    private @Nullable Output<Boolean> allowAllMethods;

    /**
     * @return Value to determine whether all methods are exposed.
     * 
     */
    public Optional<Output<Boolean>> allowAllMethods() {
        return Optional.ofNullable(this.allowAllMethods);
    }

    /**
     * Value to determine whether all origins are permitted to make CORS requests.
     * 
     */
    @Import(name="allowAllOrigins")
    private @Nullable Output<Boolean> allowAllOrigins;

    /**
     * @return Value to determine whether all origins are permitted to make CORS requests.
     * 
     */
    public Optional<Output<Boolean>> allowAllOrigins() {
        return Optional.ofNullable(this.allowAllOrigins);
    }

    /**
     * Value to determine if credentials (cookies, authorization headers, or TLS client certificates) are included with requests.
     * 
     */
    @Import(name="allowCredentials")
    private @Nullable Output<Boolean> allowCredentials;

    /**
     * @return Value to determine if credentials (cookies, authorization headers, or TLS client certificates) are included with requests.
     * 
     */
    public Optional<Output<Boolean>> allowCredentials() {
        return Optional.ofNullable(this.allowCredentials);
    }

    /**
     * List of HTTP headers to expose via CORS.
     * 
     */
    @Import(name="allowedHeaders")
    private @Nullable Output<List<String>> allowedHeaders;

    /**
     * @return List of HTTP headers to expose via CORS.
     * 
     */
    public Optional<Output<List<String>>> allowedHeaders() {
        return Optional.ofNullable(this.allowedHeaders);
    }

    /**
     * List of methods to expose via CORS.
     * 
     */
    @Import(name="allowedMethods")
    private @Nullable Output<List<String>> allowedMethods;

    /**
     * @return List of methods to expose via CORS.
     * 
     */
    public Optional<Output<List<String>>> allowedMethods() {
        return Optional.ofNullable(this.allowedMethods);
    }

    /**
     * List of origins permitted to make CORS requests.
     * 
     */
    @Import(name="allowedOrigins")
    private @Nullable Output<List<String>> allowedOrigins;

    /**
     * @return List of origins permitted to make CORS requests.
     * 
     */
    public Optional<Output<List<String>>> allowedOrigins() {
        return Optional.ofNullable(this.allowedOrigins);
    }

    /**
     * The maximum time a preflight request will be cached.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Output<Integer> maxAge;

    /**
     * @return The maximum time a preflight request will be cached.
     * 
     */
    public Optional<Output<Integer>> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    private ZeroTrustAccessApplicationCorsHeaderArgs() {}

    private ZeroTrustAccessApplicationCorsHeaderArgs(ZeroTrustAccessApplicationCorsHeaderArgs $) {
        this.allowAllHeaders = $.allowAllHeaders;
        this.allowAllMethods = $.allowAllMethods;
        this.allowAllOrigins = $.allowAllOrigins;
        this.allowCredentials = $.allowCredentials;
        this.allowedHeaders = $.allowedHeaders;
        this.allowedMethods = $.allowedMethods;
        this.allowedOrigins = $.allowedOrigins;
        this.maxAge = $.maxAge;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustAccessApplicationCorsHeaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustAccessApplicationCorsHeaderArgs $;

        public Builder() {
            $ = new ZeroTrustAccessApplicationCorsHeaderArgs();
        }

        public Builder(ZeroTrustAccessApplicationCorsHeaderArgs defaults) {
            $ = new ZeroTrustAccessApplicationCorsHeaderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowAllHeaders Value to determine whether all HTTP headers are exposed.
         * 
         * @return builder
         * 
         */
        public Builder allowAllHeaders(@Nullable Output<Boolean> allowAllHeaders) {
            $.allowAllHeaders = allowAllHeaders;
            return this;
        }

        /**
         * @param allowAllHeaders Value to determine whether all HTTP headers are exposed.
         * 
         * @return builder
         * 
         */
        public Builder allowAllHeaders(Boolean allowAllHeaders) {
            return allowAllHeaders(Output.of(allowAllHeaders));
        }

        /**
         * @param allowAllMethods Value to determine whether all methods are exposed.
         * 
         * @return builder
         * 
         */
        public Builder allowAllMethods(@Nullable Output<Boolean> allowAllMethods) {
            $.allowAllMethods = allowAllMethods;
            return this;
        }

        /**
         * @param allowAllMethods Value to determine whether all methods are exposed.
         * 
         * @return builder
         * 
         */
        public Builder allowAllMethods(Boolean allowAllMethods) {
            return allowAllMethods(Output.of(allowAllMethods));
        }

        /**
         * @param allowAllOrigins Value to determine whether all origins are permitted to make CORS requests.
         * 
         * @return builder
         * 
         */
        public Builder allowAllOrigins(@Nullable Output<Boolean> allowAllOrigins) {
            $.allowAllOrigins = allowAllOrigins;
            return this;
        }

        /**
         * @param allowAllOrigins Value to determine whether all origins are permitted to make CORS requests.
         * 
         * @return builder
         * 
         */
        public Builder allowAllOrigins(Boolean allowAllOrigins) {
            return allowAllOrigins(Output.of(allowAllOrigins));
        }

        /**
         * @param allowCredentials Value to determine if credentials (cookies, authorization headers, or TLS client certificates) are included with requests.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(@Nullable Output<Boolean> allowCredentials) {
            $.allowCredentials = allowCredentials;
            return this;
        }

        /**
         * @param allowCredentials Value to determine if credentials (cookies, authorization headers, or TLS client certificates) are included with requests.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(Boolean allowCredentials) {
            return allowCredentials(Output.of(allowCredentials));
        }

        /**
         * @param allowedHeaders List of HTTP headers to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(@Nullable Output<List<String>> allowedHeaders) {
            $.allowedHeaders = allowedHeaders;
            return this;
        }

        /**
         * @param allowedHeaders List of HTTP headers to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(List<String> allowedHeaders) {
            return allowedHeaders(Output.of(allowedHeaders));
        }

        /**
         * @param allowedHeaders List of HTTP headers to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(String... allowedHeaders) {
            return allowedHeaders(List.of(allowedHeaders));
        }

        /**
         * @param allowedMethods List of methods to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(@Nullable Output<List<String>> allowedMethods) {
            $.allowedMethods = allowedMethods;
            return this;
        }

        /**
         * @param allowedMethods List of methods to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            return allowedMethods(Output.of(allowedMethods));
        }

        /**
         * @param allowedMethods List of methods to expose via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }

        /**
         * @param allowedOrigins List of origins permitted to make CORS requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(@Nullable Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins List of origins permitted to make CORS requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins List of origins permitted to make CORS requests.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param maxAge The maximum time a preflight request will be cached.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(@Nullable Output<Integer> maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param maxAge The maximum time a preflight request will be cached.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(Integer maxAge) {
            return maxAge(Output.of(maxAge));
        }

        public ZeroTrustAccessApplicationCorsHeaderArgs build() {
            return $;
        }
    }

}
