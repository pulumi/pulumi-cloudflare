// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamLiveInputRecordingArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamLiveInputRecordingArgs Empty = new StreamLiveInputRecordingArgs();

    /**
     * Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
     * 
     */
    @Import(name="allowedOrigins")
    private @Nullable Output<List<String>> allowedOrigins;

    /**
     * @return Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
     * 
     */
    public Optional<Output<List<String>>> allowedOrigins() {
        return Optional.ofNullable(this.allowedOrigins);
    }

    /**
     * Disables reporting the number of live viewers when this property is set to `true`.
     * 
     */
    @Import(name="hideLiveViewerCount")
    private @Nullable Output<Boolean> hideLiveViewerCount;

    /**
     * @return Disables reporting the number of live viewers when this property is set to `true`.
     * 
     */
    public Optional<Output<Boolean>> hideLiveViewerCount() {
        return Optional.ofNullable(this.hideLiveViewerCount);
    }

    /**
     * Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
     * 
     */
    @Import(name="requireSignedUrls")
    private @Nullable Output<Boolean> requireSignedUrls;

    /**
     * @return Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
     * 
     */
    public Optional<Output<Boolean>> requireSignedUrls() {
        return Optional.ofNullable(this.requireSignedUrls);
    }

    /**
     * Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    private StreamLiveInputRecordingArgs() {}

    private StreamLiveInputRecordingArgs(StreamLiveInputRecordingArgs $) {
        this.allowedOrigins = $.allowedOrigins;
        this.hideLiveViewerCount = $.hideLiveViewerCount;
        this.mode = $.mode;
        this.requireSignedUrls = $.requireSignedUrls;
        this.timeoutSeconds = $.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamLiveInputRecordingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamLiveInputRecordingArgs $;

        public Builder() {
            $ = new StreamLiveInputRecordingArgs();
        }

        public Builder(StreamLiveInputRecordingArgs defaults) {
            $ = new StreamLiveInputRecordingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(@Nullable Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins Lists the origins allowed to display videos created with this input. Enter allowed origin domains in an array and use `*` for wildcard subdomains. An empty array allows videos to be viewed on any origin.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param hideLiveViewerCount Disables reporting the number of live viewers when this property is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder hideLiveViewerCount(@Nullable Output<Boolean> hideLiveViewerCount) {
            $.hideLiveViewerCount = hideLiveViewerCount;
            return this;
        }

        /**
         * @param hideLiveViewerCount Disables reporting the number of live viewers when this property is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder hideLiveViewerCount(Boolean hideLiveViewerCount) {
            return hideLiveViewerCount(Output.of(hideLiveViewerCount));
        }

        /**
         * @param mode Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies the recording behavior for the live input. Set this value to `off` to prevent a recording. Set the value to `automatic` to begin a recording and transition to on-demand after Stream Live stops receiving input.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param requireSignedUrls Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(@Nullable Output<Boolean> requireSignedUrls) {
            $.requireSignedUrls = requireSignedUrls;
            return this;
        }

        /**
         * @param requireSignedUrls Indicates if a video using the live input has the `requireSignedURLs` property set. Also enforces access controls on any video recording of the livestream with the live input.
         * 
         * @return builder
         * 
         */
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            return requireSignedUrls(Output.of(requireSignedUrls));
        }

        /**
         * @param timeoutSeconds Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds Determines the amount of time a live input configured in `automatic` mode should wait before a recording transitions from live to on-demand. `0` is recommended for most use cases and indicates the platform default should be used.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public StreamLiveInputRecordingArgs build() {
            return $;
        }
    }

}
