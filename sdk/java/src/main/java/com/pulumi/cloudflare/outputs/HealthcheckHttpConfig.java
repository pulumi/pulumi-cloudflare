// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HealthcheckHttpConfig {
    /**
     * @return Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    private @Nullable Boolean allowInsecure;
    /**
     * @return A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    private @Nullable String expectedBody;
    /**
     * @return The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    private @Nullable List<String> expectedCodes;
    /**
     * @return Follow redirects if the origin returns a 3xx status code.
     * 
     */
    private @Nullable Boolean followRedirects;
    /**
     * @return The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    private @Nullable Map<String,List<String>> header;
    /**
     * @return The HTTP method to use for the health check.
     * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
     * 
     */
    private @Nullable String method;
    /**
     * @return The endpoint path to health check against.
     * 
     */
    private @Nullable String path;
    /**
     * @return Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    private @Nullable Integer port;

    private HealthcheckHttpConfig() {}
    /**
     * @return Do not validate the certificate when the health check uses HTTPS.
     * 
     */
    public Optional<Boolean> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }
    /**
     * @return A case-insensitive sub-string to look for in the response body. If this string is not found, the origin will be marked as unhealthy.
     * 
     */
    public Optional<String> expectedBody() {
        return Optional.ofNullable(this.expectedBody);
    }
    /**
     * @return The expected HTTP response codes (e.g. &#34;200&#34;) or code ranges (e.g. &#34;2xx&#34; for all codes starting with 2) of the health check.
     * 
     */
    public List<String> expectedCodes() {
        return this.expectedCodes == null ? List.of() : this.expectedCodes;
    }
    /**
     * @return Follow redirects if the origin returns a 3xx status code.
     * 
     */
    public Optional<Boolean> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }
    /**
     * @return The HTTP request headers to send in the health check. It is recommended you set a Host header by default. The User-Agent header cannot be overridden.
     * 
     */
    public Map<String,List<String>> header() {
        return this.header == null ? Map.of() : this.header;
    }
    /**
     * @return The HTTP method to use for the health check.
     * Available values: &#34;GET&#34;, &#34;HEAD&#34;.
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return The endpoint path to health check against.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Port number to connect to for the health check. Defaults to 80 if type is HTTP or 443 if type is HTTPS.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HealthcheckHttpConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allowInsecure;
        private @Nullable String expectedBody;
        private @Nullable List<String> expectedCodes;
        private @Nullable Boolean followRedirects;
        private @Nullable Map<String,List<String>> header;
        private @Nullable String method;
        private @Nullable String path;
        private @Nullable Integer port;
        public Builder() {}
        public Builder(HealthcheckHttpConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.expectedBody = defaults.expectedBody;
    	      this.expectedCodes = defaults.expectedCodes;
    	      this.followRedirects = defaults.followRedirects;
    	      this.header = defaults.header;
    	      this.method = defaults.method;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
        }

        @CustomType.Setter
        public Builder allowInsecure(@Nullable Boolean allowInsecure) {

            this.allowInsecure = allowInsecure;
            return this;
        }
        @CustomType.Setter
        public Builder expectedBody(@Nullable String expectedBody) {

            this.expectedBody = expectedBody;
            return this;
        }
        @CustomType.Setter
        public Builder expectedCodes(@Nullable List<String> expectedCodes) {

            this.expectedCodes = expectedCodes;
            return this;
        }
        public Builder expectedCodes(String... expectedCodes) {
            return expectedCodes(List.of(expectedCodes));
        }
        @CustomType.Setter
        public Builder followRedirects(@Nullable Boolean followRedirects) {

            this.followRedirects = followRedirects;
            return this;
        }
        @CustomType.Setter
        public Builder header(@Nullable Map<String,List<String>> header) {

            this.header = header;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        public HealthcheckHttpConfig build() {
            final var _resultValue = new HealthcheckHttpConfig();
            _resultValue.allowInsecure = allowInsecure;
            _resultValue.expectedBody = expectedBody;
            _resultValue.expectedCodes = expectedCodes;
            _resultValue.followRedirects = followRedirects;
            _resultValue.header = header;
            _resultValue.method = method;
            _resultValue.path = path;
            _resultValue.port = port;
            return _resultValue;
        }
    }
}
