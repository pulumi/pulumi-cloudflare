// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.ZeroTrustAccessMtlsCertificateArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustAccessMtlsCertificateState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Cloudflare Access Mutual TLS Certificate resource.
 * Mutual TLS authentication ensures that the traffic is secure and
 * trusted in both directions between a client and server and can be
 *  used with Access to only allows requests from devices with a
 *  corresponding client certificate.
 * 
 * &gt; It&#39;s required that an `account_id` or `zone_id` is provided and in
 *    most cases using either is fine. However, if you&#39;re using a scoped
 *    access token, you must provide the argument that matches the token&#39;s
 *    scope. For example, an access token that is scoped to the &#34;example.com&#34;
 *    zone needs to use the `zone_id` argument.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.ZeroTrustAccessMtlsCertificate;
 * import com.pulumi.cloudflare.ZeroTrustAccessMtlsCertificateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myCert = new ZeroTrustAccessMtlsCertificate("myCert", ZeroTrustAccessMtlsCertificateArgs.builder()
 *             .zoneId("0da42c8d2132a9ddaf714f9e7c920711")
 *             .name("My Root Cert")
 *             .certificate(caPem)
 *             .associatedHostnames("staging.example.com")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Account level import.
 * 
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate cloudflare_zero_sd -t_access_mtls_certificate.example account/&lt;account_id&gt;/&lt;mutual_tls_certificate_id&gt;
 * ```
 * 
 * Zone level import.
 * 
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate cloudflare_zero_sd -t_access_mtls_certificate.example zone/&lt;zone_id&gt;/&lt;mutual_tls_certificate_id&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate")
public class ZeroTrustAccessMtlsCertificate extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account identifier to target for the resource. Conflicts with `zone_id`.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * The hostnames that will be prompted for this certificate.
     * 
     */
    @Export(name="associatedHostnames", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> associatedHostnames;

    /**
     * @return The hostnames that will be prompted for this certificate.
     * 
     */
    public Output<Optional<List<String>>> associatedHostnames() {
        return Codegen.optional(this.associatedHostnames);
    }
    /**
     * The Root CA for your certificates.
     * 
     */
    @Export(name="certificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certificate;

    /**
     * @return The Root CA for your certificates.
     * 
     */
    public Output<Optional<String>> certificate() {
        return Codegen.optional(this.certificate);
    }
    @Export(name="fingerprint", refs={String.class}, tree="[0]")
    private Output<String> fingerprint;

    public Output<String> fingerprint() {
        return this.fingerprint;
    }
    /**
     * The name of the certificate.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the certificate.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. Conflicts with `account_id`.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ZeroTrustAccessMtlsCertificate(java.lang.String name) {
        this(name, ZeroTrustAccessMtlsCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ZeroTrustAccessMtlsCertificate(java.lang.String name, ZeroTrustAccessMtlsCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ZeroTrustAccessMtlsCertificate(java.lang.String name, ZeroTrustAccessMtlsCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ZeroTrustAccessMtlsCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable ZeroTrustAccessMtlsCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static ZeroTrustAccessMtlsCertificateArgs makeArgs(ZeroTrustAccessMtlsCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ZeroTrustAccessMtlsCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ZeroTrustAccessMtlsCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable ZeroTrustAccessMtlsCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ZeroTrustAccessMtlsCertificate(name, id, state, options);
    }
}
