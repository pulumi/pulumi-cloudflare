// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetRulesetRuleActionParametersEdgeTtlStatusCodeTtlStatusCodeRange;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl {
    /**
     * @return A single status code to apply the TTL to.
     * 
     */
    private Integer statusCode;
    /**
     * @return A range of status codes to apply the TTL to.
     * 
     */
    private GetRulesetRuleActionParametersEdgeTtlStatusCodeTtlStatusCodeRange statusCodeRange;
    /**
     * @return The time to cache the response for (in seconds). A value of 0 is equivalent to setting the cache control header with the value &#34;no-cache&#34;. A value of -1 is equivalent to setting the cache control header with the value of &#34;no-store&#34;.
     * 
     */
    private Integer value;

    private GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl() {}
    /**
     * @return A single status code to apply the TTL to.
     * 
     */
    public Integer statusCode() {
        return this.statusCode;
    }
    /**
     * @return A range of status codes to apply the TTL to.
     * 
     */
    public GetRulesetRuleActionParametersEdgeTtlStatusCodeTtlStatusCodeRange statusCodeRange() {
        return this.statusCodeRange;
    }
    /**
     * @return The time to cache the response for (in seconds). A value of 0 is equivalent to setting the cache control header with the value &#34;no-cache&#34;. A value of -1 is equivalent to setting the cache control header with the value of &#34;no-store&#34;.
     * 
     */
    public Integer value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer statusCode;
        private GetRulesetRuleActionParametersEdgeTtlStatusCodeTtlStatusCodeRange statusCodeRange;
        private Integer value;
        public Builder() {}
        public Builder(GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.statusCode = defaults.statusCode;
    	      this.statusCodeRange = defaults.statusCodeRange;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder statusCodeRange(GetRulesetRuleActionParametersEdgeTtlStatusCodeTtlStatusCodeRange statusCodeRange) {
            if (statusCodeRange == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl", "statusCodeRange");
            }
            this.statusCodeRange = statusCodeRange;
            return this;
        }
        @CustomType.Setter
        public Builder value(Integer value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl", "value");
            }
            this.value = value;
            return this;
        }
        public GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl build() {
            final var _resultValue = new GetRulesetRuleActionParametersEdgeTtlStatusCodeTtl();
            _resultValue.statusCode = statusCode;
            _resultValue.statusCodeRange = statusCodeRange;
            _resultValue.value = value;
            return _resultValue;
        }
    }
}
