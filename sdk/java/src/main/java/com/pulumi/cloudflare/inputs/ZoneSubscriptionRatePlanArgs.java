// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneSubscriptionRatePlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneSubscriptionRatePlanArgs Empty = new ZoneSubscriptionRatePlanArgs();

    /**
     * The currency applied to the rate plan subscription.
     * 
     */
    @Import(name="currency")
    private @Nullable Output<String> currency;

    /**
     * @return The currency applied to the rate plan subscription.
     * 
     */
    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    /**
     * Whether this rate plan is managed externally from Cloudflare.
     * 
     */
    @Import(name="externallyManaged")
    private @Nullable Output<Boolean> externallyManaged;

    /**
     * @return Whether this rate plan is managed externally from Cloudflare.
     * 
     */
    public Optional<Output<Boolean>> externallyManaged() {
        return Optional.ofNullable(this.externallyManaged);
    }

    /**
     * The ID of the rate plan.
     * Available values: &#34;free&#34;, &#34;lite&#34;, &#34;pro&#34;, &#34;pro*plus&#34;, &#34;business&#34;, &#34;enterprise&#34;, &#34;partners*free&#34;, &#34;partners*pro&#34;, &#34;partners*business&#34;, &#34;partners_enterprise&#34;.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the rate plan.
     * Available values: &#34;free&#34;, &#34;lite&#34;, &#34;pro&#34;, &#34;pro*plus&#34;, &#34;business&#34;, &#34;enterprise&#34;, &#34;partners*free&#34;, &#34;partners*pro&#34;, &#34;partners*business&#34;, &#34;partners_enterprise&#34;.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether a rate plan is enterprise-based (or newly adopted term contract).
     * 
     */
    @Import(name="isContract")
    private @Nullable Output<Boolean> isContract;

    /**
     * @return Whether a rate plan is enterprise-based (or newly adopted term contract).
     * 
     */
    public Optional<Output<Boolean>> isContract() {
        return Optional.ofNullable(this.isContract);
    }

    /**
     * The full name of the rate plan.
     * 
     */
    @Import(name="publicName")
    private @Nullable Output<String> publicName;

    /**
     * @return The full name of the rate plan.
     * 
     */
    public Optional<Output<String>> publicName() {
        return Optional.ofNullable(this.publicName);
    }

    /**
     * The scope that this rate plan applies to.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The scope that this rate plan applies to.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The list of sets this rate plan applies to.
     * 
     */
    @Import(name="sets")
    private @Nullable Output<List<String>> sets;

    /**
     * @return The list of sets this rate plan applies to.
     * 
     */
    public Optional<Output<List<String>>> sets() {
        return Optional.ofNullable(this.sets);
    }

    private ZoneSubscriptionRatePlanArgs() {}

    private ZoneSubscriptionRatePlanArgs(ZoneSubscriptionRatePlanArgs $) {
        this.currency = $.currency;
        this.externallyManaged = $.externallyManaged;
        this.id = $.id;
        this.isContract = $.isContract;
        this.publicName = $.publicName;
        this.scope = $.scope;
        this.sets = $.sets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneSubscriptionRatePlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneSubscriptionRatePlanArgs $;

        public Builder() {
            $ = new ZoneSubscriptionRatePlanArgs();
        }

        public Builder(ZoneSubscriptionRatePlanArgs defaults) {
            $ = new ZoneSubscriptionRatePlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param currency The currency applied to the rate plan subscription.
         * 
         * @return builder
         * 
         */
        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        /**
         * @param currency The currency applied to the rate plan subscription.
         * 
         * @return builder
         * 
         */
        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        /**
         * @param externallyManaged Whether this rate plan is managed externally from Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(@Nullable Output<Boolean> externallyManaged) {
            $.externallyManaged = externallyManaged;
            return this;
        }

        /**
         * @param externallyManaged Whether this rate plan is managed externally from Cloudflare.
         * 
         * @return builder
         * 
         */
        public Builder externallyManaged(Boolean externallyManaged) {
            return externallyManaged(Output.of(externallyManaged));
        }

        /**
         * @param id The ID of the rate plan.
         * Available values: &#34;free&#34;, &#34;lite&#34;, &#34;pro&#34;, &#34;pro*plus&#34;, &#34;business&#34;, &#34;enterprise&#34;, &#34;partners*free&#34;, &#34;partners*pro&#34;, &#34;partners*business&#34;, &#34;partners_enterprise&#34;.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the rate plan.
         * Available values: &#34;free&#34;, &#34;lite&#34;, &#34;pro&#34;, &#34;pro*plus&#34;, &#34;business&#34;, &#34;enterprise&#34;, &#34;partners*free&#34;, &#34;partners*pro&#34;, &#34;partners*business&#34;, &#34;partners_enterprise&#34;.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isContract Whether a rate plan is enterprise-based (or newly adopted term contract).
         * 
         * @return builder
         * 
         */
        public Builder isContract(@Nullable Output<Boolean> isContract) {
            $.isContract = isContract;
            return this;
        }

        /**
         * @param isContract Whether a rate plan is enterprise-based (or newly adopted term contract).
         * 
         * @return builder
         * 
         */
        public Builder isContract(Boolean isContract) {
            return isContract(Output.of(isContract));
        }

        /**
         * @param publicName The full name of the rate plan.
         * 
         * @return builder
         * 
         */
        public Builder publicName(@Nullable Output<String> publicName) {
            $.publicName = publicName;
            return this;
        }

        /**
         * @param publicName The full name of the rate plan.
         * 
         * @return builder
         * 
         */
        public Builder publicName(String publicName) {
            return publicName(Output.of(publicName));
        }

        /**
         * @param scope The scope that this rate plan applies to.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope that this rate plan applies to.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sets The list of sets this rate plan applies to.
         * 
         * @return builder
         * 
         */
        public Builder sets(@Nullable Output<List<String>> sets) {
            $.sets = sets;
            return this;
        }

        /**
         * @param sets The list of sets this rate plan applies to.
         * 
         * @return builder
         * 
         */
        public Builder sets(List<String> sets) {
            return sets(Output.of(sets));
        }

        /**
         * @param sets The list of sets this rate plan applies to.
         * 
         * @return builder
         * 
         */
        public Builder sets(String... sets) {
            return sets(List.of(sets));
        }

        public ZoneSubscriptionRatePlanArgs build() {
            return $;
        }
    }

}
