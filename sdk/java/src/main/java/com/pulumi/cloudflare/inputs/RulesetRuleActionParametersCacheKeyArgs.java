// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.RulesetRuleActionParametersCacheKeyCustomKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RulesetRuleActionParametersCacheKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesetRuleActionParametersCacheKeyArgs Empty = new RulesetRuleActionParametersCacheKeyArgs();

    /**
     * Whether to separate cached content based on the visitor&#39;s device type.
     * 
     */
    @Import(name="cacheByDeviceType")
    private @Nullable Output<Boolean> cacheByDeviceType;

    /**
     * @return Whether to separate cached content based on the visitor&#39;s device type.
     * 
     */
    public Optional<Output<Boolean>> cacheByDeviceType() {
        return Optional.ofNullable(this.cacheByDeviceType);
    }

    /**
     * Whether to protect from web cache deception attacks, while allowing static assets to be cached.
     * 
     */
    @Import(name="cacheDeceptionArmor")
    private @Nullable Output<Boolean> cacheDeceptionArmor;

    /**
     * @return Whether to protect from web cache deception attacks, while allowing static assets to be cached.
     * 
     */
    public Optional<Output<Boolean>> cacheDeceptionArmor() {
        return Optional.ofNullable(this.cacheDeceptionArmor);
    }

    /**
     * Which components of the request are included or excluded from the cache key.
     * 
     */
    @Import(name="customKey")
    private @Nullable Output<RulesetRuleActionParametersCacheKeyCustomKeyArgs> customKey;

    /**
     * @return Which components of the request are included or excluded from the cache key.
     * 
     */
    public Optional<Output<RulesetRuleActionParametersCacheKeyCustomKeyArgs>> customKey() {
        return Optional.ofNullable(this.customKey);
    }

    /**
     * Whether to treat requests with the same query parameters the same, regardless of the order those query parameters are in.
     * 
     */
    @Import(name="ignoreQueryStringsOrder")
    private @Nullable Output<Boolean> ignoreQueryStringsOrder;

    /**
     * @return Whether to treat requests with the same query parameters the same, regardless of the order those query parameters are in.
     * 
     */
    public Optional<Output<Boolean>> ignoreQueryStringsOrder() {
        return Optional.ofNullable(this.ignoreQueryStringsOrder);
    }

    private RulesetRuleActionParametersCacheKeyArgs() {}

    private RulesetRuleActionParametersCacheKeyArgs(RulesetRuleActionParametersCacheKeyArgs $) {
        this.cacheByDeviceType = $.cacheByDeviceType;
        this.cacheDeceptionArmor = $.cacheDeceptionArmor;
        this.customKey = $.customKey;
        this.ignoreQueryStringsOrder = $.ignoreQueryStringsOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesetRuleActionParametersCacheKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesetRuleActionParametersCacheKeyArgs $;

        public Builder() {
            $ = new RulesetRuleActionParametersCacheKeyArgs();
        }

        public Builder(RulesetRuleActionParametersCacheKeyArgs defaults) {
            $ = new RulesetRuleActionParametersCacheKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheByDeviceType Whether to separate cached content based on the visitor&#39;s device type.
         * 
         * @return builder
         * 
         */
        public Builder cacheByDeviceType(@Nullable Output<Boolean> cacheByDeviceType) {
            $.cacheByDeviceType = cacheByDeviceType;
            return this;
        }

        /**
         * @param cacheByDeviceType Whether to separate cached content based on the visitor&#39;s device type.
         * 
         * @return builder
         * 
         */
        public Builder cacheByDeviceType(Boolean cacheByDeviceType) {
            return cacheByDeviceType(Output.of(cacheByDeviceType));
        }

        /**
         * @param cacheDeceptionArmor Whether to protect from web cache deception attacks, while allowing static assets to be cached.
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(@Nullable Output<Boolean> cacheDeceptionArmor) {
            $.cacheDeceptionArmor = cacheDeceptionArmor;
            return this;
        }

        /**
         * @param cacheDeceptionArmor Whether to protect from web cache deception attacks, while allowing static assets to be cached.
         * 
         * @return builder
         * 
         */
        public Builder cacheDeceptionArmor(Boolean cacheDeceptionArmor) {
            return cacheDeceptionArmor(Output.of(cacheDeceptionArmor));
        }

        /**
         * @param customKey Which components of the request are included or excluded from the cache key.
         * 
         * @return builder
         * 
         */
        public Builder customKey(@Nullable Output<RulesetRuleActionParametersCacheKeyCustomKeyArgs> customKey) {
            $.customKey = customKey;
            return this;
        }

        /**
         * @param customKey Which components of the request are included or excluded from the cache key.
         * 
         * @return builder
         * 
         */
        public Builder customKey(RulesetRuleActionParametersCacheKeyCustomKeyArgs customKey) {
            return customKey(Output.of(customKey));
        }

        /**
         * @param ignoreQueryStringsOrder Whether to treat requests with the same query parameters the same, regardless of the order those query parameters are in.
         * 
         * @return builder
         * 
         */
        public Builder ignoreQueryStringsOrder(@Nullable Output<Boolean> ignoreQueryStringsOrder) {
            $.ignoreQueryStringsOrder = ignoreQueryStringsOrder;
            return this;
        }

        /**
         * @param ignoreQueryStringsOrder Whether to treat requests with the same query parameters the same, regardless of the order those query parameters are in.
         * 
         * @return builder
         * 
         */
        public Builder ignoreQueryStringsOrder(Boolean ignoreQueryStringsOrder) {
            return ignoreQueryStringsOrder(Output.of(ignoreQueryStringsOrder));
        }

        public RulesetRuleActionParametersCacheKeyArgs build() {
            return $;
        }
    }

}
