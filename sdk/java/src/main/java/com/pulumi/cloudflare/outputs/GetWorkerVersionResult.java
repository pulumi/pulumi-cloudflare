// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkerVersionAnnotations;
import com.pulumi.cloudflare.outputs.GetWorkerVersionAssets;
import com.pulumi.cloudflare.outputs.GetWorkerVersionBinding;
import com.pulumi.cloudflare.outputs.GetWorkerVersionLimits;
import com.pulumi.cloudflare.outputs.GetWorkerVersionMigrations;
import com.pulumi.cloudflare.outputs.GetWorkerVersionModule;
import com.pulumi.cloudflare.outputs.GetWorkerVersionPlacement;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWorkerVersionResult {
    /**
     * @return Identifier.
     * 
     */
    private String accountId;
    /**
     * @return Metadata about the version.
     * 
     */
    private GetWorkerVersionAnnotations annotations;
    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    private GetWorkerVersionAssets assets;
    private List<GetWorkerVersionBinding> bindings;
    private String compatibilityDate;
    private List<String> compatibilityFlags;
    private String createdOn;
    private String id;
    /**
     * @return Whether to include the `modules` property of the version in the response, which contains code and sourcemap content and may add several megabytes to the response size.
     * Available values: &#34;modules&#34;.
     * 
     */
    private @Nullable String include;
    private GetWorkerVersionLimits limits;
    private String mainModule;
    private GetWorkerVersionMigrations migrations;
    private List<GetWorkerVersionModule> modules;
    private Integer number;
    private GetWorkerVersionPlacement placement;
    private String source;
    /**
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    private String usageModel;
    /**
     * @return Identifier for the version, which can be ID or the literal &#34;latest&#34; to operate on the most recently created version.
     * 
     */
    private @Nullable String versionId;
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    private String workerId;

    private GetWorkerVersionResult() {}
    /**
     * @return Identifier.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Metadata about the version.
     * 
     */
    public GetWorkerVersionAnnotations annotations() {
        return this.annotations;
    }
    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    public GetWorkerVersionAssets assets() {
        return this.assets;
    }
    public List<GetWorkerVersionBinding> bindings() {
        return this.bindings;
    }
    public String compatibilityDate() {
        return this.compatibilityDate;
    }
    public List<String> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    public String createdOn() {
        return this.createdOn;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return Whether to include the `modules` property of the version in the response, which contains code and sourcemap content and may add several megabytes to the response size.
     * Available values: &#34;modules&#34;.
     * 
     */
    public Optional<String> include() {
        return Optional.ofNullable(this.include);
    }
    public GetWorkerVersionLimits limits() {
        return this.limits;
    }
    public String mainModule() {
        return this.mainModule;
    }
    public GetWorkerVersionMigrations migrations() {
        return this.migrations;
    }
    public List<GetWorkerVersionModule> modules() {
        return this.modules;
    }
    public Integer number() {
        return this.number;
    }
    public GetWorkerVersionPlacement placement() {
        return this.placement;
    }
    public String source() {
        return this.source;
    }
    /**
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public String usageModel() {
        return this.usageModel;
    }
    /**
     * @return Identifier for the version, which can be ID or the literal &#34;latest&#34; to operate on the most recently created version.
     * 
     */
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }
    /**
     * @return Identifier for the Worker, which can be ID or name.
     * 
     */
    public String workerId() {
        return this.workerId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerVersionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private GetWorkerVersionAnnotations annotations;
        private GetWorkerVersionAssets assets;
        private List<GetWorkerVersionBinding> bindings;
        private String compatibilityDate;
        private List<String> compatibilityFlags;
        private String createdOn;
        private String id;
        private @Nullable String include;
        private GetWorkerVersionLimits limits;
        private String mainModule;
        private GetWorkerVersionMigrations migrations;
        private List<GetWorkerVersionModule> modules;
        private Integer number;
        private GetWorkerVersionPlacement placement;
        private String source;
        private String usageModel;
        private @Nullable String versionId;
        private String workerId;
        public Builder() {}
        public Builder(GetWorkerVersionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.annotations = defaults.annotations;
    	      this.assets = defaults.assets;
    	      this.bindings = defaults.bindings;
    	      this.compatibilityDate = defaults.compatibilityDate;
    	      this.compatibilityFlags = defaults.compatibilityFlags;
    	      this.createdOn = defaults.createdOn;
    	      this.id = defaults.id;
    	      this.include = defaults.include;
    	      this.limits = defaults.limits;
    	      this.mainModule = defaults.mainModule;
    	      this.migrations = defaults.migrations;
    	      this.modules = defaults.modules;
    	      this.number = defaults.number;
    	      this.placement = defaults.placement;
    	      this.source = defaults.source;
    	      this.usageModel = defaults.usageModel;
    	      this.versionId = defaults.versionId;
    	      this.workerId = defaults.workerId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder annotations(GetWorkerVersionAnnotations annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder assets(GetWorkerVersionAssets assets) {
            if (assets == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "assets");
            }
            this.assets = assets;
            return this;
        }
        @CustomType.Setter
        public Builder bindings(List<GetWorkerVersionBinding> bindings) {
            if (bindings == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "bindings");
            }
            this.bindings = bindings;
            return this;
        }
        public Builder bindings(GetWorkerVersionBinding... bindings) {
            return bindings(List.of(bindings));
        }
        @CustomType.Setter
        public Builder compatibilityDate(String compatibilityDate) {
            if (compatibilityDate == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "compatibilityDate");
            }
            this.compatibilityDate = compatibilityDate;
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityFlags(List<String> compatibilityFlags) {
            if (compatibilityFlags == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "compatibilityFlags");
            }
            this.compatibilityFlags = compatibilityFlags;
            return this;
        }
        public Builder compatibilityFlags(String... compatibilityFlags) {
            return compatibilityFlags(List.of(compatibilityFlags));
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder include(@Nullable String include) {

            this.include = include;
            return this;
        }
        @CustomType.Setter
        public Builder limits(GetWorkerVersionLimits limits) {
            if (limits == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "limits");
            }
            this.limits = limits;
            return this;
        }
        @CustomType.Setter
        public Builder mainModule(String mainModule) {
            if (mainModule == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "mainModule");
            }
            this.mainModule = mainModule;
            return this;
        }
        @CustomType.Setter
        public Builder migrations(GetWorkerVersionMigrations migrations) {
            if (migrations == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "migrations");
            }
            this.migrations = migrations;
            return this;
        }
        @CustomType.Setter
        public Builder modules(List<GetWorkerVersionModule> modules) {
            if (modules == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "modules");
            }
            this.modules = modules;
            return this;
        }
        public Builder modules(GetWorkerVersionModule... modules) {
            return modules(List.of(modules));
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder placement(GetWorkerVersionPlacement placement) {
            if (placement == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "placement");
            }
            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder usageModel(String usageModel) {
            if (usageModel == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "usageModel");
            }
            this.usageModel = usageModel;
            return this;
        }
        @CustomType.Setter
        public Builder versionId(@Nullable String versionId) {

            this.versionId = versionId;
            return this;
        }
        @CustomType.Setter
        public Builder workerId(String workerId) {
            if (workerId == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionResult", "workerId");
            }
            this.workerId = workerId;
            return this;
        }
        public GetWorkerVersionResult build() {
            final var _resultValue = new GetWorkerVersionResult();
            _resultValue.accountId = accountId;
            _resultValue.annotations = annotations;
            _resultValue.assets = assets;
            _resultValue.bindings = bindings;
            _resultValue.compatibilityDate = compatibilityDate;
            _resultValue.compatibilityFlags = compatibilityFlags;
            _resultValue.createdOn = createdOn;
            _resultValue.id = id;
            _resultValue.include = include;
            _resultValue.limits = limits;
            _resultValue.mainModule = mainModule;
            _resultValue.migrations = migrations;
            _resultValue.modules = modules;
            _resultValue.number = number;
            _resultValue.placement = placement;
            _resultValue.source = source;
            _resultValue.usageModel = usageModel;
            _resultValue.versionId = versionId;
            _resultValue.workerId = workerId;
            return _resultValue;
        }
    }
}
