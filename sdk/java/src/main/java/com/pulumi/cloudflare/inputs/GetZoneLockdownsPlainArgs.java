// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetZoneLockdownsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetZoneLockdownsPlainArgs Empty = new GetZoneLockdownsPlainArgs();

    /**
     * The timestamp of when the rule was created.
     * 
     */
    @Import(name="createdOn")
    private @Nullable String createdOn;

    /**
     * @return The timestamp of when the rule was created.
     * 
     */
    public Optional<String> createdOn() {
        return Optional.ofNullable(this.createdOn);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A string to search for in the description of existing rules.
     * 
     */
    @Import(name="descriptionSearch")
    private @Nullable String descriptionSearch;

    /**
     * @return A string to search for in the description of existing rules.
     * 
     */
    public Optional<String> descriptionSearch() {
        return Optional.ofNullable(this.descriptionSearch);
    }

    /**
     * A single IP address to search for in existing rules.
     * 
     */
    @Import(name="ip")
    private @Nullable String ip;

    /**
     * @return A single IP address to search for in existing rules.
     * 
     */
    public Optional<String> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * A single IP address range to search for in existing rules.
     * 
     */
    @Import(name="ipRangeSearch")
    private @Nullable String ipRangeSearch;

    /**
     * @return A single IP address range to search for in existing rules.
     * 
     */
    public Optional<String> ipRangeSearch() {
        return Optional.ofNullable(this.ipRangeSearch);
    }

    /**
     * A single IP address to search for in existing rules.
     * 
     */
    @Import(name="ipSearch")
    private @Nullable String ipSearch;

    /**
     * @return A single IP address to search for in existing rules.
     * 
     */
    public Optional<String> ipSearch() {
        return Optional.ofNullable(this.ipSearch);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Integer maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Integer> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * The timestamp of when the rule was last modified.
     * 
     */
    @Import(name="modifiedOn")
    private @Nullable String modifiedOn;

    /**
     * @return The timestamp of when the rule was last modified.
     * 
     */
    public Optional<String> modifiedOn() {
        return Optional.ofNullable(this.modifiedOn);
    }

    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Double priority;

    /**
     * @return The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    public Optional<Double> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * A single URI to search for in the list of URLs of existing rules.
     * 
     */
    @Import(name="uriSearch")
    private @Nullable String uriSearch;

    /**
     * @return A single URI to search for in the list of URLs of existing rules.
     * 
     */
    public Optional<String> uriSearch() {
        return Optional.ofNullable(this.uriSearch);
    }

    /**
     * Identifier
     * 
     */
    @Import(name="zoneId", required=true)
    private String zoneId;

    /**
     * @return Identifier
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    private GetZoneLockdownsPlainArgs() {}

    private GetZoneLockdownsPlainArgs(GetZoneLockdownsPlainArgs $) {
        this.createdOn = $.createdOn;
        this.description = $.description;
        this.descriptionSearch = $.descriptionSearch;
        this.ip = $.ip;
        this.ipRangeSearch = $.ipRangeSearch;
        this.ipSearch = $.ipSearch;
        this.maxItems = $.maxItems;
        this.modifiedOn = $.modifiedOn;
        this.priority = $.priority;
        this.uriSearch = $.uriSearch;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetZoneLockdownsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetZoneLockdownsPlainArgs $;

        public Builder() {
            $ = new GetZoneLockdownsPlainArgs();
        }

        public Builder(GetZoneLockdownsPlainArgs defaults) {
            $ = new GetZoneLockdownsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdOn The timestamp of when the rule was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(@Nullable String createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param description A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param descriptionSearch A string to search for in the description of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder descriptionSearch(@Nullable String descriptionSearch) {
            $.descriptionSearch = descriptionSearch;
            return this;
        }

        /**
         * @param ip A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable String ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ipRangeSearch A single IP address range to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipRangeSearch(@Nullable String ipRangeSearch) {
            $.ipRangeSearch = ipRangeSearch;
            return this;
        }

        /**
         * @param ipSearch A single IP address to search for in existing rules.
         * 
         * @return builder
         * 
         */
        public Builder ipSearch(@Nullable String ipSearch) {
            $.ipSearch = ipSearch;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Integer maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param modifiedOn The timestamp of when the rule was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedOn(@Nullable String modifiedOn) {
            $.modifiedOn = modifiedOn;
            return this;
        }

        /**
         * @param priority The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Double priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param uriSearch A single URI to search for in the list of URLs of existing rules.
         * 
         * @return builder
         * 
         */
        public Builder uriSearch(@Nullable String uriSearch) {
            $.uriSearch = uriSearch;
            return this;
        }

        /**
         * @param zoneId Identifier
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        public GetZoneLockdownsPlainArgs build() {
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("GetZoneLockdownsPlainArgs", "zoneId");
            }
            return $;
        }
    }

}
