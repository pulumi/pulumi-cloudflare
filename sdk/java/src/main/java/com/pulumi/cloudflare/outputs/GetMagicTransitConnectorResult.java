// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetMagicTransitConnectorDevice;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMagicTransitConnectorResult {
    private String accountId;
    private Boolean activated;
    private @Nullable String connectorId;
    private GetMagicTransitConnectorDevice device;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    private Double interruptWindowDurationHours;
    private Double interruptWindowHourOfDay;
    private String lastHeartbeat;
    private String lastSeenVersion;
    private String lastUpdated;
    private String notes;
    private String timezone;

    private GetMagicTransitConnectorResult() {}
    public String accountId() {
        return this.accountId;
    }
    public Boolean activated() {
        return this.activated;
    }
    public Optional<String> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    public GetMagicTransitConnectorDevice device() {
        return this.device;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Double interruptWindowDurationHours() {
        return this.interruptWindowDurationHours;
    }
    public Double interruptWindowHourOfDay() {
        return this.interruptWindowHourOfDay;
    }
    public String lastHeartbeat() {
        return this.lastHeartbeat;
    }
    public String lastSeenVersion() {
        return this.lastSeenVersion;
    }
    public String lastUpdated() {
        return this.lastUpdated;
    }
    public String notes() {
        return this.notes;
    }
    public String timezone() {
        return this.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMagicTransitConnectorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean activated;
        private @Nullable String connectorId;
        private GetMagicTransitConnectorDevice device;
        private String id;
        private Double interruptWindowDurationHours;
        private Double interruptWindowHourOfDay;
        private String lastHeartbeat;
        private String lastSeenVersion;
        private String lastUpdated;
        private String notes;
        private String timezone;
        public Builder() {}
        public Builder(GetMagicTransitConnectorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.activated = defaults.activated;
    	      this.connectorId = defaults.connectorId;
    	      this.device = defaults.device;
    	      this.id = defaults.id;
    	      this.interruptWindowDurationHours = defaults.interruptWindowDurationHours;
    	      this.interruptWindowHourOfDay = defaults.interruptWindowHourOfDay;
    	      this.lastHeartbeat = defaults.lastHeartbeat;
    	      this.lastSeenVersion = defaults.lastSeenVersion;
    	      this.lastUpdated = defaults.lastUpdated;
    	      this.notes = defaults.notes;
    	      this.timezone = defaults.timezone;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder activated(Boolean activated) {
            if (activated == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "activated");
            }
            this.activated = activated;
            return this;
        }
        @CustomType.Setter
        public Builder connectorId(@Nullable String connectorId) {

            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder device(GetMagicTransitConnectorDevice device) {
            if (device == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "device");
            }
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interruptWindowDurationHours(Double interruptWindowDurationHours) {
            if (interruptWindowDurationHours == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "interruptWindowDurationHours");
            }
            this.interruptWindowDurationHours = interruptWindowDurationHours;
            return this;
        }
        @CustomType.Setter
        public Builder interruptWindowHourOfDay(Double interruptWindowHourOfDay) {
            if (interruptWindowHourOfDay == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "interruptWindowHourOfDay");
            }
            this.interruptWindowHourOfDay = interruptWindowHourOfDay;
            return this;
        }
        @CustomType.Setter
        public Builder lastHeartbeat(String lastHeartbeat) {
            if (lastHeartbeat == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "lastHeartbeat");
            }
            this.lastHeartbeat = lastHeartbeat;
            return this;
        }
        @CustomType.Setter
        public Builder lastSeenVersion(String lastSeenVersion) {
            if (lastSeenVersion == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "lastSeenVersion");
            }
            this.lastSeenVersion = lastSeenVersion;
            return this;
        }
        @CustomType.Setter
        public Builder lastUpdated(String lastUpdated) {
            if (lastUpdated == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "lastUpdated");
            }
            this.lastUpdated = lastUpdated;
            return this;
        }
        @CustomType.Setter
        public Builder notes(String notes) {
            if (notes == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "notes");
            }
            this.notes = notes;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetMagicTransitConnectorResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        public GetMagicTransitConnectorResult build() {
            final var _resultValue = new GetMagicTransitConnectorResult();
            _resultValue.accountId = accountId;
            _resultValue.activated = activated;
            _resultValue.connectorId = connectorId;
            _resultValue.device = device;
            _resultValue.id = id;
            _resultValue.interruptWindowDurationHours = interruptWindowDurationHours;
            _resultValue.interruptWindowHourOfDay = interruptWindowHourOfDay;
            _resultValue.lastHeartbeat = lastHeartbeat;
            _resultValue.lastSeenVersion = lastSeenVersion;
            _resultValue.lastUpdated = lastUpdated;
            _resultValue.notes = notes;
            _resultValue.timezone = timezone;
            return _resultValue;
        }
    }
}
