// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MagicTransitSiteAclLan1Args extends com.pulumi.resources.ResourceArgs {

    public static final MagicTransitSiteAclLan1Args Empty = new MagicTransitSiteAclLan1Args();

    /**
     * The identifier for the LAN you want to create an ACL policy with.
     * 
     */
    @Import(name="lanId", required=true)
    private Output<String> lanId;

    /**
     * @return The identifier for the LAN you want to create an ACL policy with.
     * 
     */
    public Output<String> lanId() {
        return this.lanId;
    }

    /**
     * The name of the LAN based on the provided lan_id.
     * 
     */
    @Import(name="lanName")
    private @Nullable Output<String> lanName;

    /**
     * @return The name of the LAN based on the provided lan_id.
     * 
     */
    public Optional<Output<String>> lanName() {
        return Optional.ofNullable(this.lanName);
    }

    /**
     * Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
     * 
     */
    @Import(name="portRanges")
    private @Nullable Output<List<String>> portRanges;

    /**
     * @return Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
     * 
     */
    public Optional<Output<List<String>>> portRanges() {
        return Optional.ofNullable(this.portRanges);
    }

    /**
     * Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
     * 
     */
    @Import(name="ports")
    private @Nullable Output<List<Integer>> ports;

    /**
     * @return Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
     * 
     */
    public Optional<Output<List<Integer>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    private MagicTransitSiteAclLan1Args() {}

    private MagicTransitSiteAclLan1Args(MagicTransitSiteAclLan1Args $) {
        this.lanId = $.lanId;
        this.lanName = $.lanName;
        this.portRanges = $.portRanges;
        this.ports = $.ports;
        this.subnets = $.subnets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MagicTransitSiteAclLan1Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MagicTransitSiteAclLan1Args $;

        public Builder() {
            $ = new MagicTransitSiteAclLan1Args();
        }

        public Builder(MagicTransitSiteAclLan1Args defaults) {
            $ = new MagicTransitSiteAclLan1Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param lanId The identifier for the LAN you want to create an ACL policy with.
         * 
         * @return builder
         * 
         */
        public Builder lanId(Output<String> lanId) {
            $.lanId = lanId;
            return this;
        }

        /**
         * @param lanId The identifier for the LAN you want to create an ACL policy with.
         * 
         * @return builder
         * 
         */
        public Builder lanId(String lanId) {
            return lanId(Output.of(lanId));
        }

        /**
         * @param lanName The name of the LAN based on the provided lan_id.
         * 
         * @return builder
         * 
         */
        public Builder lanName(@Nullable Output<String> lanName) {
            $.lanName = lanName;
            return this;
        }

        /**
         * @param lanName The name of the LAN based on the provided lan_id.
         * 
         * @return builder
         * 
         */
        public Builder lanName(String lanName) {
            return lanName(Output.of(lanName));
        }

        /**
         * @param portRanges Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(@Nullable Output<List<String>> portRanges) {
            $.portRanges = portRanges;
            return this;
        }

        /**
         * @param portRanges Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(List<String> portRanges) {
            return portRanges(Output.of(portRanges));
        }

        /**
         * @param portRanges Array of port ranges on the provided LAN that will be included in the ACL. If no ports or port rangess are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder portRanges(String... portRanges) {
            return portRanges(List.of(portRanges));
        }

        /**
         * @param ports Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable Output<List<Integer>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<Integer> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports Array of ports on the provided LAN that will be included in the ACL. If no ports or port ranges are provided, communication on any port on this LAN is allowed.
         * 
         * @return builder
         * 
         */
        public Builder ports(Integer... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param subnets Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets Array of subnet IPs within the LAN that will be included in the ACL. If no subnets are provided, communication on any subnets on this LAN are allowed.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        public MagicTransitSiteAclLan1Args build() {
            if ($.lanId == null) {
                throw new MissingRequiredPropertyException("MagicTransitSiteAclLan1Args", "lanId");
            }
            return $;
        }
    }

}
