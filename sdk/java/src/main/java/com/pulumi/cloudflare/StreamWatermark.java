// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.StreamWatermarkArgs;
import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.inputs.StreamWatermarkState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.StreamWatermark;
 * import com.pulumi.cloudflare.StreamWatermarkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var exampleStreamWatermark = new StreamWatermark("exampleStreamWatermark", StreamWatermarkArgs.builder()
 *             .accountId("023e105f4ecef8ad9ca31a8372d0c353")
 *             .file("}{@literal @}{@code /Users/rchen/Downloads/watermark.png")
 *             .name("Marketing Videos")
 *             .opacity(0.75)
 *             .padding(0.1)
 *             .position("center")
 *             .scale(0.1)
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * 
 */
@ResourceType(type="cloudflare:index/streamWatermark:StreamWatermark")
public class StreamWatermark extends com.pulumi.resources.CustomResource {
    /**
     * The account identifier tag.
     * 
     */
    @Export(name="accountId", refs={String.class}, tree="[0]")
    private Output<String> accountId;

    /**
     * @return The account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }
    /**
     * The date and a time a watermark profile was created.
     * 
     */
    @Export(name="created", refs={String.class}, tree="[0]")
    private Output<String> created;

    /**
     * @return The date and a time a watermark profile was created.
     * 
     */
    public Output<String> created() {
        return this.created;
    }
    /**
     * The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
     * 
     */
    @Export(name="downloadedFrom", refs={String.class}, tree="[0]")
    private Output<String> downloadedFrom;

    /**
     * @return The source URL for a downloaded image. If the watermark profile was created via direct upload, this field is null.
     * 
     */
    public Output<String> downloadedFrom() {
        return this.downloadedFrom;
    }
    /**
     * The image file to upload.
     * 
     */
    @Export(name="file", refs={String.class}, tree="[0]")
    private Output<String> file;

    /**
     * @return The image file to upload.
     * 
     */
    public Output<String> file() {
        return this.file;
    }
    /**
     * The height of the image in pixels.
     * 
     */
    @Export(name="height", refs={Integer.class}, tree="[0]")
    private Output<Integer> height;

    /**
     * @return The height of the image in pixels.
     * 
     */
    public Output<Integer> height() {
        return this.height;
    }
    /**
     * The unique identifier for a watermark profile.
     * 
     */
    @Export(name="identifier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> identifier;

    /**
     * @return The unique identifier for a watermark profile.
     * 
     */
    public Output<Optional<String>> identifier() {
        return Codegen.optional(this.identifier);
    }
    /**
     * A short description of the watermark profile.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A short description of the watermark profile.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     * 
     */
    @Export(name="opacity", refs={Double.class}, tree="[0]")
    private Output<Double> opacity;

    /**
     * @return The translucency of the image. A value of `0.0` makes the image completely transparent, and `1.0` makes the image completely opaque. Note that if the image is already semi-transparent, setting this to `1.0` will not make the image completely opaque.
     * 
     */
    public Output<Double> opacity() {
        return this.opacity;
    }
    /**
     * The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     * 
     */
    @Export(name="padding", refs={Double.class}, tree="[0]")
    private Output<Double> padding;

    /**
     * @return The whitespace between the adjacent edges (determined by position) of the video and the image. `0.0` indicates no padding, and `1.0` indicates a fully padded video width or length, as determined by the algorithm.
     * 
     */
    public Output<Double> padding() {
        return this.padding;
    }
    /**
     * The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     * 
     */
    @Export(name="position", refs={String.class}, tree="[0]")
    private Output<String> position;

    /**
     * @return The location of the image. Valid positions are: `upperRight`, `upperLeft`, `lowerLeft`, `lowerRight`, and `center`. Note that `center` ignores the `padding` parameter.
     * 
     */
    public Output<String> position() {
        return this.position;
    }
    /**
     * The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     * 
     */
    @Export(name="scale", refs={Double.class}, tree="[0]")
    private Output<Double> scale;

    /**
     * @return The size of the image relative to the overall size of the video. This parameter will adapt to horizontal and vertical videos automatically. `0.0` indicates no scaling (use the size of the image as-is), and `1.0`fills the entire video.
     * 
     */
    public Output<Double> scale() {
        return this.scale;
    }
    /**
     * The size of the image in bytes.
     * 
     */
    @Export(name="size", refs={Double.class}, tree="[0]")
    private Output<Double> size;

    /**
     * @return The size of the image in bytes.
     * 
     */
    public Output<Double> size() {
        return this.size;
    }
    /**
     * The unique identifier for a watermark profile.
     * 
     */
    @Export(name="uid", refs={String.class}, tree="[0]")
    private Output<String> uid;

    /**
     * @return The unique identifier for a watermark profile.
     * 
     */
    public Output<String> uid() {
        return this.uid;
    }
    /**
     * The width of the image in pixels.
     * 
     */
    @Export(name="width", refs={Integer.class}, tree="[0]")
    private Output<Integer> width;

    /**
     * @return The width of the image in pixels.
     * 
     */
    public Output<Integer> width() {
        return this.width;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public StreamWatermark(java.lang.String name) {
        this(name, StreamWatermarkArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public StreamWatermark(java.lang.String name, StreamWatermarkArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public StreamWatermark(java.lang.String name, StreamWatermarkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/streamWatermark:StreamWatermark", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private StreamWatermark(java.lang.String name, Output<java.lang.String> id, @Nullable StreamWatermarkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/streamWatermark:StreamWatermark", name, state, makeResourceOptions(options, id), false);
    }

    private static StreamWatermarkArgs makeArgs(StreamWatermarkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? StreamWatermarkArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static StreamWatermark get(java.lang.String name, Output<java.lang.String> id, @Nullable StreamWatermarkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new StreamWatermark(name, id, state, options);
    }
}
