// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserOrganization {
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return Organization name.
     * 
     */
    private String name;
    /**
     * @return Access permissions for this User.
     * 
     */
    private List<String> permissions;
    /**
     * @return List of roles that a user has within an organization.
     * 
     */
    private List<String> roles;
    /**
     * @return Whether the user is a member of the organization or has an invitation pending.
     * Available values: &#34;member&#34;, &#34;invited&#34;.
     * 
     */
    private String status;

    private GetUserOrganization() {}
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Organization name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Access permissions for this User.
     * 
     */
    public List<String> permissions() {
        return this.permissions;
    }
    /**
     * @return List of roles that a user has within an organization.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @return Whether the user is a member of the organization or has an invitation pending.
     * Available values: &#34;member&#34;, &#34;invited&#34;.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserOrganization defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private String name;
        private List<String> permissions;
        private List<String> roles;
        private String status;
        public Builder() {}
        public Builder(GetUserOrganization defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.permissions = defaults.permissions;
    	      this.roles = defaults.roles;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserOrganization", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetUserOrganization", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder permissions(List<String> permissions) {
            if (permissions == null) {
              throw new MissingRequiredPropertyException("GetUserOrganization", "permissions");
            }
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetUserOrganization", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetUserOrganization", "status");
            }
            this.status = status;
            return this;
        }
        public GetUserOrganization build() {
            final var _resultValue = new GetUserOrganization();
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.permissions = permissions;
            _resultValue.roles = roles;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
