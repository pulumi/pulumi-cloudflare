// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HyperdriveConfigOrigin {
    /**
     * @return Client ID associated with the Cloudflare Access Service Token used to connect via Access.
     * 
     */
    private @Nullable String accessClientId;
    /**
     * @return Client Secret associated with the Cloudflare Access Service Token used to connect via Access.
     * 
     */
    private @Nullable String accessClientSecret;
    /**
     * @return The name of your origin database.
     * 
     */
    private String database;
    /**
     * @return The host (hostname or IP) of your origin database.
     * 
     */
    private String host;
    /**
     * @return The password of the Hyperdrive configuration.
     * 
     */
    private String password;
    /**
     * @return The port (default: 5432 for Postgres) of your origin database.
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Specifies the URL scheme used to connect to your origin database.
     * 
     */
    private String scheme;
    /**
     * @return The user of your origin database.
     * 
     */
    private String user;

    private HyperdriveConfigOrigin() {}
    /**
     * @return Client ID associated with the Cloudflare Access Service Token used to connect via Access.
     * 
     */
    public Optional<String> accessClientId() {
        return Optional.ofNullable(this.accessClientId);
    }
    /**
     * @return Client Secret associated with the Cloudflare Access Service Token used to connect via Access.
     * 
     */
    public Optional<String> accessClientSecret() {
        return Optional.ofNullable(this.accessClientSecret);
    }
    /**
     * @return The name of your origin database.
     * 
     */
    public String database() {
        return this.database;
    }
    /**
     * @return The host (hostname or IP) of your origin database.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The password of the Hyperdrive configuration.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The port (default: 5432 for Postgres) of your origin database.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Specifies the URL scheme used to connect to your origin database.
     * 
     */
    public String scheme() {
        return this.scheme;
    }
    /**
     * @return The user of your origin database.
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HyperdriveConfigOrigin defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessClientId;
        private @Nullable String accessClientSecret;
        private String database;
        private String host;
        private String password;
        private @Nullable Integer port;
        private String scheme;
        private String user;
        public Builder() {}
        public Builder(HyperdriveConfigOrigin defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessClientId = defaults.accessClientId;
    	      this.accessClientSecret = defaults.accessClientSecret;
    	      this.database = defaults.database;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder accessClientId(@Nullable String accessClientId) {

            this.accessClientId = accessClientId;
            return this;
        }
        @CustomType.Setter
        public Builder accessClientSecret(@Nullable String accessClientSecret) {

            this.accessClientSecret = accessClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("HyperdriveConfigOrigin", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("HyperdriveConfigOrigin", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("HyperdriveConfigOrigin", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(String scheme) {
            if (scheme == null) {
              throw new MissingRequiredPropertyException("HyperdriveConfigOrigin", "scheme");
            }
            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("HyperdriveConfigOrigin", "user");
            }
            this.user = user;
            return this;
        }
        public HyperdriveConfigOrigin build() {
            final var _resultValue = new HyperdriveConfigOrigin();
            _resultValue.accessClientId = accessClientId;
            _resultValue.accessClientSecret = accessClientSecret;
            _resultValue.database = database;
            _resultValue.host = host;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.scheme = scheme;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
