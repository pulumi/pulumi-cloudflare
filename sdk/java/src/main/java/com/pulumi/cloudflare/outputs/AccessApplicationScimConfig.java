// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.AccessApplicationScimConfigAuthentication;
import com.pulumi.cloudflare.outputs.AccessApplicationScimConfigMapping;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessApplicationScimConfig {
    /**
     * @return Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
     * 
     */
    private @Nullable AccessApplicationScimConfigAuthentication authentication;
    /**
     * @return If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
     * 
     */
    private @Nullable Boolean deactivateOnDelete;
    /**
     * @return Whether SCIM provisioning is turned on for this application.
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
     * 
     */
    private String idpUid;
    /**
     * @return A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
     * 
     */
    private @Nullable List<AccessApplicationScimConfigMapping> mappings;
    /**
     * @return The base URI for the application&#39;s SCIM-compatible API.
     * 
     */
    private String remoteUri;

    private AccessApplicationScimConfig() {}
    /**
     * @return Configuration for authenticating with the application&#39;s SCIM API. Allowed configurations are HTTP Basic, OAuth Bearer Token, and OAuth 2.
     * 
     */
    public Optional<AccessApplicationScimConfigAuthentication> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return If false, propagates DELETE requests to the target application for SCIM resources. If true, sets &#39;active&#39; to false on the SCIM resource. Note: Some targets do not support DELETE operations.
     * 
     */
    public Optional<Boolean> deactivateOnDelete() {
        return Optional.ofNullable(this.deactivateOnDelete);
    }
    /**
     * @return Whether SCIM provisioning is turned on for this application.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The ID of the Access IDP to be used as the source for SCIM resources to provision to this application.
     * 
     */
    public String idpUid() {
        return this.idpUid;
    }
    /**
     * @return A list of filters and transformations to apply to SCIM resources before provisioning them to the application. See below for nested schema.
     * 
     */
    public List<AccessApplicationScimConfigMapping> mappings() {
        return this.mappings == null ? List.of() : this.mappings;
    }
    /**
     * @return The base URI for the application&#39;s SCIM-compatible API.
     * 
     */
    public String remoteUri() {
        return this.remoteUri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessApplicationScimConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable AccessApplicationScimConfigAuthentication authentication;
        private @Nullable Boolean deactivateOnDelete;
        private @Nullable Boolean enabled;
        private String idpUid;
        private @Nullable List<AccessApplicationScimConfigMapping> mappings;
        private String remoteUri;
        public Builder() {}
        public Builder(AccessApplicationScimConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.deactivateOnDelete = defaults.deactivateOnDelete;
    	      this.enabled = defaults.enabled;
    	      this.idpUid = defaults.idpUid;
    	      this.mappings = defaults.mappings;
    	      this.remoteUri = defaults.remoteUri;
        }

        @CustomType.Setter
        public Builder authentication(@Nullable AccessApplicationScimConfigAuthentication authentication) {

            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder deactivateOnDelete(@Nullable Boolean deactivateOnDelete) {

            this.deactivateOnDelete = deactivateOnDelete;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder idpUid(String idpUid) {
            if (idpUid == null) {
              throw new MissingRequiredPropertyException("AccessApplicationScimConfig", "idpUid");
            }
            this.idpUid = idpUid;
            return this;
        }
        @CustomType.Setter
        public Builder mappings(@Nullable List<AccessApplicationScimConfigMapping> mappings) {

            this.mappings = mappings;
            return this;
        }
        public Builder mappings(AccessApplicationScimConfigMapping... mappings) {
            return mappings(List.of(mappings));
        }
        @CustomType.Setter
        public Builder remoteUri(String remoteUri) {
            if (remoteUri == null) {
              throw new MissingRequiredPropertyException("AccessApplicationScimConfig", "remoteUri");
            }
            this.remoteUri = remoteUri;
            return this;
        }
        public AccessApplicationScimConfig build() {
            final var _resultValue = new AccessApplicationScimConfig();
            _resultValue.authentication = authentication;
            _resultValue.deactivateOnDelete = deactivateOnDelete;
            _resultValue.enabled = enabled;
            _resultValue.idpUid = idpUid;
            _resultValue.mappings = mappings;
            _resultValue.remoteUri = remoteUri;
            return _resultValue;
        }
    }
}
