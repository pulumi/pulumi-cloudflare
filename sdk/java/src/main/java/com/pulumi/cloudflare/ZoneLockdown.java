// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.Utilities;
import com.pulumi.cloudflare.ZoneLockdownArgs;
import com.pulumi.cloudflare.inputs.ZoneLockdownState;
import com.pulumi.cloudflare.outputs.ZoneLockdownConfiguration;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Cloudflare Zone Lockdown resource. Zone Lockdown allows
 * you to define one or more URLs (with wildcard matching on the domain
 * or path) that will only permit access if the request originates
 * from an IP address that matches a safelist of one or more IP
 * addresses and/or IP ranges.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.cloudflare.ZoneLockdown;
 * import com.pulumi.cloudflare.ZoneLockdownArgs;
 * import com.pulumi.cloudflare.inputs.ZoneLockdownConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Restrict access to these endpoints to requests from a known IP address range.
 *         var example = new ZoneLockdown(&#34;example&#34;, ZoneLockdownArgs.builder()        
 *             .configurations(ZoneLockdownConfigurationArgs.builder()
 *                 .target(&#34;ip_range&#34;)
 *                 .value(&#34;192.0.2.0/24&#34;)
 *                 .build())
 *             .description(&#34;Restrict access to these endpoints to requests from a known IP address range&#34;)
 *             .paused(&#34;false&#34;)
 *             .urls(&#34;api.mysite.com/some/endpoint*&#34;)
 *             .zoneId(&#34;0da42c8d2132a9ddaf714f9e7c920711&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import cloudflare:index/zoneLockdown:ZoneLockdown example &lt;zone_id&gt;/&lt;lockdown_id&gt;
 * ```
 * 
 */
@ResourceType(type="cloudflare:index/zoneLockdown:ZoneLockdown")
public class ZoneLockdown extends com.pulumi.resources.CustomResource {
    /**
     * A list of IP addresses or IP ranges to match the request against specified in target, value pairs.
     * 
     */
    @Export(name="configurations", refs={List.class,ZoneLockdownConfiguration.class}, tree="[0,1]")
    private Output<List<ZoneLockdownConfiguration>> configurations;

    /**
     * @return A list of IP addresses or IP ranges to match the request against specified in target, value pairs.
     * 
     */
    public Output<List<ZoneLockdownConfiguration>> configurations() {
        return this.configurations;
    }
    /**
     * A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A description about the lockdown entry. Typically used as a reminder or explanation for the lockdown.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Boolean of whether this zone lockdown is currently paused. Defaults to `false`.
     * 
     */
    @Export(name="paused", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> paused;

    /**
     * @return Boolean of whether this zone lockdown is currently paused. Defaults to `false`.
     * 
     */
    public Output<Optional<Boolean>> paused() {
        return Codegen.optional(this.paused);
    }
    @Export(name="priority", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> priority;

    public Output<Optional<Integer>> priority() {
        return Codegen.optional(this.priority);
    }
    /**
     * A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
     * 
     */
    @Export(name="urls", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> urls;

    /**
     * @return A list of simple wildcard patterns to match requests against. The order of the urls is unimportant.
     * 
     */
    public Output<List<String>> urls() {
        return this.urls;
    }
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    @Export(name="zoneId", refs={String.class}, tree="[0]")
    private Output<String> zoneId;

    /**
     * @return The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ZoneLockdown(String name) {
        this(name, ZoneLockdownArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ZoneLockdown(String name, ZoneLockdownArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ZoneLockdown(String name, ZoneLockdownArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneLockdown:ZoneLockdown", name, args == null ? ZoneLockdownArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ZoneLockdown(String name, Output<String> id, @Nullable ZoneLockdownState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("cloudflare:index/zoneLockdown:ZoneLockdown", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ZoneLockdown get(String name, Output<String> id, @Nullable ZoneLockdownState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ZoneLockdown(name, id, state, options);
    }
}
