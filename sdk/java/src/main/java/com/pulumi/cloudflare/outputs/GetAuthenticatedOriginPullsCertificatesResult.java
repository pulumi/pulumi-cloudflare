// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAuthenticatedOriginPullsCertificatesResult {
    /**
     * @return The zone&#39;s leaf certificate.
     * 
     */
    private String certificate;
    /**
     * @return Indicates whether zone-level authenticated origin pulls is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return When the certificate from the authority expires.
     * 
     */
    private String expiresOn;
    /**
     * @return Identifier
     * 
     */
    private String id;
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    private String issuer;
    /**
     * @return The zone&#39;s private key.
     * 
     */
    private String privateKey;
    /**
     * @return The type of hash used for the certificate.
     * 
     */
    private String signature;
    /**
     * @return Status of the certificate activation.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    private String status;
    /**
     * @return This is the time the certificate was uploaded.
     * 
     */
    private String uploadedOn;

    private GetAuthenticatedOriginPullsCertificatesResult() {}
    /**
     * @return The zone&#39;s leaf certificate.
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Indicates whether zone-level authenticated origin pulls is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return When the certificate from the authority expires.
     * 
     */
    public String expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return Identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return The zone&#39;s private key.
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return The type of hash used for the certificate.
     * 
     */
    public String signature() {
        return this.signature;
    }
    /**
     * @return Status of the certificate activation.
     * Available values: &#34;initializing&#34;, &#34;pending*deployment&#34;, &#34;pending*deletion&#34;, &#34;active&#34;, &#34;deleted&#34;, &#34;deployment*timed*out&#34;, &#34;deletion*timed*out&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return This is the time the certificate was uploaded.
     * 
     */
    public String uploadedOn() {
        return this.uploadedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAuthenticatedOriginPullsCertificatesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificate;
        private Boolean enabled;
        private String expiresOn;
        private String id;
        private String issuer;
        private String privateKey;
        private String signature;
        private String status;
        private String uploadedOn;
        public Builder() {}
        public Builder(GetAuthenticatedOriginPullsCertificatesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificate = defaults.certificate;
    	      this.enabled = defaults.enabled;
    	      this.expiresOn = defaults.expiresOn;
    	      this.id = defaults.id;
    	      this.issuer = defaults.issuer;
    	      this.privateKey = defaults.privateKey;
    	      this.signature = defaults.signature;
    	      this.status = defaults.status;
    	      this.uploadedOn = defaults.uploadedOn;
        }

        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(String expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder signature(String signature) {
            if (signature == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "signature");
            }
            this.signature = signature;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uploadedOn(String uploadedOn) {
            if (uploadedOn == null) {
              throw new MissingRequiredPropertyException("GetAuthenticatedOriginPullsCertificatesResult", "uploadedOn");
            }
            this.uploadedOn = uploadedOn;
            return this;
        }
        public GetAuthenticatedOriginPullsCertificatesResult build() {
            final var _resultValue = new GetAuthenticatedOriginPullsCertificatesResult();
            _resultValue.certificate = certificate;
            _resultValue.enabled = enabled;
            _resultValue.expiresOn = expiresOn;
            _resultValue.id = id;
            _resultValue.issuer = issuer;
            _resultValue.privateKey = privateKey;
            _resultValue.signature = signature;
            _resultValue.status = status;
            _resultValue.uploadedOn = uploadedOn;
            return _resultValue;
        }
    }
}
