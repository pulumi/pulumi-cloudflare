// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSchemaValidationSchemasListResult {
    private String createdAt;
    /**
     * @return The kind of the schema
     * Available values: &#34;openapiV3&#34;.
     * 
     */
    private String kind;
    /**
     * @return A human-readable name for the schema
     * 
     */
    private String name;
    /**
     * @return A unique identifier of this schema
     * 
     */
    private String schemaId;
    /**
     * @return The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     * 
     */
    private String source;
    /**
     * @return An indicator if this schema is enabled
     * 
     */
    private Boolean validationEnabled;

    private GetSchemaValidationSchemasListResult() {}
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The kind of the schema
     * Available values: &#34;openapiV3&#34;.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return A human-readable name for the schema
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A unique identifier of this schema
     * 
     */
    public String schemaId() {
        return this.schemaId;
    }
    /**
     * @return The raw schema, e.g., the OpenAPI schema, either as JSON or YAML
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return An indicator if this schema is enabled
     * 
     */
    public Boolean validationEnabled() {
        return this.validationEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSchemaValidationSchemasListResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String kind;
        private String name;
        private String schemaId;
        private String source;
        private Boolean validationEnabled;
        public Builder() {}
        public Builder(GetSchemaValidationSchemasListResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.schemaId = defaults.schemaId;
    	      this.source = defaults.source;
    	      this.validationEnabled = defaults.validationEnabled;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder schemaId(String schemaId) {
            if (schemaId == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "schemaId");
            }
            this.schemaId = schemaId;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder validationEnabled(Boolean validationEnabled) {
            if (validationEnabled == null) {
              throw new MissingRequiredPropertyException("GetSchemaValidationSchemasListResult", "validationEnabled");
            }
            this.validationEnabled = validationEnabled;
            return this;
        }
        public GetSchemaValidationSchemasListResult build() {
            final var _resultValue = new GetSchemaValidationSchemasListResult();
            _resultValue.createdAt = createdAt;
            _resultValue.kind = kind;
            _resultValue.name = name;
            _resultValue.schemaId = schemaId;
            _resultValue.source = source;
            _resultValue.validationEnabled = validationEnabled;
            return _resultValue;
        }
    }
}
