// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.R2BucketLifecycleRuleAbortMultipartUploadsTransitionArgs;
import com.pulumi.cloudflare.inputs.R2BucketLifecycleRuleConditionsArgs;
import com.pulumi.cloudflare.inputs.R2BucketLifecycleRuleDeleteObjectsTransitionArgs;
import com.pulumi.cloudflare.inputs.R2BucketLifecycleRuleStorageClassTransitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class R2BucketLifecycleRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final R2BucketLifecycleRuleArgs Empty = new R2BucketLifecycleRuleArgs();

    /**
     * Transition to abort ongoing multipart uploads.
     * 
     */
    @Import(name="abortMultipartUploadsTransition")
    private @Nullable Output<R2BucketLifecycleRuleAbortMultipartUploadsTransitionArgs> abortMultipartUploadsTransition;

    /**
     * @return Transition to abort ongoing multipart uploads.
     * 
     */
    public Optional<Output<R2BucketLifecycleRuleAbortMultipartUploadsTransitionArgs>> abortMultipartUploadsTransition() {
        return Optional.ofNullable(this.abortMultipartUploadsTransition);
    }

    /**
     * Conditions that apply to all transitions of this rule.
     * 
     */
    @Import(name="conditions", required=true)
    private Output<R2BucketLifecycleRuleConditionsArgs> conditions;

    /**
     * @return Conditions that apply to all transitions of this rule.
     * 
     */
    public Output<R2BucketLifecycleRuleConditionsArgs> conditions() {
        return this.conditions;
    }

    /**
     * Transition to delete objects.
     * 
     */
    @Import(name="deleteObjectsTransition")
    private @Nullable Output<R2BucketLifecycleRuleDeleteObjectsTransitionArgs> deleteObjectsTransition;

    /**
     * @return Transition to delete objects.
     * 
     */
    public Optional<Output<R2BucketLifecycleRuleDeleteObjectsTransitionArgs>> deleteObjectsTransition() {
        return Optional.ofNullable(this.deleteObjectsTransition);
    }

    /**
     * Whether or not this rule is in effect.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether or not this rule is in effect.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Unique identifier for this rule.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Unique identifier for this rule.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Transitions to change the storage class of objects.
     * 
     */
    @Import(name="storageClassTransitions")
    private @Nullable Output<List<R2BucketLifecycleRuleStorageClassTransitionArgs>> storageClassTransitions;

    /**
     * @return Transitions to change the storage class of objects.
     * 
     */
    public Optional<Output<List<R2BucketLifecycleRuleStorageClassTransitionArgs>>> storageClassTransitions() {
        return Optional.ofNullable(this.storageClassTransitions);
    }

    private R2BucketLifecycleRuleArgs() {}

    private R2BucketLifecycleRuleArgs(R2BucketLifecycleRuleArgs $) {
        this.abortMultipartUploadsTransition = $.abortMultipartUploadsTransition;
        this.conditions = $.conditions;
        this.deleteObjectsTransition = $.deleteObjectsTransition;
        this.enabled = $.enabled;
        this.id = $.id;
        this.storageClassTransitions = $.storageClassTransitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(R2BucketLifecycleRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private R2BucketLifecycleRuleArgs $;

        public Builder() {
            $ = new R2BucketLifecycleRuleArgs();
        }

        public Builder(R2BucketLifecycleRuleArgs defaults) {
            $ = new R2BucketLifecycleRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abortMultipartUploadsTransition Transition to abort ongoing multipart uploads.
         * 
         * @return builder
         * 
         */
        public Builder abortMultipartUploadsTransition(@Nullable Output<R2BucketLifecycleRuleAbortMultipartUploadsTransitionArgs> abortMultipartUploadsTransition) {
            $.abortMultipartUploadsTransition = abortMultipartUploadsTransition;
            return this;
        }

        /**
         * @param abortMultipartUploadsTransition Transition to abort ongoing multipart uploads.
         * 
         * @return builder
         * 
         */
        public Builder abortMultipartUploadsTransition(R2BucketLifecycleRuleAbortMultipartUploadsTransitionArgs abortMultipartUploadsTransition) {
            return abortMultipartUploadsTransition(Output.of(abortMultipartUploadsTransition));
        }

        /**
         * @param conditions Conditions that apply to all transitions of this rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(Output<R2BucketLifecycleRuleConditionsArgs> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Conditions that apply to all transitions of this rule.
         * 
         * @return builder
         * 
         */
        public Builder conditions(R2BucketLifecycleRuleConditionsArgs conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param deleteObjectsTransition Transition to delete objects.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsTransition(@Nullable Output<R2BucketLifecycleRuleDeleteObjectsTransitionArgs> deleteObjectsTransition) {
            $.deleteObjectsTransition = deleteObjectsTransition;
            return this;
        }

        /**
         * @param deleteObjectsTransition Transition to delete objects.
         * 
         * @return builder
         * 
         */
        public Builder deleteObjectsTransition(R2BucketLifecycleRuleDeleteObjectsTransitionArgs deleteObjectsTransition) {
            return deleteObjectsTransition(Output.of(deleteObjectsTransition));
        }

        /**
         * @param enabled Whether or not this rule is in effect.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not this rule is in effect.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param id Unique identifier for this rule.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Unique identifier for this rule.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param storageClassTransitions Transitions to change the storage class of objects.
         * 
         * @return builder
         * 
         */
        public Builder storageClassTransitions(@Nullable Output<List<R2BucketLifecycleRuleStorageClassTransitionArgs>> storageClassTransitions) {
            $.storageClassTransitions = storageClassTransitions;
            return this;
        }

        /**
         * @param storageClassTransitions Transitions to change the storage class of objects.
         * 
         * @return builder
         * 
         */
        public Builder storageClassTransitions(List<R2BucketLifecycleRuleStorageClassTransitionArgs> storageClassTransitions) {
            return storageClassTransitions(Output.of(storageClassTransitions));
        }

        /**
         * @param storageClassTransitions Transitions to change the storage class of objects.
         * 
         * @return builder
         * 
         */
        public Builder storageClassTransitions(R2BucketLifecycleRuleStorageClassTransitionArgs... storageClassTransitions) {
            return storageClassTransitions(List.of(storageClassTransitions));
        }

        public R2BucketLifecycleRuleArgs build() {
            if ($.conditions == null) {
                throw new MissingRequiredPropertyException("R2BucketLifecycleRuleArgs", "conditions");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("R2BucketLifecycleRuleArgs", "enabled");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("R2BucketLifecycleRuleArgs", "id");
            }
            return $;
        }
    }

}
