// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverridesAdaptiveRouting;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverridesLocationStrategy;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverridesRandomSteering;
import com.pulumi.cloudflare.outputs.LoadBalancerRuleOverridesSessionAffinityAttributes;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerRuleOverrides {
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    private @Nullable LoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting;
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    private @Nullable Map<String,List<String>> countryPools;
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    private @Nullable List<String> defaultPools;
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    private @Nullable String fallbackPool;
    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    private @Nullable LoadBalancerRuleOverridesLocationStrategy locationStrategy;
    /**
     * @return (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    private @Nullable Map<String,List<String>> popPools;
    /**
     * @return Configures pool weights.
     * 
     */
    private @Nullable LoadBalancerRuleOverridesRandomSteering randomSteering;
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    private @Nullable Map<String,List<String>> regionPools;
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    private @Nullable String sessionAffinity;
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    private @Nullable LoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes;
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    private @Nullable Double sessionAffinityTtl;
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    private @Nullable String steeringPolicy;
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    private @Nullable Double ttl;

    private LoadBalancerRuleOverrides() {}
    /**
     * @return Controls features that modify the routing of requests to pools and origins in response to dynamic conditions, such as during the interval between active health monitoring requests. For example, zero-downtime failover occurs immediately when an origin becomes unavailable due to HTTP 521, 522, or 523 response codes. If there is another healthy origin in the same pool, the request is retried once against this alternate origin.
     * 
     */
    public Optional<LoadBalancerRuleOverridesAdaptiveRouting> adaptiveRouting() {
        return Optional.ofNullable(this.adaptiveRouting);
    }
    /**
     * @return A mapping of country codes to a list of pool IDs (ordered by their failover priority) for the given country. Any country not explicitly defined will fall back to using the corresponding region*pool mapping if it exists else to default*pools.
     * 
     */
    public Map<String,List<String>> countryPools() {
        return this.countryPools == null ? Map.of() : this.countryPools;
    }
    /**
     * @return A list of pool IDs ordered by their failover priority. Pools defined here are used by default, or when region_pools are not configured for a given region.
     * 
     */
    public List<String> defaultPools() {
        return this.defaultPools == null ? List.of() : this.defaultPools;
    }
    /**
     * @return The pool ID to use when all other pools are detected as unhealthy.
     * 
     */
    public Optional<String> fallbackPool() {
        return Optional.ofNullable(this.fallbackPool);
    }
    /**
     * @return Controls location-based steering for non-proxied requests. See `steering_policy` to learn how steering is affected.
     * 
     */
    public Optional<LoadBalancerRuleOverridesLocationStrategy> locationStrategy() {
        return Optional.ofNullable(this.locationStrategy);
    }
    /**
     * @return (Enterprise only): A mapping of Cloudflare PoP identifiers to a list of pool IDs (ordered by their failover priority) for the PoP (datacenter). Any PoPs not explicitly defined will fall back to using the corresponding country*pool, then region*pool mapping if it exists else to default_pools.
     * 
     */
    public Map<String,List<String>> popPools() {
        return this.popPools == null ? Map.of() : this.popPools;
    }
    /**
     * @return Configures pool weights.
     * 
     */
    public Optional<LoadBalancerRuleOverridesRandomSteering> randomSteering() {
        return Optional.ofNullable(this.randomSteering);
    }
    /**
     * @return A mapping of region codes to a list of pool IDs (ordered by their failover priority) for the given region. Any regions not explicitly defined will fall back to using default_pools.
     * 
     */
    public Map<String,List<String>> regionPools() {
        return this.regionPools == null ? Map.of() : this.regionPools;
    }
    /**
     * @return Specifies the type of session affinity the load balancer should use unless specified as `&#34;none&#34;`. The supported types are:
     * 
     */
    public Optional<String> sessionAffinity() {
        return Optional.ofNullable(this.sessionAffinity);
    }
    /**
     * @return Configures attributes for session affinity.
     * 
     */
    public Optional<LoadBalancerRuleOverridesSessionAffinityAttributes> sessionAffinityAttributes() {
        return Optional.ofNullable(this.sessionAffinityAttributes);
    }
    /**
     * @return Time, in seconds, until a client&#39;s session expires after being created. Once the expiry time has been reached, subsequent requests may get sent to a different origin server. The accepted ranges per `session_affinity` policy are:
     * 
     */
    public Optional<Double> sessionAffinityTtl() {
        return Optional.ofNullable(this.sessionAffinityTtl);
    }
    /**
     * @return Steering Policy for this load balancer.
     * 
     */
    public Optional<String> steeringPolicy() {
        return Optional.ofNullable(this.steeringPolicy);
    }
    /**
     * @return Time to live (TTL) of the DNS entry for the IP address returned by this load balancer. This only applies to gray-clouded (unproxied) load balancers.
     * 
     */
    public Optional<Double> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerRuleOverrides defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable LoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting;
        private @Nullable Map<String,List<String>> countryPools;
        private @Nullable List<String> defaultPools;
        private @Nullable String fallbackPool;
        private @Nullable LoadBalancerRuleOverridesLocationStrategy locationStrategy;
        private @Nullable Map<String,List<String>> popPools;
        private @Nullable LoadBalancerRuleOverridesRandomSteering randomSteering;
        private @Nullable Map<String,List<String>> regionPools;
        private @Nullable String sessionAffinity;
        private @Nullable LoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes;
        private @Nullable Double sessionAffinityTtl;
        private @Nullable String steeringPolicy;
        private @Nullable Double ttl;
        public Builder() {}
        public Builder(LoadBalancerRuleOverrides defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveRouting = defaults.adaptiveRouting;
    	      this.countryPools = defaults.countryPools;
    	      this.defaultPools = defaults.defaultPools;
    	      this.fallbackPool = defaults.fallbackPool;
    	      this.locationStrategy = defaults.locationStrategy;
    	      this.popPools = defaults.popPools;
    	      this.randomSteering = defaults.randomSteering;
    	      this.regionPools = defaults.regionPools;
    	      this.sessionAffinity = defaults.sessionAffinity;
    	      this.sessionAffinityAttributes = defaults.sessionAffinityAttributes;
    	      this.sessionAffinityTtl = defaults.sessionAffinityTtl;
    	      this.steeringPolicy = defaults.steeringPolicy;
    	      this.ttl = defaults.ttl;
        }

        @CustomType.Setter
        public Builder adaptiveRouting(@Nullable LoadBalancerRuleOverridesAdaptiveRouting adaptiveRouting) {

            this.adaptiveRouting = adaptiveRouting;
            return this;
        }
        @CustomType.Setter
        public Builder countryPools(@Nullable Map<String,List<String>> countryPools) {

            this.countryPools = countryPools;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPools(@Nullable List<String> defaultPools) {

            this.defaultPools = defaultPools;
            return this;
        }
        public Builder defaultPools(String... defaultPools) {
            return defaultPools(List.of(defaultPools));
        }
        @CustomType.Setter
        public Builder fallbackPool(@Nullable String fallbackPool) {

            this.fallbackPool = fallbackPool;
            return this;
        }
        @CustomType.Setter
        public Builder locationStrategy(@Nullable LoadBalancerRuleOverridesLocationStrategy locationStrategy) {

            this.locationStrategy = locationStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder popPools(@Nullable Map<String,List<String>> popPools) {

            this.popPools = popPools;
            return this;
        }
        @CustomType.Setter
        public Builder randomSteering(@Nullable LoadBalancerRuleOverridesRandomSteering randomSteering) {

            this.randomSteering = randomSteering;
            return this;
        }
        @CustomType.Setter
        public Builder regionPools(@Nullable Map<String,List<String>> regionPools) {

            this.regionPools = regionPools;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinity(@Nullable String sessionAffinity) {

            this.sessionAffinity = sessionAffinity;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityAttributes(@Nullable LoadBalancerRuleOverridesSessionAffinityAttributes sessionAffinityAttributes) {

            this.sessionAffinityAttributes = sessionAffinityAttributes;
            return this;
        }
        @CustomType.Setter
        public Builder sessionAffinityTtl(@Nullable Double sessionAffinityTtl) {

            this.sessionAffinityTtl = sessionAffinityTtl;
            return this;
        }
        @CustomType.Setter
        public Builder steeringPolicy(@Nullable String steeringPolicy) {

            this.steeringPolicy = steeringPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(@Nullable Double ttl) {

            this.ttl = ttl;
            return this;
        }
        public LoadBalancerRuleOverrides build() {
            final var _resultValue = new LoadBalancerRuleOverrides();
            _resultValue.adaptiveRouting = adaptiveRouting;
            _resultValue.countryPools = countryPools;
            _resultValue.defaultPools = defaultPools;
            _resultValue.fallbackPool = fallbackPool;
            _resultValue.locationStrategy = locationStrategy;
            _resultValue.popPools = popPools;
            _resultValue.randomSteering = randomSteering;
            _resultValue.regionPools = regionPools;
            _resultValue.sessionAffinity = sessionAffinity;
            _resultValue.sessionAffinityAttributes = sessionAffinityAttributes;
            _resultValue.sessionAffinityTtl = sessionAffinityTtl;
            _resultValue.steeringPolicy = steeringPolicy;
            _resultValue.ttl = ttl;
            return _resultValue;
        }
    }
}
