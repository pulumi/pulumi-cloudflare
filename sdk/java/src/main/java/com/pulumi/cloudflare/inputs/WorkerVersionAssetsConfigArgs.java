// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkerVersionAssetsConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerVersionAssetsConfigArgs Empty = new WorkerVersionAssetsConfigArgs();

    /**
     * Determines the redirects and rewrites of requests for HTML content.
     * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
     * 
     */
    @Import(name="htmlHandling")
    private @Nullable Output<String> htmlHandling;

    /**
     * @return Determines the redirects and rewrites of requests for HTML content.
     * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
     * 
     */
    public Optional<Output<String>> htmlHandling() {
        return Optional.ofNullable(this.htmlHandling);
    }

    /**
     * Determines the response when a request does not match a static asset, and there is no Worker script.
     * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
     * 
     */
    @Import(name="notFoundHandling")
    private @Nullable Output<String> notFoundHandling;

    /**
     * @return Determines the response when a request does not match a static asset, and there is no Worker script.
     * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
     * 
     */
    public Optional<Output<String>> notFoundHandling() {
        return Optional.ofNullable(this.notFoundHandling);
    }

    /**
     * Contains a list path rules to control routing to either the Worker or assets. Glob (*) and negative (!) rules are supported. Rules must start with either &#39;/&#39; or &#39;!/&#39;. At least one non-negative rule must be provided, and negative rules have higher precedence than non-negative rules.
     * 
     */
    @Import(name="runWorkerFirsts")
    private @Nullable Output<List<String>> runWorkerFirsts;

    /**
     * @return Contains a list path rules to control routing to either the Worker or assets. Glob (*) and negative (!) rules are supported. Rules must start with either &#39;/&#39; or &#39;!/&#39;. At least one non-negative rule must be provided, and negative rules have higher precedence than non-negative rules.
     * 
     */
    public Optional<Output<List<String>>> runWorkerFirsts() {
        return Optional.ofNullable(this.runWorkerFirsts);
    }

    private WorkerVersionAssetsConfigArgs() {}

    private WorkerVersionAssetsConfigArgs(WorkerVersionAssetsConfigArgs $) {
        this.htmlHandling = $.htmlHandling;
        this.notFoundHandling = $.notFoundHandling;
        this.runWorkerFirsts = $.runWorkerFirsts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerVersionAssetsConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerVersionAssetsConfigArgs $;

        public Builder() {
            $ = new WorkerVersionAssetsConfigArgs();
        }

        public Builder(WorkerVersionAssetsConfigArgs defaults) {
            $ = new WorkerVersionAssetsConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param htmlHandling Determines the redirects and rewrites of requests for HTML content.
         * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder htmlHandling(@Nullable Output<String> htmlHandling) {
            $.htmlHandling = htmlHandling;
            return this;
        }

        /**
         * @param htmlHandling Determines the redirects and rewrites of requests for HTML content.
         * Available values: &#34;auto-trailing-slash&#34;, &#34;force-trailing-slash&#34;, &#34;drop-trailing-slash&#34;, &#34;none&#34;.
         * 
         * @return builder
         * 
         */
        public Builder htmlHandling(String htmlHandling) {
            return htmlHandling(Output.of(htmlHandling));
        }

        /**
         * @param notFoundHandling Determines the response when a request does not match a static asset, and there is no Worker script.
         * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notFoundHandling(@Nullable Output<String> notFoundHandling) {
            $.notFoundHandling = notFoundHandling;
            return this;
        }

        /**
         * @param notFoundHandling Determines the response when a request does not match a static asset, and there is no Worker script.
         * Available values: &#34;none&#34;, &#34;404-page&#34;, &#34;single-page-application&#34;.
         * 
         * @return builder
         * 
         */
        public Builder notFoundHandling(String notFoundHandling) {
            return notFoundHandling(Output.of(notFoundHandling));
        }

        /**
         * @param runWorkerFirsts Contains a list path rules to control routing to either the Worker or assets. Glob (*) and negative (!) rules are supported. Rules must start with either &#39;/&#39; or &#39;!/&#39;. At least one non-negative rule must be provided, and negative rules have higher precedence than non-negative rules.
         * 
         * @return builder
         * 
         */
        public Builder runWorkerFirsts(@Nullable Output<List<String>> runWorkerFirsts) {
            $.runWorkerFirsts = runWorkerFirsts;
            return this;
        }

        /**
         * @param runWorkerFirsts Contains a list path rules to control routing to either the Worker or assets. Glob (*) and negative (!) rules are supported. Rules must start with either &#39;/&#39; or &#39;!/&#39;. At least one non-negative rule must be provided, and negative rules have higher precedence than non-negative rules.
         * 
         * @return builder
         * 
         */
        public Builder runWorkerFirsts(List<String> runWorkerFirsts) {
            return runWorkerFirsts(Output.of(runWorkerFirsts));
        }

        /**
         * @param runWorkerFirsts Contains a list path rules to control routing to either the Worker or assets. Glob (*) and negative (!) rules are supported. Rules must start with either &#39;/&#39; or &#39;!/&#39;. At least one non-negative rule must be provided, and negative rules have higher precedence than non-negative rules.
         * 
         * @return builder
         * 
         */
        public Builder runWorkerFirsts(String... runWorkerFirsts) {
            return runWorkerFirsts(List.of(runWorkerFirsts));
        }

        public WorkerVersionAssetsConfigArgs build() {
            return $;
        }
    }

}
