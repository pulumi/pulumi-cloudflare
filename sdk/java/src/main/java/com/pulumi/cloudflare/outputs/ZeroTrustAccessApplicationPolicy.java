// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.ZeroTrustAccessApplicationPolicyConnectionRules;
import com.pulumi.cloudflare.outputs.ZeroTrustAccessApplicationPolicyExclude;
import com.pulumi.cloudflare.outputs.ZeroTrustAccessApplicationPolicyInclude;
import com.pulumi.cloudflare.outputs.ZeroTrustAccessApplicationPolicyRequire;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ZeroTrustAccessApplicationPolicy {
    /**
     * @return The rules that define how users may connect to the targets secured by your application.
     * 
     */
    private @Nullable ZeroTrustAccessApplicationPolicyConnectionRules connectionRules;
    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    private @Nullable String decision;
    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    private @Nullable List<ZeroTrustAccessApplicationPolicyExclude> excludes;
    /**
     * @return The UUID of the policy
     * 
     */
    private @Nullable String id;
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    private @Nullable List<ZeroTrustAccessApplicationPolicyInclude> includes;
    /**
     * @return The name of the Access policy.
     * 
     */
    private @Nullable String name;
    /**
     * @return The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    private @Nullable Integer precedence;
    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    private @Nullable List<ZeroTrustAccessApplicationPolicyRequire> requires;

    private ZeroTrustAccessApplicationPolicy() {}
    /**
     * @return The rules that define how users may connect to the targets secured by your application.
     * 
     */
    public Optional<ZeroTrustAccessApplicationPolicyConnectionRules> connectionRules() {
        return Optional.ofNullable(this.connectionRules);
    }
    /**
     * @return The action Access will take if a user matches this policy. Infrastructure application policies can only use the Allow action.
     * Available values: &#34;allow&#34;, &#34;deny&#34;, &#34;non_identity&#34;, &#34;bypass&#34;.
     * 
     */
    public Optional<String> decision() {
        return Optional.ofNullable(this.decision);
    }
    /**
     * @return Rules evaluated with a NOT logical operator. To match the policy, a user cannot meet any of the Exclude rules.
     * 
     */
    public List<ZeroTrustAccessApplicationPolicyExclude> excludes() {
        return this.excludes == null ? List.of() : this.excludes;
    }
    /**
     * @return The UUID of the policy
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Rules evaluated with an OR logical operator. A user needs to meet only one of the Include rules.
     * 
     */
    public List<ZeroTrustAccessApplicationPolicyInclude> includes() {
        return this.includes == null ? List.of() : this.includes;
    }
    /**
     * @return The name of the Access policy.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The order of execution for this policy. Must be unique for each policy within an app.
     * 
     */
    public Optional<Integer> precedence() {
        return Optional.ofNullable(this.precedence);
    }
    /**
     * @return Rules evaluated with an AND logical operator. To match the policy, a user must meet all of the Require rules.
     * 
     */
    public List<ZeroTrustAccessApplicationPolicyRequire> requires() {
        return this.requires == null ? List.of() : this.requires;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ZeroTrustAccessApplicationPolicy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable ZeroTrustAccessApplicationPolicyConnectionRules connectionRules;
        private @Nullable String decision;
        private @Nullable List<ZeroTrustAccessApplicationPolicyExclude> excludes;
        private @Nullable String id;
        private @Nullable List<ZeroTrustAccessApplicationPolicyInclude> includes;
        private @Nullable String name;
        private @Nullable Integer precedence;
        private @Nullable List<ZeroTrustAccessApplicationPolicyRequire> requires;
        public Builder() {}
        public Builder(ZeroTrustAccessApplicationPolicy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionRules = defaults.connectionRules;
    	      this.decision = defaults.decision;
    	      this.excludes = defaults.excludes;
    	      this.id = defaults.id;
    	      this.includes = defaults.includes;
    	      this.name = defaults.name;
    	      this.precedence = defaults.precedence;
    	      this.requires = defaults.requires;
        }

        @CustomType.Setter
        public Builder connectionRules(@Nullable ZeroTrustAccessApplicationPolicyConnectionRules connectionRules) {

            this.connectionRules = connectionRules;
            return this;
        }
        @CustomType.Setter
        public Builder decision(@Nullable String decision) {

            this.decision = decision;
            return this;
        }
        @CustomType.Setter
        public Builder excludes(@Nullable List<ZeroTrustAccessApplicationPolicyExclude> excludes) {

            this.excludes = excludes;
            return this;
        }
        public Builder excludes(ZeroTrustAccessApplicationPolicyExclude... excludes) {
            return excludes(List.of(excludes));
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includes(@Nullable List<ZeroTrustAccessApplicationPolicyInclude> includes) {

            this.includes = includes;
            return this;
        }
        public Builder includes(ZeroTrustAccessApplicationPolicyInclude... includes) {
            return includes(List.of(includes));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder precedence(@Nullable Integer precedence) {

            this.precedence = precedence;
            return this;
        }
        @CustomType.Setter
        public Builder requires(@Nullable List<ZeroTrustAccessApplicationPolicyRequire> requires) {

            this.requires = requires;
            return this;
        }
        public Builder requires(ZeroTrustAccessApplicationPolicyRequire... requires) {
            return requires(List.of(requires));
        }
        public ZeroTrustAccessApplicationPolicy build() {
            final var _resultValue = new ZeroTrustAccessApplicationPolicy();
            _resultValue.connectionRules = connectionRules;
            _resultValue.decision = decision;
            _resultValue.excludes = excludes;
            _resultValue.id = id;
            _resultValue.includes = includes;
            _resultValue.name = name;
            _resultValue.precedence = precedence;
            _resultValue.requires = requires;
            return _resultValue;
        }
    }
}
