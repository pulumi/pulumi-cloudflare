// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DevicePostureRuleInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final DevicePostureRuleInputArgs Empty = new DevicePostureRuleInputArgs();

    @Import(name="complianceStatus")
    private @Nullable Output<String> complianceStatus;

    public Optional<Output<String>> complianceStatus() {
        return Optional.ofNullable(this.complianceStatus);
    }

    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * = (Required) The domain that the client must join.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return = (Required) The domain that the client must join.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * = (Required) True if the firewall must be enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return = (Required) True if the firewall must be enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Checks if the file should exist.
     * 
     */
    @Import(name="exists")
    private @Nullable Output<Boolean> exists;

    /**
     * @return Checks if the file should exist.
     * 
     */
    public Optional<Output<Boolean>> exists() {
        return Optional.ofNullable(this.exists);
    }

    /**
     * The Teams List id.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The Teams List id.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * = (Required) The version comparison operator in (&gt;,&gt;=,&lt;,&lt;=,==)
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return = (Required) The version comparison operator in (&gt;,&gt;=,&lt;,&lt;=,==)
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * The path to the application.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return The path to the application.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * = (Required) True if all drives must be encrypted.
     * 
     */
    @Import(name="requireAll")
    private @Nullable Output<Boolean> requireAll;

    /**
     * @return = (Required) True if all drives must be encrypted.
     * 
     */
    public Optional<Output<Boolean>> requireAll() {
        return Optional.ofNullable(this.requireAll);
    }

    /**
     * Checks if the application should be running.
     * 
     */
    @Import(name="running")
    private @Nullable Output<Boolean> running;

    /**
     * @return Checks if the application should be running.
     * 
     */
    public Optional<Output<Boolean>> running() {
        return Optional.ofNullable(this.running);
    }

    /**
     * The sha256 hash of the file.
     * 
     */
    @Import(name="sha256")
    private @Nullable Output<String> sha256;

    /**
     * @return The sha256 hash of the file.
     * 
     */
    public Optional<Output<String>> sha256() {
        return Optional.ofNullable(this.sha256);
    }

    /**
     * The thumbprint of the application certificate.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The thumbprint of the application certificate.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * = (Required) The operating system semantic version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return = (Required) The operating system semantic version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DevicePostureRuleInputArgs() {}

    private DevicePostureRuleInputArgs(DevicePostureRuleInputArgs $) {
        this.complianceStatus = $.complianceStatus;
        this.connectionId = $.connectionId;
        this.domain = $.domain;
        this.enabled = $.enabled;
        this.exists = $.exists;
        this.id = $.id;
        this.operator = $.operator;
        this.path = $.path;
        this.requireAll = $.requireAll;
        this.running = $.running;
        this.sha256 = $.sha256;
        this.thumbprint = $.thumbprint;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DevicePostureRuleInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePostureRuleInputArgs $;

        public Builder() {
            $ = new DevicePostureRuleInputArgs();
        }

        public Builder(DevicePostureRuleInputArgs defaults) {
            $ = new DevicePostureRuleInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder complianceStatus(@Nullable Output<String> complianceStatus) {
            $.complianceStatus = complianceStatus;
            return this;
        }

        public Builder complianceStatus(String complianceStatus) {
            return complianceStatus(Output.of(complianceStatus));
        }

        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param domain = (Required) The domain that the client must join.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain = (Required) The domain that the client must join.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param enabled = (Required) True if the firewall must be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled = (Required) True if the firewall must be enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param exists Checks if the file should exist.
         * 
         * @return builder
         * 
         */
        public Builder exists(@Nullable Output<Boolean> exists) {
            $.exists = exists;
            return this;
        }

        /**
         * @param exists Checks if the file should exist.
         * 
         * @return builder
         * 
         */
        public Builder exists(Boolean exists) {
            return exists(Output.of(exists));
        }

        /**
         * @param id The Teams List id.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Teams List id.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param operator = (Required) The version comparison operator in (&gt;,&gt;=,&lt;,&lt;=,==)
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator = (Required) The version comparison operator in (&gt;,&gt;=,&lt;,&lt;=,==)
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param path The path to the application.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to the application.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param requireAll = (Required) True if all drives must be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder requireAll(@Nullable Output<Boolean> requireAll) {
            $.requireAll = requireAll;
            return this;
        }

        /**
         * @param requireAll = (Required) True if all drives must be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder requireAll(Boolean requireAll) {
            return requireAll(Output.of(requireAll));
        }

        /**
         * @param running Checks if the application should be running.
         * 
         * @return builder
         * 
         */
        public Builder running(@Nullable Output<Boolean> running) {
            $.running = running;
            return this;
        }

        /**
         * @param running Checks if the application should be running.
         * 
         * @return builder
         * 
         */
        public Builder running(Boolean running) {
            return running(Output.of(running));
        }

        /**
         * @param sha256 The sha256 hash of the file.
         * 
         * @return builder
         * 
         */
        public Builder sha256(@Nullable Output<String> sha256) {
            $.sha256 = sha256;
            return this;
        }

        /**
         * @param sha256 The sha256 hash of the file.
         * 
         * @return builder
         * 
         */
        public Builder sha256(String sha256) {
            return sha256(Output.of(sha256));
        }

        /**
         * @param thumbprint The thumbprint of the application certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The thumbprint of the application certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        /**
         * @param version = (Required) The operating system semantic version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version = (Required) The operating system semantic version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DevicePostureRuleInputArgs build() {
            return $;
        }
    }

}
