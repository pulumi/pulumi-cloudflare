// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.DevicePostureRuleInputLocationsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DevicePostureRuleInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final DevicePostureRuleInputArgs Empty = new DevicePostureRuleInputArgs();

    /**
     * The Number of active threats.
     * 
     */
    @Import(name="activeThreats")
    private @Nullable Output<Double> activeThreats;

    /**
     * @return The Number of active threats.
     * 
     */
    public Optional<Output<Double>> activeThreats() {
        return Optional.ofNullable(this.activeThreats);
    }

    /**
     * UUID of Cloudflare managed certificate.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return UUID of Cloudflare managed certificate.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * List of volume names to be checked for encryption.
     * 
     */
    @Import(name="checkDisks")
    private @Nullable Output<List<String>> checkDisks;

    /**
     * @return List of volume names to be checked for encryption.
     * 
     */
    public Optional<Output<List<String>>> checkDisks() {
        return Optional.ofNullable(this.checkDisks);
    }

    /**
     * Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    @Import(name="checkPrivateKey")
    private @Nullable Output<Boolean> checkPrivateKey;

    /**
     * @return Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
     * 
     */
    public Optional<Output<Boolean>> checkPrivateKey() {
        return Optional.ofNullable(this.checkPrivateKey);
    }

    /**
     * Common Name that is protected by the certificate.
     * 
     */
    @Import(name="cn")
    private @Nullable Output<String> cn;

    /**
     * @return Common Name that is protected by the certificate.
     * 
     */
    public Optional<Output<String>> cn() {
        return Optional.ofNullable(this.cn);
    }

    /**
     * Compliance Status.
     * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
     * 
     */
    @Import(name="complianceStatus")
    private @Nullable Output<String> complianceStatus;

    /**
     * @return Compliance Status.
     * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
     * 
     */
    public Optional<Output<String>> complianceStatus() {
        return Optional.ofNullable(this.complianceStatus);
    }

    /**
     * Posture Integration ID.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Posture Integration ID.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Count Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    @Import(name="countOperator")
    private @Nullable Output<String> countOperator;

    /**
     * @return Count Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<Output<String>> countOperator() {
        return Optional.ofNullable(this.countOperator);
    }

    /**
     * Domain.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    @Import(name="eidLastSeen")
    private @Nullable Output<String> eidLastSeen;

    /**
     * @return For more details on eid last seen, refer to the Tanium documentation.
     * 
     */
    public Optional<Output<String>> eidLastSeen() {
        return Optional.ofNullable(this.eidLastSeen);
    }

    /**
     * Enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether or not file exists.
     * 
     */
    @Import(name="exists")
    private @Nullable Output<Boolean> exists;

    /**
     * @return Whether or not file exists.
     * 
     */
    public Optional<Output<Boolean>> exists() {
        return Optional.ofNullable(this.exists);
    }

    /**
     * List of values indicating purposes for which the certificate public key can be used.
     * 
     */
    @Import(name="extendedKeyUsages")
    private @Nullable Output<List<String>> extendedKeyUsages;

    /**
     * @return List of values indicating purposes for which the certificate public key can be used.
     * 
     */
    public Optional<Output<List<String>>> extendedKeyUsages() {
        return Optional.ofNullable(this.extendedKeyUsages);
    }

    /**
     * List ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return List ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether device is infected.
     * 
     */
    @Import(name="infected")
    private @Nullable Output<Boolean> infected;

    /**
     * @return Whether device is infected.
     * 
     */
    public Optional<Output<Boolean>> infected() {
        return Optional.ofNullable(this.infected);
    }

    /**
     * Whether device is active.
     * 
     */
    @Import(name="isActive")
    private @Nullable Output<Boolean> isActive;

    /**
     * @return Whether device is active.
     * 
     */
    public Optional<Output<Boolean>> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    /**
     * The Number of Issues.
     * 
     */
    @Import(name="issueCount")
    private @Nullable Output<String> issueCount;

    /**
     * @return The Number of Issues.
     * 
     */
    public Optional<Output<String>> issueCount() {
        return Optional.ofNullable(this.issueCount);
    }

    /**
     * For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    @Import(name="lastSeen")
    private @Nullable Output<String> lastSeen;

    /**
     * @return For more details on last seen, please refer to the Crowdstrike documentation.
     * 
     */
    public Optional<Output<String>> lastSeen() {
        return Optional.ofNullable(this.lastSeen);
    }

    @Import(name="locations")
    private @Nullable Output<DevicePostureRuleInputLocationsArgs> locations;

    public Optional<Output<DevicePostureRuleInputLocationsArgs>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * Network status of device.
     * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
     * 
     */
    @Import(name="networkStatus")
    private @Nullable Output<String> networkStatus;

    /**
     * @return Network status of device.
     * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
     * 
     */
    public Optional<Output<String>> networkStatus() {
        return Optional.ofNullable(this.networkStatus);
    }

    /**
     * Operating system.
     * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
     * 
     */
    @Import(name="operatingSystem")
    private @Nullable Output<String> operatingSystem;

    /**
     * @return Operating system.
     * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
     * 
     */
    public Optional<Output<String>> operatingSystem() {
        return Optional.ofNullable(this.operatingSystem);
    }

    /**
     * Agent operational state.
     * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
     * 
     */
    @Import(name="operationalState")
    private @Nullable Output<String> operationalState;

    /**
     * @return Agent operational state.
     * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
     * 
     */
    public Optional<Output<String>> operationalState() {
        return Optional.ofNullable(this.operationalState);
    }

    /**
     * Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<String> operator;

    /**
     * @return Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<Output<String>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * Os Version.
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return Os Version.
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * Operating System Distribution Name (linux only).
     * 
     */
    @Import(name="osDistroName")
    private @Nullable Output<String> osDistroName;

    /**
     * @return Operating System Distribution Name (linux only).
     * 
     */
    public Optional<Output<String>> osDistroName() {
        return Optional.ofNullable(this.osDistroName);
    }

    /**
     * Version of OS Distribution (linux only).
     * 
     */
    @Import(name="osDistroRevision")
    private @Nullable Output<String> osDistroRevision;

    /**
     * @return Version of OS Distribution (linux only).
     * 
     */
    public Optional<Output<String>> osDistroRevision() {
        return Optional.ofNullable(this.osDistroRevision);
    }

    /**
     * Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
     * 
     */
    @Import(name="osVersionExtra")
    private @Nullable Output<String> osVersionExtra;

    /**
     * @return Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
     * 
     */
    public Optional<Output<String>> osVersionExtra() {
        return Optional.ofNullable(this.osVersionExtra);
    }

    /**
     * Overall.
     * 
     */
    @Import(name="overall")
    private @Nullable Output<String> overall;

    /**
     * @return Overall.
     * 
     */
    public Optional<Output<String>> overall() {
        return Optional.ofNullable(this.overall);
    }

    /**
     * File path.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return File path.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Whether to check all disks for encryption.
     * 
     */
    @Import(name="requireAll")
    private @Nullable Output<Boolean> requireAll;

    /**
     * @return Whether to check all disks for encryption.
     * 
     */
    public Optional<Output<Boolean>> requireAll() {
        return Optional.ofNullable(this.requireAll);
    }

    /**
     * For more details on risk level, refer to the Tanium documentation.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
     * 
     */
    @Import(name="riskLevel")
    private @Nullable Output<String> riskLevel;

    /**
     * @return For more details on risk level, refer to the Tanium documentation.
     * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
     * 
     */
    public Optional<Output<String>> riskLevel() {
        return Optional.ofNullable(this.riskLevel);
    }

    /**
     * A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    @Import(name="score")
    private @Nullable Output<Double> score;

    /**
     * @return A value between 0-100 assigned to devices set by the 3rd party posture provider.
     * 
     */
    public Optional<Output<Double>> score() {
        return Optional.ofNullable(this.score);
    }

    /**
     * Score Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    @Import(name="scoreOperator")
    private @Nullable Output<String> scoreOperator;

    /**
     * @return Score Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<Output<String>> scoreOperator() {
        return Optional.ofNullable(this.scoreOperator);
    }

    /**
     * SensorConfig.
     * 
     */
    @Import(name="sensorConfig")
    private @Nullable Output<String> sensorConfig;

    /**
     * @return SensorConfig.
     * 
     */
    public Optional<Output<String>> sensorConfig() {
        return Optional.ofNullable(this.sensorConfig);
    }

    /**
     * SHA-256.
     * 
     */
    @Import(name="sha256")
    private @Nullable Output<String> sha256;

    /**
     * @return SHA-256.
     * 
     */
    public Optional<Output<String>> sha256() {
        return Optional.ofNullable(this.sha256);
    }

    /**
     * For more details on state, please refer to the Crowdstrike documentation.
     * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return For more details on state, please refer to the Crowdstrike documentation.
     * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * List of certificate Subject Alternative Names.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return List of certificate Subject Alternative Names.
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    /**
     * Signing certificate thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return Signing certificate thumbprint.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * For more details on total score, refer to the Tanium documentation.
     * 
     */
    @Import(name="totalScore")
    private @Nullable Output<Double> totalScore;

    /**
     * @return For more details on total score, refer to the Tanium documentation.
     * 
     */
    public Optional<Output<Double>> totalScore() {
        return Optional.ofNullable(this.totalScore);
    }

    /**
     * Version of OS.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of OS.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    /**
     * Version Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    @Import(name="versionOperator")
    private @Nullable Output<String> versionOperator;

    /**
     * @return Version Operator.
     * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
     * 
     */
    public Optional<Output<String>> versionOperator() {
        return Optional.ofNullable(this.versionOperator);
    }

    private DevicePostureRuleInputArgs() {}

    private DevicePostureRuleInputArgs(DevicePostureRuleInputArgs $) {
        this.activeThreats = $.activeThreats;
        this.certificateId = $.certificateId;
        this.checkDisks = $.checkDisks;
        this.checkPrivateKey = $.checkPrivateKey;
        this.cn = $.cn;
        this.complianceStatus = $.complianceStatus;
        this.connectionId = $.connectionId;
        this.countOperator = $.countOperator;
        this.domain = $.domain;
        this.eidLastSeen = $.eidLastSeen;
        this.enabled = $.enabled;
        this.exists = $.exists;
        this.extendedKeyUsages = $.extendedKeyUsages;
        this.id = $.id;
        this.infected = $.infected;
        this.isActive = $.isActive;
        this.issueCount = $.issueCount;
        this.lastSeen = $.lastSeen;
        this.locations = $.locations;
        this.networkStatus = $.networkStatus;
        this.operatingSystem = $.operatingSystem;
        this.operationalState = $.operationalState;
        this.operator = $.operator;
        this.os = $.os;
        this.osDistroName = $.osDistroName;
        this.osDistroRevision = $.osDistroRevision;
        this.osVersionExtra = $.osVersionExtra;
        this.overall = $.overall;
        this.path = $.path;
        this.requireAll = $.requireAll;
        this.riskLevel = $.riskLevel;
        this.score = $.score;
        this.scoreOperator = $.scoreOperator;
        this.sensorConfig = $.sensorConfig;
        this.sha256 = $.sha256;
        this.state = $.state;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.thumbprint = $.thumbprint;
        this.totalScore = $.totalScore;
        this.version = $.version;
        this.versionOperator = $.versionOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DevicePostureRuleInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DevicePostureRuleInputArgs $;

        public Builder() {
            $ = new DevicePostureRuleInputArgs();
        }

        public Builder(DevicePostureRuleInputArgs defaults) {
            $ = new DevicePostureRuleInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeThreats The Number of active threats.
         * 
         * @return builder
         * 
         */
        public Builder activeThreats(@Nullable Output<Double> activeThreats) {
            $.activeThreats = activeThreats;
            return this;
        }

        /**
         * @param activeThreats The Number of active threats.
         * 
         * @return builder
         * 
         */
        public Builder activeThreats(Double activeThreats) {
            return activeThreats(Output.of(activeThreats));
        }

        /**
         * @param certificateId UUID of Cloudflare managed certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId UUID of Cloudflare managed certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param checkDisks List of volume names to be checked for encryption.
         * 
         * @return builder
         * 
         */
        public Builder checkDisks(@Nullable Output<List<String>> checkDisks) {
            $.checkDisks = checkDisks;
            return this;
        }

        /**
         * @param checkDisks List of volume names to be checked for encryption.
         * 
         * @return builder
         * 
         */
        public Builder checkDisks(List<String> checkDisks) {
            return checkDisks(Output.of(checkDisks));
        }

        /**
         * @param checkDisks List of volume names to be checked for encryption.
         * 
         * @return builder
         * 
         */
        public Builder checkDisks(String... checkDisks) {
            return checkDisks(List.of(checkDisks));
        }

        /**
         * @param checkPrivateKey Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
         * 
         * @return builder
         * 
         */
        public Builder checkPrivateKey(@Nullable Output<Boolean> checkPrivateKey) {
            $.checkPrivateKey = checkPrivateKey;
            return this;
        }

        /**
         * @param checkPrivateKey Confirm the certificate was not imported from another device. We recommend keeping this enabled unless the certificate was deployed without a private key.
         * 
         * @return builder
         * 
         */
        public Builder checkPrivateKey(Boolean checkPrivateKey) {
            return checkPrivateKey(Output.of(checkPrivateKey));
        }

        /**
         * @param cn Common Name that is protected by the certificate.
         * 
         * @return builder
         * 
         */
        public Builder cn(@Nullable Output<String> cn) {
            $.cn = cn;
            return this;
        }

        /**
         * @param cn Common Name that is protected by the certificate.
         * 
         * @return builder
         * 
         */
        public Builder cn(String cn) {
            return cn(Output.of(cn));
        }

        /**
         * @param complianceStatus Compliance Status.
         * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder complianceStatus(@Nullable Output<String> complianceStatus) {
            $.complianceStatus = complianceStatus;
            return this;
        }

        /**
         * @param complianceStatus Compliance Status.
         * Available values: &#34;compliant&#34;, &#34;noncompliant&#34;, &#34;unknown&#34;, &#34;notapplicable&#34;, &#34;ingraceperiod&#34;, &#34;error&#34;.
         * 
         * @return builder
         * 
         */
        public Builder complianceStatus(String complianceStatus) {
            return complianceStatus(Output.of(complianceStatus));
        }

        /**
         * @param connectionId Posture Integration ID.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Posture Integration ID.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param countOperator Count Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder countOperator(@Nullable Output<String> countOperator) {
            $.countOperator = countOperator;
            return this;
        }

        /**
         * @param countOperator Count Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder countOperator(String countOperator) {
            return countOperator(Output.of(countOperator));
        }

        /**
         * @param domain Domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param eidLastSeen For more details on eid last seen, refer to the Tanium documentation.
         * 
         * @return builder
         * 
         */
        public Builder eidLastSeen(@Nullable Output<String> eidLastSeen) {
            $.eidLastSeen = eidLastSeen;
            return this;
        }

        /**
         * @param eidLastSeen For more details on eid last seen, refer to the Tanium documentation.
         * 
         * @return builder
         * 
         */
        public Builder eidLastSeen(String eidLastSeen) {
            return eidLastSeen(Output.of(eidLastSeen));
        }

        /**
         * @param enabled Enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param exists Whether or not file exists.
         * 
         * @return builder
         * 
         */
        public Builder exists(@Nullable Output<Boolean> exists) {
            $.exists = exists;
            return this;
        }

        /**
         * @param exists Whether or not file exists.
         * 
         * @return builder
         * 
         */
        public Builder exists(Boolean exists) {
            return exists(Output.of(exists));
        }

        /**
         * @param extendedKeyUsages List of values indicating purposes for which the certificate public key can be used.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(@Nullable Output<List<String>> extendedKeyUsages) {
            $.extendedKeyUsages = extendedKeyUsages;
            return this;
        }

        /**
         * @param extendedKeyUsages List of values indicating purposes for which the certificate public key can be used.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(List<String> extendedKeyUsages) {
            return extendedKeyUsages(Output.of(extendedKeyUsages));
        }

        /**
         * @param extendedKeyUsages List of values indicating purposes for which the certificate public key can be used.
         * 
         * @return builder
         * 
         */
        public Builder extendedKeyUsages(String... extendedKeyUsages) {
            return extendedKeyUsages(List.of(extendedKeyUsages));
        }

        /**
         * @param id List ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id List ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param infected Whether device is infected.
         * 
         * @return builder
         * 
         */
        public Builder infected(@Nullable Output<Boolean> infected) {
            $.infected = infected;
            return this;
        }

        /**
         * @param infected Whether device is infected.
         * 
         * @return builder
         * 
         */
        public Builder infected(Boolean infected) {
            return infected(Output.of(infected));
        }

        /**
         * @param isActive Whether device is active.
         * 
         * @return builder
         * 
         */
        public Builder isActive(@Nullable Output<Boolean> isActive) {
            $.isActive = isActive;
            return this;
        }

        /**
         * @param isActive Whether device is active.
         * 
         * @return builder
         * 
         */
        public Builder isActive(Boolean isActive) {
            return isActive(Output.of(isActive));
        }

        /**
         * @param issueCount The Number of Issues.
         * 
         * @return builder
         * 
         */
        public Builder issueCount(@Nullable Output<String> issueCount) {
            $.issueCount = issueCount;
            return this;
        }

        /**
         * @param issueCount The Number of Issues.
         * 
         * @return builder
         * 
         */
        public Builder issueCount(String issueCount) {
            return issueCount(Output.of(issueCount));
        }

        /**
         * @param lastSeen For more details on last seen, please refer to the Crowdstrike documentation.
         * 
         * @return builder
         * 
         */
        public Builder lastSeen(@Nullable Output<String> lastSeen) {
            $.lastSeen = lastSeen;
            return this;
        }

        /**
         * @param lastSeen For more details on last seen, please refer to the Crowdstrike documentation.
         * 
         * @return builder
         * 
         */
        public Builder lastSeen(String lastSeen) {
            return lastSeen(Output.of(lastSeen));
        }

        public Builder locations(@Nullable Output<DevicePostureRuleInputLocationsArgs> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(DevicePostureRuleInputLocationsArgs locations) {
            return locations(Output.of(locations));
        }

        /**
         * @param networkStatus Network status of device.
         * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
         * 
         * @return builder
         * 
         */
        public Builder networkStatus(@Nullable Output<String> networkStatus) {
            $.networkStatus = networkStatus;
            return this;
        }

        /**
         * @param networkStatus Network status of device.
         * Available values: &#34;connected&#34;, &#34;disconnected&#34;, &#34;disconnecting&#34;, &#34;connecting&#34;.
         * 
         * @return builder
         * 
         */
        public Builder networkStatus(String networkStatus) {
            return networkStatus(Output.of(networkStatus));
        }

        /**
         * @param operatingSystem Operating system.
         * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(@Nullable Output<String> operatingSystem) {
            $.operatingSystem = operatingSystem;
            return this;
        }

        /**
         * @param operatingSystem Operating system.
         * Available values: &#34;windows&#34;, &#34;linux&#34;, &#34;mac&#34;, &#34;android&#34;, &#34;ios&#34;, &#34;chromeos&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operatingSystem(String operatingSystem) {
            return operatingSystem(Output.of(operatingSystem));
        }

        /**
         * @param operationalState Agent operational state.
         * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(@Nullable Output<String> operationalState) {
            $.operationalState = operationalState;
            return this;
        }

        /**
         * @param operationalState Agent operational state.
         * Available values: &#34;na&#34;, &#34;partially*disabled&#34;, &#34;auto*fully*disabled&#34;, &#34;fully*disabled&#34;, &#34;auto*partially*disabled&#34;, &#34;disabled*error&#34;, &#34;db*corruption&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operationalState(String operationalState) {
            return operationalState(Output.of(operationalState));
        }

        /**
         * @param operator Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param os Os Version.
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os Os Version.
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param osDistroName Operating System Distribution Name (linux only).
         * 
         * @return builder
         * 
         */
        public Builder osDistroName(@Nullable Output<String> osDistroName) {
            $.osDistroName = osDistroName;
            return this;
        }

        /**
         * @param osDistroName Operating System Distribution Name (linux only).
         * 
         * @return builder
         * 
         */
        public Builder osDistroName(String osDistroName) {
            return osDistroName(Output.of(osDistroName));
        }

        /**
         * @param osDistroRevision Version of OS Distribution (linux only).
         * 
         * @return builder
         * 
         */
        public Builder osDistroRevision(@Nullable Output<String> osDistroRevision) {
            $.osDistroRevision = osDistroRevision;
            return this;
        }

        /**
         * @param osDistroRevision Version of OS Distribution (linux only).
         * 
         * @return builder
         * 
         */
        public Builder osDistroRevision(String osDistroRevision) {
            return osDistroRevision(Output.of(osDistroRevision));
        }

        /**
         * @param osVersionExtra Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
         * 
         * @return builder
         * 
         */
        public Builder osVersionExtra(@Nullable Output<String> osVersionExtra) {
            $.osVersionExtra = osVersionExtra;
            return this;
        }

        /**
         * @param osVersionExtra Additional version data. For Mac or iOS, the Product Version Extra. For Linux, the kernel release version. (Mac, iOS, and Linux only).
         * 
         * @return builder
         * 
         */
        public Builder osVersionExtra(String osVersionExtra) {
            return osVersionExtra(Output.of(osVersionExtra));
        }

        /**
         * @param overall Overall.
         * 
         * @return builder
         * 
         */
        public Builder overall(@Nullable Output<String> overall) {
            $.overall = overall;
            return this;
        }

        /**
         * @param overall Overall.
         * 
         * @return builder
         * 
         */
        public Builder overall(String overall) {
            return overall(Output.of(overall));
        }

        /**
         * @param path File path.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path File path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param requireAll Whether to check all disks for encryption.
         * 
         * @return builder
         * 
         */
        public Builder requireAll(@Nullable Output<Boolean> requireAll) {
            $.requireAll = requireAll;
            return this;
        }

        /**
         * @param requireAll Whether to check all disks for encryption.
         * 
         * @return builder
         * 
         */
        public Builder requireAll(Boolean requireAll) {
            return requireAll(Output.of(requireAll));
        }

        /**
         * @param riskLevel For more details on risk level, refer to the Tanium documentation.
         * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(@Nullable Output<String> riskLevel) {
            $.riskLevel = riskLevel;
            return this;
        }

        /**
         * @param riskLevel For more details on risk level, refer to the Tanium documentation.
         * Available values: &#34;low&#34;, &#34;medium&#34;, &#34;high&#34;, &#34;critical&#34;.
         * 
         * @return builder
         * 
         */
        public Builder riskLevel(String riskLevel) {
            return riskLevel(Output.of(riskLevel));
        }

        /**
         * @param score A value between 0-100 assigned to devices set by the 3rd party posture provider.
         * 
         * @return builder
         * 
         */
        public Builder score(@Nullable Output<Double> score) {
            $.score = score;
            return this;
        }

        /**
         * @param score A value between 0-100 assigned to devices set by the 3rd party posture provider.
         * 
         * @return builder
         * 
         */
        public Builder score(Double score) {
            return score(Output.of(score));
        }

        /**
         * @param scoreOperator Score Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scoreOperator(@Nullable Output<String> scoreOperator) {
            $.scoreOperator = scoreOperator;
            return this;
        }

        /**
         * @param scoreOperator Score Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder scoreOperator(String scoreOperator) {
            return scoreOperator(Output.of(scoreOperator));
        }

        /**
         * @param sensorConfig SensorConfig.
         * 
         * @return builder
         * 
         */
        public Builder sensorConfig(@Nullable Output<String> sensorConfig) {
            $.sensorConfig = sensorConfig;
            return this;
        }

        /**
         * @param sensorConfig SensorConfig.
         * 
         * @return builder
         * 
         */
        public Builder sensorConfig(String sensorConfig) {
            return sensorConfig(Output.of(sensorConfig));
        }

        /**
         * @param sha256 SHA-256.
         * 
         * @return builder
         * 
         */
        public Builder sha256(@Nullable Output<String> sha256) {
            $.sha256 = sha256;
            return this;
        }

        /**
         * @param sha256 SHA-256.
         * 
         * @return builder
         * 
         */
        public Builder sha256(String sha256) {
            return sha256(Output.of(sha256));
        }

        /**
         * @param state For more details on state, please refer to the Crowdstrike documentation.
         * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state For more details on state, please refer to the Crowdstrike documentation.
         * Available values: &#34;online&#34;, &#34;offline&#34;, &#34;unknown&#34;.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subjectAlternativeNames List of certificate Subject Alternative Names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames List of certificate Subject Alternative Names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames List of certificate Subject Alternative Names.
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        /**
         * @param thumbprint Signing certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint Signing certificate thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        /**
         * @param totalScore For more details on total score, refer to the Tanium documentation.
         * 
         * @return builder
         * 
         */
        public Builder totalScore(@Nullable Output<Double> totalScore) {
            $.totalScore = totalScore;
            return this;
        }

        /**
         * @param totalScore For more details on total score, refer to the Tanium documentation.
         * 
         * @return builder
         * 
         */
        public Builder totalScore(Double totalScore) {
            return totalScore(Output.of(totalScore));
        }

        /**
         * @param version Version of OS.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of OS.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        /**
         * @param versionOperator Version Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder versionOperator(@Nullable Output<String> versionOperator) {
            $.versionOperator = versionOperator;
            return this;
        }

        /**
         * @param versionOperator Version Operator.
         * Available values: &#34;&lt;&#34;, &#34;&lt;=&#34;, &#34;&gt;&#34;, &#34;&gt;=&#34;, &#34;==&#34;.
         * 
         * @return builder
         * 
         */
        public Builder versionOperator(String versionOperator) {
            return versionOperator(Output.of(versionOperator));
        }

        public DevicePostureRuleInputArgs build() {
            return $;
        }
    }

}
