// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkersKvNamespaceState extends com.pulumi.resources.ResourceArgs {

    public static final WorkersKvNamespaceState Empty = new WorkersKvNamespaceState();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * True if new beta namespace, with additional preview features.
     * 
     */
    @Import(name="beta")
    private @Nullable Output<Boolean> beta;

    /**
     * @return True if new beta namespace, with additional preview features.
     * 
     */
    public Optional<Output<Boolean>> beta() {
        return Optional.ofNullable(this.beta);
    }

    /**
     * True if keys written on the URL will be URL-decoded before storing. For example, if set to &#34;true&#34;, a key written on the URL as &#34;%3F&#34; will be stored as &#34;?&#34;.
     * 
     */
    @Import(name="supportsUrlEncoding")
    private @Nullable Output<Boolean> supportsUrlEncoding;

    /**
     * @return True if keys written on the URL will be URL-decoded before storing. For example, if set to &#34;true&#34;, a key written on the URL as &#34;%3F&#34; will be stored as &#34;?&#34;.
     * 
     */
    public Optional<Output<Boolean>> supportsUrlEncoding() {
        return Optional.ofNullable(this.supportsUrlEncoding);
    }

    /**
     * A human-readable string name for a Namespace.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return A human-readable string name for a Namespace.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    private WorkersKvNamespaceState() {}

    private WorkersKvNamespaceState(WorkersKvNamespaceState $) {
        this.accountId = $.accountId;
        this.beta = $.beta;
        this.supportsUrlEncoding = $.supportsUrlEncoding;
        this.title = $.title;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkersKvNamespaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkersKvNamespaceState $;

        public Builder() {
            $ = new WorkersKvNamespaceState();
        }

        public Builder(WorkersKvNamespaceState defaults) {
            $ = new WorkersKvNamespaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param beta True if new beta namespace, with additional preview features.
         * 
         * @return builder
         * 
         */
        public Builder beta(@Nullable Output<Boolean> beta) {
            $.beta = beta;
            return this;
        }

        /**
         * @param beta True if new beta namespace, with additional preview features.
         * 
         * @return builder
         * 
         */
        public Builder beta(Boolean beta) {
            return beta(Output.of(beta));
        }

        /**
         * @param supportsUrlEncoding True if keys written on the URL will be URL-decoded before storing. For example, if set to &#34;true&#34;, a key written on the URL as &#34;%3F&#34; will be stored as &#34;?&#34;.
         * 
         * @return builder
         * 
         */
        public Builder supportsUrlEncoding(@Nullable Output<Boolean> supportsUrlEncoding) {
            $.supportsUrlEncoding = supportsUrlEncoding;
            return this;
        }

        /**
         * @param supportsUrlEncoding True if keys written on the URL will be URL-decoded before storing. For example, if set to &#34;true&#34;, a key written on the URL as &#34;%3F&#34; will be stored as &#34;?&#34;.
         * 
         * @return builder
         * 
         */
        public Builder supportsUrlEncoding(Boolean supportsUrlEncoding) {
            return supportsUrlEncoding(Output.of(supportsUrlEncoding));
        }

        /**
         * @param title A human-readable string name for a Namespace.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title A human-readable string name for a Namespace.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        public WorkersKvNamespaceState build() {
            return $;
        }
    }

}
