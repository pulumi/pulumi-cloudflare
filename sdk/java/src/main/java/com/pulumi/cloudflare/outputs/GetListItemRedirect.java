// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetListItemRedirect {
    private Boolean includeSubdomains;
    private Boolean preservePathSuffix;
    private Boolean preserveQueryString;
    private String sourceUrl;
    private Integer statusCode;
    private Boolean subpathMatching;
    private String targetUrl;

    private GetListItemRedirect() {}
    public Boolean includeSubdomains() {
        return this.includeSubdomains;
    }
    public Boolean preservePathSuffix() {
        return this.preservePathSuffix;
    }
    public Boolean preserveQueryString() {
        return this.preserveQueryString;
    }
    public String sourceUrl() {
        return this.sourceUrl;
    }
    public Integer statusCode() {
        return this.statusCode;
    }
    public Boolean subpathMatching() {
        return this.subpathMatching;
    }
    public String targetUrl() {
        return this.targetUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListItemRedirect defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean includeSubdomains;
        private Boolean preservePathSuffix;
        private Boolean preserveQueryString;
        private String sourceUrl;
        private Integer statusCode;
        private Boolean subpathMatching;
        private String targetUrl;
        public Builder() {}
        public Builder(GetListItemRedirect defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.includeSubdomains = defaults.includeSubdomains;
    	      this.preservePathSuffix = defaults.preservePathSuffix;
    	      this.preserveQueryString = defaults.preserveQueryString;
    	      this.sourceUrl = defaults.sourceUrl;
    	      this.statusCode = defaults.statusCode;
    	      this.subpathMatching = defaults.subpathMatching;
    	      this.targetUrl = defaults.targetUrl;
        }

        @CustomType.Setter
        public Builder includeSubdomains(Boolean includeSubdomains) {
            if (includeSubdomains == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "includeSubdomains");
            }
            this.includeSubdomains = includeSubdomains;
            return this;
        }
        @CustomType.Setter
        public Builder preservePathSuffix(Boolean preservePathSuffix) {
            if (preservePathSuffix == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "preservePathSuffix");
            }
            this.preservePathSuffix = preservePathSuffix;
            return this;
        }
        @CustomType.Setter
        public Builder preserveQueryString(Boolean preserveQueryString) {
            if (preserveQueryString == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "preserveQueryString");
            }
            this.preserveQueryString = preserveQueryString;
            return this;
        }
        @CustomType.Setter
        public Builder sourceUrl(String sourceUrl) {
            if (sourceUrl == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "sourceUrl");
            }
            this.sourceUrl = sourceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(Integer statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        @CustomType.Setter
        public Builder subpathMatching(Boolean subpathMatching) {
            if (subpathMatching == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "subpathMatching");
            }
            this.subpathMatching = subpathMatching;
            return this;
        }
        @CustomType.Setter
        public Builder targetUrl(String targetUrl) {
            if (targetUrl == null) {
              throw new MissingRequiredPropertyException("GetListItemRedirect", "targetUrl");
            }
            this.targetUrl = targetUrl;
            return this;
        }
        public GetListItemRedirect build() {
            final var _resultValue = new GetListItemRedirect();
            _resultValue.includeSubdomains = includeSubdomains;
            _resultValue.preservePathSuffix = preservePathSuffix;
            _resultValue.preserveQueryString = preserveQueryString;
            _resultValue.sourceUrl = sourceUrl;
            _resultValue.statusCode = statusCode;
            _resultValue.subpathMatching = subpathMatching;
            _resultValue.targetUrl = targetUrl;
            return _resultValue;
        }
    }
}
