// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsFirewallAttackMitigationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsFirewallAttackMitigationArgs Empty = new DnsFirewallAttackMitigationArgs();

    /**
     * When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Only mitigate attacks when upstream servers seem unhealthy
     * 
     */
    @Import(name="onlyWhenUpstreamUnhealthy")
    private @Nullable Output<Boolean> onlyWhenUpstreamUnhealthy;

    /**
     * @return Only mitigate attacks when upstream servers seem unhealthy
     * 
     */
    public Optional<Output<Boolean>> onlyWhenUpstreamUnhealthy() {
        return Optional.ofNullable(this.onlyWhenUpstreamUnhealthy);
    }

    private DnsFirewallAttackMitigationArgs() {}

    private DnsFirewallAttackMitigationArgs(DnsFirewallAttackMitigationArgs $) {
        this.enabled = $.enabled;
        this.onlyWhenUpstreamUnhealthy = $.onlyWhenUpstreamUnhealthy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsFirewallAttackMitigationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsFirewallAttackMitigationArgs $;

        public Builder() {
            $ = new DnsFirewallAttackMitigationArgs();
        }

        public Builder(DnsFirewallAttackMitigationArgs defaults) {
            $ = new DnsFirewallAttackMitigationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled When enabled, automatically mitigate random-prefix attacks to protect upstream DNS servers
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param onlyWhenUpstreamUnhealthy Only mitigate attacks when upstream servers seem unhealthy
         * 
         * @return builder
         * 
         */
        public Builder onlyWhenUpstreamUnhealthy(@Nullable Output<Boolean> onlyWhenUpstreamUnhealthy) {
            $.onlyWhenUpstreamUnhealthy = onlyWhenUpstreamUnhealthy;
            return this;
        }

        /**
         * @param onlyWhenUpstreamUnhealthy Only mitigate attacks when upstream servers seem unhealthy
         * 
         * @return builder
         * 
         */
        public Builder onlyWhenUpstreamUnhealthy(Boolean onlyWhenUpstreamUnhealthy) {
            return onlyWhenUpstreamUnhealthy(Output.of(onlyWhenUpstreamUnhealthy));
        }

        public DnsFirewallAttackMitigationArgs build() {
            return $;
        }
    }

}
