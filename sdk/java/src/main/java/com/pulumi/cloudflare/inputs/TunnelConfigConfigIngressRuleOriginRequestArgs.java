// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.TunnelConfigConfigIngressRuleOriginRequestAccessArgs;
import com.pulumi.cloudflare.inputs.TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TunnelConfigConfigIngressRuleOriginRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final TunnelConfigConfigIngressRuleOriginRequestArgs Empty = new TunnelConfigConfigIngressRuleOriginRequestArgs();

    @Import(name="access")
    private @Nullable Output<TunnelConfigConfigIngressRuleOriginRequestAccessArgs> access;

    public Optional<Output<TunnelConfigConfigIngressRuleOriginRequestAccessArgs>> access() {
        return Optional.ofNullable(this.access);
    }

    @Import(name="bastionMode")
    private @Nullable Output<Boolean> bastionMode;

    public Optional<Output<Boolean>> bastionMode() {
        return Optional.ofNullable(this.bastionMode);
    }

    @Import(name="caPool")
    private @Nullable Output<String> caPool;

    public Optional<Output<String>> caPool() {
        return Optional.ofNullable(this.caPool);
    }

    @Import(name="connectTimeout")
    private @Nullable Output<String> connectTimeout;

    public Optional<Output<String>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    @Import(name="disableChunkedEncoding")
    private @Nullable Output<Boolean> disableChunkedEncoding;

    public Optional<Output<Boolean>> disableChunkedEncoding() {
        return Optional.ofNullable(this.disableChunkedEncoding);
    }

    @Import(name="http2Origin")
    private @Nullable Output<Boolean> http2Origin;

    public Optional<Output<Boolean>> http2Origin() {
        return Optional.ofNullable(this.http2Origin);
    }

    @Import(name="httpHostHeader")
    private @Nullable Output<String> httpHostHeader;

    public Optional<Output<String>> httpHostHeader() {
        return Optional.ofNullable(this.httpHostHeader);
    }

    @Import(name="ipRules")
    private @Nullable Output<List<TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs>> ipRules;

    public Optional<Output<List<TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs>>> ipRules() {
        return Optional.ofNullable(this.ipRules);
    }

    @Import(name="keepAliveConnections")
    private @Nullable Output<Integer> keepAliveConnections;

    public Optional<Output<Integer>> keepAliveConnections() {
        return Optional.ofNullable(this.keepAliveConnections);
    }

    @Import(name="keepAliveTimeout")
    private @Nullable Output<String> keepAliveTimeout;

    public Optional<Output<String>> keepAliveTimeout() {
        return Optional.ofNullable(this.keepAliveTimeout);
    }

    @Import(name="noHappyEyeballs")
    private @Nullable Output<Boolean> noHappyEyeballs;

    public Optional<Output<Boolean>> noHappyEyeballs() {
        return Optional.ofNullable(this.noHappyEyeballs);
    }

    @Import(name="noTlsVerify")
    private @Nullable Output<Boolean> noTlsVerify;

    public Optional<Output<Boolean>> noTlsVerify() {
        return Optional.ofNullable(this.noTlsVerify);
    }

    @Import(name="originServerName")
    private @Nullable Output<String> originServerName;

    public Optional<Output<String>> originServerName() {
        return Optional.ofNullable(this.originServerName);
    }

    @Import(name="proxyAddress")
    private @Nullable Output<String> proxyAddress;

    public Optional<Output<String>> proxyAddress() {
        return Optional.ofNullable(this.proxyAddress);
    }

    @Import(name="proxyPort")
    private @Nullable Output<Integer> proxyPort;

    public Optional<Output<Integer>> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }

    @Import(name="proxyType")
    private @Nullable Output<String> proxyType;

    public Optional<Output<String>> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }

    @Import(name="tcpKeepAlive")
    private @Nullable Output<String> tcpKeepAlive;

    public Optional<Output<String>> tcpKeepAlive() {
        return Optional.ofNullable(this.tcpKeepAlive);
    }

    @Import(name="tlsTimeout")
    private @Nullable Output<String> tlsTimeout;

    public Optional<Output<String>> tlsTimeout() {
        return Optional.ofNullable(this.tlsTimeout);
    }

    private TunnelConfigConfigIngressRuleOriginRequestArgs() {}

    private TunnelConfigConfigIngressRuleOriginRequestArgs(TunnelConfigConfigIngressRuleOriginRequestArgs $) {
        this.access = $.access;
        this.bastionMode = $.bastionMode;
        this.caPool = $.caPool;
        this.connectTimeout = $.connectTimeout;
        this.disableChunkedEncoding = $.disableChunkedEncoding;
        this.http2Origin = $.http2Origin;
        this.httpHostHeader = $.httpHostHeader;
        this.ipRules = $.ipRules;
        this.keepAliveConnections = $.keepAliveConnections;
        this.keepAliveTimeout = $.keepAliveTimeout;
        this.noHappyEyeballs = $.noHappyEyeballs;
        this.noTlsVerify = $.noTlsVerify;
        this.originServerName = $.originServerName;
        this.proxyAddress = $.proxyAddress;
        this.proxyPort = $.proxyPort;
        this.proxyType = $.proxyType;
        this.tcpKeepAlive = $.tcpKeepAlive;
        this.tlsTimeout = $.tlsTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TunnelConfigConfigIngressRuleOriginRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TunnelConfigConfigIngressRuleOriginRequestArgs $;

        public Builder() {
            $ = new TunnelConfigConfigIngressRuleOriginRequestArgs();
        }

        public Builder(TunnelConfigConfigIngressRuleOriginRequestArgs defaults) {
            $ = new TunnelConfigConfigIngressRuleOriginRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder access(@Nullable Output<TunnelConfigConfigIngressRuleOriginRequestAccessArgs> access) {
            $.access = access;
            return this;
        }

        public Builder access(TunnelConfigConfigIngressRuleOriginRequestAccessArgs access) {
            return access(Output.of(access));
        }

        public Builder bastionMode(@Nullable Output<Boolean> bastionMode) {
            $.bastionMode = bastionMode;
            return this;
        }

        public Builder bastionMode(Boolean bastionMode) {
            return bastionMode(Output.of(bastionMode));
        }

        public Builder caPool(@Nullable Output<String> caPool) {
            $.caPool = caPool;
            return this;
        }

        public Builder caPool(String caPool) {
            return caPool(Output.of(caPool));
        }

        public Builder connectTimeout(@Nullable Output<String> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        public Builder connectTimeout(String connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        public Builder disableChunkedEncoding(@Nullable Output<Boolean> disableChunkedEncoding) {
            $.disableChunkedEncoding = disableChunkedEncoding;
            return this;
        }

        public Builder disableChunkedEncoding(Boolean disableChunkedEncoding) {
            return disableChunkedEncoding(Output.of(disableChunkedEncoding));
        }

        public Builder http2Origin(@Nullable Output<Boolean> http2Origin) {
            $.http2Origin = http2Origin;
            return this;
        }

        public Builder http2Origin(Boolean http2Origin) {
            return http2Origin(Output.of(http2Origin));
        }

        public Builder httpHostHeader(@Nullable Output<String> httpHostHeader) {
            $.httpHostHeader = httpHostHeader;
            return this;
        }

        public Builder httpHostHeader(String httpHostHeader) {
            return httpHostHeader(Output.of(httpHostHeader));
        }

        public Builder ipRules(@Nullable Output<List<TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs>> ipRules) {
            $.ipRules = ipRules;
            return this;
        }

        public Builder ipRules(List<TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs> ipRules) {
            return ipRules(Output.of(ipRules));
        }

        public Builder ipRules(TunnelConfigConfigIngressRuleOriginRequestIpRuleArgs... ipRules) {
            return ipRules(List.of(ipRules));
        }

        public Builder keepAliveConnections(@Nullable Output<Integer> keepAliveConnections) {
            $.keepAliveConnections = keepAliveConnections;
            return this;
        }

        public Builder keepAliveConnections(Integer keepAliveConnections) {
            return keepAliveConnections(Output.of(keepAliveConnections));
        }

        public Builder keepAliveTimeout(@Nullable Output<String> keepAliveTimeout) {
            $.keepAliveTimeout = keepAliveTimeout;
            return this;
        }

        public Builder keepAliveTimeout(String keepAliveTimeout) {
            return keepAliveTimeout(Output.of(keepAliveTimeout));
        }

        public Builder noHappyEyeballs(@Nullable Output<Boolean> noHappyEyeballs) {
            $.noHappyEyeballs = noHappyEyeballs;
            return this;
        }

        public Builder noHappyEyeballs(Boolean noHappyEyeballs) {
            return noHappyEyeballs(Output.of(noHappyEyeballs));
        }

        public Builder noTlsVerify(@Nullable Output<Boolean> noTlsVerify) {
            $.noTlsVerify = noTlsVerify;
            return this;
        }

        public Builder noTlsVerify(Boolean noTlsVerify) {
            return noTlsVerify(Output.of(noTlsVerify));
        }

        public Builder originServerName(@Nullable Output<String> originServerName) {
            $.originServerName = originServerName;
            return this;
        }

        public Builder originServerName(String originServerName) {
            return originServerName(Output.of(originServerName));
        }

        public Builder proxyAddress(@Nullable Output<String> proxyAddress) {
            $.proxyAddress = proxyAddress;
            return this;
        }

        public Builder proxyAddress(String proxyAddress) {
            return proxyAddress(Output.of(proxyAddress));
        }

        public Builder proxyPort(@Nullable Output<Integer> proxyPort) {
            $.proxyPort = proxyPort;
            return this;
        }

        public Builder proxyPort(Integer proxyPort) {
            return proxyPort(Output.of(proxyPort));
        }

        public Builder proxyType(@Nullable Output<String> proxyType) {
            $.proxyType = proxyType;
            return this;
        }

        public Builder proxyType(String proxyType) {
            return proxyType(Output.of(proxyType));
        }

        public Builder tcpKeepAlive(@Nullable Output<String> tcpKeepAlive) {
            $.tcpKeepAlive = tcpKeepAlive;
            return this;
        }

        public Builder tcpKeepAlive(String tcpKeepAlive) {
            return tcpKeepAlive(Output.of(tcpKeepAlive));
        }

        public Builder tlsTimeout(@Nullable Output<String> tlsTimeout) {
            $.tlsTimeout = tlsTimeout;
            return this;
        }

        public Builder tlsTimeout(String tlsTimeout) {
            return tlsTimeout(Output.of(tlsTimeout));
        }

        public TunnelConfigConfigIngressRuleOriginRequestArgs build() {
            return $;
        }
    }

}
