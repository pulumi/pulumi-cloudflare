// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetZeroTrustGatewayCertificateResult {
    private String accountId;
    /**
     * @return Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    private String bindingStatus;
    /**
     * @return Provide the CA certificate (read-only).
     * 
     */
    private String certificate;
    /**
     * @return Identify the certificate with a UUID.
     * 
     */
    private @Nullable String certificateId;
    private String createdAt;
    private String expiresOn;
    /**
     * @return Provide the SHA256 fingerprint of the certificate (read-only).
     * 
     */
    private String fingerprint;
    /**
     * @return Identify the certificate with a UUID.
     * 
     */
    private String id;
    /**
     * @return Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
     * 
     */
    private Boolean inUse;
    /**
     * @return Indicate the organization that issued the certificate (read-only).
     * 
     */
    private String issuerOrg;
    /**
     * @return Provide the entire issuer field of the certificate (read-only).
     * 
     */
    private String issuerRaw;
    /**
     * @return Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
     * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
     * 
     */
    private String type;
    private String updatedAt;
    private String uploadedOn;

    private GetZeroTrustGatewayCertificateResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Indicate the read-only deployment status of the certificate on Cloudflare&#39;s edge. Gateway TLS interception can use certificates in the &#39;available&#39; (previously called &#39;active&#39;) state.
     * Available values: &#34;pending*deployment&#34;, &#34;available&#34;, &#34;pending*deletion&#34;, &#34;inactive&#34;.
     * 
     */
    public String bindingStatus() {
        return this.bindingStatus;
    }
    /**
     * @return Provide the CA certificate (read-only).
     * 
     */
    public String certificate() {
        return this.certificate;
    }
    /**
     * @return Identify the certificate with a UUID.
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String expiresOn() {
        return this.expiresOn;
    }
    /**
     * @return Provide the SHA256 fingerprint of the certificate (read-only).
     * 
     */
    public String fingerprint() {
        return this.fingerprint;
    }
    /**
     * @return Identify the certificate with a UUID.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Indicate whether Gateway TLS interception uses this certificate (read-only). You cannot set this value directly. To configure interception, use the Gateway configuration setting named `certificate` (read-only).
     * 
     */
    public Boolean inUse() {
        return this.inUse;
    }
    /**
     * @return Indicate the organization that issued the certificate (read-only).
     * 
     */
    public String issuerOrg() {
        return this.issuerOrg;
    }
    /**
     * @return Provide the entire issuer field of the certificate (read-only).
     * 
     */
    public String issuerRaw() {
        return this.issuerRaw;
    }
    /**
     * @return Indicate the read-only certificate type, BYO-PKI (custom) or Gateway-managed.
     * Available values: &#34;custom&#34;, &#34;gatewayManaged&#34;.
     * 
     */
    public String type() {
        return this.type;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    public String uploadedOn() {
        return this.uploadedOn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustGatewayCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String bindingStatus;
        private String certificate;
        private @Nullable String certificateId;
        private String createdAt;
        private String expiresOn;
        private String fingerprint;
        private String id;
        private Boolean inUse;
        private String issuerOrg;
        private String issuerRaw;
        private String type;
        private String updatedAt;
        private String uploadedOn;
        public Builder() {}
        public Builder(GetZeroTrustGatewayCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.bindingStatus = defaults.bindingStatus;
    	      this.certificate = defaults.certificate;
    	      this.certificateId = defaults.certificateId;
    	      this.createdAt = defaults.createdAt;
    	      this.expiresOn = defaults.expiresOn;
    	      this.fingerprint = defaults.fingerprint;
    	      this.id = defaults.id;
    	      this.inUse = defaults.inUse;
    	      this.issuerOrg = defaults.issuerOrg;
    	      this.issuerRaw = defaults.issuerRaw;
    	      this.type = defaults.type;
    	      this.updatedAt = defaults.updatedAt;
    	      this.uploadedOn = defaults.uploadedOn;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder bindingStatus(String bindingStatus) {
            if (bindingStatus == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "bindingStatus");
            }
            this.bindingStatus = bindingStatus;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {

            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder expiresOn(String expiresOn) {
            if (expiresOn == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "expiresOn");
            }
            this.expiresOn = expiresOn;
            return this;
        }
        @CustomType.Setter
        public Builder fingerprint(String fingerprint) {
            if (fingerprint == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "fingerprint");
            }
            this.fingerprint = fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inUse(Boolean inUse) {
            if (inUse == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "inUse");
            }
            this.inUse = inUse;
            return this;
        }
        @CustomType.Setter
        public Builder issuerOrg(String issuerOrg) {
            if (issuerOrg == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "issuerOrg");
            }
            this.issuerOrg = issuerOrg;
            return this;
        }
        @CustomType.Setter
        public Builder issuerRaw(String issuerRaw) {
            if (issuerRaw == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "issuerRaw");
            }
            this.issuerRaw = issuerRaw;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder uploadedOn(String uploadedOn) {
            if (uploadedOn == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustGatewayCertificateResult", "uploadedOn");
            }
            this.uploadedOn = uploadedOn;
            return this;
        }
        public GetZeroTrustGatewayCertificateResult build() {
            final var _resultValue = new GetZeroTrustGatewayCertificateResult();
            _resultValue.accountId = accountId;
            _resultValue.bindingStatus = bindingStatus;
            _resultValue.certificate = certificate;
            _resultValue.certificateId = certificateId;
            _resultValue.createdAt = createdAt;
            _resultValue.expiresOn = expiresOn;
            _resultValue.fingerprint = fingerprint;
            _resultValue.id = id;
            _resultValue.inUse = inUse;
            _resultValue.issuerOrg = issuerOrg;
            _resultValue.issuerRaw = issuerRaw;
            _resultValue.type = type;
            _resultValue.updatedAt = updatedAt;
            _resultValue.uploadedOn = uploadedOn;
            return _resultValue;
        }
    }
}
