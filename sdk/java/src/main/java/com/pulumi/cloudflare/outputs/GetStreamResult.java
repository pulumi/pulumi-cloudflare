// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetStreamInput;
import com.pulumi.cloudflare.outputs.GetStreamPlayback;
import com.pulumi.cloudflare.outputs.GetStreamStatus;
import com.pulumi.cloudflare.outputs.GetStreamWatermark;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamResult {
    /**
     * @return The account identifier tag.
     * 
     */
    private String accountId;
    /**
     * @return Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    private List<String> allowedOrigins;
    /**
     * @return The date and time the media item was created.
     * 
     */
    private String created;
    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    private String creator;
    /**
     * @return The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    private Double duration;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    private String identifier;
    private GetStreamInput input;
    /**
     * @return The live input ID used to upload a video with Stream Live.
     * 
     */
    private String liveInput;
    /**
     * @return The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    private Integer maxDurationSeconds;
    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    private String meta;
    /**
     * @return The date and time the media item was last modified.
     * 
     */
    private String modified;
    private GetStreamPlayback playback;
    /**
     * @return The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    private String preview;
    /**
     * @return Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    private Boolean readyToStream;
    /**
     * @return Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    private String readyToStreamAt;
    /**
     * @return Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    private Boolean requireSignedUrls;
    /**
     * @return Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    private String scheduledDeletion;
    /**
     * @return The size of the media item in bytes.
     * 
     */
    private Double size;
    /**
     * @return Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    private GetStreamStatus status;
    /**
     * @return The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    private String thumbnail;
    /**
     * @return The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    private Double thumbnailTimestampPct;
    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    private String uid;
    /**
     * @return The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    private String uploadExpiry;
    /**
     * @return The date and time the media item was uploaded.
     * 
     */
    private String uploaded;
    private GetStreamWatermark watermark;

    private GetStreamResult() {}
    /**
     * @return The account identifier tag.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Lists the origins allowed to display the video. Enter allowed origin domains in an array and use `*` for wildcard subdomains. Empty arrays allow the video to be viewed on any origin.
     * 
     */
    public List<String> allowedOrigins() {
        return this.allowedOrigins;
    }
    /**
     * @return The date and time the media item was created.
     * 
     */
    public String created() {
        return this.created;
    }
    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return The duration of the video in seconds. A value of `-1` means the duration is unknown. The duration becomes available after the upload and before the video is ready.
     * 
     */
    public Double duration() {
        return this.duration;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public String identifier() {
        return this.identifier;
    }
    public GetStreamInput input() {
        return this.input;
    }
    /**
     * @return The live input ID used to upload a video with Stream Live.
     * 
     */
    public String liveInput() {
        return this.liveInput;
    }
    /**
     * @return The maximum duration in seconds for a video upload. Can be set for a video that is not yet uploaded to limit its duration. Uploads that exceed the specified duration will fail during processing. A value of `-1` means the value is unknown.
     * 
     */
    public Integer maxDurationSeconds() {
        return this.maxDurationSeconds;
    }
    /**
     * @return A user modifiable key-value store used to reference other systems of record for managing videos.
     * 
     */
    public String meta() {
        return this.meta;
    }
    /**
     * @return The date and time the media item was last modified.
     * 
     */
    public String modified() {
        return this.modified;
    }
    public GetStreamPlayback playback() {
        return this.playback;
    }
    /**
     * @return The video&#39;s preview page URI. This field is omitted until encoding is complete.
     * 
     */
    public String preview() {
        return this.preview;
    }
    /**
     * @return Indicates whether the video is playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public Boolean readyToStream() {
        return this.readyToStream;
    }
    /**
     * @return Indicates the time at which the video became playable. The field is empty if the video is not ready for viewing or the live stream is still in progress.
     * 
     */
    public String readyToStreamAt() {
        return this.readyToStreamAt;
    }
    /**
     * @return Indicates whether the video can be a accessed using the UID. When set to `true`, a signed token must be generated with a signing key to view the video.
     * 
     */
    public Boolean requireSignedUrls() {
        return this.requireSignedUrls;
    }
    /**
     * @return Indicates the date and time at which the video will be deleted. Omit the field to indicate no change, or include with a `null` value to remove an existing scheduled deletion. If specified, must be at least 30 days from upload time.
     * 
     */
    public String scheduledDeletion() {
        return this.scheduledDeletion;
    }
    /**
     * @return The size of the media item in bytes.
     * 
     */
    public Double size() {
        return this.size;
    }
    /**
     * @return Specifies a detailed status for a video. If the `state` is `inprogress` or `error`, the `step` field returns `encoding` or `manifest`. If the `state` is `inprogress`, `pctComplete` returns a number between 0 and 100 to indicate the approximate percent of completion. If the `state` is `error`, `errorReasonCode` and `errorReasonText` provide additional details.
     * 
     */
    public GetStreamStatus status() {
        return this.status;
    }
    /**
     * @return The media item&#39;s thumbnail URI. This field is omitted until encoding is complete.
     * 
     */
    public String thumbnail() {
        return this.thumbnail;
    }
    /**
     * @return The timestamp for a thumbnail image calculated as a percentage value of the video&#39;s duration. To convert from a second-wise timestamp to a percentage, divide the desired timestamp by the total duration of the video.  If this value is not set, the default thumbnail image is taken from 0s of the video.
     * 
     */
    public Double thumbnailTimestampPct() {
        return this.thumbnailTimestampPct;
    }
    /**
     * @return A Cloudflare-generated unique identifier for a media item.
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return The date and time when the video upload URL is no longer valid for direct user uploads.
     * 
     */
    public String uploadExpiry() {
        return this.uploadExpiry;
    }
    /**
     * @return The date and time the media item was uploaded.
     * 
     */
    public String uploaded() {
        return this.uploaded;
    }
    public GetStreamWatermark watermark() {
        return this.watermark;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<String> allowedOrigins;
        private String created;
        private String creator;
        private Double duration;
        private String id;
        private String identifier;
        private GetStreamInput input;
        private String liveInput;
        private Integer maxDurationSeconds;
        private String meta;
        private String modified;
        private GetStreamPlayback playback;
        private String preview;
        private Boolean readyToStream;
        private String readyToStreamAt;
        private Boolean requireSignedUrls;
        private String scheduledDeletion;
        private Double size;
        private GetStreamStatus status;
        private String thumbnail;
        private Double thumbnailTimestampPct;
        private String uid;
        private String uploadExpiry;
        private String uploaded;
        private GetStreamWatermark watermark;
        public Builder() {}
        public Builder(GetStreamResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.allowedOrigins = defaults.allowedOrigins;
    	      this.created = defaults.created;
    	      this.creator = defaults.creator;
    	      this.duration = defaults.duration;
    	      this.id = defaults.id;
    	      this.identifier = defaults.identifier;
    	      this.input = defaults.input;
    	      this.liveInput = defaults.liveInput;
    	      this.maxDurationSeconds = defaults.maxDurationSeconds;
    	      this.meta = defaults.meta;
    	      this.modified = defaults.modified;
    	      this.playback = defaults.playback;
    	      this.preview = defaults.preview;
    	      this.readyToStream = defaults.readyToStream;
    	      this.readyToStreamAt = defaults.readyToStreamAt;
    	      this.requireSignedUrls = defaults.requireSignedUrls;
    	      this.scheduledDeletion = defaults.scheduledDeletion;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.thumbnail = defaults.thumbnail;
    	      this.thumbnailTimestampPct = defaults.thumbnailTimestampPct;
    	      this.uid = defaults.uid;
    	      this.uploadExpiry = defaults.uploadExpiry;
    	      this.uploaded = defaults.uploaded;
    	      this.watermark = defaults.watermark;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder allowedOrigins(List<String> allowedOrigins) {
            if (allowedOrigins == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "allowedOrigins");
            }
            this.allowedOrigins = allowedOrigins;
            return this;
        }
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder duration(Double duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identifier(String identifier) {
            if (identifier == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "identifier");
            }
            this.identifier = identifier;
            return this;
        }
        @CustomType.Setter
        public Builder input(GetStreamInput input) {
            if (input == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "input");
            }
            this.input = input;
            return this;
        }
        @CustomType.Setter
        public Builder liveInput(String liveInput) {
            if (liveInput == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "liveInput");
            }
            this.liveInput = liveInput;
            return this;
        }
        @CustomType.Setter
        public Builder maxDurationSeconds(Integer maxDurationSeconds) {
            if (maxDurationSeconds == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "maxDurationSeconds");
            }
            this.maxDurationSeconds = maxDurationSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder meta(String meta) {
            if (meta == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "meta");
            }
            this.meta = meta;
            return this;
        }
        @CustomType.Setter
        public Builder modified(String modified) {
            if (modified == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "modified");
            }
            this.modified = modified;
            return this;
        }
        @CustomType.Setter
        public Builder playback(GetStreamPlayback playback) {
            if (playback == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "playback");
            }
            this.playback = playback;
            return this;
        }
        @CustomType.Setter
        public Builder preview(String preview) {
            if (preview == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "preview");
            }
            this.preview = preview;
            return this;
        }
        @CustomType.Setter
        public Builder readyToStream(Boolean readyToStream) {
            if (readyToStream == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "readyToStream");
            }
            this.readyToStream = readyToStream;
            return this;
        }
        @CustomType.Setter
        public Builder readyToStreamAt(String readyToStreamAt) {
            if (readyToStreamAt == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "readyToStreamAt");
            }
            this.readyToStreamAt = readyToStreamAt;
            return this;
        }
        @CustomType.Setter
        public Builder requireSignedUrls(Boolean requireSignedUrls) {
            if (requireSignedUrls == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "requireSignedUrls");
            }
            this.requireSignedUrls = requireSignedUrls;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledDeletion(String scheduledDeletion) {
            if (scheduledDeletion == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "scheduledDeletion");
            }
            this.scheduledDeletion = scheduledDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder size(Double size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(GetStreamStatus status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder thumbnail(String thumbnail) {
            if (thumbnail == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "thumbnail");
            }
            this.thumbnail = thumbnail;
            return this;
        }
        @CustomType.Setter
        public Builder thumbnailTimestampPct(Double thumbnailTimestampPct) {
            if (thumbnailTimestampPct == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "thumbnailTimestampPct");
            }
            this.thumbnailTimestampPct = thumbnailTimestampPct;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder uploadExpiry(String uploadExpiry) {
            if (uploadExpiry == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "uploadExpiry");
            }
            this.uploadExpiry = uploadExpiry;
            return this;
        }
        @CustomType.Setter
        public Builder uploaded(String uploaded) {
            if (uploaded == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "uploaded");
            }
            this.uploaded = uploaded;
            return this;
        }
        @CustomType.Setter
        public Builder watermark(GetStreamWatermark watermark) {
            if (watermark == null) {
              throw new MissingRequiredPropertyException("GetStreamResult", "watermark");
            }
            this.watermark = watermark;
            return this;
        }
        public GetStreamResult build() {
            final var _resultValue = new GetStreamResult();
            _resultValue.accountId = accountId;
            _resultValue.allowedOrigins = allowedOrigins;
            _resultValue.created = created;
            _resultValue.creator = creator;
            _resultValue.duration = duration;
            _resultValue.id = id;
            _resultValue.identifier = identifier;
            _resultValue.input = input;
            _resultValue.liveInput = liveInput;
            _resultValue.maxDurationSeconds = maxDurationSeconds;
            _resultValue.meta = meta;
            _resultValue.modified = modified;
            _resultValue.playback = playback;
            _resultValue.preview = preview;
            _resultValue.readyToStream = readyToStream;
            _resultValue.readyToStreamAt = readyToStreamAt;
            _resultValue.requireSignedUrls = requireSignedUrls;
            _resultValue.scheduledDeletion = scheduledDeletion;
            _resultValue.size = size;
            _resultValue.status = status;
            _resultValue.thumbnail = thumbnail;
            _resultValue.thumbnailTimestampPct = thumbnailTimestampPct;
            _resultValue.uid = uid;
            _resultValue.uploadExpiry = uploadExpiry;
            _resultValue.uploaded = uploaded;
            _resultValue.watermark = watermark;
            return _resultValue;
        }
    }
}
