// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ZoneLockdownConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ZoneLockdownArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneLockdownArgs Empty = new ZoneLockdownArgs();

    /**
     * A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
     * 
     */
    @Import(name="configurations", required=true)
    private Output<List<ZoneLockdownConfigurationArgs>> configurations;

    /**
     * @return A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
     * 
     */
    public Output<List<ZoneLockdownConfigurationArgs>> configurations() {
        return this.configurations;
    }

    /**
     * The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
     * 
     */
    @Import(name="urls", required=true)
    private Output<List<String>> urls;

    /**
     * @return The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
     * 
     */
    public Output<List<String>> urls() {
        return this.urls;
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ZoneLockdownArgs() {}

    private ZoneLockdownArgs(ZoneLockdownArgs $) {
        this.configurations = $.configurations;
        this.urls = $.urls;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneLockdownArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneLockdownArgs $;

        public Builder() {
            $ = new ZoneLockdownArgs();
        }

        public Builder(ZoneLockdownArgs defaults) {
            $ = new ZoneLockdownArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(Output<List<ZoneLockdownConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<ZoneLockdownConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(ZoneLockdownConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(Output<List<String>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<String> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneLockdownArgs build() {
            if ($.configurations == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "configurations");
            }
            if ($.urls == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "urls");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "zoneId");
            }
            return $;
        }
    }

}
