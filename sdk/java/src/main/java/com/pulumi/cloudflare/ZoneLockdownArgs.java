// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.cloudflare.inputs.ZoneLockdownConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneLockdownArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneLockdownArgs Empty = new ZoneLockdownArgs();

    /**
     * A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
     * 
     */
    @Import(name="configurations", required=true)
    private Output<List<ZoneLockdownConfigurationArgs>> configurations;

    /**
     * @return A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
     * 
     */
    public Output<List<ZoneLockdownConfigurationArgs>> configurations() {
        return this.configurations;
    }

    /**
     * An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative summary of the rule. This value is sanitized and any tags will be removed.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When true, indicates that the rule is currently paused.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return When true, indicates that the rule is currently paused.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    /**
     * @return The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
     * 
     */
    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
     * 
     */
    @Import(name="urls", required=true)
    private Output<List<String>> urls;

    /**
     * @return The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
     * 
     */
    public Output<List<String>> urls() {
        return this.urls;
    }

    /**
     * Defines an identifier.
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return Defines an identifier.
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private ZoneLockdownArgs() {}

    private ZoneLockdownArgs(ZoneLockdownArgs $) {
        this.configurations = $.configurations;
        this.description = $.description;
        this.paused = $.paused;
        this.priority = $.priority;
        this.urls = $.urls;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneLockdownArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneLockdownArgs $;

        public Builder() {
            $ = new ZoneLockdownArgs();
        }

        public Builder(ZoneLockdownArgs defaults) {
            $ = new ZoneLockdownArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(Output<List<ZoneLockdownConfigurationArgs>> configurations) {
            $.configurations = configurations;
            return this;
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(List<ZoneLockdownConfigurationArgs> configurations) {
            return configurations(Output.of(configurations));
        }

        /**
         * @param configurations A list of IP addresses or CIDR ranges that will be allowed to access the URLs specified in the Zone Lockdown rule. You can include any number of `ip` or `ip_range` configurations.
         * 
         * @return builder
         * 
         */
        public Builder configurations(ZoneLockdownConfigurationArgs... configurations) {
            return configurations(List.of(configurations));
        }

        /**
         * @param description An informative summary of the rule. This value is sanitized and any tags will be removed.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the rule. This value is sanitized and any tags will be removed.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param paused When true, indicates that the rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused When true, indicates that the rule is currently paused.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param priority The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority The priority of the rule to control the processing order. A lower number indicates higher priority. If not provided, any rules with a configured priority will be processed before rules without a priority.
         * 
         * @return builder
         * 
         */
        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(Output<List<String>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<String> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls The URLs to include in the current WAF override. You can use wildcards. Each entered URL will be escaped before use, which means you can only use simple wildcard patterns.
         * 
         * @return builder
         * 
         */
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId Defines an identifier.
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public ZoneLockdownArgs build() {
            if ($.configurations == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "configurations");
            }
            if ($.urls == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "urls");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("ZoneLockdownArgs", "zoneId");
            }
            return $;
        }
    }

}
