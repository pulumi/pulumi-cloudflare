// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultAnnotations;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultAssets;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultBinding;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultLimits;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultMigrations;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultModule;
import com.pulumi.cloudflare.outputs.GetWorkerVersionsResultPlacement;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkerVersionsResult {
    /**
     * @return Metadata about the version.
     * 
     */
    private GetWorkerVersionsResultAnnotations annotations;
    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    private GetWorkerVersionsResultAssets assets;
    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    private List<GetWorkerVersionsResultBinding> bindings;
    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    private String compatibilityDate;
    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    private List<String> compatibilityFlags;
    /**
     * @return When the version was created.
     * 
     */
    private String createdOn;
    /**
     * @return Version identifier.
     * 
     */
    private String id;
    /**
     * @return Resource limits enforced at runtime.
     * 
     */
    private GetWorkerVersionsResultLimits limits;
    /**
     * @return The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    private String mainModule;
    /**
     * @return Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    private GetWorkerVersionsResultMigrations migrations;
    /**
     * @return Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    private List<GetWorkerVersionsResultModule> modules;
    /**
     * @return The integer version number, starting from one.
     * 
     */
    private Integer number;
    /**
     * @return Placement settings for the version.
     * 
     */
    private GetWorkerVersionsResultPlacement placement;
    /**
     * @return The client used to create the version.
     * 
     */
    private String source;
    /**
     * @return Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    private String usageModel;

    private GetWorkerVersionsResult() {}
    /**
     * @return Metadata about the version.
     * 
     */
    public GetWorkerVersionsResultAnnotations annotations() {
        return this.annotations;
    }
    /**
     * @return Configuration for assets within a Worker.
     * 
     */
    public GetWorkerVersionsResultAssets assets() {
        return this.assets;
    }
    /**
     * @return List of bindings attached to a Worker. You can find more about bindings on our docs: https://developers.cloudflare.com/workers/configuration/multipart-upload-metadata/#bindings.
     * 
     */
    public List<GetWorkerVersionsResultBinding> bindings() {
        return this.bindings;
    }
    /**
     * @return Date indicating targeted support in the Workers runtime. Backwards incompatible fixes to the runtime following this date will not affect this Worker.
     * 
     */
    public String compatibilityDate() {
        return this.compatibilityDate;
    }
    /**
     * @return Flags that enable or disable certain features in the Workers runtime. Used to enable upcoming features or opt in or out of specific changes not included in a `compatibility_date`.
     * 
     */
    public List<String> compatibilityFlags() {
        return this.compatibilityFlags;
    }
    /**
     * @return When the version was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }
    /**
     * @return Version identifier.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource limits enforced at runtime.
     * 
     */
    public GetWorkerVersionsResultLimits limits() {
        return this.limits;
    }
    /**
     * @return The name of the main module in the `modules` array (e.g. the name of the module that exports a `fetch` handler).
     * 
     */
    public String mainModule() {
        return this.mainModule;
    }
    /**
     * @return Migrations for Durable Objects associated with the version. Migrations are applied when the version is deployed.
     * 
     */
    public GetWorkerVersionsResultMigrations migrations() {
        return this.migrations;
    }
    /**
     * @return Code, sourcemaps, and other content used at runtime.
     * 
     * This includes [`_headers`](https://developers.cloudflare.com/workers/static-assets/headers/#custom-headers) and
     * [`_redirects`](https://developers.cloudflare.com/workers/static-assets/redirects/) files used to configure
     * [Static Assets](https://developers.cloudflare.com/workers/static-assets/). `_headers` and `_redirects` files should be
     * included as modules named `_headers` and `_redirects` with content type `text/plain`.
     * 
     */
    public List<GetWorkerVersionsResultModule> modules() {
        return this.modules;
    }
    /**
     * @return The integer version number, starting from one.
     * 
     */
    public Integer number() {
        return this.number;
    }
    /**
     * @return Placement settings for the version.
     * 
     */
    public GetWorkerVersionsResultPlacement placement() {
        return this.placement;
    }
    /**
     * @return The client used to create the version.
     * 
     */
    public String source() {
        return this.source;
    }
    /**
     * @return Usage model for the version.
     * Available values: &#34;standard&#34;, &#34;bundled&#34;, &#34;unbound&#34;.
     * 
     * @deprecated
     * This attribute is deprecated.
     * 
     */
    @Deprecated /* This attribute is deprecated. */
    public String usageModel() {
        return this.usageModel;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkerVersionsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetWorkerVersionsResultAnnotations annotations;
        private GetWorkerVersionsResultAssets assets;
        private List<GetWorkerVersionsResultBinding> bindings;
        private String compatibilityDate;
        private List<String> compatibilityFlags;
        private String createdOn;
        private String id;
        private GetWorkerVersionsResultLimits limits;
        private String mainModule;
        private GetWorkerVersionsResultMigrations migrations;
        private List<GetWorkerVersionsResultModule> modules;
        private Integer number;
        private GetWorkerVersionsResultPlacement placement;
        private String source;
        private String usageModel;
        public Builder() {}
        public Builder(GetWorkerVersionsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.annotations = defaults.annotations;
    	      this.assets = defaults.assets;
    	      this.bindings = defaults.bindings;
    	      this.compatibilityDate = defaults.compatibilityDate;
    	      this.compatibilityFlags = defaults.compatibilityFlags;
    	      this.createdOn = defaults.createdOn;
    	      this.id = defaults.id;
    	      this.limits = defaults.limits;
    	      this.mainModule = defaults.mainModule;
    	      this.migrations = defaults.migrations;
    	      this.modules = defaults.modules;
    	      this.number = defaults.number;
    	      this.placement = defaults.placement;
    	      this.source = defaults.source;
    	      this.usageModel = defaults.usageModel;
        }

        @CustomType.Setter
        public Builder annotations(GetWorkerVersionsResultAnnotations annotations) {
            if (annotations == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "annotations");
            }
            this.annotations = annotations;
            return this;
        }
        @CustomType.Setter
        public Builder assets(GetWorkerVersionsResultAssets assets) {
            if (assets == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "assets");
            }
            this.assets = assets;
            return this;
        }
        @CustomType.Setter
        public Builder bindings(List<GetWorkerVersionsResultBinding> bindings) {
            if (bindings == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "bindings");
            }
            this.bindings = bindings;
            return this;
        }
        public Builder bindings(GetWorkerVersionsResultBinding... bindings) {
            return bindings(List.of(bindings));
        }
        @CustomType.Setter
        public Builder compatibilityDate(String compatibilityDate) {
            if (compatibilityDate == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "compatibilityDate");
            }
            this.compatibilityDate = compatibilityDate;
            return this;
        }
        @CustomType.Setter
        public Builder compatibilityFlags(List<String> compatibilityFlags) {
            if (compatibilityFlags == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "compatibilityFlags");
            }
            this.compatibilityFlags = compatibilityFlags;
            return this;
        }
        public Builder compatibilityFlags(String... compatibilityFlags) {
            return compatibilityFlags(List.of(compatibilityFlags));
        }
        @CustomType.Setter
        public Builder createdOn(String createdOn) {
            if (createdOn == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "createdOn");
            }
            this.createdOn = createdOn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder limits(GetWorkerVersionsResultLimits limits) {
            if (limits == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "limits");
            }
            this.limits = limits;
            return this;
        }
        @CustomType.Setter
        public Builder mainModule(String mainModule) {
            if (mainModule == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "mainModule");
            }
            this.mainModule = mainModule;
            return this;
        }
        @CustomType.Setter
        public Builder migrations(GetWorkerVersionsResultMigrations migrations) {
            if (migrations == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "migrations");
            }
            this.migrations = migrations;
            return this;
        }
        @CustomType.Setter
        public Builder modules(List<GetWorkerVersionsResultModule> modules) {
            if (modules == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "modules");
            }
            this.modules = modules;
            return this;
        }
        public Builder modules(GetWorkerVersionsResultModule... modules) {
            return modules(List.of(modules));
        }
        @CustomType.Setter
        public Builder number(Integer number) {
            if (number == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "number");
            }
            this.number = number;
            return this;
        }
        @CustomType.Setter
        public Builder placement(GetWorkerVersionsResultPlacement placement) {
            if (placement == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "placement");
            }
            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            if (source == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "source");
            }
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder usageModel(String usageModel) {
            if (usageModel == null) {
              throw new MissingRequiredPropertyException("GetWorkerVersionsResult", "usageModel");
            }
            this.usageModel = usageModel;
            return this;
        }
        public GetWorkerVersionsResult build() {
            final var _resultValue = new GetWorkerVersionsResult();
            _resultValue.annotations = annotations;
            _resultValue.assets = assets;
            _resultValue.bindings = bindings;
            _resultValue.compatibilityDate = compatibilityDate;
            _resultValue.compatibilityFlags = compatibilityFlags;
            _resultValue.createdOn = createdOn;
            _resultValue.id = id;
            _resultValue.limits = limits;
            _resultValue.mainModule = mainModule;
            _resultValue.migrations = migrations;
            _resultValue.modules = modules;
            _resultValue.number = number;
            _resultValue.placement = placement;
            _resultValue.source = source;
            _resultValue.usageModel = usageModel;
            return _resultValue;
        }
    }
}
