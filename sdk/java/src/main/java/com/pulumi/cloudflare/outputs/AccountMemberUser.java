// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccountMemberUser {
    /**
     * @return The contact email address of the user.
     * 
     */
    private @Nullable String email;
    /**
     * @return User&#39;s first name
     * 
     */
    private @Nullable String firstName;
    /**
     * @return Identifier
     * 
     */
    private @Nullable String id;
    /**
     * @return User&#39;s last name
     * 
     */
    private @Nullable String lastName;
    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    private @Nullable Boolean twoFactorAuthenticationEnabled;

    private AccountMemberUser() {}
    /**
     * @return The contact email address of the user.
     * 
     */
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    /**
     * @return User&#39;s first name
     * 
     */
    public Optional<String> firstName() {
        return Optional.ofNullable(this.firstName);
    }
    /**
     * @return Identifier
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return User&#39;s last name
     * 
     */
    public Optional<String> lastName() {
        return Optional.ofNullable(this.lastName);
    }
    /**
     * @return Indicates whether two-factor authentication is enabled for the user account. Does not apply to API authentication.
     * 
     */
    public Optional<Boolean> twoFactorAuthenticationEnabled() {
        return Optional.ofNullable(this.twoFactorAuthenticationEnabled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccountMemberUser defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String email;
        private @Nullable String firstName;
        private @Nullable String id;
        private @Nullable String lastName;
        private @Nullable Boolean twoFactorAuthenticationEnabled;
        public Builder() {}
        public Builder(AccountMemberUser defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.email = defaults.email;
    	      this.firstName = defaults.firstName;
    	      this.id = defaults.id;
    	      this.lastName = defaults.lastName;
    	      this.twoFactorAuthenticationEnabled = defaults.twoFactorAuthenticationEnabled;
        }

        @CustomType.Setter
        public Builder email(@Nullable String email) {

            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder firstName(@Nullable String firstName) {

            this.firstName = firstName;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lastName(@Nullable String lastName) {

            this.lastName = lastName;
            return this;
        }
        @CustomType.Setter
        public Builder twoFactorAuthenticationEnabled(@Nullable Boolean twoFactorAuthenticationEnabled) {

            this.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            return this;
        }
        public AccountMemberUser build() {
            final var _resultValue = new AccountMemberUser();
            _resultValue.email = email;
            _resultValue.firstName = firstName;
            _resultValue.id = id;
            _resultValue.lastName = lastName;
            _resultValue.twoFactorAuthenticationEnabled = twoFactorAuthenticationEnabled;
            return _resultValue;
        }
    }
}
