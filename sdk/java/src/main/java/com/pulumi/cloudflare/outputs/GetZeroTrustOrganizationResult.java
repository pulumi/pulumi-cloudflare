// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.cloudflare.outputs.GetZeroTrustOrganizationCustomPages;
import com.pulumi.cloudflare.outputs.GetZeroTrustOrganizationLoginDesign;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetZeroTrustOrganizationResult {
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    private @Nullable String accountId;
    /**
     * @return When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
     * 
     */
    private Boolean allowAuthenticateViaWarp;
    /**
     * @return The unique subdomain assigned to your Zero Trust organization.
     * 
     */
    private String authDomain;
    /**
     * @return When set to `true`, users skip the identity provider selection step during login.
     * 
     */
    private Boolean autoRedirectToIdentity;
    private String createdAt;
    private GetZeroTrustOrganizationCustomPages customPages;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean isUiReadOnly;
    private GetZeroTrustOrganizationLoginDesign loginDesign;
    /**
     * @return The name of your Zero Trust organization.
     * 
     */
    private String name;
    /**
     * @return The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    private String sessionDuration;
    /**
     * @return A description of the reason why the UI read only field is being toggled.
     * 
     */
    private String uiReadOnlyToggleReason;
    private String updatedAt;
    /**
     * @return The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
     * 
     */
    private String userSeatExpirationInactiveTime;
    /**
     * @return The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
     * 
     */
    private String warpAuthSessionDuration;
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    private @Nullable String zoneId;

    private GetZeroTrustOrganizationResult() {}
    /**
     * @return The Account ID to use for this endpoint. Mutually exclusive with the Zone ID.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return When set to true, users can authenticate via WARP for any application in your organization. Application settings will take precedence over this value.
     * 
     */
    public Boolean allowAuthenticateViaWarp() {
        return this.allowAuthenticateViaWarp;
    }
    /**
     * @return The unique subdomain assigned to your Zero Trust organization.
     * 
     */
    public String authDomain() {
        return this.authDomain;
    }
    /**
     * @return When set to `true`, users skip the identity provider selection step during login.
     * 
     */
    public Boolean autoRedirectToIdentity() {
        return this.autoRedirectToIdentity;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public GetZeroTrustOrganizationCustomPages customPages() {
        return this.customPages;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isUiReadOnly() {
        return this.isUiReadOnly;
    }
    public GetZeroTrustOrganizationLoginDesign loginDesign() {
        return this.loginDesign;
    }
    /**
     * @return The name of your Zero Trust organization.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The amount of time that tokens issued for applications will be valid. Must be in the format `300ms` or `2h45m`. Valid time units are: ns, us (or µs), ms, s, m, h.
     * 
     */
    public String sessionDuration() {
        return this.sessionDuration;
    }
    /**
     * @return A description of the reason why the UI read only field is being toggled.
     * 
     */
    public String uiReadOnlyToggleReason() {
        return this.uiReadOnlyToggleReason;
    }
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return The amount of time a user seat is inactive before it expires. When the user seat exceeds the set time of inactivity, the user is removed as an active seat and no longer counts against your Teams seat count.  Minimum value for this setting is 1 month (730h). Must be in the format `300ms` or `2h45m`. Valid time units are: `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.
     * 
     */
    public String userSeatExpirationInactiveTime() {
        return this.userSeatExpirationInactiveTime;
    }
    /**
     * @return The amount of time that tokens issued for applications will be valid. Must be in the format `30m` or `2h45m`. Valid time units are: m, h.
     * 
     */
    public String warpAuthSessionDuration() {
        return this.warpAuthSessionDuration;
    }
    /**
     * @return The Zone ID to use for this endpoint. Mutually exclusive with the Account ID.
     * 
     */
    public Optional<String> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustOrganizationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private Boolean allowAuthenticateViaWarp;
        private String authDomain;
        private Boolean autoRedirectToIdentity;
        private String createdAt;
        private GetZeroTrustOrganizationCustomPages customPages;
        private String id;
        private Boolean isUiReadOnly;
        private GetZeroTrustOrganizationLoginDesign loginDesign;
        private String name;
        private String sessionDuration;
        private String uiReadOnlyToggleReason;
        private String updatedAt;
        private String userSeatExpirationInactiveTime;
        private String warpAuthSessionDuration;
        private @Nullable String zoneId;
        public Builder() {}
        public Builder(GetZeroTrustOrganizationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.allowAuthenticateViaWarp = defaults.allowAuthenticateViaWarp;
    	      this.authDomain = defaults.authDomain;
    	      this.autoRedirectToIdentity = defaults.autoRedirectToIdentity;
    	      this.createdAt = defaults.createdAt;
    	      this.customPages = defaults.customPages;
    	      this.id = defaults.id;
    	      this.isUiReadOnly = defaults.isUiReadOnly;
    	      this.loginDesign = defaults.loginDesign;
    	      this.name = defaults.name;
    	      this.sessionDuration = defaults.sessionDuration;
    	      this.uiReadOnlyToggleReason = defaults.uiReadOnlyToggleReason;
    	      this.updatedAt = defaults.updatedAt;
    	      this.userSeatExpirationInactiveTime = defaults.userSeatExpirationInactiveTime;
    	      this.warpAuthSessionDuration = defaults.warpAuthSessionDuration;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {

            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder allowAuthenticateViaWarp(Boolean allowAuthenticateViaWarp) {
            if (allowAuthenticateViaWarp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "allowAuthenticateViaWarp");
            }
            this.allowAuthenticateViaWarp = allowAuthenticateViaWarp;
            return this;
        }
        @CustomType.Setter
        public Builder authDomain(String authDomain) {
            if (authDomain == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "authDomain");
            }
            this.authDomain = authDomain;
            return this;
        }
        @CustomType.Setter
        public Builder autoRedirectToIdentity(Boolean autoRedirectToIdentity) {
            if (autoRedirectToIdentity == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "autoRedirectToIdentity");
            }
            this.autoRedirectToIdentity = autoRedirectToIdentity;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder customPages(GetZeroTrustOrganizationCustomPages customPages) {
            if (customPages == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "customPages");
            }
            this.customPages = customPages;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isUiReadOnly(Boolean isUiReadOnly) {
            if (isUiReadOnly == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "isUiReadOnly");
            }
            this.isUiReadOnly = isUiReadOnly;
            return this;
        }
        @CustomType.Setter
        public Builder loginDesign(GetZeroTrustOrganizationLoginDesign loginDesign) {
            if (loginDesign == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "loginDesign");
            }
            this.loginDesign = loginDesign;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sessionDuration(String sessionDuration) {
            if (sessionDuration == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "sessionDuration");
            }
            this.sessionDuration = sessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder uiReadOnlyToggleReason(String uiReadOnlyToggleReason) {
            if (uiReadOnlyToggleReason == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "uiReadOnlyToggleReason");
            }
            this.uiReadOnlyToggleReason = uiReadOnlyToggleReason;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder userSeatExpirationInactiveTime(String userSeatExpirationInactiveTime) {
            if (userSeatExpirationInactiveTime == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "userSeatExpirationInactiveTime");
            }
            this.userSeatExpirationInactiveTime = userSeatExpirationInactiveTime;
            return this;
        }
        @CustomType.Setter
        public Builder warpAuthSessionDuration(String warpAuthSessionDuration) {
            if (warpAuthSessionDuration == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustOrganizationResult", "warpAuthSessionDuration");
            }
            this.warpAuthSessionDuration = warpAuthSessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(@Nullable String zoneId) {

            this.zoneId = zoneId;
            return this;
        }
        public GetZeroTrustOrganizationResult build() {
            final var _resultValue = new GetZeroTrustOrganizationResult();
            _resultValue.accountId = accountId;
            _resultValue.allowAuthenticateViaWarp = allowAuthenticateViaWarp;
            _resultValue.authDomain = authDomain;
            _resultValue.autoRedirectToIdentity = autoRedirectToIdentity;
            _resultValue.createdAt = createdAt;
            _resultValue.customPages = customPages;
            _resultValue.id = id;
            _resultValue.isUiReadOnly = isUiReadOnly;
            _resultValue.loginDesign = loginDesign;
            _resultValue.name = name;
            _resultValue.sessionDuration = sessionDuration;
            _resultValue.uiReadOnlyToggleReason = uiReadOnlyToggleReason;
            _resultValue.updatedAt = updatedAt;
            _resultValue.userSeatExpirationInactiveTime = userSeatExpirationInactiveTime;
            _resultValue.warpAuthSessionDuration = warpAuthSessionDuration;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
