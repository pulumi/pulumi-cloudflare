// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.cloudflare.inputs.ZeroTrustDeviceCustomProfileExcludeArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustDeviceCustomProfileFallbackDomainArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustDeviceCustomProfileIncludeArgs;
import com.pulumi.cloudflare.inputs.ZeroTrustDeviceCustomProfileServiceModeV2Args;
import com.pulumi.cloudflare.inputs.ZeroTrustDeviceCustomProfileTargetTestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZeroTrustDeviceCustomProfileState extends com.pulumi.resources.ResourceArgs {

    public static final ZeroTrustDeviceCustomProfileState Empty = new ZeroTrustDeviceCustomProfileState();

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * Whether to allow the user to switch WARP between modes.
     * 
     */
    @Import(name="allowModeSwitch")
    private @Nullable Output<Boolean> allowModeSwitch;

    /**
     * @return Whether to allow the user to switch WARP between modes.
     * 
     */
    public Optional<Output<Boolean>> allowModeSwitch() {
        return Optional.ofNullable(this.allowModeSwitch);
    }

    /**
     * Whether to receive update notifications when a new version of the client is available.
     * 
     */
    @Import(name="allowUpdates")
    private @Nullable Output<Boolean> allowUpdates;

    /**
     * @return Whether to receive update notifications when a new version of the client is available.
     * 
     */
    public Optional<Output<Boolean>> allowUpdates() {
        return Optional.ofNullable(this.allowUpdates);
    }

    /**
     * Whether to allow devices to leave the organization.
     * 
     */
    @Import(name="allowedToLeave")
    private @Nullable Output<Boolean> allowedToLeave;

    /**
     * @return Whether to allow devices to leave the organization.
     * 
     */
    public Optional<Output<Boolean>> allowedToLeave() {
        return Optional.ofNullable(this.allowedToLeave);
    }

    /**
     * The amount of time in seconds to reconnect after having been disabled.
     * 
     */
    @Import(name="autoConnect")
    private @Nullable Output<Double> autoConnect;

    /**
     * @return The amount of time in seconds to reconnect after having been disabled.
     * 
     */
    public Optional<Output<Double>> autoConnect() {
        return Optional.ofNullable(this.autoConnect);
    }

    /**
     * Turn on the captive portal after the specified amount of time.
     * 
     */
    @Import(name="captivePortal")
    private @Nullable Output<Double> captivePortal;

    /**
     * @return Turn on the captive portal after the specified amount of time.
     * 
     */
    public Optional<Output<Double>> captivePortal() {
        return Optional.ofNullable(this.captivePortal);
    }

    /**
     * Whether the policy is the default policy for an account.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return Whether the policy is the default policy for an account.
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * A description of the policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
     * 
     */
    @Import(name="disableAutoFallback")
    private @Nullable Output<Boolean> disableAutoFallback;

    /**
     * @return If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
     * 
     */
    public Optional<Output<Boolean>> disableAutoFallback() {
        return Optional.ofNullable(this.disableAutoFallback);
    }

    /**
     * Whether the policy will be applied to matching devices.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the policy will be applied to matching devices.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether to add Microsoft IPs to Split Tunnel exclusions.
     * 
     */
    @Import(name="excludeOfficeIps")
    private @Nullable Output<Boolean> excludeOfficeIps;

    /**
     * @return Whether to add Microsoft IPs to Split Tunnel exclusions.
     * 
     */
    public Optional<Output<Boolean>> excludeOfficeIps() {
        return Optional.ofNullable(this.excludeOfficeIps);
    }

    /**
     * List of routes excluded in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<ZeroTrustDeviceCustomProfileExcludeArgs>> excludes;

    /**
     * @return List of routes excluded in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
     * 
     */
    public Optional<Output<List<ZeroTrustDeviceCustomProfileExcludeArgs>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    @Import(name="fallbackDomains")
    private @Nullable Output<List<ZeroTrustDeviceCustomProfileFallbackDomainArgs>> fallbackDomains;

    public Optional<Output<List<ZeroTrustDeviceCustomProfileFallbackDomainArgs>>> fallbackDomains() {
        return Optional.ofNullable(this.fallbackDomains);
    }

    @Import(name="gatewayUniqueId")
    private @Nullable Output<String> gatewayUniqueId;

    public Optional<Output<String>> gatewayUniqueId() {
        return Optional.ofNullable(this.gatewayUniqueId);
    }

    /**
     * List of routes included in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
     * 
     */
    @Import(name="includes")
    private @Nullable Output<List<ZeroTrustDeviceCustomProfileIncludeArgs>> includes;

    /**
     * @return List of routes included in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
     * 
     */
    public Optional<Output<List<ZeroTrustDeviceCustomProfileIncludeArgs>>> includes() {
        return Optional.ofNullable(this.includes);
    }

    /**
     * The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
     * 
     */
    @Import(name="lanAllowMinutes")
    private @Nullable Output<Double> lanAllowMinutes;

    /**
     * @return The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
     * 
     */
    public Optional<Output<Double>> lanAllowMinutes() {
        return Optional.ofNullable(this.lanAllowMinutes);
    }

    /**
     * The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
     * 
     */
    @Import(name="lanAllowSubnetSize")
    private @Nullable Output<Double> lanAllowSubnetSize;

    /**
     * @return The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
     * 
     */
    public Optional<Output<Double>> lanAllowSubnetSize() {
        return Optional.ofNullable(this.lanAllowSubnetSize);
    }

    /**
     * The wirefilter expression to match devices. Available values: &#34;identity.email&#34;, &#34;identity.groups.id&#34;, &#34;identity.groups.name&#34;, &#34;identity.groups.email&#34;, &#34;identity.service*token*uuid&#34;, &#34;identity.saml_attributes&#34;, &#34;network&#34;, &#34;os.name&#34;, &#34;os.version&#34;.
     * 
     */
    @Import(name="match")
    private @Nullable Output<String> match;

    /**
     * @return The wirefilter expression to match devices. Available values: &#34;identity.email&#34;, &#34;identity.groups.id&#34;, &#34;identity.groups.name&#34;, &#34;identity.groups.email&#34;, &#34;identity.service*token*uuid&#34;, &#34;identity.saml_attributes&#34;, &#34;network&#34;, &#34;os.name&#34;, &#34;os.version&#34;.
     * 
     */
    public Optional<Output<String>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * The name of the device settings profile.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the device settings profile.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
     * 
     */
    @Import(name="precedence")
    private @Nullable Output<Double> precedence;

    /**
     * @return The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
     * 
     */
    public Optional<Output<Double>> precedence() {
        return Optional.ofNullable(this.precedence);
    }

    /**
     * Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
     * 
     */
    @Import(name="registerInterfaceIpWithDns")
    private @Nullable Output<Boolean> registerInterfaceIpWithDns;

    /**
     * @return Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
     * 
     */
    public Optional<Output<Boolean>> registerInterfaceIpWithDns() {
        return Optional.ofNullable(this.registerInterfaceIpWithDns);
    }

    /**
     * Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
     * 
     */
    @Import(name="sccmVpnBoundarySupport")
    private @Nullable Output<Boolean> sccmVpnBoundarySupport;

    /**
     * @return Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
     * 
     */
    public Optional<Output<Boolean>> sccmVpnBoundarySupport() {
        return Optional.ofNullable(this.sccmVpnBoundarySupport);
    }

    @Import(name="serviceModeV2")
    private @Nullable Output<ZeroTrustDeviceCustomProfileServiceModeV2Args> serviceModeV2;

    public Optional<Output<ZeroTrustDeviceCustomProfileServiceModeV2Args>> serviceModeV2() {
        return Optional.ofNullable(this.serviceModeV2);
    }

    /**
     * The URL to launch when the Send Feedback button is clicked.
     * 
     */
    @Import(name="supportUrl")
    private @Nullable Output<String> supportUrl;

    /**
     * @return The URL to launch when the Send Feedback button is clicked.
     * 
     */
    public Optional<Output<String>> supportUrl() {
        return Optional.ofNullable(this.supportUrl);
    }

    /**
     * Whether to allow the user to turn off the WARP switch and disconnect the client.
     * 
     */
    @Import(name="switchLocked")
    private @Nullable Output<Boolean> switchLocked;

    /**
     * @return Whether to allow the user to turn off the WARP switch and disconnect the client.
     * 
     */
    public Optional<Output<Boolean>> switchLocked() {
        return Optional.ofNullable(this.switchLocked);
    }

    @Import(name="targetTests")
    private @Nullable Output<List<ZeroTrustDeviceCustomProfileTargetTestArgs>> targetTests;

    public Optional<Output<List<ZeroTrustDeviceCustomProfileTargetTestArgs>>> targetTests() {
        return Optional.ofNullable(this.targetTests);
    }

    /**
     * Determines which tunnel protocol to use.
     * 
     */
    @Import(name="tunnelProtocol")
    private @Nullable Output<String> tunnelProtocol;

    /**
     * @return Determines which tunnel protocol to use.
     * 
     */
    public Optional<Output<String>> tunnelProtocol() {
        return Optional.ofNullable(this.tunnelProtocol);
    }

    private ZeroTrustDeviceCustomProfileState() {}

    private ZeroTrustDeviceCustomProfileState(ZeroTrustDeviceCustomProfileState $) {
        this.accountId = $.accountId;
        this.allowModeSwitch = $.allowModeSwitch;
        this.allowUpdates = $.allowUpdates;
        this.allowedToLeave = $.allowedToLeave;
        this.autoConnect = $.autoConnect;
        this.captivePortal = $.captivePortal;
        this.default_ = $.default_;
        this.description = $.description;
        this.disableAutoFallback = $.disableAutoFallback;
        this.enabled = $.enabled;
        this.excludeOfficeIps = $.excludeOfficeIps;
        this.excludes = $.excludes;
        this.fallbackDomains = $.fallbackDomains;
        this.gatewayUniqueId = $.gatewayUniqueId;
        this.includes = $.includes;
        this.lanAllowMinutes = $.lanAllowMinutes;
        this.lanAllowSubnetSize = $.lanAllowSubnetSize;
        this.match = $.match;
        this.name = $.name;
        this.policyId = $.policyId;
        this.precedence = $.precedence;
        this.registerInterfaceIpWithDns = $.registerInterfaceIpWithDns;
        this.sccmVpnBoundarySupport = $.sccmVpnBoundarySupport;
        this.serviceModeV2 = $.serviceModeV2;
        this.supportUrl = $.supportUrl;
        this.switchLocked = $.switchLocked;
        this.targetTests = $.targetTests;
        this.tunnelProtocol = $.tunnelProtocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZeroTrustDeviceCustomProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZeroTrustDeviceCustomProfileState $;

        public Builder() {
            $ = new ZeroTrustDeviceCustomProfileState();
        }

        public Builder(ZeroTrustDeviceCustomProfileState defaults) {
            $ = new ZeroTrustDeviceCustomProfileState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param allowModeSwitch Whether to allow the user to switch WARP between modes.
         * 
         * @return builder
         * 
         */
        public Builder allowModeSwitch(@Nullable Output<Boolean> allowModeSwitch) {
            $.allowModeSwitch = allowModeSwitch;
            return this;
        }

        /**
         * @param allowModeSwitch Whether to allow the user to switch WARP between modes.
         * 
         * @return builder
         * 
         */
        public Builder allowModeSwitch(Boolean allowModeSwitch) {
            return allowModeSwitch(Output.of(allowModeSwitch));
        }

        /**
         * @param allowUpdates Whether to receive update notifications when a new version of the client is available.
         * 
         * @return builder
         * 
         */
        public Builder allowUpdates(@Nullable Output<Boolean> allowUpdates) {
            $.allowUpdates = allowUpdates;
            return this;
        }

        /**
         * @param allowUpdates Whether to receive update notifications when a new version of the client is available.
         * 
         * @return builder
         * 
         */
        public Builder allowUpdates(Boolean allowUpdates) {
            return allowUpdates(Output.of(allowUpdates));
        }

        /**
         * @param allowedToLeave Whether to allow devices to leave the organization.
         * 
         * @return builder
         * 
         */
        public Builder allowedToLeave(@Nullable Output<Boolean> allowedToLeave) {
            $.allowedToLeave = allowedToLeave;
            return this;
        }

        /**
         * @param allowedToLeave Whether to allow devices to leave the organization.
         * 
         * @return builder
         * 
         */
        public Builder allowedToLeave(Boolean allowedToLeave) {
            return allowedToLeave(Output.of(allowedToLeave));
        }

        /**
         * @param autoConnect The amount of time in seconds to reconnect after having been disabled.
         * 
         * @return builder
         * 
         */
        public Builder autoConnect(@Nullable Output<Double> autoConnect) {
            $.autoConnect = autoConnect;
            return this;
        }

        /**
         * @param autoConnect The amount of time in seconds to reconnect after having been disabled.
         * 
         * @return builder
         * 
         */
        public Builder autoConnect(Double autoConnect) {
            return autoConnect(Output.of(autoConnect));
        }

        /**
         * @param captivePortal Turn on the captive portal after the specified amount of time.
         * 
         * @return builder
         * 
         */
        public Builder captivePortal(@Nullable Output<Double> captivePortal) {
            $.captivePortal = captivePortal;
            return this;
        }

        /**
         * @param captivePortal Turn on the captive portal after the specified amount of time.
         * 
         * @return builder
         * 
         */
        public Builder captivePortal(Double captivePortal) {
            return captivePortal(Output.of(captivePortal));
        }

        /**
         * @param default_ Whether the policy is the default policy for an account.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ Whether the policy is the default policy for an account.
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description A description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disableAutoFallback If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder disableAutoFallback(@Nullable Output<Boolean> disableAutoFallback) {
            $.disableAutoFallback = disableAutoFallback;
            return this;
        }

        /**
         * @param disableAutoFallback If the `dnsServer` field of a fallback domain is not present, the client will fall back to a best guess of the default/system DNS resolvers unless this policy option is set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder disableAutoFallback(Boolean disableAutoFallback) {
            return disableAutoFallback(Output.of(disableAutoFallback));
        }

        /**
         * @param enabled Whether the policy will be applied to matching devices.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the policy will be applied to matching devices.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param excludeOfficeIps Whether to add Microsoft IPs to Split Tunnel exclusions.
         * 
         * @return builder
         * 
         */
        public Builder excludeOfficeIps(@Nullable Output<Boolean> excludeOfficeIps) {
            $.excludeOfficeIps = excludeOfficeIps;
            return this;
        }

        /**
         * @param excludeOfficeIps Whether to add Microsoft IPs to Split Tunnel exclusions.
         * 
         * @return builder
         * 
         */
        public Builder excludeOfficeIps(Boolean excludeOfficeIps) {
            return excludeOfficeIps(Output.of(excludeOfficeIps));
        }

        /**
         * @param excludes List of routes excluded in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<ZeroTrustDeviceCustomProfileExcludeArgs>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes List of routes excluded in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<ZeroTrustDeviceCustomProfileExcludeArgs> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes List of routes excluded in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder excludes(ZeroTrustDeviceCustomProfileExcludeArgs... excludes) {
            return excludes(List.of(excludes));
        }

        public Builder fallbackDomains(@Nullable Output<List<ZeroTrustDeviceCustomProfileFallbackDomainArgs>> fallbackDomains) {
            $.fallbackDomains = fallbackDomains;
            return this;
        }

        public Builder fallbackDomains(List<ZeroTrustDeviceCustomProfileFallbackDomainArgs> fallbackDomains) {
            return fallbackDomains(Output.of(fallbackDomains));
        }

        public Builder fallbackDomains(ZeroTrustDeviceCustomProfileFallbackDomainArgs... fallbackDomains) {
            return fallbackDomains(List.of(fallbackDomains));
        }

        public Builder gatewayUniqueId(@Nullable Output<String> gatewayUniqueId) {
            $.gatewayUniqueId = gatewayUniqueId;
            return this;
        }

        public Builder gatewayUniqueId(String gatewayUniqueId) {
            return gatewayUniqueId(Output.of(gatewayUniqueId));
        }

        /**
         * @param includes List of routes included in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder includes(@Nullable Output<List<ZeroTrustDeviceCustomProfileIncludeArgs>> includes) {
            $.includes = includes;
            return this;
        }

        /**
         * @param includes List of routes included in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder includes(List<ZeroTrustDeviceCustomProfileIncludeArgs> includes) {
            return includes(Output.of(includes));
        }

        /**
         * @param includes List of routes included in the WARP client&#39;s tunnel. Both &#39;exclude&#39; and &#39;include&#39; cannot be set in the same request.
         * 
         * @return builder
         * 
         */
        public Builder includes(ZeroTrustDeviceCustomProfileIncludeArgs... includes) {
            return includes(List.of(includes));
        }

        /**
         * @param lanAllowMinutes The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
         * 
         * @return builder
         * 
         */
        public Builder lanAllowMinutes(@Nullable Output<Double> lanAllowMinutes) {
            $.lanAllowMinutes = lanAllowMinutes;
            return this;
        }

        /**
         * @param lanAllowMinutes The amount of time in minutes a user is allowed access to their LAN. A value of 0 will allow LAN access until the next WARP reconnection, such as a reboot or a laptop waking from sleep. Note that this field is omitted from the response if null or unset.
         * 
         * @return builder
         * 
         */
        public Builder lanAllowMinutes(Double lanAllowMinutes) {
            return lanAllowMinutes(Output.of(lanAllowMinutes));
        }

        /**
         * @param lanAllowSubnetSize The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
         * 
         * @return builder
         * 
         */
        public Builder lanAllowSubnetSize(@Nullable Output<Double> lanAllowSubnetSize) {
            $.lanAllowSubnetSize = lanAllowSubnetSize;
            return this;
        }

        /**
         * @param lanAllowSubnetSize The size of the subnet for the local access network. Note that this field is omitted from the response if null or unset.
         * 
         * @return builder
         * 
         */
        public Builder lanAllowSubnetSize(Double lanAllowSubnetSize) {
            return lanAllowSubnetSize(Output.of(lanAllowSubnetSize));
        }

        /**
         * @param match The wirefilter expression to match devices. Available values: &#34;identity.email&#34;, &#34;identity.groups.id&#34;, &#34;identity.groups.name&#34;, &#34;identity.groups.email&#34;, &#34;identity.service*token*uuid&#34;, &#34;identity.saml_attributes&#34;, &#34;network&#34;, &#34;os.name&#34;, &#34;os.version&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<String> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match The wirefilter expression to match devices. Available values: &#34;identity.email&#34;, &#34;identity.groups.id&#34;, &#34;identity.groups.name&#34;, &#34;identity.groups.email&#34;, &#34;identity.service*token*uuid&#34;, &#34;identity.saml_attributes&#34;, &#34;network&#34;, &#34;os.name&#34;, &#34;os.version&#34;.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            return match(Output.of(match));
        }

        /**
         * @param name The name of the device settings profile.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the device settings profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param precedence The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
         * 
         * @return builder
         * 
         */
        public Builder precedence(@Nullable Output<Double> precedence) {
            $.precedence = precedence;
            return this;
        }

        /**
         * @param precedence The precedence of the policy. Lower values indicate higher precedence. Policies will be evaluated in ascending order of this field.
         * 
         * @return builder
         * 
         */
        public Builder precedence(Double precedence) {
            return precedence(Output.of(precedence));
        }

        /**
         * @param registerInterfaceIpWithDns Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
         * 
         * @return builder
         * 
         */
        public Builder registerInterfaceIpWithDns(@Nullable Output<Boolean> registerInterfaceIpWithDns) {
            $.registerInterfaceIpWithDns = registerInterfaceIpWithDns;
            return this;
        }

        /**
         * @param registerInterfaceIpWithDns Determines if the operating system will register WARP&#39;s local interface IP with your on-premises DNS server.
         * 
         * @return builder
         * 
         */
        public Builder registerInterfaceIpWithDns(Boolean registerInterfaceIpWithDns) {
            return registerInterfaceIpWithDns(Output.of(registerInterfaceIpWithDns));
        }

        /**
         * @param sccmVpnBoundarySupport Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
         * 
         * @return builder
         * 
         */
        public Builder sccmVpnBoundarySupport(@Nullable Output<Boolean> sccmVpnBoundarySupport) {
            $.sccmVpnBoundarySupport = sccmVpnBoundarySupport;
            return this;
        }

        /**
         * @param sccmVpnBoundarySupport Determines whether the WARP client indicates to SCCM that it is inside a VPN boundary. (Windows only).
         * 
         * @return builder
         * 
         */
        public Builder sccmVpnBoundarySupport(Boolean sccmVpnBoundarySupport) {
            return sccmVpnBoundarySupport(Output.of(sccmVpnBoundarySupport));
        }

        public Builder serviceModeV2(@Nullable Output<ZeroTrustDeviceCustomProfileServiceModeV2Args> serviceModeV2) {
            $.serviceModeV2 = serviceModeV2;
            return this;
        }

        public Builder serviceModeV2(ZeroTrustDeviceCustomProfileServiceModeV2Args serviceModeV2) {
            return serviceModeV2(Output.of(serviceModeV2));
        }

        /**
         * @param supportUrl The URL to launch when the Send Feedback button is clicked.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(@Nullable Output<String> supportUrl) {
            $.supportUrl = supportUrl;
            return this;
        }

        /**
         * @param supportUrl The URL to launch when the Send Feedback button is clicked.
         * 
         * @return builder
         * 
         */
        public Builder supportUrl(String supportUrl) {
            return supportUrl(Output.of(supportUrl));
        }

        /**
         * @param switchLocked Whether to allow the user to turn off the WARP switch and disconnect the client.
         * 
         * @return builder
         * 
         */
        public Builder switchLocked(@Nullable Output<Boolean> switchLocked) {
            $.switchLocked = switchLocked;
            return this;
        }

        /**
         * @param switchLocked Whether to allow the user to turn off the WARP switch and disconnect the client.
         * 
         * @return builder
         * 
         */
        public Builder switchLocked(Boolean switchLocked) {
            return switchLocked(Output.of(switchLocked));
        }

        public Builder targetTests(@Nullable Output<List<ZeroTrustDeviceCustomProfileTargetTestArgs>> targetTests) {
            $.targetTests = targetTests;
            return this;
        }

        public Builder targetTests(List<ZeroTrustDeviceCustomProfileTargetTestArgs> targetTests) {
            return targetTests(Output.of(targetTests));
        }

        public Builder targetTests(ZeroTrustDeviceCustomProfileTargetTestArgs... targetTests) {
            return targetTests(List.of(targetTests));
        }

        /**
         * @param tunnelProtocol Determines which tunnel protocol to use.
         * 
         * @return builder
         * 
         */
        public Builder tunnelProtocol(@Nullable Output<String> tunnelProtocol) {
            $.tunnelProtocol = tunnelProtocol;
            return this;
        }

        /**
         * @param tunnelProtocol Determines which tunnel protocol to use.
         * 
         * @return builder
         * 
         */
        public Builder tunnelProtocol(String tunnelProtocol) {
            return tunnelProtocol(Output.of(tunnelProtocol));
        }

        public ZeroTrustDeviceCustomProfileState build() {
            return $;
        }
    }

}
