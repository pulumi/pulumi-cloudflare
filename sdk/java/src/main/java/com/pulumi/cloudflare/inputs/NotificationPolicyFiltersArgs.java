// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyFiltersArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyFiltersArgs Empty = new NotificationPolicyFiltersArgs();

    /**
     * Targeted actions for alert.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<String>> actions;

    /**
     * @return Targeted actions for alert.
     * 
     */
    public Optional<Output<List<String>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Affected components for alert. Available values: `API`, `API Shield`, `Access`, `Always Online`, `Analytics`, `Apps Marketplace`, `Argo Smart Routing`, `Audit Logs`, `Authoritative DNS`, `Billing`, `Bot Management`, `Bring Your Own IP (BYOIP)`, `Browser Isolation`, `CDN Cache Purge`, `CDN/Cache`, `Cache Reserve`, `Challenge Platform`, `Cloud Access Security Broker (CASB)`, `Community Site`, `DNS Root Servers`, `DNS Updates`, `Dashboard`, `Data Loss Prevention (DLP)`, `Developer&#39;s Site`, `Digital Experience Monitoring (DEX)`, `Distributed Web Gateway`, `Durable Objects`, `Email Routing`, `Ethereum Gateway`, `Firewall`, `Gateway`, `Geo-Key Manager`, `Image Resizing`, `Images`, `Infrastructure`, `Lists`, `Load Balancing and Monitoring`, `Logs`, `Magic Firewall`, `Magic Transit`, `Magic WAN`, `Magic WAN Connector`, `Marketing Site`, `Mirage`, `Network`, `Notifications`, `Observatory`, `Page Shield`, `Pages`, `R2`, `Radar`, `Randomness Beacon`, `Recursive DNS`, `Registrar`, `Registration Data Access Protocol (RDAP)`, `SSL Certificate Provisioning`, `SSL for SaaS Provisioning`, `Security Center`, `Snippets`, `Spectrum`, `Speed Optimizations`, `Stream`, `Support Site`, `Time Services`, `Trace`, `Tunnel`, `Turnstile`, `WARP`, `Waiting Room`, `Web Analytics`, `Workers`, `Workers KV`, `Workers Preview`, `Zaraz`, `Zero Trust`, `Zero Trust Dashboard`, `Zone Versioning`.
     * 
     */
    @Import(name="affectedComponents")
    private @Nullable Output<List<String>> affectedComponents;

    /**
     * @return Affected components for alert. Available values: `API`, `API Shield`, `Access`, `Always Online`, `Analytics`, `Apps Marketplace`, `Argo Smart Routing`, `Audit Logs`, `Authoritative DNS`, `Billing`, `Bot Management`, `Bring Your Own IP (BYOIP)`, `Browser Isolation`, `CDN Cache Purge`, `CDN/Cache`, `Cache Reserve`, `Challenge Platform`, `Cloud Access Security Broker (CASB)`, `Community Site`, `DNS Root Servers`, `DNS Updates`, `Dashboard`, `Data Loss Prevention (DLP)`, `Developer&#39;s Site`, `Digital Experience Monitoring (DEX)`, `Distributed Web Gateway`, `Durable Objects`, `Email Routing`, `Ethereum Gateway`, `Firewall`, `Gateway`, `Geo-Key Manager`, `Image Resizing`, `Images`, `Infrastructure`, `Lists`, `Load Balancing and Monitoring`, `Logs`, `Magic Firewall`, `Magic Transit`, `Magic WAN`, `Magic WAN Connector`, `Marketing Site`, `Mirage`, `Network`, `Notifications`, `Observatory`, `Page Shield`, `Pages`, `R2`, `Radar`, `Randomness Beacon`, `Recursive DNS`, `Registrar`, `Registration Data Access Protocol (RDAP)`, `SSL Certificate Provisioning`, `SSL for SaaS Provisioning`, `Security Center`, `Snippets`, `Spectrum`, `Speed Optimizations`, `Stream`, `Support Site`, `Time Services`, `Trace`, `Tunnel`, `Turnstile`, `WARP`, `Waiting Room`, `Web Analytics`, `Workers`, `Workers KV`, `Workers Preview`, `Zaraz`, `Zero Trust`, `Zero Trust Dashboard`, `Zone Versioning`.
     * 
     */
    public Optional<Output<List<String>>> affectedComponents() {
        return Optional.ofNullable(this.affectedComponents);
    }

    /**
     * Alert trigger preferences. Example: `slo`.
     * 
     */
    @Import(name="alertTriggerPreferences")
    private @Nullable Output<List<String>> alertTriggerPreferences;

    /**
     * @return Alert trigger preferences. Example: `slo`.
     * 
     */
    public Optional<Output<List<String>>> alertTriggerPreferences() {
        return Optional.ofNullable(this.alertTriggerPreferences);
    }

    /**
     * State of the pool to alert on.
     * 
     */
    @Import(name="enableds")
    private @Nullable Output<List<String>> enableds;

    /**
     * @return State of the pool to alert on.
     * 
     */
    public Optional<Output<List<String>>> enableds() {
        return Optional.ofNullable(this.enableds);
    }

    /**
     * Environment of pages. Available values: `ENVIRONMENT_PREVIEW`, `ENVIRONMENT_PRODUCTION`.
     * 
     */
    @Import(name="environments")
    private @Nullable Output<List<String>> environments;

    /**
     * @return Environment of pages. Available values: `ENVIRONMENT_PREVIEW`, `ENVIRONMENT_PRODUCTION`.
     * 
     */
    public Optional<Output<List<String>>> environments() {
        return Optional.ofNullable(this.environments);
    }

    /**
     * Source configuration to alert on for pool or origin.
     * 
     */
    @Import(name="eventSources")
    private @Nullable Output<List<String>> eventSources;

    /**
     * @return Source configuration to alert on for pool or origin.
     * 
     */
    public Optional<Output<List<String>>> eventSources() {
        return Optional.ofNullable(this.eventSources);
    }

    /**
     * Stream event type to alert on.
     * 
     */
    @Import(name="eventTypes")
    private @Nullable Output<List<String>> eventTypes;

    /**
     * @return Stream event type to alert on.
     * 
     */
    public Optional<Output<List<String>>> eventTypes() {
        return Optional.ofNullable(this.eventTypes);
    }

    /**
     * Pages event to alert. Available values: `EVENT_DEPLOYMENT_STARTED`, `EVENT_DEPLOYMENT_FAILED`, `EVENT_DEPLOYMENT_SUCCESS`.
     * 
     */
    @Import(name="events")
    private @Nullable Output<List<String>> events;

    /**
     * @return Pages event to alert. Available values: `EVENT_DEPLOYMENT_STARTED`, `EVENT_DEPLOYMENT_FAILED`, `EVENT_DEPLOYMENT_SUCCESS`.
     * 
     */
    public Optional<Output<List<String>>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * Alert grouping.
     * 
     */
    @Import(name="groupBies")
    private @Nullable Output<List<String>> groupBies;

    /**
     * @return Alert grouping.
     * 
     */
    public Optional<Output<List<String>>> groupBies() {
        return Optional.ofNullable(this.groupBies);
    }

    /**
     * Identifier health check. Required when using `filters.0.status`.
     * 
     */
    @Import(name="healthCheckIds")
    private @Nullable Output<List<String>> healthCheckIds;

    /**
     * @return Identifier health check. Required when using `filters.0.status`.
     * 
     */
    public Optional<Output<List<String>>> healthCheckIds() {
        return Optional.ofNullable(this.healthCheckIds);
    }

    /**
     * The incident impact level that will trigger the dispatch of a notification. Available values: `INCIDENT_IMPACT_NONE`, `INCIDENT_IMPACT_MINOR`, `INCIDENT_IMPACT_MAJOR`, `INCIDENT_IMPACT_CRITICAL`.
     * 
     */
    @Import(name="incidentImpacts")
    private @Nullable Output<List<String>> incidentImpacts;

    /**
     * @return The incident impact level that will trigger the dispatch of a notification. Available values: `INCIDENT_IMPACT_NONE`, `INCIDENT_IMPACT_MINOR`, `INCIDENT_IMPACT_MAJOR`, `INCIDENT_IMPACT_CRITICAL`.
     * 
     */
    public Optional<Output<List<String>>> incidentImpacts() {
        return Optional.ofNullable(this.incidentImpacts);
    }

    /**
     * Stream input id to alert on.
     * 
     */
    @Import(name="inputIds")
    private @Nullable Output<List<String>> inputIds;

    /**
     * @return Stream input id to alert on.
     * 
     */
    public Optional<Output<List<String>>> inputIds() {
        return Optional.ofNullable(this.inputIds);
    }

    /**
     * A numerical limit. Example: `100`.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<List<String>> limits;

    /**
     * @return A numerical limit. Example: `100`.
     * 
     */
    public Optional<Output<List<String>>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Megabits per second threshold for dos alert.
     * 
     */
    @Import(name="megabitsPerSeconds")
    private @Nullable Output<List<String>> megabitsPerSeconds;

    /**
     * @return Megabits per second threshold for dos alert.
     * 
     */
    public Optional<Output<List<String>>> megabitsPerSeconds() {
        return Optional.ofNullable(this.megabitsPerSeconds);
    }

    /**
     * Health status to alert on for pool or origin.
     * 
     */
    @Import(name="newHealths")
    private @Nullable Output<List<String>> newHealths;

    /**
     * @return Health status to alert on for pool or origin.
     * 
     */
    public Optional<Output<List<String>>> newHealths() {
        return Optional.ofNullable(this.newHealths);
    }

    /**
     * Tunnel health status to alert on.
     * 
     */
    @Import(name="newStatuses")
    private @Nullable Output<List<String>> newStatuses;

    /**
     * @return Tunnel health status to alert on.
     * 
     */
    public Optional<Output<List<String>>> newStatuses() {
        return Optional.ofNullable(this.newStatuses);
    }

    /**
     * Packets per second threshold for dos alert.
     * 
     */
    @Import(name="packetsPerSeconds")
    private @Nullable Output<List<String>> packetsPerSeconds;

    /**
     * @return Packets per second threshold for dos alert.
     * 
     */
    public Optional<Output<List<String>>> packetsPerSeconds() {
        return Optional.ofNullable(this.packetsPerSeconds);
    }

    /**
     * Load balancer pool identifier.
     * 
     */
    @Import(name="poolIds")
    private @Nullable Output<List<String>> poolIds;

    /**
     * @return Load balancer pool identifier.
     * 
     */
    public Optional<Output<List<String>>> poolIds() {
        return Optional.ofNullable(this.poolIds);
    }

    /**
     * Product name. Available values: `worker_requests`, `worker_durable_objects_requests`, `worker_durable_objects_duration`, `worker_durable_objects_data_transfer`, `worker_durable_objects_stored_data`, `worker_durable_objects_storage_deletes`, `worker_durable_objects_storage_writes`, `worker_durable_objects_storage_reads`.
     * 
     */
    @Import(name="products")
    private @Nullable Output<List<String>> products;

    /**
     * @return Product name. Available values: `worker_requests`, `worker_durable_objects_requests`, `worker_durable_objects_duration`, `worker_durable_objects_data_transfer`, `worker_durable_objects_stored_data`, `worker_durable_objects_storage_deletes`, `worker_durable_objects_storage_writes`, `worker_durable_objects_storage_reads`.
     * 
     */
    public Optional<Output<List<String>>> products() {
        return Optional.ofNullable(this.products);
    }

    /**
     * Identifier of pages project.
     * 
     */
    @Import(name="projectIds")
    private @Nullable Output<List<String>> projectIds;

    /**
     * @return Identifier of pages project.
     * 
     */
    public Optional<Output<List<String>>> projectIds() {
        return Optional.ofNullable(this.projectIds);
    }

    /**
     * Protocol to alert on for dos.
     * 
     */
    @Import(name="protocols")
    private @Nullable Output<List<String>> protocols;

    /**
     * @return Protocol to alert on for dos.
     * 
     */
    public Optional<Output<List<String>>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    /**
     * Requests per second threshold for dos alert.
     * 
     */
    @Import(name="requestsPerSeconds")
    private @Nullable Output<List<String>> requestsPerSeconds;

    /**
     * @return Requests per second threshold for dos alert.
     * 
     */
    public Optional<Output<List<String>>> requestsPerSeconds() {
        return Optional.ofNullable(this.requestsPerSeconds);
    }

    /**
     * Selectors for alert. Valid options depend on the alert type.
     * 
     */
    @Import(name="selectors")
    private @Nullable Output<List<String>> selectors;

    /**
     * @return Selectors for alert. Valid options depend on the alert type.
     * 
     */
    public Optional<Output<List<String>>> selectors() {
        return Optional.ofNullable(this.selectors);
    }

    @Import(name="services")
    private @Nullable Output<List<String>> services;

    public Optional<Output<List<String>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * A numerical limit. Example: `99.9`.
     * 
     */
    @Import(name="slos")
    private @Nullable Output<List<String>> slos;

    /**
     * @return A numerical limit. Example: `99.9`.
     * 
     */
    public Optional<Output<List<String>>> slos() {
        return Optional.ofNullable(this.slos);
    }

    /**
     * Status to alert on.
     * 
     */
    @Import(name="statuses")
    private @Nullable Output<List<String>> statuses;

    /**
     * @return Status to alert on.
     * 
     */
    public Optional<Output<List<String>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * Target host to alert on for dos.
     * 
     */
    @Import(name="targetHostnames")
    private @Nullable Output<List<String>> targetHostnames;

    /**
     * @return Target host to alert on for dos.
     * 
     */
    public Optional<Output<List<String>>> targetHostnames() {
        return Optional.ofNullable(this.targetHostnames);
    }

    /**
     * Target domain to alert on.
     * 
     */
    @Import(name="targetZoneNames")
    private @Nullable Output<List<String>> targetZoneNames;

    /**
     * @return Target domain to alert on.
     * 
     */
    public Optional<Output<List<String>>> targetZoneNames() {
        return Optional.ofNullable(this.targetZoneNames);
    }

    /**
     * Tunnel IDs to alert on.
     * 
     */
    @Import(name="tunnelIds")
    private @Nullable Output<List<String>> tunnelIds;

    /**
     * @return Tunnel IDs to alert on.
     * 
     */
    public Optional<Output<List<String>>> tunnelIds() {
        return Optional.ofNullable(this.tunnelIds);
    }

    /**
     * Filter for alert.
     * 
     */
    @Import(name="wheres")
    private @Nullable Output<List<String>> wheres;

    /**
     * @return Filter for alert.
     * 
     */
    public Optional<Output<List<String>>> wheres() {
        return Optional.ofNullable(this.wheres);
    }

    /**
     * A list of zone identifiers.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    /**
     * @return A list of zone identifiers.
     * 
     */
    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private NotificationPolicyFiltersArgs() {}

    private NotificationPolicyFiltersArgs(NotificationPolicyFiltersArgs $) {
        this.actions = $.actions;
        this.affectedComponents = $.affectedComponents;
        this.alertTriggerPreferences = $.alertTriggerPreferences;
        this.enableds = $.enableds;
        this.environments = $.environments;
        this.eventSources = $.eventSources;
        this.eventTypes = $.eventTypes;
        this.events = $.events;
        this.groupBies = $.groupBies;
        this.healthCheckIds = $.healthCheckIds;
        this.incidentImpacts = $.incidentImpacts;
        this.inputIds = $.inputIds;
        this.limits = $.limits;
        this.megabitsPerSeconds = $.megabitsPerSeconds;
        this.newHealths = $.newHealths;
        this.newStatuses = $.newStatuses;
        this.packetsPerSeconds = $.packetsPerSeconds;
        this.poolIds = $.poolIds;
        this.products = $.products;
        this.projectIds = $.projectIds;
        this.protocols = $.protocols;
        this.requestsPerSeconds = $.requestsPerSeconds;
        this.selectors = $.selectors;
        this.services = $.services;
        this.slos = $.slos;
        this.statuses = $.statuses;
        this.targetHostnames = $.targetHostnames;
        this.targetZoneNames = $.targetZoneNames;
        this.tunnelIds = $.tunnelIds;
        this.wheres = $.wheres;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyFiltersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyFiltersArgs $;

        public Builder() {
            $ = new NotificationPolicyFiltersArgs();
        }

        public Builder(NotificationPolicyFiltersArgs defaults) {
            $ = new NotificationPolicyFiltersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Targeted actions for alert.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<String>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Targeted actions for alert.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<String> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Targeted actions for alert.
         * 
         * @return builder
         * 
         */
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param affectedComponents Affected components for alert. Available values: `API`, `API Shield`, `Access`, `Always Online`, `Analytics`, `Apps Marketplace`, `Argo Smart Routing`, `Audit Logs`, `Authoritative DNS`, `Billing`, `Bot Management`, `Bring Your Own IP (BYOIP)`, `Browser Isolation`, `CDN Cache Purge`, `CDN/Cache`, `Cache Reserve`, `Challenge Platform`, `Cloud Access Security Broker (CASB)`, `Community Site`, `DNS Root Servers`, `DNS Updates`, `Dashboard`, `Data Loss Prevention (DLP)`, `Developer&#39;s Site`, `Digital Experience Monitoring (DEX)`, `Distributed Web Gateway`, `Durable Objects`, `Email Routing`, `Ethereum Gateway`, `Firewall`, `Gateway`, `Geo-Key Manager`, `Image Resizing`, `Images`, `Infrastructure`, `Lists`, `Load Balancing and Monitoring`, `Logs`, `Magic Firewall`, `Magic Transit`, `Magic WAN`, `Magic WAN Connector`, `Marketing Site`, `Mirage`, `Network`, `Notifications`, `Observatory`, `Page Shield`, `Pages`, `R2`, `Radar`, `Randomness Beacon`, `Recursive DNS`, `Registrar`, `Registration Data Access Protocol (RDAP)`, `SSL Certificate Provisioning`, `SSL for SaaS Provisioning`, `Security Center`, `Snippets`, `Spectrum`, `Speed Optimizations`, `Stream`, `Support Site`, `Time Services`, `Trace`, `Tunnel`, `Turnstile`, `WARP`, `Waiting Room`, `Web Analytics`, `Workers`, `Workers KV`, `Workers Preview`, `Zaraz`, `Zero Trust`, `Zero Trust Dashboard`, `Zone Versioning`.
         * 
         * @return builder
         * 
         */
        public Builder affectedComponents(@Nullable Output<List<String>> affectedComponents) {
            $.affectedComponents = affectedComponents;
            return this;
        }

        /**
         * @param affectedComponents Affected components for alert. Available values: `API`, `API Shield`, `Access`, `Always Online`, `Analytics`, `Apps Marketplace`, `Argo Smart Routing`, `Audit Logs`, `Authoritative DNS`, `Billing`, `Bot Management`, `Bring Your Own IP (BYOIP)`, `Browser Isolation`, `CDN Cache Purge`, `CDN/Cache`, `Cache Reserve`, `Challenge Platform`, `Cloud Access Security Broker (CASB)`, `Community Site`, `DNS Root Servers`, `DNS Updates`, `Dashboard`, `Data Loss Prevention (DLP)`, `Developer&#39;s Site`, `Digital Experience Monitoring (DEX)`, `Distributed Web Gateway`, `Durable Objects`, `Email Routing`, `Ethereum Gateway`, `Firewall`, `Gateway`, `Geo-Key Manager`, `Image Resizing`, `Images`, `Infrastructure`, `Lists`, `Load Balancing and Monitoring`, `Logs`, `Magic Firewall`, `Magic Transit`, `Magic WAN`, `Magic WAN Connector`, `Marketing Site`, `Mirage`, `Network`, `Notifications`, `Observatory`, `Page Shield`, `Pages`, `R2`, `Radar`, `Randomness Beacon`, `Recursive DNS`, `Registrar`, `Registration Data Access Protocol (RDAP)`, `SSL Certificate Provisioning`, `SSL for SaaS Provisioning`, `Security Center`, `Snippets`, `Spectrum`, `Speed Optimizations`, `Stream`, `Support Site`, `Time Services`, `Trace`, `Tunnel`, `Turnstile`, `WARP`, `Waiting Room`, `Web Analytics`, `Workers`, `Workers KV`, `Workers Preview`, `Zaraz`, `Zero Trust`, `Zero Trust Dashboard`, `Zone Versioning`.
         * 
         * @return builder
         * 
         */
        public Builder affectedComponents(List<String> affectedComponents) {
            return affectedComponents(Output.of(affectedComponents));
        }

        /**
         * @param affectedComponents Affected components for alert. Available values: `API`, `API Shield`, `Access`, `Always Online`, `Analytics`, `Apps Marketplace`, `Argo Smart Routing`, `Audit Logs`, `Authoritative DNS`, `Billing`, `Bot Management`, `Bring Your Own IP (BYOIP)`, `Browser Isolation`, `CDN Cache Purge`, `CDN/Cache`, `Cache Reserve`, `Challenge Platform`, `Cloud Access Security Broker (CASB)`, `Community Site`, `DNS Root Servers`, `DNS Updates`, `Dashboard`, `Data Loss Prevention (DLP)`, `Developer&#39;s Site`, `Digital Experience Monitoring (DEX)`, `Distributed Web Gateway`, `Durable Objects`, `Email Routing`, `Ethereum Gateway`, `Firewall`, `Gateway`, `Geo-Key Manager`, `Image Resizing`, `Images`, `Infrastructure`, `Lists`, `Load Balancing and Monitoring`, `Logs`, `Magic Firewall`, `Magic Transit`, `Magic WAN`, `Magic WAN Connector`, `Marketing Site`, `Mirage`, `Network`, `Notifications`, `Observatory`, `Page Shield`, `Pages`, `R2`, `Radar`, `Randomness Beacon`, `Recursive DNS`, `Registrar`, `Registration Data Access Protocol (RDAP)`, `SSL Certificate Provisioning`, `SSL for SaaS Provisioning`, `Security Center`, `Snippets`, `Spectrum`, `Speed Optimizations`, `Stream`, `Support Site`, `Time Services`, `Trace`, `Tunnel`, `Turnstile`, `WARP`, `Waiting Room`, `Web Analytics`, `Workers`, `Workers KV`, `Workers Preview`, `Zaraz`, `Zero Trust`, `Zero Trust Dashboard`, `Zone Versioning`.
         * 
         * @return builder
         * 
         */
        public Builder affectedComponents(String... affectedComponents) {
            return affectedComponents(List.of(affectedComponents));
        }

        /**
         * @param alertTriggerPreferences Alert trigger preferences. Example: `slo`.
         * 
         * @return builder
         * 
         */
        public Builder alertTriggerPreferences(@Nullable Output<List<String>> alertTriggerPreferences) {
            $.alertTriggerPreferences = alertTriggerPreferences;
            return this;
        }

        /**
         * @param alertTriggerPreferences Alert trigger preferences. Example: `slo`.
         * 
         * @return builder
         * 
         */
        public Builder alertTriggerPreferences(List<String> alertTriggerPreferences) {
            return alertTriggerPreferences(Output.of(alertTriggerPreferences));
        }

        /**
         * @param alertTriggerPreferences Alert trigger preferences. Example: `slo`.
         * 
         * @return builder
         * 
         */
        public Builder alertTriggerPreferences(String... alertTriggerPreferences) {
            return alertTriggerPreferences(List.of(alertTriggerPreferences));
        }

        /**
         * @param enableds State of the pool to alert on.
         * 
         * @return builder
         * 
         */
        public Builder enableds(@Nullable Output<List<String>> enableds) {
            $.enableds = enableds;
            return this;
        }

        /**
         * @param enableds State of the pool to alert on.
         * 
         * @return builder
         * 
         */
        public Builder enableds(List<String> enableds) {
            return enableds(Output.of(enableds));
        }

        /**
         * @param enableds State of the pool to alert on.
         * 
         * @return builder
         * 
         */
        public Builder enableds(String... enableds) {
            return enableds(List.of(enableds));
        }

        /**
         * @param environments Environment of pages. Available values: `ENVIRONMENT_PREVIEW`, `ENVIRONMENT_PRODUCTION`.
         * 
         * @return builder
         * 
         */
        public Builder environments(@Nullable Output<List<String>> environments) {
            $.environments = environments;
            return this;
        }

        /**
         * @param environments Environment of pages. Available values: `ENVIRONMENT_PREVIEW`, `ENVIRONMENT_PRODUCTION`.
         * 
         * @return builder
         * 
         */
        public Builder environments(List<String> environments) {
            return environments(Output.of(environments));
        }

        /**
         * @param environments Environment of pages. Available values: `ENVIRONMENT_PREVIEW`, `ENVIRONMENT_PRODUCTION`.
         * 
         * @return builder
         * 
         */
        public Builder environments(String... environments) {
            return environments(List.of(environments));
        }

        /**
         * @param eventSources Source configuration to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder eventSources(@Nullable Output<List<String>> eventSources) {
            $.eventSources = eventSources;
            return this;
        }

        /**
         * @param eventSources Source configuration to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder eventSources(List<String> eventSources) {
            return eventSources(Output.of(eventSources));
        }

        /**
         * @param eventSources Source configuration to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder eventSources(String... eventSources) {
            return eventSources(List.of(eventSources));
        }

        /**
         * @param eventTypes Stream event type to alert on.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(@Nullable Output<List<String>> eventTypes) {
            $.eventTypes = eventTypes;
            return this;
        }

        /**
         * @param eventTypes Stream event type to alert on.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(List<String> eventTypes) {
            return eventTypes(Output.of(eventTypes));
        }

        /**
         * @param eventTypes Stream event type to alert on.
         * 
         * @return builder
         * 
         */
        public Builder eventTypes(String... eventTypes) {
            return eventTypes(List.of(eventTypes));
        }

        /**
         * @param events Pages event to alert. Available values: `EVENT_DEPLOYMENT_STARTED`, `EVENT_DEPLOYMENT_FAILED`, `EVENT_DEPLOYMENT_SUCCESS`.
         * 
         * @return builder
         * 
         */
        public Builder events(@Nullable Output<List<String>> events) {
            $.events = events;
            return this;
        }

        /**
         * @param events Pages event to alert. Available values: `EVENT_DEPLOYMENT_STARTED`, `EVENT_DEPLOYMENT_FAILED`, `EVENT_DEPLOYMENT_SUCCESS`.
         * 
         * @return builder
         * 
         */
        public Builder events(List<String> events) {
            return events(Output.of(events));
        }

        /**
         * @param events Pages event to alert. Available values: `EVENT_DEPLOYMENT_STARTED`, `EVENT_DEPLOYMENT_FAILED`, `EVENT_DEPLOYMENT_SUCCESS`.
         * 
         * @return builder
         * 
         */
        public Builder events(String... events) {
            return events(List.of(events));
        }

        /**
         * @param groupBies Alert grouping.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(@Nullable Output<List<String>> groupBies) {
            $.groupBies = groupBies;
            return this;
        }

        /**
         * @param groupBies Alert grouping.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(List<String> groupBies) {
            return groupBies(Output.of(groupBies));
        }

        /**
         * @param groupBies Alert grouping.
         * 
         * @return builder
         * 
         */
        public Builder groupBies(String... groupBies) {
            return groupBies(List.of(groupBies));
        }

        /**
         * @param healthCheckIds Identifier health check. Required when using `filters.0.status`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckIds(@Nullable Output<List<String>> healthCheckIds) {
            $.healthCheckIds = healthCheckIds;
            return this;
        }

        /**
         * @param healthCheckIds Identifier health check. Required when using `filters.0.status`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckIds(List<String> healthCheckIds) {
            return healthCheckIds(Output.of(healthCheckIds));
        }

        /**
         * @param healthCheckIds Identifier health check. Required when using `filters.0.status`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheckIds(String... healthCheckIds) {
            return healthCheckIds(List.of(healthCheckIds));
        }

        /**
         * @param incidentImpacts The incident impact level that will trigger the dispatch of a notification. Available values: `INCIDENT_IMPACT_NONE`, `INCIDENT_IMPACT_MINOR`, `INCIDENT_IMPACT_MAJOR`, `INCIDENT_IMPACT_CRITICAL`.
         * 
         * @return builder
         * 
         */
        public Builder incidentImpacts(@Nullable Output<List<String>> incidentImpacts) {
            $.incidentImpacts = incidentImpacts;
            return this;
        }

        /**
         * @param incidentImpacts The incident impact level that will trigger the dispatch of a notification. Available values: `INCIDENT_IMPACT_NONE`, `INCIDENT_IMPACT_MINOR`, `INCIDENT_IMPACT_MAJOR`, `INCIDENT_IMPACT_CRITICAL`.
         * 
         * @return builder
         * 
         */
        public Builder incidentImpacts(List<String> incidentImpacts) {
            return incidentImpacts(Output.of(incidentImpacts));
        }

        /**
         * @param incidentImpacts The incident impact level that will trigger the dispatch of a notification. Available values: `INCIDENT_IMPACT_NONE`, `INCIDENT_IMPACT_MINOR`, `INCIDENT_IMPACT_MAJOR`, `INCIDENT_IMPACT_CRITICAL`.
         * 
         * @return builder
         * 
         */
        public Builder incidentImpacts(String... incidentImpacts) {
            return incidentImpacts(List.of(incidentImpacts));
        }

        /**
         * @param inputIds Stream input id to alert on.
         * 
         * @return builder
         * 
         */
        public Builder inputIds(@Nullable Output<List<String>> inputIds) {
            $.inputIds = inputIds;
            return this;
        }

        /**
         * @param inputIds Stream input id to alert on.
         * 
         * @return builder
         * 
         */
        public Builder inputIds(List<String> inputIds) {
            return inputIds(Output.of(inputIds));
        }

        /**
         * @param inputIds Stream input id to alert on.
         * 
         * @return builder
         * 
         */
        public Builder inputIds(String... inputIds) {
            return inputIds(List.of(inputIds));
        }

        /**
         * @param limits A numerical limit. Example: `100`.
         * 
         * @return builder
         * 
         */
        public Builder limits(@Nullable Output<List<String>> limits) {
            $.limits = limits;
            return this;
        }

        /**
         * @param limits A numerical limit. Example: `100`.
         * 
         * @return builder
         * 
         */
        public Builder limits(List<String> limits) {
            return limits(Output.of(limits));
        }

        /**
         * @param limits A numerical limit. Example: `100`.
         * 
         * @return builder
         * 
         */
        public Builder limits(String... limits) {
            return limits(List.of(limits));
        }

        /**
         * @param megabitsPerSeconds Megabits per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder megabitsPerSeconds(@Nullable Output<List<String>> megabitsPerSeconds) {
            $.megabitsPerSeconds = megabitsPerSeconds;
            return this;
        }

        /**
         * @param megabitsPerSeconds Megabits per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder megabitsPerSeconds(List<String> megabitsPerSeconds) {
            return megabitsPerSeconds(Output.of(megabitsPerSeconds));
        }

        /**
         * @param megabitsPerSeconds Megabits per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder megabitsPerSeconds(String... megabitsPerSeconds) {
            return megabitsPerSeconds(List.of(megabitsPerSeconds));
        }

        /**
         * @param newHealths Health status to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder newHealths(@Nullable Output<List<String>> newHealths) {
            $.newHealths = newHealths;
            return this;
        }

        /**
         * @param newHealths Health status to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder newHealths(List<String> newHealths) {
            return newHealths(Output.of(newHealths));
        }

        /**
         * @param newHealths Health status to alert on for pool or origin.
         * 
         * @return builder
         * 
         */
        public Builder newHealths(String... newHealths) {
            return newHealths(List.of(newHealths));
        }

        /**
         * @param newStatuses Tunnel health status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder newStatuses(@Nullable Output<List<String>> newStatuses) {
            $.newStatuses = newStatuses;
            return this;
        }

        /**
         * @param newStatuses Tunnel health status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder newStatuses(List<String> newStatuses) {
            return newStatuses(Output.of(newStatuses));
        }

        /**
         * @param newStatuses Tunnel health status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder newStatuses(String... newStatuses) {
            return newStatuses(List.of(newStatuses));
        }

        /**
         * @param packetsPerSeconds Packets per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder packetsPerSeconds(@Nullable Output<List<String>> packetsPerSeconds) {
            $.packetsPerSeconds = packetsPerSeconds;
            return this;
        }

        /**
         * @param packetsPerSeconds Packets per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder packetsPerSeconds(List<String> packetsPerSeconds) {
            return packetsPerSeconds(Output.of(packetsPerSeconds));
        }

        /**
         * @param packetsPerSeconds Packets per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder packetsPerSeconds(String... packetsPerSeconds) {
            return packetsPerSeconds(List.of(packetsPerSeconds));
        }

        /**
         * @param poolIds Load balancer pool identifier.
         * 
         * @return builder
         * 
         */
        public Builder poolIds(@Nullable Output<List<String>> poolIds) {
            $.poolIds = poolIds;
            return this;
        }

        /**
         * @param poolIds Load balancer pool identifier.
         * 
         * @return builder
         * 
         */
        public Builder poolIds(List<String> poolIds) {
            return poolIds(Output.of(poolIds));
        }

        /**
         * @param poolIds Load balancer pool identifier.
         * 
         * @return builder
         * 
         */
        public Builder poolIds(String... poolIds) {
            return poolIds(List.of(poolIds));
        }

        /**
         * @param products Product name. Available values: `worker_requests`, `worker_durable_objects_requests`, `worker_durable_objects_duration`, `worker_durable_objects_data_transfer`, `worker_durable_objects_stored_data`, `worker_durable_objects_storage_deletes`, `worker_durable_objects_storage_writes`, `worker_durable_objects_storage_reads`.
         * 
         * @return builder
         * 
         */
        public Builder products(@Nullable Output<List<String>> products) {
            $.products = products;
            return this;
        }

        /**
         * @param products Product name. Available values: `worker_requests`, `worker_durable_objects_requests`, `worker_durable_objects_duration`, `worker_durable_objects_data_transfer`, `worker_durable_objects_stored_data`, `worker_durable_objects_storage_deletes`, `worker_durable_objects_storage_writes`, `worker_durable_objects_storage_reads`.
         * 
         * @return builder
         * 
         */
        public Builder products(List<String> products) {
            return products(Output.of(products));
        }

        /**
         * @param products Product name. Available values: `worker_requests`, `worker_durable_objects_requests`, `worker_durable_objects_duration`, `worker_durable_objects_data_transfer`, `worker_durable_objects_stored_data`, `worker_durable_objects_storage_deletes`, `worker_durable_objects_storage_writes`, `worker_durable_objects_storage_reads`.
         * 
         * @return builder
         * 
         */
        public Builder products(String... products) {
            return products(List.of(products));
        }

        /**
         * @param projectIds Identifier of pages project.
         * 
         * @return builder
         * 
         */
        public Builder projectIds(@Nullable Output<List<String>> projectIds) {
            $.projectIds = projectIds;
            return this;
        }

        /**
         * @param projectIds Identifier of pages project.
         * 
         * @return builder
         * 
         */
        public Builder projectIds(List<String> projectIds) {
            return projectIds(Output.of(projectIds));
        }

        /**
         * @param projectIds Identifier of pages project.
         * 
         * @return builder
         * 
         */
        public Builder projectIds(String... projectIds) {
            return projectIds(List.of(projectIds));
        }

        /**
         * @param protocols Protocol to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder protocols(@Nullable Output<List<String>> protocols) {
            $.protocols = protocols;
            return this;
        }

        /**
         * @param protocols Protocol to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder protocols(List<String> protocols) {
            return protocols(Output.of(protocols));
        }

        /**
         * @param protocols Protocol to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param requestsPerSeconds Requests per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerSeconds(@Nullable Output<List<String>> requestsPerSeconds) {
            $.requestsPerSeconds = requestsPerSeconds;
            return this;
        }

        /**
         * @param requestsPerSeconds Requests per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerSeconds(List<String> requestsPerSeconds) {
            return requestsPerSeconds(Output.of(requestsPerSeconds));
        }

        /**
         * @param requestsPerSeconds Requests per second threshold for dos alert.
         * 
         * @return builder
         * 
         */
        public Builder requestsPerSeconds(String... requestsPerSeconds) {
            return requestsPerSeconds(List.of(requestsPerSeconds));
        }

        /**
         * @param selectors Selectors for alert. Valid options depend on the alert type.
         * 
         * @return builder
         * 
         */
        public Builder selectors(@Nullable Output<List<String>> selectors) {
            $.selectors = selectors;
            return this;
        }

        /**
         * @param selectors Selectors for alert. Valid options depend on the alert type.
         * 
         * @return builder
         * 
         */
        public Builder selectors(List<String> selectors) {
            return selectors(Output.of(selectors));
        }

        /**
         * @param selectors Selectors for alert. Valid options depend on the alert type.
         * 
         * @return builder
         * 
         */
        public Builder selectors(String... selectors) {
            return selectors(List.of(selectors));
        }

        public Builder services(@Nullable Output<List<String>> services) {
            $.services = services;
            return this;
        }

        public Builder services(List<String> services) {
            return services(Output.of(services));
        }

        public Builder services(String... services) {
            return services(List.of(services));
        }

        /**
         * @param slos A numerical limit. Example: `99.9`.
         * 
         * @return builder
         * 
         */
        public Builder slos(@Nullable Output<List<String>> slos) {
            $.slos = slos;
            return this;
        }

        /**
         * @param slos A numerical limit. Example: `99.9`.
         * 
         * @return builder
         * 
         */
        public Builder slos(List<String> slos) {
            return slos(Output.of(slos));
        }

        /**
         * @param slos A numerical limit. Example: `99.9`.
         * 
         * @return builder
         * 
         */
        public Builder slos(String... slos) {
            return slos(List.of(slos));
        }

        /**
         * @param statuses Status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable Output<List<String>> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses Status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder statuses(List<String> statuses) {
            return statuses(Output.of(statuses));
        }

        /**
         * @param statuses Status to alert on.
         * 
         * @return builder
         * 
         */
        public Builder statuses(String... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param targetHostnames Target host to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder targetHostnames(@Nullable Output<List<String>> targetHostnames) {
            $.targetHostnames = targetHostnames;
            return this;
        }

        /**
         * @param targetHostnames Target host to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder targetHostnames(List<String> targetHostnames) {
            return targetHostnames(Output.of(targetHostnames));
        }

        /**
         * @param targetHostnames Target host to alert on for dos.
         * 
         * @return builder
         * 
         */
        public Builder targetHostnames(String... targetHostnames) {
            return targetHostnames(List.of(targetHostnames));
        }

        /**
         * @param targetZoneNames Target domain to alert on.
         * 
         * @return builder
         * 
         */
        public Builder targetZoneNames(@Nullable Output<List<String>> targetZoneNames) {
            $.targetZoneNames = targetZoneNames;
            return this;
        }

        /**
         * @param targetZoneNames Target domain to alert on.
         * 
         * @return builder
         * 
         */
        public Builder targetZoneNames(List<String> targetZoneNames) {
            return targetZoneNames(Output.of(targetZoneNames));
        }

        /**
         * @param targetZoneNames Target domain to alert on.
         * 
         * @return builder
         * 
         */
        public Builder targetZoneNames(String... targetZoneNames) {
            return targetZoneNames(List.of(targetZoneNames));
        }

        /**
         * @param tunnelIds Tunnel IDs to alert on.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIds(@Nullable Output<List<String>> tunnelIds) {
            $.tunnelIds = tunnelIds;
            return this;
        }

        /**
         * @param tunnelIds Tunnel IDs to alert on.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIds(List<String> tunnelIds) {
            return tunnelIds(Output.of(tunnelIds));
        }

        /**
         * @param tunnelIds Tunnel IDs to alert on.
         * 
         * @return builder
         * 
         */
        public Builder tunnelIds(String... tunnelIds) {
            return tunnelIds(List.of(tunnelIds));
        }

        /**
         * @param wheres Filter for alert.
         * 
         * @return builder
         * 
         */
        public Builder wheres(@Nullable Output<List<String>> wheres) {
            $.wheres = wheres;
            return this;
        }

        /**
         * @param wheres Filter for alert.
         * 
         * @return builder
         * 
         */
        public Builder wheres(List<String> wheres) {
            return wheres(Output.of(wheres));
        }

        /**
         * @param wheres Filter for alert.
         * 
         * @return builder
         * 
         */
        public Builder wheres(String... wheres) {
            return wheres(List.of(wheres));
        }

        /**
         * @param zones A list of zone identifiers.
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones A list of zone identifiers.
         * 
         * @return builder
         * 
         */
        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        /**
         * @param zones A list of zone identifiers.
         * 
         * @return builder
         * 
         */
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public NotificationPolicyFiltersArgs build() {
            return $;
        }
    }

}
