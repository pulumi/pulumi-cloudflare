// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerPoolLoadShedding {
    /**
     * @return The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
     * 
     */
    private @Nullable Double defaultPercent;
    /**
     * @return The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
     * Available values: &#34;random&#34;, &#34;hash&#34;.
     * 
     */
    private @Nullable String defaultPolicy;
    /**
     * @return The percent of existing sessions to shed from the pool, according to the session policy.
     * 
     */
    private @Nullable Double sessionPercent;
    /**
     * @return Only the hash policy is supported for existing sessions (to avoid exponential decay).
     * Available values: &#34;hash&#34;.
     * 
     */
    private @Nullable String sessionPolicy;

    private LoadBalancerPoolLoadShedding() {}
    /**
     * @return The percent of traffic to shed from the pool, according to the default policy. Applies to new sessions and traffic without session affinity.
     * 
     */
    public Optional<Double> defaultPercent() {
        return Optional.ofNullable(this.defaultPercent);
    }
    /**
     * @return The default policy to use when load shedding. A random policy randomly sheds a given percent of requests. A hash policy computes a hash over the CF-Connecting-IP address and sheds all requests originating from a percent of IPs.
     * Available values: &#34;random&#34;, &#34;hash&#34;.
     * 
     */
    public Optional<String> defaultPolicy() {
        return Optional.ofNullable(this.defaultPolicy);
    }
    /**
     * @return The percent of existing sessions to shed from the pool, according to the session policy.
     * 
     */
    public Optional<Double> sessionPercent() {
        return Optional.ofNullable(this.sessionPercent);
    }
    /**
     * @return Only the hash policy is supported for existing sessions (to avoid exponential decay).
     * Available values: &#34;hash&#34;.
     * 
     */
    public Optional<String> sessionPolicy() {
        return Optional.ofNullable(this.sessionPolicy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerPoolLoadShedding defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double defaultPercent;
        private @Nullable String defaultPolicy;
        private @Nullable Double sessionPercent;
        private @Nullable String sessionPolicy;
        public Builder() {}
        public Builder(LoadBalancerPoolLoadShedding defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultPercent = defaults.defaultPercent;
    	      this.defaultPolicy = defaults.defaultPolicy;
    	      this.sessionPercent = defaults.sessionPercent;
    	      this.sessionPolicy = defaults.sessionPolicy;
        }

        @CustomType.Setter
        public Builder defaultPercent(@Nullable Double defaultPercent) {

            this.defaultPercent = defaultPercent;
            return this;
        }
        @CustomType.Setter
        public Builder defaultPolicy(@Nullable String defaultPolicy) {

            this.defaultPolicy = defaultPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPercent(@Nullable Double sessionPercent) {

            this.sessionPercent = sessionPercent;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPolicy(@Nullable String sessionPolicy) {

            this.sessionPolicy = sessionPolicy;
            return this;
        }
        public LoadBalancerPoolLoadShedding build() {
            final var _resultValue = new LoadBalancerPoolLoadShedding();
            _resultValue.defaultPercent = defaultPercent;
            _resultValue.defaultPolicy = defaultPolicy;
            _resultValue.sessionPercent = sessionPercent;
            _resultValue.sessionPolicy = sessionPolicy;
            return _resultValue;
        }
    }
}
