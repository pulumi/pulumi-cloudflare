// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetZeroTrustDeviceSettingsResult {
    private String accountId;
    /**
     * @return Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
     * 
     */
    private Double disableForTime;
    /**
     * @return Enable gateway proxy filtering on TCP.
     * 
     */
    private Boolean gatewayProxyEnabled;
    /**
     * @return Enable gateway proxy filtering on UDP.
     * 
     */
    private Boolean gatewayUdpProxyEnabled;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Enable installation of cloudflare managed root certificate.
     * 
     */
    private Boolean rootCertificateInstallationEnabled;
    /**
     * @return Enable using CGNAT virtual IPv4.
     * 
     */
    private Boolean useZtVirtualIp;

    private GetZeroTrustDeviceSettingsResult() {}
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Sets the time limit, in seconds, that a user can use an override code to bypass WARP.
     * 
     */
    public Double disableForTime() {
        return this.disableForTime;
    }
    /**
     * @return Enable gateway proxy filtering on TCP.
     * 
     */
    public Boolean gatewayProxyEnabled() {
        return this.gatewayProxyEnabled;
    }
    /**
     * @return Enable gateway proxy filtering on UDP.
     * 
     */
    public Boolean gatewayUdpProxyEnabled() {
        return this.gatewayUdpProxyEnabled;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Enable installation of cloudflare managed root certificate.
     * 
     */
    public Boolean rootCertificateInstallationEnabled() {
        return this.rootCertificateInstallationEnabled;
    }
    /**
     * @return Enable using CGNAT virtual IPv4.
     * 
     */
    public Boolean useZtVirtualIp() {
        return this.useZtVirtualIp;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetZeroTrustDeviceSettingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Double disableForTime;
        private Boolean gatewayProxyEnabled;
        private Boolean gatewayUdpProxyEnabled;
        private String id;
        private Boolean rootCertificateInstallationEnabled;
        private Boolean useZtVirtualIp;
        public Builder() {}
        public Builder(GetZeroTrustDeviceSettingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.disableForTime = defaults.disableForTime;
    	      this.gatewayProxyEnabled = defaults.gatewayProxyEnabled;
    	      this.gatewayUdpProxyEnabled = defaults.gatewayUdpProxyEnabled;
    	      this.id = defaults.id;
    	      this.rootCertificateInstallationEnabled = defaults.rootCertificateInstallationEnabled;
    	      this.useZtVirtualIp = defaults.useZtVirtualIp;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder disableForTime(Double disableForTime) {
            if (disableForTime == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "disableForTime");
            }
            this.disableForTime = disableForTime;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayProxyEnabled(Boolean gatewayProxyEnabled) {
            if (gatewayProxyEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "gatewayProxyEnabled");
            }
            this.gatewayProxyEnabled = gatewayProxyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayUdpProxyEnabled(Boolean gatewayUdpProxyEnabled) {
            if (gatewayUdpProxyEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "gatewayUdpProxyEnabled");
            }
            this.gatewayUdpProxyEnabled = gatewayUdpProxyEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder rootCertificateInstallationEnabled(Boolean rootCertificateInstallationEnabled) {
            if (rootCertificateInstallationEnabled == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "rootCertificateInstallationEnabled");
            }
            this.rootCertificateInstallationEnabled = rootCertificateInstallationEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder useZtVirtualIp(Boolean useZtVirtualIp) {
            if (useZtVirtualIp == null) {
              throw new MissingRequiredPropertyException("GetZeroTrustDeviceSettingsResult", "useZtVirtualIp");
            }
            this.useZtVirtualIp = useZtVirtualIp;
            return this;
        }
        public GetZeroTrustDeviceSettingsResult build() {
            final var _resultValue = new GetZeroTrustDeviceSettingsResult();
            _resultValue.accountId = accountId;
            _resultValue.disableForTime = disableForTime;
            _resultValue.gatewayProxyEnabled = gatewayProxyEnabled;
            _resultValue.gatewayUdpProxyEnabled = gatewayUdpProxyEnabled;
            _resultValue.id = id;
            _resultValue.rootCertificateInstallationEnabled = rootCertificateInstallationEnabled;
            _resultValue.useZtVirtualIp = useZtVirtualIp;
            return _resultValue;
        }
    }
}
