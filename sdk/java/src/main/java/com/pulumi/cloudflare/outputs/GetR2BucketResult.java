// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetR2BucketResult {
    /**
     * @return Account ID.
     * 
     */
    private String accountId;
    /**
     * @return Name of the bucket.
     * 
     */
    private String bucketName;
    /**
     * @return Creation timestamp.
     * 
     */
    private String creationDate;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Jurisdiction where objects in this bucket are guaranteed to be stored.
     * Available values: &#34;default&#34;, &#34;eu&#34;, &#34;fedramp&#34;.
     * 
     */
    private String jurisdiction;
    /**
     * @return Location of the bucket.
     * Available values: &#34;apac&#34;, &#34;eeur&#34;, &#34;enam&#34;, &#34;weur&#34;, &#34;wnam&#34;, &#34;oc&#34;.
     * 
     */
    private String location;
    /**
     * @return Name of the bucket.
     * 
     */
    private String name;
    /**
     * @return Storage class for newly uploaded objects, unless specified otherwise.
     * Available values: &#34;Standard&#34;, &#34;InfrequentAccess&#34;.
     * 
     */
    private String storageClass;

    private GetR2BucketResult() {}
    /**
     * @return Account ID.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return Name of the bucket.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Creation timestamp.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Jurisdiction where objects in this bucket are guaranteed to be stored.
     * Available values: &#34;default&#34;, &#34;eu&#34;, &#34;fedramp&#34;.
     * 
     */
    public String jurisdiction() {
        return this.jurisdiction;
    }
    /**
     * @return Location of the bucket.
     * Available values: &#34;apac&#34;, &#34;eeur&#34;, &#34;enam&#34;, &#34;weur&#34;, &#34;wnam&#34;, &#34;oc&#34;.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Name of the bucket.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Storage class for newly uploaded objects, unless specified otherwise.
     * Available values: &#34;Standard&#34;, &#34;InfrequentAccess&#34;.
     * 
     */
    public String storageClass() {
        return this.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetR2BucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String bucketName;
        private String creationDate;
        private String id;
        private String jurisdiction;
        private String location;
        private String name;
        private String storageClass;
        public Builder() {}
        public Builder(GetR2BucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.bucketName = defaults.bucketName;
    	      this.creationDate = defaults.creationDate;
    	      this.id = defaults.id;
    	      this.jurisdiction = defaults.jurisdiction;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.storageClass = defaults.storageClass;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            if (creationDate == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "creationDate");
            }
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jurisdiction(String jurisdiction) {
            if (jurisdiction == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "jurisdiction");
            }
            this.jurisdiction = jurisdiction;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            if (storageClass == null) {
              throw new MissingRequiredPropertyException("GetR2BucketResult", "storageClass");
            }
            this.storageClass = storageClass;
            return this;
        }
        public GetR2BucketResult build() {
            final var _resultValue = new GetR2BucketResult();
            _resultValue.accountId = accountId;
            _resultValue.bucketName = bucketName;
            _resultValue.creationDate = creationDate;
            _resultValue.id = id;
            _resultValue.jurisdiction = jurisdiction;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.storageClass = storageClass;
            return _resultValue;
        }
    }
}
