// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListArgs Empty = new ListArgs();

    /**
     * Identifier
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return Identifier
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * An informative summary of the list.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An informative summary of the list.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The type of the list. Each type supports specific list items (IP addresses, ASNs, hostnames or redirects).
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return The type of the list. Each type supports specific list items (IP addresses, ASNs, hostnames or redirects).
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * An informative name for the list. Use this name in filter and rule expressions.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return An informative name for the list. Use this name in filter and rule expressions.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ListArgs() {}

    private ListArgs(ListArgs $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.kind = $.kind;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListArgs $;

        public Builder() {
            $ = new ListArgs();
        }

        public Builder(ListArgs defaults) {
            $ = new ListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId Identifier
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description An informative summary of the list.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An informative summary of the list.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param kind The type of the list. Each type supports specific list items (IP addresses, ASNs, hostnames or redirects).
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The type of the list. Each type supports specific list items (IP addresses, ASNs, hostnames or redirects).
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name An informative name for the list. Use this name in filter and rule expressions.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name An informative name for the list. Use this name in filter and rule expressions.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ListArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("ListArgs", "accountId");
            }
            if ($.kind == null) {
                throw new MissingRequiredPropertyException("ListArgs", "kind");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ListArgs", "name");
            }
            return $;
        }
    }

}
