// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudflare.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamsArgs Empty = new GetStreamsArgs();

    /**
     * The account identifier tag.
     * 
     */
    @Import(name="accountId", required=true)
    private Output<String> accountId;

    /**
     * @return The account identifier tag.
     * 
     */
    public Output<String> accountId() {
        return this.accountId;
    }

    /**
     * Lists videos in ascending order of creation.
     * 
     */
    @Import(name="asc")
    private @Nullable Output<Boolean> asc;

    /**
     * @return Lists videos in ascending order of creation.
     * 
     */
    public Optional<Output<Boolean>> asc() {
        return Optional.ofNullable(this.asc);
    }

    /**
     * A user-defined identifier for the media creator.
     * 
     */
    @Import(name="creator")
    private @Nullable Output<String> creator;

    /**
     * @return A user-defined identifier for the media creator.
     * 
     */
    public Optional<Output<String>> creator() {
        return Optional.ofNullable(this.creator);
    }

    /**
     * Lists videos created before the specified date.
     * 
     */
    @Import(name="end")
    private @Nullable Output<String> end;

    /**
     * @return Lists videos created before the specified date.
     * 
     */
    public Optional<Output<String>> end() {
        return Optional.ofNullable(this.end);
    }

    /**
     * Includes the total number of videos associated with the submitted query parameters.
     * 
     */
    @Import(name="includeCounts")
    private @Nullable Output<Boolean> includeCounts;

    /**
     * @return Includes the total number of videos associated with the submitted query parameters.
     * 
     */
    public Optional<Output<Boolean>> includeCounts() {
        return Optional.ofNullable(this.includeCounts);
    }

    /**
     * Max items to fetch, default: 1000
     * 
     */
    @Import(name="maxItems")
    private @Nullable Output<Integer> maxItems;

    /**
     * @return Max items to fetch, default: 1000
     * 
     */
    public Optional<Output<Integer>> maxItems() {
        return Optional.ofNullable(this.maxItems);
    }

    /**
     * Searches over the `name` key in the `meta` field. This field can be set with or after the upload request.
     * 
     */
    @Import(name="search")
    private @Nullable Output<String> search;

    /**
     * @return Searches over the `name` key in the `meta` field. This field can be set with or after the upload request.
     * 
     */
    public Optional<Output<String>> search() {
        return Optional.ofNullable(this.search);
    }

    /**
     * Lists videos created after the specified date.
     * 
     */
    @Import(name="start")
    private @Nullable Output<String> start;

    /**
     * @return Lists videos created after the specified date.
     * 
     */
    public Optional<Output<String>> start() {
        return Optional.ofNullable(this.start);
    }

    /**
     * Specifies the processing status for all quality levels for a video.
     * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;, &#34;live-inprogress&#34;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Specifies the processing status for all quality levels for a video.
     * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;, &#34;live-inprogress&#34;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Specifies whether the video is `vod` or `live`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies whether the video is `vod` or `live`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private GetStreamsArgs() {}

    private GetStreamsArgs(GetStreamsArgs $) {
        this.accountId = $.accountId;
        this.asc = $.asc;
        this.creator = $.creator;
        this.end = $.end;
        this.includeCounts = $.includeCounts;
        this.maxItems = $.maxItems;
        this.search = $.search;
        this.start = $.start;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamsArgs $;

        public Builder() {
            $ = new GetStreamsArgs();
        }

        public Builder(GetStreamsArgs defaults) {
            $ = new GetStreamsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account identifier tag.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param asc Lists videos in ascending order of creation.
         * 
         * @return builder
         * 
         */
        public Builder asc(@Nullable Output<Boolean> asc) {
            $.asc = asc;
            return this;
        }

        /**
         * @param asc Lists videos in ascending order of creation.
         * 
         * @return builder
         * 
         */
        public Builder asc(Boolean asc) {
            return asc(Output.of(asc));
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(@Nullable Output<String> creator) {
            $.creator = creator;
            return this;
        }

        /**
         * @param creator A user-defined identifier for the media creator.
         * 
         * @return builder
         * 
         */
        public Builder creator(String creator) {
            return creator(Output.of(creator));
        }

        /**
         * @param end Lists videos created before the specified date.
         * 
         * @return builder
         * 
         */
        public Builder end(@Nullable Output<String> end) {
            $.end = end;
            return this;
        }

        /**
         * @param end Lists videos created before the specified date.
         * 
         * @return builder
         * 
         */
        public Builder end(String end) {
            return end(Output.of(end));
        }

        /**
         * @param includeCounts Includes the total number of videos associated with the submitted query parameters.
         * 
         * @return builder
         * 
         */
        public Builder includeCounts(@Nullable Output<Boolean> includeCounts) {
            $.includeCounts = includeCounts;
            return this;
        }

        /**
         * @param includeCounts Includes the total number of videos associated with the submitted query parameters.
         * 
         * @return builder
         * 
         */
        public Builder includeCounts(Boolean includeCounts) {
            return includeCounts(Output.of(includeCounts));
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(@Nullable Output<Integer> maxItems) {
            $.maxItems = maxItems;
            return this;
        }

        /**
         * @param maxItems Max items to fetch, default: 1000
         * 
         * @return builder
         * 
         */
        public Builder maxItems(Integer maxItems) {
            return maxItems(Output.of(maxItems));
        }

        /**
         * @param search Searches over the `name` key in the `meta` field. This field can be set with or after the upload request.
         * 
         * @return builder
         * 
         */
        public Builder search(@Nullable Output<String> search) {
            $.search = search;
            return this;
        }

        /**
         * @param search Searches over the `name` key in the `meta` field. This field can be set with or after the upload request.
         * 
         * @return builder
         * 
         */
        public Builder search(String search) {
            return search(Output.of(search));
        }

        /**
         * @param start Lists videos created after the specified date.
         * 
         * @return builder
         * 
         */
        public Builder start(@Nullable Output<String> start) {
            $.start = start;
            return this;
        }

        /**
         * @param start Lists videos created after the specified date.
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            return start(Output.of(start));
        }

        /**
         * @param status Specifies the processing status for all quality levels for a video.
         * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;, &#34;live-inprogress&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Specifies the processing status for all quality levels for a video.
         * Available values: &#34;pendingupload&#34;, &#34;downloading&#34;, &#34;queued&#34;, &#34;inprogress&#34;, &#34;ready&#34;, &#34;error&#34;, &#34;live-inprogress&#34;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Specifies whether the video is `vod` or `live`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies whether the video is `vod` or `live`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GetStreamsArgs build() {
            if ($.accountId == null) {
                throw new MissingRequiredPropertyException("GetStreamsArgs", "accountId");
            }
            return $;
        }
    }

}
